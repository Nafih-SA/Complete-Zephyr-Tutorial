
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	e0 20 01 20 45 79 00 00 a7 4a 02 00 75 79 00 00     . . Ey...J..uy..
  10:	75 79 00 00 75 79 00 00 75 79 00 00 00 00 00 00     uy..uy..uy......
	...
  2c:	a5 76 00 00 75 79 00 00 00 00 00 00 51 76 00 00     .v..uy......Qv..
  3c:	61 38 02 00                                         a8..

00000040 <_irq_vector_table>:
  40:	05 79 00 00 a1 ab 01 00 05 79 00 00 05 79 00 00     .y.......y...y..
  50:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  60:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  70:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  80:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  90:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  a0:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  b0:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  c0:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  d0:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  e0:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..
  f0:	05 79 00 00 05 79 00 00 05 79 00 00 05 79 00 00     .y...y...y...y..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_BT_DEVICE_APPEARANCE+0xa7>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0xd1>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_BT_DEVICE_APPEARANCE+0x127>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_BT_DEVICE_APPEARANCE+0xd1>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0xd1>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0xd1>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_d2uiz>:
     8ec:	004a      	lsls	r2, r1, #1
     8ee:	d211      	bcs.n	914 <__aeabi_d2uiz+0x28>
     8f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8f4:	d211      	bcs.n	91a <__aeabi_d2uiz+0x2e>
     8f6:	d50d      	bpl.n	914 <__aeabi_d2uiz+0x28>
     8f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     900:	d40e      	bmi.n	920 <__aeabi_d2uiz+0x34>
     902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     90a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     90e:	fa23 f002 	lsr.w	r0, r3, r2
     912:	4770      	bx	lr
     914:	f04f 0000 	mov.w	r0, #0
     918:	4770      	bx	lr
     91a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     91e:	d102      	bne.n	926 <__aeabi_d2uiz+0x3a>
     920:	f04f 30ff 	mov.w	r0, #4294967295
     924:	4770      	bx	lr
     926:	f04f 0000 	mov.w	r0, #0
     92a:	4770      	bx	lr

0000092c <__aeabi_d2f>:
     92c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     934:	bf24      	itt	cs
     936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     93a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     93e:	d90d      	bls.n	95c <__aeabi_d2f+0x30>
     940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     94c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     954:	bf08      	it	eq
     956:	f020 0001 	biceq.w	r0, r0, #1
     95a:	4770      	bx	lr
     95c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     960:	d121      	bne.n	9a6 <__aeabi_d2f+0x7a>
     962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     966:	bfbc      	itt	lt
     968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     96c:	4770      	bxlt	lr
     96e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     972:	ea4f 5252 	mov.w	r2, r2, lsr #21
     976:	f1c2 0218 	rsb	r2, r2, #24
     97a:	f1c2 0c20 	rsb	ip, r2, #32
     97e:	fa10 f30c 	lsls.w	r3, r0, ip
     982:	fa20 f002 	lsr.w	r0, r0, r2
     986:	bf18      	it	ne
     988:	f040 0001 	orrne.w	r0, r0, #1
     98c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     994:	fa03 fc0c 	lsl.w	ip, r3, ip
     998:	ea40 000c 	orr.w	r0, r0, ip
     99c:	fa23 f302 	lsr.w	r3, r3, r2
     9a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9a4:	e7cc      	b.n	940 <__aeabi_d2f+0x14>
     9a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9aa:	d107      	bne.n	9bc <__aeabi_d2f+0x90>
     9ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9b0:	bf1e      	ittt	ne
     9b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ba:	4770      	bxne	lr
     9bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop

000009cc <__aeabi_frsub>:
     9cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     9d0:	e002      	b.n	9d8 <__addsf3>
     9d2:	bf00      	nop

000009d4 <__aeabi_fsub>:
     9d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000009d8 <__addsf3>:
     9d8:	0042      	lsls	r2, r0, #1
     9da:	bf1f      	itttt	ne
     9dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     9e0:	ea92 0f03 	teqne	r2, r3
     9e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     9e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9ec:	d06a      	beq.n	ac4 <__addsf3+0xec>
     9ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
     9f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     9f6:	bfc1      	itttt	gt
     9f8:	18d2      	addgt	r2, r2, r3
     9fa:	4041      	eorgt	r1, r0
     9fc:	4048      	eorgt	r0, r1
     9fe:	4041      	eorgt	r1, r0
     a00:	bfb8      	it	lt
     a02:	425b      	neglt	r3, r3
     a04:	2b19      	cmp	r3, #25
     a06:	bf88      	it	hi
     a08:	4770      	bxhi	lr
     a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a16:	bf18      	it	ne
     a18:	4240      	negne	r0, r0
     a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     a26:	bf18      	it	ne
     a28:	4249      	negne	r1, r1
     a2a:	ea92 0f03 	teq	r2, r3
     a2e:	d03f      	beq.n	ab0 <__addsf3+0xd8>
     a30:	f1a2 0201 	sub.w	r2, r2, #1
     a34:	fa41 fc03 	asr.w	ip, r1, r3
     a38:	eb10 000c 	adds.w	r0, r0, ip
     a3c:	f1c3 0320 	rsb	r3, r3, #32
     a40:	fa01 f103 	lsl.w	r1, r1, r3
     a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a48:	d502      	bpl.n	a50 <__addsf3+0x78>
     a4a:	4249      	negs	r1, r1
     a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a54:	d313      	bcc.n	a7e <__addsf3+0xa6>
     a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     a5a:	d306      	bcc.n	a6a <__addsf3+0x92>
     a5c:	0840      	lsrs	r0, r0, #1
     a5e:	ea4f 0131 	mov.w	r1, r1, rrx
     a62:	f102 0201 	add.w	r2, r2, #1
     a66:	2afe      	cmp	r2, #254	; 0xfe
     a68:	d251      	bcs.n	b0e <__addsf3+0x136>
     a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a72:	bf08      	it	eq
     a74:	f020 0001 	biceq.w	r0, r0, #1
     a78:	ea40 0003 	orr.w	r0, r0, r3
     a7c:	4770      	bx	lr
     a7e:	0049      	lsls	r1, r1, #1
     a80:	eb40 0000 	adc.w	r0, r0, r0
     a84:	3a01      	subs	r2, #1
     a86:	bf28      	it	cs
     a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a8c:	d2ed      	bcs.n	a6a <__addsf3+0x92>
     a8e:	fab0 fc80 	clz	ip, r0
     a92:	f1ac 0c08 	sub.w	ip, ip, #8
     a96:	ebb2 020c 	subs.w	r2, r2, ip
     a9a:	fa00 f00c 	lsl.w	r0, r0, ip
     a9e:	bfaa      	itet	ge
     aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     aa4:	4252      	neglt	r2, r2
     aa6:	4318      	orrge	r0, r3
     aa8:	bfbc      	itt	lt
     aaa:	40d0      	lsrlt	r0, r2
     aac:	4318      	orrlt	r0, r3
     aae:	4770      	bx	lr
     ab0:	f092 0f00 	teq	r2, #0
     ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     ab8:	bf06      	itte	eq
     aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     abe:	3201      	addeq	r2, #1
     ac0:	3b01      	subne	r3, #1
     ac2:	e7b5      	b.n	a30 <__addsf3+0x58>
     ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     acc:	bf18      	it	ne
     ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ad2:	d021      	beq.n	b18 <__addsf3+0x140>
     ad4:	ea92 0f03 	teq	r2, r3
     ad8:	d004      	beq.n	ae4 <__addsf3+0x10c>
     ada:	f092 0f00 	teq	r2, #0
     ade:	bf08      	it	eq
     ae0:	4608      	moveq	r0, r1
     ae2:	4770      	bx	lr
     ae4:	ea90 0f01 	teq	r0, r1
     ae8:	bf1c      	itt	ne
     aea:	2000      	movne	r0, #0
     aec:	4770      	bxne	lr
     aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     af2:	d104      	bne.n	afe <__addsf3+0x126>
     af4:	0040      	lsls	r0, r0, #1
     af6:	bf28      	it	cs
     af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     afc:	4770      	bx	lr
     afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b02:	bf3c      	itt	cc
     b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b08:	4770      	bxcc	lr
     b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b16:	4770      	bx	lr
     b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b1c:	bf16      	itet	ne
     b1e:	4608      	movne	r0, r1
     b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     b24:	4601      	movne	r1, r0
     b26:	0242      	lsls	r2, r0, #9
     b28:	bf06      	itte	eq
     b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     b2e:	ea90 0f01 	teqeq	r0, r1
     b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     b36:	4770      	bx	lr

00000b38 <__aeabi_ui2f>:
     b38:	f04f 0300 	mov.w	r3, #0
     b3c:	e004      	b.n	b48 <__aeabi_i2f+0x8>
     b3e:	bf00      	nop

00000b40 <__aeabi_i2f>:
     b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     b44:	bf48      	it	mi
     b46:	4240      	negmi	r0, r0
     b48:	ea5f 0c00 	movs.w	ip, r0
     b4c:	bf08      	it	eq
     b4e:	4770      	bxeq	lr
     b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     b54:	4601      	mov	r1, r0
     b56:	f04f 0000 	mov.w	r0, #0
     b5a:	e01c      	b.n	b96 <__aeabi_l2f+0x2a>

00000b5c <__aeabi_ul2f>:
     b5c:	ea50 0201 	orrs.w	r2, r0, r1
     b60:	bf08      	it	eq
     b62:	4770      	bxeq	lr
     b64:	f04f 0300 	mov.w	r3, #0
     b68:	e00a      	b.n	b80 <__aeabi_l2f+0x14>
     b6a:	bf00      	nop

00000b6c <__aeabi_l2f>:
     b6c:	ea50 0201 	orrs.w	r2, r0, r1
     b70:	bf08      	it	eq
     b72:	4770      	bxeq	lr
     b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b78:	d502      	bpl.n	b80 <__aeabi_l2f+0x14>
     b7a:	4240      	negs	r0, r0
     b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b80:	ea5f 0c01 	movs.w	ip, r1
     b84:	bf02      	ittt	eq
     b86:	4684      	moveq	ip, r0
     b88:	4601      	moveq	r1, r0
     b8a:	2000      	moveq	r0, #0
     b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b90:	bf08      	it	eq
     b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b9a:	fabc f28c 	clz	r2, ip
     b9e:	3a08      	subs	r2, #8
     ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ba4:	db10      	blt.n	bc8 <__aeabi_l2f+0x5c>
     ba6:	fa01 fc02 	lsl.w	ip, r1, r2
     baa:	4463      	add	r3, ip
     bac:	fa00 fc02 	lsl.w	ip, r0, r2
     bb0:	f1c2 0220 	rsb	r2, r2, #32
     bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     bb8:	fa20 f202 	lsr.w	r2, r0, r2
     bbc:	eb43 0002 	adc.w	r0, r3, r2
     bc0:	bf08      	it	eq
     bc2:	f020 0001 	biceq.w	r0, r0, #1
     bc6:	4770      	bx	lr
     bc8:	f102 0220 	add.w	r2, r2, #32
     bcc:	fa01 fc02 	lsl.w	ip, r1, r2
     bd0:	f1c2 0220 	rsb	r2, r2, #32
     bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     bd8:	fa21 f202 	lsr.w	r2, r1, r2
     bdc:	eb43 0002 	adc.w	r0, r3, r2
     be0:	bf08      	it	eq
     be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     be6:	4770      	bx	lr

00000be8 <__aeabi_fmul>:
     be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     bf0:	bf1e      	ittt	ne
     bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     bf6:	ea92 0f0c 	teqne	r2, ip
     bfa:	ea93 0f0c 	teqne	r3, ip
     bfe:	d06f      	beq.n	ce0 <__aeabi_fmul+0xf8>
     c00:	441a      	add	r2, r3
     c02:	ea80 0c01 	eor.w	ip, r0, r1
     c06:	0240      	lsls	r0, r0, #9
     c08:	bf18      	it	ne
     c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c0e:	d01e      	beq.n	c4e <__aeabi_fmul+0x66>
     c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c1c:	fba0 3101 	umull	r3, r1, r0, r1
     c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     c28:	bf3e      	ittt	cc
     c2a:	0049      	lslcc	r1, r1, #1
     c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     c30:	005b      	lslcc	r3, r3, #1
     c32:	ea40 0001 	orr.w	r0, r0, r1
     c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     c3a:	2afd      	cmp	r2, #253	; 0xfd
     c3c:	d81d      	bhi.n	c7a <__aeabi_fmul+0x92>
     c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c46:	bf08      	it	eq
     c48:	f020 0001 	biceq.w	r0, r0, #1
     c4c:	4770      	bx	lr
     c4e:	f090 0f00 	teq	r0, #0
     c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     c56:	bf08      	it	eq
     c58:	0249      	lsleq	r1, r1, #9
     c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     c62:	3a7f      	subs	r2, #127	; 0x7f
     c64:	bfc2      	ittt	gt
     c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c6e:	4770      	bxgt	lr
     c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c74:	f04f 0300 	mov.w	r3, #0
     c78:	3a01      	subs	r2, #1
     c7a:	dc5d      	bgt.n	d38 <__aeabi_fmul+0x150>
     c7c:	f112 0f19 	cmn.w	r2, #25
     c80:	bfdc      	itt	le
     c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     c86:	4770      	bxle	lr
     c88:	f1c2 0200 	rsb	r2, r2, #0
     c8c:	0041      	lsls	r1, r0, #1
     c8e:	fa21 f102 	lsr.w	r1, r1, r2
     c92:	f1c2 0220 	rsb	r2, r2, #32
     c96:	fa00 fc02 	lsl.w	ip, r0, r2
     c9a:	ea5f 0031 	movs.w	r0, r1, rrx
     c9e:	f140 0000 	adc.w	r0, r0, #0
     ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     ca6:	bf08      	it	eq
     ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     cac:	4770      	bx	lr
     cae:	f092 0f00 	teq	r2, #0
     cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     cb6:	bf02      	ittt	eq
     cb8:	0040      	lsleq	r0, r0, #1
     cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     cbe:	3a01      	subeq	r2, #1
     cc0:	d0f9      	beq.n	cb6 <__aeabi_fmul+0xce>
     cc2:	ea40 000c 	orr.w	r0, r0, ip
     cc6:	f093 0f00 	teq	r3, #0
     cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     cce:	bf02      	ittt	eq
     cd0:	0049      	lsleq	r1, r1, #1
     cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     cd6:	3b01      	subeq	r3, #1
     cd8:	d0f9      	beq.n	cce <__aeabi_fmul+0xe6>
     cda:	ea41 010c 	orr.w	r1, r1, ip
     cde:	e78f      	b.n	c00 <__aeabi_fmul+0x18>
     ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ce4:	ea92 0f0c 	teq	r2, ip
     ce8:	bf18      	it	ne
     cea:	ea93 0f0c 	teqne	r3, ip
     cee:	d00a      	beq.n	d06 <__aeabi_fmul+0x11e>
     cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     cf4:	bf18      	it	ne
     cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     cfa:	d1d8      	bne.n	cae <__aeabi_fmul+0xc6>
     cfc:	ea80 0001 	eor.w	r0, r0, r1
     d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d04:	4770      	bx	lr
     d06:	f090 0f00 	teq	r0, #0
     d0a:	bf17      	itett	ne
     d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d10:	4608      	moveq	r0, r1
     d12:	f091 0f00 	teqne	r1, #0
     d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d1a:	d014      	beq.n	d46 <__aeabi_fmul+0x15e>
     d1c:	ea92 0f0c 	teq	r2, ip
     d20:	d101      	bne.n	d26 <__aeabi_fmul+0x13e>
     d22:	0242      	lsls	r2, r0, #9
     d24:	d10f      	bne.n	d46 <__aeabi_fmul+0x15e>
     d26:	ea93 0f0c 	teq	r3, ip
     d2a:	d103      	bne.n	d34 <__aeabi_fmul+0x14c>
     d2c:	024b      	lsls	r3, r1, #9
     d2e:	bf18      	it	ne
     d30:	4608      	movne	r0, r1
     d32:	d108      	bne.n	d46 <__aeabi_fmul+0x15e>
     d34:	ea80 0001 	eor.w	r0, r0, r1
     d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d44:	4770      	bx	lr
     d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     d4e:	4770      	bx	lr

00000d50 <__aeabi_fdiv>:
     d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d58:	bf1e      	ittt	ne
     d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d5e:	ea92 0f0c 	teqne	r2, ip
     d62:	ea93 0f0c 	teqne	r3, ip
     d66:	d069      	beq.n	e3c <__aeabi_fdiv+0xec>
     d68:	eba2 0203 	sub.w	r2, r2, r3
     d6c:	ea80 0c01 	eor.w	ip, r0, r1
     d70:	0249      	lsls	r1, r1, #9
     d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
     d76:	d037      	beq.n	de8 <__aeabi_fdiv+0x98>
     d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d88:	428b      	cmp	r3, r1
     d8a:	bf38      	it	cc
     d8c:	005b      	lslcc	r3, r3, #1
     d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d96:	428b      	cmp	r3, r1
     d98:	bf24      	itt	cs
     d9a:	1a5b      	subcs	r3, r3, r1
     d9c:	ea40 000c 	orrcs.w	r0, r0, ip
     da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     da4:	bf24      	itt	cs
     da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     db2:	bf24      	itt	cs
     db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     dc0:	bf24      	itt	cs
     dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     dca:	011b      	lsls	r3, r3, #4
     dcc:	bf18      	it	ne
     dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     dd2:	d1e0      	bne.n	d96 <__aeabi_fdiv+0x46>
     dd4:	2afd      	cmp	r2, #253	; 0xfd
     dd6:	f63f af50 	bhi.w	c7a <__aeabi_fmul+0x92>
     dda:	428b      	cmp	r3, r1
     ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     de0:	bf08      	it	eq
     de2:	f020 0001 	biceq.w	r0, r0, #1
     de6:	4770      	bx	lr
     de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     df0:	327f      	adds	r2, #127	; 0x7f
     df2:	bfc2      	ittt	gt
     df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dfc:	4770      	bxgt	lr
     dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e02:	f04f 0300 	mov.w	r3, #0
     e06:	3a01      	subs	r2, #1
     e08:	e737      	b.n	c7a <__aeabi_fmul+0x92>
     e0a:	f092 0f00 	teq	r2, #0
     e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e12:	bf02      	ittt	eq
     e14:	0040      	lsleq	r0, r0, #1
     e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e1a:	3a01      	subeq	r2, #1
     e1c:	d0f9      	beq.n	e12 <__aeabi_fdiv+0xc2>
     e1e:	ea40 000c 	orr.w	r0, r0, ip
     e22:	f093 0f00 	teq	r3, #0
     e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e2a:	bf02      	ittt	eq
     e2c:	0049      	lsleq	r1, r1, #1
     e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e32:	3b01      	subeq	r3, #1
     e34:	d0f9      	beq.n	e2a <__aeabi_fdiv+0xda>
     e36:	ea41 010c 	orr.w	r1, r1, ip
     e3a:	e795      	b.n	d68 <__aeabi_fdiv+0x18>
     e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e40:	ea92 0f0c 	teq	r2, ip
     e44:	d108      	bne.n	e58 <__aeabi_fdiv+0x108>
     e46:	0242      	lsls	r2, r0, #9
     e48:	f47f af7d 	bne.w	d46 <__aeabi_fmul+0x15e>
     e4c:	ea93 0f0c 	teq	r3, ip
     e50:	f47f af70 	bne.w	d34 <__aeabi_fmul+0x14c>
     e54:	4608      	mov	r0, r1
     e56:	e776      	b.n	d46 <__aeabi_fmul+0x15e>
     e58:	ea93 0f0c 	teq	r3, ip
     e5c:	d104      	bne.n	e68 <__aeabi_fdiv+0x118>
     e5e:	024b      	lsls	r3, r1, #9
     e60:	f43f af4c 	beq.w	cfc <__aeabi_fmul+0x114>
     e64:	4608      	mov	r0, r1
     e66:	e76e      	b.n	d46 <__aeabi_fmul+0x15e>
     e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e6c:	bf18      	it	ne
     e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e72:	d1ca      	bne.n	e0a <__aeabi_fdiv+0xba>
     e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     e78:	f47f af5c 	bne.w	d34 <__aeabi_fmul+0x14c>
     e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     e80:	f47f af3c 	bne.w	cfc <__aeabi_fmul+0x114>
     e84:	e75f      	b.n	d46 <__aeabi_fmul+0x15e>
     e86:	bf00      	nop

00000e88 <__aeabi_ldivmod>:
     e88:	b97b      	cbnz	r3, eaa <__aeabi_ldivmod+0x22>
     e8a:	b972      	cbnz	r2, eaa <__aeabi_ldivmod+0x22>
     e8c:	2900      	cmp	r1, #0
     e8e:	bfbe      	ittt	lt
     e90:	2000      	movlt	r0, #0
     e92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     e96:	e006      	blt.n	ea6 <__aeabi_ldivmod+0x1e>
     e98:	bf08      	it	eq
     e9a:	2800      	cmpeq	r0, #0
     e9c:	bf1c      	itt	ne
     e9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     ea2:	f04f 30ff 	movne.w	r0, #4294967295
     ea6:	f000 b9bf 	b.w	1228 <__aeabi_idiv0>
     eaa:	f1ad 0c08 	sub.w	ip, sp, #8
     eae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     eb2:	2900      	cmp	r1, #0
     eb4:	db09      	blt.n	eca <__aeabi_ldivmod+0x42>
     eb6:	2b00      	cmp	r3, #0
     eb8:	db1a      	blt.n	ef0 <__aeabi_ldivmod+0x68>
     eba:	f000 f84d 	bl	f58 <__udivmoddi4>
     ebe:	f8dd e004 	ldr.w	lr, [sp, #4]
     ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ec6:	b004      	add	sp, #16
     ec8:	4770      	bx	lr
     eca:	4240      	negs	r0, r0
     ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ed0:	2b00      	cmp	r3, #0
     ed2:	db1b      	blt.n	f0c <__aeabi_ldivmod+0x84>
     ed4:	f000 f840 	bl	f58 <__udivmoddi4>
     ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
     edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ee0:	b004      	add	sp, #16
     ee2:	4240      	negs	r0, r0
     ee4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ee8:	4252      	negs	r2, r2
     eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     eee:	4770      	bx	lr
     ef0:	4252      	negs	r2, r2
     ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ef6:	f000 f82f 	bl	f58 <__udivmoddi4>
     efa:	f8dd e004 	ldr.w	lr, [sp, #4]
     efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f02:	b004      	add	sp, #16
     f04:	4240      	negs	r0, r0
     f06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     f0a:	4770      	bx	lr
     f0c:	4252      	negs	r2, r2
     f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f12:	f000 f821 	bl	f58 <__udivmoddi4>
     f16:	f8dd e004 	ldr.w	lr, [sp, #4]
     f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f1e:	b004      	add	sp, #16
     f20:	4252      	negs	r2, r2
     f22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f26:	4770      	bx	lr

00000f28 <__aeabi_uldivmod>:
     f28:	b953      	cbnz	r3, f40 <__aeabi_uldivmod+0x18>
     f2a:	b94a      	cbnz	r2, f40 <__aeabi_uldivmod+0x18>
     f2c:	2900      	cmp	r1, #0
     f2e:	bf08      	it	eq
     f30:	2800      	cmpeq	r0, #0
     f32:	bf1c      	itt	ne
     f34:	f04f 31ff 	movne.w	r1, #4294967295
     f38:	f04f 30ff 	movne.w	r0, #4294967295
     f3c:	f000 b974 	b.w	1228 <__aeabi_idiv0>
     f40:	f1ad 0c08 	sub.w	ip, sp, #8
     f44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     f48:	f000 f806 	bl	f58 <__udivmoddi4>
     f4c:	f8dd e004 	ldr.w	lr, [sp, #4]
     f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f54:	b004      	add	sp, #16
     f56:	4770      	bx	lr

00000f58 <__udivmoddi4>:
     f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f5c:	9e08      	ldr	r6, [sp, #32]
     f5e:	460d      	mov	r5, r1
     f60:	4604      	mov	r4, r0
     f62:	4688      	mov	r8, r1
     f64:	2b00      	cmp	r3, #0
     f66:	d14d      	bne.n	1004 <__udivmoddi4+0xac>
     f68:	428a      	cmp	r2, r1
     f6a:	4694      	mov	ip, r2
     f6c:	d968      	bls.n	1040 <__udivmoddi4+0xe8>
     f6e:	fab2 f282 	clz	r2, r2
     f72:	b152      	cbz	r2, f8a <__udivmoddi4+0x32>
     f74:	fa01 f302 	lsl.w	r3, r1, r2
     f78:	f1c2 0120 	rsb	r1, r2, #32
     f7c:	fa20 f101 	lsr.w	r1, r0, r1
     f80:	fa0c fc02 	lsl.w	ip, ip, r2
     f84:	ea41 0803 	orr.w	r8, r1, r3
     f88:	4094      	lsls	r4, r2
     f8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
     f8e:	0c21      	lsrs	r1, r4, #16
     f90:	fbb8 fef5 	udiv	lr, r8, r5
     f94:	fa1f f78c 	uxth.w	r7, ip
     f98:	fb05 831e 	mls	r3, r5, lr, r8
     f9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     fa0:	fb0e f107 	mul.w	r1, lr, r7
     fa4:	4299      	cmp	r1, r3
     fa6:	d90b      	bls.n	fc0 <__udivmoddi4+0x68>
     fa8:	eb1c 0303 	adds.w	r3, ip, r3
     fac:	f10e 30ff 	add.w	r0, lr, #4294967295
     fb0:	f080 811e 	bcs.w	11f0 <__udivmoddi4+0x298>
     fb4:	4299      	cmp	r1, r3
     fb6:	f240 811b 	bls.w	11f0 <__udivmoddi4+0x298>
     fba:	f1ae 0e02 	sub.w	lr, lr, #2
     fbe:	4463      	add	r3, ip
     fc0:	1a5b      	subs	r3, r3, r1
     fc2:	b2a4      	uxth	r4, r4
     fc4:	fbb3 f0f5 	udiv	r0, r3, r5
     fc8:	fb05 3310 	mls	r3, r5, r0, r3
     fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     fd0:	fb00 f707 	mul.w	r7, r0, r7
     fd4:	42a7      	cmp	r7, r4
     fd6:	d90a      	bls.n	fee <__udivmoddi4+0x96>
     fd8:	eb1c 0404 	adds.w	r4, ip, r4
     fdc:	f100 33ff 	add.w	r3, r0, #4294967295
     fe0:	f080 8108 	bcs.w	11f4 <__udivmoddi4+0x29c>
     fe4:	42a7      	cmp	r7, r4
     fe6:	f240 8105 	bls.w	11f4 <__udivmoddi4+0x29c>
     fea:	4464      	add	r4, ip
     fec:	3802      	subs	r0, #2
     fee:	1be4      	subs	r4, r4, r7
     ff0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     ff4:	2100      	movs	r1, #0
     ff6:	b11e      	cbz	r6, 1000 <__udivmoddi4+0xa8>
     ff8:	40d4      	lsrs	r4, r2
     ffa:	2300      	movs	r3, #0
     ffc:	e9c6 4300 	strd	r4, r3, [r6]
    1000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1004:	428b      	cmp	r3, r1
    1006:	d908      	bls.n	101a <__udivmoddi4+0xc2>
    1008:	2e00      	cmp	r6, #0
    100a:	f000 80ee 	beq.w	11ea <__udivmoddi4+0x292>
    100e:	2100      	movs	r1, #0
    1010:	e9c6 0500 	strd	r0, r5, [r6]
    1014:	4608      	mov	r0, r1
    1016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    101a:	fab3 f183 	clz	r1, r3
    101e:	2900      	cmp	r1, #0
    1020:	d14a      	bne.n	10b8 <__udivmoddi4+0x160>
    1022:	42ab      	cmp	r3, r5
    1024:	d302      	bcc.n	102c <__udivmoddi4+0xd4>
    1026:	4282      	cmp	r2, r0
    1028:	f200 80f9 	bhi.w	121e <__udivmoddi4+0x2c6>
    102c:	1a84      	subs	r4, r0, r2
    102e:	eb65 0303 	sbc.w	r3, r5, r3
    1032:	2001      	movs	r0, #1
    1034:	4698      	mov	r8, r3
    1036:	2e00      	cmp	r6, #0
    1038:	d0e2      	beq.n	1000 <__udivmoddi4+0xa8>
    103a:	e9c6 4800 	strd	r4, r8, [r6]
    103e:	e7df      	b.n	1000 <__udivmoddi4+0xa8>
    1040:	b902      	cbnz	r2, 1044 <__udivmoddi4+0xec>
    1042:	deff      	udf	#255	; 0xff
    1044:	fab2 f282 	clz	r2, r2
    1048:	2a00      	cmp	r2, #0
    104a:	f040 8091 	bne.w	1170 <__udivmoddi4+0x218>
    104e:	eba1 050c 	sub.w	r5, r1, ip
    1052:	ea4f 471c 	mov.w	r7, ip, lsr #16
    1056:	fa1f fe8c 	uxth.w	lr, ip
    105a:	2101      	movs	r1, #1
    105c:	fbb5 f3f7 	udiv	r3, r5, r7
    1060:	fb07 5013 	mls	r0, r7, r3, r5
    1064:	0c25      	lsrs	r5, r4, #16
    1066:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    106a:	fb0e f003 	mul.w	r0, lr, r3
    106e:	42a8      	cmp	r0, r5
    1070:	d908      	bls.n	1084 <__udivmoddi4+0x12c>
    1072:	eb1c 0505 	adds.w	r5, ip, r5
    1076:	f103 38ff 	add.w	r8, r3, #4294967295
    107a:	d202      	bcs.n	1082 <__udivmoddi4+0x12a>
    107c:	42a8      	cmp	r0, r5
    107e:	f200 80cb 	bhi.w	1218 <__udivmoddi4+0x2c0>
    1082:	4643      	mov	r3, r8
    1084:	1a2d      	subs	r5, r5, r0
    1086:	b2a4      	uxth	r4, r4
    1088:	fbb5 f0f7 	udiv	r0, r5, r7
    108c:	fb07 5510 	mls	r5, r7, r0, r5
    1090:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1094:	fb0e fe00 	mul.w	lr, lr, r0
    1098:	45a6      	cmp	lr, r4
    109a:	d908      	bls.n	10ae <__udivmoddi4+0x156>
    109c:	eb1c 0404 	adds.w	r4, ip, r4
    10a0:	f100 35ff 	add.w	r5, r0, #4294967295
    10a4:	d202      	bcs.n	10ac <__udivmoddi4+0x154>
    10a6:	45a6      	cmp	lr, r4
    10a8:	f200 80bb 	bhi.w	1222 <__udivmoddi4+0x2ca>
    10ac:	4628      	mov	r0, r5
    10ae:	eba4 040e 	sub.w	r4, r4, lr
    10b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    10b6:	e79e      	b.n	ff6 <__udivmoddi4+0x9e>
    10b8:	f1c1 0720 	rsb	r7, r1, #32
    10bc:	408b      	lsls	r3, r1
    10be:	fa22 fc07 	lsr.w	ip, r2, r7
    10c2:	ea4c 0c03 	orr.w	ip, ip, r3
    10c6:	fa20 f407 	lsr.w	r4, r0, r7
    10ca:	fa05 f301 	lsl.w	r3, r5, r1
    10ce:	431c      	orrs	r4, r3
    10d0:	40fd      	lsrs	r5, r7
    10d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
    10d6:	fa00 f301 	lsl.w	r3, r0, r1
    10da:	fbb5 f8f9 	udiv	r8, r5, r9
    10de:	0c20      	lsrs	r0, r4, #16
    10e0:	fa1f fe8c 	uxth.w	lr, ip
    10e4:	fb09 5518 	mls	r5, r9, r8, r5
    10e8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    10ec:	fb08 f00e 	mul.w	r0, r8, lr
    10f0:	42a8      	cmp	r0, r5
    10f2:	fa02 f201 	lsl.w	r2, r2, r1
    10f6:	d90b      	bls.n	1110 <__udivmoddi4+0x1b8>
    10f8:	eb1c 0505 	adds.w	r5, ip, r5
    10fc:	f108 3aff 	add.w	sl, r8, #4294967295
    1100:	f080 8088 	bcs.w	1214 <__udivmoddi4+0x2bc>
    1104:	42a8      	cmp	r0, r5
    1106:	f240 8085 	bls.w	1214 <__udivmoddi4+0x2bc>
    110a:	f1a8 0802 	sub.w	r8, r8, #2
    110e:	4465      	add	r5, ip
    1110:	1a2d      	subs	r5, r5, r0
    1112:	b2a4      	uxth	r4, r4
    1114:	fbb5 f0f9 	udiv	r0, r5, r9
    1118:	fb09 5510 	mls	r5, r9, r0, r5
    111c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1120:	fb00 fe0e 	mul.w	lr, r0, lr
    1124:	45ae      	cmp	lr, r5
    1126:	d908      	bls.n	113a <__udivmoddi4+0x1e2>
    1128:	eb1c 0505 	adds.w	r5, ip, r5
    112c:	f100 34ff 	add.w	r4, r0, #4294967295
    1130:	d26c      	bcs.n	120c <__udivmoddi4+0x2b4>
    1132:	45ae      	cmp	lr, r5
    1134:	d96a      	bls.n	120c <__udivmoddi4+0x2b4>
    1136:	3802      	subs	r0, #2
    1138:	4465      	add	r5, ip
    113a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    113e:	fba0 9402 	umull	r9, r4, r0, r2
    1142:	eba5 050e 	sub.w	r5, r5, lr
    1146:	42a5      	cmp	r5, r4
    1148:	46c8      	mov	r8, r9
    114a:	46a6      	mov	lr, r4
    114c:	d356      	bcc.n	11fc <__udivmoddi4+0x2a4>
    114e:	d053      	beq.n	11f8 <__udivmoddi4+0x2a0>
    1150:	b15e      	cbz	r6, 116a <__udivmoddi4+0x212>
    1152:	ebb3 0208 	subs.w	r2, r3, r8
    1156:	eb65 050e 	sbc.w	r5, r5, lr
    115a:	fa05 f707 	lsl.w	r7, r5, r7
    115e:	fa22 f301 	lsr.w	r3, r2, r1
    1162:	40cd      	lsrs	r5, r1
    1164:	431f      	orrs	r7, r3
    1166:	e9c6 7500 	strd	r7, r5, [r6]
    116a:	2100      	movs	r1, #0
    116c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1170:	f1c2 0320 	rsb	r3, r2, #32
    1174:	fa20 f103 	lsr.w	r1, r0, r3
    1178:	fa0c fc02 	lsl.w	ip, ip, r2
    117c:	fa25 f303 	lsr.w	r3, r5, r3
    1180:	4095      	lsls	r5, r2
    1182:	430d      	orrs	r5, r1
    1184:	ea4f 471c 	mov.w	r7, ip, lsr #16
    1188:	fa1f fe8c 	uxth.w	lr, ip
    118c:	fbb3 f1f7 	udiv	r1, r3, r7
    1190:	fb07 3011 	mls	r0, r7, r1, r3
    1194:	0c2b      	lsrs	r3, r5, #16
    1196:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    119a:	fb01 f00e 	mul.w	r0, r1, lr
    119e:	4298      	cmp	r0, r3
    11a0:	fa04 f402 	lsl.w	r4, r4, r2
    11a4:	d908      	bls.n	11b8 <__udivmoddi4+0x260>
    11a6:	eb1c 0303 	adds.w	r3, ip, r3
    11aa:	f101 38ff 	add.w	r8, r1, #4294967295
    11ae:	d22f      	bcs.n	1210 <__udivmoddi4+0x2b8>
    11b0:	4298      	cmp	r0, r3
    11b2:	d92d      	bls.n	1210 <__udivmoddi4+0x2b8>
    11b4:	3902      	subs	r1, #2
    11b6:	4463      	add	r3, ip
    11b8:	1a1b      	subs	r3, r3, r0
    11ba:	b2ad      	uxth	r5, r5
    11bc:	fbb3 f0f7 	udiv	r0, r3, r7
    11c0:	fb07 3310 	mls	r3, r7, r0, r3
    11c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11c8:	fb00 f30e 	mul.w	r3, r0, lr
    11cc:	42ab      	cmp	r3, r5
    11ce:	d908      	bls.n	11e2 <__udivmoddi4+0x28a>
    11d0:	eb1c 0505 	adds.w	r5, ip, r5
    11d4:	f100 38ff 	add.w	r8, r0, #4294967295
    11d8:	d216      	bcs.n	1208 <__udivmoddi4+0x2b0>
    11da:	42ab      	cmp	r3, r5
    11dc:	d914      	bls.n	1208 <__udivmoddi4+0x2b0>
    11de:	3802      	subs	r0, #2
    11e0:	4465      	add	r5, ip
    11e2:	1aed      	subs	r5, r5, r3
    11e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    11e8:	e738      	b.n	105c <__udivmoddi4+0x104>
    11ea:	4631      	mov	r1, r6
    11ec:	4630      	mov	r0, r6
    11ee:	e707      	b.n	1000 <__udivmoddi4+0xa8>
    11f0:	4686      	mov	lr, r0
    11f2:	e6e5      	b.n	fc0 <__udivmoddi4+0x68>
    11f4:	4618      	mov	r0, r3
    11f6:	e6fa      	b.n	fee <__udivmoddi4+0x96>
    11f8:	454b      	cmp	r3, r9
    11fa:	d2a9      	bcs.n	1150 <__udivmoddi4+0x1f8>
    11fc:	ebb9 0802 	subs.w	r8, r9, r2
    1200:	eb64 0e0c 	sbc.w	lr, r4, ip
    1204:	3801      	subs	r0, #1
    1206:	e7a3      	b.n	1150 <__udivmoddi4+0x1f8>
    1208:	4640      	mov	r0, r8
    120a:	e7ea      	b.n	11e2 <__udivmoddi4+0x28a>
    120c:	4620      	mov	r0, r4
    120e:	e794      	b.n	113a <__udivmoddi4+0x1e2>
    1210:	4641      	mov	r1, r8
    1212:	e7d1      	b.n	11b8 <__udivmoddi4+0x260>
    1214:	46d0      	mov	r8, sl
    1216:	e77b      	b.n	1110 <__udivmoddi4+0x1b8>
    1218:	3b02      	subs	r3, #2
    121a:	4465      	add	r5, ip
    121c:	e732      	b.n	1084 <__udivmoddi4+0x12c>
    121e:	4608      	mov	r0, r1
    1220:	e709      	b.n	1036 <__udivmoddi4+0xde>
    1222:	4464      	add	r4, ip
    1224:	3802      	subs	r0, #2
    1226:	e742      	b.n	10ae <__udivmoddi4+0x156>

00001228 <__aeabi_idiv0>:
    1228:	4770      	bx	lr
    122a:	bf00      	nop
    122c:	0000      	movs	r0, r0
	...

00001230 <brightness_task>:
		k_msleep(500);
	}
}

void brightness_task()
{
    1230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1234:	b094      	sub	sp, #80	; 0x50
    1236:	466d      	mov	r5, sp
	float light_data[LIGHT_BUFFER_COUNT];
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1238:	2400      	movs	r4, #0
		light_data[i] = AnalogRead(4);
    123a:	2004      	movs	r0, #4
    123c:	f000 f8cc 	bl	13d8 <AnalogRead>
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1240:	3401      	adds	r4, #1
    1242:	2c14      	cmp	r4, #20
		light_data[i] = AnalogRead(4);
    1244:	f845 0b04 	str.w	r0, [r5], #4
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1248:	d1f7      	bne.n	123a <brightness_task+0xa>
		}
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
		float light_value = sum / LIGHT_BUFFER_COUNT;
		//printf("light =%f\n",light_value);
		brightness_value = 75.55 * light_value;
    124a:	a717      	add	r7, pc, #92	; (adr r7, 12a8 <brightness_task+0x78>)
    124c:	e9d7 6700 	ldrd	r6, r7, [r7]
		float light_value = sum / LIGHT_BUFFER_COUNT;
    1250:	f8df 905c 	ldr.w	r9, [pc, #92]	; 12b0 <brightness_task+0x80>
		float sum = 0;
    1254:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1258:	46e8      	mov	r8, sp
    125a:	2513      	movs	r5, #19
		float sum = 0;
    125c:	4654      	mov	r4, sl
			light_data[i] = light_data[i + 1];
    125e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1262:	f848 1b04 	str.w	r1, [r8], #4
			sum = sum + light_data[i];
    1266:	4620      	mov	r0, r4
    1268:	f7ff fbb6 	bl	9d8 <__addsf3>
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    126c:	3d01      	subs	r5, #1
			sum = sum + light_data[i];
    126e:	4604      	mov	r4, r0
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    1270:	d1f5      	bne.n	125e <brightness_task+0x2e>
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    1272:	2004      	movs	r0, #4
    1274:	f000 f8b0 	bl	13d8 <AnalogRead>
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    1278:	4621      	mov	r1, r4
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    127a:	9013      	str	r0, [sp, #76]	; 0x4c
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    127c:	f7ff fbac 	bl	9d8 <__addsf3>
		float light_value = sum / LIGHT_BUFFER_COUNT;
    1280:	4649      	mov	r1, r9
    1282:	f7ff fd65 	bl	d50 <__aeabi_fdiv>
		brightness_value = 75.55 * light_value;
    1286:	f7ff f89f 	bl	3c8 <__aeabi_f2d>
    128a:	4632      	mov	r2, r6
    128c:	463b      	mov	r3, r7
    128e:	f7ff f8f3 	bl	478 <__aeabi_dmul>
    1292:	f7ff fb03 	bl	89c <__aeabi_d2iz>
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <brightness_task+0x84>)
    1298:	6018      	str	r0, [r3, #0]
		k_msleep(1000);
    129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    129e:	f020 f95c 	bl	2155a <k_msleep.isra.0>
		hrs_notify();
    12a2:	f001 fbab 	bl	29fc <hrs_notify>
	{
    12a6:	e7d7      	b.n	1258 <brightness_task+0x28>
    12a8:	33333333 	.word	0x33333333
    12ac:	4052e333 	.word	0x4052e333
    12b0:	41a00000 	.word	0x41a00000
    12b4:	20000260 	.word	0x20000260

000012b8 <main>:
{
    12b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	err = bt_enable(NULL);
    12ba:	2000      	movs	r0, #0
{
    12bc:	b089      	sub	sp, #36	; 0x24
	err = bt_enable(NULL);
    12be:	f009 f969 	bl	a594 <bt_enable>
	if (err) {
    12c2:	4606      	mov	r6, r0
    12c4:	b130      	cbz	r0, 12d4 <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    12c6:	4601      	mov	r1, r0
    12c8:	4827      	ldr	r0, [pc, #156]	; (1368 <main+0xb0>)
}
    12ca:	b009      	add	sp, #36	; 0x24
    12cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    12d0:	f021 b802 	b.w	222d8 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    12d4:	4d25      	ldr	r5, [pc, #148]	; (136c <main+0xb4>)
	printk("Bluetooth initialized\n");
    12d6:	4826      	ldr	r0, [pc, #152]	; (1370 <main+0xb8>)
    12d8:	f020 fffe 	bl	222d8 <printk>
	hts_init();		// Health Thermometer Initialize
    12dc:	f003 f89a 	bl	4414 <hts_init>
		settings_load();
    12e0:	f022 f935 	bl	2354e <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    12e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    12e6:	ac03      	add	r4, sp, #12
    12e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    12ea:	682b      	ldr	r3, [r5, #0]
    12ec:	6023      	str	r3, [r4, #0]
    12ee:	4921      	ldr	r1, [pc, #132]	; (1374 <main+0xbc>)
    12f0:	9600      	str	r6, [sp, #0]
    12f2:	4633      	mov	r3, r6
    12f4:	2204      	movs	r2, #4
    12f6:	a803      	add	r0, sp, #12
    12f8:	f009 fcce 	bl	ac98 <bt_le_adv_start>
	if (err) {
    12fc:	4601      	mov	r1, r0
    12fe:	b318      	cbz	r0, 1348 <main+0x90>
		printk("Advertising failed to start (err %d)\n", err);
    1300:	481d      	ldr	r0, [pc, #116]	; (1378 <main+0xc0>)
    1302:	f020 ffe9 	bl	222d8 <printk>
	bt_conn_cb_register(&conn_callbacks);
    1306:	481d      	ldr	r0, [pc, #116]	; (137c <main+0xc4>)
	while (display_mode == DISPLAY_MODE_BOOTING)
    1308:	4c1d      	ldr	r4, [pc, #116]	; (1380 <main+0xc8>)
	bt_conn_cb_register(&conn_callbacks);
    130a:	f00a f83f 	bl	b38c <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    130e:	481d      	ldr	r0, [pc, #116]	; (1384 <main+0xcc>)
    1310:	f00a fc78 	bl	bc04 <bt_conn_auth_cb_register>
	printk("\n\n Booting Enverse Smart Watch \n\n");
    1314:	481c      	ldr	r0, [pc, #112]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1316:	f020 ffdf 	bl	222d8 <printk>
	while (display_mode == DISPLAY_MODE_BOOTING)
    131a:	6823      	ldr	r3, [r4, #0]
    131c:	b1c3      	cbz	r3, 1350 <main+0x98>
		hts_indicate(38.22);
    131e:	a710      	add	r7, pc, #64	; (adr r7, 1360 <main+0xa8>)
    1320:	e9d7 6700 	ldrd	r6, r7, [r7]
		sensor_mode = SENSOR_MODE_READ_ALL;
    1324:	4d19      	ldr	r5, [pc, #100]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
		k_msleep(5000);
    1326:	f241 3088 	movw	r0, #5000	; 0x1388
    132a:	f020 f916 	bl	2155a <k_msleep.isra.0>
		sensor_mode = SENSOR_MODE_READ_ALL;
    132e:	2301      	movs	r3, #1
    1330:	602b      	str	r3, [r5, #0]
		k_msleep(10000);
    1332:	f242 7010 	movw	r0, #10000	; 0x2710
		display_mode = DISPLAY_MODE_VALUES;
    1336:	2304      	movs	r3, #4
    1338:	6023      	str	r3, [r4, #0]
		k_msleep(10000);
    133a:	f020 f90e 	bl	2155a <k_msleep.isra.0>
		hts_indicate(38.22);
    133e:	4630      	mov	r0, r6
    1340:	4639      	mov	r1, r7
    1342:	f003 f87f 	bl	4444 <hts_indicate>
	while (1)
    1346:	e7ee      	b.n	1326 <main+0x6e>
	printk("Advertising successfully started\n");
    1348:	4811      	ldr	r0, [pc, #68]	; (1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>)
    134a:	f020 ffc5 	bl	222d8 <printk>
    134e:	e7da      	b.n	1306 <main+0x4e>
		k_msleep(1000);
    1350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1354:	f020 f901 	bl	2155a <k_msleep.isra.0>
    1358:	e7df      	b.n	131a <main+0x62>
    135a:	bf00      	nop
    135c:	f3af 8000 	nop.w
    1360:	f5c28f5c 	.word	0xf5c28f5c
    1364:	40431c28 	.word	0x40431c28
    1368:	00029e18 	.word	0x00029e18
    136c:	00028350 	.word	0x00028350
    1370:	00029e38 	.word	0x00029e38
    1374:	00028448 	.word	0x00028448
    1378:	00029e4f 	.word	0x00029e4f
    137c:	20000264 	.word	0x20000264
    1380:	2000b19c 	.word	0x2000b19c
    1384:	20000238 	.word	0x20000238
    1388:	00029e97 	.word	0x00029e97
    138c:	2000b1b4 	.word	0x2000b1b4
    1390:	00029e75 	.word	0x00029e75
    1394:	00000000 	.word	0x00000000

00001398 <max30208_read_temp>:
        // printk("READING FROM MAX30208 FIFO : FAILED\n");
    return rslt;
}

u16_t max30208_read_temp(float *value)
{
    1398:	b537      	push	{r0, r1, r2, r4, r5, lr}
    139a:	4605      	mov	r5, r0
    int temp;
    u16_t rslt = 0x00;
    rslt |= max30208_read_fifo(&temp);
    139c:	a801      	add	r0, sp, #4
    139e:	f020 fcca 	bl	21d36 <max30208_read_fifo>
    if (temp & 0x8000)
    13a2:	9b01      	ldr	r3, [sp, #4]
    13a4:	041a      	lsls	r2, r3, #16
    {
        temp = ~(temp - 1);
    13a6:	bf44      	itt	mi
    13a8:	425b      	negmi	r3, r3
    13aa:	9301      	strmi	r3, [sp, #4]
    rslt |= max30208_read_fifo(&temp);
    13ac:	4604      	mov	r4, r0
    }
    *value = (float)temp * 0.005;
    13ae:	9801      	ldr	r0, [sp, #4]
    13b0:	f7ff fbc6 	bl	b40 <__aeabi_i2f>
    13b4:	f7ff f808 	bl	3c8 <__aeabi_f2d>
    13b8:	a305      	add	r3, pc, #20	; (adr r3, 13d0 <max30208_read_temp+0x38>)
    13ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    13be:	f7ff f85b 	bl	478 <__aeabi_dmul>
    13c2:	f7ff fab3 	bl	92c <__aeabi_d2f>
    13c6:	6028      	str	r0, [r5, #0]
    return rslt;
}
    13c8:	4620      	mov	r0, r4
    13ca:	b003      	add	sp, #12
    13cc:	bd30      	pop	{r4, r5, pc}
    13ce:	bf00      	nop
    13d0:	47ae147b 	.word	0x47ae147b
    13d4:	3f747ae1 	.word	0x3f747ae1

000013d8 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
    13da:	2301      	movs	r3, #1
{
    13dc:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
    13de:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
    13e0:	9302      	str	r3, [sp, #8]
    13e2:	230c      	movs	r3, #12
    13e4:	2600      	movs	r6, #0
    13e6:	9304      	str	r3, [sp, #16]
    13e8:	4f27      	ldr	r7, [pc, #156]	; (1488 <AnalogRead+0xb0>)
    13ea:	9601      	str	r6, [sp, #4]
    13ec:	230a      	movs	r3, #10
{
    13ee:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
    13f0:	f8ad 3014 	strh.w	r3, [sp, #20]
    13f4:	9703      	str	r7, [sp, #12]
    13f6:	f88d 6016 	strb.w	r6, [sp, #22]
	struct device *adc_dev = getAdcDevice();
    13fa:	f002 fb0d 	bl	3a18 <getAdcDevice>
	if(_LastChannel != channel)
    13fe:	4b23      	ldr	r3, [pc, #140]	; (148c <AnalogRead+0xb4>)
    1400:	781a      	ldrb	r2, [r3, #0]
    1402:	4295      	cmp	r5, r2
	struct device *adc_dev = getAdcDevice();
    1404:	4604      	mov	r4, r0
	if(_LastChannel != channel)
    1406:	d00c      	beq.n	1422 <AnalogRead+0x4a>
		_IsInitialized = false;
    1408:	4a21      	ldr	r2, [pc, #132]	; (1490 <AnalogRead+0xb8>)
		_LastChannel = channel;
    140a:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
    140c:	7016      	strb	r6, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
    140e:	b970      	cbnz	r0, 142e <AnalogRead+0x56>
{
    1410:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
    1412:	481d      	ldr	r0, [pc, #116]	; (1488 <AnalogRead+0xb0>)
    1414:	220c      	movs	r2, #12
    1416:	2100      	movs	r1, #0
    1418:	f023 fc45 	bl	24ca6 <memset>
	if (adc_dev)
    141c:	b9b4      	cbnz	r4, 144c <AnalogRead+0x74>

	s16_t sv = readOneChannel(channel);
	if(sv == -1)
	{
		return sv;
    141e:	481d      	ldr	r0, [pc, #116]	; (1494 <AnalogRead+0xbc>)
    1420:	e02c      	b.n	147c <AnalogRead+0xa4>
	if ( adc_dev != NULL && !_IsInitialized)
    1422:	2800      	cmp	r0, #0
    1424:	d0f4      	beq.n	1410 <AnalogRead+0x38>
    1426:	4b1a      	ldr	r3, [pc, #104]	; (1490 <AnalogRead+0xb8>)
    1428:	781b      	ldrb	r3, [r3, #0]
    142a:	2b00      	cmp	r3, #0
    142c:	d1f1      	bne.n	1412 <AnalogRead+0x3a>
		m_1st_channel_cfg.channel_id = channel;
    142e:	491a      	ldr	r1, [pc, #104]	; (1498 <AnalogRead+0xc0>)
    1430:	790b      	ldrb	r3, [r1, #4]
    1432:	f365 0304 	bfi	r3, r5, #0, #5
    1436:	710b      	strb	r3, [r1, #4]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    1438:	68a3      	ldr	r3, [r4, #8]
    143a:	4620      	mov	r0, r4
    143c:	681b      	ldr	r3, [r3, #0]
    143e:	4798      	blx	r3
		if(ret != 0)
    1440:	2800      	cmp	r0, #0
    1442:	d1e5      	bne.n	1410 <AnalogRead+0x38>
			_IsInitialized = true;	// we don't have any other analog users
    1444:	4b12      	ldr	r3, [pc, #72]	; (1490 <AnalogRead+0xb8>)
    1446:	2201      	movs	r2, #1
    1448:	701a      	strb	r2, [r3, #0]
    144a:	e7e2      	b.n	1412 <AnalogRead+0x3a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    144c:	68a3      	ldr	r3, [r4, #8]
    144e:	a901      	add	r1, sp, #4
    1450:	685b      	ldr	r3, [r3, #4]
    1452:	4620      	mov	r0, r4
    1454:	4798      	blx	r3
		if(ret == 0)
    1456:	2800      	cmp	r0, #0
    1458:	d1e1      	bne.n	141e <AnalogRead+0x46>
			sample_value = m_sample_buffer[0];
    145a:	f9b7 0000 	ldrsh.w	r0, [r7]
	if(sv == -1)
    145e:	1c43      	adds	r3, r0, #1
    1460:	d0dd      	beq.n	141e <AnalogRead+0x46>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
    1462:	f7fe ff9f 	bl	3a4 <__aeabi_i2d>
    1466:	a306      	add	r3, pc, #24	; (adr r3, 1480 <AnalogRead+0xa8>)
    1468:	e9d3 2300 	ldrd	r2, r3, [r3]
    146c:	f7ff f804 	bl	478 <__aeabi_dmul>
    1470:	4b0a      	ldr	r3, [pc, #40]	; (149c <AnalogRead+0xc4>)
    1472:	2200      	movs	r2, #0
    1474:	f7ff f800 	bl	478 <__aeabi_dmul>
    1478:	f7ff fa58 	bl	92c <__aeabi_d2f>
	return fout;
    147c:	b007      	add	sp, #28
    147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1480:	cccccccd 	.word	0xcccccccd
    1484:	400ccccc 	.word	0x400ccccc
    1488:	2000f54a 	.word	0x2000f54a
    148c:	200009d7 	.word	0x200009d7
    1490:	2000f595 	.word	0x2000f595
    1494:	bf800000 	.word	0xbf800000
    1498:	20000872 	.word	0x20000872
    149c:	3f500000 	.word	0x3f500000

000014a0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    14a0:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    14a2:	4d44      	ldr	r5, [pc, #272]	; (15b4 <bt_init+0x114>)
    14a4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    14a8:	6899      	ldr	r1, [r3, #8]
    14aa:	f011 0101 	ands.w	r1, r1, #1
{
    14ae:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    14b0:	d11f      	bne.n	14f2 <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    14b2:	aa03      	add	r2, sp, #12
    14b4:	f640 4003 	movw	r0, #3075	; 0xc03
    14b8:	f008 f89c 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    14bc:	4604      	mov	r4, r0
    14be:	2800      	cmp	r0, #0
    14c0:	d174      	bne.n	15ac <bt_init+0x10c>
	uint8_t status = buf->data[0];
    14c2:	9b03      	ldr	r3, [sp, #12]
    14c4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    14c6:	781b      	ldrb	r3, [r3, #0]
    14c8:	b983      	cbnz	r3, 14ec <bt_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    14ca:	f105 0394 	add.w	r3, r5, #148	; 0x94
    14ce:	4618      	mov	r0, r3
    14d0:	f023 fd7d 	bl	24fce <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    14d4:	f3bf 8f5b 	dmb	ish
    14d8:	f000 0005 	and.w	r0, r0, #5
    14dc:	e853 2f00 	ldrex	r2, [r3]
    14e0:	e843 0100 	strex	r1, r0, [r3]
    14e4:	2900      	cmp	r1, #0
    14e6:	d1f9      	bne.n	14dc <bt_init+0x3c>
    14e8:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    14ec:	9803      	ldr	r0, [sp, #12]
    14ee:	f01c f9c1 	bl	1d874 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    14f2:	aa03      	add	r2, sp, #12
    14f4:	2100      	movs	r1, #0
    14f6:	f241 0003 	movw	r0, #4099	; 0x1003
    14fa:	f008 f87b 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    14fe:	4604      	mov	r4, r0
    1500:	2800      	cmp	r0, #0
    1502:	d153      	bne.n	15ac <bt_init+0x10c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1504:	9b03      	ldr	r3, [sp, #12]
    1506:	482c      	ldr	r0, [pc, #176]	; (15b8 <bt_init+0x118>)
    1508:	6899      	ldr	r1, [r3, #8]
    150a:	2208      	movs	r2, #8
    150c:	3101      	adds	r1, #1
    150e:	f023 fb9f 	bl	24c50 <memcpy>
	net_buf_unref(rsp);
    1512:	9803      	ldr	r0, [sp, #12]
    1514:	f01c f9ae 	bl	1d874 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1518:	4621      	mov	r1, r4
    151a:	aa03      	add	r2, sp, #12
    151c:	f241 0001 	movw	r0, #4097	; 0x1001
    1520:	f008 f868 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    1524:	4604      	mov	r4, r0
    1526:	2800      	cmp	r0, #0
    1528:	d140      	bne.n	15ac <bt_init+0x10c>
	read_local_ver_complete(rsp);
    152a:	9803      	ldr	r0, [sp, #12]
    152c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    152e:	785a      	ldrb	r2, [r3, #1]
    1530:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1534:	78d9      	ldrb	r1, [r3, #3]
    1536:	789a      	ldrb	r2, [r3, #2]
    1538:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    153c:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    153e:	791a      	ldrb	r2, [r3, #4]
    1540:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1544:	7a19      	ldrb	r1, [r3, #8]
    1546:	79da      	ldrb	r2, [r3, #7]
    1548:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    154c:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    154e:	795a      	ldrb	r2, [r3, #5]
    1550:	799b      	ldrb	r3, [r3, #6]
    1552:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1556:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    1558:	f01c f98c 	bl	1d874 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    155c:	4621      	mov	r1, r4
    155e:	aa03      	add	r2, sp, #12
    1560:	f241 0002 	movw	r0, #4098	; 0x1002
    1564:	f008 f846 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    1568:	4604      	mov	r4, r0
    156a:	b9f8      	cbnz	r0, 15ac <bt_init+0x10c>
	memcpy(bt_dev.supported_commands, rp->commands,
    156c:	9b03      	ldr	r3, [sp, #12]
    156e:	4813      	ldr	r0, [pc, #76]	; (15bc <bt_init+0x11c>)
    1570:	6899      	ldr	r1, [r3, #8]
    1572:	2240      	movs	r2, #64	; 0x40
    1574:	3101      	adds	r1, #1
    1576:	f023 fb6b 	bl	24c50 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    157a:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    157e:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
    1580:	f043 0306 	orr.w	r3, r3, #6
    1584:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    1588:	f01c f974 	bl	1d874 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    158c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    1590:	065a      	lsls	r2, r3, #25
    1592:	d41b      	bmi.n	15cc <bt_init+0x12c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1594:	4b0a      	ldr	r3, [pc, #40]	; (15c0 <bt_init+0x120>)
    1596:	490b      	ldr	r1, [pc, #44]	; (15c4 <bt_init+0x124>)
		BT_ERR("Non-LE capable controller detected!");
    1598:	480b      	ldr	r0, [pc, #44]	; (15c8 <bt_init+0x128>)
    159a:	1ac9      	subs	r1, r1, r3
    159c:	08c9      	lsrs	r1, r1, #3
    159e:	0189      	lsls	r1, r1, #6
    15a0:	f041 0101 	orr.w	r1, r1, #1
    15a4:	f021 fb2e 	bl	22c04 <log_0>
		return -ENODEV;
    15a8:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    15ac:	4620      	mov	r0, r4
    15ae:	b008      	add	sp, #32
    15b0:	bd70      	pop	{r4, r5, r6, pc}
    15b2:	bf00      	nop
    15b4:	20000000 	.word	0x20000000
    15b8:	2000003c 	.word	0x2000003c
    15bc:	20000044 	.word	0x20000044
    15c0:	000281b4 	.word	0x000281b4
    15c4:	0002827c 	.word	0x0002827c
    15c8:	0002d05b 	.word	0x0002d05b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    15cc:	4621      	mov	r1, r4
    15ce:	aa03      	add	r2, sp, #12
    15d0:	f242 0003 	movw	r0, #8195	; 0x2003
    15d4:	f008 f80e 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    15d8:	4604      	mov	r4, r0
    15da:	2800      	cmp	r0, #0
    15dc:	d1e6      	bne.n	15ac <bt_init+0x10c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    15de:	9b03      	ldr	r3, [sp, #12]
    15e0:	48b5      	ldr	r0, [pc, #724]	; (18b8 <bt_init+0x418>)
    15e2:	6899      	ldr	r1, [r3, #8]
    15e4:	2208      	movs	r2, #8
    15e6:	3101      	adds	r1, #1
    15e8:	f023 fb32 	bl	24c50 <memcpy>
	net_buf_unref(rsp);
    15ec:	9803      	ldr	r0, [sp, #12]
    15ee:	f01c f941 	bl	1d874 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    15f2:	4621      	mov	r1, r4
    15f4:	aa03      	add	r2, sp, #12
    15f6:	f242 0002 	movw	r0, #8194	; 0x2002
    15fa:	f007 fffb 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    15fe:	4604      	mov	r4, r0
    1600:	2800      	cmp	r0, #0
    1602:	d1d3      	bne.n	15ac <bt_init+0x10c>
		le_read_buffer_size_complete(rsp);
    1604:	9b03      	ldr	r3, [sp, #12]
    1606:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    1608:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    160c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    1610:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    1612:	b121      	cbz	r1, 161e <bt_init+0x17e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1614:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1616:	48a9      	ldr	r0, [pc, #676]	; (18bc <bt_init+0x41c>)
    1618:	4611      	mov	r1, r2
    161a:	f026 f9c0 	bl	2799e <z_impl_k_sem_init>
		net_buf_unref(rsp);
    161e:	9803      	ldr	r0, [sp, #12]
    1620:	f01c f928 	bl	1d874 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1624:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    1628:	f016 0620 	ands.w	r6, r6, #32
    162c:	f000 811e 	beq.w	186c <bt_init+0x3cc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1630:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    1634:	071b      	lsls	r3, r3, #28
    1636:	d512      	bpl.n	165e <bt_init+0x1be>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1638:	aa03      	add	r2, sp, #12
    163a:	2100      	movs	r1, #0
    163c:	f242 001c 	movw	r0, #8220	; 0x201c
    1640:	f007 ffd8 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    1644:	4604      	mov	r4, r0
    1646:	2800      	cmp	r0, #0
    1648:	d1b0      	bne.n	15ac <bt_init+0x10c>
		le_read_supp_states_complete(rsp);
    164a:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    164c:	6883      	ldr	r3, [r0, #8]
    164e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    1652:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    1656:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    165a:	f01c f90b 	bl	1d874 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    165e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    1662:	069e      	lsls	r6, r3, #26
    1664:	d524      	bpl.n	16b0 <bt_init+0x210>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    1666:	a902      	add	r1, sp, #8
    1668:	f10d 0006 	add.w	r0, sp, #6
    166c:	f008 f992 	bl	9994 <hci_le_read_max_data_len>
		if (err) {
    1670:	4604      	mov	r4, r0
    1672:	2800      	cmp	r0, #0
    1674:	d19a      	bne.n	15ac <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1676:	2104      	movs	r1, #4
    1678:	f242 0024 	movw	r0, #8228	; 0x2024
    167c:	f007 fe5a 	bl	9334 <bt_hci_cmd_create>
		if (!buf) {
    1680:	4606      	mov	r6, r0
    1682:	2800      	cmp	r0, #0
    1684:	f000 80f9 	beq.w	187a <bt_init+0x3da>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    1688:	2104      	movs	r1, #4
    168a:	3008      	adds	r0, #8
    168c:	f025 fb4e 	bl	26d2c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1690:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1694:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    1696:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    169a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    169c:	4622      	mov	r2, r4
    169e:	4631      	mov	r1, r6
    16a0:	f242 0024 	movw	r0, #8228	; 0x2024
    16a4:	f007 ffa6 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    16a8:	4604      	mov	r4, r0
    16aa:	2800      	cmp	r0, #0
    16ac:	f47f af7e 	bne.w	15ac <bt_init+0x10c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    16b0:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    16b4:	065c      	lsls	r4, r3, #25
    16b6:	d52c      	bpl.n	1712 <bt_init+0x272>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    16b8:	2102      	movs	r1, #2
    16ba:	f242 002e 	movw	r0, #8238	; 0x202e
    16be:	f007 fe39 	bl	9334 <bt_hci_cmd_create>
		if (!buf) {
    16c2:	4604      	mov	r4, r0
    16c4:	2800      	cmp	r0, #0
    16c6:	f000 80d8 	beq.w	187a <bt_init+0x3da>
    16ca:	2102      	movs	r1, #2
    16cc:	3008      	adds	r0, #8
    16ce:	f025 fb2d 	bl	26d2c <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    16d2:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    16d6:	7003      	strb	r3, [r0, #0]
    16d8:	2303      	movs	r3, #3
    16da:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    16dc:	4621      	mov	r1, r4
    16de:	2200      	movs	r2, #0
    16e0:	f242 002e 	movw	r0, #8238	; 0x202e
    16e4:	f007 ff86 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    16e8:	4604      	mov	r4, r0
    16ea:	2800      	cmp	r0, #0
    16ec:	f47f af5e 	bne.w	15ac <bt_init+0x10c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    16f0:	4601      	mov	r1, r0
    16f2:	aa03      	add	r2, sp, #12
    16f4:	f242 002a 	movw	r0, #8234	; 0x202a
    16f8:	f007 ff7c 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    16fc:	4604      	mov	r4, r0
    16fe:	2800      	cmp	r0, #0
    1700:	f47f af54 	bne.w	15ac <bt_init+0x10c>
		le_read_resolving_list_size_complete(rsp);
    1704:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    1706:	6883      	ldr	r3, [r0, #8]
    1708:	785b      	ldrb	r3, [r3, #1]
    170a:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    170e:	f01c f8b1 	bl	1d874 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    1712:	2108      	movs	r1, #8
    1714:	f242 0001 	movw	r0, #8193	; 0x2001
    1718:	f007 fe0c 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    171c:	4604      	mov	r4, r0
    171e:	2800      	cmp	r0, #0
    1720:	f000 80ab 	beq.w	187a <bt_init+0x3da>
    1724:	2108      	movs	r1, #8
    1726:	4408      	add	r0, r1
    1728:	f025 fb00 	bl	26d2c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    172c:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1730:	f011 0f40 	tst.w	r1, #64	; 0x40
    1734:	4602      	mov	r2, r0
    1736:	f240 2302 	movw	r3, #514	; 0x202
    173a:	bf08      	it	eq
    173c:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    173e:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1740:	bf4c      	ite	mi
    1742:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1746:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    174a:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    174c:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1750:	bf48      	it	mi
    1752:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1756:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    175a:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    175e:	bf18      	it	ne
    1760:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1764:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1768:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    176a:	bf48      	it	mi
    176c:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1770:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    1772:	bf08      	it	eq
    1774:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1778:	2100      	movs	r1, #0
    177a:	f023 fc67 	bl	2504c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    177e:	4621      	mov	r1, r4
    1780:	2200      	movs	r2, #0
    1782:	f242 0001 	movw	r0, #8193	; 0x2001
    1786:	f007 ff35 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    178a:	4604      	mov	r4, r0
    178c:	2800      	cmp	r0, #0
    178e:	f47f af0d 	bne.w	15ac <bt_init+0x10c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1792:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    1796:	0698      	lsls	r0, r3, #26
    1798:	d41e      	bmi.n	17d8 <bt_init+0x338>
	if (bt_dev.le.acl_mtu) {
    179a:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    179e:	b9d9      	cbnz	r1, 17d8 <bt_init+0x338>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    17a0:	aa03      	add	r2, sp, #12
    17a2:	f241 0005 	movw	r0, #4101	; 0x1005
    17a6:	f007 ff25 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    17aa:	4604      	mov	r4, r0
    17ac:	2800      	cmp	r0, #0
    17ae:	f47f aefd 	bne.w	15ac <bt_init+0x10c>
	if (bt_dev.le.acl_mtu) {
    17b2:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    17b6:	b963      	cbnz	r3, 17d2 <bt_init+0x332>
    17b8:	9b03      	ldr	r3, [sp, #12]
    17ba:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    17bc:	785a      	ldrb	r2, [r3, #1]
    17be:	7899      	ldrb	r1, [r3, #2]
    17c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    17c4:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    17c8:	889a      	ldrh	r2, [r3, #4]
    17ca:	483c      	ldr	r0, [pc, #240]	; (18bc <bt_init+0x41c>)
    17cc:	4611      	mov	r1, r2
    17ce:	f026 f8e6 	bl	2799e <z_impl_k_sem_init>
	net_buf_unref(rsp);
    17d2:	9803      	ldr	r0, [sp, #12]
    17d4:	f01c f84e 	bl	1d874 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    17d8:	2108      	movs	r1, #8
    17da:	f640 4001 	movw	r0, #3073	; 0xc01
    17de:	f007 fda9 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    17e2:	4604      	mov	r4, r0
    17e4:	2800      	cmp	r0, #0
    17e6:	d048      	beq.n	187a <bt_init+0x3da>
    17e8:	2108      	movs	r1, #8
    17ea:	4408      	add	r0, r1
    17ec:	f025 fa9e 	bl	26d2c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    17f0:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    17f4:	07d9      	lsls	r1, r3, #31
    17f6:	4602      	mov	r2, r0
    17f8:	d554      	bpl.n	18a4 <bt_init+0x404>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    17fa:	a12d      	add	r1, pc, #180	; (adr r1, 18b0 <bt_init+0x410>)
    17fc:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1800:	f023 fc24 	bl	2504c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    1804:	4621      	mov	r1, r4
    1806:	2200      	movs	r2, #0
    1808:	f640 4001 	movw	r0, #3073	; 0xc01
    180c:	f007 fef2 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    1810:	4604      	mov	r4, r0
    1812:	2800      	cmp	r0, #0
    1814:	f47f aeca 	bne.w	15ac <bt_init+0x10c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1818:	4601      	mov	r1, r0
    181a:	aa02      	add	r2, sp, #8
    181c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1820:	f007 fee8 	bl	95f4 <bt_hci_cmd_send_sync>
    1824:	4e26      	ldr	r6, [pc, #152]	; (18c0 <bt_init+0x420>)
    1826:	4b27      	ldr	r3, [pc, #156]	; (18c4 <bt_init+0x424>)
    1828:	1af6      	subs	r6, r6, r3
    182a:	08f6      	lsrs	r6, r6, #3
    182c:	01b6      	lsls	r6, r6, #6
	if (err) {
    182e:	2800      	cmp	r0, #0
    1830:	d054      	beq.n	18dc <bt_init+0x43c>
		BT_WARN("Vendor HCI extensions not available");
    1832:	4825      	ldr	r0, [pc, #148]	; (18c8 <bt_init+0x428>)
    1834:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    1838:	f021 f9e4 	bl	22c04 <log_0>
		err = bt_conn_init();
    183c:	f00a fa0a 	bl	bc54 <bt_conn_init>
		if (err) {
    1840:	4604      	mov	r4, r0
    1842:	2800      	cmp	r0, #0
    1844:	f47f aeb2 	bne.w	15ac <bt_init+0x10c>
 * @return N/A
 */
static inline void k_delayed_work_init(struct k_delayed_work *work,
				       k_work_handler_t handler)
{
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    1848:	4601      	mov	r1, r0
    184a:	2230      	movs	r2, #48	; 0x30
    184c:	481f      	ldr	r0, [pc, #124]	; (18cc <bt_init+0x42c>)
    184e:	f023 fa2a 	bl	24ca6 <memset>
    1852:	4b1f      	ldr	r3, [pc, #124]	; (18d0 <bt_init+0x430>)
    1854:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
		if (!bt_dev.id_count) {
    1858:	79eb      	ldrb	r3, [r5, #7]
    185a:	2b00      	cmp	r3, #0
    185c:	f040 80ab 	bne.w	19b6 <bt_init+0x516>
			BT_INFO("No ID address. App must call settings_load()");
    1860:	481c      	ldr	r0, [pc, #112]	; (18d4 <bt_init+0x434>)
    1862:	f046 0103 	orr.w	r1, r6, #3
    1866:	f021 f9cd 	bl	22c04 <log_0>
			return 0;
    186a:	e69f      	b.n	15ac <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    186c:	2102      	movs	r1, #2
    186e:	f640 406d 	movw	r0, #3181	; 0xc6d
    1872:	f007 fd5f 	bl	9334 <bt_hci_cmd_create>
		if (!buf) {
    1876:	4604      	mov	r4, r0
    1878:	b910      	cbnz	r0, 1880 <bt_init+0x3e0>
		return -ENOBUFS;
    187a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    187e:	e695      	b.n	15ac <bt_init+0x10c>
    1880:	2102      	movs	r1, #2
    1882:	3008      	adds	r0, #8
    1884:	f025 fa52 	bl	26d2c <net_buf_simple_add>
		cp_le->le = 0x01;
    1888:	2301      	movs	r3, #1
    188a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    188c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    188e:	4621      	mov	r1, r4
    1890:	4632      	mov	r2, r6
    1892:	f640 406d 	movw	r0, #3181	; 0xc6d
    1896:	f007 fead 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    189a:	4604      	mov	r4, r0
    189c:	2800      	cmp	r0, #0
    189e:	f43f aec7 	beq.w	1630 <bt_init+0x190>
    18a2:	e683      	b.n	15ac <bt_init+0x10c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    18a4:	480c      	ldr	r0, [pc, #48]	; (18d8 <bt_init+0x438>)
    18a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    18aa:	e7a9      	b.n	1800 <bt_init+0x360>
    18ac:	f3af 8000 	nop.w
    18b0:	02008890 	.word	0x02008890
    18b4:	20008000 	.word	0x20008000
    18b8:	20000098 	.word	0x20000098
    18bc:	200000c8 	.word	0x200000c8
    18c0:	0002827c 	.word	0x0002827c
    18c4:	000281b4 	.word	0x000281b4
    18c8:	0002d07f 	.word	0x0002d07f
    18cc:	20000130 	.word	0x20000130
    18d0:	00009949 	.word	0x00009949
    18d4:	0002d153 	.word	0x0002d153
    18d8:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    18dc:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    18de:	4839      	ldr	r0, [pc, #228]	; (19c4 <bt_init+0x524>)
	rp.info = (void *)rsp->data;
    18e0:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    18e2:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    18e6:	2a03      	cmp	r2, #3
		return plat_str[platform];
    18e8:	bf96      	itet	ls
    18ea:	4937      	ldrls	r1, [pc, #220]	; (19c8 <bt_init+0x528>)
	return "unknown";
    18ec:	4937      	ldrhi	r1, [pc, #220]	; (19cc <bt_init+0x52c>)
		return plat_str[platform];
    18ee:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    18f2:	f046 0303 	orr.w	r3, r6, #3
    18f6:	f021 f9a6 	bl	22c46 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    18fa:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    18fe:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1902:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    1904:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1908:	d12e      	bne.n	1968 <bt_init+0x4c8>
	if (variant < ARRAY_SIZE(nordic_str)) {
    190a:	2a03      	cmp	r2, #3
    190c:	d82c      	bhi.n	1968 <bt_init+0x4c8>
		return nordic_str[variant];
    190e:	4930      	ldr	r1, [pc, #192]	; (19d0 <bt_init+0x530>)
    1910:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    1914:	482f      	ldr	r0, [pc, #188]	; (19d4 <bt_init+0x534>)
    1916:	f021 f996 	bl	22c46 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    191a:	7962      	ldrb	r2, [r4, #5]
    191c:	482e      	ldr	r0, [pc, #184]	; (19d8 <bt_init+0x538>)
	if (variant < ARRAY_SIZE(var_str)) {
    191e:	2a03      	cmp	r2, #3
		return var_str[variant];
    1920:	bf96      	itet	ls
    1922:	492e      	ldrls	r1, [pc, #184]	; (19dc <bt_init+0x53c>)
	return "unknown";
    1924:	4929      	ldrhi	r1, [pc, #164]	; (19cc <bt_init+0x52c>)
		return var_str[variant];
    1926:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    192a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    192e:	79a2      	ldrb	r2, [r4, #6]
    1930:	9205      	str	r2, [sp, #20]
    1932:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    1936:	9206      	str	r2, [sp, #24]
    1938:	f8d4 2009 	ldr.w	r2, [r4, #9]
    193c:	9207      	str	r2, [sp, #28]
    193e:	f046 0303 	orr.w	r3, r6, #3
    1942:	2205      	movs	r2, #5
    1944:	a903      	add	r1, sp, #12
    1946:	f021 f9b3 	bl	22cb0 <log_n>
	net_buf_unref(rsp);
    194a:	9802      	ldr	r0, [sp, #8]
    194c:	f01b ff92 	bl	1d874 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    1950:	aa02      	add	r2, sp, #8
    1952:	2100      	movs	r1, #0
    1954:	f64f 4002 	movw	r0, #64514	; 0xfc02
    1958:	f007 fe4c 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    195c:	4604      	mov	r4, r0
    195e:	b128      	cbz	r0, 196c <bt_init+0x4cc>
		BT_WARN("Failed to read supported vendor commands");
    1960:	481f      	ldr	r0, [pc, #124]	; (19e0 <bt_init+0x540>)
    1962:	f046 0102 	orr.w	r1, r6, #2
    1966:	e767      	b.n	1838 <bt_init+0x398>
		return "unknown";
    1968:	4918      	ldr	r1, [pc, #96]	; (19cc <bt_init+0x52c>)
    196a:	e7d3      	b.n	1914 <bt_init+0x474>
	rp.cmds = (void *)rsp->data;
    196c:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    196e:	481d      	ldr	r0, [pc, #116]	; (19e4 <bt_init+0x544>)
    1970:	6899      	ldr	r1, [r3, #8]
    1972:	2202      	movs	r2, #2
    1974:	3101      	adds	r1, #1
    1976:	f023 f96b 	bl	24c50 <memcpy>
	net_buf_unref(rsp);
    197a:	9802      	ldr	r0, [sp, #8]
    197c:	f01b ff7a 	bl	1d874 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    1980:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    1984:	075b      	lsls	r3, r3, #29
    1986:	f57f af59 	bpl.w	183c <bt_init+0x39c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    198a:	aa02      	add	r2, sp, #8
    198c:	4621      	mov	r1, r4
    198e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    1992:	f007 fe2f 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    1996:	b118      	cbz	r0, 19a0 <bt_init+0x500>
			BT_WARN("Failed to read supported vendor features");
    1998:	4813      	ldr	r0, [pc, #76]	; (19e8 <bt_init+0x548>)
    199a:	f046 0102 	orr.w	r1, r6, #2
    199e:	e74b      	b.n	1838 <bt_init+0x398>
		rp.feat = (void *)rsp->data;
    19a0:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    19a2:	4812      	ldr	r0, [pc, #72]	; (19ec <bt_init+0x54c>)
    19a4:	6899      	ldr	r1, [r3, #8]
    19a6:	2201      	movs	r2, #1
    19a8:	4411      	add	r1, r2
    19aa:	f023 f951 	bl	24c50 <memcpy>
		net_buf_unref(rsp);
    19ae:	9802      	ldr	r0, [sp, #8]
    19b0:	f01b ff60 	bl	1d874 <net_buf_unref>
    19b4:	e742      	b.n	183c <bt_init+0x39c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    19b6:	2104      	movs	r1, #4
    19b8:	480d      	ldr	r0, [pc, #52]	; (19f0 <bt_init+0x550>)
    19ba:	f023 fb17 	bl	24fec <atomic_or>
	bt_finalize_init();
    19be:	f008 fd71 	bl	a4a4 <bt_finalize_init>
	return 0;
    19c2:	e5f3      	b.n	15ac <bt_init+0x10c>
    19c4:	0002d0a3 	.word	0x0002d0a3
    19c8:	00028a9c 	.word	0x00028a9c
    19cc:	0002ca4d 	.word	0x0002ca4d
    19d0:	00028a5c 	.word	0x00028a5c
    19d4:	0002d0bc 	.word	0x0002d0bc
    19d8:	0002d0d4 	.word	0x0002d0d4
    19dc:	00028ad4 	.word	0x00028ad4
    19e0:	0002d101 	.word	0x0002d101
    19e4:	20000085 	.word	0x20000085
    19e8:	0002d12a 	.word	0x0002d12a
    19ec:	20000084 	.word	0x20000084
    19f0:	20000094 	.word	0x20000094
    19f4:	00000000 	.word	0x00000000

000019f8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    19f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    19fc:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1a00:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1a02:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1a04:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1a06:	42a6      	cmp	r6, r4
{
    1a08:	4688      	mov	r8, r1
    1a0a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1a0c:	d818      	bhi.n	1a40 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1a0e:	4d1c      	ldr	r5, [pc, #112]	; (1a80 <ull_drift_ticks_get+0x88>)
    1a10:	fba3 0105 	umull	r0, r1, r3, r5
    1a14:	a318      	add	r3, pc, #96	; (adr r3, 1a78 <ull_drift_ticks_get+0x80>)
    1a16:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a1a:	f7ff fa85 	bl	f28 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1a1e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1a20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1a24:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1a28:	a313      	add	r3, pc, #76	; (adr r3, 1a78 <ull_drift_ticks_get+0x80>)
    1a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a2e:	fba4 0105 	umull	r0, r1, r4, r5
    1a32:	f7ff fa79 	bl	f28 <__aeabi_uldivmod>
    1a36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1a3a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1a40:	4c0f      	ldr	r4, [pc, #60]	; (1a80 <ull_drift_ticks_get+0x88>)
    1a42:	a30d      	add	r3, pc, #52	; (adr r3, 1a78 <ull_drift_ticks_get+0x80>)
    1a44:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a48:	fba6 0104 	umull	r0, r1, r6, r4
    1a4c:	f7ff fa6c 	bl	f28 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1a50:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1a54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1a58:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1a5c:	a306      	add	r3, pc, #24	; (adr r3, 1a78 <ull_drift_ticks_get+0x80>)
    1a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a62:	fba1 0104 	umull	r0, r1, r1, r4
    1a66:	f7ff fa5f 	bl	f28 <__aeabi_uldivmod>
    1a6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1a6e:	6038      	str	r0, [r7, #0]
}
    1a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a74:	f3af 8000 	nop.w
    1a78:	1afd498d 	.word	0x1afd498d
    1a7c:	00000007 	.word	0x00000007
    1a80:	3b9aca00 	.word	0x3b9aca00
    1a84:	00000000 	.word	0x00000000

00001a88 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a8c:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    1a8e:	2800      	cmp	r0, #0
    1a90:	f000 814b 	beq.w	1d2a <ll_adv_enable+0x2a2>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1a94:	4caa      	ldr	r4, [pc, #680]	; (1d40 <ll_adv_enable+0x2b8>)
    1a96:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    1a9a:	f016 0601 	ands.w	r6, r6, #1
    1a9e:	d136      	bne.n	1b0e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1aa0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1aa4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	ull_filter_adv_update(lll->filter_policy);
    1aa8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1aac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1ab0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	lll->rl_idx = FILTER_IDX_NONE;
    1ab4:	21ff      	movs	r1, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1ab6:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1aba:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1abe:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
	lll->rl_idx = FILTER_IDX_NONE;
    1ac2:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
    1ac6:	f018 fc7d 	bl	1a3c4 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1aca:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
    1ace:	0747      	lsls	r7, r0, #29
    1ad0:	f100 8117 	bmi.w	1d02 <ll_adv_enable+0x27a>
	if (pdu_adv_to_update) {
    1ad4:	f1b8 0f00 	cmp.w	r8, #0
    1ad8:	d011      	beq.n	1afe <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    1ada:	4899      	ldr	r0, [pc, #612]	; (1d40 <ll_adv_enable+0x2b8>)
    1adc:	4641      	mov	r1, r8
    1ade:	f013 fb65 	bl	151ac <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    1ae2:	f898 3000 	ldrb.w	r3, [r8]
    1ae6:	065d      	lsls	r5, r3, #25
    1ae8:	d505      	bpl.n	1af6 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1aea:	2106      	movs	r1, #6
    1aec:	f00e ff1e 	bl	1092c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1af0:	2800      	cmp	r0, #0
    1af2:	f000 81df 	beq.w	1eb4 <ll_adv_enable+0x42c>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1af6:	4892      	ldr	r0, [pc, #584]	; (1d40 <ll_adv_enable+0x2b8>)
    1af8:	4649      	mov	r1, r9
    1afa:	f013 fb57 	bl	151ac <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1afe:	f898 3000 	ldrb.w	r3, [r8]
    1b02:	f013 0f0e 	tst.w	r3, #14
    1b06:	f040 80d3 	bne.w	1cb0 <ll_adv_enable+0x228>
		if (lll->conn) {
    1b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b0c:	b123      	cbz	r3, 1b18 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1b0e:	260c      	movs	r6, #12
}
    1b10:	4630      	mov	r0, r6
    1b12:	b00f      	add	sp, #60	; 0x3c
    1b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1b18:	f012 fcb0 	bl	1447c <ll_rx_link_alloc>
		if (!link) {
    1b1c:	4682      	mov	sl, r0
    1b1e:	2800      	cmp	r0, #0
    1b20:	f000 81d7 	beq.w	1ed2 <ll_adv_enable+0x44a>
		node_rx = ll_rx_alloc();
    1b24:	f012 fcb6 	bl	14494 <ll_rx_alloc>
		if (!node_rx) {
    1b28:	4683      	mov	fp, r0
    1b2a:	2800      	cmp	r0, #0
    1b2c:	f000 81d6 	beq.w	1edc <ll_adv_enable+0x454>
		conn = ll_conn_acquire();
    1b30:	f014 f898 	bl	15c64 <ll_conn_acquire>
		if (!conn) {
    1b34:	4605      	mov	r5, r0
    1b36:	2800      	cmp	r0, #0
    1b38:	f000 81cd 	beq.w	1ed6 <ll_adv_enable+0x44e>
		if (!conn_lll->link_tx_free) {
    1b3c:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
    1b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b42:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
    1b44:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    1b48:	2800      	cmp	r0, #0
    1b4a:	f000 81be 	beq.w	1eca <ll_adv_enable+0x442>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1b4e:	f105 026c 	add.w	r2, r5, #108	; 0x6c
    1b52:	f105 0168 	add.w	r1, r5, #104	; 0x68
    1b56:	930b      	str	r3, [sp, #44]	; 0x2c
    1b58:	f00e fef4 	bl	10944 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    1b5c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
    1b60:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
    1b64:	f8c5 a13c 	str.w	sl, [r5, #316]	; 0x13c
			conn_lll->phy_tx = PHY_1M;
    1b68:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    1b6c:	f022 0207 	bic.w	r2, r2, #7
    1b70:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    1b74:	f042 0201 	orr.w	r2, r2, #1
    1b78:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
    1b7c:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    1b80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    1b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1b88:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1b8c:	f895 2132 	ldrb.w	r2, [r5, #306]	; 0x132
    1b90:	f022 0203 	bic.w	r2, r2, #3
    1b94:	f885 2132 	strb.w	r2, [r5, #306]	; 0x132
		conn_lll->sn = 0;
    1b98:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    1b9c:	f022 021f 	bic.w	r2, r2, #31
    1ba0:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1ba4:	4a67      	ldr	r2, [pc, #412]	; (1d44 <ll_adv_enable+0x2bc>)
    1ba6:	662a      	str	r2, [r5, #96]	; 0x60
		conn->llcp_feature.features_conn = LL_FEAT;
    1ba8:	4a67      	ldr	r2, [pc, #412]	; (1d48 <ll_adv_enable+0x2c0>)
    1baa:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
		conn_lll->data_chan_use = 0;
    1bae:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1bb0:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->slave.latency_enabled = 0;
    1bb4:	f367 0100 	bfi	r1, r7, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1bb8:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->connect_expire = 6;
    1bba:	2206      	movs	r2, #6
		conn_lll->slave.latency_enabled = 0;
    1bbc:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
		conn_lll->slave.window_widening_event_us = 0;
    1bc0:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
    1bc4:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    1bc8:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
    1bca:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
    1bcc:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
    1bce:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
    1bd2:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_rx = NULL;
    1bd6:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1bda:	f8a5 7110 	strh.w	r7, [r5, #272]	; 0x110
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1bde:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_feature.features_peer = 0;
    1be2:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1be6:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_terminate.reason_peer = 0;
    1bea:	f885 713b 	strb.w	r7, [r5, #315]	; 0x13b
		conn_lll->link_tx_free = NULL;
    1bee:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
    1bf0:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    1bf4:	f8a5 715c 	strh.w	r7, [r5, #348]	; 0x15c
		conn->connect_expire = 6;
    1bf8:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1bfc:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
		conn->llcp_conn_param.req = 0;
    1c00:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1c04:	f022 0207 	bic.w	r2, r2, #7
    1c08:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
		conn->common.fex_valid = 0;
    1c0c:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
		conn->slave.ticks_to_offset = 0;
    1c10:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		conn->common.fex_valid = 0;
    1c14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    1c18:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
		conn->llcp_conn_param.disabled = 0;
    1c1c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1c20:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
		conn->llcp_conn_param.disabled = 0;
    1c24:	f367 1204 	bfi	r2, r7, #4, #1
    1c28:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_length.disabled = 0U;
    1c2c:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1c30:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_length.disabled = 0U;
    1c34:	f367 02c3 	bfi	r2, r7, #3, #1
    1c38:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    1c3c:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.cache.tx_octets = 0U;
    1c40:	f8a5 71b0 	strh.w	r7, [r5, #432]	; 0x1b0
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1c44:	f014 fb70 	bl	16328 <ull_conn_default_tx_octets_get>
    1c48:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1c4c:	f014 fb72 	bl	16334 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1c50:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
    1c54:	4a3d      	ldr	r2, [pc, #244]	; (1d4c <ll_adv_enable+0x2c4>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1c56:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1c5a:	400a      	ands	r2, r1
    1c5c:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1c60:	f014 fb6e 	bl	16340 <ull_conn_default_phy_tx_get>
    1c64:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
    1c68:	f360 0202 	bfi	r2, r0, #0, #3
    1c6c:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1c70:	f014 fb6c 	bl	1634c <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c76:	6263      	str	r3, [r4, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    1c78:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1c7c:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1c80:	f8c5 71bc 	str.w	r7, [r5, #444]	; 0x1bc
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1c84:	f360 03c5 	bfi	r3, r0, #3, #3
    1c88:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1c8c:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->parent = parent;
    1c90:	61ed      	str	r5, [r5, #28]
	hdr->is_stop = 0U;
    1c92:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    1c96:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1c9a:	e9c5 7770 	strd	r7, r7, [r5, #448]	; 0x1c0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1c9e:	e9c5 7705 	strd	r7, r7, [r5, #20]
    1ca2:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
    1ca6:	f019 fbb1 	bl	1b40c <lll_clock_wait>
		if (err) {
    1caa:	2800      	cmp	r0, #0
    1cac:	f040 8104 	bne.w	1eb8 <ll_adv_enable+0x430>
	uint8_t ch_map = lll->chan_map;
    1cb0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1cb4:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1cb6:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1cba:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1cbe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1cc2:	f00e ffb9 	bl	10c38 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1cc6:	2800      	cmp	r0, #0
    1cc8:	f000 8099 	beq.w	1dfe <ll_adv_enable+0x376>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    1ccc:	f898 2000 	ldrb.w	r2, [r8]
    1cd0:	f002 020f 	and.w	r2, r2, #15
    1cd4:	2a02      	cmp	r2, #2
    1cd6:	d03b      	beq.n	1d50 <ll_adv_enable+0x2c8>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1cd8:	2a01      	cmp	r2, #1
    1cda:	f000 80f1 	beq.w	1ec0 <ll_adv_enable+0x438>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1cde:	f899 3001 	ldrb.w	r3, [r9, #1]
    1ce2:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    1ce4:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    1ce6:	2a00      	cmp	r2, #0
    1ce8:	f000 80d9 	beq.w	1e9e <ll_adv_enable+0x416>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1cec:	2a06      	cmp	r2, #6
    1cee:	f000 80fa 	beq.w	1ee6 <ll_adv_enable+0x45e>
    1cf2:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    1cf6:	f44f 711b 	mov.w	r1, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1cfa:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    1cfc:	fb03 1100 	mla	r1, r3, r0, r1
    1d00:	e032      	b.n	1d68 <ll_adv_enable+0x2e0>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1d02:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d06:	4632      	mov	r2, r6
    1d08:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    1d0c:	f018 fcc6 	bl	1a69c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1d10:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1d12:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1d16:	f43f aedd 	beq.w	1ad4 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1d1a:	4630      	mov	r0, r6
    1d1c:	f018 fb6c 	bl	1a3f8 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1d20:	f1b8 0f00 	cmp.w	r8, #0
    1d24:	f47f aed9 	bne.w	1ada <ll_adv_enable+0x52>
    1d28:	e6e9      	b.n	1afe <ll_adv_enable+0x76>
	if (!adv || !adv->is_enabled) {
    1d2a:	4b05      	ldr	r3, [pc, #20]	; (1d40 <ll_adv_enable+0x2b8>)
    1d2c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    1d30:	07db      	lsls	r3, r3, #31
    1d32:	f57f aeec 	bpl.w	1b0e <ll_adv_enable+0x86>
}
    1d36:	b00f      	add	sp, #60	; 0x3c
    1d38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d3c:	f013 b802 	b.w	14d44 <disable.part.0>
    1d40:	2000e6fc 	.word	0x2000e6fc
    1d44:	01480148 	.word	0x01480148
    1d48:	0001417f 	.word	0x0001417f
    1d4c:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    1d50:	f898 3001 	ldrb.w	r3, [r8, #1]
    1d54:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1d56:	00db      	lsls	r3, r3, #3
    1d58:	fb00 f303 	mul.w	r3, r0, r3
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1d5c:	1e41      	subs	r1, r0, #1
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1d5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1d62:	2064      	movs	r0, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1d64:	fb00 3101 	mla	r1, r0, r1, r3
    1d68:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1d6c:	4866      	ldr	r0, [pc, #408]	; (1f08 <ll_adv_enable+0x480>)
	hdr->parent = parent;
    1d6e:	61e4      	str	r4, [r4, #28]
    1d70:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    1d72:	f365 0300 	bfi	r3, r5, #0, #1
    1d76:	f884 3020 	strb.w	r3, [r4, #32]
	adv->evt.ticks_xtal_to_start =
    1d7a:	2331      	movs	r3, #49	; 0x31
    1d7c:	6023      	str	r3, [r4, #0]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1d7e:	fba1 0100 	umull	r0, r1, r1, r0
    1d82:	a35f      	add	r3, pc, #380	; (adr r3, 1f00 <ll_adv_enable+0x478>)
    1d84:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d88:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
    1d8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1d90:	f7ff f8ca 	bl	f28 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1d94:	f8b4 704c 	ldrh.w	r7, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1d98:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1d9a:	f010 f891 	bl	11ec0 <ticker_ticks_now_get>
    1d9e:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1da0:	b947      	cbnz	r7, 1db4 <ll_adv_enable+0x32c>
    1da2:	f898 5000 	ldrb.w	r5, [r8]
    1da6:	f005 050f 	and.w	r5, r5, #15
    1daa:	f1a5 0501 	sub.w	r5, r5, #1
    1dae:	fab5 f585 	clz	r5, r5
    1db2:	096d      	lsrs	r5, r5, #5
    1db4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1db8:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1dbc:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1dc0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
    1dc4:	d022      	beq.n	1e0c <ll_adv_enable+0x384>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    1dc6:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1dc8:	4a50      	ldr	r2, [pc, #320]	; (1f0c <ll_adv_enable+0x484>)
    1dca:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1f10 <ll_adv_enable+0x488>
    1dce:	9304      	str	r3, [sp, #16]
    1dd0:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1dd2:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1dd4:	af0d      	add	r7, sp, #52	; 0x34
    1dd6:	9301      	str	r3, [sp, #4]
    1dd8:	9205      	str	r2, [sp, #20]
    1dda:	2103      	movs	r1, #3
    1ddc:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1de0:	9406      	str	r4, [sp, #24]
    1de2:	464b      	mov	r3, r9
    1de4:	9000      	str	r0, [sp, #0]
    1de6:	9708      	str	r7, [sp, #32]
    1de8:	f8cd 801c 	str.w	r8, [sp, #28]
    1dec:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1dee:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1df0:	f00f ff9a 	bl	11d28 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1df4:	4639      	mov	r1, r7
    1df6:	f012 fbf7 	bl	145e8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d03b      	beq.n	1e76 <ll_adv_enable+0x3ee>
	if (adv->lll.conn) {
    1dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e00:	2b00      	cmp	r3, #0
    1e02:	f43f ae84 	beq.w	1b0e <ll_adv_enable+0x86>
		conn_release(adv);
    1e06:	f012 ff5b 	bl	14cc0 <conn_release.constprop.0>
    1e0a:	e680      	b.n	1b0e <ll_adv_enable+0x86>
		const uint32_t ticks_slot = adv->evt.ticks_slot +
    1e0c:	68e3      	ldr	r3, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1e0e:	4a41      	ldr	r2, [pc, #260]	; (1f14 <ll_adv_enable+0x48c>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1e10:	4841      	ldr	r0, [pc, #260]	; (1f18 <ll_adv_enable+0x490>)
		ret = ticker_start_ext(
    1e12:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1e14:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1e18:	fba7 0100 	umull	r0, r1, r7, r0
		ret = ticker_start_ext(
    1e1c:	9406      	str	r4, [sp, #24]
    1e1e:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1e20:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1e22:	2391      	movs	r3, #145	; 0x91
    1e24:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
    1e28:	4b39      	ldr	r3, [pc, #228]	; (1f10 <ll_adv_enable+0x488>)
    1e2a:	9307      	str	r3, [sp, #28]
    1e2c:	4b37      	ldr	r3, [pc, #220]	; (1f0c <ll_adv_enable+0x484>)
    1e2e:	9305      	str	r3, [sp, #20]
    1e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1e34:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1e36:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
    1e3a:	9303      	str	r3, [sp, #12]
    1e3c:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1e3e:	a330      	add	r3, pc, #192	; (adr r3, 1f00 <ll_adv_enable+0x478>)
    1e40:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1e44:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    1e48:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1e4a:	f7ff f86d 	bl	f28 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1e4e:	464b      	mov	r3, r9
    1e50:	e9cd 5000 	strd	r5, r0, [sp]
    1e54:	4642      	mov	r2, r8
    1e56:	4628      	mov	r0, r5
    1e58:	2103      	movs	r1, #3
    1e5a:	f00f ff0f 	bl	11c7c <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1e5e:	4639      	mov	r1, r7
    1e60:	f012 fbc2 	bl	145e8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1e64:	2800      	cmp	r0, #0
    1e66:	d1ca      	bne.n	1dfe <ll_adv_enable+0x376>
	adv->is_enabled = 1;
    1e68:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    1e6c:	f043 0301 	orr.w	r3, r3, #1
    1e70:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
    1e74:	e64c      	b.n	1b10 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e76:	4a29      	ldr	r2, [pc, #164]	; (1f1c <ll_adv_enable+0x494>)
    1e78:	9205      	str	r2, [sp, #20]
    1e7a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1e7e:	9200      	str	r2, [sp, #0]
    1e80:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1e84:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1e88:	f8cd 801c 	str.w	r8, [sp, #28]
    1e8c:	9708      	str	r7, [sp, #32]
    1e8e:	9406      	str	r4, [sp, #24]
    1e90:	464b      	mov	r3, r9
    1e92:	2201      	movs	r2, #1
    1e94:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1e96:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e98:	f00f ff46 	bl	11d28 <ticker_start>
    1e9c:	e7df      	b.n	1e5e <ll_adv_enable+0x3d6>
				adv_size += pdu_adv->len;
    1e9e:	f898 1001 	ldrb.w	r1, [r8, #1]
    1ea2:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
    1ea4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1ea8:	00ca      	lsls	r2, r1, #3
    1eaa:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1eae:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1eb2:	e722      	b.n	1cfa <ll_adv_enable+0x272>
			return BT_HCI_ERR_INVALID_PARAM;
    1eb4:	2612      	movs	r6, #18
    1eb6:	e62b      	b.n	1b10 <ll_adv_enable+0x88>
			conn_release(adv);
    1eb8:	f012 ff02 	bl	14cc0 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1ebc:	2603      	movs	r6, #3
    1ebe:	e627      	b.n	1b10 <ll_adv_enable+0x88>
    1ec0:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1ec4:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1ec8:	e717      	b.n	1cfa <ll_adv_enable+0x272>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1eca:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1ece:	67a8      	str	r0, [r5, #120]	; 0x78
    1ed0:	e63d      	b.n	1b4e <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1ed2:	2607      	movs	r6, #7
    1ed4:	e61c      	b.n	1b10 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1ed6:	4658      	mov	r0, fp
    1ed8:	f012 fae2 	bl	144a0 <ll_rx_release>
			ll_rx_link_release(link);
    1edc:	4650      	mov	r0, sl
    1ede:	f012 fad3 	bl	14488 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1ee2:	2607      	movs	r6, #7
    1ee4:	e614      	b.n	1b10 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
    1ee6:	f898 2001 	ldrb.w	r2, [r8, #1]
    1eea:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    1eec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1ef0:	00d2      	lsls	r2, r2, #3
    1ef2:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1ef6:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1efa:	e6fe      	b.n	1cfa <ll_adv_enable+0x272>
    1efc:	f3af 8000 	nop.w
    1f00:	1afd498d 	.word	0x1afd498d
    1f04:	00000007 	.word	0x00000007
    1f08:	3b9aca00 	.word	0x3b9aca00
    1f0c:	00014aa1 	.word	0x00014aa1
    1f10:	00013739 	.word	0x00013739
    1f14:	2000e754 	.word	0x2000e754
    1f18:	84e72a00 	.word	0x84e72a00
    1f1c:	00014985 	.word	0x00014985

00001f20 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1f24:	4dc2      	ldr	r5, [pc, #776]	; (2230 <event_conn_upd_prep+0x310>)

	/* set mutex */
	if (!conn_upd) {
    1f26:	682b      	ldr	r3, [r5, #0]
{
    1f28:	b08b      	sub	sp, #44	; 0x2c
    1f2a:	4604      	mov	r4, r0
    1f2c:	460f      	mov	r7, r1
    1f2e:	4690      	mov	r8, r2
	if (!conn_upd) {
    1f30:	2b00      	cmp	r3, #0
    1f32:	f000 8216 	beq.w	2362 <event_conn_upd_prep+0x442>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1f36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1f38:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    1f3a:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1f3c:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1f40:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1f42:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1f46:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1f48:	f040 818e 	bne.w	2268 <event_conn_upd_prep+0x348>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1f4c:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1f50:	eba6 0209 	sub.w	r2, r6, r9
    1f54:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1f58:	0412      	lsls	r2, r2, #16
    1f5a:	f100 81eb 	bmi.w	2334 <event_conn_upd_prep+0x414>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1f5e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    1f62:	2a00      	cmp	r2, #0
    1f64:	f2c0 812b 	blt.w	21be <event_conn_upd_prep+0x29e>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1f68:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1f6c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1f70:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
    1f74:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1f78:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
    1f7c:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1f80:	4293      	cmp	r3, r2
    1f82:	d006      	beq.n	1f92 <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1f84:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1f88:	f003 0307 	and.w	r3, r3, #7
    1f8c:	2b05      	cmp	r3, #5
    1f8e:	f000 823e 	beq.w	240e <event_conn_upd_prep+0x4ee>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    1f92:	682b      	ldr	r3, [r5, #0]
    1f94:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    1f96:	bf04      	itt	eq
    1f98:	2300      	moveq	r3, #0
    1f9a:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1f9c:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
    1fa0:	2d00      	cmp	r5, #0
    1fa2:	f000 8130 	beq.w	2206 <event_conn_upd_prep+0x2e6>
    1fa6:	6828      	ldr	r0, [r5, #0]
    1fa8:	2800      	cmp	r0, #0
    1faa:	f000 812c 	beq.w	2206 <event_conn_upd_prep+0x2e6>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1fae:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    1fb0:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		conn->llcp_rx = rx->hdr.link->mem;
    1fb4:	6841      	ldr	r1, [r0, #4]
    1fb6:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		if ((conn->llcp_cu.interval != lll->interval) ||
    1fba:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    1fbc:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
		if ((conn->llcp_cu.interval != lll->interval) ||
    1fc0:	f000 8105 	beq.w	21ce <event_conn_upd_prep+0x2ae>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1fc4:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1fc8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1fcc:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1fce:	2315      	movs	r3, #21
    1fd0:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1fd2:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1fd4:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    1fd8:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1fda:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    1fdc:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1fde:	4629      	mov	r1, r5
    1fe0:	f012 fa64 	bl	144ac <ll_rx_put>
		ll_rx_sched();
    1fe4:	f012 fa6c 	bl	144c0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1fe8:	6823      	ldr	r3, [r4, #0]
    1fea:	2b00      	cmp	r3, #0
    1fec:	da0a      	bge.n	2004 <event_conn_upd_prep+0xe4>
			uint32_t ticks_prepare_to_start =
    1fee:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1ff6:	4291      	cmp	r1, r2
    1ff8:	bf2c      	ite	cs
    1ffa:	4488      	addcs	r8, r1
    1ffc:	4490      	addcc	r8, r2
    1ffe:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2000:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    2004:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    2006:	f8b4 5114 	ldrh.w	r5, [r4, #276]	; 0x114
		conn_interval_old = instant_latency * lll->interval;
    200a:	fb10 f00b 	smulbb	r0, r0, fp
    200e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    2010:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    2014:	fb15 f301 	smulbb	r3, r5, r1
    2018:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    201a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    201c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    2020:	f080 818d 	bcs.w	233e <event_conn_upd_prep+0x41e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    2024:	1a1b      	subs	r3, r3, r0
    2026:	4983      	ldr	r1, [pc, #524]	; (2234 <event_conn_upd_prep+0x314>)
    2028:	f240 40e2 	movw	r0, #1250	; 0x4e2
    202c:	fb03 f000 	mul.w	r0, r3, r0
    2030:	fba0 0101 	umull	r0, r1, r0, r1
    2034:	a37c      	add	r3, pc, #496	; (adr r3, 2228 <event_conn_upd_prep+0x308>)
    2036:	e9d3 2300 	ldrd	r2, r3, [r3]
    203a:	f7fe ff75 	bl	f28 <__aeabi_uldivmod>
    203e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2042:	4480      	add	r8, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    2044:	8e61      	ldrh	r1, [r4, #50]	; 0x32
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    2046:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    204a:	eba9 0906 	sub.w	r9, r9, r6
    204e:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
    2050:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    2052:	444f      	add	r7, r9
    2054:	8667      	strh	r7, [r4, #50]	; 0x32
		} else if (lll->role) {
    2056:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    2058:	f240 47e2 	movw	r7, #1250	; 0x4e2
    205c:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    2060:	f2c0 8181 	blt.w	2366 <event_conn_upd_prep+0x446>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    2064:	4a74      	ldr	r2, [pc, #464]	; (2238 <event_conn_upd_prep+0x318>)
    2066:	4975      	ldr	r1, [pc, #468]	; (223c <event_conn_upd_prep+0x31c>)
    2068:	4875      	ldr	r0, [pc, #468]	; (2240 <event_conn_upd_prep+0x320>)
    206a:	f640 13f6 	movw	r3, #2550	; 0x9f6
    206e:	f020 f933 	bl	222d8 <printk>
    2072:	4040      	eors	r0, r0
    2074:	f380 8811 	msr	BASEPRI, r0
    2078:	f04f 0003 	mov.w	r0, #3
    207c:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    207e:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    2080:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2082:	4a70      	ldr	r2, [pc, #448]	; (2244 <event_conn_upd_prep+0x324>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2084:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2088:	486f      	ldr	r0, [pc, #444]	; (2248 <event_conn_upd_prep+0x328>)
		lll->latency = conn->llcp_cu.latency;
    208a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    208e:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2090:	4432      	add	r2, r6
    2092:	fbb2 f2f6 	udiv	r2, r2, r6
    2096:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    209a:	f242 7210 	movw	r2, #10000	; 0x2710
    209e:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20a2:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20a4:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20a6:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20aa:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    20ae:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    20b2:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20b4:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20b6:	1d88      	adds	r0, r1, #6
    20b8:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20ba:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20be:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20c2:	dd02      	ble.n	20ca <event_conn_upd_prep+0x1aa>
				     (conn->apto_reload - (lll->latency + 6)) :
    20c4:	1a5b      	subs	r3, r3, r1
    20c6:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20c8:	b29b      	uxth	r3, r3
    20ca:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    20ce:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    20d2:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    20d4:	bf44      	itt	mi
    20d6:	2300      	movmi	r3, #0
    20d8:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    20dc:	2102      	movs	r1, #2
    20de:	2001      	movs	r0, #1
    20e0:	f01b f912 	bl	1d308 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    20e4:	2200      	movs	r2, #0
    20e6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    20e8:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    20ea:	2001      	movs	r0, #1
    20ec:	f00e fc7a 	bl	109e4 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    20f0:	4956      	ldr	r1, [pc, #344]	; (224c <event_conn_upd_prep+0x32c>)
    20f2:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
    20f6:	4620      	mov	r0, r4
    20f8:	f00e fc04 	bl	10904 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    20fc:	f100 0a03 	add.w	sl, r0, #3
    2100:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2104:	4b52      	ldr	r3, [pc, #328]	; (2250 <event_conn_upd_prep+0x330>)
    2106:	9400      	str	r4, [sp, #0]
    2108:	4652      	mov	r2, sl
    210a:	2101      	movs	r1, #1
    210c:	2000      	movs	r0, #0
    210e:	f00f fe95 	bl	11e3c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2112:	f030 0302 	bics.w	r3, r0, #2
    2116:	d00c      	beq.n	2132 <event_conn_upd_prep+0x212>
    2118:	4a47      	ldr	r2, [pc, #284]	; (2238 <event_conn_upd_prep+0x318>)
    211a:	494e      	ldr	r1, [pc, #312]	; (2254 <event_conn_upd_prep+0x334>)
    211c:	4848      	ldr	r0, [pc, #288]	; (2240 <event_conn_upd_prep+0x320>)
    211e:	f640 2325 	movw	r3, #2597	; 0xa25
    2122:	f020 f8d9 	bl	222d8 <printk>
    2126:	4040      	eors	r0, r0
    2128:	f380 8811 	msr	BASEPRI, r0
    212c:	f04f 0003 	mov.w	r0, #3
    2130:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    2132:	4e40      	ldr	r6, [pc, #256]	; (2234 <event_conn_upd_prep+0x314>)
    2134:	fbab 6b06 	umull	r6, fp, fp, r6
    2138:	a33b      	add	r3, pc, #236	; (adr r3, 2228 <event_conn_upd_prep+0x308>)
    213a:	e9d3 2300 	ldrd	r2, r3, [r3]
    213e:	4630      	mov	r0, r6
    2140:	4659      	mov	r1, fp
    2142:	f7fe fef1 	bl	f28 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2146:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    2148:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    214c:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    214e:	4842      	ldr	r0, [pc, #264]	; (2258 <event_conn_upd_prep+0x338>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2150:	68e3      	ldr	r3, [r4, #12]
    2152:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    2154:	fba5 0100 	umull	r0, r1, r5, r0
    2158:	2307      	movs	r3, #7
    215a:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    215e:	4b3f      	ldr	r3, [pc, #252]	; (225c <event_conn_upd_prep+0x33c>)
    2160:	9307      	str	r3, [sp, #28]
    2162:	4b3f      	ldr	r3, [pc, #252]	; (2260 <event_conn_upd_prep+0x340>)
    2164:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    2166:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2168:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    216c:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2170:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    2172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2176:	2300      	movs	r3, #0
    2178:	f7fe fed6 	bl	f28 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    217c:	4643      	mov	r3, r8
    217e:	e9cd 5001 	strd	r5, r0, [sp, #4]
    2182:	9700      	str	r7, [sp, #0]
    2184:	4652      	mov	r2, sl
    2186:	2101      	movs	r1, #1
    2188:	2000      	movs	r0, #0
    218a:	f00f fdcd 	bl	11d28 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    218e:	f030 0302 	bics.w	r3, r0, #2
    2192:	d00c      	beq.n	21ae <event_conn_upd_prep+0x28e>
    2194:	4a28      	ldr	r2, [pc, #160]	; (2238 <event_conn_upd_prep+0x318>)
    2196:	492f      	ldr	r1, [pc, #188]	; (2254 <event_conn_upd_prep+0x334>)
    2198:	4829      	ldr	r0, [pc, #164]	; (2240 <event_conn_upd_prep+0x320>)
    219a:	f640 233f 	movw	r3, #2623	; 0xa3f
    219e:	f020 f89b 	bl	222d8 <printk>
    21a2:	4040      	eors	r0, r0
    21a4:	f380 8811 	msr	BASEPRI, r0
    21a8:	f04f 0003 	mov.w	r0, #3
    21ac:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    21ae:	f1b9 0f00 	cmp.w	r9, #0
    21b2:	f040 8123 	bne.w	23fc <event_conn_upd_prep+0x4dc>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    21b6:	4648      	mov	r0, r9
	}

	return -EINPROGRESS;
}
    21b8:	b00b      	add	sp, #44	; 0x2c
    21ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    21be:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
    21c2:	2a00      	cmp	r2, #0
    21c4:	f43f aed0 	beq.w	1f68 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    21c8:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
    21cc:	e6d0      	b.n	1f70 <event_conn_upd_prep+0x50>
		if ((conn->llcp_cu.interval != lll->interval) ||
    21ce:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    21d0:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    21d2:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
		if ((conn->llcp_cu.interval != lll->interval) ||
    21d6:	f47f aef7 	bne.w	1fc8 <event_conn_upd_prep+0xa8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    21da:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    21de:	fb0c fe03 	mul.w	lr, ip, r3
    21e2:	f242 7c10 	movw	ip, #10000	; 0x2710
    21e6:	fb0c ec01 	mla	ip, ip, r1, lr
    21ea:	f10c 3cff 	add.w	ip, ip, #4294967295
    21ee:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    21f2:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    21f6:	fa1f fc8c 	uxth.w	ip, ip
    21fa:	45e6      	cmp	lr, ip
    21fc:	f47f aee4 	bne.w	1fc8 <event_conn_upd_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2200:	2301      	movs	r3, #1
    2202:	712b      	strb	r3, [r5, #4]
    2204:	e6eb      	b.n	1fde <event_conn_upd_prep+0xbe>
		LL_ASSERT(rx && rx->hdr.link);
    2206:	4a0c      	ldr	r2, [pc, #48]	; (2238 <event_conn_upd_prep+0x318>)
    2208:	4916      	ldr	r1, [pc, #88]	; (2264 <event_conn_upd_prep+0x344>)
    220a:	480d      	ldr	r0, [pc, #52]	; (2240 <event_conn_upd_prep+0x320>)
    220c:	f640 137a 	movw	r3, #2426	; 0x97a
    2210:	f020 f862 	bl	222d8 <printk>
    2214:	4040      	eors	r0, r0
    2216:	f380 8811 	msr	BASEPRI, r0
    221a:	f04f 0003 	mov.w	r0, #3
    221e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2220:	6828      	ldr	r0, [r5, #0]
    2222:	e6c4      	b.n	1fae <event_conn_upd_prep+0x8e>
    2224:	f3af 8000 	nop.w
    2228:	1afd498d 	.word	0x1afd498d
    222c:	00000007 	.word	0x00000007
    2230:	2000eb1c 	.word	0x2000eb1c
    2234:	3b9aca00 	.word	0x3b9aca00
    2238:	0002929c 	.word	0x0002929c
    223c:	00028e78 	.word	0x00028e78
    2240:	00028de0 	.word	0x00028de0
    2244:	026259ff 	.word	0x026259ff
    2248:	01c9c37f 	.word	0x01c9c37f
    224c:	2000e774 	.word	0x2000e774
    2250:	000154c9 	.word	0x000154c9
    2254:	0002937c 	.word	0x0002937c
    2258:	1afd498d 	.word	0x1afd498d
    225c:	00015471 	.word	0x00015471
    2260:	000198ad 	.word	0x000198ad
    2264:	00029368 	.word	0x00029368
		rx = ll_pdu_rx_alloc_peek(1);
    2268:	2001      	movs	r0, #1
    226a:	f012 f92f 	bl	144cc <ll_pdu_rx_alloc_peek>
		if (!rx) {
    226e:	4607      	mov	r7, r0
    2270:	2800      	cmp	r0, #0
    2272:	f000 80de 	beq.w	2432 <event_conn_upd_prep+0x512>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2276:	4876      	ldr	r0, [pc, #472]	; (2450 <event_conn_upd_prep+0x530>)
    2278:	f00e fb0e 	bl	10898 <mem_acquire>
		if (!tx) {
    227c:	4605      	mov	r5, r0
    227e:	2800      	cmp	r0, #0
    2280:	f000 80d7 	beq.w	2432 <event_conn_upd_prep+0x512>
		(void)ll_pdu_rx_alloc();
    2284:	f012 f940 	bl	14508 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2288:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    228a:	683a      	ldr	r2, [r7, #0]
    228c:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    2290:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2292:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    2296:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    229a:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    229c:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    229e:	230c      	movs	r3, #12
    22a0:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    22a2:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    22a4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    22a8:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
    22aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    22ac:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		conn->llcp.conn_upd.instant = event_counter +
    22b0:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    22b2:	4b68      	ldr	r3, [pc, #416]	; (2454 <event_conn_upd_prep+0x534>)
    22b4:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    22b8:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    22bc:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    22c0:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    22c2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    22c6:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    22ca:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    22ce:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    22d2:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
    22d6:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    22da:	3606      	adds	r6, #6
	    conn->tx_head &&
    22dc:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
					      conn->lll.latency + 6;
    22e0:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    22e2:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    22e6:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    22ea:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    22ee:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    22f2:	2b00      	cmp	r3, #0
    22f4:	f000 8091 	beq.w	241a <event_conn_upd_prep+0x4fa>
	    !conn->llcp_enc.pause_tx &&
    22f8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
    22fc:	0790      	lsls	r0, r2, #30
    22fe:	f100 808c 	bmi.w	241a <event_conn_upd_prep+0x4fa>
	    !conn->llcp_phy.pause_tx &&
    2302:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
    2306:	07d1      	lsls	r1, r2, #31
    2308:	f100 8087 	bmi.w	241a <event_conn_upd_prep+0x4fa>
		if (conn->tx_head == conn->tx_data) {
    230c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    2310:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2312:	bf04      	itt	eq
    2314:	681a      	ldreq	r2, [r3, #0]
    2316:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    231a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    231e:	2a00      	cmp	r2, #0
    2320:	d17e      	bne.n	2420 <event_conn_upd_prep+0x500>
			tx->next = conn->tx_head->next;
    2322:	681a      	ldr	r2, [r3, #0]
    2324:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2326:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    2328:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    232a:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
    232e:	b90b      	cbnz	r3, 2334 <event_conn_upd_prep+0x414>
		conn->tx_data_last = tx;
    2330:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	return -EINPROGRESS;
    2334:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    2338:	b00b      	add	sp, #44	; 0x2c
    233a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    233e:	fb05 0111 	mls	r1, r5, r1, r0
    2342:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2346:	4844      	ldr	r0, [pc, #272]	; (2458 <event_conn_upd_prep+0x538>)
    2348:	b289      	uxth	r1, r1
    234a:	fb03 f101 	mul.w	r1, r3, r1
    234e:	fba1 0100 	umull	r0, r1, r1, r0
    2352:	a33d      	add	r3, pc, #244	; (adr r3, 2448 <event_conn_upd_prep+0x528>)
    2354:	e9d3 2300 	ldrd	r2, r3, [r3]
    2358:	f7fe fde6 	bl	f28 <__aeabi_uldivmod>
    235c:	eba8 0800 	sub.w	r8, r8, r0
    2360:	e670      	b.n	2044 <event_conn_upd_prep+0x124>
		conn_upd_curr = conn;
    2362:	6028      	str	r0, [r5, #0]
    2364:	e5e7      	b.n	1f36 <event_conn_upd_prep+0x16>
				lll->slave.window_widening_periodic_us *
    2366:	6c62      	ldr	r2, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    2368:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    236a:	fb02 331b 	mls	r3, r2, fp, r3
    236e:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    2370:	f019 f89e 	bl	1b4b0 <lll_clock_ppm_local_get>
    2374:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2376:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    237a:	f3c0 0082 	ubfx	r0, r0, #2, #3
    237e:	f019 f899 	bl	1b4b4 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    2382:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2384:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2388:	4b34      	ldr	r3, [pc, #208]	; (245c <event_conn_upd_prep+0x53c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    238a:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    238e:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    2392:	f205 253f 	addw	r5, r5, #575	; 0x23f
    2396:	fba3 3505 	umull	r3, r5, r3, r5
    239a:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    239c:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
    23a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			lll->slave.window_size_prepare_us =
    23a2:	6562      	str	r2, [r4, #84]	; 0x54
				lll->slave.window_widening_periodic_us *
    23a4:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    23a8:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    23aa:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    23ac:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    23ae:	4293      	cmp	r3, r2
    23b0:	bf28      	it	cs
    23b2:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
    23b4:	6465      	str	r5, [r4, #68]	; 0x44
			periodic_us -= lll->slave.window_widening_periodic_us;
    23b6:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    23ba:	4d27      	ldr	r5, [pc, #156]	; (2458 <event_conn_upd_prep+0x538>)
			lll->slave.window_widening_prepare_us +=
    23bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			conn->slave.ticks_to_offset = 0U;
    23c0:	2300      	movs	r3, #0
    23c2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    23c6:	fba0 0105 	umull	r0, r1, r0, r5
    23ca:	a31f      	add	r3, pc, #124	; (adr r3, 2448 <event_conn_upd_prep+0x528>)
    23cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    23d0:	f7fe fdaa 	bl	f28 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    23d4:	491f      	ldr	r1, [pc, #124]	; (2454 <event_conn_upd_prep+0x534>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    23d6:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    23da:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    23de:	fba1 3000 	umull	r3, r0, r1, r0
    23e2:	0a80      	lsrs	r0, r0, #10
    23e4:	fb07 f000 	mul.w	r0, r7, r0
    23e8:	a317      	add	r3, pc, #92	; (adr r3, 2448 <event_conn_upd_prep+0x528>)
    23ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    23ee:	fba0 0105 	umull	r0, r1, r0, r5
    23f2:	f7fe fd99 	bl	f28 <__aeabi_uldivmod>
    23f6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    23fa:	e642      	b.n	2082 <event_conn_upd_prep+0x162>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    23fc:	2201      	movs	r2, #1
    23fe:	4610      	mov	r0, r2
    2400:	2102      	movs	r1, #2
    2402:	f00e faef 	bl	109e4 <mayfly_enable>
		return 0;
    2406:	2000      	movs	r0, #0
}
    2408:	b00b      	add	sp, #44	; 0x2c
    240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conn->procedure_expire = 0U;
    240e:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2410:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
			conn->procedure_expire = 0U;
    2414:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2418:	e5bb      	b.n	1f92 <event_conn_upd_prep+0x72>
		if (!conn->tx_ctrl) {
    241a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    241e:	b16a      	cbz	r2, 243c <event_conn_upd_prep+0x51c>
	tx->next = conn->tx_ctrl_last->next;
    2420:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    2424:	681a      	ldr	r2, [r3, #0]
    2426:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    2428:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    242a:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    242c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
    2430:	e77d      	b.n	232e <event_conn_upd_prep+0x40e>
			return -ENOBUFS;
    2432:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2436:	b00b      	add	sp, #44	; 0x2c
    2438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    243c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    243e:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
    2442:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    2446:	e772      	b.n	232e <event_conn_upd_prep+0x40e>
    2448:	1afd498d 	.word	0x1afd498d
    244c:	00000007 	.word	0x00000007
    2450:	2000eba0 	.word	0x2000eba0
    2454:	d1b71759 	.word	0xd1b71759
    2458:	3b9aca00 	.word	0x3b9aca00
    245c:	431bde83 	.word	0x431bde83

00002460 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2464:	b093      	sub	sp, #76	; 0x4c
    2466:	4692      	mov	sl, r2
    2468:	900a      	str	r0, [sp, #40]	; 0x28
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    246a:	6812      	ldr	r2, [r2, #0]
	conn = lll->hdr.parent;
    246c:	4618      	mov	r0, r3
{
    246e:	461d      	mov	r5, r3
    2470:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2472:	6817      	ldr	r7, [r2, #0]
	conn = lll->hdr.parent;
    2474:	f850 8b0c 	ldr.w	r8, [r0], #12

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2478:	2203      	movs	r2, #3
    247a:	312e      	adds	r1, #46	; 0x2e
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    247c:	f105 0908 	add.w	r9, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2480:	f022 fbe6 	bl	24c50 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2484:	f105 061c 	add.w	r6, r5, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2488:	2204      	movs	r2, #4
    248a:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    248e:	4648      	mov	r0, r9
    2490:	f022 fbde 	bl	24c50 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2494:	2205      	movs	r2, #5
    2496:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    249a:	4630      	mov	r0, r6
    249c:	f022 fbd8 	bl	24c50 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    24a0:	4630      	mov	r0, r6
    24a2:	2105      	movs	r1, #5
    24a4:	f00e fbc8 	bl	10c38 <util_ones_count_get>
    24a8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    24ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    24b0:	f360 0205 	bfi	r2, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    24b4:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    24b6:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    24ba:	d90a      	bls.n	24d2 <ull_slave_setup+0x72>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    24bc:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    24c0:	f001 021f 	and.w	r2, r1, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    24c4:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    24c6:	f3c1 0004 	ubfx	r0, r1, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    24ca:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    24cc:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    24d0:	d902      	bls.n	24d8 <ull_slave_setup+0x78>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    24d2:	b013      	add	sp, #76	; 0x4c
    24d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    24d8:	f8da 2000 	ldr.w	r2, [sl]
    24dc:	2000      	movs	r0, #0
    24de:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    24e0:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
	lll->interval = interval;
    24e2:	826e      	strh	r6, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    24e4:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    24e8:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    24ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    24f0:	82aa      	strh	r2, [r5, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    24f2:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    24f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    24f8:	930c      	str	r3, [sp, #48]	; 0x30
	conn->slave.sca = pdu_adv->connect_ind.sca;
    24fa:	0949      	lsrs	r1, r1, #5
    24fc:	f361 0284 	bfi	r2, r1, #2, #3
    2500:	f888 20dc 	strb.w	r2, [r8, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    2504:	f018 ffd4 	bl	1b4b0 <lll_clock_ppm_local_get>
    2508:	900b      	str	r0, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    250a:	f898 00dc 	ldrb.w	r0, [r8, #220]	; 0xdc
    250e:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2512:	f018 ffcf 	bl	1b4b4 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2518:	4ac3      	ldr	r2, [pc, #780]	; (2828 <ull_slave_setup+0x3c8>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    251a:	49c4      	ldr	r1, [pc, #784]	; (282c <ull_slave_setup+0x3cc>)
	conn_interval_us = interval * CONN_INT_UNIT_US;
    251c:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2520:	b2b6      	uxth	r6, r6
	conn_interval_us = interval * CONN_INT_UNIT_US;
    2522:	fb0b f606 	mul.w	r6, fp, r6
		(((lll_clock_ppm_local_get() +
    2526:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2528:	fb06 f000 	mul.w	r0, r6, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    252c:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2530:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2534:	fba2 3000 	umull	r3, r0, r2, r0
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2538:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    253c:	fb0b f202 	mul.w	r2, fp, r2
    2540:	63ea      	str	r2, [r5, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2542:	0872      	lsrs	r2, r6, #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2544:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2546:	3a96      	subs	r2, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2548:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    254a:	62ea      	str	r2, [r5, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    254c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    254e:	8aa8      	ldrh	r0, [r5, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2550:	4ab7      	ldr	r2, [pc, #732]	; (2830 <ull_slave_setup+0x3d0>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2552:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2556:	f242 7c10 	movw	ip, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    255a:	4431      	add	r1, r6
    255c:	fbb1 f1f6 	udiv	r1, r1, r6
    2560:	f8a8 10ca 	strh.w	r1, [r8, #202]	; 0xca
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2564:	b299      	uxth	r1, r3
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2566:	fb0c 6101 	mla	r1, ip, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    256a:	4432      	add	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    256c:	3901      	subs	r1, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    256e:	f100 0c06 	add.w	ip, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2572:	fbb1 f1f6 	udiv	r1, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2576:	fbb2 f2f6 	udiv	r2, r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    257a:	f8a8 10c6 	strh.w	r1, [r8, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    257e:	b291      	uxth	r1, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2580:	4561      	cmp	r1, ip
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2582:	f8a8 10d2 	strh.w	r1, [r8, #210]	; 0xd2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2586:	dd02      	ble.n	258e <ull_slave_setup+0x12e>
			     (conn->apto_reload - (lll->latency + 6)) :
    2588:	1a09      	subs	r1, r1, r0
    258a:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    258c:	b289      	uxth	r1, r1
    258e:	f8a8 10ce 	strh.w	r1, [r8, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2592:	2204      	movs	r2, #4
    2594:	4649      	mov	r1, r9
    2596:	f108 00e0 	add.w	r0, r8, #224	; 0xe0
    259a:	f022 fb59 	bl	24c50 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    259e:	7f22      	ldrb	r2, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    25a0:	f104 091e 	add.w	r9, r4, #30
	peer_addr_type = pdu_adv->tx_addr;
    25a4:	f3c2 1380 	ubfx	r3, r2, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    25a8:	4649      	mov	r1, r9
    25aa:	2206      	movs	r2, #6
    25ac:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    25ae:	930f      	str	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    25b0:	f022 fb4e 	bl	24c50 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    25b4:	7f22      	ldrb	r2, [r4, #28]
	cc->status = 0U;
    25b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    25ba:	83a1      	strh	r1, [r4, #28]
		chan_sel = pdu_adv->chan_sel;
    25bc:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    25c0:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    25c4:	f89a b012 	ldrb.w	fp, [sl, #18]
		chan_sel = pdu_adv->chan_sel;
    25c8:	930e      	str	r3, [sp, #56]	; 0x38
    25ca:	930b      	str	r3, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    25cc:	f018 f9fc 	bl	1a9c8 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    25d0:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    25d2:	4601      	mov	r1, r0
    25d4:	2800      	cmp	r0, #0
    25d6:	f040 80ea 	bne.w	27ae <ull_slave_setup+0x34e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    25da:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    25de:	f022 fb62 	bl	24ca6 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    25e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    25e6:	f000 80ec 	beq.w	27c2 <ull_slave_setup+0x362>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    25ea:	4649      	mov	r1, r9
    25ec:	4658      	mov	r0, fp
    25ee:	f104 021f 	add.w	r2, r4, #31
    25f2:	f017 fc77 	bl	19ee4 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    25f6:	7fa2      	ldrb	r2, [r4, #30]
    25f8:	3202      	adds	r2, #2
    25fa:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    25fc:	a910      	add	r1, sp, #64	; 0x40
    25fe:	2206      	movs	r2, #6
    2600:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2604:	f022 fb24 	bl	24c50 <memcpy>
	cc->sca = conn->slave.sca;
    2608:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	cc->interval = lll->interval;
    260c:	8a69      	ldrh	r1, [r5, #18]
	cc->timeout = timeout;
    260e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cc->interval = lll->interval;
    2612:	8661      	strh	r1, [r4, #50]	; 0x32
	cc->sca = conn->slave.sca;
    2614:	f3c2 0282 	ubfx	r2, r2, #2, #3
	cc->latency = lll->latency;
    2618:	8aa9      	ldrh	r1, [r5, #20]
    261a:	86a1      	strh	r1, [r4, #52]	; 0x34
	cc->timeout = timeout;
    261c:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = conn->slave.sca;
    261e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2622:	4640      	mov	r0, r8
    2624:	f013 fb2a 	bl	15c7c <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2628:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    262a:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    262c:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    262e:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
    2632:	980a      	ldr	r0, [sp, #40]	; 0x28
    2634:	f011 ff3a 	bl	144ac <ll_rx_put>
		rx->handle = lll->handle;
    2638:	8a2b      	ldrh	r3, [r5, #16]
    263a:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    263c:	2318      	movs	r3, #24
    263e:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    2640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    2642:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    2644:	2b00      	cmp	r3, #0
    2646:	f000 80cc 	beq.w	27e2 <ull_slave_setup+0x382>
			lll->data_chan_sel = 1;
    264a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    264e:	892a      	ldrh	r2, [r5, #8]
    2650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2654:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    2658:	896b      	ldrh	r3, [r5, #10]
			lll->data_chan_id = aa_ms ^ aa_ls;
    265a:	4053      	eors	r3, r2
    265c:	846b      	strh	r3, [r5, #34]	; 0x22
			cs->csa = 0x01;
    265e:	2301      	movs	r3, #1
    2660:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    2662:	4621      	mov	r1, r4
    2664:	f011 ff22 	bl	144ac <ll_rx_put>
	ll_rx_sched();
    2668:	f011 ff2a 	bl	144c0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    266c:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    2670:	2101      	movs	r1, #1
    2672:	f000 0007 	and.w	r0, r0, #7
    2676:	f018 fe21 	bl	1b2bc <lll_radio_rx_ready_delay_get>
    267a:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    267c:	486d      	ldr	r0, [pc, #436]	; (2834 <ull_slave_setup+0x3d4>)
	conn->evt.ticks_active_to_start = 0U;
    267e:	f04f 0900 	mov.w	r9, #0
	conn->evt.ticks_xtal_to_start =
    2682:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2684:	f20b 4152 	addw	r1, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2688:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    268c:	e9c8 9901 	strd	r9, r9, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2690:	a363      	add	r3, pc, #396	; (adr r3, 2820 <ull_slave_setup+0x3c0>)
    2692:	e9d3 2300 	ldrd	r2, r3, [r3]
    2696:	fba1 0100 	umull	r0, r1, r1, r0
    269a:	f7fe fc45 	bl	f28 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    269e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	conn_offset_us = ftr->radio_end_us;
    26a0:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    26a4:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    26a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    26ac:	fb01 4403 	mla	r4, r1, r3, r4
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    26b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    26b4:	f204 3486 	addw	r4, r4, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    26b8:	eba4 030b 	sub.w	r3, r4, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    26bc:	464a      	mov	r2, r9
    26be:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    26c0:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    26c4:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    26c6:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    26c8:	f00e f98c 	bl	109e4 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    26cc:	4638      	mov	r0, r7
    26ce:	f012 fcf5 	bl	150bc <ull_adv_handle_get>
    26d2:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    26d4:	4b58      	ldr	r3, [pc, #352]	; (2838 <ull_slave_setup+0x3d8>)
    26d6:	9700      	str	r7, [sp, #0]
    26d8:	b2d2      	uxtb	r2, r2
    26da:	4648      	mov	r0, r9
    26dc:	2101      	movs	r1, #1
    26de:	f00f fbad 	bl	11e3c <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    26e2:	2801      	cmp	r0, #1
    26e4:	f000 8089 	beq.w	27fa <ull_slave_setup+0x39a>
	if (adv->lll.is_hdcd) {
    26e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    26ec:	07db      	lsls	r3, r3, #31
    26ee:	d47c      	bmi.n	27ea <ull_slave_setup+0x38a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    26f0:	4640      	mov	r0, r8
    26f2:	f013 fac3 	bl	15c7c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    26f6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 2834 <ull_slave_setup+0x3d4>
    26fa:	fba6 4609 	umull	r4, r6, r6, r9
    26fe:	a348      	add	r3, pc, #288	; (adr r3, 2820 <ull_slave_setup+0x3c0>)
    2700:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2704:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2706:	4631      	mov	r1, r6
    2708:	4620      	mov	r0, r4
    270a:	f7fe fc0d 	bl	f28 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    270e:	f8da 3008 	ldr.w	r3, [sl, #8]
    2712:	f8cd 8018 	str.w	r8, [sp, #24]
    2716:	f1a3 0a31 	sub.w	sl, r3, #49	; 0x31
    271a:	4b48      	ldr	r3, [pc, #288]	; (283c <ull_slave_setup+0x3dc>)
    271c:	9307      	str	r3, [sp, #28]
    271e:	4b48      	ldr	r3, [pc, #288]	; (2840 <ull_slave_setup+0x3e0>)
    2720:	9305      	str	r3, [sp, #20]
    2722:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    2726:	9308      	str	r3, [sp, #32]
    2728:	f8d8 300c 	ldr.w	r3, [r8, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    272c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    2730:	4844      	ldr	r0, [pc, #272]	; (2844 <ull_slave_setup+0x3e4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2732:	f04f 0b00 	mov.w	fp, #0
    2736:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    273a:	fba7 0100 	umull	r0, r1, r7, r0
    273e:	2307      	movs	r3, #7
    2740:	1a20      	subs	r0, r4, r0
    2742:	fb03 1107 	mla	r1, r3, r7, r1
    2746:	eb66 0101 	sbc.w	r1, r6, r1
    274a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    274e:	2300      	movs	r3, #0
    2750:	f7fe fbea 	bl	f28 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2756:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    275a:	fba3 0109 	umull	r0, r1, r3, r9
    275e:	a330      	add	r3, pc, #192	; (adr r3, 2820 <ull_slave_setup+0x3c0>)
    2760:	e9d3 2300 	ldrd	r2, r3, [r3]
    2764:	f7fe fbe0 	bl	f28 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2768:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    276a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    276e:	b2ed      	uxtb	r5, r5
    2770:	9000      	str	r0, [sp, #0]
    2772:	4653      	mov	r3, sl
    2774:	462a      	mov	r2, r5
    2776:	2101      	movs	r1, #1
    2778:	4658      	mov	r0, fp
    277a:	f00f fad5 	bl	11d28 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    277e:	f030 0302 	bics.w	r3, r0, #2
    2782:	d00c      	beq.n	279e <ull_slave_setup+0x33e>
    2784:	4a30      	ldr	r2, [pc, #192]	; (2848 <ull_slave_setup+0x3e8>)
    2786:	4931      	ldr	r1, [pc, #196]	; (284c <ull_slave_setup+0x3ec>)
    2788:	4831      	ldr	r0, [pc, #196]	; (2850 <ull_slave_setup+0x3f0>)
    278a:	f240 136d 	movw	r3, #365	; 0x16d
    278e:	f01f fda3 	bl	222d8 <printk>
    2792:	4040      	eors	r0, r0
    2794:	f380 8811 	msr	BASEPRI, r0
    2798:	f04f 0003 	mov.w	r0, #3
    279c:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    279e:	2201      	movs	r2, #1
    27a0:	2102      	movs	r1, #2
    27a2:	4610      	mov	r0, r2
    27a4:	f00e f91e 	bl	109e4 <mayfly_enable>
}
    27a8:	b013      	add	sp, #76	; 0x4c
    27aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    27ae:	f104 0124 	add.w	r1, r4, #36	; 0x24
    27b2:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    27b6:	f022 fa4b 	bl	24c50 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    27ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    27be:	f47f af14 	bne.w	25ea <ull_slave_setup+0x18a>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    27c2:	2206      	movs	r2, #6
    27c4:	2100      	movs	r1, #0
    27c6:	f104 0025 	add.w	r0, r4, #37	; 0x25
    27ca:	f022 fa6c 	bl	24ca6 <memset>
		cc->peer_addr_type = peer_addr_type;
    27ce:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    27d2:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    27d4:	a910      	add	r1, sp, #64	; 0x40
    27d6:	2206      	movs	r2, #6
    27d8:	f104 001f 	add.w	r0, r4, #31
    27dc:	f022 fa38 	bl	24c50 <memcpy>
    27e0:	e712      	b.n	2608 <ull_slave_setup+0x1a8>
			cs->csa = 0x00;
    27e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    27e6:	7723      	strb	r3, [r4, #28]
    27e8:	e73b      	b.n	2662 <ull_slave_setup+0x202>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    27ea:	2300      	movs	r3, #0
    27ec:	2201      	movs	r2, #1
    27ee:	9300      	str	r3, [sp, #0]
    27f0:	4618      	mov	r0, r3
    27f2:	4611      	mov	r1, r2
    27f4:	f00f fb22 	bl	11e3c <ticker_stop>
    27f8:	e77a      	b.n	26f0 <ull_slave_setup+0x290>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    27fa:	f011 ff33 	bl	14664 <ull_disable_mark_get>
    27fe:	4287      	cmp	r7, r0
    2800:	f43f af72 	beq.w	26e8 <ull_slave_setup+0x288>
    2804:	4a10      	ldr	r2, [pc, #64]	; (2848 <ull_slave_setup+0x3e8>)
    2806:	4913      	ldr	r1, [pc, #76]	; (2854 <ull_slave_setup+0x3f4>)
    2808:	4811      	ldr	r0, [pc, #68]	; (2850 <ull_slave_setup+0x3f0>)
    280a:	f240 13fd 	movw	r3, #509	; 0x1fd
    280e:	f01f fd63 	bl	222d8 <printk>
    2812:	4040      	eors	r0, r0
    2814:	f380 8811 	msr	BASEPRI, r0
    2818:	f04f 0003 	mov.w	r0, #3
    281c:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    281e:	e763      	b.n	26e8 <ull_slave_setup+0x288>
    2820:	1afd498d 	.word	0x1afd498d
    2824:	00000007 	.word	0x00000007
    2828:	431bde83 	.word	0x431bde83
    282c:	026259ff 	.word	0x026259ff
    2830:	01c9c37f 	.word	0x01c9c37f
    2834:	3b9aca00 	.word	0x3b9aca00
    2838:	00019871 	.word	0x00019871
    283c:	00019841 	.word	0x00019841
    2840:	000198ad 	.word	0x000198ad
    2844:	1afd498d 	.word	0x1afd498d
    2848:	000294c4 	.word	0x000294c4
    284c:	0002937c 	.word	0x0002937c
    2850:	00028de0 	.word	0x00028de0
    2854:	0002951c 	.word	0x0002951c

00002858 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    2858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    285c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    285e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2938 <nrf_flash_sync_exe+0xe0>
{
    2862:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2864:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    2868:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    286c:	f011 fe96 	bl	1459c <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    2870:	4f32      	ldr	r7, [pc, #200]	; (293c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    2872:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    2876:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    287a:	f00f fb21 	bl	11ec0 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    287e:	f8d8 4000 	ldr.w	r4, [r8]
    2882:	fba4 5407 	umull	r5, r4, r4, r7
    2886:	a32a      	add	r3, pc, #168	; (adr r3, 2930 <nrf_flash_sync_exe+0xd8>)
    2888:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    288c:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    288e:	4621      	mov	r1, r4
    2890:	4628      	mov	r0, r5
    2892:	f7fe fb49 	bl	f28 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    2898:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    289a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    289e:	9306      	str	r3, [sp, #24]
    28a0:	4b27      	ldr	r3, [pc, #156]	; (2940 <nrf_flash_sync_exe+0xe8>)
    28a2:	9305      	str	r3, [sp, #20]
    28a4:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    28a6:	a322      	add	r3, pc, #136	; (adr r3, 2930 <nrf_flash_sync_exe+0xd8>)
    28a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    28ac:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    28b0:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    28b4:	f7fe fb38 	bl	f28 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    28b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    28ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28be:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    28c2:	4820      	ldr	r0, [pc, #128]	; (2944 <nrf_flash_sync_exe+0xec>)
    28c4:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    28c8:	fba7 0100 	umull	r0, r1, r7, r0
    28cc:	2307      	movs	r3, #7
    28ce:	1a28      	subs	r0, r5, r0
    28d0:	fb03 1107 	mla	r1, r3, r7, r1
    28d4:	eb64 0101 	sbc.w	r1, r4, r1
    28d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28dc:	2300      	movs	r3, #0
    28de:	f7fe fb23 	bl	f28 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    28e2:	9600      	str	r6, [sp, #0]
    28e4:	e9cd 7001 	strd	r7, r0, [sp, #4]
    28e8:	464b      	mov	r3, r9
    28ea:	465a      	mov	r2, fp
    28ec:	2103      	movs	r1, #3
    28ee:	4650      	mov	r0, sl
    28f0:	f00f fa1a 	bl	11d28 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    28f4:	f030 0402 	bics.w	r4, r0, #2
    28f8:	d116      	bne.n	2928 <nrf_flash_sync_exe+0xd0>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    28fa:	4a13      	ldr	r2, [pc, #76]	; (2948 <nrf_flash_sync_exe+0xf0>)
    28fc:	4813      	ldr	r0, [pc, #76]	; (294c <nrf_flash_sync_exe+0xf4>)
    28fe:	2300      	movs	r3, #0
    2900:	f01e f9b0 	bl	20c64 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2904:	b168      	cbz	r0, 2922 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    2906:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    290a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    290e:	9400      	str	r4, [sp, #0]
    2910:	4623      	mov	r3, r4
    2912:	2103      	movs	r1, #3
    2914:	f00f fa92 	bl	11e3c <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    2918:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    291c:	b00f      	add	sp, #60	; 0x3c
    291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    2922:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2926:	e7f9      	b.n	291c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    2928:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    292c:	e7f6      	b.n	291c <nrf_flash_sync_exe+0xc4>
    292e:	bf00      	nop
    2930:	1afd498d 	.word	0x1afd498d
    2934:	00000007 	.word	0x00000007
    2938:	2000f3b8 	.word	0x2000f3b8
    293c:	3b9aca00 	.word	0x3b9aca00
    2940:	0001ebc1 	.word	0x0001ebc1
    2944:	1afd498d 	.word	0x1afd498d
    2948:	000b7b44 	.word	0x000b7b44
    294c:	2000f3c8 	.word	0x2000f3c8

00002950 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    2950:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2952:	4d0f      	ldr	r5, [pc, #60]	; (2990 <nrf_flash_sync_check_time_limit+0x40>)
{
    2954:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2956:	f00f fab3 	bl	11ec0 <ticker_ticks_now_get>
    295a:	68a9      	ldr	r1, [r5, #8]
    295c:	f00f fab2 	bl	11ec4 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2960:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    2962:	fbb0 f4f4 	udiv	r4, r0, r4
    2966:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2968:	480a      	ldr	r0, [pc, #40]	; (2994 <nrf_flash_sync_check_time_limit+0x44>)
    296a:	a307      	add	r3, pc, #28	; (adr r3, 2988 <nrf_flash_sync_check_time_limit+0x38>)
    296c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2970:	fba1 0100 	umull	r0, r1, r1, r0
    2974:	f7fe fad8 	bl	f28 <__aeabi_uldivmod>
    2978:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    297c:	4284      	cmp	r4, r0
    297e:	bf94      	ite	ls
    2980:	2000      	movls	r0, #0
    2982:	2001      	movhi	r0, #1
    2984:	bd38      	pop	{r3, r4, r5, pc}
    2986:	bf00      	nop
    2988:	1afd498d 	.word	0x1afd498d
    298c:	00000007 	.word	0x00000007
    2990:	2000f3b8 	.word	0x2000f3b8
    2994:	3b9aca00 	.word	0x3b9aca00

00002998 <vnd_ccc_cfg_changed>:
	printk("CSTM notifications %s", notif_enabled ? "enabled" : "disabled");
    2998:	4a04      	ldr	r2, [pc, #16]	; (29ac <vnd_ccc_cfg_changed+0x14>)
    299a:	4b05      	ldr	r3, [pc, #20]	; (29b0 <vnd_ccc_cfg_changed+0x18>)
    299c:	4805      	ldr	r0, [pc, #20]	; (29b4 <vnd_ccc_cfg_changed+0x1c>)
    299e:	2901      	cmp	r1, #1
    29a0:	bf0c      	ite	eq
    29a2:	4611      	moveq	r1, r2
    29a4:	4619      	movne	r1, r3
    29a6:	f01f bc97 	b.w	222d8 <printk>
    29aa:	bf00      	nop
    29ac:	00029d1e 	.word	0x00029d1e
    29b0:	00029d26 	.word	0x00029d26
    29b4:	00029d2f 	.word	0x00029d2f

000029b8 <rscm_ccc_cfg_changed>:
	printk("RSCS notifications %s \n", notif_enabled ? "enabled" : "disabled");
    29b8:	4a04      	ldr	r2, [pc, #16]	; (29cc <rscm_ccc_cfg_changed+0x14>)
    29ba:	4b05      	ldr	r3, [pc, #20]	; (29d0 <rscm_ccc_cfg_changed+0x18>)
    29bc:	4805      	ldr	r0, [pc, #20]	; (29d4 <rscm_ccc_cfg_changed+0x1c>)
    29be:	2901      	cmp	r1, #1
    29c0:	bf0c      	ite	eq
    29c2:	4611      	moveq	r1, r2
    29c4:	4619      	movne	r1, r3
    29c6:	f01f bc87 	b.w	222d8 <printk>
    29ca:	bf00      	nop
    29cc:	00029d1e 	.word	0x00029d1e
    29d0:	00029d26 	.word	0x00029d26
    29d4:	00029d45 	.word	0x00029d45

000029d8 <disconnected>:
	printk("Disconnected (reason 0x%02x)\n", reason);
    29d8:	4801      	ldr	r0, [pc, #4]	; (29e0 <disconnected+0x8>)
    29da:	f01f bc7d 	b.w	222d8 <printk>
    29de:	bf00      	nop
    29e0:	00029d5d 	.word	0x00029d5d

000029e4 <connected>:
	if (err) {
    29e4:	b111      	cbz	r1, 29ec <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    29e6:	4803      	ldr	r0, [pc, #12]	; (29f4 <connected+0x10>)
    29e8:	f01f bc76 	b.w	222d8 <printk>
		printk("Connected\n");
    29ec:	4802      	ldr	r0, [pc, #8]	; (29f8 <connected+0x14>)
    29ee:	f01f bc73 	b.w	222d8 <printk>
    29f2:	bf00      	nop
    29f4:	00029d7b 	.word	0x00029d7b
    29f8:	00029d9b 	.word	0x00029d9b

000029fc <hrs_notify>:
	if (heart_rate > 200U) {
    29fc:	4b04      	ldr	r3, [pc, #16]	; (2a10 <hrs_notify+0x14>)
    29fe:	681a      	ldr	r2, [r3, #0]
    2a00:	2ac8      	cmp	r2, #200	; 0xc8
		heart_rate = 0U;
    2a02:	bf84      	itt	hi
    2a04:	2200      	movhi	r2, #0
    2a06:	601a      	strhi	r2, [r3, #0]
	bt_hrs_notify(heart_rate);
    2a08:	8818      	ldrh	r0, [r3, #0]
    2a0a:	f003 baf9 	b.w	6000 <bt_hrs_notify>
    2a0e:	bf00      	nop
    2a10:	2000b1a0 	.word	0x2000b1a0

00002a14 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2a14:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2a16:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2a18:	b08a      	sub	sp, #40	; 0x28
    2a1a:	4604      	mov	r4, r0
    2a1c:	460e      	mov	r6, r1
    2a1e:	ad07      	add	r5, sp, #28
    2a20:	2b03      	cmp	r3, #3
    2a22:	d820      	bhi.n	2a66 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    2a24:	e8df f003 	tbb	[pc, r3]
    2a28:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2a2c:	4911      	ldr	r1, [pc, #68]	; (2a74 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2a2e:	4628      	mov	r0, r5
    2a30:	f022 f8b4 	bl	24b9c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2a34:	7863      	ldrb	r3, [r4, #1]
    2a36:	9304      	str	r3, [sp, #16]
    2a38:	78a3      	ldrb	r3, [r4, #2]
    2a3a:	9303      	str	r3, [sp, #12]
    2a3c:	78e3      	ldrb	r3, [r4, #3]
    2a3e:	9302      	str	r3, [sp, #8]
    2a40:	7923      	ldrb	r3, [r4, #4]
    2a42:	9301      	str	r3, [sp, #4]
    2a44:	7963      	ldrb	r3, [r4, #5]
    2a46:	9300      	str	r3, [sp, #0]
    2a48:	4a0b      	ldr	r2, [pc, #44]	; (2a78 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    2a4a:	79a3      	ldrb	r3, [r4, #6]
    2a4c:	9505      	str	r5, [sp, #20]
    2a4e:	211e      	movs	r1, #30
    2a50:	4630      	mov	r0, r6
    2a52:	f01f fc4e 	bl	222f2 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    2a56:	b00a      	add	sp, #40	; 0x28
    2a58:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2a5a:	4908      	ldr	r1, [pc, #32]	; (2a7c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    2a5c:	e7e7      	b.n	2a2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    2a5e:	4908      	ldr	r1, [pc, #32]	; (2a80 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    2a60:	e7e5      	b.n	2a2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    2a62:	4908      	ldr	r1, [pc, #32]	; (2a84 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    2a64:	e7e3      	b.n	2a2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2a66:	4a08      	ldr	r2, [pc, #32]	; (2a88 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    2a68:	210a      	movs	r1, #10
    2a6a:	4628      	mov	r0, r5
    2a6c:	f01f fc41 	bl	222f2 <snprintk>
		break;
    2a70:	e7e0      	b.n	2a34 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    2a72:	bf00      	nop
    2a74:	00029da6 	.word	0x00029da6
    2a78:	00029dc8 	.word	0x00029dc8
    2a7c:	00029dad 	.word	0x00029dad
    2a80:	00029db4 	.word	0x00029db4
    2a84:	00029dbe 	.word	0x00029dbe
    2a88:	0002de1e 	.word	0x0002de1e

00002a8c <auth_cancel>:
{
    2a8c:	b500      	push	{lr}
    2a8e:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2a90:	f022 fd4f 	bl	25532 <bt_conn_get_dst>
    2a94:	4669      	mov	r1, sp
    2a96:	f7ff ffbd 	bl	2a14 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
    2a9a:	4803      	ldr	r0, [pc, #12]	; (2aa8 <auth_cancel+0x1c>)
    2a9c:	4669      	mov	r1, sp
    2a9e:	f01f fc1b 	bl	222d8 <printk>
}
    2aa2:	b009      	add	sp, #36	; 0x24
    2aa4:	f85d fb04 	ldr.w	pc, [sp], #4
    2aa8:	00029deb 	.word	0x00029deb

00002aac <auth_passkey_display>:
{
    2aac:	b510      	push	{r4, lr}
    2aae:	b088      	sub	sp, #32
    2ab0:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2ab2:	f022 fd3e 	bl	25532 <bt_conn_get_dst>
    2ab6:	4669      	mov	r1, sp
    2ab8:	f7ff ffac 	bl	2a14 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
    2abc:	4803      	ldr	r0, [pc, #12]	; (2acc <auth_passkey_display+0x20>)
    2abe:	4622      	mov	r2, r4
    2ac0:	4669      	mov	r1, sp
    2ac2:	f01f fc09 	bl	222d8 <printk>
}
    2ac6:	b008      	add	sp, #32
    2ac8:	bd10      	pop	{r4, pc}
    2aca:	bf00      	nop
    2acc:	00029e02 	.word	0x00029e02

00002ad0 <buzzer_task>:
{
    2ad0:	b508      	push	{r3, lr}
		if (latch_status == false)
    2ad2:	4c05      	ldr	r4, [pc, #20]	; (2ae8 <buzzer_task+0x18>)
    2ad4:	7823      	ldrb	r3, [r4, #0]
    2ad6:	b913      	cbnz	r3, 2ade <buzzer_task+0xe>
			toggle_buzzer(1);
    2ad8:	2001      	movs	r0, #1
    2ada:	f001 fc49 	bl	4370 <toggle_buzzer>
		k_msleep(500);
    2ade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2ae2:	f01e fd3a 	bl	2155a <k_msleep.isra.0>
		if (latch_status == false)
    2ae6:	e7f5      	b.n	2ad4 <buzzer_task+0x4>
    2ae8:	2000094f 	.word	0x2000094f

00002aec <vibration_task>:
{
    2aec:	b508      	push	{r3, lr}
		if (latch_status == false)
    2aee:	4c06      	ldr	r4, [pc, #24]	; (2b08 <vibration_task+0x1c>)
    2af0:	7823      	ldrb	r3, [r4, #0]
    2af2:	b93b      	cbnz	r3, 2b04 <vibration_task+0x18>
			toggle_motor(1); //1
    2af4:	2001      	movs	r0, #1
			toggle_motor(0); //0
    2af6:	f001 fc55 	bl	43a4 <toggle_motor>
		k_msleep(500);
    2afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2afe:	f01e fd2c 	bl	2155a <k_msleep.isra.0>
		if (latch_status == false)
    2b02:	e7f5      	b.n	2af0 <vibration_task+0x4>
			toggle_motor(0); //0
    2b04:	2000      	movs	r0, #0
    2b06:	e7f6      	b.n	2af6 <vibration_task+0xa>
    2b08:	2000094f 	.word	0x2000094f

00002b0c <latch_sensor_task>:
{
    2b0c:	b508      	push	{r3, lr}
	init_latch();
    2b0e:	f000 fe2b 	bl	3768 <init_latch>
	init_output();
    2b12:	f001 fbf1 	bl	42f8 <init_output>
		latch_status = detect_latch();
    2b16:	4c04      	ldr	r4, [pc, #16]	; (2b28 <latch_sensor_task+0x1c>)
    2b18:	f000 fe8e 	bl	3838 <detect_latch>
    2b1c:	7020      	strb	r0, [r4, #0]
		k_msleep(500);
    2b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2b22:	f01e fd1a 	bl	2155a <k_msleep.isra.0>
	while (1)
    2b26:	e7f7      	b.n	2b18 <latch_sensor_task+0xc>
    2b28:	2000094f 	.word	0x2000094f

00002b2c <bt_rsc_notify>:
{
    2b2c:	b510      	push	{r4, lr}
	rsc[1] = i*10;
    2b2e:	4a12      	ldr	r2, [pc, #72]	; (2b78 <bt_rsc_notify+0x4c>)
	rsc[0] = 0x01010002; // Instantaneous Stride Length, Total Distance Present
    2b30:	4c12      	ldr	r4, [pc, #72]	; (2b7c <bt_rsc_notify+0x50>)
    2b32:	4b13      	ldr	r3, [pc, #76]	; (2b80 <bt_rsc_notify+0x54>)
    2b34:	6023      	str	r3, [r4, #0]
	rsc[1] = i*10;
    2b36:	6813      	ldr	r3, [r2, #0]
    2b38:	210a      	movs	r1, #10
    2b3a:	4359      	muls	r1, r3
    2b3c:	6061      	str	r1, [r4, #4]
	i++;
    2b3e:	3301      	adds	r3, #1
	if (i>10000)
    2b40:	f242 7110 	movw	r1, #10000	; 0x2710
    2b44:	428b      	cmp	r3, r1
{
    2b46:	b086      	sub	sp, #24
		i = 0;
    2b48:	bf88      	it	hi
    2b4a:	2300      	movhi	r3, #0
    2b4c:	6013      	str	r3, [r2, #0]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    2b4e:	2100      	movs	r1, #0
    2b50:	2218      	movs	r2, #24
    2b52:	4668      	mov	r0, sp
    2b54:	f022 f8a7 	bl	24ca6 <memset>

	params.attr = attr;
    2b58:	4b0a      	ldr	r3, [pc, #40]	; (2b84 <bt_rsc_notify+0x58>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    2b5a:	4669      	mov	r1, sp
	params.data = data;
    2b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    2b60:	2000      	movs	r0, #0
	params.len = len;
    2b62:	2308      	movs	r3, #8
    2b64:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    2b68:	f00b fa2c 	bl	dfc4 <bt_gatt_notify_cb>
	return rc == -ENOTCONN ? 0 : rc;
    2b6c:	f110 0f39 	cmn.w	r0, #57	; 0x39
}
    2b70:	bf08      	it	eq
    2b72:	2000      	moveq	r0, #0
    2b74:	b006      	add	sp, #24
    2b76:	bd10      	pop	{r4, pc}
    2b78:	2000b1a8 	.word	0x2000b1a8
    2b7c:	2000b1ac 	.word	0x2000b1ac
    2b80:	01010002 	.word	0x01010002
    2b84:	0002847c 	.word	0x0002847c

00002b88 <sensors_read_task>:
{
    2b88:	b508      	push	{r3, lr}
	initialize_bma();
    2b8a:	f000 f9ff 	bl	2f8c <initialize_bma>
	stepCounterEnable();
    2b8e:	f000 fa59 	bl	3044 <stepCounterEnable>
	init_max30102();
    2b92:	f000 fc63 	bl	345c <init_max30102>
	set_max30102_for_reading_data();
    2b96:	f01f f84f 	bl	21c38 <set_max30102_for_reading_data>
	first_data_read();
    2b9a:	f000 fce5 	bl	3568 <first_data_read>
	init_max30208();
    2b9e:	f000 fecb 	bl	3938 <init_max30208>
	configure_max30208();
    2ba2:	f000 fee7 	bl	3974 <configure_max30208>
	configure_mpu6050();
    2ba6:	f000 ff1b 	bl	39e0 <configure_mpu6050>
	display_mode = DISPLAY_MODE_TIME;
    2baa:	4b13      	ldr	r3, [pc, #76]	; (2bf8 <sensors_read_task+0x70>)
		switch (sensor_mode)
    2bac:	4e13      	ldr	r6, [pc, #76]	; (2bfc <sensors_read_task+0x74>)
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2bae:	4d14      	ldr	r5, [pc, #80]	; (2c00 <sensors_read_task+0x78>)
    2bb0:	4c14      	ldr	r4, [pc, #80]	; (2c04 <sensors_read_task+0x7c>)
	display_mode = DISPLAY_MODE_TIME;
    2bb2:	2201      	movs	r2, #1
    2bb4:	601a      	str	r2, [r3, #0]
		switch (sensor_mode)
    2bb6:	6833      	ldr	r3, [r6, #0]
    2bb8:	b1c3      	cbz	r3, 2bec <sensors_read_task+0x64>
    2bba:	2b01      	cmp	r3, #1
    2bbc:	d1fc      	bne.n	2bb8 <sensors_read_task+0x30>
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2bbe:	4912      	ldr	r1, [pc, #72]	; (2c08 <sensors_read_task+0x80>)
    2bc0:	4812      	ldr	r0, [pc, #72]	; (2c0c <sensors_read_task+0x84>)
    2bc2:	4622      	mov	r2, r4
    2bc4:	462b      	mov	r3, r5
    2bc6:	f000 fd2f 	bl	3628 <read_heart_rate_spio2>
			max30208_read_temp(&temp_data);
    2bca:	4811      	ldr	r0, [pc, #68]	; (2c10 <sensors_read_task+0x88>)
    2bcc:	f7fe fbe4 	bl	1398 <max30208_read_temp>
			steps = getStepCounterOutput();
    2bd0:	f000 fac2 	bl	3158 <getStepCounterOutput>
    2bd4:	4b0f      	ldr	r3, [pc, #60]	; (2c14 <sensors_read_task+0x8c>)
    2bd6:	6018      	str	r0, [r3, #0]
			mpu6050_read_Acc(&mpu_data);
    2bd8:	480f      	ldr	r0, [pc, #60]	; (2c18 <sensors_read_task+0x90>)
    2bda:	f01f f8cf 	bl	21d7c <mpu6050_read_Acc>
			hrs_notify();
    2bde:	f7ff ff0d 	bl	29fc <hrs_notify>
			bt_rsc_notify(33);
    2be2:	2021      	movs	r0, #33	; 0x21
    2be4:	f7ff ffa2 	bl	2b2c <bt_rsc_notify>
			k_msleep(10);
    2be8:	200a      	movs	r0, #10
    2bea:	e001      	b.n	2bf0 <sensors_read_task+0x68>
			k_msleep(500);
    2bec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			k_msleep(10);
    2bf0:	f01e fcb3 	bl	2155a <k_msleep.isra.0>
			break;
    2bf4:	e7df      	b.n	2bb6 <sensors_read_task+0x2e>
    2bf6:	bf00      	nop
    2bf8:	2000b19c 	.word	0x2000b19c
    2bfc:	2000b1b4 	.word	0x2000b1b4
    2c00:	2000f591 	.word	0x2000f591
    2c04:	2000f590 	.word	0x2000f590
    2c08:	2000b1bc 	.word	0x2000b1bc
    2c0c:	2000b1a0 	.word	0x2000b1a0
    2c10:	2000b1c4 	.word	0x2000b1c4
    2c14:	2000b1c0 	.word	0x2000b1c0
    2c18:	2000f548 	.word	0x2000f548

00002c1c <refresh_display>:
{
    2c1c:	b508      	push	{r3, lr}
	resetDisplay();
    2c1e:	f01f f9c3 	bl	21fa8 <resetDisplay>
	k_msleep(1);
    2c22:	2001      	movs	r0, #1
    2c24:	f01e fc99 	bl	2155a <k_msleep.isra.0>
	LCD_Init();
    2c28:	f001 face 	bl	41c8 <LCD_Init>
	SetBrightness(current_brightness);
    2c2c:	4b02      	ldr	r3, [pc, #8]	; (2c38 <refresh_display+0x1c>)
    2c2e:	6818      	ldr	r0, [r3, #0]
}
    2c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetBrightness(current_brightness);
    2c34:	f01f b982 	b.w	21f3c <SetBrightness>
    2c38:	20000280 	.word	0x20000280

00002c3c <display_task>:
{
    2c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c40:	b088      	sub	sp, #32
	LCD_Init();
    2c42:	f001 fac1 	bl	41c8 <LCD_Init>
	SetBrightness(255);
    2c46:	20ff      	movs	r0, #255	; 0xff
    2c48:	f01f f978 	bl	21f3c <SetBrightness>
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2c4c:	4e8e      	ldr	r6, [pc, #568]	; (2e88 <display_task+0x24c>)
		if (current_brightness < brightness_value)
    2c4e:	4d8f      	ldr	r5, [pc, #572]	; (2e8c <display_task+0x250>)
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2c50:	6833      	ldr	r3, [r6, #0]
    2c52:	2bff      	cmp	r3, #255	; 0xff
    2c54:	dd31      	ble.n	2cba <display_task+0x7e>
			brightness_value = MAXIMUM_BRIGHTNESS;
    2c56:	23ff      	movs	r3, #255	; 0xff
			brightness_value = MINIMUM_BRIGHTNESS;
    2c58:	6033      	str	r3, [r6, #0]
		if (current_brightness < brightness_value)
    2c5a:	682b      	ldr	r3, [r5, #0]
    2c5c:	6832      	ldr	r2, [r6, #0]
    2c5e:	4293      	cmp	r3, r2
    2c60:	da2f      	bge.n	2cc2 <display_task+0x86>
			current_brightness += brightness_step;
    2c62:	4a8b      	ldr	r2, [pc, #556]	; (2e90 <display_task+0x254>)
    2c64:	6812      	ldr	r2, [r2, #0]
    2c66:	4413      	add	r3, r2
			current_brightness -= brightness_step;
    2c68:	602b      	str	r3, [r5, #0]
		if (current_brightness > MAXIMUM_BRIGHTNESS)
    2c6a:	682b      	ldr	r3, [r5, #0]
    2c6c:	2bff      	cmp	r3, #255	; 0xff
    2c6e:	dd2d      	ble.n	2ccc <display_task+0x90>
			current_brightness = MAXIMUM_BRIGHTNESS;
    2c70:	23ff      	movs	r3, #255	; 0xff
			current_brightness = MINIMUM_BRIGHTNESS;
    2c72:	602b      	str	r3, [r5, #0]
		SetBrightness(current_brightness);
    2c74:	6828      	ldr	r0, [r5, #0]
    2c76:	f01f f961 	bl	21f3c <SetBrightness>
		switch (display_mode)
    2c7a:	4b86      	ldr	r3, [pc, #536]	; (2e94 <display_task+0x258>)
    2c7c:	681c      	ldr	r4, [r3, #0]
    2c7e:	2c01      	cmp	r4, #1
    2c80:	d028      	beq.n	2cd4 <display_task+0x98>
    2c82:	2c04      	cmp	r4, #4
    2c84:	d040      	beq.n	2d08 <display_task+0xcc>
    2c86:	2c00      	cmp	r4, #0
    2c88:	d1e2      	bne.n	2c50 <display_task+0x14>
			DispLogo(logo_colour[i]);
    2c8a:	4f83      	ldr	r7, [pc, #524]	; (2e98 <display_task+0x25c>)
			DispStr("BOOTING", 150, 150, WHITE, BLACK);
    2c8c:	4883      	ldr	r0, [pc, #524]	; (2e9c <display_task+0x260>)
    2c8e:	9400      	str	r4, [sp, #0]
    2c90:	2296      	movs	r2, #150	; 0x96
    2c92:	4611      	mov	r1, r2
    2c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c98:	f01f fa21 	bl	220de <DispStr>
			DispLogo(logo_colour[i]);
    2c9c:	683a      	ldr	r2, [r7, #0]
    2c9e:	4b80      	ldr	r3, [pc, #512]	; (2ea0 <display_task+0x264>)
    2ca0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    2ca4:	f001 f9b4 	bl	4010 <DispLogo>
			if (i >= (sizeof(logo_colour) / sizeof(int)))
    2ca8:	683b      	ldr	r3, [r7, #0]
    2caa:	2b03      	cmp	r3, #3
				i++;
    2cac:	bf98      	it	ls
    2cae:	1c5c      	addls	r4, r3, #1
			current_state_display = DISPLAY_MODE_BOOTING;
    2cb0:	4b7c      	ldr	r3, [pc, #496]	; (2ea4 <display_task+0x268>)
    2cb2:	603c      	str	r4, [r7, #0]
    2cb4:	2200      	movs	r2, #0
    2cb6:	601a      	str	r2, [r3, #0]
			break;
    2cb8:	e7ca      	b.n	2c50 <display_task+0x14>
		if (brightness_value < MINIMUM_BRIGHTNESS)
    2cba:	2b31      	cmp	r3, #49	; 0x31
    2cbc:	dccd      	bgt.n	2c5a <display_task+0x1e>
			brightness_value = MINIMUM_BRIGHTNESS;
    2cbe:	2332      	movs	r3, #50	; 0x32
    2cc0:	e7ca      	b.n	2c58 <display_task+0x1c>
		else if (current_brightness > brightness_value)
    2cc2:	ddd2      	ble.n	2c6a <display_task+0x2e>
			current_brightness -= brightness_step;
    2cc4:	4a72      	ldr	r2, [pc, #456]	; (2e90 <display_task+0x254>)
    2cc6:	6812      	ldr	r2, [r2, #0]
    2cc8:	1a9b      	subs	r3, r3, r2
    2cca:	e7cd      	b.n	2c68 <display_task+0x2c>
		if (current_brightness < MINIMUM_BRIGHTNESS)
    2ccc:	2b31      	cmp	r3, #49	; 0x31
    2cce:	dcd1      	bgt.n	2c74 <display_task+0x38>
			current_brightness = MINIMUM_BRIGHTNESS;
    2cd0:	2332      	movs	r3, #50	; 0x32
    2cd2:	e7ce      	b.n	2c72 <display_task+0x36>
			if (current_state_display != DISPLAY_MODE_TIME)
    2cd4:	4c73      	ldr	r4, [pc, #460]	; (2ea4 <display_task+0x268>)
    2cd6:	6823      	ldr	r3, [r4, #0]
    2cd8:	2b01      	cmp	r3, #1
    2cda:	d001      	beq.n	2ce0 <display_task+0xa4>
				refresh_display();
    2cdc:	f7ff ff9e 	bl	2c1c <refresh_display>
			DispStr("10 : 10", 150, 150, WHITE, BLACK);
    2ce0:	2296      	movs	r2, #150	; 0x96
    2ce2:	2700      	movs	r7, #0
    2ce4:	4611      	mov	r1, r2
    2ce6:	4870      	ldr	r0, [pc, #448]	; (2ea8 <display_task+0x26c>)
    2ce8:	9700      	str	r7, [sp, #0]
    2cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2cee:	f01f f9f6 	bl	220de <DispStr>
			DispStr("11/11  Wed", 130, 200, WHITE, BLACK);
    2cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2cf6:	486d      	ldr	r0, [pc, #436]	; (2eac <display_task+0x270>)
    2cf8:	9700      	str	r7, [sp, #0]
    2cfa:	22c8      	movs	r2, #200	; 0xc8
    2cfc:	2182      	movs	r1, #130	; 0x82
    2cfe:	f01f f9ee 	bl	220de <DispStr>
			current_state_display = DISPLAY_MODE_TIME;
    2d02:	2301      	movs	r3, #1
    2d04:	6023      	str	r3, [r4, #0]
			break;
    2d06:	e7a3      	b.n	2c50 <display_task+0x14>
			if (current_state_display != DISPLAY_MODE_VALUES)
    2d08:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2ea4 <display_task+0x268>
    2d0c:	f8d8 3000 	ldr.w	r3, [r8]
    2d10:	2b04      	cmp	r3, #4
    2d12:	d04d      	beq.n	2db0 <display_task+0x174>
				refresh_display();
    2d14:	f7ff ff82 	bl	2c1c <refresh_display>
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2d18:	2432      	movs	r4, #50	; 0x32
    2d1a:	2364      	movs	r3, #100	; 0x64
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2d1c:	2700      	movs	r7, #0
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2d1e:	461a      	mov	r2, r3
    2d20:	4863      	ldr	r0, [pc, #396]	; (2eb0 <display_task+0x274>)
    2d22:	211f      	movs	r1, #31
    2d24:	e9cd 4400 	strd	r4, r4, [sp]
    2d28:	f001 f9dc 	bl	40e4 <DispIcon>
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2d2c:	4861      	ldr	r0, [pc, #388]	; (2eb4 <display_task+0x278>)
    2d2e:	9700      	str	r7, [sp, #0]
    2d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d34:	22a0      	movs	r2, #160	; 0xa0
    2d36:	215a      	movs	r1, #90	; 0x5a
    2d38:	f01f f9d1 	bl	220de <DispStr>
				DispIcon(heart_logo, RED, 260, 100, 50, 50);
    2d3c:	485e      	ldr	r0, [pc, #376]	; (2eb8 <display_task+0x27c>)
    2d3e:	2364      	movs	r3, #100	; 0x64
    2d40:	f44f 7282 	mov.w	r2, #260	; 0x104
    2d44:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2d48:	e9cd 4400 	strd	r4, r4, [sp]
    2d4c:	f001 f9ca 	bl	40e4 <DispIcon>
				DispStr("H R", 264, 160, WHITE, BLACK);
    2d50:	485a      	ldr	r0, [pc, #360]	; (2ebc <display_task+0x280>)
    2d52:	9700      	str	r7, [sp, #0]
    2d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d58:	22a0      	movs	r2, #160	; 0xa0
    2d5a:	f44f 7184 	mov.w	r1, #264	; 0x108
    2d5e:	f01f f9be 	bl	220de <DispStr>
				DispIcon(temperature_logo, GREEN, 100, 280, 50, 50);
    2d62:	4857      	ldr	r0, [pc, #348]	; (2ec0 <display_task+0x284>)
    2d64:	f44f 738c 	mov.w	r3, #280	; 0x118
    2d68:	2264      	movs	r2, #100	; 0x64
    2d6a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    2d6e:	e9cd 4400 	strd	r4, r4, [sp]
    2d72:	f001 f9b7 	bl	40e4 <DispIcon>
				DispStr("Temp", 94, 340, WHITE, BLACK);
    2d76:	4853      	ldr	r0, [pc, #332]	; (2ec4 <display_task+0x288>)
    2d78:	9700      	str	r7, [sp, #0]
    2d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d7e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2d82:	215e      	movs	r1, #94	; 0x5e
    2d84:	f01f f9ab 	bl	220de <DispStr>
				DispIcon(spio2_logo, RED, 260, 280, 50, 50);
    2d88:	484f      	ldr	r0, [pc, #316]	; (2ec8 <display_task+0x28c>)
    2d8a:	f44f 738c 	mov.w	r3, #280	; 0x118
    2d8e:	f44f 7282 	mov.w	r2, #260	; 0x104
    2d92:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2d96:	e9cd 4400 	strd	r4, r4, [sp]
    2d9a:	f001 f9a3 	bl	40e4 <DispIcon>
				DispStr("Spo2", 250, 340, WHITE, BLACK);
    2d9e:	484b      	ldr	r0, [pc, #300]	; (2ecc <display_task+0x290>)
    2da0:	9700      	str	r7, [sp, #0]
    2da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2da6:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2daa:	21fa      	movs	r1, #250	; 0xfa
    2dac:	f01f f997 	bl	220de <DispStr>
			sprintf(step_count, "%d", steps);
    2db0:	4b47      	ldr	r3, [pc, #284]	; (2ed0 <display_task+0x294>)
    2db2:	4948      	ldr	r1, [pc, #288]	; (2ed4 <display_task+0x298>)
    2db4:	681a      	ldr	r2, [r3, #0]
    2db6:	a802      	add	r0, sp, #8
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2db8:	2400      	movs	r4, #0
			sprintf(step_count, "%d", steps);
    2dba:	f005 f935 	bl	8028 <sprintf>
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2dc2:	9400      	str	r4, [sp, #0]
    2dc4:	22be      	movs	r2, #190	; 0xbe
    2dc6:	2178      	movs	r1, #120	; 0x78
    2dc8:	a802      	add	r0, sp, #8
    2dca:	f01f f988 	bl	220de <DispStr>
			if (valid_hr)
    2dce:	4b42      	ldr	r3, [pc, #264]	; (2ed8 <display_task+0x29c>)
    2dd0:	781b      	ldrb	r3, [r3, #0]
    2dd2:	b173      	cbz	r3, 2df2 <display_task+0x1b6>
				sprintf(hr, "%d  ", heart_rate);
    2dd4:	4b41      	ldr	r3, [pc, #260]	; (2edc <display_task+0x2a0>)
    2dd6:	4942      	ldr	r1, [pc, #264]	; (2ee0 <display_task+0x2a4>)
    2dd8:	681a      	ldr	r2, [r3, #0]
    2dda:	a806      	add	r0, sp, #24
    2ddc:	f005 f924 	bl	8028 <sprintf>
				DispStr(hr, 270, 190, WHITE, BLACK); //update hr
    2de0:	9400      	str	r4, [sp, #0]
    2de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2de6:	22be      	movs	r2, #190	; 0xbe
    2de8:	f44f 7187 	mov.w	r1, #270	; 0x10e
    2dec:	a806      	add	r0, sp, #24
    2dee:	f01f f976 	bl	220de <DispStr>
			sprintf(temperature_value, "%.2f", temp_data);
    2df2:	4b3c      	ldr	r3, [pc, #240]	; (2ee4 <display_task+0x2a8>)
    2df4:	6818      	ldr	r0, [r3, #0]
    2df6:	f7fd fae7 	bl	3c8 <__aeabi_f2d>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2dfa:	2400      	movs	r4, #0
			sprintf(temperature_value, "%.2f", temp_data);
    2dfc:	4602      	mov	r2, r0
    2dfe:	460b      	mov	r3, r1
    2e00:	a804      	add	r0, sp, #16
    2e02:	4939      	ldr	r1, [pc, #228]	; (2ee8 <display_task+0x2ac>)
    2e04:	f005 f910 	bl	8028 <sprintf>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e0c:	4837      	ldr	r0, [pc, #220]	; (2eec <display_task+0x2b0>)
    2e0e:	9400      	str	r4, [sp, #0]
    2e10:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2e14:	215a      	movs	r1, #90	; 0x5a
    2e16:	f01f f962 	bl	220de <DispStr>
			if (valid_sp02)
    2e1a:	4b35      	ldr	r3, [pc, #212]	; (2ef0 <display_task+0x2b4>)
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	b17b      	cbz	r3, 2e40 <display_task+0x204>
				sprintf(sp, "%d", sp02);
    2e20:	4b34      	ldr	r3, [pc, #208]	; (2ef4 <display_task+0x2b8>)
    2e22:	492c      	ldr	r1, [pc, #176]	; (2ed4 <display_task+0x298>)
    2e24:	681a      	ldr	r2, [r3, #0]
    2e26:	a806      	add	r0, sp, #24
    2e28:	f005 f8fe 	bl	8028 <sprintf>
				DispStr(sp, 260, 370, WHITE, BLACK); //update spo2
    2e2c:	9400      	str	r4, [sp, #0]
    2e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e32:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2e36:	f44f 7182 	mov.w	r1, #260	; 0x104
    2e3a:	a806      	add	r0, sp, #24
    2e3c:	f01f f94f 	bl	220de <DispStr>
			if(!latch_status)
    2e40:	4b2d      	ldr	r3, [pc, #180]	; (2ef8 <display_task+0x2bc>)
    2e42:	781b      	ldrb	r3, [r3, #0]
    2e44:	b9eb      	cbnz	r3, 2e82 <display_task+0x246>
				DispStr("Detached !", 128, 30, RED, BLACK);
    2e46:	9300      	str	r3, [sp, #0]
    2e48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2e4c:	482b      	ldr	r0, [pc, #172]	; (2efc <display_task+0x2c0>)
    2e4e:	221e      	movs	r2, #30
    2e50:	2180      	movs	r1, #128	; 0x80
    2e52:	f01f f944 	bl	220de <DispStr>
			current_state_display = DISPLAY_MODE_VALUES;
    2e56:	2304      	movs	r3, #4
    2e58:	f8c8 3000 	str.w	r3, [r8]
			mpu_data = mpu_data-213;
    2e5c:	4b28      	ldr	r3, [pc, #160]	; (2f00 <display_task+0x2c4>)
			sprintf(Accx, "%d", mpu_data);
    2e5e:	491d      	ldr	r1, [pc, #116]	; (2ed4 <display_task+0x298>)
			mpu_data = mpu_data-213;
    2e60:	881a      	ldrh	r2, [r3, #0]
    2e62:	3ad5      	subs	r2, #213	; 0xd5
    2e64:	b292      	uxth	r2, r2
			sprintf(Accx, "%d", mpu_data);
    2e66:	a806      	add	r0, sp, #24
			mpu_data = mpu_data-213;
    2e68:	801a      	strh	r2, [r3, #0]
			sprintf(Accx, "%d", mpu_data);
    2e6a:	f005 f8dd 	bl	8028 <sprintf>
			DispStr(Accx, 190, 240, WHITE, BLACK); //update acceleration
    2e6e:	2300      	movs	r3, #0
    2e70:	9300      	str	r3, [sp, #0]
    2e72:	22f0      	movs	r2, #240	; 0xf0
    2e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e78:	21be      	movs	r1, #190	; 0xbe
    2e7a:	a806      	add	r0, sp, #24
    2e7c:	f01f f92f 	bl	220de <DispStr>
			break;
    2e80:	e6e6      	b.n	2c50 <display_task+0x14>
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2e82:	2300      	movs	r3, #0
    2e84:	9300      	str	r3, [sp, #0]
    2e86:	e7e1      	b.n	2e4c <display_task+0x210>
    2e88:	20000260 	.word	0x20000260
    2e8c:	20000280 	.word	0x20000280
    2e90:	2000025c 	.word	0x2000025c
    2e94:	2000b19c 	.word	0x2000b19c
    2e98:	2000b1a4 	.word	0x2000b1a4
    2e9c:	00029eb9 	.word	0x00029eb9
    2ea0:	20000284 	.word	0x20000284
    2ea4:	2000b198 	.word	0x2000b198
    2ea8:	00029ec1 	.word	0x00029ec1
    2eac:	00029ec9 	.word	0x00029ec9
    2eb0:	20008ae0 	.word	0x20008ae0
    2eb4:	00029ed4 	.word	0x00029ed4
    2eb8:	20001998 	.word	0x20001998
    2ebc:	00029eda 	.word	0x00029eda
    2ec0:	200094a4 	.word	0x200094a4
    2ec4:	00029ede 	.word	0x00029ede
    2ec8:	2000811c 	.word	0x2000811c
    2ecc:	00029ee3 	.word	0x00029ee3
    2ed0:	2000b1c0 	.word	0x2000b1c0
    2ed4:	0002cae6 	.word	0x0002cae6
    2ed8:	2000f590 	.word	0x2000f590
    2edc:	2000b1a0 	.word	0x2000b1a0
    2ee0:	00029ee8 	.word	0x00029ee8
    2ee4:	2000b1c4 	.word	0x2000b1c4
    2ee8:	00029eed 	.word	0x00029eed
    2eec:	00029ef2 	.word	0x00029ef2
    2ef0:	2000f591 	.word	0x2000f591
    2ef4:	2000b1bc 	.word	0x2000b1bc
    2ef8:	2000094f 	.word	0x2000094f
    2efc:	00029ef7 	.word	0x00029ef7
    2f00:	2000f548 	.word	0x2000f548

00002f04 <bma_i2c_read>:
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
}

/* BMA i2c read function */
static uint16_t bma_i2c_read(u8_t reg, u8_t *data, u16_t len, void *intf_ptr)
{
    2f04:	b570      	push	{r4, r5, r6, lr}
    2f06:	4606      	mov	r6, r0
    2f08:	b088      	sub	sp, #32
    2f0a:	460d      	mov	r5, r1
    2f0c:	4614      	mov	r4, r2
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2f0e:	480d      	ldr	r0, [pc, #52]	; (2f44 <bma_i2c_read+0x40>)
    2f10:	f01c ffec 	bl	1feec <z_impl_device_get_binding>
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    2f14:	f10d 0207 	add.w	r2, sp, #7
    2f18:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    2f1a:	2201      	movs	r2, #1
    2f1c:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    2f1e:	2200      	movs	r2, #0
    2f20:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2f24:	2207      	movs	r2, #7
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    2f26:	e9cd 5405 	strd	r5, r4, [sp, #20]
    2f2a:	f88d 6007 	strb.w	r6, [sp, #7]
    2f2e:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    2f32:	6883      	ldr	r3, [r0, #8]
    2f34:	2202      	movs	r2, #2
    2f36:	685c      	ldr	r4, [r3, #4]
    2f38:	a902      	add	r1, sp, #8
    2f3a:	2319      	movs	r3, #25
    2f3c:	47a0      	blx	r4
}
    2f3e:	b2c0      	uxtb	r0, r0
    2f40:	b008      	add	sp, #32
    2f42:	bd70      	pop	{r4, r5, r6, pc}
    2f44:	00029fa3 	.word	0x00029fa3

00002f48 <bma_i2c_write>:
{
    2f48:	b570      	push	{r4, r5, r6, lr}
    2f4a:	4606      	mov	r6, r0
    2f4c:	b088      	sub	sp, #32
    2f4e:	460d      	mov	r5, r1
    2f50:	4614      	mov	r4, r2
    2f52:	480d      	ldr	r0, [pc, #52]	; (2f88 <bma_i2c_write+0x40>)
    2f54:	f01c ffca 	bl	1feec <z_impl_device_get_binding>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    2f58:	f10d 0207 	add.w	r2, sp, #7
    2f5c:	9202      	str	r2, [sp, #8]
	msg[0].len = 1U;
    2f5e:	2201      	movs	r2, #1
    2f60:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    2f62:	2200      	movs	r2, #0
    2f64:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    2f68:	2202      	movs	r2, #2
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    2f6a:	e9cd 5405 	strd	r5, r4, [sp, #20]
    2f6e:	f88d 6007 	strb.w	r6, [sp, #7]
    2f72:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    2f76:	6883      	ldr	r3, [r0, #8]
    2f78:	a902      	add	r1, sp, #8
    2f7a:	685c      	ldr	r4, [r3, #4]
    2f7c:	2319      	movs	r3, #25
    2f7e:	47a0      	blx	r4
}
    2f80:	b2c0      	uxtb	r0, r0
    2f82:	b008      	add	sp, #32
    2f84:	bd70      	pop	{r4, r5, r6, pc}
    2f86:	bf00      	nop
    2f88:	00029fa3 	.word	0x00029fa3

00002f8c <initialize_bma>:
    k_busy_wait(ms);
}

/*Initialise BMA sensor */
void initialize_bma()
{
    2f8c:	b530      	push	{r4, r5, lr}
    2f8e:	b08d      	sub	sp, #52	; 0x34
    2f90:	4821      	ldr	r0, [pc, #132]	; (3018 <initialize_bma+0x8c>)
    2f92:	f01c ffab 	bl	1feec <z_impl_device_get_binding>
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    if (!i2c_dev)
    2f96:	b928      	cbnz	r0, 2fa4 <initialize_bma+0x18>
    {
        printk("I2C: Device driver not found.\n");
    2f98:	4820      	ldr	r0, [pc, #128]	; (301c <initialize_bma+0x90>)
    if (rslt == BMA4_OK)
        printk("Writing config file : OK\n");
    else
        printk("Writing config file : FAILED!!!\n");
    bma456_device_global = bma456_device;
}
    2f9a:	b00d      	add	sp, #52	; 0x34
    2f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        printk("I2C: Device driver not found.\n");
    2fa0:	f01f b99a 	b.w	222d8 <printk>
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    2fa4:	4b1e      	ldr	r3, [pc, #120]	; (3020 <initialize_bma+0x94>)
    bma456_device.intf_ptr = &dev_addr;
    2fa6:	9301      	str	r3, [sp, #4]
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    2fa8:	2219      	movs	r2, #25
    2faa:	701a      	strb	r2, [r3, #0]
    bma456_device.bus_read = bma_i2c_read;
    2fac:	4a1d      	ldr	r2, [pc, #116]	; (3024 <initialize_bma+0x98>)
    2fae:	9208      	str	r2, [sp, #32]
    bma456_device.bus_write = bma_i2c_write;
    2fb0:	4a1d      	ldr	r2, [pc, #116]	; (3028 <initialize_bma+0x9c>)
    2fb2:	9209      	str	r2, [sp, #36]	; 0x24
    bma456_device.delay_us = bma_delay_us;
    2fb4:	4a1d      	ldr	r2, [pc, #116]	; (302c <initialize_bma+0xa0>)
    2fb6:	920a      	str	r2, [sp, #40]	; 0x28
    bma456_device.read_write_len = 8;
    2fb8:	2208      	movs	r2, #8
    2fba:	f8ad 2014 	strh.w	r2, [sp, #20]
    bma456_device.resolution = 12;
    2fbe:	220c      	movs	r2, #12
    2fc0:	f88d 200c 	strb.w	r2, [sp, #12]
    rslt |= bma456_init(&bma456_device);
    2fc4:	4668      	mov	r0, sp
    bma456_device.feature_len = BMA456_FEATURE_SIZE;
    2fc6:	2246      	movs	r2, #70	; 0x46
    2fc8:	f88d 2016 	strb.w	r2, [sp, #22]
    rslt |= bma456_init(&bma456_device);
    2fcc:	f01e fd47 	bl	21a5e <bma456_init>
    if (rslt == BMA4_OK)
    2fd0:	b9f0      	cbnz	r0, 3010 <initialize_bma+0x84>
        printk("Communication with BMA : OK\n");
    2fd2:	4817      	ldr	r0, [pc, #92]	; (3030 <initialize_bma+0xa4>)
        printk("Communication with BMA : FAILED!!! \n");
    2fd4:	f01f f980 	bl	222d8 <printk>
    bma4_set_command_register(0xB6, &bma456_device);
    2fd8:	4669      	mov	r1, sp
    2fda:	20b6      	movs	r0, #182	; 0xb6
    2fdc:	f01e fd2e 	bl	21a3c <bma4_set_command_register>
	return z_impl_k_sleep(timeout);
    2fe0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2fe4:	2100      	movs	r1, #0
    2fe6:	f01d fdf7 	bl	20bd8 <z_impl_k_sleep>
    rslt |= bma456_write_config_file(&bma456_device);
    2fea:	4668      	mov	r0, sp
    2fec:	f000 f9c4 	bl	3378 <bma456_write_config_file>
    if (rslt == BMA4_OK)
    2ff0:	b980      	cbnz	r0, 3014 <initialize_bma+0x88>
        printk("Writing config file : OK\n");
    2ff2:	4810      	ldr	r0, [pc, #64]	; (3034 <initialize_bma+0xa8>)
    bma456_device_global = bma456_device;
    2ff4:	4d10      	ldr	r5, [pc, #64]	; (3038 <initialize_bma+0xac>)
    2ff6:	466c      	mov	r4, sp
        printk("Writing config file : FAILED!!!\n");
    2ff8:	f01f f96e 	bl	222d8 <printk>
    bma456_device_global = bma456_device;
    2ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3004:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3008:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    300c:	b00d      	add	sp, #52	; 0x34
    300e:	bd30      	pop	{r4, r5, pc}
        printk("Communication with BMA : FAILED!!! \n");
    3010:	480a      	ldr	r0, [pc, #40]	; (303c <initialize_bma+0xb0>)
    3012:	e7df      	b.n	2fd4 <initialize_bma+0x48>
        printk("Writing config file : FAILED!!!\n");
    3014:	480a      	ldr	r0, [pc, #40]	; (3040 <initialize_bma+0xb4>)
    3016:	e7ed      	b.n	2ff4 <initialize_bma+0x68>
    3018:	00029fa3 	.word	0x00029fa3
    301c:	00029fa9 	.word	0x00029fa9
    3020:	2000f592 	.word	0x2000f592
    3024:	00002f05 	.word	0x00002f05
    3028:	00002f49 	.word	0x00002f49
    302c:	0002157b 	.word	0x0002157b
    3030:	00029fc8 	.word	0x00029fc8
    3034:	0002a00a 	.word	0x0002a00a
    3038:	2000b1c8 	.word	0x2000b1c8
    303c:	00029fe5 	.word	0x00029fe5
    3040:	0002a024 	.word	0x0002a024

00003044 <stepCounterEnable>:
    bma456_device_global = bma456_device;
    return data;
}

u16_t stepCounterEnable()
{
    3044:	b570      	push	{r4, r5, r6, lr}
    struct bma4_accel sens_data;
    struct bma4_dev bma456_device = bma456_device_global;
    3046:	4d37      	ldr	r5, [pc, #220]	; (3124 <stepCounterEnable+0xe0>)
    3048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    304a:	b08c      	sub	sp, #48	; 0x30
    struct bma4_dev bma456_device = bma456_device_global;
    304c:	466c      	mov	r4, sp
    304e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3054:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    // /* Soft-reset */
    rslt |= bma4_set_command_register(0xB6, &bma456_device);
    305c:	4669      	mov	r1, sp
    305e:	20b6      	movs	r0, #182	; 0xb6
    3060:	f01e fcec 	bl	21a3c <bma4_set_command_register>
    if (rslt == BMA4_OK)
    3064:	4604      	mov	r4, r0
    3066:	b990      	cbnz	r0, 308e <stepCounterEnable+0x4a>
        printk("Soft reset before enabling step counter : OK\n");
    3068:	482f      	ldr	r0, [pc, #188]	; (3128 <stepCounterEnable+0xe4>)
    else
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    306a:	f01f f935 	bl	222d8 <printk>
    306e:	2100      	movs	r1, #0
    3070:	f640 40cd 	movw	r0, #3277	; 0xccd
    3074:	f01d fdb0 	bl	20bd8 <z_impl_k_sleep>
    k_msleep(100);

    /* Initialize BMA456 */
    rslt |= bma456_init(&bma456_device);
    3078:	4668      	mov	r0, sp
    307a:	f01e fcf0 	bl	21a5e <bma456_init>
    307e:	4304      	orrs	r4, r0
    3080:	b260      	sxtb	r0, r4
    3082:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    3084:	b12c      	cbz	r4, 3092 <stepCounterEnable+0x4e>
    {
        printk("Testing communication with BMA : FAILED!!!\n");
    3086:	4829      	ldr	r0, [pc, #164]	; (312c <stepCounterEnable+0xe8>)
    //     return rslt;
    // }
    // else
    //     printk("Setting watermark : OK\n");
    bma456_device_global = bma456_device;
    printk("Step counter init : OK\n");
    3088:	f01f f926 	bl	222d8 <printk>
    return rslt;
    308c:	e015      	b.n	30ba <stepCounterEnable+0x76>
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    308e:	4828      	ldr	r0, [pc, #160]	; (3130 <stepCounterEnable+0xec>)
    3090:	e7eb      	b.n	306a <stepCounterEnable+0x26>
        printk("Testing communication with BMA : OK\n");
    3092:	4828      	ldr	r0, [pc, #160]	; (3134 <stepCounterEnable+0xf0>)
    3094:	f01f f920 	bl	222d8 <printk>
    rslt = bma4_set_accel_enable(0x01, &bma456_device);
    3098:	4669      	mov	r1, sp
    309a:	2001      	movs	r0, #1
    309c:	f01e fca9 	bl	219f2 <bma4_set_accel_enable>
    30a0:	b284      	uxth	r4, r0
    if (rslt == BMA4_OK)
    30a2:	b96c      	cbnz	r4, 30c0 <stepCounterEnable+0x7c>
        printk("Enabling accelerometer : OK\n");
    30a4:	4824      	ldr	r0, [pc, #144]	; (3138 <stepCounterEnable+0xf4>)
    30a6:	f01f f917 	bl	222d8 <printk>
    rslt = bma456_write_config_file(&bma456_device);
    30aa:	4668      	mov	r0, sp
    30ac:	f000 f964 	bl	3378 <bma456_write_config_file>
    30b0:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    30b2:	b13c      	cbz	r4, 30c4 <stepCounterEnable+0x80>
        printf("Load configuration fail\r\n");
    30b4:	4821      	ldr	r0, [pc, #132]	; (313c <stepCounterEnable+0xf8>)
        printf("Step counter not enabled\r\n");
    30b6:	f004 ffcf 	bl	8058 <printf>
}
    30ba:	4620      	mov	r0, r4
    30bc:	b00c      	add	sp, #48	; 0x30
    30be:	bd70      	pop	{r4, r5, r6, pc}
        printk("Enabling accelerometer : FAILED!!!\n");
    30c0:	481f      	ldr	r0, [pc, #124]	; (3140 <stepCounterEnable+0xfc>)
    30c2:	e7e1      	b.n	3088 <stepCounterEnable+0x44>
        printf("Load configuration successful\r\n");
    30c4:	481f      	ldr	r0, [pc, #124]	; (3144 <stepCounterEnable+0x100>)
    30c6:	f004 ffc7 	bl	8058 <printf>
    rslt = bma456_feature_enable(BMA456_STEP_CNTR, 1, &bma456_device);
    30ca:	2101      	movs	r1, #1
    30cc:	466a      	mov	r2, sp
    30ce:	4608      	mov	r0, r1
    30d0:	f01e fced 	bl	21aae <bma456_feature_enable>
    30d4:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    30d6:	b10c      	cbz	r4, 30dc <stepCounterEnable+0x98>
        printf("Step counter not enabled\r\n");
    30d8:	481b      	ldr	r0, [pc, #108]	; (3148 <stepCounterEnable+0x104>)
    30da:	e7ec      	b.n	30b6 <stepCounterEnable+0x72>
        printf("Step counter enabled\r\n");
    30dc:	481b      	ldr	r0, [pc, #108]	; (314c <stepCounterEnable+0x108>)
    30de:	f004 ffbb 	bl	8058 <printf>
    rslt = bma456_map_interrupt(BMA4_INTR1_MAP, BMA456_STEP_CNTR_INT, 1, &bma456_device);
    30e2:	4620      	mov	r0, r4
    30e4:	466b      	mov	r3, sp
    30e6:	2201      	movs	r2, #1
    30e8:	2102      	movs	r1, #2
    30ea:	f01e fccc 	bl	21a86 <bma456_map_interrupt>
    30ee:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    30f0:	b124      	cbz	r4, 30fc <stepCounterEnable+0xb8>
        printf("Error code: %d\n", rslt);
    30f2:	4621      	mov	r1, r4
    30f4:	4816      	ldr	r0, [pc, #88]	; (3150 <stepCounterEnable+0x10c>)
    30f6:	f004 ffaf 	bl	8058 <printf>
        return rslt;
    30fa:	e7de      	b.n	30ba <stepCounterEnable+0x76>
    rslt = bma456_step_counter_set_watermark(1, &bma456_device);
    30fc:	4669      	mov	r1, sp
    30fe:	2001      	movs	r0, #1
    3100:	f01e fd4c 	bl	21b9c <bma456_step_counter_set_watermark>
    3104:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    3106:	2c00      	cmp	r4, #0
    3108:	d1f3      	bne.n	30f2 <stepCounterEnable+0xae>
    bma456_device_global = bma456_device;
    310a:	466d      	mov	r5, sp
    310c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    310e:	4e05      	ldr	r6, [pc, #20]	; (3124 <stepCounterEnable+0xe0>)
    3110:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3114:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3116:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    311a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    printk("Step counter init : OK\n");
    311e:	480d      	ldr	r0, [pc, #52]	; (3154 <stepCounterEnable+0x110>)
    3120:	e7b2      	b.n	3088 <stepCounterEnable+0x44>
    3122:	bf00      	nop
    3124:	2000b1c8 	.word	0x2000b1c8
    3128:	0002a045 	.word	0x0002a045
    312c:	0002a0a8 	.word	0x0002a0a8
    3130:	0002a073 	.word	0x0002a073
    3134:	0002a0d4 	.word	0x0002a0d4
    3138:	0002a0f9 	.word	0x0002a0f9
    313c:	0002a13a 	.word	0x0002a13a
    3140:	0002a116 	.word	0x0002a116
    3144:	0002a154 	.word	0x0002a154
    3148:	0002a174 	.word	0x0002a174
    314c:	0002a18f 	.word	0x0002a18f
    3150:	0002a1a6 	.word	0x0002a1a6
    3154:	0002a1b6 	.word	0x0002a1b6

00003158 <getStepCounterOutput>:

u32_t getStepCounterOutput()
{
    3158:	b530      	push	{r4, r5, lr}
    struct bma4_dev bma456_device = bma456_device_global;
    315a:	4d0c      	ldr	r5, [pc, #48]	; (318c <getStepCounterOutput+0x34>)
    315c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    315e:	b08f      	sub	sp, #60	; 0x3c
    struct bma4_dev bma456_device = bma456_device_global;
    3160:	ac02      	add	r4, sp, #8
    3162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    316c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    uint32_t step_out = 0;
    3170:	2300      	movs	r3, #0
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    3172:	a902      	add	r1, sp, #8
    3174:	a801      	add	r0, sp, #4
    uint32_t step_out = 0;
    3176:	9301      	str	r3, [sp, #4]
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    3178:	f01e fd43 	bl	21c02 <bma456_step_counter_output>
    if (rslt == BMA4_OK)
    317c:	b110      	cbz	r0, 3184 <getStepCounterOutput+0x2c>
    {
        //printk("\nSteps counter output is %u\r\n", step_out);
    }
    else
    {
        printk("Reading step count : FAILED\n");
    317e:	4804      	ldr	r0, [pc, #16]	; (3190 <getStepCounterOutput+0x38>)
    3180:	f01f f8aa 	bl	222d8 <printk>
    }
    return step_out;
    3184:	9801      	ldr	r0, [sp, #4]
    3186:	b00f      	add	sp, #60	; 0x3c
    3188:	bd30      	pop	{r4, r5, pc}
    318a:	bf00      	nop
    318c:	2000b1c8 	.word	0x2000b1c8
    3190:	0002a1ce 	.word	0x0002a1ce

00003194 <bma4_write_config_file>:

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 */
int8_t bma4_write_config_file(struct bma4_dev *dev)
{
    3194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3196:	4605      	mov	r5, r0
    uint8_t config_load = 0;
    uint16_t index = 0;
    uint8_t config_stream_status = 0;

    /* Disable advanced power save */
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    3198:	4629      	mov	r1, r5
    uint8_t config_load = 0;
    319a:	2000      	movs	r0, #0
    319c:	f88d 0004 	strb.w	r0, [sp, #4]
    uint8_t config_stream_status = 0;
    31a0:	f88d 0005 	strb.w	r0, [sp, #5]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    31a4:	f01e fb52 	bl	2184c <bma4_set_advance_power_save>

    /* Wait for sensor time synchronization. Refer the data-sheet for
     * more information
     */
    dev->delay_us(450, dev->intf_ptr);
    31a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31aa:	6869      	ldr	r1, [r5, #4]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    31ac:	4604      	mov	r4, r0
    dev->delay_us(450, dev->intf_ptr);
    31ae:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    31b2:	4798      	blx	r3
    if (rslt == BMA4_OK)
    31b4:	b94c      	cbnz	r4, 31ca <bma4_write_config_file+0x36>
    {
        /* Disable config loading*/
        rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    31b6:	462b      	mov	r3, r5
    31b8:	2201      	movs	r2, #1
    31ba:	a901      	add	r1, sp, #4
    31bc:	2059      	movs	r0, #89	; 0x59
    31be:	f01e fb69 	bl	21894 <bma4_write_regs>

        if (rslt == BMA4_OK)
    31c2:	4604      	mov	r4, r0
    31c4:	2800      	cmp	r0, #0
    31c6:	f000 8087 	beq.w	32d8 <bma4_write_config_file+0x144>
            }
        }
    }

    return rslt;
}
    31ca:	4620      	mov	r0, r4
    31cc:	b003      	add	sp, #12
    31ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *  @note index value should be even number.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bma4_dev *dev)
{
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    31d0:	0973      	lsrs	r3, r6, #5
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    31d2:	692f      	ldr	r7, [r5, #16]
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    31d4:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_lsb = ((index / 2) & 0x0F);

    /* Check the dev structure as NULL */
    rslt = null_pointer_check(dev);
    31d8:	4628      	mov	r0, r5
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    31da:	f3c6 0343 	ubfx	r3, r6, #1, #4
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    31de:	4437      	add	r7, r6
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    31e0:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    31e4:	f01e f9cb 	bl	2157e <null_pointer_check>

    if ((rslt == BMA4_OK) && (stream_data != NULL))
    31e8:	2800      	cmp	r0, #0
    31ea:	d172      	bne.n	32d2 <bma4_write_config_file+0x13e>
    31ec:	2f00      	cmp	r7, #0
    31ee:	d070      	beq.n	32d2 <bma4_write_config_file+0x13e>
    {
        rslt = bma4_write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    31f0:	462b      	mov	r3, r5
    31f2:	2201      	movs	r2, #1
    31f4:	f10d 0107 	add.w	r1, sp, #7
    31f8:	205b      	movs	r0, #91	; 0x5b
    31fa:	f01e fb4b 	bl	21894 <bma4_write_regs>
        if (rslt == BMA4_OK)
    31fe:	4604      	mov	r4, r0
    3200:	b978      	cbnz	r0, 3222 <bma4_write_config_file+0x8e>
        {
            rslt = bma4_write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    3202:	462b      	mov	r3, r5
    3204:	2201      	movs	r2, #1
    3206:	f10d 0106 	add.w	r1, sp, #6
    320a:	205c      	movs	r0, #92	; 0x5c
    320c:	f01e fb42 	bl	21894 <bma4_write_regs>
            if (rslt == BMA4_OK)
    3210:	4604      	mov	r4, r0
    3212:	b930      	cbnz	r0, 3222 <bma4_write_config_file+0x8e>
            {
                rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, (uint8_t *)stream_data, dev->read_write_len, dev);
    3214:	8aaa      	ldrh	r2, [r5, #20]
    3216:	462b      	mov	r3, r5
    3218:	4639      	mov	r1, r7
    321a:	205e      	movs	r0, #94	; 0x5e
    321c:	f01e f9bd 	bl	2159a <write_regs>
    3220:	4604      	mov	r4, r0
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    3222:	8aab      	ldrh	r3, [r5, #20]
    3224:	441e      	add	r6, r3
    3226:	b2b6      	uxth	r6, r6
    3228:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    322a:	42b3      	cmp	r3, r6
    322c:	d8d0      	bhi.n	31d0 <bma4_write_config_file+0x3c>
            if (rslt == BMA4_OK)
    322e:	2c00      	cmp	r4, #0
    3230:	d1cb      	bne.n	31ca <bma4_write_config_file+0x36>
                config_load = 0x01;
    3232:	2601      	movs	r6, #1
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    3234:	462b      	mov	r3, r5
    3236:	4632      	mov	r2, r6
    3238:	a901      	add	r1, sp, #4
    323a:	2059      	movs	r0, #89	; 0x59
                config_load = 0x01;
    323c:	f88d 6004 	strb.w	r6, [sp, #4]
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    3240:	f01e fb28 	bl	21894 <bma4_write_regs>
                if (rslt == BMA4_OK)
    3244:	4604      	mov	r4, r0
    3246:	2800      	cmp	r0, #0
    3248:	d1bf      	bne.n	31ca <bma4_write_config_file+0x36>
                    dev->delay_us(BMA4_MS_TO_US(150), dev->intf_ptr);
    324a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    324c:	6869      	ldr	r1, [r5, #4]
    324e:	4825      	ldr	r0, [pc, #148]	; (32e4 <bma4_write_config_file+0x150>)
    3250:	4798      	blx	r3
                    rslt = bma4_read_regs(BMA4_INTERNAL_STAT, &config_stream_status, 1, dev);
    3252:	4632      	mov	r2, r6
    3254:	462b      	mov	r3, r5
    3256:	f10d 0105 	add.w	r1, sp, #5
    325a:	202a      	movs	r0, #42	; 0x2a
    325c:	f01e fa6e 	bl	2173c <bma4_read_regs>
                    config_stream_status = config_stream_status & BMA4_CONFIG_STREAM_MESSAGE_MSK;
    3260:	f89d 6005 	ldrb.w	r6, [sp, #5]
    3264:	f006 060f 	and.w	r6, r6, #15
    3268:	f88d 6005 	strb.w	r6, [sp, #5]
                    if (rslt == BMA4_OK)
    326c:	4604      	mov	r4, r0
    326e:	2800      	cmp	r0, #0
    3270:	d1ab      	bne.n	31ca <bma4_write_config_file+0x36>
                        if (config_stream_status != BMA4_ASIC_INITIALIZED)
    3272:	2e01      	cmp	r6, #1
    3274:	d132      	bne.n	32dc <bma4_write_config_file+0x148>
                            rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    3276:	4629      	mov	r1, r5
    3278:	4630      	mov	r0, r6
    327a:	f01e fae7 	bl	2184c <bma4_set_advance_power_save>
                            if (rslt == BMA4_OK)
    327e:	4604      	mov	r4, r0
    3280:	2800      	cmp	r0, #0
    3282:	d1a2      	bne.n	31ca <bma4_write_config_file+0x36>
    uint8_t asic_lsb = 0;
    3284:	f88d 0006 	strb.w	r0, [sp, #6]
    uint8_t asic_msb = 0;
    3288:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
    328c:	4628      	mov	r0, r5
    328e:	f01e f976 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
    3292:	4604      	mov	r4, r0
    3294:	2800      	cmp	r0, #0
    3296:	d198      	bne.n	31ca <bma4_write_config_file+0x36>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    3298:	462b      	mov	r3, r5
    329a:	4632      	mov	r2, r6
    329c:	f10d 0106 	add.w	r1, sp, #6
    32a0:	205b      	movs	r0, #91	; 0x5b
    32a2:	f01e f99f 	bl	215e4 <read_regs>
        if (rslt == BMA4_OK)
    32a6:	4604      	mov	r4, r0
    32a8:	2800      	cmp	r0, #0
    32aa:	d18e      	bne.n	31ca <bma4_write_config_file+0x36>
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    32ac:	462b      	mov	r3, r5
    32ae:	4632      	mov	r2, r6
    32b0:	f10d 0107 	add.w	r1, sp, #7
    32b4:	205c      	movs	r0, #92	; 0x5c
    32b6:	f01e f995 	bl	215e4 <read_regs>
        if (rslt == BMA4_OK)
    32ba:	4604      	mov	r4, r0
    32bc:	2800      	cmp	r0, #0
    32be:	d184      	bne.n	31ca <bma4_write_config_file+0x36>
            dev->asic_data.asic_lsb = asic_lsb & 0x0F;
    32c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    32c4:	f003 030f 	and.w	r3, r3, #15
    32c8:	75eb      	strb	r3, [r5, #23]
            dev->asic_data.asic_msb = asic_msb;
    32ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    32ce:	762b      	strb	r3, [r5, #24]
    return rslt;
    32d0:	e77b      	b.n	31ca <bma4_write_config_file+0x36>
            }
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    32d2:	f04f 34ff 	mov.w	r4, #4294967295
    32d6:	e7a4      	b.n	3222 <bma4_write_config_file+0x8e>
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    32d8:	4606      	mov	r6, r0
    32da:	e7a5      	b.n	3228 <bma4_write_config_file+0x94>
                            rslt = BMA4_E_CONFIG_STREAM_ERROR;
    32dc:	f06f 0404 	mvn.w	r4, #4
    32e0:	e773      	b.n	31ca <bma4_write_config_file+0x36>
    32e2:	bf00      	nop
    32e4:	000249f0 	.word	0x000249f0

000032e8 <bma4_map_interrupt>:
{
    32e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32ea:	461c      	mov	r4, r3
    uint8_t data[3] = { 0, 0, 0 };
    32ec:	4b21      	ldr	r3, [pc, #132]	; (3374 <bma4_map_interrupt+0x8c>)
{
    32ee:	4616      	mov	r6, r2
    uint8_t data[3] = { 0, 0, 0 };
    32f0:	f8b3 2003 	ldrh.w	r2, [r3, #3]
    32f4:	795b      	ldrb	r3, [r3, #5]
    32f6:	f88d 3006 	strb.w	r3, [sp, #6]
{
    32fa:	4607      	mov	r7, r0
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    32fc:	f245 7356 	movw	r3, #22358	; 0x5756
    rslt = null_pointer_check(dev);
    3300:	4620      	mov	r0, r4
{
    3302:	460d      	mov	r5, r1
    uint8_t data[3] = { 0, 0, 0 };
    3304:	f8ad 2004 	strh.w	r2, [sp, #4]
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    3308:	f8ad 3000 	strh.w	r3, [sp]
    rslt = null_pointer_check(dev);
    330c:	f01e f937 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
    3310:	bb70      	cbnz	r0, 3370 <bma4_map_interrupt+0x88>
        rslt = bma4_read_regs(BMA4_INT_MAP_1_ADDR, data, 3, dev);
    3312:	4623      	mov	r3, r4
    3314:	2203      	movs	r2, #3
    3316:	a901      	add	r1, sp, #4
    3318:	2056      	movs	r0, #86	; 0x56
    331a:	f01e fa0f 	bl	2173c <bma4_read_regs>
        if (rslt == BMA4_OK)
    331e:	bb38      	cbnz	r0, 3370 <bma4_map_interrupt+0x88>
            if (enable == TRUE)
    3320:	ab02      	add	r3, sp, #8
    3322:	2e01      	cmp	r6, #1
    3324:	eb03 0607 	add.w	r6, r3, r7
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    3328:	ea4f 2215 	mov.w	r2, r5, lsr #8
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    332c:	bf17      	itett	ne
    332e:	f816 1c04 	ldrbne.w	r1, [r6, #-4]
                data[int_line] = (uint8_t)(int_map & (0x00FF));
    3332:	f806 5c04 	strbeq.w	r5, [r6, #-4]
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    3336:	ea21 0505 	bicne.w	r5, r1, r5
    333a:	f806 5c04 	strbne.w	r5, [r6, #-4]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    333e:	bf16      	itet	ne
    3340:	f89d 3006 	ldrbne.w	r3, [sp, #6]
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    3344:	f88d 2006 	strbeq.w	r2, [sp, #6]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    3348:	4393      	bicne	r3, r2
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    334a:	a901      	add	r1, sp, #4
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    334c:	bf18      	it	ne
    334e:	f88d 3006 	strbne.w	r3, [sp, #6]
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    3352:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    3356:	4623      	mov	r3, r4
    3358:	2201      	movs	r2, #1
    335a:	4439      	add	r1, r7
    335c:	f01e fa9a 	bl	21894 <bma4_write_regs>
            if (rslt == BMA4_OK)
    3360:	b930      	cbnz	r0, 3370 <bma4_map_interrupt+0x88>
                rslt = bma4_write_regs(BMA4_INT_MAP_DATA_ADDR, &data[2], 1, dev);
    3362:	4623      	mov	r3, r4
    3364:	2201      	movs	r2, #1
    3366:	f10d 0106 	add.w	r1, sp, #6
    336a:	2058      	movs	r0, #88	; 0x58
    336c:	f01e fa92 	bl	21894 <bma4_write_regs>
}
    3370:	b003      	add	sp, #12
    3372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3374:	000283f8 	.word	0x000283f8

00003378 <bma456_write_config_file>:
 */
int8_t bma456_write_config_file(struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
    3378:	b190      	cbz	r0, 33a0 <bma456_write_config_file+0x28>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    337a:	7803      	ldrb	r3, [r0, #0]
    337c:	2b16      	cmp	r3, #22
    337e:	d112      	bne.n	33a6 <bma456_write_config_file+0x2e>
        {
            /* Configuration stream read/write length boundary
             * check
             */
            if ((dev->read_write_len >= BMA456_RD_WR_MIN_LEN) && (dev->read_write_len <= BMA456_RD_WR_MAX_LEN))
    3380:	8a83      	ldrh	r3, [r0, #20]
    3382:	1e9a      	subs	r2, r3, #2
    3384:	b292      	uxth	r2, r2
    3386:	f241 71fe 	movw	r1, #6142	; 0x17fe
    338a:	428a      	cmp	r2, r1
    338c:	d80e      	bhi.n	33ac <bma456_write_config_file+0x34>
            {
                /* Even or odd check */
                if ((dev->read_write_len % 2) != 0)
    338e:	07da      	lsls	r2, r3, #31
                {
                    dev->read_write_len = dev->read_write_len - 1;
    3390:	bf44      	itt	mi
    3392:	f103 33ff 	addmi.w	r3, r3, #4294967295
    3396:	8283      	strhmi	r3, [r0, #20]
                }

                /* Assign stream data */
                dev->config_file_ptr = bma456_config_file;
    3398:	4b06      	ldr	r3, [pc, #24]	; (33b4 <bma456_write_config_file+0x3c>)
    339a:	6103      	str	r3, [r0, #16]
                rslt = bma4_write_config_file(dev);
    339c:	f7ff befa 	b.w	3194 <bma4_write_config_file>
            rslt = BMA4_E_INVALID_SENSOR;
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    33a0:	f04f 30ff 	mov.w	r0, #4294967295
    33a4:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
    33a6:	f06f 0003 	mvn.w	r0, #3
    33aa:	4770      	bx	lr
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    33ac:	f06f 0009 	mvn.w	r0, #9
    }

    return rslt;
}
    33b0:	4770      	bx	lr
    33b2:	bf00      	nop
    33b4:	0002a1eb 	.word	0x0002a1eb

000033b8 <max30102_i2c_write.constprop.0>:
#endif
    return ret;
}

/* MAX30102 i2c write function */
static uint16_t max30102_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    33b8:	b530      	push	{r4, r5, lr}
    33ba:	4605      	mov	r5, r0
    33bc:	b085      	sub	sp, #20
    33be:	460c      	mov	r4, r1
    33c0:	480a      	ldr	r0, [pc, #40]	; (33ec <max30102_i2c_write.constprop.0+0x34>)
    33c2:	f01c fd93 	bl	1feec <z_impl_device_get_binding>
	msg.len = num_bytes;
    33c6:	2202      	movs	r2, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    33c8:	f88d 5000 	strb.w	r5, [sp]
    buffer[1] = data;
    33cc:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    33d0:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    33d4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    33d6:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    33da:	6883      	ldr	r3, [r0, #8]
    33dc:	2201      	movs	r2, #1
    33de:	685c      	ldr	r4, [r3, #4]
    33e0:	a901      	add	r1, sp, #4
    33e2:	2357      	movs	r3, #87	; 0x57
    33e4:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return write_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    33e6:	b2c0      	uxtb	r0, r0
    33e8:	b005      	add	sp, #20
    33ea:	bd30      	pop	{r4, r5, pc}
    33ec:	00029fa3 	.word	0x00029fa3

000033f0 <max30102_i2c_read.constprop.0>:

/* MAX30102 i2c read function */
static uint16_t max30102_i2c_read(u8_t reg, u8_t *data, u16_t len)
    33f0:	b530      	push	{r4, r5, lr}
    33f2:	4605      	mov	r5, r0
    33f4:	b089      	sub	sp, #36	; 0x24
    33f6:	460c      	mov	r4, r1
    33f8:	480d      	ldr	r0, [pc, #52]	; (3430 <max30102_i2c_read.constprop.0+0x40>)
    33fa:	f01c fd77 	bl	1feec <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    33fe:	f10d 0207 	add.w	r2, sp, #7
    3402:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    3404:	2201      	movs	r2, #1
	msg[1].len = num_read;
    3406:	e9cd 4205 	strd	r4, r2, [sp, #20]
	msg[0].len = num_write;
    340a:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    340c:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    340e:	2207      	movs	r2, #7
    3410:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3414:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3418:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    341c:	6883      	ldr	r3, [r0, #8]
    341e:	2202      	movs	r2, #2
    3420:	685c      	ldr	r4, [r3, #4]
    3422:	a902      	add	r1, sp, #8
    3424:	2357      	movs	r3, #87	; 0x57
    3426:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    3428:	b2c0      	uxtb	r0, r0
    342a:	b009      	add	sp, #36	; 0x24
    342c:	bd30      	pop	{r4, r5, pc}
    342e:	bf00      	nop
    3430:	00029fa3 	.word	0x00029fa3

00003434 <max30102_reset>:
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes_fifo(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}

bool max30102_reset()
{
    3434:	b508      	push	{r3, lr}
    u16_t rslt = MAX3_OK;
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x40, 1);
    3436:	2140      	movs	r1, #64	; 0x40
    3438:	2009      	movs	r0, #9
    343a:	f7ff ffbd 	bl	33b8 <max30102_i2c_write.constprop.0>
    if (rslt == MAX3_OK)
    343e:	b920      	cbnz	r0, 344a <max30102_reset+0x16>
    {
        printk("RESET MAX30102 : OK \n ");
    3440:	4804      	ldr	r0, [pc, #16]	; (3454 <max30102_reset+0x20>)
    3442:	f01e ff49 	bl	222d8 <printk>
        return true;
    3446:	2001      	movs	r0, #1
    else
    {
        printk("RESET MAX30102 : FAILED !!!\n ");
        return false;
    }
}
    3448:	bd08      	pop	{r3, pc}
        printk("RESET MAX30102 : FAILED !!!\n ");
    344a:	4803      	ldr	r0, [pc, #12]	; (3458 <max30102_reset+0x24>)
    344c:	f01e ff44 	bl	222d8 <printk>
        return false;
    3450:	2000      	movs	r0, #0
    3452:	e7f9      	b.n	3448 <max30102_reset+0x14>
    3454:	0002b9eb 	.word	0x0002b9eb
    3458:	0002ba02 	.word	0x0002ba02

0000345c <init_max30102>:

u16_t init_max30102()
{
    345c:	b513      	push	{r0, r1, r4, lr}
    max30102_reset();
    345e:	f7ff ffe9 	bl	3434 <max30102_reset>
    3462:	2100      	movs	r1, #0
    3464:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3468:	f01d fbb6 	bl	20bd8 <z_impl_k_sleep>
    k_msleep(1000);
    u8_t dummyData;
    max30102_i2c_read(0x00, &dummyData, 1);
    346c:	f10d 0106 	add.w	r1, sp, #6
    3470:	2000      	movs	r0, #0
    3472:	f7ff ffbd 	bl	33f0 <max30102_i2c_read.constprop.0>
    u8_t chipId;
    u16_t rslt = 0x00;
    rslt = max30102_i2c_read(MAX30102_PART_ID, &chipId, 1);
    3476:	f10d 0107 	add.w	r1, sp, #7
    347a:	20ff      	movs	r0, #255	; 0xff
    347c:	f7ff ffb8 	bl	33f0 <max30102_i2c_read.constprop.0>
    if (rslt == MAX3_OK)
    3480:	4604      	mov	r4, r0
    3482:	b950      	cbnz	r0, 349a <init_max30102+0x3e>
    {
        if (chipId == I_AM_MAX30102)
    3484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3488:	2b15      	cmp	r3, #21
        {
            printk("Communication with MAX30102 : OK\n");
    348a:	bf0c      	ite	eq
    348c:	4804      	ldreq	r0, [pc, #16]	; (34a0 <init_max30102+0x44>)
        }
        else
        {
            printk("Communication with MAX30102 : FAILED!!!\n");
    348e:	4805      	ldrne	r0, [pc, #20]	; (34a4 <init_max30102+0x48>)
        }
    }
    else
    {
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    3490:	f01e ff22 	bl	222d8 <printk>
    }
    return rslt;
}
    3494:	4620      	mov	r0, r4
    3496:	b002      	add	sp, #8
    3498:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    349a:	4803      	ldr	r0, [pc, #12]	; (34a8 <init_max30102+0x4c>)
    349c:	e7f8      	b.n	3490 <init_max30102+0x34>
    349e:	bf00      	nop
    34a0:	0002ba20 	.word	0x0002ba20
    34a4:	0002ba42 	.word	0x0002ba42
    34a8:	0002ba6b 	.word	0x0002ba6b

000034ac <max30102_read_fifo>:
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
    return (rslt);
}

u16_t max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
    34ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34b0:	b090      	sub	sp, #64	; 0x40
    u16_t rslt = MAX3_OK;
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    34b2:	2218      	movs	r2, #24
{
    34b4:	4606      	mov	r6, r0
    34b6:	460d      	mov	r5, r1
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    34b8:	a804      	add	r0, sp, #16
    34ba:	2100      	movs	r1, #0
    34bc:	f021 fbf3 	bl	24ca6 <memset>
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    34c0:	4b27      	ldr	r3, [pc, #156]	; (3560 <max30102_read_fifo+0xb4>)
    *pun_ir_led = 0;
    34c2:	2400      	movs	r4, #0
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    34c4:	6818      	ldr	r0, [r3, #0]
    34c6:	9002      	str	r0, [sp, #8]
    34c8:	889b      	ldrh	r3, [r3, #4]
    *pun_ir_led = 0;
    34ca:	602c      	str	r4, [r5, #0]
    *pun_red_led = 0;
    u8_t temp1;
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    34cc:	f10d 0106 	add.w	r1, sp, #6
    *pun_red_led = 0;
    34d0:	6034      	str	r4, [r6, #0]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    34d2:	2004      	movs	r0, #4
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    34d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    34d8:	f7ff ff8a 	bl	33f0 <max30102_i2c_read.constprop.0>
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    34dc:	f10d 0106 	add.w	r1, sp, #6
    34e0:	2006      	movs	r0, #6
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    34e2:	af02      	add	r7, sp, #8
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    34e4:	f7ff ff84 	bl	33f0 <max30102_i2c_read.constprop.0>
    34e8:	481e      	ldr	r0, [pc, #120]	; (3564 <max30102_read_fifo+0xb8>)
    34ea:	f01c fcff 	bl	1feec <z_impl_device_get_binding>
static inline int i2c_burst_read(const struct device *dev,
    34ee:	2207      	movs	r2, #7
	msg[0].buf = (uint8_t *)write_buf;
    34f0:	eb0d 0102 	add.w	r1, sp, r2
    34f4:	910a      	str	r1, [sp, #40]	; 0x28
	msg[0].len = num_write;
    34f6:	2101      	movs	r1, #1
    34f8:	910b      	str	r1, [sp, #44]	; 0x2c
	msg[1].len = num_read;
    34fa:	2106      	movs	r1, #6
    34fc:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3500:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	msg[1].buf = (uint8_t *)read_buf;
    3504:	970d      	str	r7, [sp, #52]	; 0x34
	msg[1].len = num_read;
    3506:	910e      	str	r1, [sp, #56]	; 0x38
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3508:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
	return api->transfer(dev, msgs, num_msgs, addr);
    350c:	6883      	ldr	r3, [r0, #8]
    350e:	2202      	movs	r2, #2
    3510:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3514:	a90a      	add	r1, sp, #40	; 0x28
    3516:	2357      	movs	r3, #87	; 0x57
    3518:	47c0      	blx	r8
    max30102_i2c_read_fifo(MAX30102_FIFO_DATA_REG, temp_dat1, 6);
    for (int i = 0; i < 6; i++)
    351a:	ab04      	add	r3, sp, #16
    351c:	3401      	adds	r4, #1
        temp_dat[i] = temp_dat1[i];
    351e:	f817 2b01 	ldrb.w	r2, [r7], #1
    3522:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < 6; i++)
    3526:	2c06      	cmp	r4, #6
    3528:	d1f8      	bne.n	351c <max30102_read_fifo+0x70>
    *pun_ir_led = (temp_dat[0] << 16) + (temp_dat[1] << 8) + temp_dat[2];
    352a:	9b05      	ldr	r3, [sp, #20]
    352c:	9a04      	ldr	r2, [sp, #16]
    352e:	021b      	lsls	r3, r3, #8
    3530:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    3534:	9a06      	ldr	r2, [sp, #24]
    3536:	4413      	add	r3, r2
    3538:	602b      	str	r3, [r5, #0]
    *pun_red_led = (temp_dat[3] << 16) + (temp_dat[4] << 8) + temp_dat[5];
    353a:	9b08      	ldr	r3, [sp, #32]
    353c:	9a07      	ldr	r2, [sp, #28]
    353e:	021b      	lsls	r3, r3, #8
    3540:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    3544:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3546:	4413      	add	r3, r2
    *pun_red_led &= 0x03FFFF; //Mask MSB [23:18]
    3548:	f3c3 0311 	ubfx	r3, r3, #0, #18
    354c:	6033      	str	r3, [r6, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    354e:	682b      	ldr	r3, [r5, #0]
    return rslt;
}
    3550:	2000      	movs	r0, #0
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    3552:	f3c3 0311 	ubfx	r3, r3, #0, #18
    3556:	602b      	str	r3, [r5, #0]
}
    3558:	b010      	add	sp, #64	; 0x40
    355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    355e:	bf00      	nop
    3560:	000283fe 	.word	0x000283fe
    3564:	00029fa3 	.word	0x00029fa3

00003568 <first_data_read>:
int8_t ch_hr_valid;                   //indicator to show if the heart rate calculation is valid

uint32_t un_min, un_max, un_prev_data;

void first_data_read()
{
    3568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    un_min = 0x3FFFF;
    356c:	4f23      	ldr	r7, [pc, #140]	; (35fc <first_data_read+0x94>)
    356e:	4b24      	ldr	r3, [pc, #144]	; (3600 <first_data_read+0x98>)
    un_max = 0;
    3570:	f8df b090 	ldr.w	fp, [pc, #144]	; 3604 <first_data_read+0x9c>
    n_ir_buffer_length = BUFFER_SIZE; //*
    3574:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3608 <first_data_read+0xa0>
    3578:	4d24      	ldr	r5, [pc, #144]	; (360c <first_data_read+0xa4>)
    un_min = 0x3FFFF;
    357a:	603b      	str	r3, [r7, #0]
    un_max = 0;
    357c:	2400      	movs	r4, #0
    n_ir_buffer_length = BUFFER_SIZE; //*
    357e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3582:	4e23      	ldr	r6, [pc, #140]	; (3610 <first_data_read+0xa8>)
    un_max = 0;
    3584:	f8cb 4000 	str.w	r4, [fp]
{
    3588:	b087      	sub	sp, #28
    n_ir_buffer_length = BUFFER_SIZE; //*
    358a:	f8c8 3000 	str.w	r3, [r8]
    int i = 0;
    for (i = 0; i < n_ir_buffer_length; i++)
    358e:	46a9      	mov	r9, r5
    {
        u8_t data = 0;
    3590:	46a2      	mov	sl, r4
    for (i = 0; i < n_ir_buffer_length; i++)
    3592:	f8d8 1000 	ldr.w	r1, [r8]
    3596:	42a1      	cmp	r1, r4
    3598:	dc11      	bgt.n	35be <first_data_read+0x56>
        // printf("red=");
        // printf("%d", aun_red_buffer[i]);
        // printf(",ir=");
        // printf("%d\n\r", aun_ir_buffer[i]);
    }
    un_prev_data = aun_red_buffer[i];
    359a:	4b1e      	ldr	r3, [pc, #120]	; (3614 <first_data_read+0xac>)
    359c:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
    35a0:	601a      	str	r2, [r3, #0]
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    35a2:	4b1d      	ldr	r3, [pc, #116]	; (3618 <first_data_read+0xb0>)
    35a4:	9302      	str	r3, [sp, #8]
    35a6:	4b1d      	ldr	r3, [pc, #116]	; (361c <first_data_read+0xb4>)
    35a8:	9301      	str	r3, [sp, #4]
    35aa:	4b1d      	ldr	r3, [pc, #116]	; (3620 <first_data_read+0xb8>)
    35ac:	9300      	str	r3, [sp, #0]
    35ae:	4a17      	ldr	r2, [pc, #92]	; (360c <first_data_read+0xa4>)
    35b0:	4b1c      	ldr	r3, [pc, #112]	; (3624 <first_data_read+0xbc>)
    35b2:	4817      	ldr	r0, [pc, #92]	; (3610 <first_data_read+0xa8>)
    35b4:	f000 fa36 	bl	3a24 <maxim_heart_rate_and_oxygen_saturation>
}
    35b8:	b007      	add	sp, #28
    35ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u8_t data = 0;
    35be:	f88d a017 	strb.w	sl, [sp, #23]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    35c2:	f10d 0117 	add.w	r1, sp, #23
    35c6:	2000      	movs	r0, #0
    35c8:	f7ff ff12 	bl	33f0 <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    35cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    35d0:	2b40      	cmp	r3, #64	; 0x40
    35d2:	d1f6      	bne.n	35c2 <first_data_read+0x5a>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i)); //read from MAX30102 FIFO
    35d4:	4631      	mov	r1, r6
    35d6:	4628      	mov	r0, r5
    35d8:	f7ff ff68 	bl	34ac <max30102_read_fifo>
        if (un_min > aun_red_buffer[i])
    35dc:	f855 3b04 	ldr.w	r3, [r5], #4
    35e0:	683a      	ldr	r2, [r7, #0]
    35e2:	4293      	cmp	r3, r2
        if (un_max < aun_red_buffer[i])
    35e4:	f8db 2000 	ldr.w	r2, [fp]
            un_min = aun_red_buffer[i]; //update signal min
    35e8:	bf38      	it	cc
    35ea:	603b      	strcc	r3, [r7, #0]
        if (un_max < aun_red_buffer[i])
    35ec:	4293      	cmp	r3, r2
            un_max = aun_red_buffer[i]; //update signal max
    35ee:	bf88      	it	hi
    35f0:	f8cb 3000 	strhi.w	r3, [fp]
    for (i = 0; i < n_ir_buffer_length; i++)
    35f4:	3401      	adds	r4, #1
    35f6:	3604      	adds	r6, #4
    35f8:	e7cb      	b.n	3592 <first_data_read+0x2a>
    35fa:	bf00      	nop
    35fc:	2000c1a8 	.word	0x2000c1a8
    3600:	0003ffff 	.word	0x0003ffff
    3604:	2000c1a4 	.word	0x2000c1a4
    3608:	2000c19c 	.word	0x2000c19c
    360c:	2000b9c8 	.word	0x2000b9c8
    3610:	2000b1f8 	.word	0x2000b1f8
    3614:	2000c1ac 	.word	0x2000c1ac
    3618:	2000f593 	.word	0x2000f593
    361c:	2000c198 	.word	0x2000c198
    3620:	2000f594 	.word	0x2000f594
    3624:	2000c1a0 	.word	0x2000c1a0

00003628 <read_heart_rate_spio2>:

void read_heart_rate_spio2(int *rate, int *spo2, bool *valid_hr, bool *valid_spo2)
{
    3628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i = 0;
    un_min = 0x3FFFF;
    362c:	4d3f      	ldr	r5, [pc, #252]	; (372c <read_heart_rate_spio2+0x104>)
    362e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 3730 <read_heart_rate_spio2+0x108>
    3632:	f8df c100 	ldr.w	ip, [pc, #256]	; 3734 <read_heart_rate_spio2+0x10c>
{
    3636:	b089      	sub	sp, #36	; 0x24
    3638:	460e      	mov	r6, r1
    un_max = 0;
    363a:	493f      	ldr	r1, [pc, #252]	; (3738 <read_heart_rate_spio2+0x110>)
{
    363c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    un_max = 0;
    3640:	2300      	movs	r3, #0
    un_min = 0x3FFFF;
    3642:	4a3e      	ldr	r2, [pc, #248]	; (373c <read_heart_rate_spio2+0x114>)
    3644:	602a      	str	r2, [r5, #0]
{
    3646:	4607      	mov	r7, r0
    un_max = 0;
    3648:	600b      	str	r3, [r1, #0]
    364a:	46ce      	mov	lr, r9
    364c:	f44f 74f5 	mov.w	r4, #490	; 0x1ea
    3650:	4618      	mov	r0, r3
    3652:	469a      	mov	sl, r3

    //dumping the first 100 sets of samples in the memory and shift the last 400 sets of samples to the top
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    {
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    3654:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    3658:	f8de 8028 	ldr.w	r8, [lr, #40]	; 0x28
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    365c:	f84c 1b04 	str.w	r1, [ip], #4

        //update the signal min and max
        if (un_min > aun_red_buffer[i])
    3660:	4291      	cmp	r1, r2
    3662:	bf3c      	itt	cc
    3664:	460a      	movcc	r2, r1
    3666:	f04f 0a01 	movcc.w	sl, #1
            un_min = aun_red_buffer[i];
        if (un_max < aun_red_buffer[i])
    366a:	4281      	cmp	r1, r0
    366c:	bf84      	itt	hi
    366e:	4608      	movhi	r0, r1
    3670:	2301      	movhi	r3, #1
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    3672:	3c01      	subs	r4, #1
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    3674:	f84e 8b04 	str.w	r8, [lr], #4
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    3678:	d1ec      	bne.n	3654 <read_heart_rate_spio2+0x2c>
    367a:	f1ba 0f00 	cmp.w	sl, #0
    367e:	d000      	beq.n	3682 <read_heart_rate_spio2+0x5a>
    3680:	602a      	str	r2, [r5, #0]
    3682:	b10b      	cbz	r3, 3688 <read_heart_rate_spio2+0x60>
    3684:	4b2c      	ldr	r3, [pc, #176]	; (3738 <read_heart_rate_spio2+0x110>)
    3686:	6018      	str	r0, [r3, #0]
    3688:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3740 <read_heart_rate_spio2+0x118>
    }

    //take 100 sets of samples before calculating the heart rate.
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    {
        un_prev_data = aun_red_buffer[i - 1];
    368c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 3744 <read_heart_rate_spio2+0x11c>
        // printf("%d", aun_ir_buffer[i]);
        // printf(", HR=%d, ", n_heart_rate);
        // printf("HRvalid=%d, ", ch_hr_valid);
        // printf("SpO2=%d, ", n_sp02);
        // printf("SPO2Valid=%d\n\r", ch_spo2_valid);
        *rate = n_heart_rate;
    3690:	4d2d      	ldr	r5, [pc, #180]	; (3748 <read_heart_rate_spio2+0x120>)
    3692:	f44f 64f5 	mov.w	r4, #1960	; 0x7a8
        u8_t data = 0;
    3696:	f04f 0b00 	mov.w	fp, #0
        un_prev_data = aun_red_buffer[i - 1];
    369a:	f858 3b04 	ldr.w	r3, [r8], #4
    369e:	f8ca 3000 	str.w	r3, [sl]
        u8_t data = 0;
    36a2:	f88d b01f 	strb.w	fp, [sp, #31]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    36a6:	f10d 011f 	add.w	r1, sp, #31
    36aa:	2000      	movs	r0, #0
    36ac:	f7ff fea0 	bl	33f0 <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    36b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    36b4:	2b40      	cmp	r3, #64	; 0x40
    36b6:	d1f6      	bne.n	36a6 <read_heart_rate_spio2+0x7e>
        max30102_i2c_read(MAX30102_FIFO_W_POINTER, &data, 1);
    36b8:	f10d 011f 	add.w	r1, sp, #31
    36bc:	2004      	movs	r0, #4
    36be:	f7ff fe97 	bl	33f0 <max30102_i2c_read.constprop.0>
        max30102_i2c_read(MAX30102_FIFO_R_POINTER, &data, 1);
    36c2:	f10d 011f 	add.w	r1, sp, #31
    36c6:	2006      	movs	r0, #6
    36c8:	f7ff fe92 	bl	33f0 <max30102_i2c_read.constprop.0>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));
    36cc:	eb09 0104 	add.w	r1, r9, r4
    36d0:	4640      	mov	r0, r8
    36d2:	f7ff feeb 	bl	34ac <max30102_read_fifo>
        *rate = n_heart_rate;
    36d6:	682b      	ldr	r3, [r5, #0]
    36d8:	603b      	str	r3, [r7, #0]
        *spo2 = n_sp02;
    36da:	4b1c      	ldr	r3, [pc, #112]	; (374c <read_heart_rate_spio2+0x124>)
        if (ch_hr_valid == 1)
    36dc:	491c      	ldr	r1, [pc, #112]	; (3750 <read_heart_rate_spio2+0x128>)
        *spo2 = n_sp02;
    36de:	681a      	ldr	r2, [r3, #0]
    36e0:	6032      	str	r2, [r6, #0]
        if (ch_hr_valid == 1)
    36e2:	f991 2000 	ldrsb.w	r2, [r1]
    36e6:	1e50      	subs	r0, r2, #1
    36e8:	4242      	negs	r2, r0
    36ea:	4142      	adcs	r2, r0
    36ec:	9804      	ldr	r0, [sp, #16]
    36ee:	7002      	strb	r2, [r0, #0]
            *valid_hr = true;
        else
            *valid_hr = false;
        if (ch_spo2_valid == 1)
    36f0:	4818      	ldr	r0, [pc, #96]	; (3754 <read_heart_rate_spio2+0x12c>)
    36f2:	f990 2000 	ldrsb.w	r2, [r0]
    36f6:	f102 3cff 	add.w	ip, r2, #4294967295
    36fa:	f1dc 0200 	rsbs	r2, ip, #0
    36fe:	eb42 020c 	adc.w	r2, r2, ip
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3702:	3404      	adds	r4, #4
        if (ch_spo2_valid == 1)
    3704:	f8dd c014 	ldr.w	ip, [sp, #20]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3708:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
        if (ch_spo2_valid == 1)
    370c:	f88c 2000 	strb.w	r2, [ip]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3710:	d1c3      	bne.n	369a <read_heart_rate_spio2+0x72>
            *valid_spo2 = true;
        else
            *valid_spo2 = false;
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    3712:	e9cd 5101 	strd	r5, r1, [sp, #4]
    3716:	4910      	ldr	r1, [pc, #64]	; (3758 <read_heart_rate_spio2+0x130>)
    3718:	9000      	str	r0, [sp, #0]
    371a:	4a06      	ldr	r2, [pc, #24]	; (3734 <read_heart_rate_spio2+0x10c>)
    371c:	6809      	ldr	r1, [r1, #0]
    371e:	4804      	ldr	r0, [pc, #16]	; (3730 <read_heart_rate_spio2+0x108>)
    3720:	f000 f980 	bl	3a24 <maxim_heart_rate_and_oxygen_saturation>
    3724:	b009      	add	sp, #36	; 0x24
    3726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    372a:	bf00      	nop
    372c:	2000c1a8 	.word	0x2000c1a8
    3730:	2000b1f8 	.word	0x2000b1f8
    3734:	2000b9c8 	.word	0x2000b9c8
    3738:	2000c1a4 	.word	0x2000c1a4
    373c:	0003ffff 	.word	0x0003ffff
    3740:	2000c16c 	.word	0x2000c16c
    3744:	2000c1ac 	.word	0x2000c1ac
    3748:	2000c198 	.word	0x2000c198
    374c:	2000c1a0 	.word	0x2000c1a0
    3750:	2000f593 	.word	0x2000f593
    3754:	2000f594 	.word	0x2000f594
    3758:	2000c19c 	.word	0x2000c19c

0000375c <button_pressed>:
static struct gpio_callback button_cb_data;

void button_pressed(struct device *dev, struct gpio_callback *cb,
                    u32_t pins)
{
    printk("Device Detached\n");
    375c:	4801      	ldr	r0, [pc, #4]	; (3764 <button_pressed+0x8>)
    375e:	f01e bdbb 	b.w	222d8 <printk>
    3762:	bf00      	nop
    3764:	0002ba9f 	.word	0x0002ba9f

00003768 <init_latch>:

struct device *globalButton;
struct device *globalLed;

void init_latch()
{
    3768:	b570      	push	{r4, r5, r6, lr}
    376a:	4828      	ldr	r0, [pc, #160]	; (380c <init_latch+0xa4>)
    376c:	f01c fbbe 	bl	1feec <z_impl_device_get_binding>
    struct device *button;
    struct device *led;
    int ret;

    button = device_get_binding(SW0_GPIO_LABEL);
    if (button == NULL)
    3770:	4604      	mov	r4, r0
    3772:	b928      	cbnz	r0, 3780 <init_latch+0x18>

    led = initialize_led();
    globalButton=button;
    globalLed=led;

}
    3774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    3778:	4924      	ldr	r1, [pc, #144]	; (380c <init_latch+0xa4>)
    377a:	4825      	ldr	r0, [pc, #148]	; (3810 <init_latch+0xa8>)
    377c:	f01e bdac 	b.w	222d8 <printk>
    ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    3780:	2107      	movs	r1, #7
    3782:	f240 1211 	movw	r2, #273	; 0x111
    3786:	f01e fa9a 	bl	21cbe <gpio_pin_configure>
    if (ret != 0)
    378a:	4601      	mov	r1, r0
    378c:	b130      	cbz	r0, 379c <init_latch+0x34>
        printk("Error %d: failed to configure %s pin %d\n",
    378e:	4a1f      	ldr	r2, [pc, #124]	; (380c <init_latch+0xa4>)
    3790:	4820      	ldr	r0, [pc, #128]	; (3814 <init_latch+0xac>)
    3792:	2307      	movs	r3, #7
}
    3794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    3798:	f01e bd9e 	b.w	222d8 <printk>
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    379c:	68a3      	ldr	r3, [r4, #8]
    379e:	2107      	movs	r1, #7
    37a0:	699d      	ldr	r5, [r3, #24]
    37a2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    37a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    37aa:	4620      	mov	r0, r4
    37ac:	47a8      	blx	r5
    if (ret != 0)
    37ae:	4601      	mov	r1, r0
    37b0:	b118      	cbz	r0, 37ba <init_latch+0x52>
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    37b2:	4a16      	ldr	r2, [pc, #88]	; (380c <init_latch+0xa4>)
    37b4:	4818      	ldr	r0, [pc, #96]	; (3818 <init_latch+0xb0>)
    37b6:	2307      	movs	r3, #7
    37b8:	e7ec      	b.n	3794 <init_latch+0x2c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    37ba:	4918      	ldr	r1, [pc, #96]	; (381c <init_latch+0xb4>)
    37bc:	4b18      	ldr	r3, [pc, #96]	; (3820 <init_latch+0xb8>)
    37be:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    37c0:	2380      	movs	r3, #128	; 0x80
    37c2:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    37c4:	68a3      	ldr	r3, [r4, #8]
    37c6:	69db      	ldr	r3, [r3, #28]
    37c8:	b113      	cbz	r3, 37d0 <init_latch+0x68>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    37ca:	2201      	movs	r2, #1
    37cc:	4620      	mov	r0, r4
    37ce:	4798      	blx	r3
    37d0:	4814      	ldr	r0, [pc, #80]	; (3824 <init_latch+0xbc>)
    37d2:	f01c fb8b 	bl	1feec <z_impl_device_get_binding>
{
    struct device *led;
    int ret;

    led = device_get_binding(LED0_GPIO_LABEL);
    if (led == NULL)
    37d6:	4605      	mov	r5, r0
    37d8:	b940      	cbnz	r0, 37ec <init_latch+0x84>
    {
        printk("Didn't find LED device %s\n", LED0_GPIO_LABEL);
    37da:	4912      	ldr	r1, [pc, #72]	; (3824 <init_latch+0xbc>)
    37dc:	4812      	ldr	r0, [pc, #72]	; (3828 <init_latch+0xc0>)
    37de:	f01e fd7b 	bl	222d8 <printk>
    globalButton=button;
    37e2:	4b12      	ldr	r3, [pc, #72]	; (382c <init_latch+0xc4>)
    37e4:	601c      	str	r4, [r3, #0]
    globalLed=led;
    37e6:	4b12      	ldr	r3, [pc, #72]	; (3830 <init_latch+0xc8>)
    37e8:	601d      	str	r5, [r3, #0]
}
    37ea:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    }

    ret = gpio_pin_configure(led, LED0_GPIO_PIN, LED0_GPIO_FLAGS);
    37ec:	210a      	movs	r1, #10
    37ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    37f2:	f01e fa64 	bl	21cbe <gpio_pin_configure>
    if (ret != 0)
    37f6:	4601      	mov	r1, r0
    37f8:	2800      	cmp	r0, #0
    37fa:	d0f2      	beq.n	37e2 <init_latch+0x7a>
    {
        printk("Error %d: failed to configure LED device %s pin %d\n",
    37fc:	4a09      	ldr	r2, [pc, #36]	; (3824 <init_latch+0xbc>)
    37fe:	480d      	ldr	r0, [pc, #52]	; (3834 <init_latch+0xcc>)
    3800:	230a      	movs	r3, #10
    3802:	f01e fd69 	bl	222d8 <printk>
               ret, LED0_GPIO_LABEL, LED0_GPIO_PIN);
        return NULL;
    3806:	2500      	movs	r5, #0
    3808:	e7eb      	b.n	37e2 <init_latch+0x7a>
    380a:	bf00      	nop
    380c:	0002bab0 	.word	0x0002bab0
    3810:	0002bab7 	.word	0x0002bab7
    3814:	0002bad5 	.word	0x0002bad5
    3818:	0002bafe 	.word	0x0002bafe
    381c:	2000c1b0 	.word	0x2000c1b0
    3820:	0000375d 	.word	0x0000375d
    3824:	0002bb34 	.word	0x0002bb34
    3828:	0002bb3b 	.word	0x0002bb3b
    382c:	2000c1bc 	.word	0x2000c1bc
    3830:	2000c1c0 	.word	0x2000c1c0
    3834:	0002bb56 	.word	0x0002bb56

00003838 <detect_latch>:
    return match_led_to_button(globalButton,globalLed);
    3838:	4b02      	ldr	r3, [pc, #8]	; (3844 <detect_latch+0xc>)
    383a:	6819      	ldr	r1, [r3, #0]
    383c:	4b02      	ldr	r3, [pc, #8]	; (3848 <detect_latch+0x10>)
    383e:	6818      	ldr	r0, [r3, #0]
    3840:	f01e ba50 	b.w	21ce4 <match_led_to_button>
    3844:	2000c1c0 	.word	0x2000c1c0
    3848:	2000c1bc 	.word	0x2000c1bc

0000384c <max30208_i2c_write.constprop.0>:
static uint16_t max30208_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    384c:	b530      	push	{r4, r5, lr}
    384e:	4605      	mov	r5, r0
    3850:	b085      	sub	sp, #20
    3852:	460c      	mov	r4, r1
    3854:	480a      	ldr	r0, [pc, #40]	; (3880 <max30208_i2c_write.constprop.0+0x34>)
    3856:	f01c fb49 	bl	1feec <z_impl_device_get_binding>
	msg.len = num_bytes;
    385a:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    385c:	f88d 5000 	strb.w	r5, [sp]
    ret = i2c_reg_write_byte(i2c_dev, slaveAddr, addr, data);
    3860:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    3864:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    3868:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    386a:	f88d 300c 	strb.w	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    386e:	2350      	movs	r3, #80	; 0x50
    3870:	2201      	movs	r2, #1
    3872:	a901      	add	r1, sp, #4
    3874:	f01e fa59 	bl	21d2a <z_impl_i2c_transfer>
}
    3878:	b2c0      	uxtb	r0, r0
    387a:	b005      	add	sp, #20
    387c:	bd30      	pop	{r4, r5, pc}
    387e:	bf00      	nop
    3880:	00029fa3 	.word	0x00029fa3

00003884 <max30208_i2c_read.constprop.0>:
static uint16_t max30208_i2c_read(u8_t reg, u8_t *data, u16_t len)
    3884:	b530      	push	{r4, r5, lr}
    3886:	4605      	mov	r5, r0
    3888:	b089      	sub	sp, #36	; 0x24
    388a:	460c      	mov	r4, r1
    388c:	480c      	ldr	r0, [pc, #48]	; (38c0 <max30208_i2c_read.constprop.0+0x3c>)
    388e:	f01c fb2d 	bl	1feec <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    3892:	f10d 0307 	add.w	r3, sp, #7
    3896:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    3898:	2301      	movs	r3, #1
	msg[1].len = num_read;
    389a:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    389e:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    38a0:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    38a2:	2307      	movs	r3, #7
    38a4:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    38a8:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    38ac:	f88d 301c 	strb.w	r3, [sp, #28]
    38b0:	2350      	movs	r3, #80	; 0x50
    38b2:	2202      	movs	r2, #2
    38b4:	a902      	add	r1, sp, #8
    38b6:	f01e fa38 	bl	21d2a <z_impl_i2c_transfer>
}
    38ba:	b2c0      	uxtb	r0, r0
    38bc:	b009      	add	sp, #36	; 0x24
    38be:	bd30      	pop	{r4, r5, pc}
    38c0:	00029fa3 	.word	0x00029fa3

000038c4 <mpu6050_i2c_write.constprop.0.isra.0>:

	return rc;
}
******************************************************/
/* MPU6050 i2c write function */
static uint16_t mpu6050_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    38c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    38c6:	4604      	mov	r4, r0
    38c8:	480a      	ldr	r0, [pc, #40]	; (38f4 <mpu6050_i2c_write.constprop.0.isra.0+0x30>)
    38ca:	f01c fb0f 	bl	1feec <z_impl_device_get_binding>
	uint8_t tx_buf[2] = {reg_addr, value};
    38ce:	2300      	movs	r3, #0
    38d0:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
    38d4:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    38d6:	f88d 4000 	strb.w	r4, [sp]
	msg.buf = (uint8_t *)buf;
    38da:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    38de:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    38e0:	f88d 300c 	strb.w	r3, [sp, #12]
    38e4:	2368      	movs	r3, #104	; 0x68
    38e6:	2201      	movs	r2, #1
    38e8:	a901      	add	r1, sp, #4
    38ea:	f01e fa1e 	bl	21d2a <z_impl_i2c_transfer>
	} else {
		printk("Wrote 0xAE to address 0x00.\n");
	}
    #endif
    return ret;
}
    38ee:	b004      	add	sp, #16
    38f0:	bd10      	pop	{r4, pc}
    38f2:	bf00      	nop
    38f4:	00029fa3 	.word	0x00029fa3

000038f8 <mpu6050_i2c_read.constprop.0>:

/* MPU6050 i2c read function */
static uint16_t mpu6050_i2c_read(u8_t reg, u8_t *data, u16_t len)
    38f8:	b530      	push	{r4, r5, lr}
    38fa:	4605      	mov	r5, r0
    38fc:	b089      	sub	sp, #36	; 0x24
    38fe:	460c      	mov	r4, r1
    3900:	480c      	ldr	r0, [pc, #48]	; (3934 <mpu6050_i2c_read.constprop.0+0x3c>)
    3902:	f01c faf3 	bl	1feec <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    3906:	f10d 0307 	add.w	r3, sp, #7
    390a:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    390c:	2301      	movs	r3, #1
	msg[1].len = num_read;
    390e:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    3912:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    3914:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3916:	2307      	movs	r3, #7
    3918:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    391c:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3920:	f88d 301c 	strb.w	r3, [sp, #28]
    3924:	2368      	movs	r3, #104	; 0x68
    3926:	2202      	movs	r2, #2
    3928:	a902      	add	r1, sp, #8
    392a:	f01e f9fe 	bl	21d2a <z_impl_i2c_transfer>
	} else {
		printk("Read 0x%X from address %X.\n", *data, reg);
	}
    #endif
    return ret;
}
    392e:	b2c0      	uxtb	r0, r0
    3930:	b009      	add	sp, #36	; 0x24
    3932:	bd30      	pop	{r4, r5, pc}
    3934:	00029fa3 	.word	0x00029fa3

00003938 <init_max30208>:
{
    3938:	b513      	push	{r0, r1, r4, lr}
    rslt = max30208_i2c_read(MAX30208_PART_ID, &chipId, 1);
    393a:	20ff      	movs	r0, #255	; 0xff
    393c:	f10d 0107 	add.w	r1, sp, #7
    3940:	f7ff ffa0 	bl	3884 <max30208_i2c_read.constprop.0>
    if (rslt == MAX_OK)
    3944:	4604      	mov	r4, r0
    3946:	b950      	cbnz	r0, 395e <init_max30208+0x26>
        if (chipId == I_AM_MAX30208)
    3948:	f89d 3007 	ldrb.w	r3, [sp, #7]
    394c:	2b30      	cmp	r3, #48	; 0x30
            printk("Communication with MAX30208 : OK\n");
    394e:	bf0c      	ite	eq
    3950:	4805      	ldreq	r0, [pc, #20]	; (3968 <init_max30208+0x30>)
            printk("Communication with MAX30208 : FAILED!!!\n");
    3952:	4806      	ldrne	r0, [pc, #24]	; (396c <init_max30208+0x34>)
    3954:	f01e fcc0 	bl	222d8 <printk>
}
    3958:	4620      	mov	r0, r4
    395a:	b002      	add	sp, #8
    395c:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30208 : FAILED!!!\n I2C error %d\n", rslt);
    395e:	4601      	mov	r1, r0
    3960:	4803      	ldr	r0, [pc, #12]	; (3970 <init_max30208+0x38>)
    3962:	f01e fcb9 	bl	222d8 <printk>
    3966:	e7f7      	b.n	3958 <init_max30208+0x20>
    3968:	0002bb8a 	.word	0x0002bb8a
    396c:	0002bbac 	.word	0x0002bbac
    3970:	0002bbd5 	.word	0x0002bbd5

00003974 <configure_max30208>:
{
    3974:	b510      	push	{r4, lr}
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    3976:	2100      	movs	r1, #0
    3978:	2001      	movs	r0, #1
    397a:	f7ff ff67 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    397e:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    3980:	4604      	mov	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3982:	2004      	movs	r0, #4
    3984:	f7ff ff62 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3988:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    398a:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    398c:	2005      	movs	r0, #5
    398e:	f7ff ff5d 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3992:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3994:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3996:	2100      	movs	r1, #0
    3998:	2006      	movs	r0, #6
    399a:	f7ff ff57 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    399e:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    39a0:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    39a2:	210f      	movs	r1, #15
    39a4:	2009      	movs	r0, #9
    39a6:	f7ff ff51 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    39aa:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    39ac:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    39ae:	211a      	movs	r1, #26
    39b0:	200a      	movs	r0, #10
    39b2:	f7ff ff4b 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    39b6:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    39b8:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    39ba:	21c1      	movs	r1, #193	; 0xc1
    39bc:	2014      	movs	r0, #20
    39be:	f7ff ff45 	bl	384c <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    39c2:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    39c4:	4304      	orrs	r4, r0
    39c6:	b2a4      	uxth	r4, r4
    if (rslt == MAX_OK)
    39c8:	b924      	cbnz	r4, 39d4 <configure_max30208+0x60>
        printk("CONFIGURING MAX30208 : OK\n");
    39ca:	4803      	ldr	r0, [pc, #12]	; (39d8 <configure_max30208+0x64>)
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    39cc:	f01e fc84 	bl	222d8 <printk>
}
    39d0:	4620      	mov	r0, r4
    39d2:	bd10      	pop	{r4, pc}
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    39d4:	4801      	ldr	r0, [pc, #4]	; (39dc <configure_max30208+0x68>)
    39d6:	e7f9      	b.n	39cc <configure_max30208+0x58>
    39d8:	0002bc0c 	.word	0x0002bc0c
    39dc:	0002bc27 	.word	0x0002bc27

000039e0 <configure_mpu6050>:

/*** Config MPU6050 ***/
void configure_mpu6050()
{
    39e0:	b507      	push	{r0, r1, r2, lr}
    int rslt;
	mpu6050_i2c_write(0x6B, 0x00, 1);	//Setting power
    39e2:	206b      	movs	r0, #107	; 0x6b
    39e4:	f7ff ff6e 	bl	38c4 <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x1B, 0x00, 1);	//Setting Gyro
    39e8:	201b      	movs	r0, #27
    39ea:	f7ff ff6b 	bl	38c4 <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x38, 0x00, 1);	//Setting Accl
    39ee:	2038      	movs	r0, #56	; 0x38
    39f0:	f7ff ff68 	bl	38c4 <mpu6050_i2c_write.constprop.0.isra.0>
    
    mpu6050_i2c_read(0x75, &rslt, 1);   //Reading Who_AM_I register of MPU6050 
    39f4:	a901      	add	r1, sp, #4
    39f6:	2075      	movs	r0, #117	; 0x75
    39f8:	f7ff ff7e 	bl	38f8 <mpu6050_i2c_read.constprop.0>
    if(rslt == 0x68)
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	2b68      	cmp	r3, #104	; 0x68
        printk("CONFIGURING MPU6050 : OK\n");
    3a00:	bf0c      	ite	eq
    3a02:	4803      	ldreq	r0, [pc, #12]	; (3a10 <configure_mpu6050+0x30>)
    else
      printk("CONFIGURING MPU6050 : FAILED !!!\n");  
    3a04:	4803      	ldrne	r0, [pc, #12]	; (3a14 <configure_mpu6050+0x34>)
    3a06:	f01e fc67 	bl	222d8 <printk>
}
    3a0a:	b003      	add	sp, #12
    3a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    3a10:	0002bc49 	.word	0x0002bc49
    3a14:	0002bc63 	.word	0x0002bc63

00003a18 <getAdcDevice>:
    3a18:	4801      	ldr	r0, [pc, #4]	; (3a20 <getAdcDevice+0x8>)
    3a1a:	f01c ba67 	b.w	1feec <z_impl_device_get_binding>
    3a1e:	bf00      	nop
    3a20:	0002bc85 	.word	0x0002bc85

00003a24 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
    3a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a28:	b0bd      	sub	sp, #244	; 0xf4
    3a2a:	4690      	mov	r8, r2
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    // remove DC of ir signal
    un_ir_mean = 0;
    for (k = 0; k < n_ir_buffer_length; k++)
    3a2c:	2200      	movs	r2, #0
{
    3a2e:	9305      	str	r3, [sp, #20]
    3a30:	4606      	mov	r6, r0
    3a32:	460d      	mov	r5, r1
    un_ir_mean = 0;
    3a34:	4613      	mov	r3, r2
    for (k = 0; k < n_ir_buffer_length; k++)
    3a36:	42aa      	cmp	r2, r5
    3a38:	db45      	blt.n	3ac6 <maxim_heart_rate_and_oxygen_saturation+0xa2>
        un_ir_mean += pun_ir_buffer[k];
    un_ir_mean = un_ir_mean / n_ir_buffer_length;
    3a3a:	fbb3 f3f5 	udiv	r3, r3, r5
    for (k = 0; k < n_ir_buffer_length; k++)
    3a3e:	4c9b      	ldr	r4, [pc, #620]	; (3cac <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3a40:	2200      	movs	r2, #0
    3a42:	4620      	mov	r0, r4
    3a44:	42aa      	cmp	r2, r5
    3a46:	db43      	blt.n	3ad0 <maxim_heart_rate_and_oxygen_saturation+0xac>
    3a48:	4a98      	ldr	r2, [pc, #608]	; (3cac <maxim_heart_rate_and_oxygen_saturation+0x288>)
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;

    // 4 pt Moving Average
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3a4a:	2100      	movs	r1, #0
    {
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    3a4c:	6817      	ldr	r7, [r2, #0]
    3a4e:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3a52:	6850      	ldr	r0, [r2, #4]
    3a54:	4403      	add	r3, r0
    3a56:	6890      	ldr	r0, [r2, #8]
    3a58:	443b      	add	r3, r7
        an_x[k] = n_denom / (int32_t)4;
    3a5a:	181b      	adds	r3, r3, r0
    3a5c:	bf48      	it	mi
    3a5e:	3303      	addmi	r3, #3
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    3a60:	3101      	adds	r1, #1
        an_x[k] = n_denom / (int32_t)4;
    3a62:	109b      	asrs	r3, r3, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3a64:	f5b1 7ff8 	cmp.w	r1, #496	; 0x1f0
        an_x[k] = n_denom / (int32_t)4;
    3a68:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3a6c:	d1ee      	bne.n	3a4c <maxim_heart_rate_and_oxygen_saturation+0x28>
    3a6e:	4890      	ldr	r0, [pc, #576]	; (3cb0 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    3a70:	4f8e      	ldr	r7, [pc, #568]	; (3cac <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3a72:	4684      	mov	ip, r0
    }

    // get difference of smoothed IR signal

    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3a74:	2200      	movs	r2, #0
    3a76:	f240 1eef 	movw	lr, #495	; 0x1ef
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    3a7a:	463b      	mov	r3, r7
    3a7c:	6879      	ldr	r1, [r7, #4]
    3a7e:	681b      	ldr	r3, [r3, #0]
    3a80:	3201      	adds	r2, #1
    3a82:	1acb      	subs	r3, r1, r3
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3a84:	4572      	cmp	r2, lr
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    3a86:	f84c 3b04 	str.w	r3, [ip], #4
    3a8a:	f107 0704 	add.w	r7, r7, #4
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3a8e:	d1f4      	bne.n	3a7a <maxim_heart_rate_and_oxygen_saturation+0x56>
    3a90:	4a87      	ldr	r2, [pc, #540]	; (3cb0 <maxim_heart_rate_and_oxygen_saturation+0x28c>)

    // 2-pt Moving Average to an_dx
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3a92:	2100      	movs	r1, #0
    {
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3a94:	6813      	ldr	r3, [r2, #0]
    3a96:	f852 7f04 	ldr.w	r7, [r2, #4]!
    3a9a:	443b      	add	r3, r7
    3a9c:	3101      	adds	r1, #1
    3a9e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    3aa2:	105b      	asrs	r3, r3, #1
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3aa4:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3aa8:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3aac:	d1f2      	bne.n	3a94 <maxim_heart_rate_and_oxygen_saturation+0x70>
    3aae:	4f80      	ldr	r7, [pc, #512]	; (3cb0 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3ab0:	2100      	movs	r1, #0
    3ab2:	1d4b      	adds	r3, r1, #5
    3ab4:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 3cb4 <maxim_heart_rate_and_oxygen_saturation+0x290>
    3ab8:	428b      	cmp	r3, r1
    3aba:	bfb4      	ite	lt
    3abc:	2301      	movlt	r3, #1
    3abe:	2306      	movge	r3, #6
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3ac0:	46bc      	mov	ip, r7
    {
        s = 0;
    3ac2:	2200      	movs	r2, #0
    3ac4:	e012      	b.n	3aec <maxim_heart_rate_and_oxygen_saturation+0xc8>
        un_ir_mean += pun_ir_buffer[k];
    3ac6:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    for (k = 0; k < n_ir_buffer_length; k++)
    3aca:	3201      	adds	r2, #1
        un_ir_mean += pun_ir_buffer[k];
    3acc:	440b      	add	r3, r1
    for (k = 0; k < n_ir_buffer_length; k++)
    3ace:	e7b2      	b.n	3a36 <maxim_heart_rate_and_oxygen_saturation+0x12>
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;
    3ad0:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    3ad4:	1ac9      	subs	r1, r1, r3
    3ad6:	f840 1b04 	str.w	r1, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3ada:	3201      	adds	r2, #1
    3adc:	e7b2      	b.n	3a44 <maxim_heart_rate_and_oxygen_saturation+0x20>
        for (k = i; k < i + HAMMING_SIZE; k++)
        {
            s -= an_dx[k] * auw_hamm[k - i];
    3ade:	f85c ab04 	ldr.w	sl, [ip], #4
    3ae2:	46d1      	mov	r9, sl
    3ae4:	f83e ab02 	ldrh.w	sl, [lr], #2
    3ae8:	fb09 221a 	mls	r2, r9, sl, r2
        for (k = i; k < i + HAMMING_SIZE; k++)
    3aec:	3b01      	subs	r3, #1
    3aee:	d1f6      	bne.n	3ade <maxim_heart_rate_and_oxygen_saturation+0xba>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    3af0:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3af4:	3101      	adds	r1, #1
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    3af6:	fb92 f2fc 	sdiv	r2, r2, ip
    3afa:	f847 2b04 	str.w	r2, [r7], #4
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3afe:	f240 12e9 	movw	r2, #489	; 0x1e9
    3b02:	4291      	cmp	r1, r2
    3b04:	d1d5      	bne.n	3ab2 <maxim_heart_rate_and_oxygen_saturation+0x8e>
    }

    n_th1 = 0; // threshold calculation
    3b06:	461a      	mov	r2, r3
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3b08:	f240 17ef 	movw	r7, #495	; 0x1ef
    {
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3b0c:	f850 1b04 	ldr.w	r1, [r0], #4
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3b10:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3b12:	2900      	cmp	r1, #0
    3b14:	bfb8      	it	lt
    3b16:	4249      	neglt	r1, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3b18:	42bb      	cmp	r3, r7
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3b1a:	440a      	add	r2, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3b1c:	d1f6      	bne.n	3b0c <maxim_heart_rate_and_oxygen_saturation+0xe8>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    3b1e:	2108      	movs	r1, #8
    3b20:	2005      	movs	r0, #5
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    3b22:	fb92 f2f3 	sdiv	r2, r2, r3
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    3b26:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3b2a:	9200      	str	r2, [sp, #0]
    3b2c:	a909      	add	r1, sp, #36	; 0x24
    3b2e:	4a60      	ldr	r2, [pc, #384]	; (3cb0 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    3b30:	a82d      	add	r0, sp, #180	; 0xb4
    3b32:	f01e f9bf 	bl	21eb4 <maxim_find_peaks>

    n_peak_interval_sum = 0;
    if (n_npks >= 2)
    3b36:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3b38:	2f01      	cmp	r7, #1
    3b3a:	f04f 0300 	mov.w	r3, #0
    3b3e:	dd38      	ble.n	3bb2 <maxim_heart_rate_and_oxygen_saturation+0x18e>
    3b40:	aa2d      	add	r2, sp, #180	; 0xb4
    {
        for (k = 1; k < n_npks; k++)
    3b42:	2001      	movs	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3b44:	4611      	mov	r1, r2
    3b46:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3b4a:	6809      	ldr	r1, [r1, #0]
        for (k = 1; k < n_npks; k++)
    3b4c:	3001      	adds	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3b4e:	ebac 0101 	sub.w	r1, ip, r1
        for (k = 1; k < n_npks; k++)
    3b52:	4287      	cmp	r7, r0
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3b54:	f102 0204 	add.w	r2, r2, #4
    3b58:	440b      	add	r3, r1
        for (k = 1; k < n_npks; k++)
    3b5a:	d1f3      	bne.n	3b44 <maxim_heart_rate_and_oxygen_saturation+0x120>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
    3b5c:	1e7a      	subs	r2, r7, #1
    3b5e:	fb93 f3f2 	sdiv	r3, r3, r2
        *pn_heart_rate = (int32_t)(6000 / n_peak_interval_sum); // beats per minutes
    3b62:	f241 7270 	movw	r2, #6000	; 0x1770
    3b66:	fb92 f3f3 	sdiv	r3, r2, r3
    3b6a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3b6c:	6013      	str	r3, [r2, #0]
        *pch_hr_valid = 1;
    3b6e:	2301      	movs	r3, #1
    3b70:	9a48      	ldr	r2, [sp, #288]	; 0x120
    3b72:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    3b76:	7013      	strb	r3, [r2, #0]
    3b78:	a82d      	add	r0, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
    3b7a:	4661      	mov	r1, ip
    3b7c:	2300      	movs	r3, #0
    {
        *pn_heart_rate = -999;
        *pch_hr_valid = 0;
    }

    for (k = 0; k < n_npks; k++)
    3b7e:	429f      	cmp	r7, r3
    3b80:	dc1b      	bgt.n	3bba <maxim_heart_rate_and_oxygen_saturation+0x196>
    3b82:	4b4d      	ldr	r3, [pc, #308]	; (3cb8 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    3b84:	4949      	ldr	r1, [pc, #292]	; (3cac <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3b86:	4618      	mov	r0, r3
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;

    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    for (k = 0; k < n_ir_buffer_length; k++)
    3b88:	2200      	movs	r2, #0
    3b8a:	468e      	mov	lr, r1
    3b8c:	42aa      	cmp	r2, r5
    3b8e:	db1b      	blt.n	3bc8 <maxim_heart_rate_and_oxygen_saturation+0x1a4>
        an_x[k] = pun_ir_buffer[k];
        an_y[k] = pun_red_buffer[k];
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
    3b90:	2000      	movs	r0, #0
    for (k = 0; k < n_npks; k++)
    3b92:	4605      	mov	r5, r0
                    if (un_only_once > 0)
                    {
                        un_only_once = 0;
                    }
                    n_c_min = an_x[i];
                    an_exact_ir_valley_locs[k] = i;
    3b94:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
    for (k = 0; k < n_npks; k++)
    3b98:	42af      	cmp	r7, r5
    3b9a:	dc1f      	bgt.n	3bdc <maxim_heart_rate_and_oxygen_saturation+0x1b8>
                }
            if (un_only_once == 0)
                n_exact_ir_valley_locs_count++;
        }
    }
    if (n_exact_ir_valley_locs_count < 2)
    3b9c:	2801      	cmp	r0, #1
    3b9e:	dc3f      	bgt.n	3c20 <maxim_heart_rate_and_oxygen_saturation+0x1fc>
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
    3ba0:	9a05      	ldr	r2, [sp, #20]
    3ba2:	4b46      	ldr	r3, [pc, #280]	; (3cbc <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3ba4:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 0;
    3ba6:	2300      	movs	r3, #0

    if (n_ratio_average > 2 && n_ratio_average < 184)
    {
        n_spo2_calc = uch_spo2_table[n_ratio_average];
        *pn_spo2 = n_spo2_calc;
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3ba8:	9a46      	ldr	r2, [sp, #280]	; 0x118
    3baa:	7013      	strb	r3, [r2, #0]
    else
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
        *pch_spo2_valid = 0;
    }
}
    3bac:	b03d      	add	sp, #244	; 0xf4
    3bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *pn_heart_rate = -999;
    3bb2:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3bb4:	4a41      	ldr	r2, [pc, #260]	; (3cbc <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3bb6:	600a      	str	r2, [r1, #0]
        *pch_hr_valid = 0;
    3bb8:	e7da      	b.n	3b70 <maxim_heart_rate_and_oxygen_saturation+0x14c>
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
    3bba:	f850 2b04 	ldr.w	r2, [r0], #4
    3bbe:	3202      	adds	r2, #2
    3bc0:	f841 2b04 	str.w	r2, [r1], #4
    for (k = 0; k < n_npks; k++)
    3bc4:	3301      	adds	r3, #1
    3bc6:	e7da      	b.n	3b7e <maxim_heart_rate_and_oxygen_saturation+0x15a>
        an_x[k] = pun_ir_buffer[k];
    3bc8:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
    3bcc:	f841 9b04 	str.w	r9, [r1], #4
        an_y[k] = pun_red_buffer[k];
    3bd0:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
    3bd4:	f840 9b04 	str.w	r9, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3bd8:	3201      	adds	r2, #1
    3bda:	e7d7      	b.n	3b8c <maxim_heart_rate_and_oxygen_saturation+0x168>
        m = an_ir_valley_locs[k];
    3bdc:	f85c 6b04 	ldr.w	r6, [ip], #4
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0)
    3be0:	1d71      	adds	r1, r6, #5
    3be2:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
    3be6:	dc0f      	bgt.n	3c08 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3be8:	1f72      	subs	r2, r6, #5
    3bea:	2a00      	cmp	r2, #0
    3bec:	dd0c      	ble.n	3c08 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3bee:	3e06      	subs	r6, #6
    3bf0:	4291      	cmp	r1, r2
    3bf2:	bfb4      	ite	lt
    3bf4:	2101      	movlt	r1, #1
    3bf6:	210b      	movge	r1, #11
    3bf8:	4431      	add	r1, r6
        n_c_min = 16777216; //2^24;
    3bfa:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
        un_only_once = 1;
    3bfe:	2601      	movs	r6, #1
            for (i = m - 5; i < m + 5; i++)
    3c00:	428a      	cmp	r2, r1
    3c02:	d103      	bne.n	3c0c <maxim_heart_rate_and_oxygen_saturation+0x1e8>
            if (un_only_once == 0)
    3c04:	b906      	cbnz	r6, 3c08 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
                n_exact_ir_valley_locs_count++;
    3c06:	3001      	adds	r0, #1
    for (k = 0; k < n_npks; k++)
    3c08:	3501      	adds	r5, #1
    3c0a:	e7c5      	b.n	3b98 <maxim_heart_rate_and_oxygen_saturation+0x174>
                if (an_x[i] < n_c_min)
    3c0c:	f85e 9022 	ldr.w	r9, [lr, r2, lsl #2]
    3c10:	45c1      	cmp	r9, r8
                    an_exact_ir_valley_locs[k] = i;
    3c12:	bfbe      	ittt	lt
    3c14:	f84a 2025 	strlt.w	r2, [sl, r5, lsl #2]
    3c18:	46c8      	movlt	r8, r9
    3c1a:	2600      	movlt	r6, #0
            for (i = m - 5; i < m + 5; i++)
    3c1c:	3201      	adds	r2, #1
    3c1e:	e7ef      	b.n	3c00 <maxim_heart_rate_and_oxygen_saturation+0x1dc>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3c20:	2500      	movs	r5, #0
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3c22:	6821      	ldr	r1, [r4, #0]
    3c24:	f854 2f04 	ldr.w	r2, [r4, #4]!
    3c28:	6866      	ldr	r6, [r4, #4]
    3c2a:	4432      	add	r2, r6
    3c2c:	4411      	add	r1, r2
    3c2e:	68a2      	ldr	r2, [r4, #8]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3c30:	681e      	ldr	r6, [r3, #0]
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3c32:	188a      	adds	r2, r1, r2
    3c34:	bf48      	it	mi
    3c36:	3203      	addmi	r2, #3
    3c38:	1092      	asrs	r2, r2, #2
    3c3a:	f844 2c04 	str.w	r2, [r4, #-4]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3c3e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3c42:	6859      	ldr	r1, [r3, #4]
    3c44:	440a      	add	r2, r1
    3c46:	6899      	ldr	r1, [r3, #8]
    3c48:	4432      	add	r2, r6
    3c4a:	1852      	adds	r2, r2, r1
    3c4c:	bf48      	it	mi
    3c4e:	3203      	addmi	r2, #3
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3c50:	3501      	adds	r5, #1
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3c52:	1092      	asrs	r2, r2, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3c54:	f5b5 7ff8 	cmp.w	r5, #496	; 0x1f0
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3c58:	f843 2c04 	str.w	r2, [r3, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3c5c:	d1e1      	bne.n	3c22 <maxim_heart_rate_and_oxygen_saturation+0x1fe>
        an_ratio[k] = 0;
    3c5e:	2300      	movs	r3, #0
    3c60:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    3c64:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    3c68:	ac1e      	add	r4, sp, #120	; 0x78
    3c6a:	930e      	str	r3, [sp, #56]	; 0x38
    3c6c:	4622      	mov	r2, r4
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE)
    3c6e:	f852 1b04 	ldr.w	r1, [r2], #4
    3c72:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    3c76:	dc93      	bgt.n	3ba0 <maxim_heart_rate_and_oxygen_saturation+0x17c>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++)
    3c78:	3301      	adds	r3, #1
    3c7a:	4298      	cmp	r0, r3
    3c7c:	d1f7      	bne.n	3c6e <maxim_heart_rate_and_oxygen_saturation+0x24a>
    n_i_ratio_count = 0;
    3c7e:	2100      	movs	r1, #0
    3c80:	4d0a      	ldr	r5, [pc, #40]	; (3cac <maxim_heart_rate_and_oxygen_saturation+0x288>)
                if (an_y[i] > n_y_dc_max)
    3c82:	4e0d      	ldr	r6, [pc, #52]	; (3cb8 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3c84:	468e      	mov	lr, r1
    3c86:	f100 3aff 	add.w	sl, r0, #4294967295
        if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10)
    3c8a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3c8e:	f854 2b04 	ldr.w	r2, [r4], #4
    3c92:	ebac 0802 	sub.w	r8, ip, r2
    3c96:	f1b8 0f0a 	cmp.w	r8, #10
    3c9a:	f10e 0e01 	add.w	lr, lr, #1
    3c9e:	dd56      	ble.n	3d4e <maxim_heart_rate_and_oxygen_saturation+0x32a>
        n_x_dc_max = -16777216;
    3ca0:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3ca4:	4613      	mov	r3, r2
        n_y_dc_max = -16777216;
    3ca6:	46b9      	mov	r9, r7
    3ca8:	e018      	b.n	3cdc <maxim_heart_rate_and_oxygen_saturation+0x2b8>
    3caa:	bf00      	nop
    3cac:	2000c984 	.word	0x2000c984
    3cb0:	2000c1c4 	.word	0x2000c1c4
    3cb4:	00029ce0 	.word	0x00029ce0
    3cb8:	2000d154 	.word	0x2000d154
    3cbc:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max)
    3cc0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3cc4:	42b8      	cmp	r0, r7
    3cc6:	bfc8      	it	gt
    3cc8:	4607      	movgt	r7, r0
                if (an_y[i] > n_y_dc_max)
    3cca:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                if (an_x[i] > n_x_dc_max)
    3cce:	bfc8      	it	gt
    3cd0:	9307      	strgt	r3, [sp, #28]
                if (an_y[i] > n_y_dc_max)
    3cd2:	4548      	cmp	r0, r9
    3cd4:	bfc4      	itt	gt
    3cd6:	469b      	movgt	fp, r3
    3cd8:	4681      	movgt	r9, r0
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3cda:	3301      	adds	r3, #1
    3cdc:	459c      	cmp	ip, r3
    3cde:	dcef      	bgt.n	3cc0 <maxim_heart_rate_and_oxygen_saturation+0x29c>
            n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
    3ce0:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    3ce4:	f855 002c 	ldr.w	r0, [r5, ip, lsl #2]
    3ce8:	1ac0      	subs	r0, r0, r3
    3cea:	9b07      	ldr	r3, [sp, #28]
    3cec:	1a9b      	subs	r3, r3, r2
    3cee:	4358      	muls	r0, r3
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3cf0:	fb90 f3f8 	sdiv	r3, r0, r8
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3cf4:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3cf8:	9306      	str	r3, [sp, #24]
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3cfa:	f855 302b 	ldr.w	r3, [r5, fp, lsl #2]
    3cfe:	1a1b      	subs	r3, r3, r0
    3d00:	9806      	ldr	r0, [sp, #24]
    3d02:	1a1b      	subs	r3, r3, r0
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
    3d04:	fb09 f303 	mul.w	r3, r9, r3
    3d08:	ea4f 19e3 	mov.w	r9, r3, asr #7
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3d0c:	f1b9 0f00 	cmp.w	r9, #0
    3d10:	dd1d      	ble.n	3d4e <maxim_heart_rate_and_oxygen_saturation+0x32a>
    3d12:	2904      	cmp	r1, #4
    3d14:	dc1b      	bgt.n	3d4e <maxim_heart_rate_and_oxygen_saturation+0x32a>
            n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
    3d16:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    3d1a:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
    3d1e:	ebab 0202 	sub.w	r2, fp, r2
    3d22:	1a1b      	subs	r3, r3, r0
    3d24:	435a      	muls	r2, r3
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3d26:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3d2a:	fb92 f8f8 	sdiv	r8, r2, r8
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3d2e:	1a1b      	subs	r3, r3, r0
    3d30:	eba3 0308 	sub.w	r3, r3, r8
            n_nume = (n_y_ac * n_x_dc_max) >> 7;    //prepare X100 to preserve floating value
    3d34:	435f      	muls	r7, r3
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3d36:	11ff      	asrs	r7, r7, #7
    3d38:	d009      	beq.n	3d4e <maxim_heart_rate_and_oxygen_saturation+0x32a>
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3d3a:	ab3c      	add	r3, sp, #240	; 0xf0
    3d3c:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    3d40:	2364      	movs	r3, #100	; 0x64
    3d42:	435f      	muls	r7, r3
                n_i_ratio_count++;
    3d44:	3101      	adds	r1, #1
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3d46:	fb97 f7f9 	sdiv	r7, r7, r9
    3d4a:	f84c 7cc8 	str.w	r7, [ip, #-200]
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3d4e:	45d6      	cmp	lr, sl
    3d50:	db9b      	blt.n	3c8a <maxim_heart_rate_and_oxygen_saturation+0x266>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
    3d52:	a80a      	add	r0, sp, #40	; 0x28
    3d54:	f01e f844 	bl	21de0 <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
    3d58:	104a      	asrs	r2, r1, #1
    if (n_middle_idx > 1)
    3d5a:	2903      	cmp	r1, #3
    3d5c:	ea4f 0382 	mov.w	r3, r2, lsl #2
    3d60:	dd14      	ble.n	3d8c <maxim_heart_rate_and_oxygen_saturation+0x368>
        n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx]) / 2; // use median
    3d62:	a93c      	add	r1, sp, #240	; 0xf0
    3d64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    3d68:	f851 3ccc 	ldr.w	r3, [r1, #-204]
    3d6c:	f851 2cc8 	ldr.w	r2, [r1, #-200]
    3d70:	4413      	add	r3, r2
    3d72:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    3d76:	105b      	asrs	r3, r3, #1
    if (n_ratio_average > 2 && n_ratio_average < 184)
    3d78:	1eda      	subs	r2, r3, #3
    3d7a:	2ab4      	cmp	r2, #180	; 0xb4
    3d7c:	f63f af10 	bhi.w	3ba0 <maxim_heart_rate_and_oxygen_saturation+0x17c>
        n_spo2_calc = uch_spo2_table[n_ratio_average];
    3d80:	4a05      	ldr	r2, [pc, #20]	; (3d98 <maxim_heart_rate_and_oxygen_saturation+0x374>)
    3d82:	5cd3      	ldrb	r3, [r2, r3]
    3d84:	9a05      	ldr	r2, [sp, #20]
    3d86:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3d88:	2301      	movs	r3, #1
    3d8a:	e70d      	b.n	3ba8 <maxim_heart_rate_and_oxygen_saturation+0x184>
        n_ratio_average = an_ratio[n_middle_idx];
    3d8c:	aa3c      	add	r2, sp, #240	; 0xf0
    3d8e:	4413      	add	r3, r2
    3d90:	f853 3cc8 	ldr.w	r3, [r3, #-200]
    3d94:	e7f0      	b.n	3d78 <maxim_heart_rate_and_oxygen_saturation+0x354>
    3d96:	bf00      	nop
    3d98:	0002bc8b 	.word	0x0002bc8b

00003d9c <init_lcd_output>:
const int spi_freq = 8000000;

static uint8_t data[MAX_USER_DATA_LENGTH];

s16_t init_lcd_output()
{
    3d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3da0:	4828      	ldr	r0, [pc, #160]	; (3e44 <init_lcd_output+0xa8>)
    3da2:	f01c f8a3 	bl	1feec <z_impl_device_get_binding>
    struct device *cs;
    int ret;
    cs = device_get_binding(CS_GPIO_LABEL);
    if (cs == NULL)
    3da6:	4605      	mov	r5, r0
    3da8:	b938      	cbnz	r0, 3dba <init_lcd_output+0x1e>
    {
        printk("Didn't find device %s\n", CS_GPIO_LABEL);
    3daa:	4827      	ldr	r0, [pc, #156]	; (3e48 <init_lcd_output+0xac>)
    3dac:	4925      	ldr	r1, [pc, #148]	; (3e44 <init_lcd_output+0xa8>)
    3dae:	f01e fa93 	bl	222d8 <printk>
        return -1;
    3db2:	f04f 30ff 	mov.w	r0, #4294967295
    globalLcdRst = lcdRst;
    globalVciEn = vciEn;
    globalDcx = dcx;

    return 0;
}
    3db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = gpio_pin_configure(cs, CS_GPIO_PIN, CS_GPIO_FLAGS);
    3dba:	210c      	movs	r1, #12
    3dbc:	f01e f89d 	bl	21efa <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3dc0:	4604      	mov	r4, r0
    3dc2:	b138      	cbz	r0, 3dd4 <init_lcd_output+0x38>
        printk("Error %d: failed to configure device %s pin %d\n",
    3dc4:	230c      	movs	r3, #12
        printk("Error %d: failed to configure device %s pin %d\n",
    3dc6:	4821      	ldr	r0, [pc, #132]	; (3e4c <init_lcd_output+0xb0>)
    3dc8:	4a1e      	ldr	r2, [pc, #120]	; (3e44 <init_lcd_output+0xa8>)
    3dca:	4621      	mov	r1, r4
    3dcc:	f01e fa84 	bl	222d8 <printk>
        return ret;
    3dd0:	b220      	sxth	r0, r4
    3dd2:	e7f0      	b.n	3db6 <init_lcd_output+0x1a>
    3dd4:	481b      	ldr	r0, [pc, #108]	; (3e44 <init_lcd_output+0xa8>)
    3dd6:	f01c f889 	bl	1feec <z_impl_device_get_binding>
    if (lcdRst == NULL)
    3dda:	4606      	mov	r6, r0
    3ddc:	2800      	cmp	r0, #0
    3dde:	d0e4      	beq.n	3daa <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, LCD_RST_GPIO_PIN, LCD_RST_GPIO_FLAGS);
    3de0:	210a      	movs	r1, #10
    3de2:	f01e f88a 	bl	21efa <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3de6:	4604      	mov	r4, r0
    3de8:	b108      	cbz	r0, 3dee <init_lcd_output+0x52>
        printk("Error %d: failed to configure device %s pin %d\n",
    3dea:	230a      	movs	r3, #10
    3dec:	e7eb      	b.n	3dc6 <init_lcd_output+0x2a>
    3dee:	4815      	ldr	r0, [pc, #84]	; (3e44 <init_lcd_output+0xa8>)
    3df0:	f01c f87c 	bl	1feec <z_impl_device_get_binding>
    if (vciEn == NULL)
    3df4:	4680      	mov	r8, r0
    3df6:	2800      	cmp	r0, #0
    3df8:	d0d7      	beq.n	3daa <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, VCI_EN_GPIO_PIN, VCI_EN_GPIO_FLAGS);
    3dfa:	2106      	movs	r1, #6
    3dfc:	4630      	mov	r0, r6
    3dfe:	f01e f87c 	bl	21efa <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3e02:	4604      	mov	r4, r0
    3e04:	b108      	cbz	r0, 3e0a <init_lcd_output+0x6e>
        printk("Error %d: failed to configure device %s pin %d\n",
    3e06:	2306      	movs	r3, #6
    3e08:	e7dd      	b.n	3dc6 <init_lcd_output+0x2a>
    3e0a:	480e      	ldr	r0, [pc, #56]	; (3e44 <init_lcd_output+0xa8>)
    3e0c:	f01c f86e 	bl	1feec <z_impl_device_get_binding>
    if (dcx == NULL)
    3e10:	4607      	mov	r7, r0
    3e12:	2800      	cmp	r0, #0
    3e14:	d0c9      	beq.n	3daa <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, DCX_GPIO_PIN, DCX_GPIO_FLAGS);
    3e16:	2105      	movs	r1, #5
    3e18:	4630      	mov	r0, r6
    3e1a:	f01e f86e 	bl	21efa <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3e1e:	4604      	mov	r4, r0
    3e20:	b108      	cbz	r0, 3e26 <init_lcd_output+0x8a>
        printk("Error %d: failed to configure device %s pin %d\n",
    3e22:	2305      	movs	r3, #5
    3e24:	e7cf      	b.n	3dc6 <init_lcd_output+0x2a>
    printk("INITIALISING OUTPUTS : OK\n");
    3e26:	480a      	ldr	r0, [pc, #40]	; (3e50 <init_lcd_output+0xb4>)
    3e28:	f01e fa56 	bl	222d8 <printk>
    globalcs = cs;
    3e2c:	4b09      	ldr	r3, [pc, #36]	; (3e54 <init_lcd_output+0xb8>)
    3e2e:	601d      	str	r5, [r3, #0]
    globalLcdRst = lcdRst;
    3e30:	4b09      	ldr	r3, [pc, #36]	; (3e58 <init_lcd_output+0xbc>)
    3e32:	601e      	str	r6, [r3, #0]
    globalVciEn = vciEn;
    3e34:	4b09      	ldr	r3, [pc, #36]	; (3e5c <init_lcd_output+0xc0>)
    3e36:	f8c3 8000 	str.w	r8, [r3]
    globalDcx = dcx;
    3e3a:	4b09      	ldr	r3, [pc, #36]	; (3e60 <init_lcd_output+0xc4>)
    return 0;
    3e3c:	4620      	mov	r0, r4
    globalDcx = dcx;
    3e3e:	601f      	str	r7, [r3, #0]
    return 0;
    3e40:	e7b9      	b.n	3db6 <init_lcd_output+0x1a>
    3e42:	bf00      	nop
    3e44:	0002bab0 	.word	0x0002bab0
    3e48:	0002bd43 	.word	0x0002bd43
    3e4c:	0002bd5a 	.word	0x0002bd5a
    3e50:	0002bd8a 	.word	0x0002bd8a
    3e54:	2000d930 	.word	0x2000d930
    3e58:	2000d928 	.word	0x2000d928
    3e5c:	2000d92c 	.word	0x2000d92c
    3e60:	2000d924 	.word	0x2000d924

00003e64 <setOutputcs>:

bool setOutputcs(bool val)
{
    3e64:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3e66:	4b06      	ldr	r3, [pc, #24]	; (3e80 <setOutputcs+0x1c>)
{
    3e68:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3e6a:	210c      	movs	r1, #12
    3e6c:	6818      	ldr	r0, [r3, #0]
    3e6e:	f01e f834 	bl	21eda <gpio_pin_set>
    if (err != 0)
    3e72:	b118      	cbz	r0, 3e7c <setOutputcs+0x18>
    {
        printk("Error in gpio cs");
    3e74:	4803      	ldr	r0, [pc, #12]	; (3e84 <setOutputcs+0x20>)
    3e76:	f01e fa2f 	bl	222d8 <printk>
        return 1;
    3e7a:	2001      	movs	r0, #1
    }
    return 0;
}
    3e7c:	bd08      	pop	{r3, pc}
    3e7e:	bf00      	nop
    3e80:	2000d930 	.word	0x2000d930
    3e84:	0002bda5 	.word	0x0002bda5

00003e88 <setOutputLcdRst>:

bool setOutputLcdRst(bool val)
{
    3e88:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3e8a:	4b06      	ldr	r3, [pc, #24]	; (3ea4 <setOutputLcdRst+0x1c>)
{
    3e8c:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3e8e:	210a      	movs	r1, #10
    3e90:	6818      	ldr	r0, [r3, #0]
    3e92:	f01e f822 	bl	21eda <gpio_pin_set>
    if (err != 0)
    3e96:	b118      	cbz	r0, 3ea0 <setOutputLcdRst+0x18>
    {
        printk("Error in gpio reset");
    3e98:	4803      	ldr	r0, [pc, #12]	; (3ea8 <setOutputLcdRst+0x20>)
    3e9a:	f01e fa1d 	bl	222d8 <printk>
        return 1;
    3e9e:	2001      	movs	r0, #1
    }
    return 0;
}
    3ea0:	bd08      	pop	{r3, pc}
    3ea2:	bf00      	nop
    3ea4:	2000d928 	.word	0x2000d928
    3ea8:	0002bdb6 	.word	0x0002bdb6

00003eac <setOutputVciEn>:

bool setOutputVciEn(bool val)
{
    3eac:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3eae:	4b06      	ldr	r3, [pc, #24]	; (3ec8 <setOutputVciEn+0x1c>)
{
    3eb0:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3eb2:	2106      	movs	r1, #6
    3eb4:	6818      	ldr	r0, [r3, #0]
    3eb6:	f01e f810 	bl	21eda <gpio_pin_set>
    if (err != 0)
    3eba:	b118      	cbz	r0, 3ec4 <setOutputVciEn+0x18>
    {
        printk("Error in gpio vcien");
    3ebc:	4803      	ldr	r0, [pc, #12]	; (3ecc <setOutputVciEn+0x20>)
    3ebe:	f01e fa0b 	bl	222d8 <printk>
        return 1;
    3ec2:	2001      	movs	r0, #1
    }
    return 0;
}
    3ec4:	bd08      	pop	{r3, pc}
    3ec6:	bf00      	nop
    3ec8:	2000d92c 	.word	0x2000d92c
    3ecc:	0002bdca 	.word	0x0002bdca

00003ed0 <setOutputDcx>:

bool setOutputDcx(bool val)
{
    3ed0:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3ed2:	4b06      	ldr	r3, [pc, #24]	; (3eec <setOutputDcx+0x1c>)
{
    3ed4:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3ed6:	2105      	movs	r1, #5
    3ed8:	6818      	ldr	r0, [r3, #0]
    3eda:	f01d fffe 	bl	21eda <gpio_pin_set>
    if (err != 0)
    3ede:	b118      	cbz	r0, 3ee8 <setOutputDcx+0x18>
    {
        printk("Error in gpio dcx");
    3ee0:	4803      	ldr	r0, [pc, #12]	; (3ef0 <setOutputDcx+0x20>)
    3ee2:	f01e f9f9 	bl	222d8 <printk>
        return 1;
    3ee6:	2001      	movs	r0, #1
    }
    return 0;
}
    3ee8:	bd08      	pop	{r3, pc}
    3eea:	bf00      	nop
    3eec:	2000d924 	.word	0x2000d924
    3ef0:	0002bdde 	.word	0x0002bdde

00003ef4 <write_bytes>:
    return spi_write(spi, spi_cfg, &tx);
}

int write_bytes(const struct device *spi, struct spi_config *spi_cfg,
                       uint16_t addr, uint8_t *data, uint32_t num_bytes)
{
    3ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct spi_buf bufs[] =
    3ef6:	9300      	str	r3, [sp, #0]
    3ef8:	9b06      	ldr	r3, [sp, #24]
    3efa:	9301      	str	r3, [sp, #4]
    struct spi_buf_set tx =
    3efc:	2301      	movs	r3, #1
    3efe:	f8cd d008 	str.w	sp, [sp, #8]
    3f02:	9303      	str	r3, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    3f04:	6883      	ldr	r3, [r0, #8]
    3f06:	aa02      	add	r2, sp, #8
    3f08:	681c      	ldr	r4, [r3, #0]
    3f0a:	2300      	movs	r3, #0
    3f0c:	47a0      	blx	r4
    int err;
    err = spi_acess(spi, spi_cfg, 0, addr, data, num_bytes);
    if (err)
    3f0e:	b120      	cbz	r0, 3f1a <write_bytes+0x26>
    {
        printk("Error during SPI write\n");
    3f10:	4803      	ldr	r0, [pc, #12]	; (3f20 <write_bytes+0x2c>)
    3f12:	f01e f9e1 	bl	222d8 <printk>
        return -EIO;
    3f16:	f06f 0004 	mvn.w	r0, #4
    }
    return 0;
}
    3f1a:	b004      	add	sp, #16
    3f1c:	bd10      	pop	{r4, pc}
    3f1e:	bf00      	nop
    3f20:	0002bdf0 	.word	0x0002bdf0

00003f24 <device_get_binding.constprop.0>:
    3f24:	4801      	ldr	r0, [pc, #4]	; (3f2c <device_get_binding.constprop.0+0x8>)
    3f26:	f01b bfe1 	b.w	1feec <z_impl_device_get_binding>
    3f2a:	bf00      	nop
    3f2c:	0002be08 	.word	0x0002be08

00003f30 <WriteComm>:
	0, 0, 0, 0
};
extern const int spi_freq;

void WriteComm(uint8_t data)
{
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3f34:	2400      	movs	r4, #0
    3f36:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    3f3a:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    3f3e:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3f40:	f7ff fff0 	bl	3f24 <device_get_binding.constprop.0>
	if (!spi) {
    3f44:	4605      	mov	r5, r0
    3f46:	b920      	cbnz	r0, 3f52 <WriteComm+0x22>
		printk("Could not find SPI driver\n");
    3f48:	4812      	ldr	r0, [pc, #72]	; (3f94 <WriteComm+0x64>)
    3f4a:	f01e f9c5 	bl	222d8 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    3f4e:	b008      	add	sp, #32
    3f50:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    3f52:	f44f 7380 	mov.w	r3, #256	; 0x100
    3f56:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    3f5a:	4b0f      	ldr	r3, [pc, #60]	; (3f98 <WriteComm+0x68>)
	setOutputcs(0);
    3f5c:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f62:	2601      	movs	r6, #1
	setOutputcs(0);
    3f64:	f7ff ff7e 	bl	3e64 <setOutputcs>
	setOutputDcx(0);
    3f68:	4620      	mov	r0, r4
    3f6a:	f7ff ffb1 	bl	3ed0 <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f6e:	a905      	add	r1, sp, #20
    3f70:	9600      	str	r6, [sp, #0]
    3f72:	f10d 030f 	add.w	r3, sp, #15
    3f76:	4622      	mov	r2, r4
    3f78:	4628      	mov	r0, r5
    3f7a:	f7ff ffbb 	bl	3ef4 <write_bytes>
	if (err) {
    3f7e:	4601      	mov	r1, r0
    3f80:	b118      	cbz	r0, 3f8a <WriteComm+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    3f82:	4806      	ldr	r0, [pc, #24]	; (3f9c <WriteComm+0x6c>)
    3f84:	f01e f9a8 	bl	222d8 <printk>
		return;
    3f88:	e7e1      	b.n	3f4e <WriteComm+0x1e>
	setOutputcs(1);
    3f8a:	4630      	mov	r0, r6
    3f8c:	f7ff ff6a 	bl	3e64 <setOutputcs>
    3f90:	e7dd      	b.n	3f4e <WriteComm+0x1e>
    3f92:	bf00      	nop
    3f94:	0002be0e 	.word	0x0002be0e
    3f98:	000285e4 	.word	0x000285e4
    3f9c:	0002be29 	.word	0x0002be29

00003fa0 <WriteData>:

void WriteData(uint8_t data)
{
    3fa0:	b570      	push	{r4, r5, r6, lr}
    3fa2:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3fa4:	2400      	movs	r4, #0
    3fa6:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    3faa:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    3fae:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3fb0:	f7ff ffb8 	bl	3f24 <device_get_binding.constprop.0>
	if (!spi) {
    3fb4:	4605      	mov	r5, r0
    3fb6:	b920      	cbnz	r0, 3fc2 <WriteData+0x22>
		printk("Could not find SPI driver\n");
    3fb8:	4812      	ldr	r0, [pc, #72]	; (4004 <WriteData+0x64>)
    3fba:	f01e f98d 	bl	222d8 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    3fbe:	b008      	add	sp, #32
    3fc0:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    3fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
    3fc6:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    3fca:	4b0f      	ldr	r3, [pc, #60]	; (4008 <WriteData+0x68>)
	setOutputcs(0);
    3fcc:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3fd2:	2601      	movs	r6, #1
	setOutputcs(0);
    3fd4:	f7ff ff46 	bl	3e64 <setOutputcs>
	setOutputDcx(1);
    3fd8:	2001      	movs	r0, #1
    3fda:	f7ff ff79 	bl	3ed0 <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3fde:	a905      	add	r1, sp, #20
    3fe0:	9600      	str	r6, [sp, #0]
    3fe2:	f10d 030f 	add.w	r3, sp, #15
    3fe6:	4622      	mov	r2, r4
    3fe8:	4628      	mov	r0, r5
    3fea:	f7ff ff83 	bl	3ef4 <write_bytes>
	if (err) {
    3fee:	4601      	mov	r1, r0
    3ff0:	b118      	cbz	r0, 3ffa <WriteData+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    3ff2:	4806      	ldr	r0, [pc, #24]	; (400c <WriteData+0x6c>)
    3ff4:	f01e f970 	bl	222d8 <printk>
		return;
    3ff8:	e7e1      	b.n	3fbe <WriteData+0x1e>
	setOutputcs(1);
    3ffa:	4630      	mov	r0, r6
    3ffc:	f7ff ff32 	bl	3e64 <setOutputcs>
    4000:	e7dd      	b.n	3fbe <WriteData+0x1e>
    4002:	bf00      	nop
    4004:	0002be0e 	.word	0x0002be0e
    4008:	000285e4 	.word	0x000285e4
    400c:	0002be29 	.word	0x0002be29

00004010 <DispLogo>:
	}
	setOutputcs(1);
}

void DispLogo(unsigned int color)
{
    4010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4014:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    4016:	2500      	movs	r5, #0
    4018:	e9cd 5507 	strd	r5, r5, [sp, #28]
{
    401c:	9003      	str	r0, [sp, #12]
	struct spi_config spi_cfg = { 0 };
    401e:	9509      	str	r5, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    4020:	f7ff ff80 	bl	3f24 <device_get_binding.constprop.0>
	if (!spi) {
    4024:	4606      	mov	r6, r0
    4026:	b928      	cbnz	r0, 4034 <DispLogo+0x24>
		printk("Could not find SPI driver\n");
    4028:	482b      	ldr	r0, [pc, #172]	; (40d8 <DispLogo+0xc8>)
    402a:	f01e f955 	bl	222d8 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    402e:	b00b      	add	sp, #44	; 0x2c
    4030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    4034:	f44f 7380 	mov.w	r3, #256	; 0x100
    4038:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    403c:	4b27      	ldr	r3, [pc, #156]	; (40dc <DispLogo+0xcc>)
			if (logo[j][i]) {
    403e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40e0 <DispLogo+0xd0>
	spi_cfg.frequency = spi_freq;
    4042:	681b      	ldr	r3, [r3, #0]
    4044:	9307      	str	r3, [sp, #28]
	BlockWrite(xoffset, xoffset + logowidth - 1, yoffset,
    4046:	22c8      	movs	r2, #200	; 0xc8
    4048:	f240 1317 	movw	r3, #279	; 0x117
    404c:	f240 115d 	movw	r1, #349	; 0x15d
    4050:	2032      	movs	r0, #50	; 0x32
    4052:	f01d ff7d 	bl	21f50 <BlockWrite>
	setOutputcs(0);
    4056:	4628      	mov	r0, r5
    4058:	f7ff ff04 	bl	3e64 <setOutputcs>
	setOutputDcx(1);
    405c:	2001      	movs	r0, #1
    405e:	f7ff ff37 	bl	3ed0 <setOutputDcx>
			if (logo[j][i]) {
    4062:	f04f 0a50 	mov.w	sl, #80	; 0x50
		for (j = 0; j < logowidth; j++) {
    4066:	2700      	movs	r7, #0
			if (logo[j][i]) {
    4068:	eb05 0809 	add.w	r8, r5, r9
    406c:	fb0a f307 	mul.w	r3, sl, r7
    4070:	f818 4003 	ldrb.w	r4, [r8, r3]
    4074:	b1ec      	cbz	r4, 40b2 <DispLogo+0xa2>
				data = color >> 8;
    4076:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4078:	2401      	movs	r4, #1
				data = color >> 8;
    407a:	0a1b      	lsrs	r3, r3, #8
    407c:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4080:	2200      	movs	r2, #0
    4082:	ab06      	add	r3, sp, #24
    4084:	9400      	str	r4, [sp, #0]
    4086:	a907      	add	r1, sp, #28
    4088:	4630      	mov	r0, r6
    408a:	f7ff ff33 	bl	3ef4 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    408e:	9400      	str	r4, [sp, #0]
    4090:	ab03      	add	r3, sp, #12
    4092:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    4094:	a907      	add	r1, sp, #28
    4096:	4630      	mov	r0, r6
		for (j = 0; j < logowidth; j++) {
    4098:	3701      	adds	r7, #1
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    409a:	f7ff ff2b 	bl	3ef4 <write_bytes>
		for (j = 0; j < logowidth; j++) {
    409e:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
    40a2:	d1e3      	bne.n	406c <DispLogo+0x5c>
	for (i = 0; i < logoheight; i++) {
    40a4:	3501      	adds	r5, #1
    40a6:	2d50      	cmp	r5, #80	; 0x50
    40a8:	d1dd      	bne.n	4066 <DispLogo+0x56>
	setOutputcs(1);
    40aa:	2001      	movs	r0, #1
    40ac:	f7ff feda 	bl	3e64 <setOutputcs>
    40b0:	e7bd      	b.n	402e <DispLogo+0x1e>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    40b2:	f04f 0b01 	mov.w	fp, #1
    40b6:	f10d 0317 	add.w	r3, sp, #23
    40ba:	4622      	mov	r2, r4
    40bc:	f8cd b000 	str.w	fp, [sp]
    40c0:	a907      	add	r1, sp, #28
    40c2:	4630      	mov	r0, r6
				unsigned int bg_clr = BLACK;
    40c4:	9406      	str	r4, [sp, #24]
				data = bg_clr >> 8;
    40c6:	f88d 4017 	strb.w	r4, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    40ca:	f7ff ff13 	bl	3ef4 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    40ce:	f8cd b000 	str.w	fp, [sp]
    40d2:	ab06      	add	r3, sp, #24
    40d4:	4622      	mov	r2, r4
    40d6:	e7dd      	b.n	4094 <DispLogo+0x84>
    40d8:	0002be0e 	.word	0x0002be0e
    40dc:	000285e4 	.word	0x000285e4
    40e0:	2000235c 	.word	0x2000235c

000040e4 <DispIcon>:

void DispIcon(bool pic[50][50], unsigned int color, int xstart, int ystart,
	      int height, int width)
{
    40e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40e8:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    40ea:	2400      	movs	r4, #0
    40ec:	e9cd 4407 	strd	r4, r4, [sp, #28]
{
    40f0:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    40f4:	9103      	str	r1, [sp, #12]
    40f6:	4607      	mov	r7, r0
    40f8:	4616      	mov	r6, r2
    40fa:	4699      	mov	r9, r3
	struct spi_config spi_cfg = { 0 };
    40fc:	9409      	str	r4, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    40fe:	f7ff ff11 	bl	3f24 <device_get_binding.constprop.0>
	if (!spi) {
    4102:	4605      	mov	r5, r0
    4104:	b928      	cbnz	r0, 4112 <DispIcon+0x2e>
		printk("Could not find SPI driver\n");
    4106:	482e      	ldr	r0, [pc, #184]	; (41c0 <DispIcon+0xdc>)
    4108:	f01e f8e6 	bl	222d8 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    410c:	b00b      	add	sp, #44	; 0x2c
    410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    4112:	f44f 7380 	mov.w	r3, #256	; 0x100
    4116:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    411a:	4b2a      	ldr	r3, [pc, #168]	; (41c4 <DispIcon+0xe0>)
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	9307      	str	r3, [sp, #28]
	BlockWrite(xstart, xstart + width - 1, ystart, ystart + height - 1);
    4120:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4122:	f108 31ff 	add.w	r1, r8, #4294967295
    4126:	3b01      	subs	r3, #1
    4128:	444b      	add	r3, r9
    412a:	464a      	mov	r2, r9
    412c:	4431      	add	r1, r6
    412e:	4630      	mov	r0, r6
    4130:	f01d ff0e 	bl	21f50 <BlockWrite>
	setOutputcs(0);
    4134:	4620      	mov	r0, r4
    4136:	f7ff fe95 	bl	3e64 <setOutputcs>
	setOutputDcx(1);
    413a:	2001      	movs	r0, #1
    413c:	f7ff fec8 	bl	3ed0 <setOutputDcx>
			if (pic[j][i]) {
    4140:	f04f 0a32 	mov.w	sl, #50	; 0x32
	for (i = 0; i < height; i++) {
    4144:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4146:	42a3      	cmp	r3, r4
    4148:	d836      	bhi.n	41b8 <DispIcon+0xd4>
	setOutputcs(1);
    414a:	2001      	movs	r0, #1
    414c:	f7ff fe8a 	bl	3e64 <setOutputcs>
    4150:	e7dc      	b.n	410c <DispIcon+0x28>
			if (pic[j][i]) {
    4152:	fb0a f306 	mul.w	r3, sl, r6
    4156:	f81b 2003 	ldrb.w	r2, [fp, r3]
    415a:	b1d2      	cbz	r2, 4192 <DispIcon+0xae>
				data = color >> 8;
    415c:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    415e:	f04f 0901 	mov.w	r9, #1
				data = color >> 8;
    4162:	0a1b      	lsrs	r3, r3, #8
    4164:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4168:	2200      	movs	r2, #0
    416a:	ab06      	add	r3, sp, #24
    416c:	f8cd 9000 	str.w	r9, [sp]
    4170:	a907      	add	r1, sp, #28
    4172:	4628      	mov	r0, r5
    4174:	f7ff febe 	bl	3ef4 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4178:	f8cd 9000 	str.w	r9, [sp]
    417c:	ab03      	add	r3, sp, #12
    417e:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    4180:	a907      	add	r1, sp, #28
    4182:	4628      	mov	r0, r5
    4184:	f7ff feb6 	bl	3ef4 <write_bytes>
		for (j = 0; j < width; j++) {
    4188:	3601      	adds	r6, #1
    418a:	45b0      	cmp	r8, r6
    418c:	d8e1      	bhi.n	4152 <DispIcon+0x6e>
	for (i = 0; i < height; i++) {
    418e:	3401      	adds	r4, #1
    4190:	e7d8      	b.n	4144 <DispIcon+0x60>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4192:	f04f 0901 	mov.w	r9, #1
    4196:	f10d 0317 	add.w	r3, sp, #23
    419a:	f8cd 9000 	str.w	r9, [sp]
    419e:	a907      	add	r1, sp, #28
    41a0:	4628      	mov	r0, r5
				unsigned int bg_clr = BLACK;
    41a2:	9206      	str	r2, [sp, #24]
				data = bg_clr >> 8;
    41a4:	f88d 2017 	strb.w	r2, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    41a8:	9202      	str	r2, [sp, #8]
    41aa:	f7ff fea3 	bl	3ef4 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    41ae:	9a02      	ldr	r2, [sp, #8]
    41b0:	f8cd 9000 	str.w	r9, [sp]
    41b4:	ab06      	add	r3, sp, #24
    41b6:	e7e3      	b.n	4180 <DispIcon+0x9c>
		for (j = 0; j < width; j++) {
    41b8:	2600      	movs	r6, #0
			if (pic[j][i]) {
    41ba:	eb07 0b04 	add.w	fp, r7, r4
    41be:	e7e4      	b.n	418a <DispIcon+0xa6>
    41c0:	0002be0e 	.word	0x0002be0e
    41c4:	000285e4 	.word	0x000285e4

000041c8 <LCD_Init>:
void resetDisplay()
{
	WriteComm(0x01);
}
void LCD_Init(void)
{
    41c8:	b508      	push	{r3, lr}
	init_lcd_output();
    41ca:	f7ff fde7 	bl	3d9c <init_lcd_output>
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
	int err;
	k_msleep(1);
    41ce:	2001      	movs	r0, #1
    41d0:	f01d fea4 	bl	21f1c <k_msleep.isra.0>
	printk("Initialising DISPLAY  : ");
    41d4:	4815      	ldr	r0, [pc, #84]	; (422c <LCD_Init+0x64>)
    41d6:	f01e f87f 	bl	222d8 <printk>
	setOutputVciEn(1);
    41da:	2001      	movs	r0, #1
    41dc:	f7ff fe66 	bl	3eac <setOutputVciEn>
	k_msleep(100);
    41e0:	2064      	movs	r0, #100	; 0x64
    41e2:	f01d fe9b 	bl	21f1c <k_msleep.isra.0>
	setOutputcs(1);
    41e6:	2001      	movs	r0, #1
    41e8:	f7ff fe3c 	bl	3e64 <setOutputcs>
	setOutputLcdRst(1);
    41ec:	2001      	movs	r0, #1
    41ee:	f7ff fe4b 	bl	3e88 <setOutputLcdRst>
	k_msleep(80);
    41f2:	2050      	movs	r0, #80	; 0x50
    41f4:	f01d fe92 	bl	21f1c <k_msleep.isra.0>
	setOutputLcdRst(0);
    41f8:	2000      	movs	r0, #0
    41fa:	f7ff fe45 	bl	3e88 <setOutputLcdRst>
	k_msleep(80);
    41fe:	2050      	movs	r0, #80	; 0x50
    4200:	f01d fe8c 	bl	21f1c <k_msleep.isra.0>
	setOutputLcdRst(1);
    4204:	2001      	movs	r0, #1
    4206:	f7ff fe3f 	bl	3e88 <setOutputLcdRst>
	k_msleep(480);
    420a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    420e:	f01d fe85 	bl	21f1c <k_msleep.isra.0>
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    4212:	f7ff fe87 	bl	3f24 <device_get_binding.constprop.0>
	if (!spi) {
    4216:	b920      	cbnz	r0, 4222 <LCD_Init+0x5a>
		printk("Could not find SPI driver\n");
    4218:	4805      	ldr	r0, [pc, #20]	; (4230 <LCD_Init+0x68>)
	//spi_cfg.operation = SPI_WORD_SET(8);
	spi_cfg.operation = 256;
	spi_cfg.frequency = spi_freq;
	setDisplay();
	printk("OK\n");
}
    421a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("OK\n");
    421e:	f01e b85b 	b.w	222d8 <printk>
	setDisplay();
    4222:	f01d fec4 	bl	21fae <setDisplay>
	printk("OK\n");
    4226:	4803      	ldr	r0, [pc, #12]	; (4234 <LCD_Init+0x6c>)
    4228:	e7f7      	b.n	421a <LCD_Init+0x52>
    422a:	bf00      	nop
    422c:	0002be51 	.word	0x0002be51
    4230:	0002be0e 	.word	0x0002be0e
    4234:	0002bc5f 	.word	0x0002bc5f

00004238 <WriteOneDot>:
		}
	}
}

void WriteOneDot(unsigned int color)
{
    4238:	b570      	push	{r4, r5, r6, lr}
    423a:	b088      	sub	sp, #32
	setOutputcs(0);
	setOutputDcx(1);
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    423c:	2400      	movs	r4, #0
{
    423e:	9003      	str	r0, [sp, #12]
	setOutputcs(0);
    4240:	2000      	movs	r0, #0
    4242:	f7ff fe0f 	bl	3e64 <setOutputcs>
	setOutputDcx(1);
    4246:	2001      	movs	r0, #1
    4248:	f7ff fe42 	bl	3ed0 <setOutputDcx>
	struct spi_config spi_cfg = { 0 };
    424c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    4250:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    4252:	f7ff fe67 	bl	3f24 <device_get_binding.constprop.0>
	if (!spi) {
    4256:	4605      	mov	r5, r0
    4258:	b920      	cbnz	r0, 4264 <WriteOneDot+0x2c>
		printk("Could not find SPI driver\n");
    425a:	4811      	ldr	r0, [pc, #68]	; (42a0 <WriteOneDot+0x68>)
    425c:	f01e f83c 	bl	222d8 <printk>
	u8_t data;
	data = color >> 8;
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
	setOutputcs(1);
}
    4260:	b008      	add	sp, #32
    4262:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    4264:	f44f 7380 	mov.w	r3, #256	; 0x100
    4268:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    426c:	4b0d      	ldr	r3, [pc, #52]	; (42a4 <WriteOneDot+0x6c>)
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	9305      	str	r3, [sp, #20]
	data = color >> 8;
    4272:	9b03      	ldr	r3, [sp, #12]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4274:	2601      	movs	r6, #1
	data = color >> 8;
    4276:	0a1b      	lsrs	r3, r3, #8
    4278:	f88d 3013 	strb.w	r3, [sp, #19]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    427c:	4622      	mov	r2, r4
    427e:	f10d 0313 	add.w	r3, sp, #19
    4282:	a905      	add	r1, sp, #20
    4284:	9600      	str	r6, [sp, #0]
    4286:	f7ff fe35 	bl	3ef4 <write_bytes>
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    428a:	9600      	str	r6, [sp, #0]
    428c:	ab03      	add	r3, sp, #12
    428e:	4622      	mov	r2, r4
    4290:	a905      	add	r1, sp, #20
    4292:	4628      	mov	r0, r5
    4294:	f7ff fe2e 	bl	3ef4 <write_bytes>
	setOutputcs(1);
    4298:	4630      	mov	r0, r6
    429a:	f7ff fde3 	bl	3e64 <setOutputcs>
    429e:	e7df      	b.n	4260 <WriteOneDot+0x28>
    42a0:	0002be0e 	.word	0x0002be0e
    42a4:	000285e4 	.word	0x000285e4

000042a8 <DispOneChar>:
{
    42a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42ac:	4604      	mov	r4, r0
    42ae:	461e      	mov	r6, r3
    42b0:	4608      	mov	r0, r1
	BlockWrite(Xstart, Xstart + (FONT_W - 1), Ystart,
    42b2:	f102 0314 	add.w	r3, r2, #20
    42b6:	310f      	adds	r1, #15
    42b8:	f01d fe4a 	bl	21f50 <BlockWrite>
	if (index > 95) //95:ASCII CHAR NUM
    42bc:	4620      	mov	r0, r4
    42be:	2c5f      	cmp	r4, #95	; 0x5f
	p = p + index;
    42c0:	4c0c      	ldr	r4, [pc, #48]	; (42f4 <DispOneChar+0x4c>)
    42c2:	f04f 032a 	mov.w	r3, #42	; 0x2a
    42c6:	bf28      	it	cs
    42c8:	205f      	movcs	r0, #95	; 0x5f
    42ca:	fb03 4400 	mla	r4, r3, r0, r4
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    42ce:	18e7      	adds	r7, r4, r3
		dat = *p++;
    42d0:	f814 8b01 	ldrb.w	r8, [r4], #1
    42d4:	2500      	movs	r5, #0
			if ((dat << j) & 0x80) {
    42d6:	fa08 f305 	lsl.w	r3, r8, r5
    42da:	061b      	lsls	r3, r3, #24
				WriteOneDot(BackColor);
    42dc:	bf54      	ite	pl
    42de:	9806      	ldrpl	r0, [sp, #24]
				WriteOneDot(TextColor);
    42e0:	4630      	movmi	r0, r6
		for (j = 0; j < 8; j++) {
    42e2:	3501      	adds	r5, #1
				WriteOneDot(BackColor);
    42e4:	f7ff ffa8 	bl	4238 <WriteOneDot>
		for (j = 0; j < 8; j++) {
    42e8:	2d08      	cmp	r5, #8
    42ea:	d1f4      	bne.n	42d6 <DispOneChar+0x2e>
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    42ec:	42a7      	cmp	r7, r4
    42ee:	d1ef      	bne.n	42d0 <DispOneChar+0x28>
}
    42f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42f4:	200009d8 	.word	0x200009d8

000042f8 <init_output>:

struct device *globalBuzzer;
struct device *globalMotor;

s16_t init_output()
{
    42f8:	b570      	push	{r4, r5, r6, lr}
    42fa:	4817      	ldr	r0, [pc, #92]	; (4358 <init_output+0x60>)
    42fc:	f01b fdf6 	bl	1feec <z_impl_device_get_binding>
    struct device *buzzer;
    int ret;
    buzzer = device_get_binding(BUZZER_GPIO_LABEL);
    if (buzzer == NULL)
    4300:	4606      	mov	r6, r0
    4302:	b930      	cbnz	r0, 4312 <init_output+0x1a>
    {
        printk("Didn't find device %s\n", BUZZER_GPIO_LABEL);
    4304:	4815      	ldr	r0, [pc, #84]	; (435c <init_output+0x64>)
    4306:	4914      	ldr	r1, [pc, #80]	; (4358 <init_output+0x60>)
    4308:	f01d ffe6 	bl	222d8 <printk>
        return -1;
    430c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    printk("INITIALISING OUTPUTS : OK\n");
    globalBuzzer = buzzer;
    globalMotor = motor;
    return 0;
}
    4310:	bd70      	pop	{r4, r5, r6, pc}
    ret = gpio_pin_configure(buzzer, BUZZER_GPIO_PIN, BUZZER_GPIO_FLAGS);
    4312:	2104      	movs	r1, #4
    4314:	f01d ff0d 	bl	22132 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    4318:	4604      	mov	r4, r0
    431a:	b138      	cbz	r0, 432c <init_output+0x34>
        printk("Error %d: failed to configure device %s pin %d\n",
    431c:	2304      	movs	r3, #4
        printk("Error %d: failed to configure device %s pin %d\n",
    431e:	4810      	ldr	r0, [pc, #64]	; (4360 <init_output+0x68>)
    4320:	4a0d      	ldr	r2, [pc, #52]	; (4358 <init_output+0x60>)
    4322:	4621      	mov	r1, r4
    4324:	f01d ffd8 	bl	222d8 <printk>
        return ret;
    4328:	b220      	sxth	r0, r4
    432a:	e7f1      	b.n	4310 <init_output+0x18>
    432c:	480a      	ldr	r0, [pc, #40]	; (4358 <init_output+0x60>)
    432e:	f01b fddd 	bl	1feec <z_impl_device_get_binding>
    if (motor == NULL)
    4332:	4605      	mov	r5, r0
    4334:	2800      	cmp	r0, #0
    4336:	d0e5      	beq.n	4304 <init_output+0xc>
    ret = gpio_pin_configure(motor, MOTOR_GPIO_PIN, MOTOR_GPIO_FLAGS);
    4338:	2103      	movs	r1, #3
    433a:	f01d fefa 	bl	22132 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    433e:	4604      	mov	r4, r0
    4340:	b108      	cbz	r0, 4346 <init_output+0x4e>
        printk("Error %d: failed to configure device %s pin %d\n",
    4342:	2303      	movs	r3, #3
    4344:	e7eb      	b.n	431e <init_output+0x26>
    printk("INITIALISING OUTPUTS : OK\n");
    4346:	4807      	ldr	r0, [pc, #28]	; (4364 <init_output+0x6c>)
    4348:	f01d ffc6 	bl	222d8 <printk>
    globalBuzzer = buzzer;
    434c:	4b06      	ldr	r3, [pc, #24]	; (4368 <init_output+0x70>)
    434e:	601e      	str	r6, [r3, #0]
    globalMotor = motor;
    4350:	4b06      	ldr	r3, [pc, #24]	; (436c <init_output+0x74>)
    return 0;
    4352:	4620      	mov	r0, r4
    globalMotor = motor;
    4354:	601d      	str	r5, [r3, #0]
    return 0;
    4356:	e7db      	b.n	4310 <init_output+0x18>
    4358:	0002bb34 	.word	0x0002bb34
    435c:	0002bd43 	.word	0x0002bd43
    4360:	0002bd5a 	.word	0x0002bd5a
    4364:	0002bd8a 	.word	0x0002bd8a
    4368:	2000d934 	.word	0x2000d934
    436c:	2000d938 	.word	0x2000d938

00004370 <toggle_buzzer>:

bool toggle_buzzer(bool val)
{
    4370:	b538      	push	{r3, r4, r5, lr}
    if (val = 1)
    {
        for (int i = 0; i < 1000; i++)
        {
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    4372:	4d0b      	ldr	r5, [pc, #44]	; (43a0 <toggle_buzzer+0x30>)
{
    4374:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    4378:	6828      	ldr	r0, [r5, #0]
    437a:	2201      	movs	r2, #1
    437c:	2104      	movs	r1, #4
    437e:	f01d fee8 	bl	22152 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    4382:	20fa      	movs	r0, #250	; 0xfa
    4384:	f023 fb21 	bl	279ca <z_impl_k_busy_wait>
            k_busy_wait(250);
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 0);
    4388:	6828      	ldr	r0, [r5, #0]
    438a:	2200      	movs	r2, #0
    438c:	2104      	movs	r1, #4
    438e:	f01d fee0 	bl	22152 <gpio_pin_set.isra.0>
    4392:	20fa      	movs	r0, #250	; 0xfa
    4394:	f023 fb19 	bl	279ca <z_impl_k_busy_wait>
        for (int i = 0; i < 1000; i++)
    4398:	3c01      	subs	r4, #1
    439a:	d1ed      	bne.n	4378 <toggle_buzzer+0x8>
        }
    }
    else
        gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    return val;
}
    439c:	2001      	movs	r0, #1
    439e:	bd38      	pop	{r3, r4, r5, pc}
    43a0:	2000d934 	.word	0x2000d934

000043a4 <toggle_motor>:
bool toggle_motor(bool val)
{
    43a4:	b510      	push	{r4, lr}
    if (val)
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    43a6:	4c09      	ldr	r4, [pc, #36]	; (43cc <toggle_motor+0x28>)
{
    43a8:	4603      	mov	r3, r0
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    43aa:	2201      	movs	r2, #1
    43ac:	6820      	ldr	r0, [r4, #0]
    43ae:	2103      	movs	r1, #3
    if (val)
    43b0:	b14b      	cbz	r3, 43c6 <toggle_motor+0x22>
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    43b2:	f01d fece 	bl	22152 <gpio_pin_set.isra.0>
	return z_impl_k_sleep(timeout);
    43b6:	2100      	movs	r1, #0
    43b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    43bc:	f01c fc0c 	bl	20bd8 <z_impl_k_sleep>
        k_msleep(250);
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 0);
    43c0:	6820      	ldr	r0, [r4, #0]
    43c2:	2200      	movs	r2, #0
    43c4:	2103      	movs	r1, #3
    }
    else
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    43c6:	f01d fec4 	bl	22152 <gpio_pin_set.isra.0>
    }
    43ca:	bd10      	pop	{r4, pc}
    43cc:	2000d938 	.word	0x2000d938

000043d0 <htmc_ccc_cfg_changed>:
static struct bt_gatt_indicate_params ind_params;

static void htmc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 uint16_t value)
{
	simulate_htm = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    43d0:	1e8b      	subs	r3, r1, #2
    43d2:	4259      	negs	r1, r3
    43d4:	4159      	adcs	r1, r3
    43d6:	4b01      	ldr	r3, [pc, #4]	; (43dc <htmc_ccc_cfg_changed+0xc>)
    43d8:	7019      	strb	r1, [r3, #0]
}
    43da:	4770      	bx	lr
    43dc:	2000f59c 	.word	0x2000f59c

000043e0 <indicate_destroy>:
{
	printk("Indication %s\n", err != 0U ? "fail" : "success");
}

static void indicate_destroy(struct bt_gatt_indicate_params *params)
{
    43e0:	b508      	push	{r3, lr}
	printk("Indication complete\n");
    43e2:	4803      	ldr	r0, [pc, #12]	; (43f0 <indicate_destroy+0x10>)
    43e4:	f01d ff78 	bl	222d8 <printk>
	indicating = 0U;
    43e8:	4b02      	ldr	r3, [pc, #8]	; (43f4 <indicate_destroy+0x14>)
    43ea:	2200      	movs	r2, #0
    43ec:	701a      	strb	r2, [r3, #0]
}
    43ee:	bd08      	pop	{r3, pc}
    43f0:	0002be6a 	.word	0x0002be6a
    43f4:	2000f59b 	.word	0x2000f59b

000043f8 <indicate_cb>:
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    43f8:	4903      	ldr	r1, [pc, #12]	; (4408 <indicate_cb+0x10>)
    43fa:	4b04      	ldr	r3, [pc, #16]	; (440c <indicate_cb+0x14>)
    43fc:	4804      	ldr	r0, [pc, #16]	; (4410 <indicate_cb+0x18>)
    43fe:	2a00      	cmp	r2, #0
    4400:	bf08      	it	eq
    4402:	4619      	moveq	r1, r3
    4404:	f01d bf68 	b.w	222d8 <printk>
    4408:	0002be7f 	.word	0x0002be7f
    440c:	0002be84 	.word	0x0002be84
    4410:	0002be8c 	.word	0x0002be8c

00004414 <hts_init>:
		    BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
	/* more optional Characteristics */
);

void hts_init(void)
{
    4414:	b508      	push	{r3, lr}
    4416:	4808      	ldr	r0, [pc, #32]	; (4438 <hts_init+0x24>)
    4418:	f01b fd68 	bl	1feec <z_impl_device_get_binding>
	temp_dev = device_get_binding("TEMP_0");

	if (!temp_dev) {
    441c:	4601      	mov	r1, r0
    441e:	b920      	cbnz	r0, 442a <hts_init+0x16>
		return;
	}

	printk("temp device is %p, name is %s\n", temp_dev,
	       temp_dev->name);
}
    4420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("error: no temp device\n");
    4424:	4805      	ldr	r0, [pc, #20]	; (443c <hts_init+0x28>)
    4426:	f01d bf57 	b.w	222d8 <printk>
	printk("temp device is %p, name is %s\n", temp_dev,
    442a:	6802      	ldr	r2, [r0, #0]
    442c:	4804      	ldr	r0, [pc, #16]	; (4440 <hts_init+0x2c>)
}
    442e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("temp device is %p, name is %s\n", temp_dev,
    4432:	f01d bf51 	b.w	222d8 <printk>
    4436:	bf00      	nop
    4438:	0002be9b 	.word	0x0002be9b
    443c:	0002bea2 	.word	0x0002bea2
    4440:	0002beb9 	.word	0x0002beb9

00004444 <hts_indicate>:

void hts_indicate(double temp)
{
    4444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Temperature measurements simulation */
	struct sensor_value temp_value;

	if (simulate_htm) {
    4446:	4b18      	ldr	r3, [pc, #96]	; (44a8 <hts_indicate+0x64>)
    4448:	781b      	ldrb	r3, [r3, #0]
{
    444a:	4606      	mov	r6, r0
    444c:	460f      	mov	r7, r1
	if (simulate_htm) {
    444e:	b34b      	cbz	r3, 44a4 <hts_indicate+0x60>
		// static double temperature = 20U;
		uint32_t mantissa;
		uint8_t exponent;
		int r;

		if (indicating) {
    4450:	4d16      	ldr	r5, [pc, #88]	; (44ac <hts_indicate+0x68>)
    4452:	782c      	ldrb	r4, [r5, #0]
    4454:	bb34      	cbnz	r4, 44a4 <hts_indicate+0x60>
			return;
		}
		
		printf("temperature is %g C\n", temp);
    4456:	4602      	mov	r2, r0
    4458:	460b      	mov	r3, r1
    445a:	4815      	ldr	r0, [pc, #84]	; (44b0 <hts_indicate+0x6c>)
    445c:	f003 fdfc 	bl	8058 <printf>

		mantissa = (uint32_t)(temp * 100);
    4460:	4b14      	ldr	r3, [pc, #80]	; (44b4 <hts_indicate+0x70>)
    4462:	2200      	movs	r2, #0
    4464:	4630      	mov	r0, r6
    4466:	4639      	mov	r1, r7
    4468:	f7fc f806 	bl	478 <__aeabi_dmul>
    446c:	f7fc fa3e 	bl	8ec <__aeabi_d2uiz>
		exponent = (uint8_t)-2;

		htm[0] = 0; /* temperature in celcius */
    4470:	4b11      	ldr	r3, [pc, #68]	; (44b8 <hts_indicate+0x74>)
		sys_put_le24(mantissa, (uint8_t *)&htm[1]);
		htm[4] = exponent;

		ind_params.attr = &hts_svc.attrs[2];
    4472:	4912      	ldr	r1, [pc, #72]	; (44bc <hts_indicate+0x78>)
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4474:	7058      	strb	r0, [r3, #1]
	dst[1] = val >> 8;
    4476:	f3c0 2207 	ubfx	r2, r0, #8, #8
    447a:	709a      	strb	r2, [r3, #2]
		htm[4] = exponent;
    447c:	22fe      	movs	r2, #254	; 0xfe
    447e:	711a      	strb	r2, [r3, #4]
		ind_params.attr = &hts_svc.attrs[2];
    4480:	4a0f      	ldr	r2, [pc, #60]	; (44c0 <hts_indicate+0x7c>)
    4482:	604a      	str	r2, [r1, #4]
		ind_params.func = indicate_cb;
    4484:	4a0f      	ldr	r2, [pc, #60]	; (44c4 <hts_indicate+0x80>)
    4486:	608a      	str	r2, [r1, #8]
		ind_params.destroy = indicate_destroy;
    4488:	4a0f      	ldr	r2, [pc, #60]	; (44c8 <hts_indicate+0x84>)
		htm[0] = 0; /* temperature in celcius */
    448a:	701c      	strb	r4, [r3, #0]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    448c:	0c00      	lsrs	r0, r0, #16
    448e:	70d8      	strb	r0, [r3, #3]
		ind_params.data = &htm;
    4490:	e9c1 2303 	strd	r2, r3, [r1, #12]
		ind_params.len = sizeof(htm);

		if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    4494:	4620      	mov	r0, r4
		ind_params.len = sizeof(htm);
    4496:	2305      	movs	r3, #5
    4498:	828b      	strh	r3, [r1, #20]
		if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    449a:	f009 fe09 	bl	e0b0 <bt_gatt_indicate>
    449e:	b908      	cbnz	r0, 44a4 <hts_indicate+0x60>
			indicating = 1U;
    44a0:	2301      	movs	r3, #1
    44a2:	702b      	strb	r3, [r5, #0]
		}
	}
}
    44a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44a6:	bf00      	nop
    44a8:	2000f59c 	.word	0x2000f59c
    44ac:	2000f59b 	.word	0x2000f59b
    44b0:	0002bed8 	.word	0x0002bed8
    44b4:	40590000 	.word	0x40590000
    44b8:	2000f596 	.word	0x2000f596
    44bc:	2000d93c 	.word	0x2000d93c
    44c0:	00028610 	.word	0x00028610
    44c4:	000043f9 	.word	0x000043f9
    44c8:	000043e1 	.word	0x000043e1

000044cc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    44cc:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    44ce:	4c0a      	ldr	r4, [pc, #40]	; (44f8 <crc8_ccitt+0x2c>)
    44d0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    44d2:	4291      	cmp	r1, r2
    44d4:	d100      	bne.n	44d8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    44d6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    44d8:	f811 3b01 	ldrb.w	r3, [r1], #1
    44dc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    44de:	0903      	lsrs	r3, r0, #4
    44e0:	5ce3      	ldrb	r3, [r4, r3]
    44e2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    44e6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    44e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    44ec:	5ce0      	ldrb	r0, [r4, r3]
    44ee:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    44f2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    44f4:	e7ed      	b.n	44d2 <crc8_ccitt+0x6>
    44f6:	bf00      	nop
    44f8:	0002beed 	.word	0x0002beed

000044fc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    44fc:	680b      	ldr	r3, [r1, #0]
    44fe:	3301      	adds	r3, #1
    4500:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4502:	4b01      	ldr	r3, [pc, #4]	; (4508 <char_out+0xc>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	4718      	bx	r3
    4508:	200002c0 	.word	0x200002c0

0000450c <__printk_hook_install>:
	_char_out = fn;
    450c:	4b01      	ldr	r3, [pc, #4]	; (4514 <__printk_hook_install+0x8>)
    450e:	6018      	str	r0, [r3, #0]
}
    4510:	4770      	bx	lr
    4512:	bf00      	nop
    4514:	200002c0 	.word	0x200002c0

00004518 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4518:	b507      	push	{r0, r1, r2, lr}
    451a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    451c:	2100      	movs	r1, #0
{
    451e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4520:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4522:	4803      	ldr	r0, [pc, #12]	; (4530 <vprintk+0x18>)
    4524:	a901      	add	r1, sp, #4
    4526:	f000 f8f9 	bl	471c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    452a:	b003      	add	sp, #12
    452c:	f85d fb04 	ldr.w	pc, [sp], #4
    4530:	000044fd 	.word	0x000044fd

00004534 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4534:	b530      	push	{r4, r5, lr}
    4536:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4538:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    453c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    453e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4540:	a901      	add	r1, sp, #4
    4542:	4805      	ldr	r0, [pc, #20]	; (4558 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4544:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4546:	f000 f8e9 	bl	471c <cbvprintf>

	if (ctx.count < ctx.max) {
    454a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    454e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4550:	bfb8      	it	lt
    4552:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4554:	b005      	add	sp, #20
    4556:	bd30      	pop	{r4, r5, pc}
    4558:	000222b3 	.word	0x000222b3

0000455c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    455c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4560:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4564:	f019 0808 	ands.w	r8, r9, #8
{
    4568:	4604      	mov	r4, r0
    456a:	4693      	mov	fp, r2
	if (processing) {
    456c:	d00d      	beq.n	458a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    456e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4570:	bf0c      	ite	eq
    4572:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4576:	f049 0920 	orrne.w	r9, r9, #32
    457a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    457e:	f38b 8811 	msr	BASEPRI, fp
    4582:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    458a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    458e:	2902      	cmp	r1, #2
    4590:	d107      	bne.n	45a2 <process_event+0x46>
			evt = process_recheck(mgr);
    4592:	4620      	mov	r0, r4
    4594:	f01d feba 	bl	2230c <process_recheck>
		if (evt == EVT_NOP) {
    4598:	2800      	cmp	r0, #0
    459a:	d0f0      	beq.n	457e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    459c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    459e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    45a0:	d14e      	bne.n	4640 <process_event+0xe4>
			res = mgr->last_res;
    45a2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45a4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    45a6:	2f00      	cmp	r7, #0
    45a8:	da15      	bge.n	45d6 <process_event+0x7a>
		*clients = mgr->clients;
    45aa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    45ac:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    45b0:	e9c4 8800 	strd	r8, r8, [r4]
    45b4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    45b8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    45ba:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    45bc:	8b21      	ldrh	r1, [r4, #24]
    45be:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    45c2:	45ca      	cmp	sl, r9
    45c4:	d002      	beq.n	45cc <process_event+0x70>
		if (do_monitors
    45c6:	68a3      	ldr	r3, [r4, #8]
    45c8:	2b00      	cmp	r3, #0
    45ca:	d15a      	bne.n	4682 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    45cc:	b90d      	cbnz	r5, 45d2 <process_event+0x76>
		    || (transit != NULL)) {
    45ce:	2e00      	cmp	r6, #0
    45d0:	d071      	beq.n	46b6 <process_event+0x15a>
    45d2:	2300      	movs	r3, #0
    45d4:	e056      	b.n	4684 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45d6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    45da:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    45dc:	2a01      	cmp	r2, #1
    45de:	d81e      	bhi.n	461e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    45e0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    45e4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    45e6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    45e8:	b289      	uxth	r1, r1
    45ea:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    45ee:	d10a      	bne.n	4606 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    45f0:	b13d      	cbz	r5, 4602 <process_event+0xa6>
    45f2:	8b63      	ldrh	r3, [r4, #26]
    45f4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    45f6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    45f8:	3301      	adds	r3, #1
    45fa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    45fc:	2a00      	cmp	r2, #0
    45fe:	d1fa      	bne.n	45f6 <process_event+0x9a>
    4600:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4602:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4606:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4608:	4620      	mov	r0, r4
    460a:	f01d fe7f 	bl	2230c <process_recheck>
    460e:	4606      	mov	r6, r0
    4610:	2800      	cmp	r0, #0
    4612:	d0d3      	beq.n	45bc <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4614:	8b23      	ldrh	r3, [r4, #24]
    4616:	f043 0320 	orr.w	r3, r3, #32
    461a:	8323      	strh	r3, [r4, #24]
    461c:	e7cd      	b.n	45ba <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    461e:	2b04      	cmp	r3, #4
    4620:	d10c      	bne.n	463c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4622:	f021 0107 	bic.w	r1, r1, #7
    4626:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4628:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    462a:	4620      	mov	r0, r4
    462c:	f01d fe6e 	bl	2230c <process_recheck>
    4630:	4605      	mov	r5, r0
    4632:	2800      	cmp	r0, #0
    4634:	d0c1      	beq.n	45ba <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4636:	f041 0120 	orr.w	r1, r1, #32
    463a:	8321      	strh	r1, [r4, #24]
    463c:	2500      	movs	r5, #0
    463e:	e7bc      	b.n	45ba <process_event+0x5e>
		} else if (evt == EVT_START) {
    4640:	2803      	cmp	r0, #3
    4642:	d109      	bne.n	4658 <process_event+0xfc>
			transit = mgr->transitions->start;
    4644:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4646:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    464a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    464c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4650:	8323      	strh	r3, [r4, #24]
}
    4652:	2500      	movs	r5, #0
		res = 0;
    4654:	462f      	mov	r7, r5
    4656:	e7b1      	b.n	45bc <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4658:	2804      	cmp	r0, #4
    465a:	d106      	bne.n	466a <process_event+0x10e>
			transit = mgr->transitions->stop;
    465c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    465e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4662:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4664:	f043 0304 	orr.w	r3, r3, #4
    4668:	e7f2      	b.n	4650 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    466a:	2805      	cmp	r0, #5
    466c:	d106      	bne.n	467c <process_event+0x120>
			transit = mgr->transitions->reset;
    466e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4670:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4674:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4676:	f043 0305 	orr.w	r3, r3, #5
    467a:	e7e9      	b.n	4650 <process_event+0xf4>
    467c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    467e:	462e      	mov	r6, r5
    4680:	e7e8      	b.n	4654 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    4682:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4684:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4688:	8321      	strh	r1, [r4, #24]
    468a:	f38b 8811 	msr	BASEPRI, fp
    468e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4692:	b9fb      	cbnz	r3, 46d4 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    4694:	bb85      	cbnz	r5, 46f8 <process_event+0x19c>
			if (transit != NULL) {
    4696:	b116      	cbz	r6, 469e <process_event+0x142>
				transit(mgr, transition_complete);
    4698:	491f      	ldr	r1, [pc, #124]	; (4718 <process_event+0x1bc>)
    469a:	4620      	mov	r0, r4
    469c:	47b0      	blx	r6
	__asm__ volatile(
    469e:	f04f 0320 	mov.w	r3, #32
    46a2:	f3ef 8b11 	mrs	fp, BASEPRI
    46a6:	f383 8811 	msr	BASEPRI, r3
    46aa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    46ae:	8b23      	ldrh	r3, [r4, #24]
    46b0:	f023 0308 	bic.w	r3, r3, #8
    46b4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    46b6:	8b23      	ldrh	r3, [r4, #24]
    46b8:	06da      	lsls	r2, r3, #27
    46ba:	d525      	bpl.n	4708 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    46bc:	f023 0310 	bic.w	r3, r3, #16
    46c0:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    46c2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    46c4:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    46c8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    46cc:	2900      	cmp	r1, #0
    46ce:	f47f af5e 	bne.w	458e <process_event+0x32>
out:
    46d2:	e754      	b.n	457e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    46d4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    46d6:	2900      	cmp	r1, #0
    46d8:	d0dc      	beq.n	4694 <process_event+0x138>
	return node->next;
    46da:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    46de:	f8d1 b004 	ldr.w	fp, [r1, #4]
    46e2:	463b      	mov	r3, r7
    46e4:	4652      	mov	r2, sl
    46e6:	4620      	mov	r0, r4
    46e8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    46ea:	f1b9 0f00 	cmp.w	r9, #0
    46ee:	d0d1      	beq.n	4694 <process_event+0x138>
    46f0:	4649      	mov	r1, r9
    46f2:	f8d9 9000 	ldr.w	r9, [r9]
    46f6:	e7f2      	b.n	46de <process_event+0x182>
    46f8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    46fa:	463b      	mov	r3, r7
    46fc:	4652      	mov	r2, sl
    46fe:	4620      	mov	r0, r4
    4700:	682d      	ldr	r5, [r5, #0]
    4702:	f01d fe1f 	bl	22344 <notify_one>
    4706:	e7c5      	b.n	4694 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4708:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    470c:	bf1e      	ittt	ne
    470e:	f023 0320 	bicne.w	r3, r3, #32
    4712:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4714:	2102      	movne	r1, #2
    4716:	e7d5      	b.n	46c4 <process_event+0x168>
    4718:	00022371 	.word	0x00022371

0000471c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    471c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4720:	4681      	mov	r9, r0
    4722:	b09b      	sub	sp, #108	; 0x6c
    4724:	468a      	mov	sl, r1
    4726:	4615      	mov	r5, r2
    4728:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    472a:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    472c:	7828      	ldrb	r0, [r5, #0]
    472e:	b910      	cbnz	r0, 4736 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4730:	4630      	mov	r0, r6
    4732:	f000 bdee 	b.w	5312 <cbvprintf+0xbf6>
			OUTC(*fp++);
    4736:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    4738:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    473a:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    473c:	d006      	beq.n	474c <cbvprintf+0x30>
			OUTC(*fp++);
    473e:	4651      	mov	r1, sl
			OUTC('%');
    4740:	47c8      	blx	r9
    4742:	2800      	cmp	r0, #0
    4744:	f2c0 85e5 	blt.w	5312 <cbvprintf+0xbf6>
    4748:	3601      	adds	r6, #1
		if (bps == NULL) {
    474a:	e24c      	b.n	4be6 <cbvprintf+0x4ca>
		} state = {
    474c:	2218      	movs	r2, #24
    474e:	2100      	movs	r1, #0
    4750:	a80c      	add	r0, sp, #48	; 0x30
    4752:	f020 faa8 	bl	24ca6 <memset>
	if (*sp == '%') {
    4756:	786b      	ldrb	r3, [r5, #1]
    4758:	2b25      	cmp	r3, #37	; 0x25
    475a:	d07c      	beq.n	4856 <cbvprintf+0x13a>
    475c:	2200      	movs	r2, #0
    475e:	1c68      	adds	r0, r5, #1
    4760:	4696      	mov	lr, r2
    4762:	4690      	mov	r8, r2
    4764:	4694      	mov	ip, r2
    4766:	4617      	mov	r7, r2
    4768:	4601      	mov	r1, r0
		switch (*sp) {
    476a:	f810 3b01 	ldrb.w	r3, [r0], #1
    476e:	2b2b      	cmp	r3, #43	; 0x2b
    4770:	f000 80a0 	beq.w	48b4 <cbvprintf+0x198>
    4774:	f200 8097 	bhi.w	48a6 <cbvprintf+0x18a>
    4778:	2b20      	cmp	r3, #32
    477a:	f000 809e 	beq.w	48ba <cbvprintf+0x19e>
    477e:	2b23      	cmp	r3, #35	; 0x23
    4780:	f000 809e 	beq.w	48c0 <cbvprintf+0x1a4>
    4784:	b12f      	cbz	r7, 4792 <cbvprintf+0x76>
    4786:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    478a:	f040 0004 	orr.w	r0, r0, #4
    478e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    4792:	f1bc 0f00 	cmp.w	ip, #0
    4796:	d005      	beq.n	47a4 <cbvprintf+0x88>
    4798:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    479c:	f040 0008 	orr.w	r0, r0, #8
    47a0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    47a4:	f1b8 0f00 	cmp.w	r8, #0
    47a8:	d005      	beq.n	47b6 <cbvprintf+0x9a>
    47aa:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    47ae:	f040 0010 	orr.w	r0, r0, #16
    47b2:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    47b6:	f1be 0f00 	cmp.w	lr, #0
    47ba:	d005      	beq.n	47c8 <cbvprintf+0xac>
    47bc:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    47c0:	f040 0020 	orr.w	r0, r0, #32
    47c4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    47c8:	b12a      	cbz	r2, 47d6 <cbvprintf+0xba>
    47ca:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    47ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    47d2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    47d6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    47da:	f002 0044 	and.w	r0, r2, #68	; 0x44
    47de:	2844      	cmp	r0, #68	; 0x44
    47e0:	d103      	bne.n	47ea <cbvprintf+0xce>
		conv->flag_zero = false;
    47e2:	f36f 1286 	bfc	r2, #6, #1
    47e6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    47ea:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    47ee:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    47f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    47f4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    47f8:	d17e      	bne.n	48f8 <cbvprintf+0x1dc>
		conv->width_star = true;
    47fa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    47fe:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    4802:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    4804:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    4808:	781a      	ldrb	r2, [r3, #0]
    480a:	2a2e      	cmp	r2, #46	; 0x2e
    480c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4810:	bf0c      	ite	eq
    4812:	2101      	moveq	r1, #1
    4814:	2100      	movne	r1, #0
    4816:	f361 0241 	bfi	r2, r1, #1, #1
    481a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    481e:	d177      	bne.n	4910 <cbvprintf+0x1f4>
	if (*sp == '*') {
    4820:	785a      	ldrb	r2, [r3, #1]
    4822:	2a2a      	cmp	r2, #42	; 0x2a
    4824:	d06d      	beq.n	4902 <cbvprintf+0x1e6>
	++sp;
    4826:	3301      	adds	r3, #1
	size_t val = 0;
    4828:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    482a:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    482e:	4618      	mov	r0, r3
    4830:	f810 2b01 	ldrb.w	r2, [r0], #1
    4834:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4838:	2f09      	cmp	r7, #9
    483a:	f240 80ab 	bls.w	4994 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    483e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    4842:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    4844:	f3c2 0040 	ubfx	r0, r2, #1, #1
    4848:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    484c:	f361 0241 	bfi	r2, r1, #1, #1
    4850:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    4854:	e05c      	b.n	4910 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    4856:	1caa      	adds	r2, r5, #2
    4858:	9202      	str	r2, [sp, #8]
    485a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    485e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4862:	07df      	lsls	r7, r3, #31
    4864:	f140 8173 	bpl.w	4b4e <cbvprintf+0x432>
			width = va_arg(ap, int);
    4868:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    486c:	f1bb 0f00 	cmp.w	fp, #0
    4870:	da07      	bge.n	4882 <cbvprintf+0x166>
				conv->flag_dash = true;
    4872:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4876:	f042 0204 	orr.w	r2, r2, #4
    487a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    487e:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    4882:	0758      	lsls	r0, r3, #29
    4884:	f140 816c 	bpl.w	4b60 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    4888:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    488c:	f1b8 0f00 	cmp.w	r8, #0
    4890:	f280 816b 	bge.w	4b6a <cbvprintf+0x44e>
				conv->prec_present = false;
    4894:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4898:	f36f 0341 	bfc	r3, #1, #1
    489c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    48a0:	f04f 38ff 	mov.w	r8, #4294967295
    48a4:	e161      	b.n	4b6a <cbvprintf+0x44e>
		switch (*sp) {
    48a6:	2b2d      	cmp	r3, #45	; 0x2d
    48a8:	d00d      	beq.n	48c6 <cbvprintf+0x1aa>
    48aa:	2b30      	cmp	r3, #48	; 0x30
    48ac:	f47f af6a 	bne.w	4784 <cbvprintf+0x68>
			conv->flag_zero = true;
    48b0:	2201      	movs	r2, #1
	} while (loop);
    48b2:	e759      	b.n	4768 <cbvprintf+0x4c>
			conv->flag_plus = true;
    48b4:	f04f 0c01 	mov.w	ip, #1
    48b8:	e756      	b.n	4768 <cbvprintf+0x4c>
			conv->flag_space = true;
    48ba:	f04f 0801 	mov.w	r8, #1
    48be:	e753      	b.n	4768 <cbvprintf+0x4c>
			conv->flag_hash = true;
    48c0:	f04f 0e01 	mov.w	lr, #1
    48c4:	e750      	b.n	4768 <cbvprintf+0x4c>
		switch (*sp) {
    48c6:	2701      	movs	r7, #1
    48c8:	e74e      	b.n	4768 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    48ca:	fb0c 7202 	mla	r2, ip, r2, r7
    48ce:	3a30      	subs	r2, #48	; 0x30
    48d0:	4603      	mov	r3, r0
    48d2:	4618      	mov	r0, r3
    48d4:	f810 7b01 	ldrb.w	r7, [r0], #1
    48d8:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    48dc:	f1be 0f09 	cmp.w	lr, #9
    48e0:	d9f3      	bls.n	48ca <cbvprintf+0x1ae>
	if (sp != wp) {
    48e2:	4299      	cmp	r1, r3
    48e4:	d090      	beq.n	4808 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    48e6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    48ea:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    48ec:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    48ee:	f362 0141 	bfi	r1, r2, #1, #1
    48f2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    48f6:	e787      	b.n	4808 <cbvprintf+0xec>
    48f8:	460b      	mov	r3, r1
	size_t val = 0;
    48fa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    48fc:	f04f 0c0a 	mov.w	ip, #10
    4900:	e7e7      	b.n	48d2 <cbvprintf+0x1b6>
		conv->prec_star = true;
    4902:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4906:	f042 0204 	orr.w	r2, r2, #4
    490a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    490e:	3302      	adds	r3, #2
	switch (*sp) {
    4910:	4619      	mov	r1, r3
    4912:	f811 2b01 	ldrb.w	r2, [r1], #1
    4916:	2a6c      	cmp	r2, #108	; 0x6c
    4918:	d05c      	beq.n	49d4 <cbvprintf+0x2b8>
    491a:	d840      	bhi.n	499e <cbvprintf+0x282>
    491c:	2a68      	cmp	r2, #104	; 0x68
    491e:	d046      	beq.n	49ae <cbvprintf+0x292>
    4920:	2a6a      	cmp	r2, #106	; 0x6a
    4922:	d061      	beq.n	49e8 <cbvprintf+0x2cc>
    4924:	2a4c      	cmp	r2, #76	; 0x4c
    4926:	d067      	beq.n	49f8 <cbvprintf+0x2dc>
    4928:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    492a:	460b      	mov	r3, r1
    492c:	f813 2b01 	ldrb.w	r2, [r3], #1
    4930:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    4932:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    4934:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    4938:	f200 80df 	bhi.w	4afa <cbvprintf+0x3de>
    493c:	2a57      	cmp	r2, #87	; 0x57
    493e:	d868      	bhi.n	4a12 <cbvprintf+0x2f6>
    4940:	2a41      	cmp	r2, #65	; 0x41
    4942:	d004      	beq.n	494e <cbvprintf+0x232>
    4944:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    4948:	2b02      	cmp	r3, #2
    494a:	f200 80d6 	bhi.w	4afa <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    494e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    4952:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    4956:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    4958:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    495c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    4960:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    4964:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    4968:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    496c:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    4970:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    4974:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    4976:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    497a:	b2cb      	uxtb	r3, r1
    497c:	f100 80e5 	bmi.w	4b4a <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    4980:	f003 0278 	and.w	r2, r3, #120	; 0x78
    4984:	2a18      	cmp	r2, #24
    4986:	f040 80b5 	bne.w	4af4 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    498a:	f36f 03c6 	bfc	r3, #3, #4
    498e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    4992:	e09c      	b.n	4ace <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    4994:	fb0c 2101 	mla	r1, ip, r1, r2
    4998:	3930      	subs	r1, #48	; 0x30
    499a:	4603      	mov	r3, r0
    499c:	e747      	b.n	482e <cbvprintf+0x112>
	switch (*sp) {
    499e:	2a74      	cmp	r2, #116	; 0x74
    49a0:	d026      	beq.n	49f0 <cbvprintf+0x2d4>
    49a2:	2a7a      	cmp	r2, #122	; 0x7a
    49a4:	d1c0      	bne.n	4928 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    49a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    49aa:	2206      	movs	r2, #6
    49ac:	e00d      	b.n	49ca <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    49ae:	785a      	ldrb	r2, [r3, #1]
    49b0:	2a68      	cmp	r2, #104	; 0x68
    49b2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    49b6:	d106      	bne.n	49c6 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    49b8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    49ba:	f361 02c6 	bfi	r2, r1, #3, #4
    49be:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    49c2:	1c99      	adds	r1, r3, #2
    49c4:	e7b1      	b.n	492a <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    49c6:	4613      	mov	r3, r2
    49c8:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    49ca:	f362 03c6 	bfi	r3, r2, #3, #4
    49ce:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    49d2:	e7aa      	b.n	492a <cbvprintf+0x20e>
		if (*++sp == 'l') {
    49d4:	785a      	ldrb	r2, [r3, #1]
    49d6:	2a6c      	cmp	r2, #108	; 0x6c
    49d8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    49dc:	d101      	bne.n	49e2 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    49de:	2104      	movs	r1, #4
    49e0:	e7eb      	b.n	49ba <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    49e2:	4613      	mov	r3, r2
    49e4:	2203      	movs	r2, #3
    49e6:	e7f0      	b.n	49ca <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    49e8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    49ec:	2205      	movs	r2, #5
    49ee:	e7ec      	b.n	49ca <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    49f0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    49f4:	2207      	movs	r2, #7
    49f6:	e7e8      	b.n	49ca <cbvprintf+0x2ae>
		conv->unsupported = true;
    49f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    49fc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    4a00:	f023 0302 	bic.w	r3, r3, #2
    4a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4a08:	f043 0302 	orr.w	r3, r3, #2
    4a0c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    4a10:	e78b      	b.n	492a <cbvprintf+0x20e>
    4a12:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    4a16:	2b20      	cmp	r3, #32
    4a18:	d86f      	bhi.n	4afa <cbvprintf+0x3de>
    4a1a:	a101      	add	r1, pc, #4	; (adr r1, 4a20 <cbvprintf+0x304>)
    4a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    4a20:	00004ad3 	.word	0x00004ad3
    4a24:	00004afb 	.word	0x00004afb
    4a28:	00004afb 	.word	0x00004afb
    4a2c:	00004afb 	.word	0x00004afb
    4a30:	00004afb 	.word	0x00004afb
    4a34:	00004afb 	.word	0x00004afb
    4a38:	00004afb 	.word	0x00004afb
    4a3c:	00004afb 	.word	0x00004afb
    4a40:	00004afb 	.word	0x00004afb
    4a44:	0000494f 	.word	0x0000494f
    4a48:	00004afb 	.word	0x00004afb
    4a4c:	00004ad3 	.word	0x00004ad3
    4a50:	00004aa5 	.word	0x00004aa5
    4a54:	0000494f 	.word	0x0000494f
    4a58:	0000494f 	.word	0x0000494f
    4a5c:	0000494f 	.word	0x0000494f
    4a60:	00004afb 	.word	0x00004afb
    4a64:	00004aa5 	.word	0x00004aa5
    4a68:	00004afb 	.word	0x00004afb
    4a6c:	00004afb 	.word	0x00004afb
    4a70:	00004afb 	.word	0x00004afb
    4a74:	00004afb 	.word	0x00004afb
    4a78:	00004b09 	.word	0x00004b09
    4a7c:	00004ad3 	.word	0x00004ad3
    4a80:	00004b2d 	.word	0x00004b2d
    4a84:	00004afb 	.word	0x00004afb
    4a88:	00004afb 	.word	0x00004afb
    4a8c:	00004b2d 	.word	0x00004b2d
    4a90:	00004afb 	.word	0x00004afb
    4a94:	00004ad3 	.word	0x00004ad3
    4a98:	00004afb 	.word	0x00004afb
    4a9c:	00004afb 	.word	0x00004afb
    4aa0:	00004ad3 	.word	0x00004ad3
		conv->specifier_cat = SPECIFIER_SINT;
    4aa4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4aa8:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    4aaa:	f361 0302 	bfi	r3, r1, #0, #3
    4aae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4ab2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4ab6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4aba:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    4abc:	bf02      	ittt	eq
    4abe:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    4ac2:	f041 0101 	orreq.w	r1, r1, #1
    4ac6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    4aca:	2a63      	cmp	r2, #99	; 0x63
    4acc:	d005      	beq.n	4ada <cbvprintf+0x3be>
	bool unsupported = false;
    4ace:	2300      	movs	r3, #0
    4ad0:	e006      	b.n	4ae0 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    4ad2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4ad6:	2102      	movs	r1, #2
    4ad8:	e7e7      	b.n	4aaa <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    4ada:	3b00      	subs	r3, #0
    4adc:	bf18      	it	ne
    4ade:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    4ae0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4ae4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    4ae8:	430b      	orrs	r3, r1
    4aea:	f363 0241 	bfi	r2, r3, #1, #1
    4aee:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    4af2:	e6b4      	b.n	485e <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    4af4:	f013 0f38 	tst.w	r3, #56	; 0x38
    4af8:	d0e9      	beq.n	4ace <cbvprintf+0x3b2>
			conv->invalid = true;
    4afa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4afe:	f043 0301 	orr.w	r3, r3, #1
    4b02:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    4b06:	e7e2      	b.n	4ace <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    4b08:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4b0c:	2203      	movs	r2, #3
    4b0e:	f362 0302 	bfi	r3, r2, #0, #3
    4b12:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4b16:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4b1a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4b1e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    4b22:	f1dc 0300 	rsbs	r3, ip, #0
    4b26:	eb43 030c 	adc.w	r3, r3, ip
    4b2a:	e7d9      	b.n	4ae0 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    4b2c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4b30:	2203      	movs	r2, #3
    4b32:	f362 0302 	bfi	r3, r2, #0, #3
    4b36:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    4b3a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4b3e:	f013 0f78 	tst.w	r3, #120	; 0x78
    4b42:	bf14      	ite	ne
    4b44:	2301      	movne	r3, #1
    4b46:	2300      	moveq	r3, #0
    4b48:	e7ca      	b.n	4ae0 <cbvprintf+0x3c4>
			unsupported = true;
    4b4a:	2301      	movs	r3, #1
    4b4c:	e7c8      	b.n	4ae0 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    4b4e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    4b52:	2a00      	cmp	r2, #0
			width = conv->width_value;
    4b54:	bfb4      	ite	lt
    4b56:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    4b5a:	f04f 3bff 	movge.w	fp, #4294967295
    4b5e:	e690      	b.n	4882 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    4b60:	0799      	lsls	r1, r3, #30
    4b62:	f57f ae9d 	bpl.w	48a0 <cbvprintf+0x184>
			precision = conv->prec_value;
    4b66:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    4b6a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    4b6e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    4b70:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    4b74:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    4b78:	f003 0207 	and.w	r2, r3, #7
    4b7c:	2a04      	cmp	r2, #4
    4b7e:	d109      	bne.n	4b94 <cbvprintf+0x478>
		    && !conv->prec_present) {
    4b80:	078a      	lsls	r2, r1, #30
    4b82:	d407      	bmi.n	4b94 <cbvprintf+0x478>
			if (conv->specifier_a) {
    4b84:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    4b88:	2a00      	cmp	r2, #0
    4b8a:	bfb4      	ite	lt
    4b8c:	f04f 080d 	movlt.w	r8, #13
    4b90:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    4b94:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    4b98:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    4b9a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4b9e:	d137      	bne.n	4c10 <cbvprintf+0x4f4>
			switch (length_mod) {
    4ba0:	1ecb      	subs	r3, r1, #3
    4ba2:	2b04      	cmp	r3, #4
    4ba4:	d821      	bhi.n	4bea <cbvprintf+0x4ce>
    4ba6:	e8df f003 	tbb	[pc, r3]
    4baa:	0903      	.short	0x0903
    4bac:	2009      	.short	0x2009
    4bae:	20          	.byte	0x20
    4baf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    4bb0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    4bb4:	17da      	asrs	r2, r3, #31
    4bb6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    4bba:	e006      	b.n	4bca <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    4bbc:	3407      	adds	r4, #7
    4bbe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    4bc2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    4bc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    4bca:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    4bce:	07bb      	lsls	r3, r7, #30
    4bd0:	d056      	beq.n	4c80 <cbvprintf+0x564>
			OUTS(sp, fp);
    4bd2:	9b02      	ldr	r3, [sp, #8]
    4bd4:	462a      	mov	r2, r5
    4bd6:	4651      	mov	r1, sl
    4bd8:	4648      	mov	r0, r9
    4bda:	f01d ffb9 	bl	22b50 <outs>
    4bde:	2800      	cmp	r0, #0
    4be0:	f2c0 8397 	blt.w	5312 <cbvprintf+0xbf6>
    4be4:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    4be6:	9d02      	ldr	r5, [sp, #8]
    4be8:	e5a0      	b.n	472c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4bea:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    4bee:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4bf0:	ea4f 72e3 	mov.w	r2, r3, asr #31
    4bf4:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4bf8:	d105      	bne.n	4c06 <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    4bfa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    4bfe:	930c      	str	r3, [sp, #48]	; 0x30
    4c00:	2300      	movs	r3, #0
    4c02:	930d      	str	r3, [sp, #52]	; 0x34
    4c04:	e7e1      	b.n	4bca <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    4c06:	2902      	cmp	r1, #2
    4c08:	d1df      	bne.n	4bca <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    4c0a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    4c0e:	e7d1      	b.n	4bb4 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4c10:	2b02      	cmp	r3, #2
    4c12:	d123      	bne.n	4c5c <cbvprintf+0x540>
			switch (length_mod) {
    4c14:	1ecb      	subs	r3, r1, #3
    4c16:	2b04      	cmp	r3, #4
    4c18:	d813      	bhi.n	4c42 <cbvprintf+0x526>
    4c1a:	e8df f003 	tbb	[pc, r3]
    4c1e:	0a03      	.short	0x0a03
    4c20:	120a      	.short	0x120a
    4c22:	12          	.byte	0x12
    4c23:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    4c24:	6822      	ldr	r2, [r4, #0]
    4c26:	920c      	str	r2, [sp, #48]	; 0x30
    4c28:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    4c2a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    4c2c:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    4c2e:	4604      	mov	r4, r0
    4c30:	e7cb      	b.n	4bca <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    4c32:	1de0      	adds	r0, r4, #7
    4c34:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    4c38:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    4c3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    4c40:	e7f5      	b.n	4c2e <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    4c42:	f854 3b04 	ldr.w	r3, [r4], #4
    4c46:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4c48:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    4c4a:	f04f 0300 	mov.w	r3, #0
    4c4e:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    4c50:	d0d3      	beq.n	4bfa <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    4c52:	2902      	cmp	r1, #2
    4c54:	d1b9      	bne.n	4bca <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    4c56:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4c5a:	e7d0      	b.n	4bfe <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    4c5c:	2b04      	cmp	r3, #4
    4c5e:	d109      	bne.n	4c74 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    4c60:	1de3      	adds	r3, r4, #7
    4c62:	f023 0307 	bic.w	r3, r3, #7
    4c66:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    4c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    4c72:	e7aa      	b.n	4bca <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4c74:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    4c76:	bf04      	itt	eq
    4c78:	f854 3b04 	ldreq.w	r3, [r4], #4
    4c7c:	930c      	streq	r3, [sp, #48]	; 0x30
    4c7e:	e7a4      	b.n	4bca <cbvprintf+0x4ae>
		switch (conv->specifier) {
    4c80:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    4c84:	2a78      	cmp	r2, #120	; 0x78
    4c86:	d8ae      	bhi.n	4be6 <cbvprintf+0x4ca>
    4c88:	2a57      	cmp	r2, #87	; 0x57
    4c8a:	f200 808c 	bhi.w	4da6 <cbvprintf+0x68a>
    4c8e:	2a25      	cmp	r2, #37	; 0x25
    4c90:	f000 80d4 	beq.w	4e3c <cbvprintf+0x720>
    4c94:	2a24      	cmp	r2, #36	; 0x24
    4c96:	d9a6      	bls.n	4be6 <cbvprintf+0x4ca>
    4c98:	2a41      	cmp	r2, #65	; 0x41
    4c9a:	d003      	beq.n	4ca4 <cbvprintf+0x588>
    4c9c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    4ca0:	2b02      	cmp	r3, #2
    4ca2:	d8a0      	bhi.n	4be6 <cbvprintf+0x4ca>
	} u = {
    4ca4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    4ca8:	2b00      	cmp	r3, #0
    4caa:	f2c0 81be 	blt.w	502a <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    4cae:	0738      	lsls	r0, r7, #28
    4cb0:	f100 81bd 	bmi.w	502e <cbvprintf+0x912>
		*sign = ' ';
    4cb4:	f017 0710 	ands.w	r7, r7, #16
    4cb8:	bf18      	it	ne
    4cba:	2720      	movne	r7, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    4cbc:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    4cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4cc4:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (exp == 0) && (fract != 0);
    4cc8:	2d00      	cmp	r5, #0
    4cca:	f040 81b2 	bne.w	5032 <cbvprintf+0x916>
    4cce:	ea51 0003 	orrs.w	r0, r1, r3
    4cd2:	bf14      	ite	ne
    4cd4:	2001      	movne	r0, #1
    4cd6:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    4cd8:	02db      	lsls	r3, r3, #11
    4cda:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    4cde:	02c9      	lsls	r1, r1, #11
		c = 'f';
    4ce0:	2a46      	cmp	r2, #70	; 0x46
	if ((exp | fract) != 0) {
    4ce2:	ea45 0e01 	orr.w	lr, r5, r1
    4ce6:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    4cea:	bf08      	it	eq
    4cec:	2266      	moveq	r2, #102	; 0x66
	if ((exp | fract) != 0) {
    4cee:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    4cf2:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((exp | fract) != 0) {
    4cf6:	f000 8206 	beq.w	5106 <cbvprintf+0x9ea>
		if (is_subnormal) {
    4cfa:	2800      	cmp	r0, #0
    4cfc:	f040 81ce 	bne.w	509c <cbvprintf+0x980>
		fract |= BIT_63;
    4d00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4d04:	f04f 0c00 	mov.w	ip, #0
    4d08:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    4d0c:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    4d10:	9109      	str	r1, [sp, #36]	; 0x24
    4d12:	4663      	mov	r3, ip
		fract *= 5U;
    4d14:	f04f 0e05 	mov.w	lr, #5
	while (exp < -2) {
    4d18:	f115 0f02 	cmn.w	r5, #2
    4d1c:	f2c0 81c5 	blt.w	50aa <cbvprintf+0x98e>
    4d20:	f1bc 0f00 	cmp.w	ip, #0
    4d24:	d001      	beq.n	4d2a <cbvprintf+0x60e>
    4d26:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (exp > 0) {
    4d2a:	2d00      	cmp	r5, #0
		fract += 2;
    4d2c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (exp > 0) {
    4d30:	f300 81d0 	bgt.w	50d4 <cbvprintf+0x9b8>
	fract >>= (4 - exp);
    4d34:	9809      	ldr	r0, [sp, #36]	; 0x24
    4d36:	9908      	ldr	r1, [sp, #32]
    4d38:	f1c5 0c04 	rsb	ip, r5, #4
    4d3c:	351c      	adds	r5, #28
    4d3e:	fa00 f505 	lsl.w	r5, r0, r5
    4d42:	f1ac 0e20 	sub.w	lr, ip, #32
    4d46:	fa21 f10c 	lsr.w	r1, r1, ip
    4d4a:	fa20 fe0e 	lsr.w	lr, r0, lr
    4d4e:	4329      	orrs	r1, r5
    4d50:	ea41 010e 	orr.w	r1, r1, lr
    4d54:	fa20 f00c 	lsr.w	r0, r0, ip
    4d58:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    4d5c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    4d60:	2947      	cmp	r1, #71	; 0x47
    4d62:	f040 81d7 	bne.w	5114 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    4d66:	1cdd      	adds	r5, r3, #3
    4d68:	db02      	blt.n	4d70 <cbvprintf+0x654>
    4d6a:	4598      	cmp	r8, r3
    4d6c:	f280 81ce 	bge.w	510c <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    4d70:	3a02      	subs	r2, #2
			if (precision > 0) {
    4d72:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    4d76:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    4d78:	dd01      	ble.n	4d7e <cbvprintf+0x662>
				precision--;
    4d7a:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
    4d7e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    4d82:	0688      	lsls	r0, r1, #26
    4d84:	f100 81c6 	bmi.w	5114 <cbvprintf+0x9f8>
    4d88:	f1b8 0f00 	cmp.w	r8, #0
    4d8c:	bfd4      	ite	le
    4d8e:	2100      	movle	r1, #0
    4d90:	2101      	movgt	r1, #1
	if (c == 'f') {
    4d92:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    4d94:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    4d96:	f040 81bf 	bne.w	5118 <cbvprintf+0x9fc>
		if (decimals < 0) {
    4d9a:	eb18 0503 	adds.w	r5, r8, r3
    4d9e:	f140 81bd 	bpl.w	511c <cbvprintf+0xa00>
			decimals = 0;
    4da2:	2500      	movs	r5, #0
    4da4:	e1bd      	b.n	5122 <cbvprintf+0xa06>
    4da6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    4daa:	2b20      	cmp	r3, #32
    4dac:	f63f af1b 	bhi.w	4be6 <cbvprintf+0x4ca>
    4db0:	a001      	add	r0, pc, #4	; (adr r0, 4db8 <cbvprintf+0x69c>)
    4db2:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    4db6:	bf00      	nop
    4db8:	00004fcd 	.word	0x00004fcd
    4dbc:	00004be7 	.word	0x00004be7
    4dc0:	00004be7 	.word	0x00004be7
    4dc4:	00004be7 	.word	0x00004be7
    4dc8:	00004be7 	.word	0x00004be7
    4dcc:	00004be7 	.word	0x00004be7
    4dd0:	00004be7 	.word	0x00004be7
    4dd4:	00004be7 	.word	0x00004be7
    4dd8:	00004be7 	.word	0x00004be7
    4ddc:	00004ca5 	.word	0x00004ca5
    4de0:	00004be7 	.word	0x00004be7
    4de4:	00004e69 	.word	0x00004e69
    4de8:	00004f6d 	.word	0x00004f6d
    4dec:	00004ca5 	.word	0x00004ca5
    4df0:	00004ca5 	.word	0x00004ca5
    4df4:	00004ca5 	.word	0x00004ca5
    4df8:	00004be7 	.word	0x00004be7
    4dfc:	00004f6d 	.word	0x00004f6d
    4e00:	00004be7 	.word	0x00004be7
    4e04:	00004be7 	.word	0x00004be7
    4e08:	00004be7 	.word	0x00004be7
    4e0c:	00004be7 	.word	0x00004be7
    4e10:	00005003 	.word	0x00005003
    4e14:	00004fcd 	.word	0x00004fcd
    4e18:	00004fd1 	.word	0x00004fd1
    4e1c:	00004be7 	.word	0x00004be7
    4e20:	00004be7 	.word	0x00004be7
    4e24:	00004e43 	.word	0x00004e43
    4e28:	00004be7 	.word	0x00004be7
    4e2c:	00004fcd 	.word	0x00004fcd
    4e30:	00004be7 	.word	0x00004be7
    4e34:	00004be7 	.word	0x00004be7
    4e38:	00004fcd 	.word	0x00004fcd
			OUTC('%');
    4e3c:	4651      	mov	r1, sl
    4e3e:	4610      	mov	r0, r2
    4e40:	e47e      	b.n	4740 <cbvprintf+0x24>
			if (precision >= 0) {
    4e42:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    4e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    4e48:	db09      	blt.n	4e5e <cbvprintf+0x742>
				len = strnlen(bps, precision);
    4e4a:	4641      	mov	r1, r8
    4e4c:	4610      	mov	r0, r2
    4e4e:	9203      	str	r2, [sp, #12]
    4e50:	f01f fec7 	bl	24be2 <strnlen>
				len = strlen(bps);
    4e54:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    4e56:	2700      	movs	r7, #0
			bpe = bps + len;
    4e58:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    4e5a:	b962      	cbnz	r2, 4e76 <cbvprintf+0x75a>
    4e5c:	e6c3      	b.n	4be6 <cbvprintf+0x4ca>
				len = strlen(bps);
    4e5e:	4610      	mov	r0, r2
    4e60:	9203      	str	r2, [sp, #12]
    4e62:	f01f feb7 	bl	24bd4 <strlen>
    4e66:	e7f5      	b.n	4e54 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e6a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    4e6e:	2700      	movs	r7, #0
			bpe = buf + 1;
    4e70:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    4e74:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    4e76:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    4e78:	b107      	cbz	r7, 4e7c <cbvprintf+0x760>
			nj_len += 1U;
    4e7a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    4e7c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    4e80:	06c1      	lsls	r1, r0, #27
    4e82:	f140 823a 	bpl.w	52fa <cbvprintf+0xbde>
			nj_len += 2U;
    4e86:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    4e88:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    4e8a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    4e8c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    4e8e:	bf44      	itt	mi
    4e90:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    4e92:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    4e94:	f1bb 0f00 	cmp.w	fp, #0
    4e98:	dd23      	ble.n	4ee2 <cbvprintf+0x7c6>
			width -= (int)nj_len;
    4e9a:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    4e9e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ea2:	0759      	lsls	r1, r3, #29
    4ea4:	f3c3 0880 	ubfx	r8, r3, #2, #1
    4ea8:	d41b      	bmi.n	4ee2 <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    4eaa:	0658      	lsls	r0, r3, #25
    4eac:	f140 8234 	bpl.w	5318 <cbvprintf+0xbfc>
					if (sign != 0) {
    4eb0:	2f00      	cmp	r7, #0
    4eb2:	f000 8234 	beq.w	531e <cbvprintf+0xc02>
						OUTC(sign);
    4eb6:	4651      	mov	r1, sl
    4eb8:	4638      	mov	r0, r7
    4eba:	9203      	str	r2, [sp, #12]
    4ebc:	47c8      	blx	r9
    4ebe:	2800      	cmp	r0, #0
    4ec0:	f2c0 8227 	blt.w	5312 <cbvprintf+0xbf6>
    4ec4:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    4ec6:	4647      	mov	r7, r8
						OUTC(sign);
    4ec8:	3601      	adds	r6, #1
					pad = '0';
    4eca:	f04f 0830 	mov.w	r8, #48	; 0x30
    4ece:	445e      	add	r6, fp
    4ed0:	465b      	mov	r3, fp
				while (width-- > 0) {
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	eba6 000b 	sub.w	r0, r6, fp
    4ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
    4edc:	f300 8211 	bgt.w	5302 <cbvprintf+0xbe6>
    4ee0:	4606      	mov	r6, r0
		if (sign != 0) {
    4ee2:	b147      	cbz	r7, 4ef6 <cbvprintf+0x7da>
			OUTC(sign);
    4ee4:	4651      	mov	r1, sl
    4ee6:	4638      	mov	r0, r7
    4ee8:	9203      	str	r2, [sp, #12]
    4eea:	47c8      	blx	r9
    4eec:	2800      	cmp	r0, #0
    4eee:	f2c0 8210 	blt.w	5312 <cbvprintf+0xbf6>
    4ef2:	9a03      	ldr	r2, [sp, #12]
    4ef4:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    4ef6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4efa:	0659      	lsls	r1, r3, #25
    4efc:	f140 8265 	bpl.w	53ca <cbvprintf+0xcae>
			if (conv->specifier_a) {
    4f00:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    4f04:	2b00      	cmp	r3, #0
    4f06:	eba6 0302 	sub.w	r3, r6, r2
    4f0a:	9303      	str	r3, [sp, #12]
    4f0c:	f2c0 820a 	blt.w	5324 <cbvprintf+0xc08>
    4f10:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    4f12:	7838      	ldrb	r0, [r7, #0]
    4f14:	9b03      	ldr	r3, [sp, #12]
    4f16:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4f1a:	2a09      	cmp	r2, #9
    4f1c:	46b8      	mov	r8, r7
    4f1e:	eb03 0607 	add.w	r6, r3, r7
    4f22:	f107 0701 	add.w	r7, r7, #1
    4f26:	f240 8229 	bls.w	537c <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    4f2a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    4f2e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    4f30:	0693      	lsls	r3, r2, #26
    4f32:	d408      	bmi.n	4f46 <cbvprintf+0x82a>
    4f34:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    4f36:	2f00      	cmp	r7, #0
    4f38:	eba6 0307 	sub.w	r3, r6, r7
    4f3c:	f107 37ff 	add.w	r7, r7, #4294967295
    4f40:	f300 8222 	bgt.w	5388 <cbvprintf+0xc6c>
    4f44:	461e      	mov	r6, r3
				if (*cp == '.') {
    4f46:	f898 0000 	ldrb.w	r0, [r8]
    4f4a:	282e      	cmp	r0, #46	; 0x2e
    4f4c:	d10b      	bne.n	4f66 <cbvprintf+0x84a>
					OUTC(*cp++);
    4f4e:	4651      	mov	r1, sl
    4f50:	47c8      	blx	r9
						OUTC('0');
    4f52:	2800      	cmp	r0, #0
    4f54:	f2c0 81dd 	blt.w	5312 <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    4f58:	2f00      	cmp	r7, #0
						OUTC('0');
    4f5a:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    4f5e:	f300 821a 	bgt.w	5396 <cbvprintf+0xc7a>
					OUTC(*cp++);
    4f62:	f108 0801 	add.w	r8, r8, #1
    4f66:	eba6 0608 	sub.w	r6, r6, r8
    4f6a:	e21d      	b.n	53a8 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    4f6c:	073d      	lsls	r5, r7, #28
    4f6e:	d42b      	bmi.n	4fc8 <cbvprintf+0x8ac>
				sign = ' ';
    4f70:	f017 0710 	ands.w	r7, r7, #16
    4f74:	bf18      	it	ne
    4f76:	2720      	movne	r7, #32
			sint = value->sint;
    4f78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	da05      	bge.n	4f8c <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    4f80:	4252      	negs	r2, r2
    4f82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4f86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    4f8a:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    4f8c:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    4f90:	9300      	str	r3, [sp, #0]
    4f92:	aa0e      	add	r2, sp, #56	; 0x38
    4f94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    4f98:	ab13      	add	r3, sp, #76	; 0x4c
    4f9a:	f01d fd93 	bl	22ac4 <encode_uint>
    4f9e:	4602      	mov	r2, r0
			if (precision >= 0) {
    4fa0:	f1b8 0f00 	cmp.w	r8, #0
    4fa4:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    4fa8:	f6ff af57 	blt.w	4e5a <cbvprintf+0x73e>
				conv->flag_zero = false;
    4fac:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    4fb0:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    4fb2:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    4fb6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    4fb8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    4fbc:	f67f af4d 	bls.w	4e5a <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    4fc0:	eba8 0303 	sub.w	r3, r8, r3
    4fc4:	930f      	str	r3, [sp, #60]	; 0x3c
    4fc6:	e748      	b.n	4e5a <cbvprintf+0x73e>
				sign = '+';
    4fc8:	272b      	movs	r7, #43	; 0x2b
    4fca:	e7d5      	b.n	4f78 <cbvprintf+0x85c>
		switch (conv->specifier) {
    4fcc:	2700      	movs	r7, #0
    4fce:	e7dd      	b.n	4f8c <cbvprintf+0x870>
			if (value->ptr != NULL) {
    4fd0:	980c      	ldr	r0, [sp, #48]	; 0x30
    4fd2:	2800      	cmp	r0, #0
    4fd4:	f000 818d 	beq.w	52f2 <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4fd8:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    4fdc:	9300      	str	r3, [sp, #0]
    4fde:	aa0e      	add	r2, sp, #56	; 0x38
    4fe0:	ab13      	add	r3, sp, #76	; 0x4c
    4fe2:	2100      	movs	r1, #0
    4fe4:	f01d fd6e 	bl	22ac4 <encode_uint>
				conv->altform_0c = true;
    4fe8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    4fec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4ff0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4ff4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4ff8:	4602      	mov	r2, r0
				conv->altform_0c = true;
    4ffa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    4ffe:	2700      	movs	r7, #0
				goto prec_int_pad0;
    5000:	e7ce      	b.n	4fa0 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    5002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    5004:	2907      	cmp	r1, #7
    5006:	f63f adee 	bhi.w	4be6 <cbvprintf+0x4ca>
    500a:	e8df f001 	tbb	[pc, r1]
    500e:	040c      	.short	0x040c
    5010:	08080c06 	.word	0x08080c06
    5014:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    5016:	701e      	strb	r6, [r3, #0]
		break;
    5018:	e5e5      	b.n	4be6 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    501a:	801e      	strh	r6, [r3, #0]
		break;
    501c:	e5e3      	b.n	4be6 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    501e:	17f2      	asrs	r2, r6, #31
    5020:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    5024:	e5df      	b.n	4be6 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5026:	601e      	str	r6, [r3, #0]
		break;
    5028:	e5dd      	b.n	4be6 <cbvprintf+0x4ca>
		*sign = '-';
    502a:	272d      	movs	r7, #45	; 0x2d
    502c:	e646      	b.n	4cbc <cbvprintf+0x5a0>
		*sign = '+';
    502e:	272b      	movs	r7, #43	; 0x2b
    5030:	e644      	b.n	4cbc <cbvprintf+0x5a0>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    5032:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5036:	4285      	cmp	r5, r0
    5038:	d12d      	bne.n	5096 <cbvprintf+0x97a>
		if (fract == 0) {
    503a:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    503c:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    5040:	d11b      	bne.n	507a <cbvprintf+0x95e>
			if (isupper((int)c)) {
    5042:	2a19      	cmp	r2, #25
    5044:	d811      	bhi.n	506a <cbvprintf+0x94e>
				*buf++ = 'I';
    5046:	2349      	movs	r3, #73	; 0x49
    5048:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    504c:	234e      	movs	r3, #78	; 0x4e
    504e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    5052:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    5054:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    5058:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    505c:	f36f 1386 	bfc	r3, #6, #1
    5060:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    5064:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    5068:	e704      	b.n	4e74 <cbvprintf+0x758>
				*buf++ = 'i';
    506a:	2369      	movs	r3, #105	; 0x69
    506c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5070:	236e      	movs	r3, #110	; 0x6e
    5072:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    5076:	2366      	movs	r3, #102	; 0x66
    5078:	e7ec      	b.n	5054 <cbvprintf+0x938>
			if (isupper((int)c)) {
    507a:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    507c:	bf99      	ittee	ls
    507e:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    5080:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    5082:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    5084:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    5086:	bf94      	ite	ls
    5088:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    508c:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    5090:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    5094:	e7de      	b.n	5054 <cbvprintf+0x938>
	bool is_subnormal = (exp == 0) && (fract != 0);
    5096:	2000      	movs	r0, #0
    5098:	e61e      	b.n	4cd8 <cbvprintf+0x5bc>
				exp--;
    509a:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    509c:	1849      	adds	r1, r1, r1
    509e:	415b      	adcs	r3, r3
    50a0:	2b00      	cmp	r3, #0
    50a2:	dafa      	bge.n	509a <cbvprintf+0x97e>
    50a4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    50a8:	e62a      	b.n	4d00 <cbvprintf+0x5e4>
			fract >>= 1;
    50aa:	0840      	lsrs	r0, r0, #1
    50ac:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    50b0:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    50b2:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    50b6:	46ac      	mov	ip, r5
			exp++;
    50b8:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    50bc:	d2f5      	bcs.n	50aa <cbvprintf+0x98e>
		fract *= 5U;
    50be:	fb0e f501 	mul.w	r5, lr, r1
    50c2:	fba0 010e 	umull	r0, r1, r0, lr
    50c6:	4429      	add	r1, r5
		decexp--;
    50c8:	3b01      	subs	r3, #1
		exp++;
    50ca:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    50ce:	f04f 0c01 	mov.w	ip, #1
    50d2:	e621      	b.n	4d18 <cbvprintf+0x5fc>
		fract += 2;
    50d4:	3102      	adds	r1, #2
    50d6:	f140 0000 	adc.w	r0, r0, #0
    50da:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    50de:	a808      	add	r0, sp, #32
    50e0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    50e4:	f01d fcbf 	bl	22a66 <_ldiv5>
		decexp++;
    50e8:	9b04      	ldr	r3, [sp, #16]
    50ea:	9a03      	ldr	r2, [sp, #12]
    50ec:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		exp--;
    50f0:	3d01      	subs	r5, #1
		decexp++;
    50f2:	3301      	adds	r3, #1
			fract <<= 1;
    50f4:	1849      	adds	r1, r1, r1
    50f6:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    50f8:	2800      	cmp	r0, #0
			exp--;
    50fa:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
    50fe:	daf9      	bge.n	50f4 <cbvprintf+0x9d8>
    5100:	e9cd 1008 	strd	r1, r0, [sp, #32]
    5104:	e611      	b.n	4d2a <cbvprintf+0x60e>
    5106:	2300      	movs	r3, #0
    5108:	461d      	mov	r5, r3
    510a:	e613      	b.n	4d34 <cbvprintf+0x618>
			precision -= decexp;
    510c:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    5110:	2266      	movs	r2, #102	; 0x66
    5112:	e634      	b.n	4d7e <cbvprintf+0x662>
	bool prune_zero = false;
    5114:	2100      	movs	r1, #0
    5116:	e63c      	b.n	4d92 <cbvprintf+0x676>
		decimals = precision + 1;
    5118:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    511c:	2d10      	cmp	r5, #16
    511e:	bfa8      	it	ge
    5120:	2510      	movge	r5, #16
    5122:	2110      	movs	r1, #16
    5124:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    5126:	2000      	movs	r0, #0
    5128:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    512c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    5130:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    5134:	b9a5      	cbnz	r5, 5160 <cbvprintf+0xa44>
	fract += round;
    5136:	9d08      	ldr	r5, [sp, #32]
    5138:	1949      	adds	r1, r1, r5
    513a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    513c:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    5140:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    5144:	d21b      	bcs.n	517e <cbvprintf+0xa62>
	fract += round;
    5146:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    514a:	2a66      	cmp	r2, #102	; 0x66
    514c:	f040 8099 	bne.w	5282 <cbvprintf+0xb66>
		if (decexp > 0) {
    5150:	2b00      	cmp	r3, #0
    5152:	dc23      	bgt.n	519c <cbvprintf+0xa80>
			*buf++ = '0';
    5154:	2130      	movs	r1, #48	; 0x30
    5156:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    515a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    515e:	e02f      	b.n	51c0 <cbvprintf+0xaa4>
	*v >>= 1;
    5160:	0849      	lsrs	r1, r1, #1
    5162:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    5166:	0840      	lsrs	r0, r0, #1
    5168:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    516c:	a80a      	add	r0, sp, #40	; 0x28
    516e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5172:	3d01      	subs	r5, #1
    5174:	f01d fc77 	bl	22a66 <_ldiv5>
    5178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    517c:	e7d8      	b.n	5130 <cbvprintf+0xa14>
	*v >>= 1;
    517e:	0849      	lsrs	r1, r1, #1
    5180:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    5184:	a808      	add	r0, sp, #32
	*v >>= 1;
    5186:	086d      	lsrs	r5, r5, #1
    5188:	e9cd 2304 	strd	r2, r3, [sp, #16]
    518c:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    5190:	f01d fc69 	bl	22a66 <_ldiv5>
		decexp++;
    5194:	9b05      	ldr	r3, [sp, #20]
    5196:	9a04      	ldr	r2, [sp, #16]
    5198:	3301      	adds	r3, #1
    519a:	e7d6      	b.n	514a <cbvprintf+0xa2e>
	char *buf = bps;
    519c:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    519e:	9907      	ldr	r1, [sp, #28]
    51a0:	2900      	cmp	r1, #0
    51a2:	dd0b      	ble.n	51bc <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    51a4:	a907      	add	r1, sp, #28
    51a6:	a808      	add	r0, sp, #32
    51a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    51ac:	f01d fc73 	bl	22a96 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    51b0:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    51b2:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    51b6:	3b01      	subs	r3, #1
    51b8:	9a04      	ldr	r2, [sp, #16]
    51ba:	d1f0      	bne.n	519e <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    51bc:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    51be:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    51c0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    51c4:	0689      	lsls	r1, r1, #26
    51c6:	d402      	bmi.n	51ce <cbvprintf+0xab2>
    51c8:	f1b8 0f00 	cmp.w	r8, #0
    51cc:	dd1d      	ble.n	520a <cbvprintf+0xaee>
			*buf++ = '.';
    51ce:	212e      	movs	r1, #46	; 0x2e
    51d0:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    51d4:	b19b      	cbz	r3, 51fe <cbvprintf+0xae2>
    51d6:	f1b8 0f00 	cmp.w	r8, #0
    51da:	dd16      	ble.n	520a <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    51dc:	4259      	negs	r1, r3
    51de:	4541      	cmp	r1, r8
    51e0:	bfa8      	it	ge
    51e2:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    51e4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    51e8:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    51ea:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    51ec:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    51f0:	bfd4      	ite	le
    51f2:	2100      	movle	r1, #0
    51f4:	2101      	movgt	r1, #1
    51f6:	f361 1045 	bfi	r0, r1, #5, #1
    51fa:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    51fe:	f1b8 0f00 	cmp.w	r8, #0
    5202:	dd02      	ble.n	520a <cbvprintf+0xaee>
    5204:	9907      	ldr	r1, [sp, #28]
    5206:	2900      	cmp	r1, #0
    5208:	dc56      	bgt.n	52b8 <cbvprintf+0xb9c>
	if (prune_zero) {
    520a:	9903      	ldr	r1, [sp, #12]
    520c:	2900      	cmp	r1, #0
    520e:	d163      	bne.n	52d8 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    5210:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    5214:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    5218:	2945      	cmp	r1, #69	; 0x45
    521a:	d121      	bne.n	5260 <cbvprintf+0xb44>
		if (decexp < 0) {
    521c:	2b00      	cmp	r3, #0
		*buf++ = c;
    521e:	4629      	mov	r1, r5
			decexp = -decexp;
    5220:	bfb8      	it	lt
    5222:	425b      	neglt	r3, r3
		*buf++ = c;
    5224:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    5228:	bfb4      	ite	lt
    522a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    522c:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    522e:	2b63      	cmp	r3, #99	; 0x63
    5230:	706a      	strb	r2, [r5, #1]
    5232:	dd09      	ble.n	5248 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    5234:	2064      	movs	r0, #100	; 0x64
    5236:	fb93 f2f0 	sdiv	r2, r3, r0
    523a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    523e:	1ce9      	adds	r1, r5, #3
    5240:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    5244:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5248:	200a      	movs	r0, #10
    524a:	460d      	mov	r5, r1
    524c:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    5250:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5254:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    5258:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    525a:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    525e:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    5260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5262:	2b00      	cmp	r3, #0
    5264:	dc43      	bgt.n	52ee <cbvprintf+0xbd2>
    5266:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5268:	2b00      	cmp	r3, #0
    526a:	bfd4      	ite	le
    526c:	2300      	movle	r3, #0
    526e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    5270:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5274:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    5278:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    527a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    527e:	702b      	strb	r3, [r5, #0]
	return bps;
    5280:	e5f8      	b.n	4e74 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    5282:	a907      	add	r1, sp, #28
    5284:	a808      	add	r0, sp, #32
    5286:	e9cd 2304 	strd	r2, r3, [sp, #16]
    528a:	f01d fc04 	bl	22a96 <_get_digit>
		if (*buf++ != '0') {
    528e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    5292:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    5296:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    529a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    529c:	bf18      	it	ne
    529e:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    52a2:	0688      	lsls	r0, r1, #26
    52a4:	d402      	bmi.n	52ac <cbvprintf+0xb90>
    52a6:	f1b8 0f00 	cmp.w	r8, #0
    52aa:	dd12      	ble.n	52d2 <cbvprintf+0xbb6>
			*buf++ = '.';
    52ac:	212e      	movs	r1, #46	; 0x2e
    52ae:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    52b2:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    52b6:	e7a2      	b.n	51fe <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    52b8:	a907      	add	r1, sp, #28
    52ba:	a808      	add	r0, sp, #32
    52bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    52c0:	f01d fbe9 	bl	22a96 <_get_digit>
		precision--;
    52c4:	f108 38ff 	add.w	r8, r8, #4294967295
    52c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    52cc:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    52d0:	e795      	b.n	51fe <cbvprintf+0xae2>
		if (*buf++ != '0') {
    52d2:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    52d6:	e798      	b.n	520a <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    52d8:	2100      	movs	r1, #0
    52da:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    52dc:	4628      	mov	r0, r5
    52de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    52e2:	2930      	cmp	r1, #48	; 0x30
    52e4:	d0fa      	beq.n	52dc <cbvprintf+0xbc0>
		if (*buf != '.') {
    52e6:	292e      	cmp	r1, #46	; 0x2e
    52e8:	bf18      	it	ne
    52ea:	4605      	movne	r5, r0
    52ec:	e792      	b.n	5214 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    52ee:	2301      	movs	r3, #1
    52f0:	e7be      	b.n	5270 <cbvprintf+0xb54>
			bpe = bps + 5;
    52f2:	4d4b      	ldr	r5, [pc, #300]	; (5420 <cbvprintf+0xd04>)
		char sign = 0;
    52f4:	4607      	mov	r7, r0
			bps = "(nil)";
    52f6:	1f6a      	subs	r2, r5, #5
    52f8:	e5bd      	b.n	4e76 <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    52fa:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    52fc:	bf48      	it	mi
    52fe:	3301      	addmi	r3, #1
    5300:	e5c2      	b.n	4e88 <cbvprintf+0x76c>
					OUTC(pad);
    5302:	4651      	mov	r1, sl
    5304:	4640      	mov	r0, r8
    5306:	9203      	str	r2, [sp, #12]
    5308:	47c8      	blx	r9
    530a:	2800      	cmp	r0, #0
    530c:	9a03      	ldr	r2, [sp, #12]
    530e:	f6bf addf 	bge.w	4ed0 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    5312:	b01b      	add	sp, #108	; 0x6c
    5314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5318:	f04f 0820 	mov.w	r8, #32
    531c:	e5d7      	b.n	4ece <cbvprintf+0x7b2>
					pad = '0';
    531e:	f04f 0830 	mov.w	r8, #48	; 0x30
    5322:	e5d4      	b.n	4ece <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    5324:	4690      	mov	r8, r2
    5326:	9b03      	ldr	r3, [sp, #12]
    5328:	4647      	mov	r7, r8
    532a:	4443      	add	r3, r8
				while (*cp != 'p') {
    532c:	f818 0b01 	ldrb.w	r0, [r8], #1
    5330:	2870      	cmp	r0, #112	; 0x70
    5332:	d11e      	bne.n	5372 <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    5334:	461e      	mov	r6, r3
    5336:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5338:	eb03 0806 	add.w	r8, r3, r6
    533c:	eba8 0306 	sub.w	r3, r8, r6
    5340:	2b00      	cmp	r3, #0
    5342:	dc3b      	bgt.n	53bc <cbvprintf+0xca0>
			OUTS(cp, bpe);
    5344:	462b      	mov	r3, r5
    5346:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    5348:	4651      	mov	r1, sl
    534a:	4648      	mov	r0, r9
    534c:	f01d fc00 	bl	22b50 <outs>
    5350:	2800      	cmp	r0, #0
    5352:	dbde      	blt.n	5312 <cbvprintf+0xbf6>
    5354:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    5356:	4606      	mov	r6, r0
    5358:	4483      	add	fp, r0
		while (width > 0) {
    535a:	ebab 0306 	sub.w	r3, fp, r6
    535e:	2b00      	cmp	r3, #0
    5360:	f77f ac41 	ble.w	4be6 <cbvprintf+0x4ca>
			OUTC(' ');
    5364:	4651      	mov	r1, sl
    5366:	2020      	movs	r0, #32
    5368:	47c8      	blx	r9
    536a:	2800      	cmp	r0, #0
    536c:	dbd1      	blt.n	5312 <cbvprintf+0xbf6>
    536e:	3601      	adds	r6, #1
			--width;
    5370:	e7f3      	b.n	535a <cbvprintf+0xc3e>
					OUTC(*cp++);
    5372:	4651      	mov	r1, sl
    5374:	47c8      	blx	r9
    5376:	2800      	cmp	r0, #0
    5378:	dad5      	bge.n	5326 <cbvprintf+0xc0a>
    537a:	e7ca      	b.n	5312 <cbvprintf+0xbf6>
					OUTC(*cp++);
    537c:	4651      	mov	r1, sl
    537e:	47c8      	blx	r9
    5380:	2800      	cmp	r0, #0
    5382:	f6bf adc6 	bge.w	4f12 <cbvprintf+0x7f6>
    5386:	e7c4      	b.n	5312 <cbvprintf+0xbf6>
						OUTC('0');
    5388:	4651      	mov	r1, sl
    538a:	2030      	movs	r0, #48	; 0x30
    538c:	47c8      	blx	r9
    538e:	2800      	cmp	r0, #0
    5390:	f6bf add1 	bge.w	4f36 <cbvprintf+0x81a>
    5394:	e7bd      	b.n	5312 <cbvprintf+0xbf6>
						OUTC('0');
    5396:	4651      	mov	r1, sl
    5398:	2030      	movs	r0, #48	; 0x30
    539a:	47c8      	blx	r9
    539c:	3f01      	subs	r7, #1
    539e:	e5d8      	b.n	4f52 <cbvprintf+0x836>
					OUTC(*cp++);
    53a0:	4651      	mov	r1, sl
    53a2:	47c8      	blx	r9
    53a4:	2800      	cmp	r0, #0
    53a6:	dbb4      	blt.n	5312 <cbvprintf+0xbf6>
    53a8:	4647      	mov	r7, r8
    53aa:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    53ae:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    53b2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    53b6:	2a09      	cmp	r2, #9
    53b8:	d9f2      	bls.n	53a0 <cbvprintf+0xc84>
    53ba:	e7bb      	b.n	5334 <cbvprintf+0xc18>
				OUTC('0');
    53bc:	4651      	mov	r1, sl
    53be:	2030      	movs	r0, #48	; 0x30
    53c0:	47c8      	blx	r9
    53c2:	2800      	cmp	r0, #0
    53c4:	dba5      	blt.n	5312 <cbvprintf+0xbf6>
    53c6:	3601      	adds	r6, #1
    53c8:	e7b8      	b.n	533c <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    53ca:	06d8      	lsls	r0, r3, #27
    53cc:	d401      	bmi.n	53d2 <cbvprintf+0xcb6>
    53ce:	0719      	lsls	r1, r3, #28
    53d0:	d507      	bpl.n	53e2 <cbvprintf+0xcc6>
				OUTC('0');
    53d2:	4651      	mov	r1, sl
    53d4:	2030      	movs	r0, #48	; 0x30
    53d6:	9203      	str	r2, [sp, #12]
    53d8:	47c8      	blx	r9
    53da:	2800      	cmp	r0, #0
    53dc:	db99      	blt.n	5312 <cbvprintf+0xbf6>
    53de:	9a03      	ldr	r2, [sp, #12]
    53e0:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    53e2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    53e6:	06db      	lsls	r3, r3, #27
    53e8:	d508      	bpl.n	53fc <cbvprintf+0xce0>
				OUTC(conv->specifier);
    53ea:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    53ee:	9203      	str	r2, [sp, #12]
    53f0:	4651      	mov	r1, sl
    53f2:	47c8      	blx	r9
    53f4:	2800      	cmp	r0, #0
    53f6:	db8c      	blt.n	5312 <cbvprintf+0xbf6>
    53f8:	9a03      	ldr	r2, [sp, #12]
    53fa:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    53fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    53fe:	4437      	add	r7, r6
    5400:	1bbb      	subs	r3, r7, r6
    5402:	2b00      	cmp	r3, #0
    5404:	dc01      	bgt.n	540a <cbvprintf+0xcee>
			OUTS(bps, bpe);
    5406:	462b      	mov	r3, r5
    5408:	e79e      	b.n	5348 <cbvprintf+0xc2c>
				OUTC('0');
    540a:	4651      	mov	r1, sl
    540c:	2030      	movs	r0, #48	; 0x30
    540e:	9203      	str	r2, [sp, #12]
    5410:	47c8      	blx	r9
    5412:	2800      	cmp	r0, #0
    5414:	f6ff af7d 	blt.w	5312 <cbvprintf+0xbf6>
    5418:	9a03      	ldr	r2, [sp, #12]
    541a:	3601      	adds	r6, #1
    541c:	e7f0      	b.n	5400 <cbvprintf+0xce4>
    541e:	bf00      	nop
    5420:	0002bf02 	.word	0x0002bf02

00005424 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5424:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    5426:	4910      	ldr	r1, [pc, #64]	; (5468 <enable_logger+0x44>)
    5428:	4810      	ldr	r0, [pc, #64]	; (546c <enable_logger+0x48>)
{
    542a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    542c:	2200      	movs	r2, #0
    542e:	f022 fbbe 	bl	27bae <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5432:	4d0f      	ldr	r5, [pc, #60]	; (5470 <enable_logger+0x4c>)
    5434:	490f      	ldr	r1, [pc, #60]	; (5474 <enable_logger+0x50>)
    5436:	2200      	movs	r2, #0
    5438:	2300      	movs	r3, #0
    543a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    543e:	2400      	movs	r4, #0
    5440:	230e      	movs	r3, #14
    5442:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5446:	e9cd 4401 	strd	r4, r4, [sp, #4]
    544a:	4b0b      	ldr	r3, [pc, #44]	; (5478 <enable_logger+0x54>)
    544c:	9400      	str	r4, [sp, #0]
    544e:	f44f 7240 	mov.w	r2, #768	; 0x300
    5452:	4628      	mov	r0, r5
    5454:	f01b fc78 	bl	20d48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5458:	4908      	ldr	r1, [pc, #32]	; (547c <enable_logger+0x58>)
    545a:	4628      	mov	r0, r5
    545c:	f022 fab9 	bl	279d2 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5460:	4620      	mov	r0, r4
    5462:	b009      	add	sp, #36	; 0x24
    5464:	bd30      	pop	{r4, r5, pc}
    5466:	bf00      	nop
    5468:	00005481 	.word	0x00005481
    546c:	2000a598 	.word	0x2000a598
    5470:	2000a5d0 	.word	0x2000a5d0
    5474:	20010800 	.word	0x20010800
    5478:	000057d9 	.word	0x000057d9
    547c:	0002bf03 	.word	0x0002bf03

00005480 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5480:	4801      	ldr	r0, [pc, #4]	; (5488 <log_process_thread_timer_expiry_fn+0x8>)
    5482:	f01b bbc9 	b.w	20c18 <z_impl_k_sem_give>
    5486:	bf00      	nop
    5488:	2000a0d4 	.word	0x2000a0d4

0000548c <log_core_init>:
{
    548c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    548e:	f000 fa67 	bl	5960 <log_msg_pool_init>
		log_list_init(&list);
    5492:	4809      	ldr	r0, [pc, #36]	; (54b8 <log_core_init+0x2c>)
    5494:	f01d fb73 	bl	22b7e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    5498:	2304      	movs	r3, #4
    549a:	2228      	movs	r2, #40	; 0x28
    549c:	4907      	ldr	r1, [pc, #28]	; (54bc <log_core_init+0x30>)
    549e:	4808      	ldr	r0, [pc, #32]	; (54c0 <log_core_init+0x34>)
    54a0:	f022 f898 	bl	275d4 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    54a4:	4b07      	ldr	r3, [pc, #28]	; (54c4 <log_core_init+0x38>)
    54a6:	4a08      	ldr	r2, [pc, #32]	; (54c8 <log_core_init+0x3c>)
    54a8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    54aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    54ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    54b2:	f000 bc9d 	b.w	5df0 <log_output_timestamp_freq_set>
    54b6:	bf00      	nop
    54b8:	2000d960 	.word	0x2000d960
    54bc:	200134d0 	.word	0x200134d0
    54c0:	2000d968 	.word	0x2000d968
    54c4:	200002c4 	.word	0x200002c4
    54c8:	00022bbd 	.word	0x00022bbd

000054cc <dropped_notify>:
{
    54cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    54ce:	4b0f      	ldr	r3, [pc, #60]	; (550c <dropped_notify+0x40>)
    54d0:	f3bf 8f5b 	dmb	ish
    54d4:	2500      	movs	r5, #0
    54d6:	e853 7f00 	ldrex	r7, [r3]
    54da:	e843 5200 	strex	r2, r5, [r3]
    54de:	2a00      	cmp	r2, #0
    54e0:	d1f9      	bne.n	54d6 <dropped_notify+0xa>
    54e2:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    54e6:	4c0a      	ldr	r4, [pc, #40]	; (5510 <dropped_notify+0x44>)
    54e8:	4e0a      	ldr	r6, [pc, #40]	; (5514 <dropped_notify+0x48>)
    54ea:	1b36      	subs	r6, r6, r4
    54ec:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    54ee:	42b5      	cmp	r5, r6
    54f0:	db00      	blt.n	54f4 <dropped_notify+0x28>
}
    54f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    54f4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    54f6:	795b      	ldrb	r3, [r3, #5]
    54f8:	b12b      	cbz	r3, 5506 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    54fa:	6823      	ldr	r3, [r4, #0]
    54fc:	68db      	ldr	r3, [r3, #12]
    54fe:	b113      	cbz	r3, 5506 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    5500:	4639      	mov	r1, r7
    5502:	4620      	mov	r0, r4
    5504:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5506:	3501      	adds	r5, #1
    5508:	3410      	adds	r4, #16
    550a:	e7f0      	b.n	54ee <dropped_notify+0x22>
    550c:	2000d958 	.word	0x2000d958
    5510:	0002832c 	.word	0x0002832c
    5514:	0002834c 	.word	0x0002834c

00005518 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5518:	4b06      	ldr	r3, [pc, #24]	; (5534 <log_dropped+0x1c>)
    551a:	f3bf 8f5b 	dmb	ish
    551e:	e853 2f00 	ldrex	r2, [r3]
    5522:	3201      	adds	r2, #1
    5524:	e843 2100 	strex	r1, r2, [r3]
    5528:	2900      	cmp	r1, #0
    552a:	d1f8      	bne.n	551e <log_dropped+0x6>
    552c:	f3bf 8f5b 	dmb	ish
}
    5530:	4770      	bx	lr
    5532:	bf00      	nop
    5534:	2000d958 	.word	0x2000d958

00005538 <log_source_name_get>:
    5538:	4a04      	ldr	r2, [pc, #16]	; (554c <log_source_name_get+0x14>)
    553a:	4b05      	ldr	r3, [pc, #20]	; (5550 <log_source_name_get+0x18>)
    553c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    553e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    5542:	bf34      	ite	cc
    5544:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    5548:	2000      	movcs	r0, #0
}
    554a:	4770      	bx	lr
    554c:	000281b4 	.word	0x000281b4
    5550:	0002832c 	.word	0x0002832c

00005554 <log_backend_enable>:
	id += backend - log_backend_get(0);
    5554:	4a09      	ldr	r2, [pc, #36]	; (557c <log_backend_enable+0x28>)
	backend->cb->id = id;
    5556:	6843      	ldr	r3, [r0, #4]
    5558:	1a80      	subs	r0, r0, r2
{
    555a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    555c:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    555e:	4c08      	ldr	r4, [pc, #32]	; (5580 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    5560:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    5562:	3001      	adds	r0, #1
	backend->cb->active = true;
    5564:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    5566:	7118      	strb	r0, [r3, #4]
    5568:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    556a:	7823      	ldrb	r3, [r4, #0]
    556c:	b913      	cbnz	r3, 5574 <log_backend_enable+0x20>
    556e:	4805      	ldr	r0, [pc, #20]	; (5584 <log_backend_enable+0x30>)
    5570:	f01b fb52 	bl	20c18 <z_impl_k_sem_give>
	backend_attached = true;
    5574:	2301      	movs	r3, #1
    5576:	7023      	strb	r3, [r4, #0]
}
    5578:	bd10      	pop	{r4, pc}
    557a:	bf00      	nop
    557c:	0002832c 	.word	0x0002832c
    5580:	2000f59d 	.word	0x2000f59d
    5584:	2000a0d4 	.word	0x2000a0d4

00005588 <log_init>:
{
    5588:	b570      	push	{r4, r5, r6, lr}
    558a:	4b11      	ldr	r3, [pc, #68]	; (55d0 <log_init+0x48>)
    558c:	f3bf 8f5b 	dmb	ish
    5590:	e853 5f00 	ldrex	r5, [r3]
    5594:	1c6a      	adds	r2, r5, #1
    5596:	e843 2100 	strex	r1, r2, [r3]
    559a:	2900      	cmp	r1, #0
    559c:	d1f8      	bne.n	5590 <log_init+0x8>
    559e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    55a2:	b92d      	cbnz	r5, 55b0 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    55a4:	4c0b      	ldr	r4, [pc, #44]	; (55d4 <log_init+0x4c>)
    55a6:	4e0c      	ldr	r6, [pc, #48]	; (55d8 <log_init+0x50>)
    55a8:	1b36      	subs	r6, r6, r4
    55aa:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    55ac:	42b5      	cmp	r5, r6
    55ae:	db00      	blt.n	55b2 <log_init+0x2a>
}
    55b0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    55b2:	7b23      	ldrb	r3, [r4, #12]
    55b4:	b143      	cbz	r3, 55c8 <log_init+0x40>
			if (backend->api->init != NULL) {
    55b6:	6823      	ldr	r3, [r4, #0]
    55b8:	695b      	ldr	r3, [r3, #20]
    55ba:	b103      	cbz	r3, 55be <log_init+0x36>
				backend->api->init();
    55bc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    55be:	2204      	movs	r2, #4
    55c0:	2100      	movs	r1, #0
    55c2:	4620      	mov	r0, r4
    55c4:	f7ff ffc6 	bl	5554 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    55c8:	3501      	adds	r5, #1
    55ca:	3410      	adds	r4, #16
    55cc:	e7ee      	b.n	55ac <log_init+0x24>
    55ce:	bf00      	nop
    55d0:	2000d95c 	.word	0x2000d95c
    55d4:	0002832c 	.word	0x0002832c
    55d8:	0002834c 	.word	0x0002834c

000055dc <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    55dc:	4b16      	ldr	r3, [pc, #88]	; (5638 <log_strdup+0x5c>)
    55de:	4298      	cmp	r0, r3
{
    55e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    55e2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    55e4:	d302      	bcc.n	55ec <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    55e6:	4b15      	ldr	r3, [pc, #84]	; (563c <log_strdup+0x60>)
    55e8:	4298      	cmp	r0, r3
    55ea:	d320      	bcc.n	562e <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    55ec:	4814      	ldr	r0, [pc, #80]	; (5640 <log_strdup+0x64>)
    55ee:	2200      	movs	r2, #0
    55f0:	2300      	movs	r3, #0
    55f2:	a901      	add	r1, sp, #4
    55f4:	f01a fe42 	bl	2027c <k_mem_slab_alloc>
	if (err != 0) {
    55f8:	4605      	mov	r5, r0
    55fa:	b9d8      	cbnz	r0, 5634 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    55fc:	2201      	movs	r2, #1
    55fe:	9b01      	ldr	r3, [sp, #4]
    5600:	f3bf 8f5b 	dmb	ish
    5604:	e853 1f00 	ldrex	r1, [r3]
    5608:	e843 2000 	strex	r0, r2, [r3]
    560c:	2800      	cmp	r0, #0
    560e:	d1f9      	bne.n	5604 <log_strdup+0x28>
    5610:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    5614:	9801      	ldr	r0, [sp, #4]
    5616:	4621      	mov	r1, r4
    5618:	221f      	movs	r2, #31
    561a:	3004      	adds	r0, #4
    561c:	f01f fac8 	bl	24bb0 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    5620:	9c01      	ldr	r4, [sp, #4]
    5622:	237e      	movs	r3, #126	; 0x7e
    5624:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    5628:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    562c:	3404      	adds	r4, #4
}
    562e:	4620      	mov	r0, r4
    5630:	b003      	add	sp, #12
    5632:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    5634:	4c03      	ldr	r4, [pc, #12]	; (5644 <log_strdup+0x68>)
    5636:	e7fa      	b.n	562e <log_strdup+0x52>
    5638:	00027eb8 	.word	0x00027eb8
    563c:	0002e584 	.word	0x0002e584
    5640:	2000d968 	.word	0x2000d968
    5644:	0002bf0b 	.word	0x0002bf0b

00005648 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    5648:	b148      	cbz	r0, 565e <log_is_strdup+0x16>
    564a:	4b05      	ldr	r3, [pc, #20]	; (5660 <log_is_strdup+0x18>)
    564c:	4298      	cmp	r0, r3
    564e:	d305      	bcc.n	565c <log_is_strdup+0x14>
    5650:	33a0      	adds	r3, #160	; 0xa0
    5652:	4298      	cmp	r0, r3
    5654:	bf2c      	ite	cs
    5656:	2000      	movcs	r0, #0
    5658:	2001      	movcc	r0, #1
    565a:	4770      	bx	lr
    565c:	2000      	movs	r0, #0
}
    565e:	4770      	bx	lr
    5660:	200134d0 	.word	0x200134d0

00005664 <z_impl_log_process>:
{
    5664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    5668:	4b4d      	ldr	r3, [pc, #308]	; (57a0 <z_impl_log_process+0x13c>)
    566a:	781b      	ldrb	r3, [r3, #0]
{
    566c:	b085      	sub	sp, #20
    566e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    5670:	b903      	cbnz	r3, 5674 <z_impl_log_process+0x10>
    5672:	b360      	cbz	r0, 56ce <z_impl_log_process+0x6a>
    5674:	f04f 0320 	mov.w	r3, #32
    5678:	f3ef 8611 	mrs	r6, BASEPRI
    567c:	f383 8811 	msr	BASEPRI, r3
    5680:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    5684:	4847      	ldr	r0, [pc, #284]	; (57a4 <z_impl_log_process+0x140>)
    5686:	f01d fa8a 	bl	22b9e <log_list_head_get>
    568a:	4605      	mov	r5, r0
	__asm__ volatile(
    568c:	f386 8811 	msr	BASEPRI, r6
    5690:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    5694:	b178      	cbz	r0, 56b6 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5696:	f3bf 8f5b 	dmb	ish
    569a:	4b43      	ldr	r3, [pc, #268]	; (57a8 <z_impl_log_process+0x144>)
    569c:	e853 2f00 	ldrex	r2, [r3]
    56a0:	3a01      	subs	r2, #1
    56a2:	e843 2100 	strex	r1, r2, [r3]
    56a6:	2900      	cmp	r1, #0
    56a8:	d1f8      	bne.n	569c <z_impl_log_process+0x38>
    56aa:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    56ae:	b194      	cbz	r4, 56d6 <z_impl_log_process+0x72>
	log_msg_put(msg);
    56b0:	4628      	mov	r0, r5
    56b2:	f01d fb8d 	bl	22dd0 <log_msg_put>
	if (!bypass && dropped_cnt) {
    56b6:	b924      	cbnz	r4, 56c2 <z_impl_log_process+0x5e>
    56b8:	4b3c      	ldr	r3, [pc, #240]	; (57ac <z_impl_log_process+0x148>)
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	b10b      	cbz	r3, 56c2 <z_impl_log_process+0x5e>
		dropped_notify();
    56be:	f7ff ff05 	bl	54cc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    56c2:	4838      	ldr	r0, [pc, #224]	; (57a4 <z_impl_log_process+0x140>)
    56c4:	f01d fa69 	bl	22b9a <log_list_head_peek>
    56c8:	1e04      	subs	r4, r0, #0
    56ca:	bf18      	it	ne
    56cc:	2401      	movne	r4, #1
}
    56ce:	4620      	mov	r0, r4
    56d0:	b005      	add	sp, #20
    56d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    56d6:	4b36      	ldr	r3, [pc, #216]	; (57b0 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	b9e3      	cbnz	r3, 5716 <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    56dc:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    56de:	07db      	lsls	r3, r3, #31
    56e0:	d419      	bmi.n	5716 <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    56e2:	f01d fb88 	bl	22df6 <log_msg_str_get>
    56e6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    56e8:	4628      	mov	r0, r5
    56ea:	f01d fb4f 	bl	22d8c <log_msg_nargs_get>
    56ee:	4601      	mov	r1, r0
    56f0:	4638      	mov	r0, r7
    56f2:	f01d fa67 	bl	22bc4 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    56f6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 57b4 <z_impl_log_process+0x150>
    56fa:	4b2f      	ldr	r3, [pc, #188]	; (57b8 <z_impl_log_process+0x154>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    56fc:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 57bc <z_impl_log_process+0x158>
    5700:	eba3 0308 	sub.w	r3, r3, r8
    5704:	08db      	lsrs	r3, r3, #3
    5706:	9303      	str	r3, [sp, #12]
    5708:	4b2d      	ldr	r3, [pc, #180]	; (57c0 <z_impl_log_process+0x15c>)
    570a:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    570e:	4606      	mov	r6, r0
    5710:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    5714:	b936      	cbnz	r6, 5724 <z_impl_log_process+0xc0>
    5716:	4e2b      	ldr	r6, [pc, #172]	; (57c4 <z_impl_log_process+0x160>)
    5718:	4f2b      	ldr	r7, [pc, #172]	; (57c8 <z_impl_log_process+0x164>)
    571a:	1bbf      	subs	r7, r7, r6
    571c:	113f      	asrs	r7, r7, #4
    571e:	f04f 0800 	mov.w	r8, #0
    5722:	e03a      	b.n	579a <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    5724:	fab6 f186 	clz	r1, r6
    5728:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    572c:	4649      	mov	r1, r9
    572e:	4628      	mov	r0, r5
    5730:	f01d fb2f 	bl	22d92 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    5734:	4b25      	ldr	r3, [pc, #148]	; (57cc <z_impl_log_process+0x168>)
    5736:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    5738:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    573a:	d302      	bcc.n	5742 <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    573c:	4a24      	ldr	r2, [pc, #144]	; (57d0 <z_impl_log_process+0x16c>)
    573e:	4290      	cmp	r0, r2
    5740:	d31a      	bcc.n	5778 <z_impl_log_process+0x114>
    5742:	4608      	mov	r0, r1
    5744:	f7ff ff80 	bl	5648 <log_is_strdup>
    5748:	4602      	mov	r2, r0
    574a:	b9a8      	cbnz	r0, 5778 <z_impl_log_process+0x114>
    574c:	4b21      	ldr	r3, [pc, #132]	; (57d4 <z_impl_log_process+0x170>)
    574e:	4299      	cmp	r1, r3
    5750:	d012      	beq.n	5778 <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    5752:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5754:	9903      	ldr	r1, [sp, #12]
    5756:	f3c3 1389 	ubfx	r3, r3, #6, #10
    575a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    575c:	bf38      	it	cc
    575e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5762:	ea4f 138a 	mov.w	r3, sl, lsl #6
    5766:	f043 0301 	orr.w	r3, r3, #1
    576a:	f8ad 3000 	strh.w	r3, [sp]
    576e:	4649      	mov	r1, r9
    5770:	463b      	mov	r3, r7
    5772:	4658      	mov	r0, fp
    5774:	f01d fa80 	bl	22c78 <log_3>
		mask &= ~BIT(idx);
    5778:	2301      	movs	r3, #1
    577a:	fa03 f109 	lsl.w	r1, r3, r9
    577e:	ea26 0601 	bic.w	r6, r6, r1
    5782:	e7c7      	b.n	5714 <z_impl_log_process+0xb0>
	return backend->cb->active;
    5784:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    5786:	795b      	ldrb	r3, [r3, #5]
    5788:	b123      	cbz	r3, 5794 <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    578a:	6833      	ldr	r3, [r6, #0]
    578c:	4629      	mov	r1, r5
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	4630      	mov	r0, r6
    5792:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5794:	f108 0801 	add.w	r8, r8, #1
    5798:	3610      	adds	r6, #16
    579a:	45b8      	cmp	r8, r7
    579c:	dbf2      	blt.n	5784 <z_impl_log_process+0x120>
    579e:	e787      	b.n	56b0 <z_impl_log_process+0x4c>
    57a0:	2000f59d 	.word	0x2000f59d
    57a4:	2000d960 	.word	0x2000d960
    57a8:	2000d954 	.word	0x2000d954
    57ac:	2000d958 	.word	0x2000d958
    57b0:	2000f59e 	.word	0x2000f59e
    57b4:	000281b4 	.word	0x000281b4
    57b8:	0002832c 	.word	0x0002832c
    57bc:	0002bf25 	.word	0x0002bf25
    57c0:	000282e4 	.word	0x000282e4
    57c4:	0002832c 	.word	0x0002832c
    57c8:	0002834c 	.word	0x0002834c
    57cc:	00027eb8 	.word	0x00027eb8
    57d0:	0002e584 	.word	0x0002e584
    57d4:	0002bf0b 	.word	0x0002bf0b

000057d8 <log_process_thread_func>:
{
    57d8:	b510      	push	{r4, lr}
	log_init();
    57da:	f7ff fed5 	bl	5588 <log_init>
	return z_impl_k_current_get();
    57de:	f01b fa15 	bl	20c0c <z_impl_k_current_get>
	proc_tid = process_tid;
    57e2:	4b0c      	ldr	r3, [pc, #48]	; (5814 <log_process_thread_func+0x3c>)
    57e4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    57e6:	b130      	cbz	r0, 57f6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    57e8:	4b0b      	ldr	r3, [pc, #44]	; (5818 <log_process_thread_func+0x40>)
	    process_tid &&
    57ea:	681b      	ldr	r3, [r3, #0]
    57ec:	2b09      	cmp	r3, #9
    57ee:	dd02      	ble.n	57f6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    57f0:	480a      	ldr	r0, [pc, #40]	; (581c <log_process_thread_func+0x44>)
    57f2:	f01b fa11 	bl	20c18 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    57f6:	4c09      	ldr	r4, [pc, #36]	; (581c <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    57f8:	2000      	movs	r0, #0
    57fa:	f7ff ff33 	bl	5664 <z_impl_log_process>
		if (log_process(false) == false) {
    57fe:	2800      	cmp	r0, #0
    5800:	d1fa      	bne.n	57f8 <log_process_thread_func+0x20>
    5802:	f04f 32ff 	mov.w	r2, #4294967295
    5806:	f04f 33ff 	mov.w	r3, #4294967295
    580a:	4620      	mov	r0, r4
    580c:	f01b fa2a 	bl	20c64 <z_impl_k_sem_take>
    5810:	e7f2      	b.n	57f8 <log_process_thread_func+0x20>
    5812:	bf00      	nop
    5814:	2000d984 	.word	0x2000d984
    5818:	2000d954 	.word	0x2000d954
    581c:	2000a0d4 	.word	0x2000a0d4

00005820 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5820:	4b29      	ldr	r3, [pc, #164]	; (58c8 <msg_finalize+0xa8>)
{
    5822:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    5824:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    5826:	8141      	strh	r1, [r0, #10]
{
    5828:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    582a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    582c:	4d27      	ldr	r5, [pc, #156]	; (58cc <msg_finalize+0xac>)
    582e:	60e0      	str	r0, [r4, #12]
    5830:	f3bf 8f5b 	dmb	ish
    5834:	e855 3f00 	ldrex	r3, [r5]
    5838:	3301      	adds	r3, #1
    583a:	e845 3200 	strex	r2, r3, [r5]
    583e:	2a00      	cmp	r2, #0
    5840:	d1f8      	bne.n	5834 <msg_finalize+0x14>
    5842:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    5846:	f04f 0320 	mov.w	r3, #32
    584a:	f3ef 8611 	mrs	r6, BASEPRI
    584e:	f383 8811 	msr	BASEPRI, r3
    5852:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5856:	481e      	ldr	r0, [pc, #120]	; (58d0 <msg_finalize+0xb0>)
    5858:	4621      	mov	r1, r4
    585a:	f01d f994 	bl	22b86 <log_list_add_tail>
	__asm__ volatile(
    585e:	f386 8811 	msr	BASEPRI, r6
    5862:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    5866:	4b1b      	ldr	r3, [pc, #108]	; (58d4 <msg_finalize+0xb4>)
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	b183      	cbz	r3, 588e <msg_finalize+0x6e>
	__asm__ volatile(
    586c:	f04f 0320 	mov.w	r3, #32
    5870:	f3ef 8411 	mrs	r4, BASEPRI
    5874:	f383 8811 	msr	BASEPRI, r3
    5878:	f3bf 8f6f 	isb	sy
    587c:	2000      	movs	r0, #0
    587e:	f7ff fef1 	bl	5664 <z_impl_log_process>
	__asm__ volatile(
    5882:	f384 8811 	msr	BASEPRI, r4
    5886:	f3bf 8f6f 	isb	sy
}
    588a:	b002      	add	sp, #8
    588c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    588e:	4a12      	ldr	r2, [pc, #72]	; (58d8 <msg_finalize+0xb8>)
    5890:	682b      	ldr	r3, [r5, #0]
    5892:	6812      	ldr	r2, [r2, #0]
    5894:	2a00      	cmp	r2, #0
    5896:	d0f8      	beq.n	588a <msg_finalize+0x6a>
    5898:	2b01      	cmp	r3, #1
    589a:	d10a      	bne.n	58b2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    589c:	2200      	movs	r2, #0
    589e:	2300      	movs	r3, #0
    58a0:	e9cd 2300 	strd	r2, r3, [sp]
    58a4:	480d      	ldr	r0, [pc, #52]	; (58dc <msg_finalize+0xbc>)
    58a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    58aa:	2300      	movs	r3, #0
    58ac:	f01b fcdc 	bl	21268 <z_impl_k_timer_start>
    58b0:	e7eb      	b.n	588a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    58b2:	2b0a      	cmp	r3, #10
    58b4:	d1e9      	bne.n	588a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    58b6:	4809      	ldr	r0, [pc, #36]	; (58dc <msg_finalize+0xbc>)
    58b8:	f022 f985 	bl	27bc6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    58bc:	4808      	ldr	r0, [pc, #32]	; (58e0 <msg_finalize+0xc0>)
}
    58be:	b002      	add	sp, #8
    58c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    58c4:	f01b b9a8 	b.w	20c18 <z_impl_k_sem_give>
    58c8:	200002c4 	.word	0x200002c4
    58cc:	2000d954 	.word	0x2000d954
    58d0:	2000d960 	.word	0x2000d960
    58d4:	2000f59e 	.word	0x2000f59e
    58d8:	2000d984 	.word	0x2000d984
    58dc:	2000a598 	.word	0x2000a598
    58e0:	2000a0d4 	.word	0x2000a0d4

000058e4 <z_impl_log_panic>:
{
    58e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    58e6:	4f0e      	ldr	r7, [pc, #56]	; (5920 <z_impl_log_panic+0x3c>)
    58e8:	783d      	ldrb	r5, [r7, #0]
    58ea:	b975      	cbnz	r5, 590a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    58ec:	4c0d      	ldr	r4, [pc, #52]	; (5924 <z_impl_log_panic+0x40>)
    58ee:	4e0e      	ldr	r6, [pc, #56]	; (5928 <z_impl_log_panic+0x44>)
	log_init();
    58f0:	f7ff fe4a 	bl	5588 <log_init>
    58f4:	1b36      	subs	r6, r6, r4
    58f6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    58f8:	42b5      	cmp	r5, r6
    58fa:	db07      	blt.n	590c <z_impl_log_panic+0x28>
    58fc:	2000      	movs	r0, #0
    58fe:	f7ff feb1 	bl	5664 <z_impl_log_process>
		while (log_process(false) == true) {
    5902:	2800      	cmp	r0, #0
    5904:	d1fa      	bne.n	58fc <z_impl_log_panic+0x18>
	panic_mode = true;
    5906:	2301      	movs	r3, #1
    5908:	703b      	strb	r3, [r7, #0]
}
    590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    590c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    590e:	795b      	ldrb	r3, [r3, #5]
    5910:	b11b      	cbz	r3, 591a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5912:	6823      	ldr	r3, [r4, #0]
    5914:	4620      	mov	r0, r4
    5916:	691b      	ldr	r3, [r3, #16]
    5918:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    591a:	3501      	adds	r5, #1
    591c:	3410      	adds	r4, #16
    591e:	e7eb      	b.n	58f8 <z_impl_log_panic+0x14>
    5920:	2000f59e 	.word	0x2000f59e
    5924:	0002832c 	.word	0x0002832c
    5928:	0002834c 	.word	0x0002834c

0000592c <log_free>:
{
    592c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    592e:	3804      	subs	r0, #4
    5930:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5932:	f3bf 8f5b 	dmb	ish
    5936:	e850 3f00 	ldrex	r3, [r0]
    593a:	1e5a      	subs	r2, r3, #1
    593c:	e840 2100 	strex	r1, r2, [r0]
    5940:	2900      	cmp	r1, #0
    5942:	d1f8      	bne.n	5936 <log_free+0xa>
    5944:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5948:	2b01      	cmp	r3, #1
    594a:	d103      	bne.n	5954 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    594c:	4803      	ldr	r0, [pc, #12]	; (595c <log_free+0x30>)
    594e:	a901      	add	r1, sp, #4
    5950:	f01a fcc4 	bl	202dc <k_mem_slab_free>
}
    5954:	b003      	add	sp, #12
    5956:	f85d fb04 	ldr.w	pc, [sp], #4
    595a:	bf00      	nop
    595c:	2000d968 	.word	0x2000d968

00005960 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5960:	2320      	movs	r3, #32
    5962:	4902      	ldr	r1, [pc, #8]	; (596c <log_msg_pool_init+0xc>)
    5964:	4802      	ldr	r0, [pc, #8]	; (5970 <log_msg_pool_init+0x10>)
    5966:	461a      	mov	r2, r3
    5968:	f021 be34 	b.w	275d4 <k_mem_slab_init>
    596c:	20013570 	.word	0x20013570
    5970:	2000d988 	.word	0x2000d988

00005974 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5974:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    5976:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5978:	4d09      	ldr	r5, [pc, #36]	; (59a0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    597a:	9301      	str	r3, [sp, #4]
    597c:	2001      	movs	r0, #1
    597e:	f7ff fe71 	bl	5664 <z_impl_log_process>
    5982:	4604      	mov	r4, r0
			log_dropped();
    5984:	f7ff fdc8 	bl	5518 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5988:	2200      	movs	r2, #0
    598a:	2300      	movs	r3, #0
    598c:	a901      	add	r1, sp, #4
    598e:	4628      	mov	r0, r5
    5990:	f01a fc74 	bl	2027c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5994:	b108      	cbz	r0, 599a <log_msg_no_space_handle+0x26>
    5996:	2c00      	cmp	r4, #0
    5998:	d1f0      	bne.n	597c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    599a:	9801      	ldr	r0, [sp, #4]
    599c:	b003      	add	sp, #12
    599e:	bd30      	pop	{r4, r5, pc}
    59a0:	2000d988 	.word	0x2000d988

000059a4 <log_msg_chunk_alloc>:
{
    59a4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    59a6:	2300      	movs	r3, #0
    59a8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    59aa:	4807      	ldr	r0, [pc, #28]	; (59c8 <log_msg_chunk_alloc+0x24>)
    59ac:	2200      	movs	r2, #0
    59ae:	2300      	movs	r3, #0
    59b0:	a901      	add	r1, sp, #4
    59b2:	f01a fc63 	bl	2027c <k_mem_slab_alloc>
	if (err != 0) {
    59b6:	b110      	cbz	r0, 59be <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    59b8:	f7ff ffdc 	bl	5974 <log_msg_no_space_handle>
    59bc:	9001      	str	r0, [sp, #4]
}
    59be:	9801      	ldr	r0, [sp, #4]
    59c0:	b003      	add	sp, #12
    59c2:	f85d fb04 	ldr.w	pc, [sp], #4
    59c6:	bf00      	nop
    59c8:	2000d988 	.word	0x2000d988

000059cc <msg_free>:
{
    59cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    59ce:	7a03      	ldrb	r3, [r0, #8]
    59d0:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    59d2:	07dc      	lsls	r4, r3, #31
{
    59d4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    59d6:	d41e      	bmi.n	5a16 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    59d8:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    59da:	092d      	lsrs	r5, r5, #4
    59dc:	d01b      	beq.n	5a16 <msg_free+0x4a>
		uint32_t smask = 0;
    59de:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    59e0:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    59e2:	9801      	ldr	r0, [sp, #4]
    59e4:	4631      	mov	r1, r6
    59e6:	f01d f9d4 	bl	22d92 <log_msg_arg_get>
    59ea:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    59ec:	f7ff fe2c 	bl	5648 <log_is_strdup>
    59f0:	b170      	cbz	r0, 5a10 <msg_free+0x44>
				if (smask == 0) {
    59f2:	b934      	cbnz	r4, 5a02 <msg_free+0x36>
					smask = z_log_get_s_mask(
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	4629      	mov	r1, r5
    59f8:	6918      	ldr	r0, [r3, #16]
    59fa:	f01d f8e3 	bl	22bc4 <z_log_get_s_mask>
					if (smask == 0) {
    59fe:	4604      	mov	r4, r0
    5a00:	b148      	cbz	r0, 5a16 <msg_free+0x4a>
				if (smask & BIT(i)) {
    5a02:	fa24 f306 	lsr.w	r3, r4, r6
    5a06:	07d9      	lsls	r1, r3, #31
    5a08:	d502      	bpl.n	5a10 <msg_free+0x44>
					log_free(buf);
    5a0a:	4638      	mov	r0, r7
    5a0c:	f7ff ff8e 	bl	592c <log_free>
		for (i = 0; i < nargs; i++) {
    5a10:	3601      	adds	r6, #1
    5a12:	42ae      	cmp	r6, r5
    5a14:	d3e5      	bcc.n	59e2 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5a16:	9b01      	ldr	r3, [sp, #4]
    5a18:	7a1a      	ldrb	r2, [r3, #8]
    5a1a:	0792      	lsls	r2, r2, #30
    5a1c:	d504      	bpl.n	5a28 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5a1e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5a20:	4c08      	ldr	r4, [pc, #32]	; (5a44 <msg_free+0x78>)
    5a22:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5a24:	9b03      	ldr	r3, [sp, #12]
    5a26:	b92b      	cbnz	r3, 5a34 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5a28:	4806      	ldr	r0, [pc, #24]	; (5a44 <msg_free+0x78>)
    5a2a:	a901      	add	r1, sp, #4
    5a2c:	f01a fc56 	bl	202dc <k_mem_slab_free>
}
    5a30:	b005      	add	sp, #20
    5a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5a34:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5a36:	a903      	add	r1, sp, #12
    5a38:	4620      	mov	r0, r4
    5a3a:	f01a fc4f 	bl	202dc <k_mem_slab_free>
		cont = next;
    5a3e:	9503      	str	r5, [sp, #12]
    5a40:	e7f0      	b.n	5a24 <msg_free+0x58>
    5a42:	bf00      	nop
    5a44:	2000d988 	.word	0x2000d988

00005a48 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    5a48:	b40e      	push	{r1, r2, r3}
    5a4a:	b503      	push	{r0, r1, lr}
    5a4c:	ab03      	add	r3, sp, #12
    5a4e:	4601      	mov	r1, r0
    5a50:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5a54:	4804      	ldr	r0, [pc, #16]	; (5a68 <print_formatted+0x20>)
	va_start(args, fmt);
    5a56:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5a58:	f7fe fe60 	bl	471c <cbvprintf>
	va_end(args);

	return length;
}
    5a5c:	b002      	add	sp, #8
    5a5e:	f85d eb04 	ldr.w	lr, [sp], #4
    5a62:	b003      	add	sp, #12
    5a64:	4770      	bx	lr
    5a66:	bf00      	nop
    5a68:	000231af 	.word	0x000231af

00005a6c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a70:	461d      	mov	r5, r3
    5a72:	9b08      	ldr	r3, [sp, #32]
    5a74:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5a76:	06da      	lsls	r2, r3, #27
{
    5a78:	4604      	mov	r4, r0
    5a7a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5a7c:	d405      	bmi.n	5a8a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5a7e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5a80:	bf4c      	ite	mi
    5a82:	492a      	ldrmi	r1, [pc, #168]	; (5b2c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    5a84:	492a      	ldrpl	r1, [pc, #168]	; (5b30 <hexdump_line_print+0xc4>)
    5a86:	f7ff ffdf 	bl	5a48 <print_formatted>
	newline_print(log_output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(log_output, " ");
    5a8a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5b34 <hexdump_line_print+0xc8>
{
    5a8e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5a92:	45a8      	cmp	r8, r5
    5a94:	db2a      	blt.n	5aec <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    5a96:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5b38 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    5a9a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 5b3c <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    5a9e:	f8df a094 	ldr.w	sl, [pc, #148]	; 5b34 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5aa2:	2500      	movs	r5, #0
		if (i < length) {
    5aa4:	42bd      	cmp	r5, r7
    5aa6:	d22f      	bcs.n	5b08 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    5aa8:	5d72      	ldrb	r2, [r6, r5]
    5aaa:	4649      	mov	r1, r9
    5aac:	4620      	mov	r0, r4
    5aae:	f7ff ffcb 	bl	5a48 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5ab2:	3501      	adds	r5, #1
    5ab4:	2d10      	cmp	r5, #16
    5ab6:	d120      	bne.n	5afa <hexdump_line_print+0x8e>
		}
	}

	print_formatted(log_output, "|");
    5ab8:	4921      	ldr	r1, [pc, #132]	; (5b40 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(log_output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    5aba:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5b34 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    5abe:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5b44 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    5ac2:	4620      	mov	r0, r4
    5ac4:	f7ff ffc0 	bl	5a48 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5ac8:	2500      	movs	r5, #0
		if (i < length) {
    5aca:	42af      	cmp	r7, r5
    5acc:	d928      	bls.n	5b20 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    5ace:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    5ad0:	f1a2 0320 	sub.w	r3, r2, #32
    5ad4:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
    5ad6:	bf28      	it	cs
    5ad8:	222e      	movcs	r2, #46	; 0x2e
    5ada:	4649      	mov	r1, r9
    5adc:	4620      	mov	r0, r4
    5ade:	f7ff ffb3 	bl	5a48 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5ae2:	3501      	adds	r5, #1
    5ae4:	2d10      	cmp	r5, #16
    5ae6:	d114      	bne.n	5b12 <hexdump_line_print+0xa6>
		}
	}
}
    5ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    5aec:	4649      	mov	r1, r9
    5aee:	4620      	mov	r0, r4
    5af0:	f7ff ffaa 	bl	5a48 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5af4:	f108 0801 	add.w	r8, r8, #1
    5af8:	e7cb      	b.n	5a92 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5afa:	076a      	lsls	r2, r5, #29
    5afc:	d1d2      	bne.n	5aa4 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    5afe:	4651      	mov	r1, sl
    5b00:	4620      	mov	r0, r4
    5b02:	f7ff ffa1 	bl	5a48 <print_formatted>
    5b06:	e7cd      	b.n	5aa4 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    5b08:	4641      	mov	r1, r8
    5b0a:	4620      	mov	r0, r4
    5b0c:	f7ff ff9c 	bl	5a48 <print_formatted>
    5b10:	e7cf      	b.n	5ab2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5b12:	076b      	lsls	r3, r5, #29
    5b14:	d1d9      	bne.n	5aca <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5b16:	4641      	mov	r1, r8
    5b18:	4620      	mov	r0, r4
    5b1a:	f7ff ff95 	bl	5a48 <print_formatted>
    5b1e:	e7d4      	b.n	5aca <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5b20:	4641      	mov	r1, r8
    5b22:	4620      	mov	r0, r4
    5b24:	f7ff ff90 	bl	5a48 <print_formatted>
    5b28:	e7db      	b.n	5ae2 <hexdump_line_print+0x76>
    5b2a:	bf00      	nop
    5b2c:	00029eb7 	.word	0x00029eb7
    5b30:	0002a1a3 	.word	0x0002a1a3
    5b34:	0002ba00 	.word	0x0002ba00
    5b38:	0002bf6e 	.word	0x0002bf6e
    5b3c:	0002bf68 	.word	0x0002bf68
    5b40:	0002bf72 	.word	0x0002bf72
    5b44:	0002bf74 	.word	0x0002bf74

00005b48 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b4c:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5b4e:	f011 0402 	ands.w	r4, r1, #2
{
    5b52:	4690      	mov	r8, r2
    5b54:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5b58:	4606      	mov	r6, r0
    5b5a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5b5c:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5b60:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5b64:	d006      	beq.n	5b74 <prefix_print+0x2c>
	if (!format) {
    5b66:	f011 0f44 	tst.w	r1, #68	; 0x44
    5b6a:	d136      	bne.n	5bda <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5b6c:	4932      	ldr	r1, [pc, #200]	; (5c38 <prefix_print+0xf0>)
    5b6e:	f7ff ff6b 	bl	5a48 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    5b72:	4604      	mov	r4, r0
	if (color) {
    5b74:	f1b9 0f00 	cmp.w	r9, #0
    5b78:	d00a      	beq.n	5b90 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    5b7a:	4b30      	ldr	r3, [pc, #192]	; (5c3c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    5b7c:	4930      	ldr	r1, [pc, #192]	; (5c40 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    5b7e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    5b82:	4b30      	ldr	r3, [pc, #192]	; (5c44 <prefix_print+0xfc>)
    5b84:	4630      	mov	r0, r6
    5b86:	2a00      	cmp	r2, #0
    5b88:	bf08      	it	eq
    5b8a:	461a      	moveq	r2, r3
    5b8c:	f7ff ff5c 	bl	5a48 <print_formatted>
	if (level_on) {
    5b90:	b13d      	cbz	r5, 5ba2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    5b92:	4b2d      	ldr	r3, [pc, #180]	; (5c48 <prefix_print+0x100>)
    5b94:	492d      	ldr	r1, [pc, #180]	; (5c4c <prefix_print+0x104>)
    5b96:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5b9a:	4630      	mov	r0, r6
    5b9c:	f7ff ff54 	bl	5a48 <print_formatted>
    5ba0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    5ba2:	f1b8 0f00 	cmp.w	r8, #0
    5ba6:	d044      	beq.n	5c32 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5ba8:	2301      	movs	r3, #1
    5baa:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    5bae:	4b28      	ldr	r3, [pc, #160]	; (5c50 <prefix_print+0x108>)
    5bb0:	f017 0f10 	tst.w	r7, #16
    5bb4:	4f27      	ldr	r7, [pc, #156]	; (5c54 <prefix_print+0x10c>)
    5bb6:	bf18      	it	ne
    5bb8:	461f      	movne	r7, r3
    5bba:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    5bbe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    5bc2:	f7ff fcb9 	bl	5538 <log_source_name_get>
    5bc6:	4639      	mov	r1, r7
    5bc8:	4602      	mov	r2, r0
    5bca:	4630      	mov	r0, r6
    5bcc:	f7ff ff3c 	bl	5a48 <print_formatted>
    5bd0:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    5bd2:	4420      	add	r0, r4
    5bd4:	b005      	add	sp, #20
    5bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5bda:	4b1f      	ldr	r3, [pc, #124]	; (5c58 <prefix_print+0x110>)
    5bdc:	6819      	ldr	r1, [r3, #0]
    5bde:	b331      	cbz	r1, 5c2e <prefix_print+0xe6>
		timestamp /= timestamp_div;
    5be0:	4b1e      	ldr	r3, [pc, #120]	; (5c5c <prefix_print+0x114>)
    5be2:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5be6:	681b      	ldr	r3, [r3, #0]
    5be8:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5bec:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5bf0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5bf4:	fbb4 f2fc 	udiv	r2, r4, ip
    5bf8:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5bfc:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5c00:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5c04:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5c08:	fbb4 faf1 	udiv	sl, r4, r1
    5c0c:	fb01 441a 	mls	r4, r1, sl, r4
    5c10:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5c14:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5c18:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5c1c:	e9cd a101 	strd	sl, r1, [sp, #4]
    5c20:	fb0e c113 	mls	r1, lr, r3, ip
    5c24:	9100      	str	r1, [sp, #0]
    5c26:	490e      	ldr	r1, [pc, #56]	; (5c60 <prefix_print+0x118>)
    5c28:	f7ff ff0e 	bl	5a48 <print_formatted>
    5c2c:	e7a1      	b.n	5b72 <prefix_print+0x2a>
		length = 0;
    5c2e:	4608      	mov	r0, r1
    5c30:	e79f      	b.n	5b72 <prefix_print+0x2a>
	total += print_formatted(log_output,
    5c32:	4f08      	ldr	r7, [pc, #32]	; (5c54 <prefix_print+0x10c>)
    5c34:	e7c1      	b.n	5bba <prefix_print+0x72>
    5c36:	bf00      	nop
    5c38:	0002bf85 	.word	0x0002bf85
    5c3c:	00028638 	.word	0x00028638
    5c40:	0002cff3 	.word	0x0002cff3
    5c44:	0002bf77 	.word	0x0002bf77
    5c48:	0002864c 	.word	0x0002864c
    5c4c:	0002bfaa 	.word	0x0002bfaa
    5c50:	0002bf81 	.word	0x0002bf81
    5c54:	0002bf7c 	.word	0x0002bf7c
    5c58:	2000d9a4 	.word	0x2000d9a4
    5c5c:	2000d9a8 	.word	0x2000d9a8
    5c60:	0002bf8e 	.word	0x0002bf8e

00005c64 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    5c64:	b538      	push	{r3, r4, r5, lr}
    5c66:	460c      	mov	r4, r1
	if (color) {
    5c68:	07e1      	lsls	r1, r4, #31
{
    5c6a:	4605      	mov	r5, r0
	if (color) {
    5c6c:	d503      	bpl.n	5c76 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    5c6e:	4a08      	ldr	r2, [pc, #32]	; (5c90 <postfix_print+0x2c>)
    5c70:	4908      	ldr	r1, [pc, #32]	; (5c94 <postfix_print+0x30>)
    5c72:	f7ff fee9 	bl	5a48 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c76:	06e2      	lsls	r2, r4, #27
    5c78:	d408      	bmi.n	5c8c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5c7a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5c7c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5c7e:	bf4c      	ite	mi
    5c80:	4905      	ldrmi	r1, [pc, #20]	; (5c98 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5c82:	4906      	ldrpl	r1, [pc, #24]	; (5c9c <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    5c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5c88:	f7ff bede 	b.w	5a48 <print_formatted>
}
    5c8c:	bd38      	pop	{r3, r4, r5, pc}
    5c8e:	bf00      	nop
    5c90:	0002bf77 	.word	0x0002bf77
    5c94:	0002cff3 	.word	0x0002cff3
    5c98:	00029eb7 	.word	0x00029eb7
    5c9c:	0002a1a3 	.word	0x0002a1a3

00005ca0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5ca4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5ca6:	f013 0807 	ands.w	r8, r3, #7
{
    5caa:	b08a      	sub	sp, #40	; 0x28
    5cac:	4605      	mov	r5, r0
    5cae:	460e      	mov	r6, r1
    5cb0:	4617      	mov	r7, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5cb2:	d022      	beq.n	5cfa <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5cb4:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    5cb6:	8949      	ldrh	r1, [r1, #10]
    5cb8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5cbc:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5cc0:	43d2      	mvns	r2, r2
    5cc2:	e9cd 8300 	strd	r8, r3, [sp]
    5cc6:	9102      	str	r1, [sp, #8]
    5cc8:	68f3      	ldr	r3, [r6, #12]
    5cca:	f002 0201 	and.w	r2, r2, #1
    5cce:	4639      	mov	r1, r7
    5cd0:	f7ff ff3a 	bl	5b48 <prefix_print>
    5cd4:	4681      	mov	r9, r0
    5cd6:	7a34      	ldrb	r4, [r6, #8]
    5cd8:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    5cda:	f014 0401 	ands.w	r4, r4, #1
    5cde:	d00e      	beq.n	5cfe <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    5ce0:	4629      	mov	r1, r5
    5ce2:	4630      	mov	r0, r6
    5ce4:	f01d f8f9 	bl	22eda <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    5ce8:	f1b8 0f00 	cmp.w	r8, #0
    5cec:	d02b      	beq.n	5d46 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    5cee:	4642      	mov	r2, r8
    5cf0:	4639      	mov	r1, r7
    5cf2:	4628      	mov	r0, r5
    5cf4:	f7ff ffb6 	bl	5c64 <postfix_print>
    5cf8:	e025      	b.n	5d46 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5cfa:	46c1      	mov	r9, r8
    5cfc:	e7eb      	b.n	5cd6 <log_output_msg_process+0x36>
	} else if (raw_string) {
    5cfe:	f1b8 0f00 	cmp.w	r8, #0
    5d02:	d126      	bne.n	5d52 <log_output_msg_process+0xb2>
	size_t offset = 0;
    5d04:	4627      	mov	r7, r4
		length = log_output->size;
    5d06:	68eb      	ldr	r3, [r5, #12]
    5d08:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    5d0a:	aa06      	add	r2, sp, #24
    5d0c:	463b      	mov	r3, r7
    5d0e:	68a9      	ldr	r1, [r5, #8]
    5d10:	4630      	mov	r0, r6
    5d12:	f01d f8ce 	bl	22eb2 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    5d16:	9a06      	ldr	r2, [sp, #24]
    5d18:	686b      	ldr	r3, [r5, #4]
    5d1a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5d1c:	b13a      	cbz	r2, 5d2e <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    5d1e:	68ab      	ldr	r3, [r5, #8]
    5d20:	4413      	add	r3, r2
    5d22:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5d26:	f1a4 030a 	sub.w	r3, r4, #10
    5d2a:	425c      	negs	r4, r3
    5d2c:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    5d2e:	4628      	mov	r0, r5
    5d30:	f01d fa30 	bl	23194 <log_output_flush>
		offset += length;
    5d34:	9b06      	ldr	r3, [sp, #24]
    5d36:	441f      	add	r7, r3
	} while (length > 0);
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d1e4      	bne.n	5d06 <log_output_msg_process+0x66>
	if (eol) {
    5d3c:	b11c      	cbz	r4, 5d46 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    5d3e:	4914      	ldr	r1, [pc, #80]	; (5d90 <log_output_msg_process+0xf0>)
    5d40:	4628      	mov	r0, r5
    5d42:	f7ff fe81 	bl	5a48 <print_formatted>
	}

	log_output_flush(log_output);
    5d46:	4628      	mov	r0, r5
}
    5d48:	b00a      	add	sp, #40	; 0x28
    5d4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    5d4e:	f01d ba21 	b.w	23194 <log_output_flush>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5d52:	4630      	mov	r0, r6
    5d54:	f01d f84f 	bl	22df6 <log_msg_str_get>
    5d58:	490e      	ldr	r1, [pc, #56]	; (5d94 <log_output_msg_process+0xf4>)
    5d5a:	4602      	mov	r2, r0
    5d5c:	4628      	mov	r0, r5
    5d5e:	f7ff fe73 	bl	5a48 <print_formatted>
		length = sizeof(buf);
    5d62:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5d66:	aa05      	add	r2, sp, #20
    5d68:	4623      	mov	r3, r4
    5d6a:	a906      	add	r1, sp, #24
    5d6c:	4630      	mov	r0, r6
		length = sizeof(buf);
    5d6e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5d72:	f01d f89e 	bl	22eb2 <log_msg_hexdump_data_get>
		if (length) {
    5d76:	9a05      	ldr	r2, [sp, #20]
    5d78:	2a00      	cmp	r2, #0
    5d7a:	d0b8      	beq.n	5cee <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    5d7c:	464b      	mov	r3, r9
    5d7e:	9700      	str	r7, [sp, #0]
    5d80:	a906      	add	r1, sp, #24
    5d82:	4628      	mov	r0, r5
    5d84:	f7ff fe72 	bl	5a6c <hexdump_line_print>
			offset += length;
    5d88:	9b05      	ldr	r3, [sp, #20]
    5d8a:	441c      	add	r4, r3
		length = sizeof(buf);
    5d8c:	e7eb      	b.n	5d66 <log_output_msg_process+0xc6>
    5d8e:	bf00      	nop
    5d90:	0002bfb0 	.word	0x0002bfb0
    5d94:	0002cff3 	.word	0x0002cff3

00005d98 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5d9a:	f242 730f 	movw	r3, #9999	; 0x270f
    5d9e:	428b      	cmp	r3, r1
    5da0:	bf28      	it	cs
    5da2:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    5da4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5da6:	4a0f      	ldr	r2, [pc, #60]	; (5de4 <log_output_dropped_process+0x4c>)
{
    5da8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5daa:	2105      	movs	r1, #5
    5dac:	4668      	mov	r0, sp
    5dae:	f01c faa0 	bl	222f2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5db2:	6863      	ldr	r3, [r4, #4]
    5db4:	490c      	ldr	r1, [pc, #48]	; (5de8 <log_output_dropped_process+0x50>)
    5db6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5db8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5dba:	220b      	movs	r2, #11
    5dbc:	4628      	mov	r0, r5
    5dbe:	f01d f87f 	bl	22ec0 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    5dc2:	6863      	ldr	r3, [r4, #4]
    5dc4:	4632      	mov	r2, r6
    5dc6:	4669      	mov	r1, sp
    5dc8:	4628      	mov	r0, r5
    5dca:	685b      	ldr	r3, [r3, #4]
    5dcc:	f01d f878 	bl	22ec0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5dd0:	6863      	ldr	r3, [r4, #4]
    5dd2:	4906      	ldr	r1, [pc, #24]	; (5dec <log_output_dropped_process+0x54>)
    5dd4:	685b      	ldr	r3, [r3, #4]
    5dd6:	221b      	movs	r2, #27
    5dd8:	4628      	mov	r0, r5
    5dda:	f01d f871 	bl	22ec0 <buffer_write>
		     log_output->control_block->ctx);
}
    5dde:	b002      	add	sp, #8
    5de0:	bd70      	pop	{r4, r5, r6, pc}
    5de2:	bf00      	nop
    5de4:	0002cae6 	.word	0x0002cae6
    5de8:	0002bfee 	.word	0x0002bfee
    5dec:	0002bfd2 	.word	0x0002bfd2

00005df0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5df0:	4a08      	ldr	r2, [pc, #32]	; (5e14 <log_output_timestamp_freq_set+0x24>)
{
    5df2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5df4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5df6:	4c08      	ldr	r4, [pc, #32]	; (5e18 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5df8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5dfa:	2100      	movs	r1, #0
    5dfc:	42a0      	cmp	r0, r4
    5dfe:	d804      	bhi.n	5e0a <log_output_timestamp_freq_set+0x1a>
    5e00:	b101      	cbz	r1, 5e04 <log_output_timestamp_freq_set+0x14>
    5e02:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5e04:	4b05      	ldr	r3, [pc, #20]	; (5e1c <log_output_timestamp_freq_set+0x2c>)
    5e06:	6018      	str	r0, [r3, #0]
}
    5e08:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5e0a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5e0c:	005b      	lsls	r3, r3, #1
    5e0e:	2101      	movs	r1, #1
    5e10:	e7f4      	b.n	5dfc <log_output_timestamp_freq_set+0xc>
    5e12:	bf00      	nop
    5e14:	2000d9a8 	.word	0x2000d9a8
    5e18:	000f4240 	.word	0x000f4240
    5e1c:	2000d9a4 	.word	0x2000d9a4

00005e20 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    5e22:	4f07      	ldr	r7, [pc, #28]	; (5e40 <char_out+0x20>)
{
    5e24:	460d      	mov	r5, r1
    5e26:	4604      	mov	r4, r0
    5e28:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5e2a:	42b4      	cmp	r4, r6
    5e2c:	d101      	bne.n	5e32 <char_out+0x12>
	}

	return length;
}
    5e2e:	4628      	mov	r0, r5
    5e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5e32:	6838      	ldr	r0, [r7, #0]
    5e34:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5e38:	6883      	ldr	r3, [r0, #8]
    5e3a:	685b      	ldr	r3, [r3, #4]
    5e3c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5e3e:	e7f4      	b.n	5e2a <char_out+0xa>
    5e40:	2000d9c0 	.word	0x2000d9c0

00005e44 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    5e44:	4801      	ldr	r0, [pc, #4]	; (5e4c <panic+0x8>)
    5e46:	f01d b9a5 	b.w	23194 <log_output_flush>
    5e4a:	bf00      	nop
    5e4c:	00028678 	.word	0x00028678

00005e50 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5e50:	4801      	ldr	r0, [pc, #4]	; (5e58 <dropped+0x8>)
    5e52:	f7ff bfa1 	b.w	5d98 <log_output_dropped_process>
    5e56:	bf00      	nop
    5e58:	00028678 	.word	0x00028678

00005e5c <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    5e5c:	b508      	push	{r3, lr}
    5e5e:	4803      	ldr	r0, [pc, #12]	; (5e6c <log_backend_uart_init+0x10>)
    5e60:	f01a f844 	bl	1feec <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5e64:	4b02      	ldr	r3, [pc, #8]	; (5e70 <log_backend_uart_init+0x14>)
    5e66:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    5e68:	bd08      	pop	{r3, pc}
    5e6a:	bf00      	nop
    5e6c:	0002bffa 	.word	0x0002bffa
    5e70:	2000d9c0 	.word	0x2000d9c0

00005e74 <put>:
{
    5e74:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5e76:	4608      	mov	r0, r1
    5e78:	460c      	mov	r4, r1
    5e7a:	f01c ff7a 	bl	22d72 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5e7e:	4805      	ldr	r0, [pc, #20]	; (5e94 <put+0x20>)
    5e80:	4621      	mov	r1, r4
    5e82:	220f      	movs	r2, #15
    5e84:	f7ff ff0c 	bl	5ca0 <log_output_msg_process>
	log_msg_put(msg);
    5e88:	4620      	mov	r0, r4
}
    5e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e8e:	f01c bf9f 	b.w	22dd0 <log_msg_put>
    5e92:	bf00      	nop
    5e94:	00028678 	.word	0x00028678

00005e98 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5e98:	4b01      	ldr	r3, [pc, #4]	; (5ea0 <log_backend_rtt_init+0x8>)
    5e9a:	2201      	movs	r2, #1
    5e9c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5e9e:	4770      	bx	lr
    5ea0:	2000f5b0 	.word	0x2000f5b0

00005ea4 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5ea4:	4b02      	ldr	r3, [pc, #8]	; (5eb0 <panic+0xc>)
	log_output_flush(log_output);
    5ea6:	4803      	ldr	r0, [pc, #12]	; (5eb4 <panic+0x10>)
    5ea8:	2201      	movs	r2, #1
    5eaa:	701a      	strb	r2, [r3, #0]
    5eac:	f01d b972 	b.w	23194 <log_output_flush>
    5eb0:	2000f5b1 	.word	0x2000f5b1
    5eb4:	000286a0 	.word	0x000286a0

00005eb8 <dropped>:
	log_output_dropped_process(log_output, cnt);
    5eb8:	4801      	ldr	r0, [pc, #4]	; (5ec0 <dropped+0x8>)
    5eba:	f7ff bf6d 	b.w	5d98 <log_output_dropped_process>
    5ebe:	bf00      	nop
    5ec0:	000286a0 	.word	0x000286a0

00005ec4 <put>:
{
    5ec4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5ec6:	4608      	mov	r0, r1
    5ec8:	460c      	mov	r4, r1
    5eca:	f01c ff52 	bl	22d72 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5ece:	4805      	ldr	r0, [pc, #20]	; (5ee4 <put+0x20>)
    5ed0:	4621      	mov	r1, r4
    5ed2:	220f      	movs	r2, #15
    5ed4:	f7ff fee4 	bl	5ca0 <log_output_msg_process>
	log_msg_put(msg);
    5ed8:	4620      	mov	r0, r4
}
    5eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ede:	f01c bf77 	b.w	22dd0 <log_msg_put>
    5ee2:	bf00      	nop
    5ee4:	000286a0 	.word	0x000286a0

00005ee8 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5ee8:	4b05      	ldr	r3, [pc, #20]	; (5f00 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5eea:	781b      	ldrb	r3, [r3, #0]
    5eec:	b11b      	cbz	r3, 5ef6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    5eee:	f241 3088 	movw	r0, #5000	; 0x1388
    5ef2:	f021 bd6a 	b.w	279ca <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5ef6:	20a4      	movs	r0, #164	; 0xa4
    5ef8:	2100      	movs	r1, #0
    5efa:	f01a be6d 	b.w	20bd8 <z_impl_k_sleep>
    5efe:	bf00      	nop
    5f00:	2000f5b1 	.word	0x2000f5b1

00005f04 <data_out_block_mode>:
{
    5f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5f08:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5f94 <data_out_block_mode+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f0c:	f8df a088 	ldr.w	sl, [pc, #136]	; 5f98 <data_out_block_mode+0x94>
{
    5f10:	4607      	mov	r7, r0
    5f12:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5f14:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    5f16:	f898 3000 	ldrb.w	r3, [r8]
    5f1a:	b933      	cbnz	r3, 5f2a <data_out_block_mode+0x26>
    5f1c:	f04f 32ff 	mov.w	r2, #4294967295
    5f20:	f04f 33ff 	mov.w	r3, #4294967295
    5f24:	4650      	mov	r0, sl
    5f26:	f01a fa05 	bl	20334 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5f2a:	4632      	mov	r2, r6
    5f2c:	4639      	mov	r1, r7
    5f2e:	2000      	movs	r0, #0
    5f30:	f001 f9f4 	bl	731c <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    5f34:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5f38:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    5f3a:	b913      	cbnz	r3, 5f42 <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    5f3c:	4650      	mov	r0, sl
    5f3e:	f01a fa6b 	bl	20418 <z_impl_k_mutex_unlock>
		if (ret) {
    5f42:	4d16      	ldr	r5, [pc, #88]	; (5f9c <data_out_block_mode+0x98>)
    5f44:	f1b9 0f00 	cmp.w	r9, #0
    5f48:	d018      	beq.n	5f7c <data_out_block_mode+0x78>
	host_present = true;
    5f4a:	2301      	movs	r3, #1
    5f4c:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5f4e:	f898 3000 	ldrb.w	r3, [r8]
    5f52:	b933      	cbnz	r3, 5f62 <data_out_block_mode+0x5e>
}
    5f54:	4630      	mov	r0, r6
    5f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    5f5a:	b95c      	cbnz	r4, 5f74 <data_out_block_mode+0x70>
		host_present = false;
    5f5c:	702c      	strb	r4, [r5, #0]
    5f5e:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5f62:	2000      	movs	r0, #0
    5f64:	f001 fa26 	bl	73b4 <SEGGER_RTT_HasDataUp>
    5f68:	2800      	cmp	r0, #0
    5f6a:	d0f3      	beq.n	5f54 <data_out_block_mode+0x50>
    5f6c:	782b      	ldrb	r3, [r5, #0]
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d1f3      	bne.n	5f5a <data_out_block_mode+0x56>
    5f72:	e7ef      	b.n	5f54 <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    5f74:	3c01      	subs	r4, #1
    5f76:	f7ff ffb7 	bl	5ee8 <on_failed_write.part.0>
    5f7a:	e7f2      	b.n	5f62 <data_out_block_mode+0x5e>
		} else if (host_present) {
    5f7c:	782b      	ldrb	r3, [r5, #0]
    5f7e:	b113      	cbz	r3, 5f86 <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    5f80:	3c01      	subs	r4, #1
    5f82:	d104      	bne.n	5f8e <data_out_block_mode+0x8a>
		host_present = false;
    5f84:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    5f86:	782b      	ldrb	r3, [r5, #0]
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d1c4      	bne.n	5f16 <data_out_block_mode+0x12>
    5f8c:	e7e2      	b.n	5f54 <data_out_block_mode+0x50>
    5f8e:	f7ff ffab 	bl	5ee8 <on_failed_write.part.0>
    5f92:	e7f8      	b.n	5f86 <data_out_block_mode+0x82>
    5f94:	2000f5b1 	.word	0x2000f5b1
    5f98:	2000a094 	.word	0x2000a094
    5f9c:	2000f5b0 	.word	0x2000f5b0

00005fa0 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    5fa0:	4b02      	ldr	r3, [pc, #8]	; (5fac <hrs_init+0xc>)
    5fa2:	2201      	movs	r2, #1
    5fa4:	701a      	strb	r2, [r3, #0]

	return 0;
}
    5fa6:	2000      	movs	r0, #0
    5fa8:	4770      	bx	lr
    5faa:	bf00      	nop
    5fac:	2000f5b4 	.word	0x2000f5b4

00005fb0 <read_blsc>:
{
    5fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    5fb2:	2401      	movs	r4, #1
    5fb4:	9402      	str	r4, [sp, #8]
    5fb6:	4c04      	ldr	r4, [pc, #16]	; (5fc8 <read_blsc+0x18>)
    5fb8:	9401      	str	r4, [sp, #4]
    5fba:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    5fbe:	9400      	str	r4, [sp, #0]
    5fc0:	f020 f9ae 	bl	26320 <bt_gatt_attr_read>
}
    5fc4:	b004      	add	sp, #16
    5fc6:	bd10      	pop	{r4, pc}
    5fc8:	2000f5b4 	.word	0x2000f5b4

00005fcc <hrmc_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5fcc:	4b07      	ldr	r3, [pc, #28]	; (5fec <hrmc_ccc_cfg_changed+0x20>)
    5fce:	4a08      	ldr	r2, [pc, #32]	; (5ff0 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    5fd0:	4808      	ldr	r0, [pc, #32]	; (5ff4 <hrmc_ccc_cfg_changed+0x28>)
    5fd2:	1ad2      	subs	r2, r2, r3
    5fd4:	08d2      	lsrs	r2, r2, #3
    5fd6:	4b08      	ldr	r3, [pc, #32]	; (5ff8 <hrmc_ccc_cfg_changed+0x2c>)
    5fd8:	0192      	lsls	r2, r2, #6
    5fda:	2901      	cmp	r1, #1
    5fdc:	bf14      	ite	ne
    5fde:	4601      	movne	r1, r0
    5fe0:	4619      	moveq	r1, r3
    5fe2:	f042 0203 	orr.w	r2, r2, #3
    5fe6:	4805      	ldr	r0, [pc, #20]	; (5ffc <hrmc_ccc_cfg_changed+0x30>)
    5fe8:	f01c be19 	b.w	22c1e <log_1>
    5fec:	000281b4 	.word	0x000281b4
    5ff0:	000282cc 	.word	0x000282cc
    5ff4:	00029d26 	.word	0x00029d26
    5ff8:	00029d1e 	.word	0x00029d1e
    5ffc:	0002c044 	.word	0x0002c044

00006000 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    6000:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    6002:	4c0d      	ldr	r4, [pc, #52]	; (6038 <bt_hrs_notify+0x38>)
{
    6004:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    6006:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    6008:	7060      	strb	r0, [r4, #1]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    600a:	2218      	movs	r2, #24
    600c:	2100      	movs	r1, #0
    600e:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    6010:	7023      	strb	r3, [r4, #0]
    6012:	f01e fe48 	bl	24ca6 <memset>

	params.attr = attr;
    6016:	4b09      	ldr	r3, [pc, #36]	; (603c <bt_hrs_notify+0x3c>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    6018:	4669      	mov	r1, sp
	params.data = data;
    601a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    601e:	2000      	movs	r0, #0
	params.len = len;
    6020:	2302      	movs	r3, #2
    6022:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    6026:	f007 ffcd 	bl	dfc4 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    602a:	f110 0f39 	cmn.w	r0, #57	; 0x39
}
    602e:	bf08      	it	eq
    6030:	2000      	moveq	r0, #0
    6032:	b006      	add	sp, #24
    6034:	bd10      	pop	{r4, pc}
    6036:	bf00      	nop
    6038:	2000f5b2 	.word	0x2000f5b2
    603c:	00028728 	.word	0x00028728

00006040 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    6040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6044:	460e      	mov	r6, r1
    6046:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6048:	2108      	movs	r1, #8
    604a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    604c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 609c <nvs_recover_last_ate+0x5c>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6050:	f01d f989 	bl	23366 <nvs_al_size.isra.0>
	*addr -= ate_size;
    6054:	6834      	ldr	r4, [r6, #0]
    6056:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6058:	4607      	mov	r7, r0
	*addr -= ate_size;
    605a:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    605c:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    6060:	42ac      	cmp	r4, r5
    6062:	d803      	bhi.n	606c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    6064:	2000      	movs	r0, #0
}
    6066:	b003      	add	sp, #12
    6068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    606c:	2308      	movs	r3, #8
    606e:	466a      	mov	r2, sp
    6070:	4621      	mov	r1, r4
    6072:	4640      	mov	r0, r8
    6074:	f01d f8d3 	bl	2321e <nvs_flash_rd>
		if (rc) {
    6078:	2800      	cmp	r0, #0
    607a:	d1f4      	bne.n	6066 <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    607c:	4668      	mov	r0, sp
    607e:	f01d f952 	bl	23326 <nvs_ate_crc8_check>
    6082:	b940      	cbnz	r0, 6096 <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    6084:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6088:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    608c:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
    608e:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    6092:	4413      	add	r3, r2
    6094:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    6096:	1be4      	subs	r4, r4, r7
    6098:	e7e2      	b.n	6060 <nvs_recover_last_ate+0x20>
    609a:	bf00      	nop
    609c:	ffff0000 	.word	0xffff0000

000060a0 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    60a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60a4:	4604      	mov	r4, r0
    60a6:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    60a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    60aa:	2108      	movs	r1, #8
    60ac:	f01d f95b 	bl	23366 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    60b0:	6863      	ldr	r3, [r4, #4]
    60b2:	0c1b      	lsrs	r3, r3, #16
    60b4:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    60b6:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
    60b8:	a901      	add	r1, sp, #4
    60ba:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    60bc:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    60be:	f01d f947 	bl	23350 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    60c2:	9b01      	ldr	r3, [sp, #4]
    60c4:	89a1      	ldrh	r1, [r4, #12]
    60c6:	4419      	add	r1, r3
    60c8:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    60cc:	2308      	movs	r3, #8
    60ce:	aa04      	add	r2, sp, #16
    60d0:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    60d2:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    60d4:	f01d f8a3 	bl	2321e <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    60d8:	2800      	cmp	r0, #0
    60da:	f2c0 8083 	blt.w	61e4 <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    60de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    60e0:	aa04      	add	r2, sp, #16
    60e2:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    60e4:	2300      	movs	r3, #0
		if (data8[i] != value) {
    60e6:	f812 0b01 	ldrb.w	r0, [r2], #1
    60ea:	4281      	cmp	r1, r0
    60ec:	d16c      	bne.n	61c8 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    60ee:	3301      	adds	r3, #1
    60f0:	2b08      	cmp	r3, #8
    60f2:	d1f8      	bne.n	60e6 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    60f4:	9901      	ldr	r1, [sp, #4]
    60f6:	4620      	mov	r0, r4
    60f8:	f01d f8ee 	bl	232d8 <nvs_flash_erase_sector>
		if (rc) {
    60fc:	e072      	b.n	61e4 <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    60fe:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    6100:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    6104:	0c1b      	lsrs	r3, r3, #16
    6106:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    6108:	4413      	add	r3, r2
    610a:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    610c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 61ec <nvs_gc+0x14c>
		gc_prev_addr = gc_addr;
    6110:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    6114:	aa06      	add	r2, sp, #24
    6116:	a902      	add	r1, sp, #8
    6118:	4620      	mov	r0, r4
    611a:	f01d f92e 	bl	2337a <nvs_prev_ate>
		if (rc) {
    611e:	2800      	cmp	r0, #0
    6120:	d160      	bne.n	61e4 <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    6122:	a806      	add	r0, sp, #24
    6124:	f01d f8ff 	bl	23326 <nvs_ate_crc8_check>
    6128:	bb80      	cbnz	r0, 618c <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    612a:	6863      	ldr	r3, [r4, #4]
    612c:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    612e:	aa08      	add	r2, sp, #32
    6130:	a903      	add	r1, sp, #12
    6132:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    6134:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    6136:	f01d f920 	bl	2337a <nvs_prev_ate>
			if (rc) {
    613a:	2800      	cmp	r0, #0
    613c:	d152      	bne.n	61e4 <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    613e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    6142:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6146:	429a      	cmp	r2, r3
    6148:	d023      	beq.n	6192 <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    614a:	6862      	ldr	r2, [r4, #4]
    614c:	9b03      	ldr	r3, [sp, #12]
    614e:	429a      	cmp	r2, r3
    6150:	d1ed      	bne.n	612e <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    6152:	454d      	cmp	r5, r9
    6154:	d11a      	bne.n	618c <nvs_gc+0xec>
    6156:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    615a:	b1bb      	cbz	r3, 618c <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    615c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    6160:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    6164:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    6166:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    6168:	68a3      	ldr	r3, [r4, #8]
    616a:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    616e:	f01d f8e6 	bl	2333e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    6172:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    6174:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    6178:	681d      	ldr	r5, [r3, #0]
    617a:	426d      	negs	r5, r5
	block_size =
    617c:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    6180:	b96f      	cbnz	r7, 619e <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    6182:	a906      	add	r1, sp, #24
    6184:	4620      	mov	r0, r4
    6186:	f01d f9a6 	bl	234d6 <nvs_flash_ate_wrt>
			if (rc) {
    618a:	bb58      	cbnz	r0, 61e4 <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    618c:	45c1      	cmp	r9, r8
    618e:	d1bf      	bne.n	6110 <nvs_gc+0x70>
    6190:	e7b0      	b.n	60f4 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    6192:	a808      	add	r0, sp, #32
    6194:	f01d f8c7 	bl	23326 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    6198:	2800      	cmp	r0, #0
    619a:	d1d6      	bne.n	614a <nvs_gc+0xaa>
    619c:	e7d9      	b.n	6152 <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    619e:	42bd      	cmp	r5, r7
    61a0:	46ab      	mov	fp, r5
    61a2:	bf28      	it	cs
    61a4:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    61a6:	465b      	mov	r3, fp
    61a8:	aa0a      	add	r2, sp, #40	; 0x28
    61aa:	4631      	mov	r1, r6
    61ac:	4620      	mov	r0, r4
    61ae:	f01d f836 	bl	2321e <nvs_flash_rd>
		if (rc) {
    61b2:	b9b8      	cbnz	r0, 61e4 <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    61b4:	465a      	mov	r2, fp
    61b6:	a90a      	add	r1, sp, #40	; 0x28
    61b8:	4620      	mov	r0, r4
    61ba:	f01d f979 	bl	234b0 <nvs_flash_data_wrt>
		if (rc) {
    61be:	b988      	cbnz	r0, 61e4 <nvs_gc+0x144>
		len -= bytes_to_copy;
    61c0:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    61c4:	445e      	add	r6, fp
    61c6:	e7db      	b.n	6180 <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    61c8:	9802      	ldr	r0, [sp, #8]
    61ca:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    61ce:	a804      	add	r0, sp, #16
    61d0:	f01d f8a9 	bl	23326 <nvs_ate_crc8_check>
    61d4:	2800      	cmp	r0, #0
    61d6:	d092      	beq.n	60fe <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    61d8:	a902      	add	r1, sp, #8
    61da:	4620      	mov	r0, r4
    61dc:	f7ff ff30 	bl	6040 <nvs_recover_last_ate>
		if (rc) {
    61e0:	2800      	cmp	r0, #0
    61e2:	d093      	beq.n	610c <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    61e4:	b013      	add	sp, #76	; 0x4c
    61e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61ea:	bf00      	nop
    61ec:	ffff0000 	.word	0xffff0000

000061f0 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    61f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61f4:	4604      	mov	r4, r0
    61f6:	b086      	sub	sp, #24
    61f8:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    61fa:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    61fe:	4630      	mov	r0, r6
    6200:	f021 fa0b 	bl	2761a <z_impl_k_mutex_init>
    6204:	4628      	mov	r0, r5
    6206:	f019 fe71 	bl	1feec <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    620a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    620c:	b978      	cbnz	r0, 622e <nvs_init+0x3e>
    620e:	4ba2      	ldr	r3, [pc, #648]	; (6498 <nvs_init+0x2a8>)
    6210:	49a2      	ldr	r1, [pc, #648]	; (649c <nvs_init+0x2ac>)
		LOG_ERR("No valid flash device found");
    6212:	48a3      	ldr	r0, [pc, #652]	; (64a0 <nvs_init+0x2b0>)
    6214:	1ac9      	subs	r1, r1, r3
    6216:	08c9      	lsrs	r1, r1, #3
    6218:	0189      	lsls	r1, r1, #6
    621a:	f041 0101 	orr.w	r1, r1, #1
    621e:	f01c fcf1 	bl	22c04 <log_0>
		return -ENXIO;
    6222:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    6226:	4628      	mov	r0, r5
    6228:	b006      	add	sp, #24
    622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    622e:	6883      	ldr	r3, [r0, #8]
    6230:	691b      	ldr	r3, [r3, #16]
    6232:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    6234:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    6236:	b960      	cbnz	r0, 6252 <nvs_init+0x62>
    6238:	4998      	ldr	r1, [pc, #608]	; (649c <nvs_init+0x2ac>)
    623a:	4b97      	ldr	r3, [pc, #604]	; (6498 <nvs_init+0x2a8>)
		LOG_ERR("Could not obtain flash parameters");
    623c:	4899      	ldr	r0, [pc, #612]	; (64a4 <nvs_init+0x2b4>)
    623e:	1ac9      	subs	r1, r1, r3
    6240:	08c9      	lsrs	r1, r1, #3
    6242:	0189      	lsls	r1, r1, #6
    6244:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    6248:	f01c fcdc 	bl	22c04 <log_0>
		return -EINVAL;
    624c:	f06f 0515 	mvn.w	r5, #21
    6250:	e7e9      	b.n	6226 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    6252:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    6254:	6883      	ldr	r3, [r0, #8]
    6256:	691b      	ldr	r3, [r3, #16]
    6258:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    625a:	6803      	ldr	r3, [r0, #0]
    625c:	3b01      	subs	r3, #1
    625e:	2b1f      	cmp	r3, #31
    6260:	d908      	bls.n	6274 <nvs_init+0x84>
    6262:	498e      	ldr	r1, [pc, #568]	; (649c <nvs_init+0x2ac>)
    6264:	4b8c      	ldr	r3, [pc, #560]	; (6498 <nvs_init+0x2a8>)
		LOG_ERR("Unsupported write block size");
    6266:	4890      	ldr	r0, [pc, #576]	; (64a8 <nvs_init+0x2b8>)
    6268:	1ac9      	subs	r1, r1, r3
    626a:	08c9      	lsrs	r1, r1, #3
    626c:	0189      	lsls	r1, r1, #6
    626e:	f041 0101 	orr.w	r1, r1, #1
    6272:	e7e9      	b.n	6248 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    6274:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6276:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    6278:	aa03      	add	r2, sp, #12
    627a:	f020 ff7e 	bl	2717a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    627e:	b140      	cbz	r0, 6292 <nvs_init+0xa2>
    6280:	4986      	ldr	r1, [pc, #536]	; (649c <nvs_init+0x2ac>)
    6282:	4b85      	ldr	r3, [pc, #532]	; (6498 <nvs_init+0x2a8>)
		LOG_ERR("Unable to get page info");
    6284:	4889      	ldr	r0, [pc, #548]	; (64ac <nvs_init+0x2bc>)
    6286:	1ac9      	subs	r1, r1, r3
    6288:	08c9      	lsrs	r1, r1, #3
    628a:	0189      	lsls	r1, r1, #6
    628c:	f041 0101 	orr.w	r1, r1, #1
    6290:	e7da      	b.n	6248 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    6292:	89a5      	ldrh	r5, [r4, #12]
    6294:	b12d      	cbz	r5, 62a2 <nvs_init+0xb2>
    6296:	9b04      	ldr	r3, [sp, #16]
    6298:	fbb5 f2f3 	udiv	r2, r5, r3
    629c:	fb03 5512 	mls	r5, r3, r2, r5
    62a0:	b145      	cbz	r5, 62b4 <nvs_init+0xc4>
    62a2:	497e      	ldr	r1, [pc, #504]	; (649c <nvs_init+0x2ac>)
    62a4:	4b7c      	ldr	r3, [pc, #496]	; (6498 <nvs_init+0x2a8>)
		LOG_ERR("Invalid sector size");
    62a6:	4882      	ldr	r0, [pc, #520]	; (64b0 <nvs_init+0x2c0>)
    62a8:	1ac9      	subs	r1, r1, r3
    62aa:	08c9      	lsrs	r1, r1, #3
    62ac:	0189      	lsls	r1, r1, #6
    62ae:	f041 0101 	orr.w	r1, r1, #1
    62b2:	e7c9      	b.n	6248 <nvs_init+0x58>
	if (fs->sector_count < 2) {
    62b4:	89e3      	ldrh	r3, [r4, #14]
    62b6:	2b01      	cmp	r3, #1
    62b8:	d808      	bhi.n	62cc <nvs_init+0xdc>
    62ba:	4978      	ldr	r1, [pc, #480]	; (649c <nvs_init+0x2ac>)
    62bc:	4b76      	ldr	r3, [pc, #472]	; (6498 <nvs_init+0x2a8>)
		LOG_ERR("Configuration error - sector count");
    62be:	487d      	ldr	r0, [pc, #500]	; (64b4 <nvs_init+0x2c4>)
    62c0:	1ac9      	subs	r1, r1, r3
    62c2:	08c9      	lsrs	r1, r1, #3
    62c4:	0189      	lsls	r1, r1, #6
    62c6:	f041 0101 	orr.w	r1, r1, #1
    62ca:	e7bd      	b.n	6248 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    62cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    62ce:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    62d0:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    62d4:	f04f 33ff 	mov.w	r3, #4294967295
    62d8:	f04f 32ff 	mov.w	r2, #4294967295
    62dc:	4630      	mov	r0, r6
    62de:	f01a f829 	bl	20334 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    62e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    62e4:	2108      	movs	r1, #8
    62e6:	f01d f83e 	bl	23366 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    62ea:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    62ec:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    62ee:	89e3      	ldrh	r3, [r4, #14]
    62f0:	fa1f fa85 	uxth.w	sl, r5
    62f4:	4553      	cmp	r3, sl
    62f6:	d86f      	bhi.n	63d8 <nvs_init+0x1e8>
	if (closed_sectors == fs->sector_count) {
    62f8:	89e3      	ldrh	r3, [r4, #14]
    62fa:	4543      	cmp	r3, r8
    62fc:	f000 80af 	beq.w	645e <nvs_init+0x26e>
	if (i == fs->sector_count) {
    6300:	4553      	cmp	r3, sl
    6302:	d10b      	bne.n	631c <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    6304:	9900      	ldr	r1, [sp, #0]
    6306:	2308      	movs	r3, #8
    6308:	464a      	mov	r2, r9
    630a:	1bc9      	subs	r1, r1, r7
    630c:	4620      	mov	r0, r4
    630e:	f01c ffbe 	bl	2328e <nvs_flash_cmp_const>
		if (!rc) {
    6312:	b918      	cbnz	r0, 631c <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
    6314:	89e0      	ldrh	r0, [r4, #14]
    6316:	4669      	mov	r1, sp
    6318:	f01d f81a 	bl	23350 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    631c:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    631e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 64b8 <nvs_init+0x2c8>
	fs->ate_wra = addr - ate_size;
    6322:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    6324:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    6328:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    632a:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    632c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    6330:	4299      	cmp	r1, r3
    6332:	d30f      	bcc.n	6354 <nvs_init+0x164>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    6334:	2308      	movs	r3, #8
    6336:	aa01      	add	r2, sp, #4
    6338:	4620      	mov	r0, r4
    633a:	f01c ff70 	bl	2321e <nvs_flash_rd>
		if (rc) {
    633e:	4605      	mov	r5, r0
    6340:	bb30      	cbnz	r0, 6390 <nvs_init+0x1a0>
    6342:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    6344:	f813 2b01 	ldrb.w	r2, [r3], #1
    6348:	4591      	cmp	r9, r2
    634a:	f040 808b 	bne.w	6464 <nvs_init+0x274>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    634e:	3501      	adds	r5, #1
    6350:	2d08      	cmp	r5, #8
    6352:	d1f7      	bne.n	6344 <nvs_init+0x154>
	while (fs->ate_wra > fs->data_wra) {
    6354:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6358:	428b      	cmp	r3, r1
    635a:	d907      	bls.n	636c <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    635c:	1a5b      	subs	r3, r3, r1
    635e:	464a      	mov	r2, r9
    6360:	4620      	mov	r0, r4
    6362:	f01c ff94 	bl	2328e <nvs_flash_cmp_const>
		if (rc < 0) {
    6366:	1e05      	subs	r5, r0, #0
    6368:	db12      	blt.n	6390 <nvs_init+0x1a0>
		if (!rc) {
    636a:	d15a      	bne.n	6422 <nvs_init+0x232>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    636c:	6863      	ldr	r3, [r4, #4]
    636e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 64b8 <nvs_init+0x2c8>
	nvs_sector_advance(fs, &addr);
    6372:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    6374:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    6378:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    637a:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    637c:	f01c ffe8 	bl	23350 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    6380:	89a3      	ldrh	r3, [r4, #12]
    6382:	9900      	ldr	r1, [sp, #0]
    6384:	464a      	mov	r2, r9
    6386:	4620      	mov	r0, r4
    6388:	f01c ff81 	bl	2328e <nvs_flash_cmp_const>
	if (rc < 0) {
    638c:	1e05      	subs	r5, r0, #0
    638e:	da4e      	bge.n	642e <nvs_init+0x23e>
	return z_impl_k_mutex_unlock(mutex);
    6390:	4630      	mov	r0, r6
    6392:	f01a f841 	bl	20418 <z_impl_k_mutex_unlock>
	if (rc) {
    6396:	2d00      	cmp	r5, #0
    6398:	f47f af45 	bne.w	6226 <nvs_init+0x36>
	fs->ready = true;
    639c:	2301      	movs	r3, #1
    639e:	7423      	strb	r3, [r4, #16]
    63a0:	4e3e      	ldr	r6, [pc, #248]	; (649c <nvs_init+0x2ac>)
    63a2:	4b3d      	ldr	r3, [pc, #244]	; (6498 <nvs_init+0x2a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    63a4:	89a2      	ldrh	r2, [r4, #12]
    63a6:	89e1      	ldrh	r1, [r4, #14]
    63a8:	4844      	ldr	r0, [pc, #272]	; (64bc <nvs_init+0x2cc>)
    63aa:	1af6      	subs	r6, r6, r3
    63ac:	08f6      	lsrs	r6, r6, #3
    63ae:	01b6      	lsls	r6, r6, #6
    63b0:	f046 0603 	orr.w	r6, r6, #3
    63b4:	4633      	mov	r3, r6
    63b6:	f01c fc46 	bl	22c46 <log_2>
	LOG_INF("alloc wra: %d, %x",
    63ba:	6861      	ldr	r1, [r4, #4]
    63bc:	4840      	ldr	r0, [pc, #256]	; (64c0 <nvs_init+0x2d0>)
    63be:	4633      	mov	r3, r6
    63c0:	b28a      	uxth	r2, r1
    63c2:	0c09      	lsrs	r1, r1, #16
    63c4:	f01c fc3f 	bl	22c46 <log_2>
	LOG_INF("data wra: %d, %x",
    63c8:	68a1      	ldr	r1, [r4, #8]
    63ca:	483e      	ldr	r0, [pc, #248]	; (64c4 <nvs_init+0x2d4>)
    63cc:	b28a      	uxth	r2, r1
    63ce:	4633      	mov	r3, r6
    63d0:	0c09      	lsrs	r1, r1, #16
    63d2:	f01c fc38 	bl	22c46 <log_2>
	return 0;
    63d6:	e726      	b.n	6226 <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
    63d8:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    63da:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    63dc:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    63de:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    63e2:	464a      	mov	r2, r9
    63e4:	2308      	movs	r3, #8
    63e6:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    63e8:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    63ea:	f01c ff50 	bl	2328e <nvs_flash_cmp_const>
		if (rc) {
    63ee:	b180      	cbz	r0, 6412 <nvs_init+0x222>
			nvs_sector_advance(fs, &addr);
    63f0:	89e0      	ldrh	r0, [r4, #14]
    63f2:	4669      	mov	r1, sp
    63f4:	f01c ffac 	bl	23350 <nvs_sector_advance.isra.0>
			closed_sectors++;
    63f8:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    63fc:	9900      	ldr	r1, [sp, #0]
    63fe:	2308      	movs	r3, #8
    6400:	464a      	mov	r2, r9
    6402:	4620      	mov	r0, r4
			closed_sectors++;
    6404:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    6408:	f01c ff41 	bl	2328e <nvs_flash_cmp_const>
			if (!rc) {
    640c:	2800      	cmp	r0, #0
    640e:	f43f af73 	beq.w	62f8 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    6412:	3501      	adds	r5, #1
    6414:	e76b      	b.n	62ee <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    6416:	f1ba 0f00 	cmp.w	sl, #0
    641a:	d039      	beq.n	6490 <nvs_init+0x2a0>
				rc = -ESPIPE;
    641c:	f06f 051c 	mvn.w	r5, #28
    6420:	e7b6      	b.n	6390 <nvs_init+0x1a0>
		fs->data_wra += fs->flash_parameters->write_block_size;
    6422:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6424:	68a3      	ldr	r3, [r4, #8]
    6426:	6812      	ldr	r2, [r2, #0]
    6428:	4413      	add	r3, r2
    642a:	60a3      	str	r3, [r4, #8]
    642c:	e792      	b.n	6354 <nvs_init+0x164>
	if (rc) {
    642e:	d0af      	beq.n	6390 <nvs_init+0x1a0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    6430:	6861      	ldr	r1, [r4, #4]
    6432:	4620      	mov	r0, r4
    6434:	f01c ff50 	bl	232d8 <nvs_flash_erase_sector>
		if (rc) {
    6438:	4605      	mov	r5, r0
    643a:	2800      	cmp	r0, #0
    643c:	d1a8      	bne.n	6390 <nvs_init+0x1a0>
		fs->ate_wra &= ADDR_SECT_MASK;
    643e:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    6440:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    6442:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    6446:	4403      	add	r3, r0
    6448:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    644c:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    644e:	ea00 0008 	and.w	r0, r0, r8
    6452:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    6454:	4620      	mov	r0, r4
    6456:	f7ff fe23 	bl	60a0 <nvs_gc>
    645a:	4605      	mov	r5, r0
end:
    645c:	e798      	b.n	6390 <nvs_init+0x1a0>
		rc = -EDEADLK;
    645e:	f06f 0520 	mvn.w	r5, #32
    6462:	e795      	b.n	6390 <nvs_init+0x1a0>
		if (!nvs_ate_crc8_check(&last_ate)) {
    6464:	a801      	add	r0, sp, #4
    6466:	f01c ff5e 	bl	23326 <nvs_ate_crc8_check>
    646a:	6865      	ldr	r5, [r4, #4]
    646c:	b980      	cbnz	r0, 6490 <nvs_init+0x2a0>
			fs->data_wra = addr & ADDR_SECT_MASK;
    646e:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    6470:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    6474:	f8bd a008 	ldrh.w	sl, [sp, #8]
    6478:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    647a:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    647e:	441a      	add	r2, r3
    6480:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    6482:	4651      	mov	r1, sl
    6484:	f01c ff6f 	bl	23366 <nvs_al_size.isra.0>
    6488:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    648a:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    648c:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    648e:	d0c2      	beq.n	6416 <nvs_init+0x226>
		fs->ate_wra -= ate_size;
    6490:	1bed      	subs	r5, r5, r7
    6492:	6065      	str	r5, [r4, #4]
    6494:	e74a      	b.n	632c <nvs_init+0x13c>
    6496:	bf00      	nop
    6498:	000281b4 	.word	0x000281b4
    649c:	000282c4 	.word	0x000282c4
    64a0:	0002c071 	.word	0x0002c071
    64a4:	0002c08d 	.word	0x0002c08d
    64a8:	0002c0af 	.word	0x0002c0af
    64ac:	0002c0cc 	.word	0x0002c0cc
    64b0:	0002c0e4 	.word	0x0002c0e4
    64b4:	0002c0f8 	.word	0x0002c0f8
    64b8:	ffff0000 	.word	0xffff0000
    64bc:	0002c11b 	.word	0x0002c11b
    64c0:	0002c132 	.word	0x0002c132
    64c4:	0002c144 	.word	0x0002c144

000064c8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    64c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64cc:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    64ce:	7c03      	ldrb	r3, [r0, #16]
{
    64d0:	b089      	sub	sp, #36	; 0x24
    64d2:	4604      	mov	r4, r0
    64d4:	4689      	mov	r9, r1
    64d6:	4690      	mov	r8, r2
	if (!fs->ready) {
    64d8:	b97b      	cbnz	r3, 64fa <nvs_write+0x32>
    64da:	4b61      	ldr	r3, [pc, #388]	; (6660 <nvs_write+0x198>)
    64dc:	4961      	ldr	r1, [pc, #388]	; (6664 <nvs_write+0x19c>)
		LOG_ERR("NVS not initialized");
    64de:	4862      	ldr	r0, [pc, #392]	; (6668 <nvs_write+0x1a0>)
    64e0:	1ac9      	subs	r1, r1, r3
    64e2:	08c9      	lsrs	r1, r1, #3
    64e4:	0189      	lsls	r1, r1, #6
    64e6:	f041 0101 	orr.w	r1, r1, #1
    64ea:	f01c fb8b 	bl	22c04 <log_0>
		return -EACCES;
    64ee:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    64f2:	4628      	mov	r0, r5
    64f4:	b009      	add	sp, #36	; 0x24
    64f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    64fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    64fc:	2108      	movs	r1, #8
    64fe:	4610      	mov	r0, r2
    6500:	f01c ff31 	bl	23366 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    6504:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6506:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    6508:	4610      	mov	r0, r2
    650a:	f01c ff2c 	bl	23366 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    650e:	89a3      	ldrh	r3, [r4, #12]
    6510:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    6514:	1a9b      	subs	r3, r3, r2
    6516:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    6518:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    651a:	f0c0 809d 	bcc.w	6658 <nvs_write+0x190>
    651e:	b11e      	cbz	r6, 6528 <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    6520:	f1b8 0f00 	cmp.w	r8, #0
    6524:	f000 8098 	beq.w	6658 <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    6528:	6863      	ldr	r3, [r4, #4]
    652a:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    652c:	aa04      	add	r2, sp, #16
    652e:	a903      	add	r1, sp, #12
    6530:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    6532:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    6536:	f01c ff20 	bl	2337a <nvs_prev_ate>
		if (rc) {
    653a:	4605      	mov	r5, r0
    653c:	2800      	cmp	r0, #0
    653e:	d1d8      	bne.n	64f2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    6540:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6544:	454b      	cmp	r3, r9
    6546:	d005      	beq.n	6554 <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    6548:	6862      	ldr	r2, [r4, #4]
    654a:	9b03      	ldr	r3, [sp, #12]
    654c:	429a      	cmp	r2, r3
    654e:	d1ed      	bne.n	652c <nvs_write+0x64>
		if (len == 0) {
    6550:	b9de      	cbnz	r6, 658a <nvs_write+0xc2>
    6552:	e7ce      	b.n	64f2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    6554:	a804      	add	r0, sp, #16
    6556:	f01c fee6 	bl	23326 <nvs_ate_crc8_check>
    655a:	2800      	cmp	r0, #0
    655c:	d1f4      	bne.n	6548 <nvs_write+0x80>
			if (wlk_ate.len == 0U) {
    655e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    6562:	b186      	cbz	r6, 6586 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    6564:	42b3      	cmp	r3, r6
    6566:	d110      	bne.n	658a <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    6568:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    656c:	ea4f 411b 	mov.w	r1, fp, lsr #16
    6570:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    6572:	4401      	add	r1, r0
    6574:	4633      	mov	r3, r6
    6576:	4642      	mov	r2, r8
    6578:	4620      	mov	r0, r4
    657a:	f01c fe5e 	bl	2323a <nvs_flash_block_cmp>
			if (rc <= 0) {
    657e:	2800      	cmp	r0, #0
    6580:	dc03      	bgt.n	658a <nvs_write+0xc2>
    6582:	4605      	mov	r5, r0
    6584:	e7b5      	b.n	64f2 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    6586:	2b00      	cmp	r3, #0
    6588:	d0b3      	beq.n	64f2 <nvs_write+0x2a>
	if (data_size) {
    658a:	bba7      	cbnz	r7, 65f6 <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    658c:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    6590:	f04f 32ff 	mov.w	r2, #4294967295
    6594:	f04f 33ff 	mov.w	r3, #4294967295
    6598:	4650      	mov	r0, sl
    659a:	f019 fecb 	bl	20334 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    659e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 666c <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
    65a2:	89e3      	ldrh	r3, [r4, #14]
    65a4:	429d      	cmp	r5, r3
    65a6:	d054      	beq.n	6652 <nvs_write+0x18a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    65a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    65ac:	18f9      	adds	r1, r7, r3
    65ae:	428a      	cmp	r2, r1
    65b0:	d324      	bcc.n	65fc <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    65b2:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    65b6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    65b8:	23ff      	movs	r3, #255	; 0xff
    65ba:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    65be:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    65c2:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    65c6:	f01c feba 	bl	2333e <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    65ca:	4632      	mov	r2, r6
    65cc:	4641      	mov	r1, r8
    65ce:	4620      	mov	r0, r4
    65d0:	f01c ff6e 	bl	234b0 <nvs_flash_data_wrt>
	if (rc) {
    65d4:	4603      	mov	r3, r0
    65d6:	b938      	cbnz	r0, 65e8 <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    65d8:	a906      	add	r1, sp, #24
    65da:	4620      	mov	r0, r4
    65dc:	f01c ff7b 	bl	234d6 <nvs_flash_ate_wrt>
	rc = len;
    65e0:	2800      	cmp	r0, #0
    65e2:	bf14      	ite	ne
    65e4:	4603      	movne	r3, r0
    65e6:	4633      	moveq	r3, r6
    65e8:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    65ea:	4650      	mov	r0, sl
    65ec:	f019 ff14 	bl	20418 <z_impl_k_mutex_unlock>
	return rc;
    65f0:	9b01      	ldr	r3, [sp, #4]
    65f2:	461d      	mov	r5, r3
    65f4:	e77d      	b.n	64f2 <nvs_write+0x2a>
		required_space = data_size + ate_size;
    65f6:	4457      	add	r7, sl
    65f8:	b2bf      	uxth	r7, r7
    65fa:	e7c7      	b.n	658c <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    65fc:	2108      	movs	r1, #8
    65fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6600:	f01c feb1 	bl	23366 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    6604:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6608:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    660c:	2300      	movs	r3, #0
    660e:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    6612:	1813      	adds	r3, r2, r0
    6614:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    6618:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    661a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    661e:	441a      	add	r2, r3
    6620:	1a12      	subs	r2, r2, r0
    6622:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    6624:	a806      	add	r0, sp, #24
    6626:	f01c fe8a 	bl	2333e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    662a:	a906      	add	r1, sp, #24
    662c:	4620      	mov	r0, r4
    662e:	f01c ff52 	bl	234d6 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    6632:	89e0      	ldrh	r0, [r4, #14]
    6634:	1d21      	adds	r1, r4, #4
    6636:	f01c fe8b 	bl	23350 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    663a:	6863      	ldr	r3, [r4, #4]
    663c:	ea03 030b 	and.w	r3, r3, fp
    6640:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    6642:	4620      	mov	r0, r4
    6644:	f7ff fd2c 	bl	60a0 <nvs_gc>
		if (rc) {
    6648:	4603      	mov	r3, r0
    664a:	2800      	cmp	r0, #0
    664c:	d1cc      	bne.n	65e8 <nvs_write+0x120>
		gc_count++;
    664e:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    6650:	e7a7      	b.n	65a2 <nvs_write+0xda>
			rc = -ENOSPC;
    6652:	f06f 031b 	mvn.w	r3, #27
    6656:	e7c7      	b.n	65e8 <nvs_write+0x120>
		return -EINVAL;
    6658:	f06f 0515 	mvn.w	r5, #21
    665c:	e749      	b.n	64f2 <nvs_write+0x2a>
    665e:	bf00      	nop
    6660:	000281b4 	.word	0x000281b4
    6664:	000282c4 	.word	0x000282c4
    6668:	0002c05d 	.word	0x0002c05d
    666c:	ffff0000 	.word	0xffff0000

00006670 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    6670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6674:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    6676:	7c03      	ldrb	r3, [r0, #16]
{
    6678:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    667c:	4604      	mov	r4, r0
    667e:	460f      	mov	r7, r1
    6680:	4690      	mov	r8, r2
	if (!fs->ready) {
    6682:	b973      	cbnz	r3, 66a2 <nvs_read_hist+0x32>
    6684:	4b2b      	ldr	r3, [pc, #172]	; (6734 <nvs_read_hist+0xc4>)
    6686:	492c      	ldr	r1, [pc, #176]	; (6738 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    6688:	482c      	ldr	r0, [pc, #176]	; (673c <nvs_read_hist+0xcc>)
    668a:	1ac9      	subs	r1, r1, r3
    668c:	08c9      	lsrs	r1, r1, #3
    668e:	0189      	lsls	r1, r1, #6
    6690:	f041 0101 	orr.w	r1, r1, #1
    6694:	f01c fab6 	bl	22c04 <log_0>
		return -EACCES;
    6698:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    669c:	b004      	add	sp, #16
    669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    66a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    66a4:	2108      	movs	r1, #8
    66a6:	f01c fe5e 	bl	23366 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    66aa:	89a3      	ldrh	r3, [r4, #12]
    66ac:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    66b0:	42b3      	cmp	r3, r6
    66b2:	d33b      	bcc.n	672c <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    66b4:	6863      	ldr	r3, [r4, #4]
    66b6:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    66b8:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    66bc:	aa02      	add	r2, sp, #8
    66be:	a901      	add	r1, sp, #4
    66c0:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    66c2:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    66c4:	f01c fe59 	bl	2337a <nvs_prev_ate>
		if (rc) {
    66c8:	2800      	cmp	r0, #0
    66ca:	d1e7      	bne.n	669c <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    66cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    66d0:	42bb      	cmp	r3, r7
    66d2:	d107      	bne.n	66e4 <nvs_read_hist+0x74>
    66d4:	a802      	add	r0, sp, #8
    66d6:	f01c fe26 	bl	23326 <nvs_ate_crc8_check>
    66da:	b918      	cbnz	r0, 66e4 <nvs_read_hist+0x74>
			cnt_his++;
    66dc:	f10a 0a01 	add.w	sl, sl, #1
    66e0:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    66e4:	6862      	ldr	r2, [r4, #4]
    66e6:	9b01      	ldr	r3, [sp, #4]
    66e8:	429a      	cmp	r2, r3
    66ea:	d018      	beq.n	671e <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    66ec:	45ca      	cmp	sl, r9
    66ee:	d9e5      	bls.n	66bc <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    66f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    66f4:	b1bb      	cbz	r3, 6726 <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    66f6:	45ca      	cmp	sl, r9
    66f8:	d315      	bcc.n	6726 <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    66fa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    66fe:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    6700:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    6702:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    6706:	bf28      	it	cs
    6708:	4633      	movcs	r3, r6
    670a:	4642      	mov	r2, r8
    670c:	4429      	add	r1, r5
    670e:	4620      	mov	r0, r4
    6710:	f01c fd85 	bl	2321e <nvs_flash_rd>
	if (rc) {
    6714:	2800      	cmp	r0, #0
    6716:	d1c1      	bne.n	669c <nvs_read_hist+0x2c>
	return wlk_ate.len;
    6718:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    671c:	e7be      	b.n	669c <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    671e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6722:	42bb      	cmp	r3, r7
    6724:	d0e4      	beq.n	66f0 <nvs_read_hist+0x80>
		return -ENOENT;
    6726:	f06f 0001 	mvn.w	r0, #1
    672a:	e7b7      	b.n	669c <nvs_read_hist+0x2c>
		return -EINVAL;
    672c:	f06f 0015 	mvn.w	r0, #21
    6730:	e7b4      	b.n	669c <nvs_read_hist+0x2c>
    6732:	bf00      	nop
    6734:	000281b4 	.word	0x000281b4
    6738:	000282c4 	.word	0x000282c4
    673c:	0002c05d 	.word	0x0002c05d

00006740 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    6740:	4b08      	ldr	r3, [pc, #32]	; (6764 <get_flash_area_from_id+0x24>)
{
    6742:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    6744:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    6746:	4b08      	ldr	r3, [pc, #32]	; (6768 <get_flash_area_from_id+0x28>)
{
    6748:	4601      	mov	r1, r0
    674a:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    674c:	2300      	movs	r3, #0
    674e:	429c      	cmp	r4, r3
    6750:	dc01      	bgt.n	6756 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    6752:	2000      	movs	r0, #0
}
    6754:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    6756:	4610      	mov	r0, r2
    6758:	3210      	adds	r2, #16
    675a:	7805      	ldrb	r5, [r0, #0]
    675c:	428d      	cmp	r5, r1
    675e:	d0f9      	beq.n	6754 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    6760:	3301      	adds	r3, #1
    6762:	e7f4      	b.n	674e <get_flash_area_from_id+0xe>
    6764:	00028804 	.word	0x00028804
    6768:	20000314 	.word	0x20000314

0000676c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    676c:	4b08      	ldr	r3, [pc, #32]	; (6790 <flash_area_open+0x24>)
    676e:	681b      	ldr	r3, [r3, #0]
{
    6770:	b510      	push	{r4, lr}
    6772:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    6774:	b12b      	cbz	r3, 6782 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    6776:	f7ff ffe3 	bl	6740 <get_flash_area_from_id>
	if (area == NULL) {
    677a:	b128      	cbz	r0, 6788 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    677c:	6020      	str	r0, [r4, #0]
	return 0;
    677e:	2000      	movs	r0, #0
}
    6780:	bd10      	pop	{r4, pc}
		return -EACCES;
    6782:	f06f 000c 	mvn.w	r0, #12
    6786:	e7fb      	b.n	6780 <flash_area_open+0x14>
		return -ENOENT;
    6788:	f06f 0001 	mvn.w	r0, #1
    678c:	e7f8      	b.n	6780 <flash_area_open+0x14>
    678e:	bf00      	nop
    6790:	20000314 	.word	0x20000314

00006794 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    6794:	b530      	push	{r4, r5, lr}
    6796:	b089      	sub	sp, #36	; 0x24
    6798:	460c      	mov	r4, r1
    679a:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    679c:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    679e:	f7ff ffcf 	bl	6740 <get_flash_area_from_id>
	if (fa == NULL) {
    67a2:	b1b8      	cbz	r0, 67d4 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    67a4:	6843      	ldr	r3, [r0, #4]
    67a6:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    67a8:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    67aa:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    67ac:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    67ae:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    67b2:	2300      	movs	r3, #0
	cb_data->status = 0;
    67b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    67b8:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    67ba:	f01c fea8 	bl	2350e <device_get_binding>
	if (flash_dev == NULL) {
    67be:	b160      	cbz	r0, 67da <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    67c0:	4907      	ldr	r1, [pc, #28]	; (67e0 <flash_area_get_sectors+0x4c>)
    67c2:	aa01      	add	r2, sp, #4
    67c4:	f020 fcdd 	bl	27182 <flash_page_foreach>
	if (cb_data->status == 0) {
    67c8:	9807      	ldr	r0, [sp, #28]
    67ca:	b908      	cbnz	r0, 67d0 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    67cc:	9b05      	ldr	r3, [sp, #20]
    67ce:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    67d0:	b009      	add	sp, #36	; 0x24
    67d2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    67d4:	f06f 0015 	mvn.w	r0, #21
    67d8:	e7fa      	b.n	67d0 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    67da:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    67de:	e7f7      	b.n	67d0 <flash_area_get_sectors+0x3c>
    67e0:	00023513 	.word	0x00023513

000067e4 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    67e4:	4b10      	ldr	r3, [pc, #64]	; (6828 <settings_save_one+0x44>)
{
    67e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    67ea:	681c      	ldr	r4, [r3, #0]
{
    67ec:	4605      	mov	r5, r0
    67ee:	460e      	mov	r6, r1
    67f0:	4617      	mov	r7, r2
	if (!cs) {
    67f2:	b1ac      	cbz	r4, 6820 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    67f4:	f04f 32ff 	mov.w	r2, #4294967295
    67f8:	f04f 33ff 	mov.w	r3, #4294967295
    67fc:	480b      	ldr	r0, [pc, #44]	; (682c <settings_save_one+0x48>)
    67fe:	f019 fd99 	bl	20334 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    6802:	6863      	ldr	r3, [r4, #4]
    6804:	4632      	mov	r2, r6
    6806:	f8d3 8008 	ldr.w	r8, [r3, #8]
    680a:	4629      	mov	r1, r5
    680c:	463b      	mov	r3, r7
    680e:	4620      	mov	r0, r4
    6810:	47c0      	blx	r8
    6812:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6814:	4805      	ldr	r0, [pc, #20]	; (682c <settings_save_one+0x48>)
    6816:	f019 fdff 	bl	20418 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    681a:	4620      	mov	r0, r4
    681c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    6820:	f06f 0401 	mvn.w	r4, #1
    6824:	e7f9      	b.n	681a <settings_save_one+0x36>
    6826:	bf00      	nop
    6828:	2000d9e0 	.word	0x2000d9e0
    682c:	2000a0a8 	.word	0x2000a0a8

00006830 <settings_src_register>:
	parent->next = child;
    6830:	2300      	movs	r3, #0
    6832:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6834:	4b04      	ldr	r3, [pc, #16]	; (6848 <settings_src_register+0x18>)
    6836:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6838:	b912      	cbnz	r2, 6840 <settings_src_register+0x10>
	list->head = node;
    683a:	e9c3 0000 	strd	r0, r0, [r3]
}
    683e:	4770      	bx	lr
	parent->next = child;
    6840:	6010      	str	r0, [r2, #0]
	list->tail = node;
    6842:	6058      	str	r0, [r3, #4]
}
    6844:	4770      	bx	lr
    6846:	bf00      	nop
    6848:	2000d9d8 	.word	0x2000d9d8

0000684c <settings_dst_register>:
	settings_save_dst = cs;
    684c:	4b01      	ldr	r3, [pc, #4]	; (6854 <settings_dst_register+0x8>)
    684e:	6018      	str	r0, [r3, #0]
}
    6850:	4770      	bx	lr
    6852:	bf00      	nop
    6854:	2000d9e0 	.word	0x2000d9e0

00006858 <settings_load_subtree>:
{
    6858:	b530      	push	{r4, r5, lr}
    685a:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    685c:	2300      	movs	r3, #0
{
    685e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    6860:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6864:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    6866:	f04f 33ff 	mov.w	r3, #4294967295
    686a:	480c      	ldr	r0, [pc, #48]	; (689c <settings_load_subtree+0x44>)
    686c:	f04f 32ff 	mov.w	r2, #4294967295
    6870:	f019 fd60 	bl	20334 <z_impl_k_mutex_lock>
	return list->head;
    6874:	4b0a      	ldr	r3, [pc, #40]	; (68a0 <settings_load_subtree+0x48>)
    6876:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    6878:	b134      	cbz	r4, 6888 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    687a:	6863      	ldr	r3, [r4, #4]
    687c:	4620      	mov	r0, r4
    687e:	681b      	ldr	r3, [r3, #0]
    6880:	a901      	add	r1, sp, #4
    6882:	4798      	blx	r3
	return node->next;
    6884:	6824      	ldr	r4, [r4, #0]
    6886:	e7f7      	b.n	6878 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    6888:	4628      	mov	r0, r5
    688a:	f000 f8d3 	bl	6a34 <settings_commit_subtree>
    688e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6890:	4802      	ldr	r0, [pc, #8]	; (689c <settings_load_subtree+0x44>)
    6892:	f019 fdc1 	bl	20418 <z_impl_k_mutex_unlock>
}
    6896:	4620      	mov	r0, r4
    6898:	b005      	add	sp, #20
    689a:	bd30      	pop	{r4, r5, pc}
    689c:	2000a0a8 	.word	0x2000a0a8
    68a0:	2000d9d8 	.word	0x2000d9d8

000068a4 <settings_load_subtree_direct>:
{
    68a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    68a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
    68aa:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    68ac:	f04f 33ff 	mov.w	r3, #4294967295
    68b0:	480a      	ldr	r0, [pc, #40]	; (68dc <settings_load_subtree_direct+0x38>)
    68b2:	f04f 32ff 	mov.w	r2, #4294967295
    68b6:	f019 fd3d 	bl	20334 <z_impl_k_mutex_lock>
	return list->head;
    68ba:	4b09      	ldr	r3, [pc, #36]	; (68e0 <settings_load_subtree_direct+0x3c>)
    68bc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    68be:	b134      	cbz	r4, 68ce <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    68c0:	6863      	ldr	r3, [r4, #4]
    68c2:	4620      	mov	r0, r4
    68c4:	681b      	ldr	r3, [r3, #0]
    68c6:	a901      	add	r1, sp, #4
    68c8:	4798      	blx	r3
	return node->next;
    68ca:	6824      	ldr	r4, [r4, #0]
    68cc:	e7f7      	b.n	68be <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    68ce:	4803      	ldr	r0, [pc, #12]	; (68dc <settings_load_subtree_direct+0x38>)
    68d0:	f019 fda2 	bl	20418 <z_impl_k_mutex_unlock>
}
    68d4:	2000      	movs	r0, #0
    68d6:	b004      	add	sp, #16
    68d8:	bd10      	pop	{r4, pc}
    68da:	bf00      	nop
    68dc:	2000a0a8 	.word	0x2000a0a8
    68e0:	2000d9d8 	.word	0x2000d9d8

000068e4 <settings_store_init>:
	list->head = NULL;
    68e4:	4b02      	ldr	r3, [pc, #8]	; (68f0 <settings_store_init+0xc>)
    68e6:	2200      	movs	r2, #0
	list->tail = NULL;
    68e8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    68ec:	4770      	bx	lr
    68ee:	bf00      	nop
    68f0:	2000d9d8 	.word	0x2000d9d8

000068f4 <settings_init>:
	list->head = NULL;
    68f4:	4b02      	ldr	r3, [pc, #8]	; (6900 <settings_init+0xc>)
    68f6:	2200      	movs	r2, #0
	list->tail = NULL;
    68f8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    68fc:	f7ff bff2 	b.w	68e4 <settings_store_init>
    6900:	2000d9e4 	.word	0x2000d9e4

00006904 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    6904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6908:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    690a:	460e      	mov	r6, r1
    690c:	b109      	cbz	r1, 6912 <settings_parse_and_lookup+0xe>
		*next = NULL;
    690e:	2300      	movs	r3, #0
    6910:	600b      	str	r3, [r1, #0]
    6912:	4c1e      	ldr	r4, [pc, #120]	; (698c <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6914:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6990 <settings_parse_and_lookup+0x8c>
    6918:	2500      	movs	r5, #0
    691a:	4544      	cmp	r4, r8
    691c:	d308      	bcc.n	6930 <settings_parse_and_lookup+0x2c>
	return list->head;
    691e:	4b1d      	ldr	r3, [pc, #116]	; (6994 <settings_parse_and_lookup+0x90>)
    6920:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    6922:	b10c      	cbz	r4, 6928 <settings_parse_and_lookup+0x24>
    6924:	3c14      	subs	r4, #20
    6926:	b9c4      	cbnz	r4, 695a <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    6928:	4628      	mov	r0, r5
    692a:	b002      	add	sp, #8
    692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    6930:	6821      	ldr	r1, [r4, #0]
    6932:	aa01      	add	r2, sp, #4
    6934:	4638      	mov	r0, r7
    6936:	f01c fe11 	bl	2355c <settings_name_steq>
    693a:	b160      	cbz	r0, 6956 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    693c:	b925      	cbnz	r5, 6948 <settings_parse_and_lookup+0x44>
			if (next) {
    693e:	b10e      	cbz	r6, 6944 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	6033      	str	r3, [r6, #0]
    6944:	4625      	mov	r5, r4
    6946:	e006      	b.n	6956 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    6948:	6829      	ldr	r1, [r5, #0]
    694a:	6820      	ldr	r0, [r4, #0]
    694c:	2200      	movs	r2, #0
    694e:	f01c fe05 	bl	2355c <settings_name_steq>
    6952:	2800      	cmp	r0, #0
    6954:	d1f3      	bne.n	693e <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6956:	3414      	adds	r4, #20
    6958:	e7df      	b.n	691a <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    695a:	6821      	ldr	r1, [r4, #0]
    695c:	aa01      	add	r2, sp, #4
    695e:	4638      	mov	r0, r7
    6960:	f01c fdfc 	bl	2355c <settings_name_steq>
    6964:	b160      	cbz	r0, 6980 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    6966:	b925      	cbnz	r5, 6972 <settings_parse_and_lookup+0x6e>
			if (next) {
    6968:	b10e      	cbz	r6, 696e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    696a:	9b01      	ldr	r3, [sp, #4]
    696c:	6033      	str	r3, [r6, #0]
    696e:	4625      	mov	r5, r4
    6970:	e006      	b.n	6980 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    6972:	6829      	ldr	r1, [r5, #0]
    6974:	6820      	ldr	r0, [r4, #0]
    6976:	2200      	movs	r2, #0
    6978:	f01c fdf0 	bl	2355c <settings_name_steq>
    697c:	2800      	cmp	r0, #0
    697e:	d1f3      	bne.n	6968 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6980:	f114 0f14 	cmn.w	r4, #20
    6984:	d0d0      	beq.n	6928 <settings_parse_and_lookup+0x24>
	return node->next;
    6986:	6964      	ldr	r4, [r4, #20]
    6988:	e7cb      	b.n	6922 <settings_parse_and_lookup+0x1e>
    698a:	bf00      	nop
    698c:	0002813c 	.word	0x0002813c
    6990:	000281b4 	.word	0x000281b4
    6994:	2000d9e4 	.word	0x2000d9e4

00006998 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    6998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    699c:	b085      	sub	sp, #20
    699e:	4605      	mov	r5, r0
    69a0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    69a4:	9003      	str	r0, [sp, #12]
{
    69a6:	460c      	mov	r4, r1
    69a8:	4616      	mov	r6, r2
    69aa:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    69ac:	f1b8 0f00 	cmp.w	r8, #0
    69b0:	d018      	beq.n	69e4 <settings_call_set_handler+0x4c>
    69b2:	f8d8 1000 	ldr.w	r1, [r8]
    69b6:	b181      	cbz	r1, 69da <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    69b8:	aa03      	add	r2, sp, #12
    69ba:	f01c fdcf 	bl	2355c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    69be:	b960      	cbnz	r0, 69da <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    69c0:	2000      	movs	r0, #0
    69c2:	e007      	b.n	69d4 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    69c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    69c8:	9300      	str	r3, [sp, #0]
    69ca:	9803      	ldr	r0, [sp, #12]
    69cc:	463b      	mov	r3, r7
    69ce:	4632      	mov	r2, r6
    69d0:	4621      	mov	r1, r4
    69d2:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    69d4:	b005      	add	sp, #20
    69d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    69da:	f8d8 9004 	ldr.w	r9, [r8, #4]
    69de:	f1b9 0f00 	cmp.w	r9, #0
    69e2:	d1ef      	bne.n	69c4 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    69e4:	a903      	add	r1, sp, #12
    69e6:	4628      	mov	r0, r5
    69e8:	f7ff ff8c 	bl	6904 <settings_parse_and_lookup>
		if (!ch) {
    69ec:	2800      	cmp	r0, #0
    69ee:	d0e7      	beq.n	69c0 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    69f0:	f8d0 8008 	ldr.w	r8, [r0, #8]
    69f4:	9803      	ldr	r0, [sp, #12]
    69f6:	4632      	mov	r2, r6
    69f8:	463b      	mov	r3, r7
    69fa:	4621      	mov	r1, r4
    69fc:	47c0      	blx	r8
		if (rc != 0) {
    69fe:	4606      	mov	r6, r0
    6a00:	2800      	cmp	r0, #0
    6a02:	d0dd      	beq.n	69c0 <settings_call_set_handler+0x28>
    6a04:	4b08      	ldr	r3, [pc, #32]	; (6a28 <settings_call_set_handler+0x90>)
    6a06:	4c09      	ldr	r4, [pc, #36]	; (6a2c <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    6a08:	4628      	mov	r0, r5
    6a0a:	1ae4      	subs	r4, r4, r3
    6a0c:	08e4      	lsrs	r4, r4, #3
    6a0e:	f7fe fde5 	bl	55dc <log_strdup>
    6a12:	01a4      	lsls	r4, r4, #6
    6a14:	f044 0401 	orr.w	r4, r4, #1
    6a18:	4601      	mov	r1, r0
    6a1a:	4623      	mov	r3, r4
    6a1c:	4804      	ldr	r0, [pc, #16]	; (6a30 <settings_call_set_handler+0x98>)
    6a1e:	4632      	mov	r2, r6
    6a20:	f01c f911 	bl	22c46 <log_2>
    6a24:	e7cc      	b.n	69c0 <settings_call_set_handler+0x28>
    6a26:	bf00      	nop
    6a28:	000281b4 	.word	0x000281b4
    6a2c:	0002830c 	.word	0x0002830c
    6a30:	0002c16f 	.word	0x0002c16f

00006a34 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    6a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6a36:	4c1a      	ldr	r4, [pc, #104]	; (6aa0 <settings_commit_subtree+0x6c>)
    6a38:	4f1a      	ldr	r7, [pc, #104]	; (6aa4 <settings_commit_subtree+0x70>)
{
    6a3a:	4606      	mov	r6, r0
	rc = 0;
    6a3c:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6a3e:	42bc      	cmp	r4, r7
    6a40:	d306      	bcc.n	6a50 <settings_commit_subtree+0x1c>
	return list->head;
    6a42:	4b19      	ldr	r3, [pc, #100]	; (6aa8 <settings_commit_subtree+0x74>)
    6a44:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    6a46:	b10c      	cbz	r4, 6a4c <settings_commit_subtree+0x18>
    6a48:	3c14      	subs	r4, #20
    6a4a:	b99c      	cbnz	r4, 6a74 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    6a4c:	4628      	mov	r0, r5
    6a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6a50:	b91e      	cbnz	r6, 6a5a <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    6a52:	68e3      	ldr	r3, [r4, #12]
    6a54:	b94b      	cbnz	r3, 6a6a <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6a56:	3414      	adds	r4, #20
    6a58:	e7f1      	b.n	6a3e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6a5a:	6820      	ldr	r0, [r4, #0]
    6a5c:	2200      	movs	r2, #0
    6a5e:	4631      	mov	r1, r6
    6a60:	f01c fd7c 	bl	2355c <settings_name_steq>
    6a64:	2800      	cmp	r0, #0
    6a66:	d1f4      	bne.n	6a52 <settings_commit_subtree+0x1e>
    6a68:	e7f5      	b.n	6a56 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    6a6a:	4798      	blx	r3
				rc = rc2;
    6a6c:	2d00      	cmp	r5, #0
    6a6e:	bf08      	it	eq
    6a70:	4605      	moveq	r5, r0
    6a72:	e7f0      	b.n	6a56 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6a74:	b936      	cbnz	r6, 6a84 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    6a76:	68e3      	ldr	r3, [r4, #12]
    6a78:	b963      	cbnz	r3, 6a94 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6a7a:	f114 0f14 	cmn.w	r4, #20
    6a7e:	d0e5      	beq.n	6a4c <settings_commit_subtree+0x18>
	return node->next;
    6a80:	6964      	ldr	r4, [r4, #20]
    6a82:	e7e0      	b.n	6a46 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6a84:	6820      	ldr	r0, [r4, #0]
    6a86:	2200      	movs	r2, #0
    6a88:	4631      	mov	r1, r6
    6a8a:	f01c fd67 	bl	2355c <settings_name_steq>
    6a8e:	2800      	cmp	r0, #0
    6a90:	d1f1      	bne.n	6a76 <settings_commit_subtree+0x42>
    6a92:	e7f2      	b.n	6a7a <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    6a94:	4798      	blx	r3
				rc = rc2;
    6a96:	2d00      	cmp	r5, #0
    6a98:	bf08      	it	eq
    6a9a:	4605      	moveq	r5, r0
    6a9c:	e7ed      	b.n	6a7a <settings_commit_subtree+0x46>
    6a9e:	bf00      	nop
    6aa0:	0002813c 	.word	0x0002813c
    6aa4:	000281b4 	.word	0x000281b4
    6aa8:	2000d9e4 	.word	0x2000d9e4

00006aac <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    6aac:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    6aae:	4c06      	ldr	r4, [pc, #24]	; (6ac8 <settings_subsys_init+0x1c>)
    6ab0:	7823      	ldrb	r3, [r4, #0]
    6ab2:	b93b      	cbnz	r3, 6ac4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    6ab4:	f7ff ff1e 	bl	68f4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    6ab8:	f000 f864 	bl	6b84 <settings_backend_init>

	if (!err) {
    6abc:	b908      	cbnz	r0, 6ac2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    6abe:	2301      	movs	r3, #1
    6ac0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    6ac2:	bd10      	pop	{r4, pc}
		return 0;
    6ac4:	2000      	movs	r0, #0
    6ac6:	e7fc      	b.n	6ac2 <settings_subsys_init+0x16>
    6ac8:	2000f5b5 	.word	0x2000f5b5

00006acc <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    6acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    6ad0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    6ad2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 6b80 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    6ad6:	3401      	adds	r4, #1
{
    6ad8:	b098      	sub	sp, #96	; 0x60
    6ada:	4680      	mov	r8, r0
    6adc:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    6ade:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6ae0:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    6ae4:	1e65      	subs	r5, r4, #1
    6ae6:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    6ae8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    6aec:	d045      	beq.n	6b7a <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6aee:	234a      	movs	r3, #74	; 0x4a
    6af0:	aa05      	add	r2, sp, #20
    6af2:	4629      	mov	r1, r5
    6af4:	4630      	mov	r0, r6
    6af6:	f01c fd03 	bl	23500 <nvs_read>
    6afa:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    6afe:	343f      	adds	r4, #63	; 0x3f
    6b00:	b2a4      	uxth	r4, r4
    6b02:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6b04:	4621      	mov	r1, r4
    6b06:	2301      	movs	r3, #1
    6b08:	f10d 020b 	add.w	r2, sp, #11
    6b0c:	4630      	mov	r0, r6
    6b0e:	f01c fcf7 	bl	23500 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6b12:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6b14:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6b16:	dc03      	bgt.n	6b20 <settings_nvs_load+0x54>
    6b18:	2800      	cmp	r0, #0
    6b1a:	dc03      	bgt.n	6b24 <settings_nvs_load+0x58>
{
    6b1c:	462c      	mov	r4, r5
    6b1e:	e7e1      	b.n	6ae4 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    6b20:	2800      	cmp	r0, #0
    6b22:	dc16      	bgt.n	6b52 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    6b24:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    6b28:	42ab      	cmp	r3, r5
    6b2a:	d109      	bne.n	6b40 <settings_nvs_load+0x74>
				cf->last_name_id--;
    6b2c:	4642      	mov	r2, r8
    6b2e:	1e6b      	subs	r3, r5, #1
    6b30:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    6b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6b38:	2302      	movs	r3, #2
    6b3a:	4630      	mov	r0, r6
    6b3c:	f7ff fcc4 	bl	64c8 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    6b40:	4629      	mov	r1, r5
    6b42:	4630      	mov	r0, r6
    6b44:	f01c fcd8 	bl	234f8 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    6b48:	4621      	mov	r1, r4
    6b4a:	4630      	mov	r0, r6
    6b4c:	f01c fcd4 	bl	234f8 <nvs_delete>
			continue;
    6b50:	e7e4      	b.n	6b1c <settings_nvs_load+0x50>
		name[rc1] = '\0';
    6b52:	ab18      	add	r3, sp, #96	; 0x60
    6b54:	441f      	add	r7, r3
    6b56:	2300      	movs	r3, #0
    6b58:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    6b5c:	4652      	mov	r2, sl
    6b5e:	f8cd 9000 	str.w	r9, [sp]
    6b62:	ab03      	add	r3, sp, #12
    6b64:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    6b66:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    6b68:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    6b6c:	f7ff ff14 	bl	6998 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    6b70:	2800      	cmp	r0, #0
    6b72:	d0d3      	beq.n	6b1c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    6b74:	b018      	add	sp, #96	; 0x60
    6b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b7a:	2000      	movs	r0, #0
	return ret;
    6b7c:	e7fa      	b.n	6b74 <settings_nvs_load+0xa8>
    6b7e:	bf00      	nop
    6b80:	000235cf 	.word	0x000235cf

00006b84 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    6b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    6b86:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6b88:	4669      	mov	r1, sp
    6b8a:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    6b8c:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6b8e:	f7ff fded 	bl	676c <flash_area_open>
	if (rc) {
    6b92:	4604      	mov	r4, r0
    6b94:	2800      	cmp	r0, #0
    6b96:	d136      	bne.n	6c06 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6b98:	aa02      	add	r2, sp, #8
    6b9a:	a901      	add	r1, sp, #4
    6b9c:	2004      	movs	r0, #4
    6b9e:	f7ff fdf9 	bl	6794 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    6ba2:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6ba6:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    6ba8:	d02d      	beq.n	6c06 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    6baa:	b138      	cbz	r0, 6bbc <settings_backend_init+0x38>
    6bac:	340c      	adds	r4, #12
    6bae:	d005      	beq.n	6bbc <settings_backend_init+0x38>
		k_panic();
    6bb0:	4040      	eors	r0, r0
    6bb2:	f380 8811 	msr	BASEPRI, r0
    6bb6:	f04f 0004 	mov.w	r0, #4
    6bba:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    6bbc:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    6bbe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    6bc2:	d223      	bcs.n	6c0c <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    6bc4:	9a00      	ldr	r2, [sp, #0]
    6bc6:	2300      	movs	r3, #0
    6bc8:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    6bca:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    6bcc:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    6bce:	4285      	cmp	r5, r0
    6bd0:	b29c      	uxth	r4, r3
    6bd2:	d303      	bcc.n	6bdc <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    6bd4:	3301      	adds	r3, #1
    6bd6:	2b08      	cmp	r3, #8
    6bd8:	d1f8      	bne.n	6bcc <settings_backend_init+0x48>
    6bda:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6bdc:	4d0d      	ldr	r5, [pc, #52]	; (6c14 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    6bde:	6853      	ldr	r3, [r2, #4]
    6be0:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    6be2:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6be4:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    6be6:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6be8:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6bea:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    6bec:	f01c fd86 	bl	236fc <settings_nvs_backend_init>
	if (rc) {
    6bf0:	4604      	mov	r4, r0
    6bf2:	b940      	cbnz	r0, 6c06 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6bf4:	4e08      	ldr	r6, [pc, #32]	; (6c18 <settings_backend_init+0x94>)
    6bf6:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    6bf8:	4628      	mov	r0, r5
    6bfa:	f7ff fe19 	bl	6830 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    6bfe:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6c00:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    6c02:	f7ff fe23 	bl	684c <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    6c06:	4620      	mov	r0, r4
    6c08:	b004      	add	sp, #16
    6c0a:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    6c0c:	f06f 0424 	mvn.w	r4, #36	; 0x24
    6c10:	e7f9      	b.n	6c06 <settings_backend_init+0x82>
    6c12:	bf00      	nop
    6c14:	2000d9ec 	.word	0x2000d9ec
    6c18:	20000318 	.word	0x20000318

00006c1c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c1e:	4605      	mov	r5, r0
	__asm__ volatile(
    6c20:	f04f 0320 	mov.w	r3, #32
    6c24:	f3ef 8611 	mrs	r6, BASEPRI
    6c28:	f383 8811 	msr	BASEPRI, r3
    6c2c:	f3bf 8f6f 	isb	sy
	return list->head;
    6c30:	4b09      	ldr	r3, [pc, #36]	; (6c58 <pm_state_notify+0x3c>)
    6c32:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6c34:	b15c      	cbz	r4, 6c4e <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    6c36:	4f09      	ldr	r7, [pc, #36]	; (6c5c <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    6c38:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6c3c:	2d00      	cmp	r5, #0
    6c3e:	bf08      	it	eq
    6c40:	4613      	moveq	r3, r2
		if (callback) {
    6c42:	b10b      	cbz	r3, 6c48 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    6c44:	7838      	ldrb	r0, [r7, #0]
    6c46:	4798      	blx	r3
	return node->next;
    6c48:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6c4a:	2c00      	cmp	r4, #0
    6c4c:	d1f4      	bne.n	6c38 <pm_state_notify+0x1c>
	__asm__ volatile(
    6c4e:	f386 8811 	msr	BASEPRI, r6
    6c52:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c58:	2000da2c 	.word	0x2000da2c
    6c5c:	2000da34 	.word	0x2000da34

00006c60 <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
    6c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
    6c64:	4f18      	ldr	r7, [pc, #96]	; (6cc8 <pm_system_suspend+0x68>)
    6c66:	4c19      	ldr	r4, [pc, #100]	; (6ccc <pm_system_suspend+0x6c>)
    6c68:	783b      	ldrb	r3, [r7, #0]
{
    6c6a:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
    6c6c:	b93b      	cbnz	r3, 6c7e <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
    6c6e:	466d      	mov	r5, sp
    6c70:	4628      	mov	r0, r5
    6c72:	f01c fd5f 	bl	23734 <pm_policy_next_state>
    6c76:	e895 0003 	ldmia.w	r5, {r0, r1}
    6c7a:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    6c7e:	7825      	ldrb	r5, [r4, #0]
    6c80:	b1f5      	cbz	r5, 6cc0 <pm_system_suspend+0x60>
	post_ops_done = 0;
    6c82:	4e13      	ldr	r6, [pc, #76]	; (6cd0 <pm_system_suspend+0x70>)
    6c84:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
    6c88:	2001      	movs	r0, #1
	if (deep_sleep) {
    6c8a:	3d04      	subs	r5, #4
	post_ops_done = 0;
    6c8c:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
    6c90:	f7ff ffc4 	bl	6c1c <pm_state_notify>
	if (deep_sleep) {
    6c94:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    6c96:	bf98      	it	ls
    6c98:	4b0e      	ldrls	r3, [pc, #56]	; (6cd4 <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
    6c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
    6c9e:	bf98      	it	ls
    6ca0:	f883 8000 	strbls.w	r8, [r3]
    6ca4:	f01e f836 	bl	24d14 <pm_power_state_set>
	if (!post_ops_done) {
    6ca8:	6830      	ldr	r0, [r6, #0]
    6caa:	b940      	cbnz	r0, 6cbe <pm_system_suspend+0x5e>
		post_ops_done = 1;
    6cac:	2301      	movs	r3, #1
		z_forced_power_state = false;
    6cae:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
    6cb0:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
    6cb2:	f7ff ffb3 	bl	6c1c <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    6cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
    6cba:	f01e f83e 	bl	24d3a <pm_power_state_exit_post_ops>
	return z_power_state.state;
    6cbe:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
    6cc0:	4628      	mov	r0, r5
    6cc2:	b002      	add	sp, #8
    6cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cc8:	2000f5b6 	.word	0x2000f5b6
    6ccc:	2000da34 	.word	0x2000da34
    6cd0:	20000328 	.word	0x20000328
    6cd4:	2000fb36 	.word	0x2000fb36

00006cd8 <pm_system_resume>:

void pm_system_resume(void)
{
    6cd8:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    6cda:	4b06      	ldr	r3, [pc, #24]	; (6cf4 <pm_system_resume+0x1c>)
    6cdc:	6818      	ldr	r0, [r3, #0]
    6cde:	b940      	cbnz	r0, 6cf2 <pm_system_resume+0x1a>
		post_ops_done = 1;
    6ce0:	2201      	movs	r2, #1
    6ce2:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
    6ce4:	f7ff ff9a 	bl	6c1c <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    6ce8:	4b03      	ldr	r3, [pc, #12]	; (6cf8 <pm_system_resume+0x20>)
    6cea:	e893 0003 	ldmia.w	r3, {r0, r1}
    6cee:	f01e f824 	bl	24d3a <pm_power_state_exit_post_ops>
	}
}
    6cf2:	bd08      	pop	{r3, pc}
    6cf4:	20000328 	.word	0x20000328
    6cf8:	2000da34 	.word	0x2000da34

00006cfc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6cfc:	b510      	push	{r4, lr}
    6cfe:	4807      	ldr	r0, [pc, #28]	; (6d1c <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    6d00:	4c07      	ldr	r4, [pc, #28]	; (6d20 <uart_console_init+0x24>)
    6d02:	f019 f8f3 	bl	1feec <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    6d06:	4b07      	ldr	r3, [pc, #28]	; (6d24 <uart_console_init+0x28>)
    6d08:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6d0a:	4620      	mov	r0, r4
    6d0c:	f001 f97a 	bl	8004 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6d10:	4620      	mov	r0, r4
    6d12:	f7fd fbfb 	bl	450c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    6d16:	2000      	movs	r0, #0
    6d18:	bd10      	pop	{r4, pc}
    6d1a:	bf00      	nop
    6d1c:	0002bffa 	.word	0x0002bffa
    6d20:	00006d29 	.word	0x00006d29
    6d24:	2000da3c 	.word	0x2000da3c

00006d28 <console_out>:
	if ('\n' == c) {
    6d28:	280a      	cmp	r0, #10
{
    6d2a:	b538      	push	{r3, r4, r5, lr}
    6d2c:	4d07      	ldr	r5, [pc, #28]	; (6d4c <console_out+0x24>)
    6d2e:	4604      	mov	r4, r0
	if ('\n' == c) {
    6d30:	d104      	bne.n	6d3c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    6d32:	6828      	ldr	r0, [r5, #0]
    6d34:	6883      	ldr	r3, [r0, #8]
    6d36:	210d      	movs	r1, #13
    6d38:	685b      	ldr	r3, [r3, #4]
    6d3a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    6d3c:	6828      	ldr	r0, [r5, #0]
    6d3e:	6883      	ldr	r3, [r0, #8]
    6d40:	b2e1      	uxtb	r1, r4
    6d42:	685b      	ldr	r3, [r3, #4]
    6d44:	4798      	blx	r3
}
    6d46:	4620      	mov	r0, r4
    6d48:	bd38      	pop	{r3, r4, r5, pc}
    6d4a:	bf00      	nop
    6d4c:	2000da3c 	.word	0x2000da3c

00006d50 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6d50:	4b08      	ldr	r3, [pc, #32]	; (6d74 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6d52:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6d54:	1ac3      	subs	r3, r0, r3
{
    6d56:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6d58:	4907      	ldr	r1, [pc, #28]	; (6d78 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    6d5a:	109b      	asrs	r3, r3, #2
{
    6d5c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6d5e:	4359      	muls	r1, r3
    6d60:	4806      	ldr	r0, [pc, #24]	; (6d7c <onoff_stop+0x2c>)
    6d62:	2240      	movs	r2, #64	; 0x40
    6d64:	f01c fd06 	bl	23774 <stop>
	notify(mgr, res);
    6d68:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6d6a:	4601      	mov	r1, r0
	notify(mgr, res);
    6d6c:	4620      	mov	r0, r4
}
    6d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6d72:	4718      	bx	r3
    6d74:	2000da50 	.word	0x2000da50
    6d78:	b6db6db7 	.word	0xb6db6db7
    6d7c:	20009e6c 	.word	0x20009e6c

00006d80 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6d82:	4c0c      	ldr	r4, [pc, #48]	; (6db4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6d84:	4a0c      	ldr	r2, [pc, #48]	; (6db8 <onoff_start+0x38>)
    6d86:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6d88:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6d8a:	9300      	str	r3, [sp, #0]
{
    6d8c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6d8e:	460b      	mov	r3, r1
    6d90:	490a      	ldr	r1, [pc, #40]	; (6dbc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    6d92:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6d94:	4361      	muls	r1, r4
{
    6d96:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6d98:	4809      	ldr	r0, [pc, #36]	; (6dc0 <onoff_start+0x40>)
    6d9a:	f01c fd18 	bl	237ce <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6d9e:	1e01      	subs	r1, r0, #0
    6da0:	da05      	bge.n	6dae <onoff_start+0x2e>
		notify(mgr, err);
    6da2:	4630      	mov	r0, r6
    6da4:	462b      	mov	r3, r5
	}
}
    6da6:	b002      	add	sp, #8
    6da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6dac:	4718      	bx	r3
}
    6dae:	b002      	add	sp, #8
    6db0:	bd70      	pop	{r4, r5, r6, pc}
    6db2:	bf00      	nop
    6db4:	2000da50 	.word	0x2000da50
    6db8:	0002383d 	.word	0x0002383d
    6dbc:	b6db6db7 	.word	0xb6db6db7
    6dc0:	20009e6c 	.word	0x20009e6c

00006dc4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6dc4:	2200      	movs	r2, #0
{
    6dc6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6dc8:	2101      	movs	r1, #1
{
    6dca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6dcc:	4610      	mov	r0, r2
    6dce:	f000 fcab 	bl	7728 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    6dd2:	2000      	movs	r0, #0
    6dd4:	f000 fc76 	bl	76c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6dd8:	480f      	ldr	r0, [pc, #60]	; (6e18 <clk_init+0x54>)
    6dda:	f018 fb81 	bl	1f4e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6dde:	4b0f      	ldr	r3, [pc, #60]	; (6e1c <clk_init+0x58>)
    6de0:	4298      	cmp	r0, r3
    6de2:	d115      	bne.n	6e10 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6de4:	f020 fa4d 	bl	27282 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    6de8:	68e6      	ldr	r6, [r4, #12]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6dea:	490d      	ldr	r1, [pc, #52]	; (6e20 <clk_init+0x5c>)
    6dec:	4630      	mov	r0, r6
    6dee:	f01b fadc 	bl	223aa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6df2:	2800      	cmp	r0, #0
    6df4:	db0b      	blt.n	6e0e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    6df6:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6df8:	4909      	ldr	r1, [pc, #36]	; (6e20 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6dfa:	2501      	movs	r5, #1
    6dfc:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6dfe:	f104 001c 	add.w	r0, r4, #28
    6e02:	f01b fad2 	bl	223aa <onoff_manager_init>
		if (err < 0) {
    6e06:	2800      	cmp	r0, #0
    6e08:	db01      	blt.n	6e0e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6e0a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6e0c:	2000      	movs	r0, #0
}
    6e0e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6e10:	f06f 0004 	mvn.w	r0, #4
    6e14:	e7fb      	b.n	6e0e <clk_init+0x4a>
    6e16:	bf00      	nop
    6e18:	00006e59 	.word	0x00006e59
    6e1c:	0bad0000 	.word	0x0bad0000
    6e20:	00028834 	.word	0x00028834

00006e24 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6e24:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6e26:	230c      	movs	r3, #12
    6e28:	4809      	ldr	r0, [pc, #36]	; (6e50 <clkstarted_handle.constprop.0+0x2c>)
    6e2a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    6e2c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    6e2e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6e30:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    6e34:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6e36:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6e38:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6e3a:	4418      	add	r0, r3
    6e3c:	f01c fc87 	bl	2374e <set_on_state>
	if (callback) {
    6e40:	b12d      	cbz	r5, 6e4e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6e42:	4632      	mov	r2, r6
    6e44:	462b      	mov	r3, r5
    6e46:	4803      	ldr	r0, [pc, #12]	; (6e54 <clkstarted_handle.constprop.0+0x30>)
}
    6e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6e4c:	4718      	bx	r3
}
    6e4e:	bd70      	pop	{r4, r5, r6, pc}
    6e50:	2000da50 	.word	0x2000da50
    6e54:	20009e6c 	.word	0x20009e6c

00006e58 <clock_event_handler>:
	switch (event) {
    6e58:	b110      	cbz	r0, 6e60 <clock_event_handler+0x8>
    6e5a:	2801      	cmp	r0, #1
    6e5c:	d004      	beq.n	6e68 <clock_event_handler+0x10>
    6e5e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6e60:	4b03      	ldr	r3, [pc, #12]	; (6e70 <clock_event_handler+0x18>)
    6e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6e64:	075b      	lsls	r3, r3, #29
    6e66:	d101      	bne.n	6e6c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6e68:	f7ff bfdc 	b.w	6e24 <clkstarted_handle.constprop.0>
}
    6e6c:	4770      	bx	lr
    6e6e:	bf00      	nop
    6e70:	2000da50 	.word	0x2000da50

00006e74 <generic_hfclk_start>:
{
    6e74:	b508      	push	{r3, lr}
	__asm__ volatile(
    6e76:	f04f 0320 	mov.w	r3, #32
    6e7a:	f3ef 8111 	mrs	r1, BASEPRI
    6e7e:	f383 8811 	msr	BASEPRI, r3
    6e82:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6e86:	4a12      	ldr	r2, [pc, #72]	; (6ed0 <generic_hfclk_start+0x5c>)
    6e88:	6813      	ldr	r3, [r2, #0]
    6e8a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    6e8e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    6e92:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6e94:	d00c      	beq.n	6eb0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6e9a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6e9e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6ea2:	f013 0301 	ands.w	r3, r3, #1
    6ea6:	d003      	beq.n	6eb0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    6ea8:	480a      	ldr	r0, [pc, #40]	; (6ed4 <generic_hfclk_start+0x60>)
    6eaa:	f01c fc50 	bl	2374e <set_on_state>
			already_started = true;
    6eae:	2301      	movs	r3, #1
	__asm__ volatile(
    6eb0:	f381 8811 	msr	BASEPRI, r1
    6eb4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6eb8:	b123      	cbz	r3, 6ec4 <generic_hfclk_start+0x50>
}
    6eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    6ebe:	2000      	movs	r0, #0
    6ec0:	f7ff bfb0 	b.w	6e24 <clkstarted_handle.constprop.0>
}
    6ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6ec8:	2001      	movs	r0, #1
    6eca:	f020 b9e4 	b.w	27296 <nrfx_clock_start>
    6ece:	bf00      	nop
    6ed0:	2000daa0 	.word	0x2000daa0
    6ed4:	2000da90 	.word	0x2000da90

00006ed8 <api_blocking_start>:
{
    6ed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6eda:	2200      	movs	r2, #0
    6edc:	2301      	movs	r3, #1
    6ede:	e9cd 2302 	strd	r2, r3, [sp, #8]
    6ee2:	ab04      	add	r3, sp, #16
    6ee4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6ee8:	4a09      	ldr	r2, [pc, #36]	; (6f10 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6eea:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6eee:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6ef0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6ef4:	f01c fc9b 	bl	2382e <api_start>
	if (err < 0) {
    6ef8:	2800      	cmp	r0, #0
    6efa:	db05      	blt.n	6f08 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    6efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6f00:	2300      	movs	r3, #0
    6f02:	4668      	mov	r0, sp
    6f04:	f019 feae 	bl	20c64 <z_impl_k_sem_take>
}
    6f08:	b007      	add	sp, #28
    6f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f0e:	bf00      	nop
    6f10:	0002385b 	.word	0x0002385b

00006f14 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f14:	4b09      	ldr	r3, [pc, #36]	; (6f3c <generic_hfclk_stop+0x28>)
    6f16:	f3bf 8f5b 	dmb	ish
    6f1a:	e853 2f00 	ldrex	r2, [r3]
    6f1e:	f022 0102 	bic.w	r1, r2, #2
    6f22:	e843 1000 	strex	r0, r1, [r3]
    6f26:	2800      	cmp	r0, #0
    6f28:	d1f7      	bne.n	6f1a <generic_hfclk_stop+0x6>
    6f2a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6f2e:	07d3      	lsls	r3, r2, #31
    6f30:	d402      	bmi.n	6f38 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6f32:	2001      	movs	r0, #1
    6f34:	f018 bae4 	b.w	1f500 <nrfx_clock_stop>
}
    6f38:	4770      	bx	lr
    6f3a:	bf00      	nop
    6f3c:	2000daa0 	.word	0x2000daa0

00006f40 <z_nrf_clock_control_get_onoff>:
}
    6f40:	4a02      	ldr	r2, [pc, #8]	; (6f4c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    6f42:	b2c3      	uxtb	r3, r0
}
    6f44:	201c      	movs	r0, #28
    6f46:	fb03 2000 	mla	r0, r3, r0, r2
    6f4a:	4770      	bx	lr
    6f4c:	2000da50 	.word	0x2000da50

00006f50 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6f50:	4b09      	ldr	r3, [pc, #36]	; (6f78 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    6f52:	f3bf 8f5b 	dmb	ish
    6f56:	e853 2f00 	ldrex	r2, [r3]
    6f5a:	f042 0101 	orr.w	r1, r2, #1
    6f5e:	e843 1000 	strex	r0, r1, [r3]
    6f62:	2800      	cmp	r0, #0
    6f64:	d1f7      	bne.n	6f56 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6f66:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6f6a:	0793      	lsls	r3, r2, #30
    6f6c:	d402      	bmi.n	6f74 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6f6e:	2001      	movs	r0, #1
    6f70:	f020 b991 	b.w	27296 <nrfx_clock_start>
}
    6f74:	4770      	bx	lr
    6f76:	bf00      	nop
    6f78:	2000daa0 	.word	0x2000daa0

00006f7c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f7c:	4b09      	ldr	r3, [pc, #36]	; (6fa4 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    6f7e:	f3bf 8f5b 	dmb	ish
    6f82:	e853 2f00 	ldrex	r2, [r3]
    6f86:	f022 0101 	bic.w	r1, r2, #1
    6f8a:	e843 1000 	strex	r0, r1, [r3]
    6f8e:	2800      	cmp	r0, #0
    6f90:	d1f7      	bne.n	6f82 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    6f92:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    6f96:	0793      	lsls	r3, r2, #30
    6f98:	d402      	bmi.n	6fa0 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6f9a:	2001      	movs	r0, #1
    6f9c:	f018 bab0 	b.w	1f500 <nrfx_clock_stop>
}
    6fa0:	4770      	bx	lr
    6fa2:	bf00      	nop
    6fa4:	2000daa0 	.word	0x2000daa0

00006fa8 <z_nrf_clock_control_lf_on>:
{
    6fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6fac:	4939      	ldr	r1, [pc, #228]	; (7094 <z_nrf_clock_control_lf_on+0xec>)
    6fae:	f3bf 8f5b 	dmb	ish
    6fb2:	4607      	mov	r7, r0
    6fb4:	2201      	movs	r2, #1
    6fb6:	e851 3f00 	ldrex	r3, [r1]
    6fba:	e841 2000 	strex	r0, r2, [r1]
    6fbe:	2800      	cmp	r0, #0
    6fc0:	d1f9      	bne.n	6fb6 <z_nrf_clock_control_lf_on+0xe>
    6fc2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6fc6:	b933      	cbnz	r3, 6fd6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6fc8:	4933      	ldr	r1, [pc, #204]	; (7098 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    6fca:	4834      	ldr	r0, [pc, #208]	; (709c <z_nrf_clock_control_lf_on+0xf4>)
    6fcc:	604b      	str	r3, [r1, #4]
    6fce:	60cb      	str	r3, [r1, #12]
    6fd0:	608a      	str	r2, [r1, #8]
    6fd2:	f01b f9fd 	bl	223d0 <onoff_request>
	switch (start_mode) {
    6fd6:	1e7b      	subs	r3, r7, #1
    6fd8:	2b01      	cmp	r3, #1
    6fda:	d82f      	bhi.n	703c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6fdc:	2f01      	cmp	r7, #1
    6fde:	d107      	bne.n	6ff0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fe4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6fe8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6fec:	2b01      	cmp	r3, #1
    6fee:	d025      	beq.n	703c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6ff0:	f020 fce5 	bl	279be <k_is_in_isr>
    6ff4:	4604      	mov	r4, r0
    6ff6:	b918      	cbnz	r0, 7000 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    6ff8:	4b29      	ldr	r3, [pc, #164]	; (70a0 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    6ffa:	781b      	ldrb	r3, [r3, #0]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d141      	bne.n	7084 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    7000:	f04f 0320 	mov.w	r3, #32
    7004:	f3ef 8611 	mrs	r6, BASEPRI
    7008:	f383 8811 	msr	BASEPRI, r3
    700c:	f3bf 8f6f 	isb	sy
    7010:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7012:	f8df 8090 	ldr.w	r8, [pc, #144]	; 70a4 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7016:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    701a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    701e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    7022:	03d2      	lsls	r2, r2, #15
    7024:	d50c      	bpl.n	7040 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7026:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    702a:	2b01      	cmp	r3, #1
    702c:	d001      	beq.n	7032 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    702e:	2f01      	cmp	r7, #1
    7030:	d106      	bne.n	7040 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    7032:	b30c      	cbz	r4, 7078 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    7034:	f386 8811 	msr	BASEPRI, r6
    7038:	f3bf 8f6f 	isb	sy
}
    703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    7040:	b1ac      	cbz	r4, 706e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7042:	4630      	mov	r0, r6
    7044:	f000 fbf6 	bl	7834 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7048:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    704c:	2b00      	cmp	r3, #0
    704e:	d1e4      	bne.n	701a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7050:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    7054:	2a00      	cmp	r2, #0
    7056:	d0e0      	beq.n	701a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7058:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    705c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    7060:	2301      	movs	r3, #1
    7062:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    7066:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    706a:	60ab      	str	r3, [r5, #8]
}
    706c:	e7d5      	b.n	701a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    706e:	2100      	movs	r1, #0
    7070:	2021      	movs	r0, #33	; 0x21
    7072:	f019 fdb1 	bl	20bd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7076:	e7e7      	b.n	7048 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    7078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    707c:	2202      	movs	r2, #2
    707e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7082:	e7db      	b.n	703c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    7084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7088:	2202      	movs	r2, #2
    708a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    708e:	4606      	mov	r6, r0
}
    7090:	e7bf      	b.n	7012 <z_nrf_clock_control_lf_on+0x6a>
    7092:	bf00      	nop
    7094:	2000daa4 	.word	0x2000daa4
    7098:	2000da40 	.word	0x2000da40
    709c:	2000da6c 	.word	0x2000da6c
    70a0:	2000fb37 	.word	0x2000fb37
    70a4:	e000e100 	.word	0xe000e100

000070a8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    70a8:	4a04      	ldr	r2, [pc, #16]	; (70bc <sys_clock_timeout_handler+0x14>)
    70aa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    70ac:	1ac8      	subs	r0, r1, r3
    70ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    70b2:	4403      	add	r3, r0
    70b4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    70b6:	f01a b83b 	b.w	21130 <z_clock_announce>
    70ba:	bf00      	nop
    70bc:	2000dab4 	.word	0x2000dab4

000070c0 <set_absolute_alarm>:
{
    70c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    70c4:	0086      	lsls	r6, r0, #2
    70c6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    70ca:	f100 0450 	add.w	r4, r0, #80	; 0x50
    70ce:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    70d2:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    70d4:	b2a4      	uxth	r4, r4
    70d6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    70da:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    70de:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    70e2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7150 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    70e6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    70ea:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    70ee:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    70f0:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    70f4:	eba3 0309 	sub.w	r3, r3, r9
    70f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    70fc:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7100:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    7102:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    7106:	d102      	bne.n	710e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    7108:	2013      	movs	r0, #19
    710a:	f020 fc5e 	bl	279ca <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    710e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    7112:	1aab      	subs	r3, r5, r2
    7114:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    7118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    711c:	bf88      	it	hi
    711e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7120:	2300      	movs	r3, #0
    7122:	6023      	str	r3, [r4, #0]
    7124:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7126:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    712a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    712e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    7132:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    7136:	4599      	cmp	r9, r3
    7138:	d006      	beq.n	7148 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    713a:	1aeb      	subs	r3, r5, r3
    713c:	3b02      	subs	r3, #2
    713e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    7142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7146:	d801      	bhi.n	714c <set_absolute_alarm+0x8c>
}
    7148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    714c:	462b      	mov	r3, r5
    714e:	e7cf      	b.n	70f0 <set_absolute_alarm+0x30>
    7150:	40011000 	.word	0x40011000

00007154 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    7154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7156:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    7158:	4c10      	ldr	r4, [pc, #64]	; (719c <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    715a:	462f      	mov	r7, r5
    715c:	4b10      	ldr	r3, [pc, #64]	; (71a0 <rtc_nrf_isr+0x4c>)
    715e:	681e      	ldr	r6, [r3, #0]
    7160:	b105      	cbz	r5, 7164 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    7162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    7164:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    7168:	03d2      	lsls	r2, r2, #15
    716a:	d5fa      	bpl.n	7162 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    716c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    7170:	2a00      	cmp	r2, #0
    7172:	d0f6      	beq.n	7162 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7174:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    7178:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    717c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7180:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    7184:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7188:	2501      	movs	r5, #1
			if (handler) {
    718a:	b126      	cbz	r6, 7196 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    718c:	685a      	ldr	r2, [r3, #4]
    718e:	601f      	str	r7, [r3, #0]
    7190:	2000      	movs	r0, #0
    7192:	47b0      	blx	r6
    7194:	e7e2      	b.n	715c <rtc_nrf_isr+0x8>
    7196:	601e      	str	r6, [r3, #0]
}
    7198:	e7e3      	b.n	7162 <rtc_nrf_isr+0xe>
    719a:	bf00      	nop
    719c:	40011000 	.word	0x40011000
    71a0:	2000daa8 	.word	0x2000daa8

000071a4 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    71a4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    71a6:	4c0f      	ldr	r4, [pc, #60]	; (71e4 <z_clock_driver_init+0x40>)
    71a8:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    71aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    71ae:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    71b2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    71b6:	4b0c      	ldr	r3, [pc, #48]	; (71e8 <z_clock_driver_init+0x44>)
    71b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    71bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    71c0:	2101      	movs	r1, #1
    71c2:	462a      	mov	r2, r5
    71c4:	2011      	movs	r0, #17
    71c6:	f000 faaf 	bl	7728 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    71ca:	2011      	movs	r0, #17
    71cc:	f000 fa7a 	bl	76c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    71d0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    71d2:	4a06      	ldr	r2, [pc, #24]	; (71ec <z_clock_driver_init+0x48>)
    71d4:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    71d6:	2002      	movs	r0, #2
    71d8:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    71da:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    71dc:	f7ff fee4 	bl	6fa8 <z_nrf_clock_control_lf_on>

	return 0;
}
    71e0:	4628      	mov	r0, r5
    71e2:	bd38      	pop	{r3, r4, r5, pc}
    71e4:	40011000 	.word	0x40011000
    71e8:	e000e100 	.word	0xe000e100
    71ec:	2000dab0 	.word	0x2000dab0

000071f0 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    71f0:	4a13      	ldr	r2, [pc, #76]	; (7240 <z_clock_set_timeout+0x50>)
    71f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    71f6:	bf14      	ite	ne
    71f8:	4603      	movne	r3, r0
    71fa:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    71fc:	3b01      	subs	r3, #1
    71fe:	2b00      	cmp	r3, #0
    7200:	dd1c      	ble.n	723c <z_clock_set_timeout+0x4c>
    7202:	4293      	cmp	r3, r2
    7204:	bfa8      	it	ge
    7206:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    7208:	4a0e      	ldr	r2, [pc, #56]	; (7244 <z_clock_set_timeout+0x54>)
    720a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    720e:	4a0e      	ldr	r2, [pc, #56]	; (7248 <z_clock_set_timeout+0x58>)
    7210:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    7212:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    7214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    7218:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    721c:	bf18      	it	ne
    721e:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    7220:	3201      	adds	r2, #1
    7222:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    7224:	4a09      	ldr	r2, [pc, #36]	; (724c <z_clock_set_timeout+0x5c>)
    7226:	480a      	ldr	r0, [pc, #40]	; (7250 <z_clock_set_timeout+0x60>)
    7228:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    722a:	2000      	movs	r0, #0
    722c:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    722e:	4a04      	ldr	r2, [pc, #16]	; (7240 <z_clock_set_timeout+0x50>)
    7230:	4293      	cmp	r3, r2
    7232:	bf94      	ite	ls
    7234:	18c9      	addls	r1, r1, r3
    7236:	1889      	addhi	r1, r1, r2
    7238:	f7ff bf42 	b.w	70c0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    723c:	2300      	movs	r3, #0
    723e:	e7e3      	b.n	7208 <z_clock_set_timeout+0x18>
    7240:	007fffff 	.word	0x007fffff
    7244:	40011000 	.word	0x40011000
    7248:	2000dab4 	.word	0x2000dab4
    724c:	2000daa8 	.word	0x2000daa8
    7250:	000070a9 	.word	0x000070a9

00007254 <z_clock_elapsed>:
	__asm__ volatile(
    7254:	f04f 0220 	mov.w	r2, #32
    7258:	f3ef 8311 	mrs	r3, BASEPRI
    725c:	f382 8811 	msr	BASEPRI, r2
    7260:	f3bf 8f6f 	isb	sy
    7264:	4a06      	ldr	r2, [pc, #24]	; (7280 <z_clock_elapsed+0x2c>)
    7266:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    726a:	4a06      	ldr	r2, [pc, #24]	; (7284 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    726c:	6812      	ldr	r2, [r2, #0]
    726e:	1a80      	subs	r0, r0, r2
    7270:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    7274:	f383 8811 	msr	BASEPRI, r3
    7278:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    727c:	4770      	bx	lr
    727e:	bf00      	nop
    7280:	40011000 	.word	0x40011000
    7284:	2000dab4 	.word	0x2000dab4

00007288 <z_timer_cycle_get_32>:
	__asm__ volatile(
    7288:	f04f 0320 	mov.w	r3, #32
    728c:	f3ef 8211 	mrs	r2, BASEPRI
    7290:	f383 8811 	msr	BASEPRI, r3
    7294:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    7298:	4906      	ldr	r1, [pc, #24]	; (72b4 <z_timer_cycle_get_32+0x2c>)
    729a:	4b07      	ldr	r3, [pc, #28]	; (72b8 <z_timer_cycle_get_32+0x30>)
    729c:	6808      	ldr	r0, [r1, #0]
    729e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    72a2:	f382 8811 	msr	BASEPRI, r2
    72a6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    72aa:	1a1b      	subs	r3, r3, r0
    72ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    72b0:	4418      	add	r0, r3
    72b2:	4770      	bx	lr
    72b4:	2000dab4 	.word	0x2000dab4
    72b8:	40011000 	.word	0x40011000

000072bc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    72bc:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    72be:	4c11      	ldr	r4, [pc, #68]	; (7304 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    72c0:	4a11      	ldr	r2, [pc, #68]	; (7308 <_DoInit+0x4c>)
    72c2:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    72c4:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    72c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    72ca:	4b10      	ldr	r3, [pc, #64]	; (730c <_DoInit+0x50>)
    72cc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    72ce:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    72d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    72d4:	4a0e      	ldr	r2, [pc, #56]	; (7310 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    72d6:	490f      	ldr	r1, [pc, #60]	; (7314 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    72d8:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    72da:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    72dc:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    72de:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    72e0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    72e2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    72e4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    72e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    72e8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    72ea:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    72ec:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    72ee:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    72f0:	f01d fc54 	bl	24b9c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    72f4:	4908      	ldr	r1, [pc, #32]	; (7318 <_DoInit+0x5c>)
    72f6:	4620      	mov	r0, r4
    72f8:	f01d fc50 	bl	24b9c <strcpy>
  p->acID[6] = ' ';
    72fc:	2320      	movs	r3, #32
    72fe:	71a3      	strb	r3, [r4, #6]
}
    7300:	bd10      	pop	{r4, pc}
    7302:	bf00      	nop
    7304:	2000dab8 	.word	0x2000dab8
    7308:	0002c1c4 	.word	0x0002c1c4
    730c:	2000f5c7 	.word	0x2000f5c7
    7310:	2000f5b7 	.word	0x2000f5b7
    7314:	0002c1cd 	.word	0x0002c1cd
    7318:	0002c1d1 	.word	0x0002c1d1

0000731c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    731c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    7320:	4f23      	ldr	r7, [pc, #140]	; (73b0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    7322:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7326:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    7328:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    732c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    732e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7330:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7332:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7334:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7336:	d834      	bhi.n	73a2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7338:	f8d2 a020 	ldr.w	sl, [r2, #32]
    733c:	ebaa 0905 	sub.w	r9, sl, r5
    7340:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    7344:	4294      	cmp	r4, r2
    7346:	d811      	bhi.n	736c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    7348:	f04f 0918 	mov.w	r9, #24
    734c:	fb06 9309 	mla	r3, r6, r9, r9
    7350:	443b      	add	r3, r7
    7352:	4622      	mov	r2, r4
    7354:	6858      	ldr	r0, [r3, #4]
    7356:	4641      	mov	r1, r8
    7358:	4428      	add	r0, r5
    735a:	f01d fc79 	bl	24c50 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    735e:	fb09 7606 	mla	r6, r9, r6, r7
    7362:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    7364:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    7366:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    736c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    736e:	429c      	cmp	r4, r3
    7370:	d81b      	bhi.n	73aa <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    7372:	fb00 bb0b 	mla	fp, r0, fp, fp
    7376:	44bb      	add	fp, r7
    7378:	464a      	mov	r2, r9
    737a:	f8db 0004 	ldr.w	r0, [fp, #4]
    737e:	442c      	add	r4, r5
    7380:	4428      	add	r0, r5
    7382:	f01d fc65 	bl	24c50 <memcpy>
      if (NumBytes) {
    7386:	ebb4 040a 	subs.w	r4, r4, sl
    738a:	d006      	beq.n	739a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    738c:	f8db 0004 	ldr.w	r0, [fp, #4]
    7390:	4622      	mov	r2, r4
    7392:	eb08 0109 	add.w	r1, r8, r9
    7396:	f01d fc5b 	bl	24c50 <memcpy>
      pRing->WrOff = NumBytes;
    739a:	2018      	movs	r0, #24
    739c:	fb00 7606 	mla	r6, r0, r6, r7
    73a0:	e7e0      	b.n	7364 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    73a2:	3b01      	subs	r3, #1
    73a4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    73a6:	42a3      	cmp	r3, r4
    73a8:	d2ce      	bcs.n	7348 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    73aa:	2000      	movs	r0, #0
    73ac:	e7dc      	b.n	7368 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    73ae:	bf00      	nop
    73b0:	2000dab8 	.word	0x2000dab8

000073b4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    73b4:	4b03      	ldr	r3, [pc, #12]	; (73c4 <SEGGER_RTT_HasDataUp+0x10>)
    73b6:	2218      	movs	r2, #24
    73b8:	fb02 3300 	mla	r3, r2, r0, r3
    73bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    73be:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    73c0:	1a80      	subs	r0, r0, r2
    73c2:	4770      	bx	lr
    73c4:	2000dab8 	.word	0x2000dab8

000073c8 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    73c8:	4b01      	ldr	r3, [pc, #4]	; (73d0 <uECC_get_rng+0x8>)
    73ca:	6818      	ldr	r0, [r3, #0]
    73cc:	4770      	bx	lr
    73ce:	bf00      	nop
    73d0:	2000032c 	.word	0x2000032c

000073d4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    73d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    73d6:	2208      	movs	r2, #8
{
    73d8:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    73da:	f01c fc01 	bl	23be0 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    73de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    73e0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    73e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    73e4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    73e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    73e8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    73ea:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    73ec:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    73ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    73f0:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73f2:	4613      	mov	r3, r2
    73f4:	466a      	mov	r2, sp
{
    73f6:	460c      	mov	r4, r1
    73f8:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    73fa:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73fc:	4611      	mov	r1, r2
    73fe:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    7400:	e9cd 7701 	strd	r7, r7, [sp, #4]
    7404:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7406:	f01c faf8 	bl	239fa <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    740a:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    740c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    740e:	4630      	mov	r0, r6
    7410:	f01c faf3 	bl	239fa <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    7414:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7416:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    7418:	6b61      	ldr	r1, [r4, #52]	; 0x34
    741a:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    741c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    741e:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    7420:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7422:	4405      	add	r5, r0
	tmp[7] = 0;
    7424:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7428:	4610      	mov	r0, r2
    742a:	4611      	mov	r1, r2
    742c:	f01c fae5 	bl	239fa <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7430:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7432:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7434:	4630      	mov	r0, r6
    7436:	f01c fae0 	bl	239fa <uECC_vli_add>
    743a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    743c:	6a20      	ldr	r0, [r4, #32]
    743e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    7440:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7442:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    7444:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7446:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    7448:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    744a:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    744c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    744e:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7450:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7452:	e9cd 7704 	strd	r7, r7, [sp, #16]
    7456:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7458:	f01c facf 	bl	239fa <uECC_vli_add>
    745c:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    745e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7460:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    7462:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    7464:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    7468:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    746a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    746c:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    746e:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    7472:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7474:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7478:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    747a:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    747e:	6a20      	ldr	r0, [r4, #32]
    7480:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7482:	4630      	mov	r0, r6
    7484:	f01c fab9 	bl	239fa <uECC_vli_add>
    7488:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    748a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    748c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    748e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7490:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    7492:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7494:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    7496:	6a20      	ldr	r0, [r4, #32]
    7498:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    749a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    749c:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    749e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    74a0:	e9cd 7704 	strd	r7, r7, [sp, #16]
    74a4:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74a6:	f01c fbd1 	bl	23c4c <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    74aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    74ac:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    74ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    74b0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    74b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    74b4:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    74b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    74b8:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    74ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74bc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    74be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    74c0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74c2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74c4:	2308      	movs	r3, #8
    74c6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    74c8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74cc:	f01c fbbe 	bl	23c4c <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    74d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    74d2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    74d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    74d6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    74d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    74da:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    74dc:	6a23      	ldr	r3, [r4, #32]
    74de:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    74e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74e2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    74e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    74e6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    74ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    74ec:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74ee:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74f0:	2308      	movs	r3, #8
    74f2:	4630      	mov	r0, r6
    74f4:	f01c fbaa 	bl	23c4c <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    74f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    74fa:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    74fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    74fe:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    7502:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7504:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    7506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7508:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    750a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    750c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    7510:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7512:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7514:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7516:	2308      	movs	r3, #8
    7518:	4630      	mov	r0, r6
    751a:	f01c fb97 	bl	23c4c <uECC_vli_sub>

	if (carry < 0) {
    751e:	1a2d      	subs	r5, r5, r0
    7520:	d410      	bmi.n	7544 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    7522:	4c0d      	ldr	r4, [pc, #52]	; (7558 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    7524:	b935      	cbnz	r5, 7534 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    7526:	2208      	movs	r2, #8
    7528:	4631      	mov	r1, r6
    752a:	4620      	mov	r0, r4
    752c:	f01c fb64 	bl	23bf8 <uECC_vli_cmp_unsafe>
		while (carry || 
    7530:	2801      	cmp	r0, #1
    7532:	d00f      	beq.n	7554 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7534:	2308      	movs	r3, #8
    7536:	4622      	mov	r2, r4
    7538:	4631      	mov	r1, r6
    753a:	4630      	mov	r0, r6
    753c:	f01c fb86 	bl	23c4c <uECC_vli_sub>
    7540:	1a2d      	subs	r5, r5, r0
    7542:	e7ef      	b.n	7524 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7544:	4a04      	ldr	r2, [pc, #16]	; (7558 <vli_mmod_fast_secp256r1+0x184>)
    7546:	2308      	movs	r3, #8
    7548:	4631      	mov	r1, r6
    754a:	4630      	mov	r0, r6
    754c:	f01c fa55 	bl	239fa <uECC_vli_add>
		while (carry < 0);
    7550:	182d      	adds	r5, r5, r0
    7552:	d4f8      	bmi.n	7546 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    7554:	b009      	add	sp, #36	; 0x24
    7556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7558:	00028844 	.word	0x00028844

0000755c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    755c:	4904      	ldr	r1, [pc, #16]	; (7570 <sub_bytes+0x14>)
    755e:	1e43      	subs	r3, r0, #1
    7560:	300f      	adds	r0, #15
    7562:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7566:	5c8a      	ldrb	r2, [r1, r2]
    7568:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    756a:	4283      	cmp	r3, r0
    756c:	d1f9      	bne.n	7562 <sub_bytes+0x6>
	}
}
    756e:	4770      	bx	lr
    7570:	0002c1d8 	.word	0x0002c1d8

00007574 <tc_aes128_set_encrypt_key>:
{
    7574:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    7576:	4e26      	ldr	r6, [pc, #152]	; (7610 <tc_aes128_set_encrypt_key+0x9c>)
{
    7578:	4607      	mov	r7, r0
    757a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    757c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    757e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    7580:	ad01      	add	r5, sp, #4
    7582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7584:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7588:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    758c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    7590:	4638      	mov	r0, r7
    7592:	2f00      	cmp	r7, #0
    7594:	d038      	beq.n	7608 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    7596:	2c00      	cmp	r4, #0
    7598:	d038      	beq.n	760c <tc_aes128_set_encrypt_key+0x98>
    759a:	1f38      	subs	r0, r7, #4
    759c:	4621      	mov	r1, r4
    759e:	4602      	mov	r2, r0
    75a0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    75a2:	784b      	ldrb	r3, [r1, #1]
    75a4:	780d      	ldrb	r5, [r1, #0]
    75a6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    75a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    75ac:	78cd      	ldrb	r5, [r1, #3]
    75ae:	432b      	orrs	r3, r5
    75b0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    75b2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    75b4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    75b8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    75ba:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    75be:	d1f0      	bne.n	75a2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    75c0:	4c14      	ldr	r4, [pc, #80]	; (7614 <tc_aes128_set_encrypt_key+0xa0>)
    75c2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    75c4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    75c6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    75c8:	d116      	bne.n	75f8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    75ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
    75ce:	5ca5      	ldrb	r5, [r4, r2]
    75d0:	0e1a      	lsrs	r2, r3, #24
    75d2:	5ca2      	ldrb	r2, [r4, r2]
    75d4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    75d8:	f3c3 2507 	ubfx	r5, r3, #8, #8
    75dc:	b2db      	uxtb	r3, r3
    75de:	5d65      	ldrb	r5, [r4, r5]
    75e0:	5ce3      	ldrb	r3, [r4, r3]
    75e2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    75e6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    75ea:	ad0c      	add	r5, sp, #48	; 0x30
    75ec:	f021 0303 	bic.w	r3, r1, #3
    75f0:	442b      	add	r3, r5
    75f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    75f6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    75f8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    75fc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    75fe:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7600:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    7602:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    7604:	d1de      	bne.n	75c4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    7606:	2001      	movs	r0, #1
}
    7608:	b00d      	add	sp, #52	; 0x34
    760a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    760c:	4620      	mov	r0, r4
    760e:	e7fb      	b.n	7608 <tc_aes128_set_encrypt_key+0x94>
    7610:	00028364 	.word	0x00028364
    7614:	0002c1d8 	.word	0x0002c1d8

00007618 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    7618:	4a0a      	ldr	r2, [pc, #40]	; (7644 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    761a:	490b      	ldr	r1, [pc, #44]	; (7648 <arch_swap+0x30>)
	_current->arch.basepri = key;
    761c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    761e:	6809      	ldr	r1, [r1, #0]
    7620:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7624:	4909      	ldr	r1, [pc, #36]	; (764c <arch_swap+0x34>)
	_current->arch.basepri = key;
    7626:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7628:	684b      	ldr	r3, [r1, #4]
    762a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    762e:	604b      	str	r3, [r1, #4]
    7630:	2300      	movs	r3, #0
    7632:	f383 8811 	msr	BASEPRI, r3
    7636:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    763a:	6893      	ldr	r3, [r2, #8]
}
    763c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    7640:	4770      	bx	lr
    7642:	bf00      	nop
    7644:	2000f504 	.word	0x2000f504
    7648:	00029cc8 	.word	0x00029cc8
    764c:	e000ed00 	.word	0xe000ed00

00007650 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7650:	4912      	ldr	r1, [pc, #72]	; (769c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    7652:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    7654:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    7658:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    765a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    765e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7662:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7664:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    7668:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    766c:	4f0c      	ldr	r7, [pc, #48]	; (76a0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    766e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    7672:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    7674:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    7676:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7678:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    767a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    767c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    767e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    7682:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    7684:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    7686:	f000 fbe5 	bl	7e54 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    768a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    768e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    7692:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    7696:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    769a:	4770      	bx	lr
    ldr r1, =_kernel
    769c:	2000f504 	.word	0x2000f504
    ldr v4, =_SCS_ICSR
    76a0:	e000ed04 	.word	0xe000ed04

000076a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    76a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    76a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    76aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    76ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    76b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    76b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    76b8:	2902      	cmp	r1, #2
    beq _oops
    76ba:	d0ff      	beq.n	76bc <_oops>

000076bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    76bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    76be:	f01d f9ee 	bl	24a9e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    76c2:	bd01      	pop	{r0, pc}

000076c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    76c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    76c6:	2b00      	cmp	r3, #0
    76c8:	db08      	blt.n	76dc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76ca:	2201      	movs	r2, #1
    76cc:	f000 001f 	and.w	r0, r0, #31
    76d0:	fa02 f000 	lsl.w	r0, r2, r0
    76d4:	095b      	lsrs	r3, r3, #5
    76d6:	4a02      	ldr	r2, [pc, #8]	; (76e0 <arch_irq_enable+0x1c>)
    76d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    76dc:	4770      	bx	lr
    76de:	bf00      	nop
    76e0:	e000e100 	.word	0xe000e100

000076e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    76e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    76e6:	2b00      	cmp	r3, #0
    76e8:	db0d      	blt.n	7706 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76ea:	2201      	movs	r2, #1
    76ec:	095b      	lsrs	r3, r3, #5
    76ee:	f000 001f 	and.w	r0, r0, #31
    76f2:	fa02 f000 	lsl.w	r0, r2, r0
    76f6:	3320      	adds	r3, #32
    76f8:	4a03      	ldr	r2, [pc, #12]	; (7708 <arch_irq_disable+0x24>)
    76fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    76fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7702:	f3bf 8f6f 	isb	sy
}
    7706:	4770      	bx	lr
    7708:	e000e100 	.word	0xe000e100

0000770c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    770c:	4b05      	ldr	r3, [pc, #20]	; (7724 <arch_irq_is_enabled+0x18>)
    770e:	0942      	lsrs	r2, r0, #5
    7710:	f000 001f 	and.w	r0, r0, #31
    7714:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7718:	2301      	movs	r3, #1
    771a:	fa03 f000 	lsl.w	r0, r3, r0
}
    771e:	4010      	ands	r0, r2
    7720:	4770      	bx	lr
    7722:	bf00      	nop
    7724:	e000e100 	.word	0xe000e100

00007728 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    7728:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    772a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    772c:	bfa8      	it	ge
    772e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    7732:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7736:	bfb8      	it	lt
    7738:	4b06      	ldrlt	r3, [pc, #24]	; (7754 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    773a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    773e:	bfac      	ite	ge
    7740:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7744:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7748:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    774a:	bfb4      	ite	lt
    774c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    774e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    7752:	4770      	bx	lr
    7754:	e000ed14 	.word	0xe000ed14

00007758 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    7758:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    775a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    775c:	4b04      	ldr	r3, [pc, #16]	; (7770 <_arch_isr_direct_pm+0x18>)
    775e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    7760:	b118      	cbz	r0, 776a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    7762:	2200      	movs	r2, #0
    7764:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    7766:	f018 fc63 	bl	20030 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    776a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    776c:	bd08      	pop	{r3, pc}
    776e:	bf00      	nop
    7770:	2000f504 	.word	0x2000f504

00007774 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    7774:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7778:	9b00      	ldr	r3, [sp, #0]
    777a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    777e:	490a      	ldr	r1, [pc, #40]	; (77a8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    7780:	9b01      	ldr	r3, [sp, #4]
    7782:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    7786:	9b02      	ldr	r3, [sp, #8]
    7788:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    778c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    7790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    7794:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    7798:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    779c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    779e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    77a0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    77a2:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    77a4:	4770      	bx	lr
    77a6:	bf00      	nop
    77a8:	000224ad 	.word	0x000224ad

000077ac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    77ac:	4a09      	ldr	r2, [pc, #36]	; (77d4 <z_check_thread_stack_fail+0x28>)
{
    77ae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    77b0:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    77b2:	b170      	cbz	r0, 77d2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    77b4:	f113 0f16 	cmn.w	r3, #22
    77b8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    77ba:	d005      	beq.n	77c8 <z_check_thread_stack_fail+0x1c>
    77bc:	f1a0 0220 	sub.w	r2, r0, #32
    77c0:	429a      	cmp	r2, r3
    77c2:	d805      	bhi.n	77d0 <z_check_thread_stack_fail+0x24>
    77c4:	4283      	cmp	r3, r0
    77c6:	d203      	bcs.n	77d0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    77c8:	4281      	cmp	r1, r0
    77ca:	bf28      	it	cs
    77cc:	2000      	movcs	r0, #0
    77ce:	4770      	bx	lr
    77d0:	2000      	movs	r0, #0
}
    77d2:	4770      	bx	lr
    77d4:	2000f504 	.word	0x2000f504

000077d8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    77d8:	b508      	push	{r3, lr}
    77da:	4604      	mov	r4, r0
    77dc:	460e      	mov	r6, r1
    77de:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    77e0:	f000 fb2c 	bl	7e3c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    77e4:	4b08      	ldr	r3, [pc, #32]	; (7808 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    77e6:	4620      	mov	r0, r4
	_current = main_thread;
    77e8:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    77ea:	f000 fb33 	bl	7e54 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    77ee:	4628      	mov	r0, r5
    77f0:	f386 8809 	msr	PSP, r6
    77f4:	2100      	movs	r1, #0
    77f6:	b663      	cpsie	if
    77f8:	f381 8811 	msr	BASEPRI, r1
    77fc:	f3bf 8f6f 	isb	sy
    7800:	2200      	movs	r2, #0
    7802:	2300      	movs	r3, #0
    7804:	f01a fe52 	bl	224ac <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7808:	2000f504 	.word	0x2000f504

0000780c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    780c:	4901      	ldr	r1, [pc, #4]	; (7814 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    780e:	2210      	movs	r2, #16
	str	r2, [r1]
    7810:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    7812:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7814:	e000ed10 	.word	0xe000ed10

00007818 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    7818:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    781a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    781c:	f380 8811 	msr	BASEPRI, r0
	isb
    7820:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    7824:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    7828:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    782a:	b662      	cpsie	i
	isb
    782c:	f3bf 8f6f 	isb	sy

	bx	lr
    7830:	4770      	bx	lr
    7832:	bf00      	nop

00007834 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    7834:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    7836:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    7838:	f381 8811 	msr	BASEPRI, r1

	wfe
    783c:	bf20      	wfe

	msr	BASEPRI, r0
    783e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    7842:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    7844:	4770      	bx	lr
    7846:	bf00      	nop

00007848 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7848:	b573      	push	{r0, r1, r4, r5, r6, lr}
    784a:	4606      	mov	r6, r0

	if (esf != NULL) {
    784c:	460c      	mov	r4, r1
    784e:	b301      	cbz	r1, 7892 <z_arm_fatal_error+0x4a>
    7850:	4b13      	ldr	r3, [pc, #76]	; (78a0 <z_arm_fatal_error+0x58>)
    7852:	4d14      	ldr	r5, [pc, #80]	; (78a4 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    7854:	4814      	ldr	r0, [pc, #80]	; (78a8 <z_arm_fatal_error+0x60>)
    7856:	1aed      	subs	r5, r5, r3
    7858:	08ed      	lsrs	r5, r5, #3
    785a:	01ad      	lsls	r5, r5, #6
    785c:	f045 0501 	orr.w	r5, r5, #1
    7860:	f8ad 5000 	strh.w	r5, [sp]
    7864:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    7868:	6809      	ldr	r1, [r1, #0]
    786a:	f01b fa05 	bl	22c78 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    786e:	f8ad 5000 	strh.w	r5, [sp]
    7872:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7876:	68e1      	ldr	r1, [r4, #12]
    7878:	480c      	ldr	r0, [pc, #48]	; (78ac <z_arm_fatal_error+0x64>)
    787a:	f01b f9fd 	bl	22c78 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    787e:	69e1      	ldr	r1, [r4, #28]
    7880:	480b      	ldr	r0, [pc, #44]	; (78b0 <z_arm_fatal_error+0x68>)
    7882:	462a      	mov	r2, r5
    7884:	f01b f9cb 	bl	22c1e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7888:	69a1      	ldr	r1, [r4, #24]
    788a:	480a      	ldr	r0, [pc, #40]	; (78b4 <z_arm_fatal_error+0x6c>)
    788c:	462a      	mov	r2, r5
    788e:	f01b f9c6 	bl	22c1e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7892:	4621      	mov	r1, r4
    7894:	4630      	mov	r0, r6
}
    7896:	b002      	add	sp, #8
    7898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    789c:	f018 bb6a 	b.w	1ff74 <z_fatal_error>
    78a0:	000281b4 	.word	0x000281b4
    78a4:	000282fc 	.word	0x000282fc
    78a8:	0002c2d8 	.word	0x0002c2d8
    78ac:	0002c307 	.word	0x0002c307
    78b0:	0002c336 	.word	0x0002c336
    78b4:	0002c345 	.word	0x0002c345

000078b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    78b8:	bf30      	wfi
    b z_SysNmiOnReset
    78ba:	f7ff bffd 	b.w	78b8 <z_SysNmiOnReset>
    78be:	bf00      	nop

000078c0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    78c0:	4a0e      	ldr	r2, [pc, #56]	; (78fc <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    78c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    78c4:	4b0e      	ldr	r3, [pc, #56]	; (7900 <z_arm_prep_c+0x40>)
    78c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    78ca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    78cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    78d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    78d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    78d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    78dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    78e0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    78e4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    78e8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    78ec:	f018 fbea 	bl	200c4 <z_bss_zero>
	z_data_copy();
    78f0:	f019 fb38 	bl	20f64 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    78f4:	f000 fa74 	bl	7de0 <z_arm_interrupt_init>
	z_cstart();
    78f8:	f018 fc08 	bl	2010c <z_cstart>
    78fc:	00000000 	.word	0x00000000
    7900:	e000ed00 	.word	0xe000ed00

00007904 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7904:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    7906:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7908:	4a0b      	ldr	r2, [pc, #44]	; (7938 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    790a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    790c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    790e:	bf1e      	ittt	ne
	movne	r1, #0
    7910:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    7912:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    7914:	f018 fb8c 	blne	20030 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    7918:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    791a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    791e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    7922:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    7926:	4905      	ldr	r1, [pc, #20]	; (793c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    7928:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    792a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    792c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    792e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    7932:	4903      	ldr	r1, [pc, #12]	; (7940 <_isr_wrapper+0x3c>)
	bx r1
    7934:	4708      	bx	r1
    7936:	0000      	.short	0x0000
	ldr r2, =_kernel
    7938:	2000f504 	.word	0x2000f504
	ldr r1, =_sw_isr_table
    793c:	00027f60 	.word	0x00027f60
	ldr r1, =z_arm_int_exit
    7940:	00007dc5 	.word	0x00007dc5

00007944 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    7944:	f01d f9e4 	bl	24d10 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7948:	2020      	movs	r0, #32
    msr BASEPRI, r0
    794a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    794e:	4808      	ldr	r0, [pc, #32]	; (7970 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7950:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    7954:	1840      	adds	r0, r0, r1
    msr PSP, r0
    7956:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    795a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    795e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7960:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7962:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    7966:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    796a:	f7ff ffa9 	bl	78c0 <z_arm_prep_c>
    796e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7970:	20012260 	.word	0x20012260

00007974 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7974:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7978:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    797c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    797e:	4672      	mov	r2, lr
	bl z_arm_fault
    7980:	f000 f94e 	bl	7c20 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7984:	bd01      	pop	{r0, pc}
    7986:	bf00      	nop

00007988 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    7988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    798c:	4b35      	ldr	r3, [pc, #212]	; (7a64 <mem_manage_fault+0xdc>)
    798e:	4c36      	ldr	r4, [pc, #216]	; (7a68 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7990:	4d36      	ldr	r5, [pc, #216]	; (7a6c <mem_manage_fault+0xe4>)
    7992:	1ae4      	subs	r4, r4, r3
    7994:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    7996:	01a4      	lsls	r4, r4, #6
    7998:	f044 0901 	orr.w	r9, r4, #1
{
    799c:	4607      	mov	r7, r0
    799e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    79a0:	4833      	ldr	r0, [pc, #204]	; (7a70 <mem_manage_fault+0xe8>)
    79a2:	4649      	mov	r1, r9
{
    79a4:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    79a6:	f01b f92d 	bl	22c04 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    79aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79ac:	06db      	lsls	r3, r3, #27
    79ae:	d503      	bpl.n	79b8 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    79b0:	4830      	ldr	r0, [pc, #192]	; (7a74 <mem_manage_fault+0xec>)
    79b2:	4649      	mov	r1, r9
    79b4:	f01b f926 	bl	22c04 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    79b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79ba:	0718      	lsls	r0, r3, #28
    79bc:	d504      	bpl.n	79c8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    79be:	482e      	ldr	r0, [pc, #184]	; (7a78 <mem_manage_fault+0xf0>)
    79c0:	f044 0101 	orr.w	r1, r4, #1
    79c4:	f01b f91e 	bl	22c04 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    79c8:	4d28      	ldr	r5, [pc, #160]	; (7a6c <mem_manage_fault+0xe4>)
    79ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79cc:	0799      	lsls	r1, r3, #30
    79ce:	d423      	bmi.n	7a18 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    79d0:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    79d4:	4d25      	ldr	r5, [pc, #148]	; (7a6c <mem_manage_fault+0xe4>)
    79d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79d8:	07db      	lsls	r3, r3, #31
    79da:	d504      	bpl.n	79e6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    79dc:	4827      	ldr	r0, [pc, #156]	; (7a7c <mem_manage_fault+0xf4>)
    79de:	f044 0101 	orr.w	r1, r4, #1
    79e2:	f01b f90f 	bl	22c04 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    79e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79e8:	0698      	lsls	r0, r3, #26
    79ea:	d504      	bpl.n	79f6 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    79ec:	4824      	ldr	r0, [pc, #144]	; (7a80 <mem_manage_fault+0xf8>)
    79ee:	f044 0101 	orr.w	r1, r4, #1
    79f2:	f01b f907 	bl	22c04 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    79f6:	4b1d      	ldr	r3, [pc, #116]	; (7a6c <mem_manage_fault+0xe4>)
    79f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    79fa:	06d1      	lsls	r1, r2, #27
    79fc:	d424      	bmi.n	7a48 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    79fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7a00:	0792      	lsls	r2, r2, #30
    7a02:	d421      	bmi.n	7a48 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7a04:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7a06:	4a19      	ldr	r2, [pc, #100]	; (7a6c <mem_manage_fault+0xe4>)
    7a08:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a0a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7a0e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7a10:	2300      	movs	r3, #0
    7a12:	7033      	strb	r3, [r6, #0]

	return reason;
}
    7a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    7a18:	f044 0a01 	orr.w	sl, r4, #1
    7a1c:	4819      	ldr	r0, [pc, #100]	; (7a84 <mem_manage_fault+0xfc>)
    7a1e:	4651      	mov	r1, sl
    7a20:	f01b f8f0 	bl	22c04 <log_0>
		uint32_t temp = SCB->MMFAR;
    7a24:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7a28:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a2a:	061a      	lsls	r2, r3, #24
    7a2c:	d5d0      	bpl.n	79d0 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7a2e:	4816      	ldr	r0, [pc, #88]	; (7a88 <mem_manage_fault+0x100>)
    7a30:	4652      	mov	r2, sl
    7a32:	4649      	mov	r1, r9
    7a34:	f01b f8f3 	bl	22c1e <log_1>
			if (from_hard_fault) {
    7a38:	f1b8 0f00 	cmp.w	r8, #0
    7a3c:	d0ca      	beq.n	79d4 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7a3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7a44:	62ab      	str	r3, [r5, #40]	; 0x28
    7a46:	e7c5      	b.n	79d4 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    7a48:	685b      	ldr	r3, [r3, #4]
    7a4a:	051b      	lsls	r3, r3, #20
    7a4c:	d5da      	bpl.n	7a04 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7a4e:	4639      	mov	r1, r7
    7a50:	4648      	mov	r0, r9
    7a52:	f7ff feab 	bl	77ac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    7a56:	2800      	cmp	r0, #0
    7a58:	d0d4      	beq.n	7a04 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    7a5a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7a5e:	2002      	movs	r0, #2
    7a60:	e7d1      	b.n	7a06 <mem_manage_fault+0x7e>
    7a62:	bf00      	nop
    7a64:	000281b4 	.word	0x000281b4
    7a68:	000282fc 	.word	0x000282fc
    7a6c:	e000ed00 	.word	0xe000ed00
    7a70:	0002c373 	.word	0x0002c373
    7a74:	0002c389 	.word	0x0002c389
    7a78:	0002c3bc 	.word	0x0002c3bc
    7a7c:	0002c3fd 	.word	0x0002c3fd
    7a80:	0002c41c 	.word	0x0002c41c
    7a84:	0002c3cf 	.word	0x0002c3cf
    7a88:	0002c3e7 	.word	0x0002c3e7

00007a8c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7a8c:	b570      	push	{r4, r5, r6, lr}
    7a8e:	4b23      	ldr	r3, [pc, #140]	; (7b1c <usage_fault.constprop.0+0x90>)
    7a90:	4c23      	ldr	r4, [pc, #140]	; (7b20 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7a92:	4d24      	ldr	r5, [pc, #144]	; (7b24 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7a94:	4824      	ldr	r0, [pc, #144]	; (7b28 <usage_fault.constprop.0+0x9c>)
    7a96:	1ae4      	subs	r4, r4, r3
    7a98:	08e4      	lsrs	r4, r4, #3
    7a9a:	01a4      	lsls	r4, r4, #6
    7a9c:	f044 0601 	orr.w	r6, r4, #1
    7aa0:	4631      	mov	r1, r6
    7aa2:	f01b f8af 	bl	22c04 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7aa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7aa8:	019b      	lsls	r3, r3, #6
    7aaa:	d503      	bpl.n	7ab4 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    7aac:	481f      	ldr	r0, [pc, #124]	; (7b2c <usage_fault.constprop.0+0xa0>)
    7aae:	4631      	mov	r1, r6
    7ab0:	f01b f8a8 	bl	22c04 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ab6:	01dd      	lsls	r5, r3, #7
    7ab8:	d504      	bpl.n	7ac4 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    7aba:	481d      	ldr	r0, [pc, #116]	; (7b30 <usage_fault.constprop.0+0xa4>)
    7abc:	f044 0101 	orr.w	r1, r4, #1
    7ac0:	f01b f8a0 	bl	22c04 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7ac4:	4d17      	ldr	r5, [pc, #92]	; (7b24 <usage_fault.constprop.0+0x98>)
    7ac6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ac8:	0318      	lsls	r0, r3, #12
    7aca:	d504      	bpl.n	7ad6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    7acc:	4819      	ldr	r0, [pc, #100]	; (7b34 <usage_fault.constprop.0+0xa8>)
    7ace:	f044 0101 	orr.w	r1, r4, #1
    7ad2:	f01b f897 	bl	22c04 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7ad6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ad8:	0359      	lsls	r1, r3, #13
    7ada:	d504      	bpl.n	7ae6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7adc:	4816      	ldr	r0, [pc, #88]	; (7b38 <usage_fault.constprop.0+0xac>)
    7ade:	f044 0101 	orr.w	r1, r4, #1
    7ae2:	f01b f88f 	bl	22c04 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7ae6:	4d0f      	ldr	r5, [pc, #60]	; (7b24 <usage_fault.constprop.0+0x98>)
    7ae8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7aea:	039a      	lsls	r2, r3, #14
    7aec:	d504      	bpl.n	7af8 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    7aee:	4813      	ldr	r0, [pc, #76]	; (7b3c <usage_fault.constprop.0+0xb0>)
    7af0:	f044 0101 	orr.w	r1, r4, #1
    7af4:	f01b f886 	bl	22c04 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7af8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7afa:	03db      	lsls	r3, r3, #15
    7afc:	d504      	bpl.n	7b08 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    7afe:	4810      	ldr	r0, [pc, #64]	; (7b40 <usage_fault.constprop.0+0xb4>)
    7b00:	f044 0101 	orr.w	r1, r4, #1
    7b04:	f01b f87e 	bl	22c04 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7b08:	4a06      	ldr	r2, [pc, #24]	; (7b24 <usage_fault.constprop.0+0x98>)
    7b0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7b0c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7b10:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7b14:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7b16:	2000      	movs	r0, #0
    7b18:	bd70      	pop	{r4, r5, r6, pc}
    7b1a:	bf00      	nop
    7b1c:	000281b4 	.word	0x000281b4
    7b20:	000282fc 	.word	0x000282fc
    7b24:	e000ed00 	.word	0xe000ed00
    7b28:	0002c44b 	.word	0x0002c44b
    7b2c:	0002c463 	.word	0x0002c463
    7b30:	0002c476 	.word	0x0002c476
    7b34:	0002c490 	.word	0x0002c490
    7b38:	0002c4ae 	.word	0x0002c4ae
    7b3c:	0002c4d3 	.word	0x0002c4d3
    7b40:	0002c4ed 	.word	0x0002c4ed

00007b44 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b48:	4b2a      	ldr	r3, [pc, #168]	; (7bf4 <bus_fault.constprop.0+0xb0>)
    7b4a:	4c2b      	ldr	r4, [pc, #172]	; (7bf8 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7b4c:	4d2b      	ldr	r5, [pc, #172]	; (7bfc <bus_fault.constprop.0+0xb8>)
    7b4e:	1ae4      	subs	r4, r4, r3
    7b50:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    7b52:	01a4      	lsls	r4, r4, #6
    7b54:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7b58:	4607      	mov	r7, r0
    7b5a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7b5c:	4828      	ldr	r0, [pc, #160]	; (7c00 <bus_fault.constprop.0+0xbc>)
    7b5e:	4641      	mov	r1, r8
    7b60:	f01b f850 	bl	22c04 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b66:	04d9      	lsls	r1, r3, #19
    7b68:	d503      	bpl.n	7b72 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7b6a:	4826      	ldr	r0, [pc, #152]	; (7c04 <bus_fault.constprop.0+0xc0>)
    7b6c:	4641      	mov	r1, r8
    7b6e:	f01b f849 	bl	22c04 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7b72:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b74:	051a      	lsls	r2, r3, #20
    7b76:	d504      	bpl.n	7b82 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7b78:	4823      	ldr	r0, [pc, #140]	; (7c08 <bus_fault.constprop.0+0xc4>)
    7b7a:	f044 0101 	orr.w	r1, r4, #1
    7b7e:	f01b f841 	bl	22c04 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    7b82:	4d1e      	ldr	r5, [pc, #120]	; (7bfc <bus_fault.constprop.0+0xb8>)
    7b84:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b86:	059b      	lsls	r3, r3, #22
    7b88:	d512      	bpl.n	7bb0 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7b8a:	f044 0801 	orr.w	r8, r4, #1
    7b8e:	481f      	ldr	r0, [pc, #124]	; (7c0c <bus_fault.constprop.0+0xc8>)
    7b90:	4641      	mov	r1, r8
    7b92:	f01b f837 	bl	22c04 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    7b96:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7b98:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b9a:	0418      	lsls	r0, r3, #16
    7b9c:	d508      	bpl.n	7bb0 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7b9e:	481c      	ldr	r0, [pc, #112]	; (7c10 <bus_fault.constprop.0+0xcc>)
    7ba0:	4642      	mov	r2, r8
    7ba2:	f01b f83c 	bl	22c1e <log_1>
			if (from_hard_fault) {
    7ba6:	b11f      	cbz	r7, 7bb0 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7ba8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    7bae:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7bb0:	4d12      	ldr	r5, [pc, #72]	; (7bfc <bus_fault.constprop.0+0xb8>)
    7bb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7bb4:	0559      	lsls	r1, r3, #21
    7bb6:	d504      	bpl.n	7bc2 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    7bb8:	4816      	ldr	r0, [pc, #88]	; (7c14 <bus_fault.constprop.0+0xd0>)
    7bba:	f044 0101 	orr.w	r1, r4, #1
    7bbe:	f01b f821 	bl	22c04 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7bc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7bc4:	05da      	lsls	r2, r3, #23
    7bc6:	d50d      	bpl.n	7be4 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    7bc8:	4813      	ldr	r0, [pc, #76]	; (7c18 <bus_fault.constprop.0+0xd4>)
    7bca:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7bce:	f01b f819 	bl	22c04 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7bd2:	4a0a      	ldr	r2, [pc, #40]	; (7bfc <bus_fault.constprop.0+0xb8>)
    7bd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7bd6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7bd8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7bdc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7bde:	7030      	strb	r0, [r6, #0]
}
    7be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7be4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7be6:	049b      	lsls	r3, r3, #18
    7be8:	d5f3      	bpl.n	7bd2 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7bea:	480c      	ldr	r0, [pc, #48]	; (7c1c <bus_fault.constprop.0+0xd8>)
    7bec:	f044 0101 	orr.w	r1, r4, #1
    7bf0:	e7ed      	b.n	7bce <bus_fault.constprop.0+0x8a>
    7bf2:	bf00      	nop
    7bf4:	000281b4 	.word	0x000281b4
    7bf8:	000282fc 	.word	0x000282fc
    7bfc:	e000ed00 	.word	0xe000ed00
    7c00:	0002c518 	.word	0x0002c518
    7c04:	0002c52e 	.word	0x0002c52e
    7c08:	0002c3bc 	.word	0x0002c3bc
    7c0c:	0002c53f 	.word	0x0002c53f
    7c10:	0002c558 	.word	0x0002c558
    7c14:	0002c56d 	.word	0x0002c56d
    7c18:	0002c588 	.word	0x0002c588
    7c1c:	0002c41c 	.word	0x0002c41c

00007c20 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7c24:	4b58      	ldr	r3, [pc, #352]	; (7d88 <z_arm_fault+0x168>)
    7c26:	685e      	ldr	r6, [r3, #4]
{
    7c28:	b08b      	sub	sp, #44	; 0x2c
    7c2a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7c2c:	f3c6 0408 	ubfx	r4, r6, #0, #9
    7c30:	2500      	movs	r5, #0
    7c32:	f385 8811 	msr	BASEPRI, r5
    7c36:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7c3a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7c3e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7c42:	d10d      	bne.n	7c60 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7c44:	f002 030c 	and.w	r3, r2, #12
    7c48:	2b08      	cmp	r3, #8
    7c4a:	d10b      	bne.n	7c64 <z_arm_fault+0x44>
    7c4c:	494f      	ldr	r1, [pc, #316]	; (7d8c <z_arm_fault+0x16c>)
    7c4e:	4b50      	ldr	r3, [pc, #320]	; (7d90 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7c50:	4850      	ldr	r0, [pc, #320]	; (7d94 <z_arm_fault+0x174>)
    7c52:	1ac9      	subs	r1, r1, r3
    7c54:	08c9      	lsrs	r1, r1, #3
    7c56:	0189      	lsls	r1, r1, #6
    7c58:	f041 0101 	orr.w	r1, r1, #1
    7c5c:	f01a ffd2 	bl	22c04 <log_0>
		return NULL;
    7c60:	462f      	mov	r7, r5
    7c62:	e003      	b.n	7c6c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7c64:	0712      	lsls	r2, r2, #28
    7c66:	d401      	bmi.n	7c6c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    7c68:	4607      	mov	r7, r0
			*nested_exc = true;
    7c6a:	2501      	movs	r5, #1
	*recoverable = false;
    7c6c:	2300      	movs	r3, #0
    7c6e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    7c72:	1ee3      	subs	r3, r4, #3
    7c74:	2b09      	cmp	r3, #9
    7c76:	d86e      	bhi.n	7d56 <z_arm_fault+0x136>
    7c78:	e8df f003 	tbb	[pc, r3]
    7c7c:	40605c05 	.word	0x40605c05
    7c80:	6d6d6d6d 	.word	0x6d6d6d6d
    7c84:	646d      	.short	0x646d
    7c86:	4b42      	ldr	r3, [pc, #264]	; (7d90 <z_arm_fault+0x170>)
    7c88:	4e40      	ldr	r6, [pc, #256]	; (7d8c <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7c8a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7d88 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    7c8e:	4842      	ldr	r0, [pc, #264]	; (7d98 <z_arm_fault+0x178>)
    7c90:	1af6      	subs	r6, r6, r3
    7c92:	08f6      	lsrs	r6, r6, #3
    7c94:	01b6      	lsls	r6, r6, #6
    7c96:	f046 0601 	orr.w	r6, r6, #1
    7c9a:	4631      	mov	r1, r6
    7c9c:	f01a ffb2 	bl	22c04 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7ca0:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    7ca4:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7ca8:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    7cac:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7cb0:	d005      	beq.n	7cbe <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    7cb2:	483a      	ldr	r0, [pc, #232]	; (7d9c <z_arm_fault+0x17c>)
    7cb4:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    7cb6:	f01a ffa5 	bl	22c04 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7cba:	2400      	movs	r4, #0
}
    7cbc:	e021      	b.n	7d02 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7cbe:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    7cc2:	005b      	lsls	r3, r3, #1
    7cc4:	d51d      	bpl.n	7d02 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    7cc6:	4836      	ldr	r0, [pc, #216]	; (7da0 <z_arm_fault+0x180>)
    7cc8:	4631      	mov	r1, r6
    7cca:	f01a ff9b 	bl	22c04 <log_0>
		if (SCB_MMFSR != 0) {
    7cce:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    7cd2:	b133      	cbz	r3, 7ce2 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    7cd4:	f10d 0207 	add.w	r2, sp, #7
    7cd8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7cda:	4638      	mov	r0, r7
    7cdc:	f7ff fe54 	bl	7988 <mem_manage_fault>
    7ce0:	e00e      	b.n	7d00 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
    7ce2:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    7ce6:	b12b      	cbz	r3, 7cf4 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    7ce8:	f10d 0107 	add.w	r1, sp, #7
    7cec:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7cee:	f7ff ff29 	bl	7b44 <bus_fault.constprop.0>
    7cf2:	e005      	b.n	7d00 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    7cf4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    7cf8:	b29b      	uxth	r3, r3
    7cfa:	b113      	cbz	r3, 7d02 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
    7cfc:	f7ff fec6 	bl	7a8c <usage_fault.constprop.0>
    7d00:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d06:	b993      	cbnz	r3, 7d2e <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7d08:	2220      	movs	r2, #32
    7d0a:	4639      	mov	r1, r7
    7d0c:	a802      	add	r0, sp, #8
    7d0e:	f01c ff9f 	bl	24c50 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d14:	b39d      	cbz	r5, 7d7e <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7d1a:	b922      	cbnz	r2, 7d26 <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7d1c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7d20:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7d24:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7d26:	a902      	add	r1, sp, #8
    7d28:	4620      	mov	r0, r4
    7d2a:	f7ff fd8d 	bl	7848 <z_arm_fatal_error>
}
    7d2e:	b00b      	add	sp, #44	; 0x2c
    7d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7d34:	f10d 0207 	add.w	r2, sp, #7
    7d38:	2100      	movs	r1, #0
    7d3a:	e7ce      	b.n	7cda <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    7d3c:	f10d 0107 	add.w	r1, sp, #7
    7d40:	2000      	movs	r0, #0
    7d42:	e7d4      	b.n	7cee <z_arm_fault+0xce>
    7d44:	4911      	ldr	r1, [pc, #68]	; (7d8c <z_arm_fault+0x16c>)
    7d46:	4b12      	ldr	r3, [pc, #72]	; (7d90 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    7d48:	4816      	ldr	r0, [pc, #88]	; (7da4 <z_arm_fault+0x184>)
    7d4a:	1ac9      	subs	r1, r1, r3
    7d4c:	08c9      	lsrs	r1, r1, #3
    7d4e:	0189      	lsls	r1, r1, #6
    7d50:	f041 0101 	orr.w	r1, r1, #1
    7d54:	e7af      	b.n	7cb6 <z_arm_fault+0x96>
    7d56:	4a0e      	ldr	r2, [pc, #56]	; (7d90 <z_arm_fault+0x170>)
    7d58:	4b0c      	ldr	r3, [pc, #48]	; (7d8c <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    7d5a:	4813      	ldr	r0, [pc, #76]	; (7da8 <z_arm_fault+0x188>)
    7d5c:	4913      	ldr	r1, [pc, #76]	; (7dac <z_arm_fault+0x18c>)
    7d5e:	1a9b      	subs	r3, r3, r2
    7d60:	08db      	lsrs	r3, r3, #3
    7d62:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    7d66:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7d6a:	bf18      	it	ne
    7d6c:	4601      	movne	r1, r0
    7d6e:	f043 0301 	orr.w	r3, r3, #1
    7d72:	480f      	ldr	r0, [pc, #60]	; (7db0 <z_arm_fault+0x190>)
    7d74:	f1a4 0210 	sub.w	r2, r4, #16
    7d78:	f01a ff65 	bl	22c46 <log_2>
    7d7c:	e79d      	b.n	7cba <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7d7e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7d82:	f023 0301 	bic.w	r3, r3, #1
    7d86:	e7cd      	b.n	7d24 <z_arm_fault+0x104>
    7d88:	e000ed00 	.word	0xe000ed00
    7d8c:	000282fc 	.word	0x000282fc
    7d90:	000281b4 	.word	0x000281b4
    7d94:	0002c5a0 	.word	0x0002c5a0
    7d98:	0002c5cb 	.word	0x0002c5cb
    7d9c:	0002c5e2 	.word	0x0002c5e2
    7da0:	0002c603 	.word	0x0002c603
    7da4:	0002c622 	.word	0x0002c622
    7da8:	0002c66d 	.word	0x0002c66d
    7dac:	0002c658 	.word	0x0002c658
    7db0:	0002c686 	.word	0x0002c686

00007db4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7db4:	4a02      	ldr	r2, [pc, #8]	; (7dc0 <z_arm_fault_init+0xc>)
    7db6:	6953      	ldr	r3, [r2, #20]
    7db8:	f043 0310 	orr.w	r3, r3, #16
    7dbc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7dbe:	4770      	bx	lr
    7dc0:	e000ed00 	.word	0xe000ed00

00007dc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7dc4:	4b04      	ldr	r3, [pc, #16]	; (7dd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7dc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7dc8:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    7dca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7dcc:	d003      	beq.n	7dd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7dce:	4903      	ldr	r1, [pc, #12]	; (7ddc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7dd4:	600a      	str	r2, [r1, #0]

00007dd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7dd6:	4770      	bx	lr
	ldr r3, =_kernel
    7dd8:	2000f504 	.word	0x2000f504
	ldr r1, =_SCS_ICSR
    7ddc:	e000ed04 	.word	0xe000ed04

00007de0 <z_arm_interrupt_init>:
    7de0:	4804      	ldr	r0, [pc, #16]	; (7df4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7de2:	2300      	movs	r3, #0
    7de4:	2120      	movs	r1, #32
    7de6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7de8:	3301      	adds	r3, #1
    7dea:	2b30      	cmp	r3, #48	; 0x30
    7dec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7df0:	d1f9      	bne.n	7de6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7df2:	4770      	bx	lr
    7df4:	e000e100 	.word	0xe000e100

00007df8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    7df8:	b508      	push	{r3, lr}
	if (_current == thread) {
    7dfa:	4b0e      	ldr	r3, [pc, #56]	; (7e34 <z_impl_k_thread_abort+0x3c>)
    7dfc:	689b      	ldr	r3, [r3, #8]
    7dfe:	4283      	cmp	r3, r0
    7e00:	d107      	bne.n	7e12 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7e02:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7e06:	b193      	cbz	r3, 7e2e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7e08:	4a0b      	ldr	r2, [pc, #44]	; (7e38 <z_impl_k_thread_abort+0x40>)
    7e0a:	6853      	ldr	r3, [r2, #4]
    7e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7e10:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    7e12:	f018 fd37 	bl	20884 <z_thread_single_abort>
	__asm__ volatile(
    7e16:	f04f 0320 	mov.w	r3, #32
    7e1a:	f3ef 8011 	mrs	r0, BASEPRI
    7e1e:	f383 8811 	msr	BASEPRI, r3
    7e22:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    7e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    7e2a:	f01f bce4 	b.w	277f6 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    7e2e:	f019 f813 	bl	20e58 <z_self_abort>
    7e32:	bf00      	nop
    7e34:	2000f504 	.word	0x2000f504
    7e38:	e000ed00 	.word	0xe000ed00

00007e3c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7e3c:	4b02      	ldr	r3, [pc, #8]	; (7e48 <z_arm_configure_static_mpu_regions+0xc>)
    7e3e:	4a03      	ldr	r2, [pc, #12]	; (7e4c <z_arm_configure_static_mpu_regions+0x10>)
    7e40:	4803      	ldr	r0, [pc, #12]	; (7e50 <z_arm_configure_static_mpu_regions+0x14>)
    7e42:	2101      	movs	r1, #1
    7e44:	f000 b8bc 	b.w	7fc0 <arm_core_mpu_configure_static_mpu_regions>
    7e48:	20040000 	.word	0x20040000
    7e4c:	20000000 	.word	0x20000000
    7e50:	000288f0 	.word	0x000288f0

00007e54 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7e54:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7e56:	4b05      	ldr	r3, [pc, #20]	; (7e6c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    7e58:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7e5a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7e5c:	4a04      	ldr	r2, [pc, #16]	; (7e70 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7e5e:	2120      	movs	r1, #32
    7e60:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7e64:	4618      	mov	r0, r3
    7e66:	2101      	movs	r1, #1
    7e68:	f000 b8b4 	b.w	7fd4 <arm_core_mpu_configure_dynamic_mpu_regions>
    7e6c:	2000db60 	.word	0x2000db60
    7e70:	150b0000 	.word	0x150b0000

00007e74 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    7e76:	4f2a      	ldr	r7, [pc, #168]	; (7f20 <mpu_configure_regions+0xac>)
    7e78:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7e7a:	2100      	movs	r1, #0
    7e7c:	42b1      	cmp	r1, r6
    7e7e:	da14      	bge.n	7eaa <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    7e80:	6844      	ldr	r4, [r0, #4]
    7e82:	2c00      	cmp	r4, #0
    7e84:	d048      	beq.n	7f18 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7e86:	b1c3      	cbz	r3, 7eba <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7e88:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7e8c:	ea14 0f0c 	tst.w	r4, ip
    7e90:	d00d      	beq.n	7eae <mpu_configure_regions+0x3a>
    7e92:	4a24      	ldr	r2, [pc, #144]	; (7f24 <mpu_configure_regions+0xb0>)
    7e94:	4b24      	ldr	r3, [pc, #144]	; (7f28 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7e96:	4825      	ldr	r0, [pc, #148]	; (7f2c <mpu_configure_regions+0xb8>)
    7e98:	1ad2      	subs	r2, r2, r3
    7e9a:	08d2      	lsrs	r2, r2, #3
    7e9c:	0192      	lsls	r2, r2, #6
    7e9e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7ea2:	f01a febc 	bl	22c1e <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7ea6:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7eaa:	4610      	mov	r0, r2
    7eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    7eae:	2c1f      	cmp	r4, #31
    7eb0:	d9ef      	bls.n	7e92 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    7eb2:	6805      	ldr	r5, [r0, #0]
		&&
    7eb4:	ea1c 0f05 	tst.w	ip, r5
    7eb8:	d1eb      	bne.n	7e92 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7eba:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7ebc:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7ebe:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    7ec2:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    7ec4:	d916      	bls.n	7ef4 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    7ec6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7eca:	d815      	bhi.n	7ef8 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7ecc:	3c01      	subs	r4, #1
    7ece:	fab4 f484 	clz	r4, r4
    7ed2:	f1c4 041f 	rsb	r4, r4, #31
    7ed6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7ed8:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7eda:	ea4c 0404 	orr.w	r4, ip, r4
    7ede:	d90d      	bls.n	7efc <mpu_configure_regions+0x88>
    7ee0:	4a10      	ldr	r2, [pc, #64]	; (7f24 <mpu_configure_regions+0xb0>)
    7ee2:	4b11      	ldr	r3, [pc, #68]	; (7f28 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7ee4:	4812      	ldr	r0, [pc, #72]	; (7f30 <mpu_configure_regions+0xbc>)
    7ee6:	1ad2      	subs	r2, r2, r3
    7ee8:	08d2      	lsrs	r2, r2, #3
    7eea:	0192      	lsls	r2, r2, #6
    7eec:	f042 0201 	orr.w	r2, r2, #1
    7ef0:	4629      	mov	r1, r5
    7ef2:	e7d6      	b.n	7ea2 <mpu_configure_regions+0x2e>
		return REGION_32B;
    7ef4:	2408      	movs	r4, #8
    7ef6:	e7ef      	b.n	7ed8 <mpu_configure_regions+0x64>
		return REGION_4G;
    7ef8:	243e      	movs	r4, #62	; 0x3e
    7efa:	e7ed      	b.n	7ed8 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7efc:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7f00:	432a      	orrs	r2, r5
    7f02:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f06:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7f0a:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f0e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f12:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    7f16:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7f18:	3101      	adds	r1, #1
    7f1a:	300c      	adds	r0, #12
    7f1c:	e7ae      	b.n	7e7c <mpu_configure_regions+0x8>
    7f1e:	bf00      	nop
    7f20:	e000ed00 	.word	0xe000ed00
    7f24:	000282ec 	.word	0x000282ec
    7f28:	000281b4 	.word	0x000281b4
    7f2c:	0002c69d 	.word	0x0002c69d
    7f30:	0002c6c0 	.word	0x0002c6c0

00007f34 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7f34:	4b04      	ldr	r3, [pc, #16]	; (7f48 <arm_core_mpu_enable+0x14>)
    7f36:	2205      	movs	r2, #5
    7f38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f40:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7f44:	4770      	bx	lr
    7f46:	bf00      	nop
    7f48:	e000ed00 	.word	0xe000ed00

00007f4c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7f4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7f50:	4b02      	ldr	r3, [pc, #8]	; (7f5c <arm_core_mpu_disable+0x10>)
    7f52:	2200      	movs	r2, #0
    7f54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7f58:	4770      	bx	lr
    7f5a:	bf00      	nop
    7f5c:	e000ed00 	.word	0xe000ed00

00007f60 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7f60:	4914      	ldr	r1, [pc, #80]	; (7fb4 <arm_mpu_init+0x54>)
    7f62:	6808      	ldr	r0, [r1, #0]
    7f64:	2808      	cmp	r0, #8
{
    7f66:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7f68:	d821      	bhi.n	7fae <arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7f6a:	f7ff ffef 	bl	7f4c <arm_core_mpu_disable>
	MPU->RNR = index;
    7f6e:	4c12      	ldr	r4, [pc, #72]	; (7fb8 <arm_mpu_init+0x58>)
    7f70:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7f72:	2200      	movs	r2, #0
    7f74:	4290      	cmp	r0, r2
    7f76:	f101 010c 	add.w	r1, r1, #12
    7f7a:	d105      	bne.n	7f88 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7f7c:	4b0f      	ldr	r3, [pc, #60]	; (7fbc <arm_mpu_init+0x5c>)
    7f7e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7f80:	f7ff ffd8 	bl	7f34 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    7f84:	2000      	movs	r0, #0
}
    7f86:	bd10      	pop	{r4, pc}
    7f88:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f8c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7f90:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7f94:	4313      	orrs	r3, r2
    7f96:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f9a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7fa2:	f043 0301 	orr.w	r3, r3, #1
    7fa6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7faa:	3201      	adds	r2, #1
    7fac:	e7e2      	b.n	7f74 <arm_mpu_init+0x14>
		return -1;
    7fae:	f04f 30ff 	mov.w	r0, #4294967295
    7fb2:	e7e8      	b.n	7f86 <arm_mpu_init+0x26>
    7fb4:	000288fc 	.word	0x000288fc
    7fb8:	e000ed00 	.word	0xe000ed00
    7fbc:	2000f9c7 	.word	0x2000f9c7

00007fc0 <arm_core_mpu_configure_static_mpu_regions>:
{
    7fc0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7fc2:	4c03      	ldr	r4, [pc, #12]	; (7fd0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7fc4:	2301      	movs	r3, #1
    7fc6:	7822      	ldrb	r2, [r4, #0]
    7fc8:	f7ff ff54 	bl	7e74 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7fcc:	7020      	strb	r0, [r4, #0]
}
    7fce:	bd10      	pop	{r4, pc}
    7fd0:	2000f9c7 	.word	0x2000f9c7

00007fd4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    7fd4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    7fd6:	4a09      	ldr	r2, [pc, #36]	; (7ffc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    7fd8:	2300      	movs	r3, #0
    7fda:	7812      	ldrb	r2, [r2, #0]
    7fdc:	f7ff ff4a 	bl	7e74 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7fe0:	f110 0f16 	cmn.w	r0, #22
    7fe4:	d003      	beq.n	7fee <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    7fe6:	4b06      	ldr	r3, [pc, #24]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
  MPU->RASR = 0U;
    7fe8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    7fea:	2807      	cmp	r0, #7
    7fec:	dd00      	ble.n	7ff0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    7fee:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    7ff0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    7ff4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    7ff8:	3001      	adds	r0, #1
    7ffa:	e7f6      	b.n	7fea <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    7ffc:	2000f9c7 	.word	0x2000f9c7
    8000:	e000ed00 	.word	0xe000ed00

00008004 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    8004:	4b01      	ldr	r3, [pc, #4]	; (800c <__stdout_hook_install+0x8>)
    8006:	6018      	str	r0, [r3, #0]
}
    8008:	4770      	bx	lr
    800a:	bf00      	nop
    800c:	20000330 	.word	0x20000330

00008010 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    8010:	3902      	subs	r1, #2
    8012:	2901      	cmp	r1, #1
    8014:	d802      	bhi.n	801c <z_impl_zephyr_fputc+0xc>
    8016:	4b03      	ldr	r3, [pc, #12]	; (8024 <z_impl_zephyr_fputc+0x14>)
    8018:	681b      	ldr	r3, [r3, #0]
    801a:	4718      	bx	r3
}
    801c:	f04f 30ff 	mov.w	r0, #4294967295
    8020:	4770      	bx	lr
    8022:	bf00      	nop
    8024:	20000330 	.word	0x20000330

00008028 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    8028:	b40e      	push	{r1, r2, r3}
    802a:	b50f      	push	{r0, r1, r2, r3, lr}
    802c:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    802e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    8032:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    8036:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    8038:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    803a:	4806      	ldr	r0, [pc, #24]	; (8054 <sprintf+0x2c>)
	va_start(vargs, format);
    803c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    803e:	a902      	add	r1, sp, #8
    8040:	f7fc fb6c 	bl	471c <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    8044:	9b02      	ldr	r3, [sp, #8]
    8046:	2200      	movs	r2, #0
    8048:	701a      	strb	r2, [r3, #0]
	return r;
}
    804a:	b004      	add	sp, #16
    804c:	f85d eb04 	ldr.w	lr, [sp], #4
    8050:	b003      	add	sp, #12
    8052:	4770      	bx	lr
    8054:	00024cf7 	.word	0x00024cf7

00008058 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    8058:	b40f      	push	{r0, r1, r2, r3}
    805a:	b507      	push	{r0, r1, r2, lr}
    805c:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    805e:	2102      	movs	r1, #2
{
    8060:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    8064:	4804      	ldr	r0, [pc, #16]	; (8078 <printf+0x20>)
	va_start(vargs, format);
    8066:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    8068:	f7fc fb58 	bl	471c <cbvprintf>
	va_end(vargs);

	return r;
}
    806c:	b003      	add	sp, #12
    806e:	f85d eb04 	ldr.w	lr, [sp], #4
    8072:	b004      	add	sp, #16
    8074:	4770      	bx	lr
    8076:	bf00      	nop
    8078:	00024cf3 	.word	0x00024cf3

0000807c <nordicsemi_nrf52_init>:
    807c:	f04f 0320 	mov.w	r3, #32
    8080:	f3ef 8211 	mrs	r2, BASEPRI
    8084:	f383 8811 	msr	BASEPRI, r3
    8088:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    808c:	4906      	ldr	r1, [pc, #24]	; (80a8 <nordicsemi_nrf52_init+0x2c>)
    808e:	2301      	movs	r3, #1
    8090:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8094:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8098:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    809c:	f382 8811 	msr	BASEPRI, r2
    80a0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    80a4:	2000      	movs	r0, #0
    80a6:	4770      	bx	lr
    80a8:	4001e000 	.word	0x4001e000

000080ac <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    80ac:	b120      	cbz	r0, 80b8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    80ae:	4b03      	ldr	r3, [pc, #12]	; (80bc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    80b0:	0180      	lsls	r0, r0, #6
    80b2:	f043 0301 	orr.w	r3, r3, #1
    80b6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    80b8:	4770      	bx	lr
    80ba:	bf00      	nop
    80bc:	00028440 	.word	0x00028440

000080c0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    80c0:	4b0e      	ldr	r3, [pc, #56]	; (80fc <bt_hex_real+0x3c>)
    80c2:	2940      	cmp	r1, #64	; 0x40
{
    80c4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    80c6:	bf28      	it	cs
    80c8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    80ca:	4c0d      	ldr	r4, [pc, #52]	; (8100 <bt_hex_real+0x40>)
    80cc:	1846      	adds	r6, r0, r1
    80ce:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    80d0:	42b0      	cmp	r0, r6
    80d2:	f103 0302 	add.w	r3, r3, #2
    80d6:	d104      	bne.n	80e2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    80d8:	2300      	movs	r3, #0
    80da:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    80de:	4807      	ldr	r0, [pc, #28]	; (80fc <bt_hex_real+0x3c>)
    80e0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    80e2:	7802      	ldrb	r2, [r0, #0]
    80e4:	0912      	lsrs	r2, r2, #4
    80e6:	5ca2      	ldrb	r2, [r4, r2]
    80e8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    80ec:	f810 2b01 	ldrb.w	r2, [r0], #1
    80f0:	f002 020f 	and.w	r2, r2, #15
    80f4:	5ca2      	ldrb	r2, [r4, r2]
    80f6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    80fa:	e7e9      	b.n	80d0 <bt_hex_real+0x10>
    80fc:	2000f9e6 	.word	0x2000f9e6
    8100:	0002c6f9 	.word	0x0002c6f9

00008104 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    8104:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    8106:	7803      	ldrb	r3, [r0, #0]
    8108:	b08b      	sub	sp, #44	; 0x2c
    810a:	4604      	mov	r4, r0
    810c:	ad07      	add	r5, sp, #28
    810e:	2b03      	cmp	r3, #3
    8110:	d821      	bhi.n	8156 <bt_addr_le_str_real+0x52>
    8112:	e8df f003 	tbb	[pc, r3]
    8116:	1a02      	.short	0x1a02
    8118:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    811a:	4912      	ldr	r1, [pc, #72]	; (8164 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    811c:	4628      	mov	r0, r5
    811e:	f01c fd3d 	bl	24b9c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8122:	7863      	ldrb	r3, [r4, #1]
    8124:	9304      	str	r3, [sp, #16]
    8126:	78a3      	ldrb	r3, [r4, #2]
    8128:	9303      	str	r3, [sp, #12]
    812a:	78e3      	ldrb	r3, [r4, #3]
    812c:	9302      	str	r3, [sp, #8]
    812e:	7923      	ldrb	r3, [r4, #4]
    8130:	9301      	str	r3, [sp, #4]
    8132:	7963      	ldrb	r3, [r4, #5]
    8134:	9300      	str	r3, [sp, #0]
    8136:	4a0c      	ldr	r2, [pc, #48]	; (8168 <bt_addr_le_str_real+0x64>)
    8138:	79a3      	ldrb	r3, [r4, #6]
    813a:	9505      	str	r5, [sp, #20]
    813c:	211e      	movs	r1, #30
    813e:	480b      	ldr	r0, [pc, #44]	; (816c <bt_addr_le_str_real+0x68>)
    8140:	f01a f8d7 	bl	222f2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8144:	4809      	ldr	r0, [pc, #36]	; (816c <bt_addr_le_str_real+0x68>)
    8146:	b00b      	add	sp, #44	; 0x2c
    8148:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    814a:	4909      	ldr	r1, [pc, #36]	; (8170 <bt_addr_le_str_real+0x6c>)
    814c:	e7e6      	b.n	811c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    814e:	4909      	ldr	r1, [pc, #36]	; (8174 <bt_addr_le_str_real+0x70>)
    8150:	e7e4      	b.n	811c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    8152:	4909      	ldr	r1, [pc, #36]	; (8178 <bt_addr_le_str_real+0x74>)
    8154:	e7e2      	b.n	811c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8156:	4a09      	ldr	r2, [pc, #36]	; (817c <bt_addr_le_str_real+0x78>)
    8158:	210a      	movs	r1, #10
    815a:	4628      	mov	r0, r5
    815c:	f01a f8c9 	bl	222f2 <snprintk>
		break;
    8160:	e7df      	b.n	8122 <bt_addr_le_str_real+0x1e>
    8162:	bf00      	nop
    8164:	00029da6 	.word	0x00029da6
    8168:	00029dc8 	.word	0x00029dc8
    816c:	2000f9c8 	.word	0x2000f9c8
    8170:	00029dad 	.word	0x00029dad
    8174:	00029db4 	.word	0x00029db4
    8178:	00029dbe 	.word	0x00029dbe
    817c:	0002de1e 	.word	0x0002de1e

00008180 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    8180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8184:	4b64      	ldr	r3, [pc, #400]	; (8318 <ecc_thread+0x198>)
    8186:	4d65      	ldr	r5, [pc, #404]	; (831c <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8188:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8320 <ecc_thread+0x1a0>
	return z_impl_k_sem_take(sem, timeout);
    818c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8324 <ecc_thread+0x1a4>
    8190:	1aed      	subs	r5, r5, r3
    8192:	08ed      	lsrs	r5, r5, #3
    8194:	4647      	mov	r7, r8
    8196:	f04f 32ff 	mov.w	r2, #4294967295
    819a:	f04f 33ff 	mov.w	r3, #4294967295
    819e:	4648      	mov	r0, r9
    81a0:	f018 fd60 	bl	20c64 <z_impl_k_sem_take>
    81a4:	f3bf 8f5b 	dmb	ish
    81a8:	f8d8 4000 	ldr.w	r4, [r8]
    81ac:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    81b0:	f014 0401 	ands.w	r4, r4, #1
    81b4:	d05a      	beq.n	826c <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    81b6:	f8df a170 	ldr.w	sl, [pc, #368]	; 8328 <ecc_thread+0x1a8>
    81ba:	4c5c      	ldr	r4, [pc, #368]	; (832c <ecc_thread+0x1ac>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    81bc:	4e5c      	ldr	r6, [pc, #368]	; (8330 <ecc_thread+0x1b0>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    81be:	485d      	ldr	r0, [pc, #372]	; (8334 <ecc_thread+0x1b4>)
    81c0:	4652      	mov	r2, sl
    81c2:	4621      	mov	r1, r4
    81c4:	f01b fb6d 	bl	238a2 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    81c8:	bbe8      	cbnz	r0, 8246 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    81ca:	01a9      	lsls	r1, r5, #6
    81cc:	485a      	ldr	r0, [pc, #360]	; (8338 <ecc_thread+0x1b8>)
    81ce:	f041 0101 	orr.w	r1, r1, #1
    81d2:	f01a fd17 	bl	22c04 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    81d6:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    81da:	f04f 32ff 	mov.w	r2, #4294967295
    81de:	f04f 33ff 	mov.w	r3, #4294967295
    81e2:	2001      	movs	r0, #1
    81e4:	f000 fb1a 	bl	881c <bt_buf_get_rx>
    81e8:	f100 0608 	add.w	r6, r0, #8
    81ec:	2102      	movs	r1, #2
    81ee:	4604      	mov	r4, r0
    81f0:	4630      	mov	r0, r6
    81f2:	f01e fd9b 	bl	26d2c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    81f6:	233e      	movs	r3, #62	; 0x3e
    81f8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    81fa:	2342      	movs	r3, #66	; 0x42
    81fc:	7043      	strb	r3, [r0, #1]
    81fe:	2101      	movs	r1, #1
    8200:	4630      	mov	r0, r6
    8202:	f01e fd93 	bl	26d2c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    8206:	2308      	movs	r3, #8
    8208:	7003      	strb	r3, [r0, #0]
    820a:	2141      	movs	r1, #65	; 0x41
    820c:	4630      	mov	r0, r6
    820e:	f01e fd8d 	bl	26d2c <net_buf_simple_add>
    8212:	4606      	mov	r6, r0
	evt->status = status;
    8214:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    8218:	f1ba 0f00 	cmp.w	sl, #0
    821c:	d01d      	beq.n	825a <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    821e:	2240      	movs	r2, #64	; 0x40
    8220:	2100      	movs	r1, #0
    8222:	f01c fd40 	bl	24ca6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8226:	f3bf 8f5b 	dmb	ish
    822a:	e857 3f00 	ldrex	r3, [r7]
    822e:	f023 0301 	bic.w	r3, r3, #1
    8232:	e847 3200 	strex	r2, r3, [r7]
    8236:	2a00      	cmp	r2, #0
    8238:	d1f7      	bne.n	822a <ecc_thread+0xaa>
    823a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    823e:	4620      	mov	r0, r4
	bt_recv(buf);
    8240:	f002 f85a 	bl	a2f8 <bt_recv>
	while (true) {
    8244:	e7a7      	b.n	8196 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    8246:	2220      	movs	r2, #32
    8248:	4631      	mov	r1, r6
    824a:	4620      	mov	r0, r4
    824c:	f01c fcef 	bl	24c2e <memcmp>
    8250:	2800      	cmp	r0, #0
    8252:	d0b4      	beq.n	81be <ecc_thread+0x3e>
	return 0;
    8254:	f04f 0a00 	mov.w	sl, #0
    8258:	e7bf      	b.n	81da <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    825a:	4936      	ldr	r1, [pc, #216]	; (8334 <ecc_thread+0x1b4>)
    825c:	f01c fde3 	bl	24e26 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    8260:	3120      	adds	r1, #32
    8262:	f106 0021 	add.w	r0, r6, #33	; 0x21
    8266:	f01c fdde 	bl	24e26 <sys_memcpy_swap.constprop.0>
    826a:	e7dc      	b.n	8226 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    826c:	f3bf 8f5b 	dmb	ish
    8270:	f8d8 3000 	ldr.w	r3, [r8]
    8274:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8278:	079b      	lsls	r3, r3, #30
    827a:	d58c      	bpl.n	8196 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    827c:	492a      	ldr	r1, [pc, #168]	; (8328 <ecc_thread+0x1a8>)
    827e:	482d      	ldr	r0, [pc, #180]	; (8334 <ecc_thread+0x1b4>)
    8280:	f01c f9d4 	bl	2462c <uECC_valid_public_key>
	if (ret < 0) {
    8284:	1e01      	subs	r1, r0, #0
    8286:	da38      	bge.n	82fa <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    8288:	01aa      	lsls	r2, r5, #6
    828a:	482c      	ldr	r0, [pc, #176]	; (833c <ecc_thread+0x1bc>)
    828c:	f042 0201 	orr.w	r2, r2, #1
    8290:	f01a fcc5 	bl	22c1e <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8294:	f04f 32ff 	mov.w	r2, #4294967295
    8298:	f04f 33ff 	mov.w	r3, #4294967295
    829c:	2001      	movs	r0, #1
    829e:	f000 fabd 	bl	881c <bt_buf_get_rx>
    82a2:	f100 0a08 	add.w	sl, r0, #8
    82a6:	2102      	movs	r1, #2
    82a8:	4606      	mov	r6, r0
    82aa:	4650      	mov	r0, sl
    82ac:	f01e fd3e 	bl	26d2c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    82b0:	233e      	movs	r3, #62	; 0x3e
    82b2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    82b4:	2322      	movs	r3, #34	; 0x22
    82b6:	7043      	strb	r3, [r0, #1]
    82b8:	2101      	movs	r1, #1
    82ba:	4650      	mov	r0, sl
    82bc:	f01e fd36 	bl	26d2c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    82c0:	2309      	movs	r3, #9
    82c2:	7003      	strb	r3, [r0, #0]
    82c4:	2121      	movs	r1, #33	; 0x21
    82c6:	4650      	mov	r0, sl
    82c8:	f01e fd30 	bl	26d2c <net_buf_simple_add>
    82cc:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    82ce:	3001      	adds	r0, #1
    82d0:	b9e4      	cbnz	r4, 830c <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    82d2:	221f      	movs	r2, #31
    82d4:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    82d6:	21ff      	movs	r1, #255	; 0xff
    82d8:	2220      	movs	r2, #32
    82da:	f01c fce4 	bl	24ca6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    82de:	f3bf 8f5b 	dmb	ish
    82e2:	e857 3f00 	ldrex	r3, [r7]
    82e6:	f023 0302 	bic.w	r3, r3, #2
    82ea:	e847 3200 	strex	r2, r3, [r7]
    82ee:	2a00      	cmp	r2, #0
    82f0:	d1f7      	bne.n	82e2 <ecc_thread+0x162>
    82f2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    82f6:	4630      	mov	r0, r6
    82f8:	e7a2      	b.n	8240 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    82fa:	4a0e      	ldr	r2, [pc, #56]	; (8334 <ecc_thread+0x1b4>)
    82fc:	4b0a      	ldr	r3, [pc, #40]	; (8328 <ecc_thread+0x1a8>)
    82fe:	f1a2 0120 	sub.w	r1, r2, #32
    8302:	4610      	mov	r0, r2
    8304:	f01b fb1c 	bl	23940 <uECC_shared_secret>
    8308:	4604      	mov	r4, r0
    830a:	e7c3      	b.n	8294 <ecc_thread+0x114>
		evt->status = 0U;
    830c:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    830e:	4909      	ldr	r1, [pc, #36]	; (8334 <ecc_thread+0x1b4>)
		evt->status = 0U;
    8310:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    8312:	f01c fd88 	bl	24e26 <sys_memcpy_swap.constprop.0>
    8316:	e7e2      	b.n	82de <ecc_thread+0x15e>
    8318:	000281b4 	.word	0x000281b4
    831c:	00028284 	.word	0x00028284
    8320:	2000db6c 	.word	0x2000db6c
    8324:	2000a0bc 	.word	0x2000a0bc
    8328:	0002891c 	.word	0x0002891c
    832c:	2000fa67 	.word	0x2000fa67
    8330:	0002c76d 	.word	0x0002c76d
    8334:	2000fa87 	.word	0x2000fa87
    8338:	0002c711 	.word	0x0002c711
    833c:	0002c73a 	.word	0x0002c73a

00008340 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    8340:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8342:	7d05      	ldrb	r5, [r0, #20]
    8344:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    8346:	b9ad      	cbnz	r5, 8374 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    8348:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    834a:	881a      	ldrh	r2, [r3, #0]
    834c:	f242 0125 	movw	r1, #8229	; 0x2025
    8350:	428a      	cmp	r2, r1
    8352:	d017      	beq.n	8384 <bt_hci_ecc_send+0x44>
    8354:	f242 0126 	movw	r1, #8230	; 0x2026
    8358:	428a      	cmp	r2, r1
    835a:	d03c      	beq.n	83d6 <bt_hci_ecc_send+0x96>
    835c:	f242 0101 	movw	r1, #8193	; 0x2001
    8360:	428a      	cmp	r2, r1
    8362:	d107      	bne.n	8374 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    8364:	78da      	ldrb	r2, [r3, #3]
    8366:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    836a:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    836c:	791a      	ldrb	r2, [r3, #4]
    836e:	f022 0201 	bic.w	r2, r2, #1
    8372:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    8374:	4b31      	ldr	r3, [pc, #196]	; (843c <bt_hci_ecc_send+0xfc>)
    8376:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    837a:	4620      	mov	r0, r4
    837c:	691b      	ldr	r3, [r3, #16]
}
    837e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    8382:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    8384:	2103      	movs	r1, #3
    8386:	3008      	adds	r0, #8
    8388:	f01e fcef 	bl	26d6a <net_buf_simple_pull>
	net_buf_unref(buf);
    838c:	4620      	mov	r0, r4
    838e:	f015 fa71 	bl	1d874 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8392:	f3bf 8f5b 	dmb	ish
    8396:	4b2a      	ldr	r3, [pc, #168]	; (8440 <bt_hci_ecc_send+0x100>)
    8398:	681a      	ldr	r2, [r3, #0]
    839a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    839e:	0790      	lsls	r0, r2, #30
    83a0:	d507      	bpl.n	83b2 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    83a2:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    83a4:	4629      	mov	r1, r5
    83a6:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    83aa:	f01c fd18 	bl	24dde <send_cmd_status>
}
    83ae:	2000      	movs	r0, #0
    83b0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    83b2:	f3bf 8f5b 	dmb	ish
    83b6:	e853 2f00 	ldrex	r2, [r3]
    83ba:	f042 0101 	orr.w	r1, r2, #1
    83be:	e843 1000 	strex	r0, r1, [r3]
    83c2:	2800      	cmp	r0, #0
    83c4:	d1f7      	bne.n	83b6 <bt_hci_ecc_send+0x76>
    83c6:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    83ca:	07d1      	lsls	r1, r2, #31
    83cc:	d4e9      	bmi.n	83a2 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    83ce:	481d      	ldr	r0, [pc, #116]	; (8444 <bt_hci_ecc_send+0x104>)
    83d0:	f018 fc22 	bl	20c18 <z_impl_k_sem_give>
}
    83d4:	e7e6      	b.n	83a4 <bt_hci_ecc_send+0x64>
    83d6:	2103      	movs	r1, #3
    83d8:	3008      	adds	r0, #8
    83da:	f01e fcc6 	bl	26d6a <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    83de:	f3bf 8f5b 	dmb	ish
    83e2:	4b17      	ldr	r3, [pc, #92]	; (8440 <bt_hci_ecc_send+0x100>)
    83e4:	681a      	ldr	r2, [r3, #0]
    83e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    83ea:	07d2      	lsls	r2, r2, #31
    83ec:	d507      	bpl.n	83fe <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    83ee:	250c      	movs	r5, #12
	net_buf_unref(buf);
    83f0:	4620      	mov	r0, r4
    83f2:	f015 fa3f 	bl	1d874 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    83f6:	4629      	mov	r1, r5
    83f8:	f242 0026 	movw	r0, #8230	; 0x2026
    83fc:	e7d5      	b.n	83aa <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    83fe:	89a2      	ldrh	r2, [r4, #12]
    8400:	2a3f      	cmp	r2, #63	; 0x3f
    8402:	d919      	bls.n	8438 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8404:	f3bf 8f5b 	dmb	ish
    8408:	e853 2f00 	ldrex	r2, [r3]
    840c:	f042 0102 	orr.w	r1, r2, #2
    8410:	e843 1000 	strex	r0, r1, [r3]
    8414:	2800      	cmp	r0, #0
    8416:	d1f7      	bne.n	8408 <bt_hci_ecc_send+0xc8>
    8418:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    841c:	0793      	lsls	r3, r2, #30
    841e:	d4e6      	bmi.n	83ee <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    8420:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    8422:	4809      	ldr	r0, [pc, #36]	; (8448 <bt_hci_ecc_send+0x108>)
    8424:	f01c fcff 	bl	24e26 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    8428:	4808      	ldr	r0, [pc, #32]	; (844c <bt_hci_ecc_send+0x10c>)
    842a:	3120      	adds	r1, #32
    842c:	f01c fcfb 	bl	24e26 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    8430:	4804      	ldr	r0, [pc, #16]	; (8444 <bt_hci_ecc_send+0x104>)
    8432:	f018 fbf1 	bl	20c18 <z_impl_k_sem_give>
}
    8436:	e7db      	b.n	83f0 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    8438:	2512      	movs	r5, #18
    843a:	e7d9      	b.n	83f0 <bt_hci_ecc_send+0xb0>
    843c:	20000000 	.word	0x20000000
    8440:	2000db6c 	.word	0x2000db6c
    8444:	2000a0bc 	.word	0x2000a0bc
    8448:	2000fa87 	.word	0x2000fa87
    844c:	2000faa7 	.word	0x2000faa7

00008450 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8450:	b510      	push	{r4, lr}
    8452:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8454:	4c0c      	ldr	r4, [pc, #48]	; (8488 <bt_hci_ecc_init+0x38>)
    8456:	490d      	ldr	r1, [pc, #52]	; (848c <bt_hci_ecc_init+0x3c>)
    8458:	2200      	movs	r2, #0
    845a:	2300      	movs	r3, #0
    845c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8460:	2300      	movs	r3, #0
    8462:	220a      	movs	r2, #10
    8464:	e9cd 2303 	strd	r2, r3, [sp, #12]
    8468:	e9cd 3301 	strd	r3, r3, [sp, #4]
    846c:	9300      	str	r3, [sp, #0]
    846e:	f44f 628a 	mov.w	r2, #1104	; 0x450
    8472:	4b07      	ldr	r3, [pc, #28]	; (8490 <bt_hci_ecc_init+0x40>)
    8474:	4620      	mov	r0, r4
    8476:	f018 fc67 	bl	20d48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    847a:	4906      	ldr	r1, [pc, #24]	; (8494 <bt_hci_ecc_init+0x44>)
    847c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    847e:	b008      	add	sp, #32
    8480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8484:	f01f baa5 	b.w	279d2 <z_impl_k_thread_name_set>
    8488:	2000a658 	.word	0x2000a658
    848c:	20010b20 	.word	0x20010b20
    8490:	00008181 	.word	0x00008181
    8494:	0002c75b 	.word	0x0002c75b

00008498 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    8498:	b538      	push	{r3, r4, r5, lr}
    849a:	4b14      	ldr	r3, [pc, #80]	; (84ec <save_id+0x54>)
    849c:	4c14      	ldr	r4, [pc, #80]	; (84f0 <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    849e:	4d15      	ldr	r5, [pc, #84]	; (84f4 <save_id+0x5c>)
	BT_INFO("Saving ID");
    84a0:	4815      	ldr	r0, [pc, #84]	; (84f8 <save_id+0x60>)
    84a2:	1ae4      	subs	r4, r4, r3
    84a4:	08e4      	lsrs	r4, r4, #3
    84a6:	01a4      	lsls	r4, r4, #6
    84a8:	f044 0103 	orr.w	r1, r4, #3
    84ac:	f01a fbaa 	bl	22c04 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    84b0:	79ea      	ldrb	r2, [r5, #7]
    84b2:	4812      	ldr	r0, [pc, #72]	; (84fc <save_id+0x64>)
    84b4:	4629      	mov	r1, r5
    84b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    84ba:	f7fe f993 	bl	67e4 <settings_save_one>
	if (err) {
    84be:	4601      	mov	r1, r0
    84c0:	b120      	cbz	r0, 84cc <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    84c2:	480f      	ldr	r0, [pc, #60]	; (8500 <save_id+0x68>)
    84c4:	f044 0201 	orr.w	r2, r4, #1
    84c8:	f01a fba9 	bl	22c1e <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    84cc:	79ea      	ldrb	r2, [r5, #7]
    84ce:	490d      	ldr	r1, [pc, #52]	; (8504 <save_id+0x6c>)
    84d0:	480d      	ldr	r0, [pc, #52]	; (8508 <save_id+0x70>)
    84d2:	0112      	lsls	r2, r2, #4
    84d4:	f7fe f986 	bl	67e4 <settings_save_one>
	if (err) {
    84d8:	4601      	mov	r1, r0
    84da:	b130      	cbz	r0, 84ea <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    84dc:	f044 0201 	orr.w	r2, r4, #1
    84e0:	480a      	ldr	r0, [pc, #40]	; (850c <save_id+0x74>)
	}
#endif
}
    84e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    84e6:	f01a bb9a 	b.w	22c1e <log_1>
}
    84ea:	bd38      	pop	{r3, r4, r5, pc}
    84ec:	000281b4 	.word	0x000281b4
    84f0:	000282a4 	.word	0x000282a4
    84f4:	20000000 	.word	0x20000000
    84f8:	0002c78d 	.word	0x0002c78d
    84fc:	0002c797 	.word	0x0002c797
    8500:	0002c79d 	.word	0x0002c79d
    8504:	20000120 	.word	0x20000120
    8508:	0002c7b8 	.word	0x0002c7b8
    850c:	0002c7bf 	.word	0x0002c7bf

00008510 <set>:
{
    8510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8514:	4605      	mov	r5, r0
    8516:	4616      	mov	r6, r2
    8518:	461f      	mov	r7, r3
	if (!name) {
    851a:	b960      	cbnz	r0, 8536 <set+0x26>
    851c:	4942      	ldr	r1, [pc, #264]	; (8628 <set+0x118>)
    851e:	4b43      	ldr	r3, [pc, #268]	; (862c <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
    8520:	4843      	ldr	r0, [pc, #268]	; (8630 <set+0x120>)
    8522:	1ac9      	subs	r1, r1, r3
    8524:	08c9      	lsrs	r1, r1, #3
    8526:	0189      	lsls	r1, r1, #6
    8528:	f041 0101 	orr.w	r1, r1, #1
    852c:	f01a fb6a 	bl	22c04 <log_0>
	return -ENOENT;
    8530:	f06f 0401 	mvn.w	r4, #1
    8534:	e01c      	b.n	8570 <set+0x60>
	len = settings_name_next(name, &next);
    8536:	a901      	add	r1, sp, #4
    8538:	f01b f833 	bl	235a2 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    853c:	493d      	ldr	r1, [pc, #244]	; (8634 <set+0x124>)
    853e:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    8540:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    8542:	4628      	mov	r0, r5
    8544:	f01c fb62 	bl	24c0c <strncmp>
    8548:	4604      	mov	r4, r0
    854a:	bb90      	cbnz	r0, 85b2 <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    854c:	f3bf 8f5b 	dmb	ish
    8550:	4d39      	ldr	r5, [pc, #228]	; (8638 <set+0x128>)
    8552:	682b      	ldr	r3, [r5, #0]
    8554:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    8558:	075b      	lsls	r3, r3, #29
    855a:	d50d      	bpl.n	8578 <set+0x68>
    855c:	4932      	ldr	r1, [pc, #200]	; (8628 <set+0x118>)
    855e:	4b33      	ldr	r3, [pc, #204]	; (862c <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
    8560:	4836      	ldr	r0, [pc, #216]	; (863c <set+0x12c>)
    8562:	1ac9      	subs	r1, r1, r3
    8564:	08c9      	lsrs	r1, r1, #3
    8566:	0189      	lsls	r1, r1, #6
    8568:	f041 0102 	orr.w	r1, r1, #2
    856c:	f01a fb4a 	bl	22c04 <log_0>
}
    8570:	4620      	mov	r0, r4
    8572:	b002      	add	sp, #8
    8574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    8578:	3d94      	subs	r5, #148	; 0x94
    857a:	2207      	movs	r2, #7
    857c:	4629      	mov	r1, r5
    857e:	4638      	mov	r0, r7
    8580:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    8582:	2806      	cmp	r0, #6
    8584:	d810      	bhi.n	85a8 <set+0x98>
    8586:	4b29      	ldr	r3, [pc, #164]	; (862c <set+0x11c>)
    8588:	4927      	ldr	r1, [pc, #156]	; (8628 <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
    858a:	482d      	ldr	r0, [pc, #180]	; (8640 <set+0x130>)
    858c:	1ac9      	subs	r1, r1, r3
    858e:	08c9      	lsrs	r1, r1, #3
    8590:	0189      	lsls	r1, r1, #6
    8592:	f041 0101 	orr.w	r1, r1, #1
    8596:	f01a fb35 	bl	22c04 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    859a:	2207      	movs	r2, #7
    859c:	4621      	mov	r1, r4
    859e:	4628      	mov	r0, r5
    85a0:	f01c fb81 	bl	24ca6 <memset>
			bt_dev.id_count = 0U;
    85a4:	71ec      	strb	r4, [r5, #7]
    85a6:	e7e3      	b.n	8570 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    85a8:	2307      	movs	r3, #7
    85aa:	fbb0 f0f3 	udiv	r0, r0, r3
    85ae:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    85b0:	e7de      	b.n	8570 <set+0x60>
	if (!strncmp(name, "name", len)) {
    85b2:	4924      	ldr	r1, [pc, #144]	; (8644 <set+0x134>)
    85b4:	4642      	mov	r2, r8
    85b6:	4628      	mov	r0, r5
    85b8:	f01c fb28 	bl	24c0c <strncmp>
    85bc:	4604      	mov	r4, r0
    85be:	b9a8      	cbnz	r0, 85ec <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    85c0:	4921      	ldr	r1, [pc, #132]	; (8648 <set+0x138>)
    85c2:	2241      	movs	r2, #65	; 0x41
    85c4:	4638      	mov	r0, r7
    85c6:	47b0      	blx	r6
		if (len < 0) {
    85c8:	1e01      	subs	r1, r0, #0
    85ca:	da0a      	bge.n	85e2 <set+0xd2>
    85cc:	4b17      	ldr	r3, [pc, #92]	; (862c <set+0x11c>)
    85ce:	4a16      	ldr	r2, [pc, #88]	; (8628 <set+0x118>)
			BT_ERR("Failed to read device name from storage"
    85d0:	481e      	ldr	r0, [pc, #120]	; (864c <set+0x13c>)
    85d2:	1ad2      	subs	r2, r2, r3
    85d4:	08d2      	lsrs	r2, r2, #3
    85d6:	0192      	lsls	r2, r2, #6
    85d8:	f042 0201 	orr.w	r2, r2, #1
    85dc:	f01a fb1f 	bl	22c1e <log_1>
    85e0:	e7c6      	b.n	8570 <set+0x60>
			bt_dev.name[len] = '\0';
    85e2:	481b      	ldr	r0, [pc, #108]	; (8650 <set+0x140>)
    85e4:	4408      	add	r0, r1
    85e6:	f880 4160 	strb.w	r4, [r0, #352]	; 0x160
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    85ea:	e7c1      	b.n	8570 <set+0x60>
	if (!strncmp(name, "irk", len)) {
    85ec:	4919      	ldr	r1, [pc, #100]	; (8654 <set+0x144>)
    85ee:	4642      	mov	r2, r8
    85f0:	4628      	mov	r0, r5
    85f2:	f01c fb0b 	bl	24c0c <strncmp>
    85f6:	4604      	mov	r4, r0
    85f8:	2800      	cmp	r0, #0
    85fa:	d199      	bne.n	8530 <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    85fc:	4916      	ldr	r1, [pc, #88]	; (8658 <set+0x148>)
    85fe:	2210      	movs	r2, #16
    8600:	4638      	mov	r0, r7
    8602:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    8604:	280f      	cmp	r0, #15
    8606:	d8b3      	bhi.n	8570 <set+0x60>
    8608:	4b08      	ldr	r3, [pc, #32]	; (862c <set+0x11c>)
    860a:	4907      	ldr	r1, [pc, #28]	; (8628 <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
    860c:	4813      	ldr	r0, [pc, #76]	; (865c <set+0x14c>)
    860e:	1ac9      	subs	r1, r1, r3
    8610:	08c9      	lsrs	r1, r1, #3
    8612:	0189      	lsls	r1, r1, #6
    8614:	f041 0101 	orr.w	r1, r1, #1
    8618:	f01a faf4 	bl	22c04 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    861c:	2210      	movs	r2, #16
    861e:	4621      	mov	r1, r4
    8620:	480d      	ldr	r0, [pc, #52]	; (8658 <set+0x148>)
    8622:	f01c fb40 	bl	24ca6 <memset>
    8626:	e7a3      	b.n	8570 <set+0x60>
    8628:	000282a4 	.word	0x000282a4
    862c:	000281b4 	.word	0x000281b4
    8630:	0002c7db 	.word	0x0002c7db
    8634:	00029dbb 	.word	0x00029dbb
    8638:	20000094 	.word	0x20000094
    863c:	0002c7fc 	.word	0x0002c7fc
    8640:	0002c820 	.word	0x0002c820
    8644:	0002d1d3 	.word	0x0002d1d3
    8648:	20000160 	.word	0x20000160
    864c:	0002c845 	.word	0x0002c845
    8650:	20000000 	.word	0x20000000
    8654:	0002c7bb 	.word	0x0002c7bb
    8658:	20000120 	.word	0x20000120
    865c:	0002c877 	.word	0x0002c877

00008660 <bt_settings_encode_key>:
{
    8660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8664:	b088      	sub	sp, #32
		snprintk(path, path_size,
    8666:	799c      	ldrb	r4, [r3, #6]
{
    8668:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    866c:	795d      	ldrb	r5, [r3, #5]
    866e:	791e      	ldrb	r6, [r3, #4]
    8670:	78df      	ldrb	r7, [r3, #3]
    8672:	f893 c002 	ldrb.w	ip, [r3, #2]
    8676:	f893 e001 	ldrb.w	lr, [r3, #1]
    867a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    867c:	f1b8 0f00 	cmp.w	r8, #0
    8680:	d00e      	beq.n	86a0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    8682:	e9cd 3806 	strd	r3, r8, [sp, #24]
    8686:	e9cd ce04 	strd	ip, lr, [sp, #16]
    868a:	4613      	mov	r3, r2
    868c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    8690:	e9cd 4500 	strd	r4, r5, [sp]
    8694:	4a08      	ldr	r2, [pc, #32]	; (86b8 <bt_settings_encode_key+0x58>)
    8696:	f019 fe2c 	bl	222f2 <snprintk>
}
    869a:	b008      	add	sp, #32
    869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    86a0:	e9cd e305 	strd	lr, r3, [sp, #20]
    86a4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    86a8:	4613      	mov	r3, r2
    86aa:	e9cd 5601 	strd	r5, r6, [sp, #4]
    86ae:	4a03      	ldr	r2, [pc, #12]	; (86bc <bt_settings_encode_key+0x5c>)
    86b0:	9400      	str	r4, [sp, #0]
    86b2:	f019 fe1e 	bl	222f2 <snprintk>
}
    86b6:	e7f0      	b.n	869a <bt_settings_encode_key+0x3a>
    86b8:	0002c895 	.word	0x0002c895
    86bc:	0002c8b9 	.word	0x0002c8b9

000086c0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    86c0:	4909      	ldr	r1, [pc, #36]	; (86e8 <bt_settings_save_id+0x28>)
    86c2:	f3bf 8f5b 	dmb	ish
    86c6:	e851 3f00 	ldrex	r3, [r1]
    86ca:	f043 0201 	orr.w	r2, r3, #1
    86ce:	e841 2000 	strex	r0, r2, [r1]
    86d2:	2800      	cmp	r0, #0
    86d4:	d1f7      	bne.n	86c6 <bt_settings_save_id+0x6>
    86d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    86da:	07db      	lsls	r3, r3, #31
    86dc:	d403      	bmi.n	86e6 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    86de:	4803      	ldr	r0, [pc, #12]	; (86ec <bt_settings_save_id+0x2c>)
    86e0:	3908      	subs	r1, #8
    86e2:	f01f b81e 	b.w	27722 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    86e6:	4770      	bx	lr
    86e8:	2000033c 	.word	0x2000033c
    86ec:	2000b0f0 	.word	0x2000b0f0

000086f0 <commit>:

static int commit(void)
{
    86f0:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    86f2:	4c1d      	ldr	r4, [pc, #116]	; (8768 <commit+0x78>)
    86f4:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    86f8:	b913      	cbnz	r3, 8700 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    86fa:	481c      	ldr	r0, [pc, #112]	; (876c <commit+0x7c>)
    86fc:	f001 ffc4 	bl	a688 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    8700:	79e3      	ldrb	r3, [r4, #7]
    8702:	b99b      	cbnz	r3, 872c <commit+0x3c>
		bt_setup_public_id_addr();
    8704:	f002 f87a 	bl	a7fc <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    8708:	79e3      	ldrb	r3, [r4, #7]
    870a:	b97b      	cbnz	r3, 872c <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    870c:	f002 f95c 	bl	a9c8 <bt_setup_random_id_addr>
		if (err) {
    8710:	4604      	mov	r4, r0
    8712:	b158      	cbz	r0, 872c <commit+0x3c>
    8714:	4916      	ldr	r1, [pc, #88]	; (8770 <commit+0x80>)
    8716:	4b17      	ldr	r3, [pc, #92]	; (8774 <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    8718:	4817      	ldr	r0, [pc, #92]	; (8778 <commit+0x88>)
    871a:	1ac9      	subs	r1, r1, r3
    871c:	08c9      	lsrs	r1, r1, #3
    871e:	0189      	lsls	r1, r1, #6
    8720:	f041 0101 	orr.w	r1, r1, #1
    8724:	f01a fa6e 	bl	22c04 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    8728:	4620      	mov	r0, r4
    872a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    872c:	4d13      	ldr	r5, [pc, #76]	; (877c <commit+0x8c>)
    872e:	f3bf 8f5b 	dmb	ish
    8732:	682b      	ldr	r3, [r5, #0]
    8734:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8738:	079b      	lsls	r3, r3, #30
    873a:	d401      	bmi.n	8740 <commit+0x50>
		bt_finalize_init();
    873c:	f001 feb2 	bl	a4a4 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8740:	f3bf 8f5b 	dmb	ish
    8744:	e855 4f00 	ldrex	r4, [r5]
    8748:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    874c:	e845 3200 	strex	r2, r3, [r5]
    8750:	2a00      	cmp	r2, #0
    8752:	d1f7      	bne.n	8744 <commit+0x54>
    8754:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    8758:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    875c:	d0e4      	beq.n	8728 <commit+0x38>
		bt_settings_save_id();
    875e:	f7ff ffaf 	bl	86c0 <bt_settings_save_id>
	return 0;
    8762:	2400      	movs	r4, #0
    8764:	e7e0      	b.n	8728 <commit+0x38>
    8766:	bf00      	nop
    8768:	20000000 	.word	0x20000000
    876c:	0002c8da 	.word	0x0002c8da
    8770:	000282a4 	.word	0x000282a4
    8774:	000281b4 	.word	0x000281b4
    8778:	0002c8f2 	.word	0x0002c8f2
    877c:	20000094 	.word	0x20000094

00008780 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    8780:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    8782:	f7fe f993 	bl	6aac <settings_subsys_init>
	if (err) {
    8786:	4604      	mov	r4, r0
    8788:	b150      	cbz	r0, 87a0 <bt_settings_init+0x20>
    878a:	4a06      	ldr	r2, [pc, #24]	; (87a4 <bt_settings_init+0x24>)
    878c:	4b06      	ldr	r3, [pc, #24]	; (87a8 <bt_settings_init+0x28>)
    878e:	1ad2      	subs	r2, r2, r3
    8790:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    8792:	0192      	lsls	r2, r2, #6
    8794:	4601      	mov	r1, r0
    8796:	f042 0201 	orr.w	r2, r2, #1
    879a:	4804      	ldr	r0, [pc, #16]	; (87ac <bt_settings_init+0x2c>)
    879c:	f01a fa3f 	bl	22c1e <log_1>
		return err;
	}

	return 0;
}
    87a0:	4620      	mov	r0, r4
    87a2:	bd10      	pop	{r4, pc}
    87a4:	000282a4 	.word	0x000282a4
    87a8:	000281b4 	.word	0x000281b4
    87ac:	0002c916 	.word	0x0002c916

000087b0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    87b0:	b430      	push	{r4, r5}
    87b2:	4603      	mov	r3, r0
    87b4:	4608      	mov	r0, r1
	switch (src->type) {
    87b6:	781a      	ldrb	r2, [r3, #0]
    87b8:	2a01      	cmp	r2, #1
    87ba:	d013      	beq.n	87e4 <uuid_to_uuid128+0x34>
    87bc:	2a02      	cmp	r2, #2
    87be:	d026      	beq.n	880e <uuid_to_uuid128+0x5e>
    87c0:	b972      	cbnz	r2, 87e0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    87c2:	4a15      	ldr	r2, [pc, #84]	; (8818 <uuid_to_uuid128+0x68>)
    87c4:	f102 0410 	add.w	r4, r2, #16
    87c8:	f852 5b04 	ldr.w	r5, [r2], #4
    87cc:	f841 5b04 	str.w	r5, [r1], #4
    87d0:	42a2      	cmp	r2, r4
    87d2:	d1f9      	bne.n	87c8 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    87d4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    87d6:	7812      	ldrb	r2, [r2, #0]
    87d8:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    87da:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    87dc:	0a1b      	lsrs	r3, r3, #8
    87de:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    87e0:	bc30      	pop	{r4, r5}
    87e2:	4770      	bx	lr
		*dst = uuid128_base;
    87e4:	4a0c      	ldr	r2, [pc, #48]	; (8818 <uuid_to_uuid128+0x68>)
    87e6:	f102 0410 	add.w	r4, r2, #16
    87ea:	f852 5b04 	ldr.w	r5, [r2], #4
    87ee:	f841 5b04 	str.w	r5, [r1], #4
    87f2:	42a2      	cmp	r2, r4
    87f4:	d1f9      	bne.n	87ea <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    87f6:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    87f8:	7812      	ldrb	r2, [r2, #0]
    87fa:	700a      	strb	r2, [r1, #0]
    87fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    8800:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    8802:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    8804:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    8806:	0a1b      	lsrs	r3, r3, #8
    8808:	7382      	strb	r2, [r0, #14]
    880a:	7403      	strb	r3, [r0, #16]
}
    880c:	e7e8      	b.n	87e0 <uuid_to_uuid128+0x30>
}
    880e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    8810:	2211      	movs	r2, #17
    8812:	4619      	mov	r1, r3
    8814:	f01c ba1c 	b.w	24c50 <memcpy>
    8818:	0002c94a 	.word	0x0002c94a

0000881c <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    881c:	b538      	push	{r3, r4, r5, lr}
    881e:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    8820:	4805      	ldr	r0, [pc, #20]	; (8838 <bt_buf_get_rx+0x1c>)
    8822:	f01e fa2d 	bl	26c80 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    8826:	4604      	mov	r4, r0
    8828:	b120      	cbz	r0, 8834 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    882a:	2100      	movs	r1, #0
    882c:	3008      	adds	r0, #8
    882e:	f01e fa46 	bl	26cbe <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8832:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8834:	4620      	mov	r0, r4
    8836:	bd38      	pop	{r3, r4, r5, pc}
    8838:	2000a1ec 	.word	0x2000a1ec

0000883c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    883c:	b570      	push	{r4, r5, r6, lr}
    883e:	4602      	mov	r2, r0
    8840:	460b      	mov	r3, r1
	__asm__ volatile(
    8842:	f04f 0120 	mov.w	r1, #32
    8846:	f3ef 8511 	mrs	r5, BASEPRI
    884a:	f381 8811 	msr	BASEPRI, r1
    884e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    8852:	480c      	ldr	r0, [pc, #48]	; (8884 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    8854:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    8856:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    885a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    885e:	f385 8811 	msr	BASEPRI, r5
    8862:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    8866:	b924      	cbnz	r4, 8872 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    8868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    886c:	2001      	movs	r0, #1
    886e:	f7ff bfd5 	b.w	881c <bt_buf_get_rx>
    8872:	2301      	movs	r3, #1
    8874:	f104 0008 	add.w	r0, r4, #8
    8878:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    887a:	81a1      	strh	r1, [r4, #12]
    887c:	f01e fa1f 	bl	26cbe <net_buf_simple_reserve>
}
    8880:	4620      	mov	r0, r4
    8882:	bd70      	pop	{r4, r5, r6, pc}
    8884:	20000000 	.word	0x20000000

00008888 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    8888:	b570      	push	{r4, r5, r6, lr}
    888a:	4604      	mov	r4, r0
	switch (evt) {
    888c:	2c0f      	cmp	r4, #15
{
    888e:	460d      	mov	r5, r1
    8890:	4610      	mov	r0, r2
    8892:	4619      	mov	r1, r3
	switch (evt) {
    8894:	d805      	bhi.n	88a2 <bt_buf_get_evt+0x1a>
    8896:	2c0d      	cmp	r4, #13
    8898:	d912      	bls.n	88c0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    889a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    889e:	f7ff bfcd 	b.w	883c <bt_buf_get_cmd_complete>
	switch (evt) {
    88a2:	2c13      	cmp	r4, #19
    88a4:	d10c      	bne.n	88c0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    88a6:	480b      	ldr	r0, [pc, #44]	; (88d4 <bt_buf_get_evt+0x4c>)
    88a8:	f01e f9ea 	bl	26c80 <net_buf_alloc_fixed>
			if (buf) {
    88ac:	4604      	mov	r4, r0
    88ae:	b128      	cbz	r0, 88bc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    88b0:	2100      	movs	r1, #0
    88b2:	3008      	adds	r0, #8
    88b4:	f01e fa03 	bl	26cbe <net_buf_simple_reserve>
    88b8:	2301      	movs	r3, #1
    88ba:	7523      	strb	r3, [r4, #20]
}
    88bc:	4620      	mov	r0, r4
    88be:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    88c0:	4602      	mov	r2, r0
    88c2:	460b      	mov	r3, r1
		if (discardable) {
    88c4:	b10d      	cbz	r5, 88ca <bt_buf_get_evt+0x42>
    88c6:	4804      	ldr	r0, [pc, #16]	; (88d8 <bt_buf_get_evt+0x50>)
    88c8:	e7ee      	b.n	88a8 <bt_buf_get_evt+0x20>
}
    88ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    88ce:	2001      	movs	r0, #1
    88d0:	f7ff bfa4 	b.w	881c <bt_buf_get_rx>
    88d4:	2000a214 	.word	0x2000a214
    88d8:	2000a174 	.word	0x2000a174

000088dc <bt_adv_foreach>:
{
    88dc:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    88de:	4801      	ldr	r0, [pc, #4]	; (88e4 <bt_adv_foreach+0x8>)
    88e0:	4718      	bx	r3
    88e2:	bf00      	nop
    88e4:	20000018 	.word	0x20000018

000088e8 <le_dhkey_complete>:
	if (dh_key_cb) {
    88e8:	4905      	ldr	r1, [pc, #20]	; (8900 <le_dhkey_complete+0x18>)
    88ea:	680b      	ldr	r3, [r1, #0]
    88ec:	b133      	cbz	r3, 88fc <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    88ee:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    88f0:	2000      	movs	r0, #0
    88f2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    88f4:	7811      	ldrb	r1, [r2, #0]
    88f6:	b901      	cbnz	r1, 88fa <le_dhkey_complete+0x12>
    88f8:	1c50      	adds	r0, r2, #1
    88fa:	4718      	bx	r3
}
    88fc:	4770      	bx	lr
    88fe:	bf00      	nop
    8900:	2000db88 	.word	0x2000db88

00008904 <ver_str>:
{
    8904:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    8906:	4d0b      	ldr	r5, [pc, #44]	; (8934 <ver_str+0x30>)
{
    8908:	4606      	mov	r6, r0
	const char * const str[] = {
    890a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    890c:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    890e:	466c      	mov	r4, sp
    8910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8916:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    891a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    891e:	2e0b      	cmp	r6, #11
		return str[ver];
    8920:	bf9b      	ittet	ls
    8922:	ab0c      	addls	r3, sp, #48	; 0x30
    8924:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    8928:	4803      	ldrhi	r0, [pc, #12]	; (8938 <ver_str+0x34>)
		return str[ver];
    892a:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    892e:	b00c      	add	sp, #48	; 0x30
    8930:	bd70      	pop	{r4, r5, r6, pc}
    8932:	bf00      	nop
    8934:	00028390 	.word	0x00028390
    8938:	0002ca4d 	.word	0x0002ca4d

0000893c <le_rpa_invalidate>:
{
    893c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    893e:	4c08      	ldr	r4, [pc, #32]	; (8960 <le_rpa_invalidate+0x24>)
    8940:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    8944:	4620      	mov	r0, r4
    8946:	f01c fb33 	bl	24fb0 <atomic_and>
    894a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    894e:	4620      	mov	r0, r4
    8950:	f01c fb2e 	bl	24fb0 <atomic_and>
}
    8954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_adv_foreach(adv_rpa_invalidate, NULL);
    8958:	4802      	ldr	r0, [pc, #8]	; (8964 <le_rpa_invalidate+0x28>)
    895a:	2100      	movs	r1, #0
    895c:	f7ff bfbe 	b.w	88dc <bt_adv_foreach>
    8960:	20000094 	.word	0x20000094
    8964:	00025097 	.word	0x00025097

00008968 <hci_data_buf_overflow>:
    8968:	4905      	ldr	r1, [pc, #20]	; (8980 <hci_data_buf_overflow+0x18>)
    896a:	4a06      	ldr	r2, [pc, #24]	; (8984 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    896c:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    896e:	4806      	ldr	r0, [pc, #24]	; (8988 <hci_data_buf_overflow+0x20>)
    8970:	1a52      	subs	r2, r2, r1
    8972:	08d2      	lsrs	r2, r2, #3
    8974:	0192      	lsls	r2, r2, #6
    8976:	7819      	ldrb	r1, [r3, #0]
    8978:	f042 0202 	orr.w	r2, r2, #2
    897c:	f01a b94f 	b.w	22c1e <log_1>
    8980:	000281b4 	.word	0x000281b4
    8984:	0002827c 	.word	0x0002827c
    8988:	0002ca55 	.word	0x0002ca55

0000898c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    898e:	4f0a      	ldr	r7, [pc, #40]	; (89b8 <id_find+0x2c>)
{
    8990:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8992:	2500      	movs	r5, #0
    8994:	79fb      	ldrb	r3, [r7, #7]
    8996:	b2ec      	uxtb	r4, r5
    8998:	42a3      	cmp	r3, r4
    899a:	d802      	bhi.n	89a2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    899c:	f06f 0401 	mvn.w	r4, #1
    89a0:	e008      	b.n	89b4 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    89a2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    89a6:	4439      	add	r1, r7
    89a8:	4630      	mov	r0, r6
    89aa:	f01c fb16 	bl	24fda <bt_addr_le_cmp>
    89ae:	3501      	adds	r5, #1
    89b0:	2800      	cmp	r0, #0
    89b2:	d1ef      	bne.n	8994 <id_find+0x8>
}
    89b4:	4620      	mov	r0, r4
    89b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89b8:	20000000 	.word	0x20000000

000089bc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    89bc:	6843      	ldr	r3, [r0, #4]
{
    89be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    89c0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    89c2:	0558      	lsls	r0, r3, #21
    89c4:	d502      	bpl.n	89cc <valid_adv_param+0x10>
		return false;
    89c6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    89c8:	b003      	add	sp, #12
    89ca:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    89cc:	6922      	ldr	r2, [r4, #16]
    89ce:	b12a      	cbz	r2, 89dc <valid_adv_param+0x20>
    89d0:	07d9      	lsls	r1, r3, #31
    89d2:	d5f8      	bpl.n	89c6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    89d4:	f003 0324 	and.w	r3, r3, #36	; 0x24
    89d8:	2b24      	cmp	r3, #36	; 0x24
    89da:	d0f4      	beq.n	89c6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    89dc:	4d1a      	ldr	r5, [pc, #104]	; (8a48 <valid_adv_param+0x8c>)
    89de:	7820      	ldrb	r0, [r4, #0]
    89e0:	79eb      	ldrb	r3, [r5, #7]
    89e2:	4283      	cmp	r3, r0
    89e4:	d9ef      	bls.n	89c6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    89e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    89ea:	2300      	movs	r3, #0
    89ec:	4669      	mov	r1, sp
    89ee:	4428      	add	r0, r5
    89f0:	9300      	str	r3, [sp, #0]
    89f2:	f8cd 3003 	str.w	r3, [sp, #3]
    89f6:	f01c faf0 	bl	24fda <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    89fa:	2800      	cmp	r0, #0
    89fc:	d0e3      	beq.n	89c6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    89fe:	6860      	ldr	r0, [r4, #4]
    8a00:	07c2      	lsls	r2, r0, #31
    8a02:	d406      	bmi.n	8a12 <valid_adv_param+0x56>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8a04:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    8a08:	2b08      	cmp	r3, #8
    8a0a:	d802      	bhi.n	8a12 <valid_adv_param+0x56>
    8a0c:	68a3      	ldr	r3, [r4, #8]
    8a0e:	2b9f      	cmp	r3, #159	; 0x9f
    8a10:	d9d9      	bls.n	89c6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    8a12:	f010 0f30 	tst.w	r0, #48	; 0x30
    8a16:	d002      	beq.n	8a1e <valid_adv_param+0x62>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    8a18:	6923      	ldr	r3, [r4, #16]
    8a1a:	2b00      	cmp	r3, #0
    8a1c:	d0d3      	beq.n	89c6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    8a1e:	06c3      	lsls	r3, r0, #27
    8a20:	d401      	bmi.n	8a26 <valid_adv_param+0x6a>
    8a22:	6923      	ldr	r3, [r4, #16]
    8a24:	b943      	cbnz	r3, 8a38 <valid_adv_param+0x7c>
		if (param->interval_min > param->interval_max ||
    8a26:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8a2a:	429a      	cmp	r2, r3
    8a2c:	d8cb      	bhi.n	89c6 <valid_adv_param+0xa>
    8a2e:	2a1f      	cmp	r2, #31
    8a30:	d9c9      	bls.n	89c6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    8a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    8a36:	d8c6      	bhi.n	89c6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    8a38:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8a3c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8a40:	bf18      	it	ne
    8a42:	2001      	movne	r0, #1
    8a44:	e7c0      	b.n	89c8 <valid_adv_param+0xc>
    8a46:	bf00      	nop
    8a48:	20000000 	.word	0x20000000

00008a4c <le_pkey_complete>:
{
    8a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8a4e:	6885      	ldr	r5, [r0, #8]
    8a50:	480f      	ldr	r0, [pc, #60]	; (8a90 <le_pkey_complete+0x44>)
    8a52:	f06f 0110 	mvn.w	r1, #16
    8a56:	f01c faab 	bl	24fb0 <atomic_and>
	if (!evt->status) {
    8a5a:	782b      	ldrb	r3, [r5, #0]
    8a5c:	b943      	cbnz	r3, 8a70 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    8a5e:	1c69      	adds	r1, r5, #1
    8a60:	480c      	ldr	r0, [pc, #48]	; (8a94 <le_pkey_complete+0x48>)
    8a62:	2240      	movs	r2, #64	; 0x40
    8a64:	f01c f8f4 	bl	24c50 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8a68:	4809      	ldr	r0, [pc, #36]	; (8a90 <le_pkey_complete+0x44>)
    8a6a:	2108      	movs	r1, #8
    8a6c:	f01c fabe 	bl	24fec <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8a70:	4e09      	ldr	r6, [pc, #36]	; (8a98 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    8a72:	4f08      	ldr	r7, [pc, #32]	; (8a94 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8a74:	6834      	ldr	r4, [r6, #0]
    8a76:	b90c      	cbnz	r4, 8a7c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    8a78:	6034      	str	r4, [r6, #0]
}
    8a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8a7c:	782a      	ldrb	r2, [r5, #0]
    8a7e:	6823      	ldr	r3, [r4, #0]
    8a80:	2a00      	cmp	r2, #0
    8a82:	bf0c      	ite	eq
    8a84:	4638      	moveq	r0, r7
    8a86:	2000      	movne	r0, #0
    8a88:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8a8a:	6864      	ldr	r4, [r4, #4]
    8a8c:	e7f3      	b.n	8a76 <le_pkey_complete+0x2a>
    8a8e:	bf00      	nop
    8a90:	20000094 	.word	0x20000094
    8a94:	2000fac7 	.word	0x2000fac7
    8a98:	2000db8c 	.word	0x2000db8c

00008a9c <unpair>:
{
    8a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8aa0:	4606      	mov	r6, r0
    8aa2:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
    8aa4:	f002 feee 	bl	b884 <bt_conn_lookup_addr_le>
	if (conn) {
    8aa8:	4604      	mov	r4, r0
    8aaa:	b9b0      	cbnz	r0, 8ada <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
    8aac:	4639      	mov	r1, r7
    8aae:	4630      	mov	r0, r6
    8ab0:	f007 fd70 	bl	10594 <bt_keys_find_addr>
		if (keys) {
    8ab4:	4605      	mov	r5, r0
    8ab6:	b110      	cbz	r0, 8abe <unpair+0x22>
			bt_keys_clear(keys);
    8ab8:	4628      	mov	r0, r5
    8aba:	f007 fd8f 	bl	105dc <bt_keys_clear>
	bt_gatt_clear(id, addr);
    8abe:	4639      	mov	r1, r7
    8ac0:	4630      	mov	r0, r6
    8ac2:	f005 fcf5 	bl	e4b0 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
    8ac6:	4b10      	ldr	r3, [pc, #64]	; (8b08 <unpair+0x6c>)
    8ac8:	681b      	ldr	r3, [r3, #0]
    8aca:	b1db      	cbz	r3, 8b04 <unpair+0x68>
    8acc:	6a1b      	ldr	r3, [r3, #32]
    8ace:	b1cb      	cbz	r3, 8b04 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
    8ad0:	4639      	mov	r1, r7
    8ad2:	4630      	mov	r0, r6
}
    8ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
    8ad8:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
    8ada:	7883      	ldrb	r3, [r0, #2]
    8adc:	2b01      	cmp	r3, #1
    8ade:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
    8ae2:	bf04      	itt	eq
    8ae4:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
    8ae8:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8aec:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
    8af0:	bf18      	it	ne
    8af2:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8af4:	f01c fd1f 	bl	25536 <bt_conn_disconnect>
		bt_conn_unref(conn);
    8af8:	4620      	mov	r0, r4
    8afa:	f01c fce1 	bl	254c0 <bt_conn_unref>
		if (!keys) {
    8afe:	2d00      	cmp	r5, #0
    8b00:	d1da      	bne.n	8ab8 <unpair+0x1c>
    8b02:	e7d3      	b.n	8aac <unpair+0x10>
}
    8b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b08:	2000db94 	.word	0x2000db94

00008b0c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8b0c:	6883      	ldr	r3, [r0, #8]
{
    8b0e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8b10:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    8b12:	4620      	mov	r0, r4
    8b14:	f002 fdc2 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    8b18:	b960      	cbnz	r0, 8b34 <le_data_len_change+0x28>
    8b1a:	4a08      	ldr	r2, [pc, #32]	; (8b3c <le_data_len_change+0x30>)
    8b1c:	4b08      	ldr	r3, [pc, #32]	; (8b40 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8b1e:	4809      	ldr	r0, [pc, #36]	; (8b44 <le_data_len_change+0x38>)
    8b20:	1ad2      	subs	r2, r2, r3
    8b22:	08d2      	lsrs	r2, r2, #3
    8b24:	0192      	lsls	r2, r2, #6
    8b26:	4621      	mov	r1, r4
    8b28:	f042 0201 	orr.w	r2, r2, #1
}
    8b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8b30:	f01a b875 	b.w	22c1e <log_1>
}
    8b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    8b38:	f01c bcc2 	b.w	254c0 <bt_conn_unref>
    8b3c:	0002827c 	.word	0x0002827c
    8b40:	000281b4 	.word	0x000281b4
    8b44:	0002ca7d 	.word	0x0002ca7d

00008b48 <hci_disconn_complete_prio>:
{
    8b48:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8b4a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    8b4c:	781a      	ldrb	r2, [r3, #0]
    8b4e:	b9da      	cbnz	r2, 8b88 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8b50:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8b54:	4628      	mov	r0, r5
    8b56:	f002 fda1 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    8b5a:	4604      	mov	r4, r0
    8b5c:	b960      	cbnz	r0, 8b78 <hci_disconn_complete_prio+0x30>
    8b5e:	4b0b      	ldr	r3, [pc, #44]	; (8b8c <hci_disconn_complete_prio+0x44>)
    8b60:	4a0b      	ldr	r2, [pc, #44]	; (8b90 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8b62:	480c      	ldr	r0, [pc, #48]	; (8b94 <hci_disconn_complete_prio+0x4c>)
    8b64:	1ad2      	subs	r2, r2, r3
    8b66:	08d2      	lsrs	r2, r2, #3
    8b68:	0192      	lsls	r2, r2, #6
    8b6a:	4629      	mov	r1, r5
    8b6c:	f042 0201 	orr.w	r2, r2, #1
}
    8b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8b74:	f01a b853 	b.w	22c1e <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8b78:	2101      	movs	r1, #1
    8b7a:	f002 fd97 	bl	b6ac <bt_conn_set_state>
	bt_conn_unref(conn);
    8b7e:	4620      	mov	r0, r4
}
    8b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8b84:	f01c bc9c 	b.w	254c0 <bt_conn_unref>
}
    8b88:	bd38      	pop	{r3, r4, r5, pc}
    8b8a:	bf00      	nop
    8b8c:	000281b4 	.word	0x000281b4
    8b90:	0002827c 	.word	0x0002827c
    8b94:	0002caa1 	.word	0x0002caa1

00008b98 <hci_disconn_complete>:
{
    8b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8b9a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8b9c:	7835      	ldrb	r5, [r6, #0]
    8b9e:	b9f5      	cbnz	r5, 8bde <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8ba0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8ba4:	4638      	mov	r0, r7
    8ba6:	f002 fd79 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    8baa:	4604      	mov	r4, r0
    8bac:	b960      	cbnz	r0, 8bc8 <hci_disconn_complete+0x30>
    8bae:	4b0c      	ldr	r3, [pc, #48]	; (8be0 <hci_disconn_complete+0x48>)
    8bb0:	4a0c      	ldr	r2, [pc, #48]	; (8be4 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8bb2:	480d      	ldr	r0, [pc, #52]	; (8be8 <hci_disconn_complete+0x50>)
    8bb4:	1ad2      	subs	r2, r2, r3
    8bb6:	08d2      	lsrs	r2, r2, #3
    8bb8:	0192      	lsls	r2, r2, #6
    8bba:	4639      	mov	r1, r7
    8bbc:	f042 0201 	orr.w	r2, r2, #1
}
    8bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8bc4:	f01a b82b 	b.w	22c1e <log_1>
	conn->err = evt->reason;
    8bc8:	78f3      	ldrb	r3, [r6, #3]
    8bca:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8bcc:	4629      	mov	r1, r5
    8bce:	f002 fd6d 	bl	b6ac <bt_conn_set_state>
	conn->handle = 0U;
    8bd2:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    8bd4:	4620      	mov	r0, r4
}
    8bd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8bda:	f01c bc71 	b.w	254c0 <bt_conn_unref>
}
    8bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8be0:	000281b4 	.word	0x000281b4
    8be4:	0002827c 	.word	0x0002827c
    8be8:	0002caa1 	.word	0x0002caa1

00008bec <hci_hardware_error>:
{
    8bec:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    8bee:	2101      	movs	r1, #1
    8bf0:	3008      	adds	r0, #8
    8bf2:	f01e f8c2 	bl	26d7a <net_buf_simple_pull_mem>
    8bf6:	4b06      	ldr	r3, [pc, #24]	; (8c10 <hci_hardware_error+0x24>)
    8bf8:	4a06      	ldr	r2, [pc, #24]	; (8c14 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8bfa:	7801      	ldrb	r1, [r0, #0]
    8bfc:	4806      	ldr	r0, [pc, #24]	; (8c18 <hci_hardware_error+0x2c>)
    8bfe:	1ad2      	subs	r2, r2, r3
    8c00:	08d2      	lsrs	r2, r2, #3
    8c02:	0192      	lsls	r2, r2, #6
}
    8c04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8c08:	f042 0201 	orr.w	r2, r2, #1
    8c0c:	f01a b807 	b.w	22c1e <log_1>
    8c10:	000281b4 	.word	0x000281b4
    8c14:	0002827c 	.word	0x0002827c
    8c18:	0002cac7 	.word	0x0002cac7

00008c1c <hci_vendor_event>:
{
    8c1c:	b510      	push	{r4, lr}
    8c1e:	4a0a      	ldr	r2, [pc, #40]	; (8c48 <hci_vendor_event+0x2c>)
    8c20:	4c0a      	ldr	r4, [pc, #40]	; (8c4c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    8c22:	8981      	ldrh	r1, [r0, #12]
    8c24:	6880      	ldr	r0, [r0, #8]
    8c26:	1aa4      	subs	r4, r4, r2
    8c28:	f7ff fa4a 	bl	80c0 <bt_hex_real>
    8c2c:	f7fc fcd6 	bl	55dc <log_strdup>
    8c30:	08e4      	lsrs	r4, r4, #3
    8c32:	01a4      	lsls	r4, r4, #6
    8c34:	f044 0402 	orr.w	r4, r4, #2
    8c38:	4601      	mov	r1, r0
    8c3a:	4622      	mov	r2, r4
    8c3c:	4804      	ldr	r0, [pc, #16]	; (8c50 <hci_vendor_event+0x34>)
}
    8c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    8c42:	f019 bfec 	b.w	22c1e <log_1>
    8c46:	bf00      	nop
    8c48:	000281b4 	.word	0x000281b4
    8c4c:	0002827c 	.word	0x0002827c
    8c50:	0002cae9 	.word	0x0002cae9

00008c54 <le_conn_update_complete>:
{
    8c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8c56:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8c58:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8c5c:	4630      	mov	r0, r6
    8c5e:	f002 fd1d 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    8c62:	4604      	mov	r4, r0
    8c64:	b968      	cbnz	r0, 8c82 <le_conn_update_complete+0x2e>
    8c66:	4b25      	ldr	r3, [pc, #148]	; (8cfc <le_conn_update_complete+0xa8>)
    8c68:	4a25      	ldr	r2, [pc, #148]	; (8d00 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c6a:	4826      	ldr	r0, [pc, #152]	; (8d04 <le_conn_update_complete+0xb0>)
    8c6c:	1ad2      	subs	r2, r2, r3
    8c6e:	08d2      	lsrs	r2, r2, #3
    8c70:	0192      	lsls	r2, r2, #6
    8c72:	f042 0201 	orr.w	r2, r2, #1
    8c76:	4631      	mov	r1, r6
}
    8c78:	b002      	add	sp, #8
    8c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c7e:	f019 bfce 	b.w	22c1e <log_1>
	if (!evt->status) {
    8c82:	782b      	ldrb	r3, [r5, #0]
    8c84:	b9cb      	cbnz	r3, 8cba <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8c86:	792a      	ldrb	r2, [r5, #4]
    8c88:	78eb      	ldrb	r3, [r5, #3]
    8c8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8c8e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8c92:	79aa      	ldrb	r2, [r5, #6]
    8c94:	796b      	ldrb	r3, [r5, #5]
    8c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8c9a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8c9e:	79eb      	ldrb	r3, [r5, #7]
    8ca0:	7a2a      	ldrb	r2, [r5, #8]
    8ca2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8ca6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8caa:	f002 fae1 	bl	b270 <notify_le_param_updated>
	bt_conn_unref(conn);
    8cae:	4620      	mov	r0, r4
}
    8cb0:	b002      	add	sp, #8
    8cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8cb6:	f01c bc03 	b.w	254c0 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8cba:	2b1a      	cmp	r3, #26
    8cbc:	d1f7      	bne.n	8cae <le_conn_update_complete+0x5a>
    8cbe:	78c3      	ldrb	r3, [r0, #3]
    8cc0:	2b01      	cmp	r3, #1
    8cc2:	d1f4      	bne.n	8cae <le_conn_update_complete+0x5a>
		   !atomic_test_and_set_bit(conn->flags,
    8cc4:	210a      	movs	r1, #10
    8cc6:	3004      	adds	r0, #4
    8cc8:	f01c f99f 	bl	2500a <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    8ccc:	2800      	cmp	r0, #0
    8cce:	d1ee      	bne.n	8cae <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    8cd0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    8cd4:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    8cd8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    8cdc:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    8ce0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    8ce4:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8ce8:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    8cea:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    8cee:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    8cf2:	4620      	mov	r0, r4
    8cf4:	f003 f944 	bl	bf80 <bt_l2cap_update_conn_param>
    8cf8:	e7d9      	b.n	8cae <le_conn_update_complete+0x5a>
    8cfa:	bf00      	nop
    8cfc:	000281b4 	.word	0x000281b4
    8d00:	0002827c 	.word	0x0002827c
    8d04:	0002ca7d 	.word	0x0002ca7d

00008d08 <id_create>:
{
    8d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8d0c:	4f28      	ldr	r7, [pc, #160]	; (8db0 <id_create+0xa8>)
    8d0e:	ebc0 08c0 	rsb	r8, r0, r0, lsl #3
{
    8d12:	b086      	sub	sp, #24
    8d14:	4605      	mov	r5, r0
    8d16:	4614      	mov	r4, r2
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8d18:	44b8      	add	r8, r7
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8d1a:	460e      	mov	r6, r1
    8d1c:	b351      	cbz	r1, 8d74 <id_create+0x6c>
    8d1e:	2300      	movs	r3, #0
    8d20:	4669      	mov	r1, sp
    8d22:	4630      	mov	r0, r6
    8d24:	9300      	str	r3, [sp, #0]
    8d26:	f8cd 3003 	str.w	r3, [sp, #3]
    8d2a:	f01c f956 	bl	24fda <bt_addr_le_cmp>
    8d2e:	b308      	cbz	r0, 8d74 <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8d30:	4631      	mov	r1, r6
    8d32:	4640      	mov	r0, r8
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8d34:	f01c f957 	bl	24fe6 <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    8d38:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
    8d3a:	3512      	adds	r5, #18
		uint8_t zero_irk[16] = { 0 };
    8d3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8d40:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
    8d44:	eb07 1505 	add.w	r5, r7, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
    8d48:	b32c      	cbz	r4, 8d96 <id_create+0x8e>
    8d4a:	2210      	movs	r2, #16
    8d4c:	a902      	add	r1, sp, #8
    8d4e:	4620      	mov	r0, r4
    8d50:	f01b ff6d 	bl	24c2e <memcmp>
    8d54:	b1f8      	cbz	r0, 8d96 <id_create+0x8e>
			memcpy(&bt_dev.irk[id], irk, 16);
    8d56:	2210      	movs	r2, #16
    8d58:	4621      	mov	r1, r4
    8d5a:	4628      	mov	r0, r5
				memcpy(irk, &bt_dev.irk[id], 16);
    8d5c:	f01b ff78 	bl	24c50 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8d60:	4814      	ldr	r0, [pc, #80]	; (8db4 <id_create+0xac>)
    8d62:	f01c f934 	bl	24fce <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8d66:	0783      	lsls	r3, r0, #30
    8d68:	d51f      	bpl.n	8daa <id_create+0xa2>
}
    8d6a:	b006      	add	sp, #24
    8d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_settings_save_id();
    8d70:	f7ff bca6 	b.w	86c0 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    8d74:	a802      	add	r0, sp, #8
    8d76:	f01c f8d4 	bl	24f22 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8d7a:	a802      	add	r0, sp, #8
    8d7c:	f7ff fe06 	bl	898c <id_find>
    8d80:	2800      	cmp	r0, #0
    8d82:	daf7      	bge.n	8d74 <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8d84:	a902      	add	r1, sp, #8
    8d86:	4640      	mov	r0, r8
    8d88:	f01c f92d 	bl	24fe6 <bt_addr_le_copy>
		if (addr) {
    8d8c:	2e00      	cmp	r6, #0
    8d8e:	d0d3      	beq.n	8d38 <id_create+0x30>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8d90:	4641      	mov	r1, r8
    8d92:	4630      	mov	r0, r6
    8d94:	e7ce      	b.n	8d34 <id_create+0x2c>
			bt_rand(&bt_dev.irk[id], 16);
    8d96:	2110      	movs	r1, #16
    8d98:	4628      	mov	r0, r5
    8d9a:	f00a fc7b 	bl	13694 <bt_rand>
			if (irk) {
    8d9e:	2c00      	cmp	r4, #0
    8da0:	d0de      	beq.n	8d60 <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
    8da2:	2210      	movs	r2, #16
    8da4:	4629      	mov	r1, r5
    8da6:	4620      	mov	r0, r4
    8da8:	e7d8      	b.n	8d5c <id_create+0x54>
}
    8daa:	b006      	add	sp, #24
    8dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8db0:	20000000 	.word	0x20000000
    8db4:	20000094 	.word	0x20000094

00008db8 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    8db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dba:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    8dbc:	7803      	ldrb	r3, [r0, #0]
    8dbe:	f88d 3004 	strb.w	r3, [sp, #4]
{
    8dc2:	4605      	mov	r5, r0
	struct adv_id_check_data check_data = {
    8dc4:	2300      	movs	r3, #0
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    8dc6:	4824      	ldr	r0, [pc, #144]	; (8e58 <le_adv_start_add_conn+0xa0>)
	struct adv_id_check_data check_data = {
    8dc8:	f88d 3005 	strb.w	r3, [sp, #5]
{
    8dcc:	460f      	mov	r7, r1
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    8dce:	a901      	add	r1, sp, #4
    8dd0:	f7ff fd84 	bl	88dc <bt_adv_foreach>
	if (check_data.adv_enabled) {
    8dd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8dd8:	bba3      	cbnz	r3, 8e44 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    8dda:	462e      	mov	r6, r5
    8ddc:	4a1f      	ldr	r2, [pc, #124]	; (8e5c <le_adv_start_add_conn+0xa4>)
    8dde:	f816 1b09 	ldrb.w	r1, [r6], #9
    8de2:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    8de6:	4630      	mov	r0, r6
    8de8:	a902      	add	r1, sp, #8
    8dea:	9302      	str	r3, [sp, #8]
    8dec:	f8cd 300b 	str.w	r3, [sp, #11]
    8df0:	f01c f8f3 	bl	24fda <bt_addr_le_cmp>
    8df4:	782a      	ldrb	r2, [r5, #0]
    8df6:	4604      	mov	r4, r0
    8df8:	b9b0      	cbnz	r0, 8e28 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    8dfa:	4b19      	ldr	r3, [pc, #100]	; (8e60 <le_adv_start_add_conn+0xa8>)
    8dfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8dfe:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    8e00:	9004      	str	r0, [sp, #16]
    8e02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    8e06:	f8ad 1014 	strh.w	r1, [sp, #20]
    8e0a:	4610      	mov	r0, r2
    8e0c:	a904      	add	r1, sp, #16
    8e0e:	f88d 3016 	strb.w	r3, [sp, #22]
    8e12:	f002 fc15 	bl	b640 <bt_conn_add_le>
		if (!conn) {
    8e16:	4605      	mov	r5, r0
    8e18:	b1d0      	cbz	r0, 8e50 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8e1a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8e1c:	f002 fc46 	bl	b6ac <bt_conn_set_state>
	*out_conn = conn;
    8e20:	603d      	str	r5, [r7, #0]
	return 0;
}
    8e22:	4620      	mov	r0, r4
    8e24:	b007      	add	sp, #28
    8e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8e28:	4631      	mov	r1, r6
    8e2a:	4610      	mov	r0, r2
    8e2c:	f002 fd50 	bl	b8d0 <bt_conn_exists_le>
    8e30:	4604      	mov	r4, r0
    8e32:	b950      	cbnz	r0, 8e4a <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    8e34:	7828      	ldrb	r0, [r5, #0]
    8e36:	4631      	mov	r1, r6
    8e38:	f002 fc02 	bl	b640 <bt_conn_add_le>
	if (!conn) {
    8e3c:	4605      	mov	r5, r0
    8e3e:	b138      	cbz	r0, 8e50 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8e40:	2105      	movs	r1, #5
    8e42:	e7eb      	b.n	8e1c <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    8e44:	f06f 0422 	mvn.w	r4, #34	; 0x22
    8e48:	e7eb      	b.n	8e22 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    8e4a:	f06f 0415 	mvn.w	r4, #21
    8e4e:	e7e8      	b.n	8e22 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    8e50:	f06f 040b 	mvn.w	r4, #11
    8e54:	e7e5      	b.n	8e22 <le_adv_start_add_conn+0x6a>
    8e56:	bf00      	nop
    8e58:	0002506d 	.word	0x0002506d
    8e5c:	20000000 	.word	0x20000000
    8e60:	00028390 	.word	0x00028390

00008e64 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8e64:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8e66:	4c0d      	ldr	r4, [pc, #52]	; (8e9c <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8e68:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8e6a:	2205      	movs	r2, #5
    8e6c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    8e70:	f002 fd54 	bl	b91c <bt_conn_lookup_state_le>
		if (!conn) {
    8e74:	b978      	cbnz	r0, 8e96 <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    8e76:	4b0a      	ldr	r3, [pc, #40]	; (8ea0 <find_pending_connect.part.0+0x3c>)
    8e78:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8e7a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    8e7c:	9000      	str	r0, [sp, #0]
    8e7e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    8e82:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8e86:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    8e8a:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8e8e:	2204      	movs	r2, #4
    8e90:	4669      	mov	r1, sp
    8e92:	f002 fd43 	bl	b91c <bt_conn_lookup_state_le>
}
    8e96:	b002      	add	sp, #8
    8e98:	bd10      	pop	{r4, pc}
    8e9a:	bf00      	nop
    8e9c:	20000000 	.word	0x20000000
    8ea0:	00028390 	.word	0x00028390

00008ea4 <handle_event>:
{
    8ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8ea6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8eaa:	4605      	mov	r5, r0
    8eac:	4608      	mov	r0, r1
		if (handler->event != event) {
    8eae:	7811      	ldrb	r1, [r2, #0]
    8eb0:	42a9      	cmp	r1, r5
    8eb2:	d01a      	beq.n	8eea <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    8eb4:	3208      	adds	r2, #8
    8eb6:	4293      	cmp	r3, r2
    8eb8:	d1f9      	bne.n	8eae <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    8eba:	8986      	ldrh	r6, [r0, #12]
    8ebc:	4b16      	ldr	r3, [pc, #88]	; (8f18 <handle_event+0x74>)
    8ebe:	4c17      	ldr	r4, [pc, #92]	; (8f1c <handle_event+0x78>)
    8ec0:	6880      	ldr	r0, [r0, #8]
    8ec2:	4631      	mov	r1, r6
    8ec4:	1ae4      	subs	r4, r4, r3
    8ec6:	f7ff f8fb 	bl	80c0 <bt_hex_real>
    8eca:	f7fc fb87 	bl	55dc <log_strdup>
    8ece:	08e4      	lsrs	r4, r4, #3
    8ed0:	01a4      	lsls	r4, r4, #6
    8ed2:	f044 0402 	orr.w	r4, r4, #2
    8ed6:	4603      	mov	r3, r0
    8ed8:	f8ad 4000 	strh.w	r4, [sp]
    8edc:	4810      	ldr	r0, [pc, #64]	; (8f20 <handle_event+0x7c>)
    8ede:	4632      	mov	r2, r6
    8ee0:	4629      	mov	r1, r5
    8ee2:	f019 fec9 	bl	22c78 <log_3>
}
    8ee6:	b002      	add	sp, #8
    8ee8:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    8eea:	8981      	ldrh	r1, [r0, #12]
    8eec:	7853      	ldrb	r3, [r2, #1]
    8eee:	428b      	cmp	r3, r1
    8ef0:	d90d      	bls.n	8f0e <handle_event+0x6a>
    8ef2:	4a09      	ldr	r2, [pc, #36]	; (8f18 <handle_event+0x74>)
    8ef4:	4b09      	ldr	r3, [pc, #36]	; (8f1c <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8ef6:	480b      	ldr	r0, [pc, #44]	; (8f24 <handle_event+0x80>)
    8ef8:	1a9b      	subs	r3, r3, r2
    8efa:	08db      	lsrs	r3, r3, #3
    8efc:	019b      	lsls	r3, r3, #6
    8efe:	f043 0301 	orr.w	r3, r3, #1
    8f02:	462a      	mov	r2, r5
}
    8f04:	b002      	add	sp, #8
    8f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8f0a:	f019 be9c 	b.w	22c46 <log_2>
		handler->handler(buf);
    8f0e:	6853      	ldr	r3, [r2, #4]
}
    8f10:	b002      	add	sp, #8
    8f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    8f16:	4718      	bx	r3
    8f18:	000281b4 	.word	0x000281b4
    8f1c:	0002827c 	.word	0x0002827c
    8f20:	0002cb2f 	.word	0x0002cb2f
    8f24:	0002cb0d 	.word	0x0002cb0d

00008f28 <hci_le_meta_event>:
{
    8f28:	b510      	push	{r4, lr}
    8f2a:	2101      	movs	r1, #1
    8f2c:	4604      	mov	r4, r0
    8f2e:	3008      	adds	r0, #8
    8f30:	f01d ff23 	bl	26d7a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8f34:	4621      	mov	r1, r4
    8f36:	4a03      	ldr	r2, [pc, #12]	; (8f44 <hci_le_meta_event+0x1c>)
    8f38:	7800      	ldrb	r0, [r0, #0]
}
    8f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8f3e:	230a      	movs	r3, #10
    8f40:	f7ff bfb0 	b.w	8ea4 <handle_event>
    8f44:	000289fc 	.word	0x000289fc

00008f48 <hci_cmd_done>:
{
    8f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f4c:	4607      	mov	r7, r0
    8f4e:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8f50:	7990      	ldrb	r0, [r2, #6]
    8f52:	4e35      	ldr	r6, [pc, #212]	; (9028 <hci_cmd_done+0xe0>)
{
    8f54:	4688      	mov	r8, r1
    8f56:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8f58:	f014 fbce 	bl	1d6f8 <net_buf_pool_get>
    8f5c:	4286      	cmp	r6, r0
    8f5e:	d016      	beq.n	8f8e <hci_cmd_done+0x46>
    8f60:	4b32      	ldr	r3, [pc, #200]	; (902c <hci_cmd_done+0xe4>)
    8f62:	4d33      	ldr	r5, [pc, #204]	; (9030 <hci_cmd_done+0xe8>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8f64:	79a0      	ldrb	r0, [r4, #6]
    8f66:	9700      	str	r7, [sp, #0]
    8f68:	1aed      	subs	r5, r5, r3
    8f6a:	08ed      	lsrs	r5, r5, #3
    8f6c:	9001      	str	r0, [sp, #4]
    8f6e:	f014 fbc3 	bl	1d6f8 <net_buf_pool_get>
    8f72:	01ad      	lsls	r5, r5, #6
    8f74:	f045 0502 	orr.w	r5, r5, #2
    8f78:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8f7c:	462b      	mov	r3, r5
    8f7e:	482d      	ldr	r0, [pc, #180]	; (9034 <hci_cmd_done+0xec>)
    8f80:	2204      	movs	r2, #4
    8f82:	4669      	mov	r1, sp
    8f84:	f019 fe94 	bl	22cb0 <log_n>
}
    8f88:	b005      	add	sp, #20
    8f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    8f8e:	4620      	mov	r0, r4
    8f90:	f014 fbba 	bl	1d708 <net_buf_id>
    8f94:	4d28      	ldr	r5, [pc, #160]	; (9038 <hci_cmd_done+0xf0>)
    8f96:	f04f 090c 	mov.w	r9, #12
    8f9a:	fb09 5000 	mla	r0, r9, r0, r5
    8f9e:	8843      	ldrh	r3, [r0, #2]
    8fa0:	42bb      	cmp	r3, r7
    8fa2:	d011      	beq.n	8fc8 <hci_cmd_done+0x80>
    8fa4:	4b21      	ldr	r3, [pc, #132]	; (902c <hci_cmd_done+0xe4>)
    8fa6:	4e22      	ldr	r6, [pc, #136]	; (9030 <hci_cmd_done+0xe8>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    8fa8:	4620      	mov	r0, r4
    8faa:	1af6      	subs	r6, r6, r3
    8fac:	f014 fbac 	bl	1d708 <net_buf_id>
    8fb0:	08f6      	lsrs	r6, r6, #3
    8fb2:	fb09 5000 	mla	r0, r9, r0, r5
    8fb6:	01b6      	lsls	r6, r6, #6
    8fb8:	f046 0602 	orr.w	r6, r6, #2
    8fbc:	8842      	ldrh	r2, [r0, #2]
    8fbe:	481f      	ldr	r0, [pc, #124]	; (903c <hci_cmd_done+0xf4>)
    8fc0:	4633      	mov	r3, r6
    8fc2:	4639      	mov	r1, r7
    8fc4:	f019 fe3f 	bl	22c46 <log_2>
	if (cmd(buf)->state && !status) {
    8fc8:	4620      	mov	r0, r4
    8fca:	f014 fb9d 	bl	1d708 <net_buf_id>
    8fce:	260c      	movs	r6, #12
    8fd0:	fb06 5000 	mla	r0, r6, r0, r5
    8fd4:	6843      	ldr	r3, [r0, #4]
    8fd6:	b16b      	cbz	r3, 8ff4 <hci_cmd_done+0xac>
    8fd8:	f1b8 0f00 	cmp.w	r8, #0
    8fdc:	d10a      	bne.n	8ff4 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    8fde:	4620      	mov	r0, r4
    8fe0:	f014 fb92 	bl	1d708 <net_buf_id>
    8fe4:	fb06 5000 	mla	r0, r6, r0, r5
    8fe8:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    8fea:	e9d3 0100 	ldrd	r0, r1, [r3]
    8fee:	7a1a      	ldrb	r2, [r3, #8]
    8ff0:	f01c f816 	bl	25020 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    8ff4:	4620      	mov	r0, r4
    8ff6:	f014 fb87 	bl	1d708 <net_buf_id>
    8ffa:	260c      	movs	r6, #12
    8ffc:	fb06 5000 	mla	r0, r6, r0, r5
    9000:	6883      	ldr	r3, [r0, #8]
    9002:	2b00      	cmp	r3, #0
    9004:	d0c0      	beq.n	8f88 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    9006:	4620      	mov	r0, r4
    9008:	f014 fb7e 	bl	1d708 <net_buf_id>
    900c:	4370      	muls	r0, r6
    900e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    9012:	4620      	mov	r0, r4
    9014:	f014 fb78 	bl	1d708 <net_buf_id>
    9018:	fb06 5500 	mla	r5, r6, r0, r5
    901c:	68a8      	ldr	r0, [r5, #8]
}
    901e:	b005      	add	sp, #20
    9020:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    9024:	f017 bdf8 	b.w	20c18 <z_impl_k_sem_give>
    9028:	2000a1c4 	.word	0x2000a1c4
    902c:	000281b4 	.word	0x000281b4
    9030:	0002827c 	.word	0x0002827c
    9034:	0002cb51 	.word	0x0002cb51
    9038:	2000db70 	.word	0x2000db70
    903c:	0002cb86 	.word	0x0002cb86

00009040 <hci_cmd_status>:
{
    9040:	b538      	push	{r3, r4, r5, lr}
    9042:	2104      	movs	r1, #4
    9044:	4604      	mov	r4, r0
    9046:	3008      	adds	r0, #8
    9048:	f01d fe97 	bl	26d7a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    904c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    904e:	7801      	ldrb	r1, [r0, #0]
    9050:	8840      	ldrh	r0, [r0, #2]
    9052:	4622      	mov	r2, r4
    9054:	f7ff ff78 	bl	8f48 <hci_cmd_done>
	if (ncmd) {
    9058:	b125      	cbz	r5, 9064 <hci_cmd_status+0x24>
    905a:	4803      	ldr	r0, [pc, #12]	; (9068 <hci_cmd_status+0x28>)
}
    905c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9060:	f017 bdda 	b.w	20c18 <z_impl_k_sem_give>
    9064:	bd38      	pop	{r3, r4, r5, pc}
    9066:	bf00      	nop
    9068:	200000e8 	.word	0x200000e8

0000906c <hci_cmd_complete>:
{
    906c:	b538      	push	{r3, r4, r5, lr}
    906e:	2103      	movs	r1, #3
    9070:	4604      	mov	r4, r0
    9072:	3008      	adds	r0, #8
    9074:	f01d fe81 	bl	26d7a <net_buf_simple_pull_mem>
	status = buf->data[0];
    9078:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    907a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    907c:	7819      	ldrb	r1, [r3, #0]
    907e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    9082:	4622      	mov	r2, r4
    9084:	f7ff ff60 	bl	8f48 <hci_cmd_done>
	if (ncmd) {
    9088:	b125      	cbz	r5, 9094 <hci_cmd_complete+0x28>
    908a:	4803      	ldr	r0, [pc, #12]	; (9098 <hci_cmd_complete+0x2c>)
}
    908c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9090:	f017 bdc2 	b.w	20c18 <z_impl_k_sem_give>
    9094:	bd38      	pop	{r3, r4, r5, pc}
    9096:	bf00      	nop
    9098:	200000e8 	.word	0x200000e8

0000909c <hci_tx_thread>:
{
    909c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90a0:	4d51      	ldr	r5, [pc, #324]	; (91e8 <hci_tx_thread+0x14c>)
    90a2:	4b52      	ldr	r3, [pc, #328]	; (91ec <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    90a4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 91f0 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    90a8:	f8df a148 	ldr.w	sl, [pc, #328]	; 91f4 <hci_tx_thread+0x158>
    90ac:	1aed      	subs	r5, r5, r3
    90ae:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    90b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    90b4:	4850      	ldr	r0, [pc, #320]	; (91f8 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    90b6:	f36f 3310 	bfc	r3, #12, #5
    90ba:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    90be:	f002 fa81 	bl	b5c4 <bt_conn_prepare_events>
    90c2:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    90c4:	484a      	ldr	r0, [pc, #296]	; (91f0 <hci_tx_thread+0x154>)
    90c6:	f04f 32ff 	mov.w	r2, #4294967295
    90ca:	f04f 33ff 	mov.w	r3, #4294967295
    90ce:	4639      	mov	r1, r7
    90d0:	f018 f914 	bl	212fc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    90d4:	b160      	cbz	r0, 90f0 <hci_tx_thread+0x54>
    90d6:	4949      	ldr	r1, [pc, #292]	; (91fc <hci_tx_thread+0x160>)
    90d8:	4849      	ldr	r0, [pc, #292]	; (9200 <hci_tx_thread+0x164>)
    90da:	f241 437b 	movw	r3, #5243	; 0x147b
    90de:	4652      	mov	r2, sl
    90e0:	f019 f8fa 	bl	222d8 <printk>
    90e4:	4040      	eors	r0, r0
    90e6:	f380 8811 	msr	BASEPRI, r0
    90ea:	f04f 0003 	mov.w	r0, #3
    90ee:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    90f0:	4e44      	ldr	r6, [pc, #272]	; (9204 <hci_tx_thread+0x168>)
{
    90f2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 91f0 <hci_tx_thread+0x154>
    90f6:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    90fa:	b917      	cbnz	r7, 9102 <hci_tx_thread+0x66>
	z_impl_k_yield();
    90fc:	f017 fce4 	bl	20ac8 <z_impl_k_yield>
	while (1) {
    9100:	e7d6      	b.n	90b0 <hci_tx_thread+0x14>
		switch (ev->state) {
    9102:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9106:	f3c1 3104 	ubfx	r1, r1, #12, #5
    910a:	2901      	cmp	r1, #1
    910c:	d959      	bls.n	91c2 <hci_tx_thread+0x126>
    910e:	2904      	cmp	r1, #4
    9110:	d163      	bne.n	91da <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    9112:	f898 300c 	ldrb.w	r3, [r8, #12]
    9116:	2b00      	cmp	r3, #0
    9118:	d157      	bne.n	91ca <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    911a:	483b      	ldr	r0, [pc, #236]	; (9208 <hci_tx_thread+0x16c>)
    911c:	2200      	movs	r2, #0
    911e:	2300      	movs	r3, #0
    9120:	f01d fdb3 	bl	26c8a <net_buf_get>
	BT_ASSERT(buf);
    9124:	4604      	mov	r4, r0
    9126:	b960      	cbnz	r0, 9142 <hci_tx_thread+0xa6>
    9128:	4938      	ldr	r1, [pc, #224]	; (920c <hci_tx_thread+0x170>)
    912a:	4835      	ldr	r0, [pc, #212]	; (9200 <hci_tx_thread+0x164>)
    912c:	f241 4318 	movw	r3, #5144	; 0x1418
    9130:	4652      	mov	r2, sl
    9132:	f019 f8d1 	bl	222d8 <printk>
    9136:	4040      	eors	r0, r0
    9138:	f380 8811 	msr	BASEPRI, r0
    913c:	f04f 0003 	mov.w	r0, #3
    9140:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    9142:	f04f 33ff 	mov.w	r3, #4294967295
    9146:	f04f 32ff 	mov.w	r2, #4294967295
    914a:	4658      	mov	r0, fp
    914c:	f017 fd8a 	bl	20c64 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    9150:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    9154:	b163      	cbz	r3, 9170 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    9156:	01a9      	lsls	r1, r5, #6
    9158:	482d      	ldr	r0, [pc, #180]	; (9210 <hci_tx_thread+0x174>)
    915a:	f041 0101 	orr.w	r1, r1, #1
    915e:	f019 fd51 	bl	22c04 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    9162:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    9166:	f014 fb85 	bl	1d874 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    916a:	2300      	movs	r3, #0
    916c:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    9170:	4620      	mov	r0, r4
    9172:	f01d fdb5 	bl	26ce0 <net_buf_ref>
    9176:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
		return bt_hci_ecc_send(buf);
    917a:	4620      	mov	r0, r4
    917c:	f7ff f8e0 	bl	8340 <bt_hci_ecc_send>
	if (err) {
    9180:	4601      	mov	r1, r0
    9182:	b1f0      	cbz	r0, 91c2 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    9184:	01aa      	lsls	r2, r5, #6
    9186:	4823      	ldr	r0, [pc, #140]	; (9214 <hci_tx_thread+0x178>)
    9188:	f042 0201 	orr.w	r2, r2, #1
    918c:	f019 fd47 	bl	22c1e <log_1>
	z_impl_k_sem_give(sem);
    9190:	4821      	ldr	r0, [pc, #132]	; (9218 <hci_tx_thread+0x17c>)
    9192:	f017 fd41 	bl	20c18 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    9196:	4620      	mov	r0, r4
    9198:	f014 fab6 	bl	1d708 <net_buf_id>
    919c:	4b1f      	ldr	r3, [pc, #124]	; (921c <hci_tx_thread+0x180>)
    919e:	220c      	movs	r2, #12
    91a0:	fb02 3000 	mla	r0, r2, r0, r3
    91a4:	211f      	movs	r1, #31
    91a6:	8840      	ldrh	r0, [r0, #2]
    91a8:	4622      	mov	r2, r4
    91aa:	f7ff fecd 	bl	8f48 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    91ae:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    91b2:	f014 fb5f 	bl	1d874 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    91b6:	2300      	movs	r3, #0
		net_buf_unref(buf);
    91b8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    91ba:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    91be:	f014 fb59 	bl	1d874 <net_buf_unref>
	for (; count; ev++, count--) {
    91c2:	f108 0814 	add.w	r8, r8, #20
    91c6:	3f01      	subs	r7, #1
    91c8:	e797      	b.n	90fa <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    91ca:	2b01      	cmp	r3, #1
    91cc:	d1f9      	bne.n	91c2 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    91ce:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    91d2:	3834      	subs	r0, #52	; 0x34
    91d4:	f002 fcb6 	bl	bb44 <bt_conn_process_tx>
    91d8:	e7f3      	b.n	91c2 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    91da:	01aa      	lsls	r2, r5, #6
    91dc:	4810      	ldr	r0, [pc, #64]	; (9220 <hci_tx_thread+0x184>)
    91de:	f042 0202 	orr.w	r2, r2, #2
    91e2:	f019 fd1c 	bl	22c1e <log_1>
    91e6:	e7ec      	b.n	91c2 <hci_tx_thread+0x126>
    91e8:	0002827c 	.word	0x0002827c
    91ec:	000281b4 	.word	0x000281b4
    91f0:	20000340 	.word	0x20000340
    91f4:	0002cbb9 	.word	0x0002cbb9
    91f8:	20000354 	.word	0x20000354
    91fc:	0002cbed 	.word	0x0002cbed
    9200:	0002cbf6 	.word	0x0002cbf6
    9204:	20000000 	.word	0x20000000
    9208:	20000104 	.word	0x20000104
    920c:	0002c95e 	.word	0x0002c95e
    9210:	0002cc13 	.word	0x0002cc13
    9214:	0002cc2e 	.word	0x0002cc2e
    9218:	200000e8 	.word	0x200000e8
    921c:	2000db70 	.word	0x2000db70
    9220:	0002cc50 	.word	0x0002cc50

00009224 <hci_num_completed_packets>:
{
    9224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9228:	4d3d      	ldr	r5, [pc, #244]	; (9320 <hci_num_completed_packets+0xfc>)
    922a:	4b3e      	ldr	r3, [pc, #248]	; (9324 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    922c:	f8d0 8008 	ldr.w	r8, [r0, #8]
    9230:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 9328 <hci_num_completed_packets+0x104>
    9234:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    9236:	2600      	movs	r6, #0
    9238:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    923a:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    923c:	f898 3000 	ldrb.w	r3, [r8]
    9240:	429e      	cmp	r6, r3
    9242:	db01      	blt.n	9248 <hci_num_completed_packets+0x24>
}
    9244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    9248:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    924c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    9250:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    9254:	4658      	mov	r0, fp
    9256:	f002 fa21 	bl	b69c <bt_conn_lookup_handle>
		if (!conn) {
    925a:	4604      	mov	r4, r0
    925c:	b1d8      	cbz	r0, 9296 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    925e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    9262:	2f00      	cmp	r7, #0
    9264:	d033      	beq.n	92ce <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    9266:	f04f 0320 	mov.w	r3, #32
    926a:	f3ef 8211 	mrs	r2, BASEPRI
    926e:	f383 8811 	msr	BASEPRI, r3
    9272:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    9276:	69e3      	ldr	r3, [r4, #28]
    9278:	b1b3      	cbz	r3, 92a8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    927a:	3b01      	subs	r3, #1
    927c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    927e:	f382 8811 	msr	BASEPRI, r2
    9282:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    9286:	4620      	mov	r0, r4
    9288:	f001 ffee 	bl	b268 <bt_conn_get_pkts>
    928c:	3f01      	subs	r7, #1
    928e:	f017 fcc3 	bl	20c18 <z_impl_k_sem_give>
    9292:	b2bf      	uxth	r7, r7
    9294:	e7e5      	b.n	9262 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    9296:	01aa      	lsls	r2, r5, #6
    9298:	4824      	ldr	r0, [pc, #144]	; (932c <hci_num_completed_packets+0x108>)
    929a:	f042 0201 	orr.w	r2, r2, #1
    929e:	4659      	mov	r1, fp
    92a0:	f019 fcbd 	bl	22c1e <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    92a4:	3601      	adds	r6, #1
    92a6:	e7c9      	b.n	923c <hci_num_completed_packets+0x18>
	return list->head;
    92a8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    92aa:	b12b      	cbz	r3, 92b8 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92ac:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    92ae:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    92b0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92b2:	428b      	cmp	r3, r1
	list->tail = node;
    92b4:	bf08      	it	eq
    92b6:	61a0      	streq	r0, [r4, #24]
    92b8:	f382 8811 	msr	BASEPRI, r2
    92bc:	f3bf 8f6f 	isb	sy
			if (!node) {
    92c0:	b94b      	cbnz	r3, 92d6 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    92c2:	01a9      	lsls	r1, r5, #6
    92c4:	481a      	ldr	r0, [pc, #104]	; (9330 <hci_num_completed_packets+0x10c>)
    92c6:	f041 0101 	orr.w	r1, r1, #1
    92ca:	f019 fc9b 	bl	22c04 <log_0>
		bt_conn_unref(conn);
    92ce:	4620      	mov	r0, r4
    92d0:	f01c f8f6 	bl	254c0 <bt_conn_unref>
    92d4:	e7e6      	b.n	92a4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    92d6:	f04f 0220 	mov.w	r2, #32
    92da:	f3ef 8111 	mrs	r1, BASEPRI
    92de:	f382 8811 	msr	BASEPRI, r2
    92e2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    92e6:	68da      	ldr	r2, [r3, #12]
    92e8:	61e2      	str	r2, [r4, #28]
	return list->tail;
    92ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    92ec:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    92f0:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    92f4:	b98a      	cbnz	r2, 931a <hci_num_completed_packets+0xf6>
	list->head = node;
    92f6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    92fa:	f381 8811 	msr	BASEPRI, r1
    92fe:	f3bf 8f6f 	isb	sy
    9302:	2100      	movs	r1, #0
    9304:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9308:	f01b fe7f 	bl	2500a <atomic_test_and_set_bit>
    930c:	2800      	cmp	r0, #0
    930e:	d1ba      	bne.n	9286 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    9310:	4659      	mov	r1, fp
    9312:	4650      	mov	r0, sl
    9314:	f01e fa05 	bl	27722 <k_queue_append>
    9318:	e7b5      	b.n	9286 <hci_num_completed_packets+0x62>
	parent->next = child;
    931a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    931c:	6263      	str	r3, [r4, #36]	; 0x24
}
    931e:	e7ec      	b.n	92fa <hci_num_completed_packets+0xd6>
    9320:	0002827c 	.word	0x0002827c
    9324:	000281b4 	.word	0x000281b4
    9328:	2000b0f0 	.word	0x2000b0f0
    932c:	0002cc71 	.word	0x0002cc71
    9330:	0002cc8d 	.word	0x0002cc8d

00009334 <bt_hci_cmd_create>:
{
    9334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    9338:	f04f 32ff 	mov.w	r2, #4294967295
    933c:	f04f 33ff 	mov.w	r3, #4294967295
    9340:	4606      	mov	r6, r0
    9342:	4817      	ldr	r0, [pc, #92]	; (93a0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    9344:	4d17      	ldr	r5, [pc, #92]	; (93a4 <bt_hci_cmd_create+0x70>)
{
    9346:	460f      	mov	r7, r1
    9348:	f01d fc9a 	bl	26c80 <net_buf_alloc_fixed>
    934c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    934e:	f100 0a08 	add.w	sl, r0, #8
    9352:	2100      	movs	r1, #0
    9354:	f04f 0800 	mov.w	r8, #0
    9358:	4650      	mov	r0, sl
    935a:	f01d fcb0 	bl	26cbe <net_buf_simple_reserve>
    935e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    9362:	4620      	mov	r0, r4
    9364:	f014 f9d0 	bl	1d708 <net_buf_id>
    9368:	f04f 090c 	mov.w	r9, #12
    936c:	fb09 5000 	mla	r0, r9, r0, r5
    9370:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    9372:	4620      	mov	r0, r4
    9374:	f014 f9c8 	bl	1d708 <net_buf_id>
    9378:	fb09 5000 	mla	r0, r9, r0, r5
    937c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    9380:	4620      	mov	r0, r4
    9382:	f014 f9c1 	bl	1d708 <net_buf_id>
    9386:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    938a:	2103      	movs	r1, #3
    938c:	f8c5 8004 	str.w	r8, [r5, #4]
    9390:	4650      	mov	r0, sl
    9392:	f01d fccb 	bl	26d2c <net_buf_simple_add>
	hdr->param_len = param_len;
    9396:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    9398:	8006      	strh	r6, [r0, #0]
}
    939a:	4620      	mov	r0, r4
    939c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    93a0:	2000a1c4 	.word	0x2000a1c4
    93a4:	2000db70 	.word	0x2000db70

000093a8 <bt_hci_cmd_send>:
{
    93a8:	b538      	push	{r3, r4, r5, lr}
    93aa:	4605      	mov	r5, r0
	if (!buf) {
    93ac:	460c      	mov	r4, r1
    93ae:	b919      	cbnz	r1, 93b8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    93b0:	f7ff ffc0 	bl	9334 <bt_hci_cmd_create>
		if (!buf) {
    93b4:	4604      	mov	r4, r0
    93b6:	b1f0      	cbz	r0, 93f6 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    93b8:	f640 4335 	movw	r3, #3125	; 0xc35
    93bc:	429d      	cmp	r5, r3
    93be:	d114      	bne.n	93ea <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    93c0:	4620      	mov	r0, r4
    93c2:	f7fe ffbd 	bl	8340 <bt_hci_ecc_send>
		if (err) {
    93c6:	4605      	mov	r5, r0
    93c8:	b168      	cbz	r0, 93e6 <bt_hci_cmd_send+0x3e>
    93ca:	4b0c      	ldr	r3, [pc, #48]	; (93fc <bt_hci_cmd_send+0x54>)
    93cc:	4a0c      	ldr	r2, [pc, #48]	; (9400 <bt_hci_cmd_send+0x58>)
    93ce:	1ad2      	subs	r2, r2, r3
    93d0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    93d2:	0192      	lsls	r2, r2, #6
    93d4:	4601      	mov	r1, r0
    93d6:	f042 0201 	orr.w	r2, r2, #1
    93da:	480a      	ldr	r0, [pc, #40]	; (9404 <bt_hci_cmd_send+0x5c>)
    93dc:	f019 fc1f 	bl	22c1e <log_1>
			net_buf_unref(buf);
    93e0:	4620      	mov	r0, r4
    93e2:	f014 fa47 	bl	1d874 <net_buf_unref>
}
    93e6:	4628      	mov	r0, r5
    93e8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    93ea:	4807      	ldr	r0, [pc, #28]	; (9408 <bt_hci_cmd_send+0x60>)
    93ec:	4621      	mov	r1, r4
    93ee:	f01d fc6a 	bl	26cc6 <net_buf_put>
	return 0;
    93f2:	2500      	movs	r5, #0
    93f4:	e7f7      	b.n	93e6 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    93f6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    93fa:	e7f4      	b.n	93e6 <bt_hci_cmd_send+0x3e>
    93fc:	000281b4 	.word	0x000281b4
    9400:	0002827c 	.word	0x0002827c
    9404:	0002cc2e 	.word	0x0002cc2e
    9408:	20000104 	.word	0x20000104

0000940c <le_ltk_request>:
{
    940c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    940e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9410:	882e      	ldrh	r6, [r5, #0]
    9412:	b2b7      	uxth	r7, r6
{
    9414:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    9416:	4638      	mov	r0, r7
    9418:	f002 f940 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    941c:	4604      	mov	r4, r0
    941e:	b968      	cbnz	r0, 943c <le_ltk_request+0x30>
    9420:	4b27      	ldr	r3, [pc, #156]	; (94c0 <le_ltk_request+0xb4>)
    9422:	4a28      	ldr	r2, [pc, #160]	; (94c4 <le_ltk_request+0xb8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9424:	4828      	ldr	r0, [pc, #160]	; (94c8 <le_ltk_request+0xbc>)
    9426:	1ad2      	subs	r2, r2, r3
    9428:	08d2      	lsrs	r2, r2, #3
    942a:	0192      	lsls	r2, r2, #6
    942c:	f042 0201 	orr.w	r2, r2, #1
    9430:	4639      	mov	r1, r7
}
    9432:	b007      	add	sp, #28
    9434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9438:	f019 bbf1 	b.w	22c1e <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    943c:	af02      	add	r7, sp, #8
    943e:	f8d5 2002 	ldr.w	r2, [r5, #2]
    9442:	f8d5 3006 	ldr.w	r3, [r5, #6]
    9446:	9701      	str	r7, [sp, #4]
    9448:	8969      	ldrh	r1, [r5, #10]
    944a:	9100      	str	r1, [sp, #0]
    944c:	f01d fa77 	bl	2693e <bt_smp_request_ltk>
    9450:	b328      	cbz	r0, 949e <le_ltk_request+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    9452:	2112      	movs	r1, #18
    9454:	f242 001a 	movw	r0, #8218	; 0x201a
    9458:	f7ff ff6c 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    945c:	4605      	mov	r5, r0
    945e:	b970      	cbnz	r0, 947e <le_ltk_request+0x72>
    9460:	4918      	ldr	r1, [pc, #96]	; (94c4 <le_ltk_request+0xb8>)
    9462:	4b17      	ldr	r3, [pc, #92]	; (94c0 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    9464:	4819      	ldr	r0, [pc, #100]	; (94cc <le_ltk_request+0xc0>)
    9466:	1ac9      	subs	r1, r1, r3
    9468:	08c9      	lsrs	r1, r1, #3
    946a:	0189      	lsls	r1, r1, #6
    946c:	f041 0101 	orr.w	r1, r1, #1
    9470:	f019 fbc8 	bl	22c04 <log_0>
	bt_conn_unref(conn);
    9474:	4620      	mov	r0, r4
    9476:	f01c f823 	bl	254c0 <bt_conn_unref>
}
    947a:	b007      	add	sp, #28
    947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    947e:	2112      	movs	r1, #18
    9480:	3008      	adds	r0, #8
    9482:	f01d fc53 	bl	26d2c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    9486:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    9488:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    948c:	2210      	movs	r2, #16
    948e:	f01b fbdf 	bl	24c50 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    9492:	4629      	mov	r1, r5
    9494:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9498:	f7ff ff86 	bl	93a8 <bt_hci_cmd_send>
    949c:	e7ea      	b.n	9474 <le_ltk_request+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    949e:	2102      	movs	r1, #2
    94a0:	f242 001b 	movw	r0, #8219	; 0x201b
    94a4:	f7ff ff46 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    94a8:	4605      	mov	r5, r0
    94aa:	2800      	cmp	r0, #0
    94ac:	d0d8      	beq.n	9460 <le_ltk_request+0x54>
    94ae:	2102      	movs	r1, #2
    94b0:	3008      	adds	r0, #8
    94b2:	f01d fc3b 	bl	26d2c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    94b6:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    94b8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    94ba:	f242 001b 	movw	r0, #8219	; 0x201b
    94be:	e7eb      	b.n	9498 <le_ltk_request+0x8c>
    94c0:	000281b4 	.word	0x000281b4
    94c4:	0002827c 	.word	0x0002827c
    94c8:	0002ca7d 	.word	0x0002ca7d
    94cc:	0002cca4 	.word	0x0002cca4

000094d0 <le_conn_param_neg_reply>:
{
    94d0:	b570      	push	{r4, r5, r6, lr}
    94d2:	4606      	mov	r6, r0
    94d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    94d6:	f242 0021 	movw	r0, #8225	; 0x2021
    94da:	2103      	movs	r1, #3
    94dc:	f7ff ff2a 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    94e0:	4604      	mov	r4, r0
    94e2:	b958      	cbnz	r0, 94fc <le_conn_param_neg_reply+0x2c>
    94e4:	490c      	ldr	r1, [pc, #48]	; (9518 <le_conn_param_neg_reply+0x48>)
    94e6:	4b0d      	ldr	r3, [pc, #52]	; (951c <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    94e8:	480d      	ldr	r0, [pc, #52]	; (9520 <le_conn_param_neg_reply+0x50>)
    94ea:	1ac9      	subs	r1, r1, r3
    94ec:	08c9      	lsrs	r1, r1, #3
    94ee:	0189      	lsls	r1, r1, #6
}
    94f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    94f4:	f041 0101 	orr.w	r1, r1, #1
    94f8:	f019 bb84 	b.w	22c04 <log_0>
    94fc:	2103      	movs	r1, #3
    94fe:	3008      	adds	r0, #8
    9500:	f01d fc14 	bl	26d2c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    9504:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    9506:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9508:	4621      	mov	r1, r4
    950a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    950e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9512:	f7ff bf49 	b.w	93a8 <bt_hci_cmd_send>
    9516:	bf00      	nop
    9518:	0002827c 	.word	0x0002827c
    951c:	000281b4 	.word	0x000281b4
    9520:	0002ccbb 	.word	0x0002ccbb

00009524 <le_conn_param_req>:
{
    9524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    9526:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9528:	78d9      	ldrb	r1, [r3, #3]
    952a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    952c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    952e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9532:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    9536:	7959      	ldrb	r1, [r3, #5]
    9538:	791a      	ldrb	r2, [r3, #4]
    953a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    953e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    9542:	799a      	ldrb	r2, [r3, #6]
    9544:	79d9      	ldrb	r1, [r3, #7]
    9546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    954a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    954e:	7a1a      	ldrb	r2, [r3, #8]
    9550:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    9552:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9554:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    9558:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    955a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    955e:	f002 f89d 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    9562:	4606      	mov	r6, r0
    9564:	b980      	cbnz	r0, 9588 <le_conn_param_req+0x64>
    9566:	4b20      	ldr	r3, [pc, #128]	; (95e8 <le_conn_param_req+0xc4>)
    9568:	4a20      	ldr	r2, [pc, #128]	; (95ec <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    956a:	4821      	ldr	r0, [pc, #132]	; (95f0 <le_conn_param_req+0xcc>)
    956c:	1ad2      	subs	r2, r2, r3
    956e:	08d2      	lsrs	r2, r2, #3
    9570:	0192      	lsls	r2, r2, #6
    9572:	4621      	mov	r1, r4
    9574:	f042 0201 	orr.w	r2, r2, #1
    9578:	f019 fb51 	bl	22c1e <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    957c:	2102      	movs	r1, #2
    957e:	4620      	mov	r0, r4
    9580:	f7ff ffa6 	bl	94d0 <le_conn_param_neg_reply>
}
    9584:	b003      	add	sp, #12
    9586:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    9588:	4669      	mov	r1, sp
    958a:	f001 fea1 	bl	b2d0 <le_param_req>
    958e:	b938      	cbnz	r0, 95a0 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    9590:	211e      	movs	r1, #30
    9592:	4620      	mov	r0, r4
    9594:	f7ff ff9c 	bl	94d0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    9598:	4630      	mov	r0, r6
    959a:	f01b ff91 	bl	254c0 <bt_conn_unref>
    959e:	e7f1      	b.n	9584 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    95a0:	210e      	movs	r1, #14
    95a2:	f242 0020 	movw	r0, #8224	; 0x2020
    95a6:	f7ff fec5 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    95aa:	4605      	mov	r5, r0
    95ac:	2800      	cmp	r0, #0
    95ae:	d0f3      	beq.n	9598 <le_conn_param_req+0x74>
    95b0:	210e      	movs	r1, #14
    95b2:	3008      	adds	r0, #8
    95b4:	f01d fbba 	bl	26d2c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    95b8:	220e      	movs	r2, #14
    95ba:	4604      	mov	r4, r0
    95bc:	2100      	movs	r1, #0
    95be:	f01b fb72 	bl	24ca6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    95c2:	f8bd 3000 	ldrh.w	r3, [sp]
    95c6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    95c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    95cc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    95ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    95d2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    95d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    95d8:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    95da:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    95dc:	4629      	mov	r1, r5
    95de:	f242 0020 	movw	r0, #8224	; 0x2020
    95e2:	f7ff fee1 	bl	93a8 <bt_hci_cmd_send>
    95e6:	e7d7      	b.n	9598 <le_conn_param_req+0x74>
    95e8:	000281b4 	.word	0x000281b4
    95ec:	0002827c 	.word	0x0002827c
    95f0:	0002ca7d 	.word	0x0002ca7d

000095f4 <bt_hci_cmd_send_sync>:
{
    95f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95f8:	4607      	mov	r7, r0
    95fa:	b086      	sub	sp, #24
    95fc:	4615      	mov	r5, r2
	if (!buf) {
    95fe:	460c      	mov	r4, r1
    9600:	b921      	cbnz	r1, 960c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    9602:	f7ff fe97 	bl	9334 <bt_hci_cmd_create>
		if (!buf) {
    9606:	4604      	mov	r4, r0
    9608:	2800      	cmp	r0, #0
    960a:	d057      	beq.n	96bc <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    960c:	2201      	movs	r2, #1
    960e:	2100      	movs	r1, #0
    9610:	4668      	mov	r0, sp
    9612:	f01e f9c4 	bl	2799e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    9616:	4620      	mov	r0, r4
    9618:	f014 f876 	bl	1d708 <net_buf_id>
    961c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 96c4 <bt_hci_cmd_send_sync+0xd0>
    9620:	230c      	movs	r3, #12
    9622:	fb03 8000 	mla	r0, r3, r0, r8
    9626:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    962a:	4620      	mov	r0, r4
    962c:	f01d fb58 	bl	26ce0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9630:	4825      	ldr	r0, [pc, #148]	; (96c8 <bt_hci_cmd_send_sync+0xd4>)
    9632:	4621      	mov	r1, r4
    9634:	f01d fb47 	bl	26cc6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    9638:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    963c:	2300      	movs	r3, #0
    963e:	4668      	mov	r0, sp
    9640:	f017 fb10 	bl	20c64 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    9644:	4606      	mov	r6, r0
    9646:	b180      	cbz	r0, 966a <bt_hci_cmd_send_sync+0x76>
    9648:	4a20      	ldr	r2, [pc, #128]	; (96cc <bt_hci_cmd_send_sync+0xd8>)
    964a:	4921      	ldr	r1, [pc, #132]	; (96d0 <bt_hci_cmd_send_sync+0xdc>)
    964c:	4821      	ldr	r0, [pc, #132]	; (96d4 <bt_hci_cmd_send_sync+0xe0>)
    964e:	f240 134d 	movw	r3, #333	; 0x14d
    9652:	f018 fe41 	bl	222d8 <printk>
    9656:	4820      	ldr	r0, [pc, #128]	; (96d8 <bt_hci_cmd_send_sync+0xe4>)
    9658:	4631      	mov	r1, r6
    965a:	f018 fe3d 	bl	222d8 <printk>
    965e:	4040      	eors	r0, r0
    9660:	f380 8811 	msr	BASEPRI, r0
    9664:	f04f 0003 	mov.w	r0, #3
    9668:	df02      	svc	2
	status = cmd(buf)->status;
    966a:	4620      	mov	r0, r4
    966c:	f014 f84c 	bl	1d708 <net_buf_id>
    9670:	230c      	movs	r3, #12
    9672:	4358      	muls	r0, r3
    9674:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    9678:	b1be      	cbz	r6, 96aa <bt_hci_cmd_send_sync+0xb6>
    967a:	4a18      	ldr	r2, [pc, #96]	; (96dc <bt_hci_cmd_send_sync+0xe8>)
    967c:	4b18      	ldr	r3, [pc, #96]	; (96e0 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    967e:	4819      	ldr	r0, [pc, #100]	; (96e4 <bt_hci_cmd_send_sync+0xf0>)
    9680:	1a9b      	subs	r3, r3, r2
    9682:	08db      	lsrs	r3, r3, #3
    9684:	019b      	lsls	r3, r3, #6
    9686:	f043 0302 	orr.w	r3, r3, #2
    968a:	4632      	mov	r2, r6
    968c:	4639      	mov	r1, r7
    968e:	f019 fada 	bl	22c46 <log_2>
		net_buf_unref(buf);
    9692:	4620      	mov	r0, r4
    9694:	f014 f8ee 	bl	1d874 <net_buf_unref>
			return -EIO;
    9698:	2e09      	cmp	r6, #9
    969a:	bf0c      	ite	eq
    969c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    96a0:	f06f 0004 	mvnne.w	r0, #4
}
    96a4:	b006      	add	sp, #24
    96a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    96aa:	b115      	cbz	r5, 96b2 <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    96ac:	602c      	str	r4, [r5, #0]
	return 0;
    96ae:	4630      	mov	r0, r6
    96b0:	e7f8      	b.n	96a4 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    96b2:	4620      	mov	r0, r4
    96b4:	f014 f8de 	bl	1d874 <net_buf_unref>
	return 0;
    96b8:	4628      	mov	r0, r5
    96ba:	e7f3      	b.n	96a4 <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    96bc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    96c0:	e7f0      	b.n	96a4 <bt_hci_cmd_send_sync+0xb0>
    96c2:	bf00      	nop
    96c4:	2000db70 	.word	0x2000db70
    96c8:	20000104 	.word	0x20000104
    96cc:	0002cbb9 	.word	0x0002cbb9
    96d0:	0002cbed 	.word	0x0002cbed
    96d4:	0002cbf6 	.word	0x0002cbf6
    96d8:	0002ccd5 	.word	0x0002ccd5
    96dc:	000281b4 	.word	0x000281b4
    96e0:	0002827c 	.word	0x0002827c
    96e4:	0002ccf5 	.word	0x0002ccf5

000096e8 <set_random_address>:
{
    96e8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    96ea:	4e15      	ldr	r6, [pc, #84]	; (9740 <set_random_address+0x58>)
    96ec:	2206      	movs	r2, #6
    96ee:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    96f2:	4605      	mov	r5, r0
    96f4:	f01b fa9b 	bl	24c2e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    96f8:	4604      	mov	r4, r0
    96fa:	b1d8      	cbz	r0, 9734 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    96fc:	2106      	movs	r1, #6
    96fe:	f242 0005 	movw	r0, #8197	; 0x2005
    9702:	f7ff fe17 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    9706:	4604      	mov	r4, r0
    9708:	b1b0      	cbz	r0, 9738 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    970a:	2206      	movs	r2, #6
    970c:	4629      	mov	r1, r5
    970e:	3008      	adds	r0, #8
    9710:	f01d fb12 	bl	26d38 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9714:	4621      	mov	r1, r4
    9716:	2200      	movs	r2, #0
    9718:	f242 0005 	movw	r0, #8197	; 0x2005
    971c:	f7ff ff6a 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    9720:	4604      	mov	r4, r0
    9722:	b938      	cbnz	r0, 9734 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    9724:	4629      	mov	r1, r5
    9726:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    972a:	f01b fc59 	bl	24fe0 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    972e:	2301      	movs	r3, #1
    9730:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    9734:	4620      	mov	r0, r4
    9736:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    9738:	f06f 0436 	mvn.w	r4, #54	; 0x36
    973c:	e7fa      	b.n	9734 <set_random_address+0x4c>
    973e:	bf00      	nop
    9740:	20000000 	.word	0x20000000

00009744 <le_set_private_addr>:
{
    9744:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9746:	4d16      	ldr	r5, [pc, #88]	; (97a0 <le_set_private_addr+0x5c>)
    9748:	4603      	mov	r3, r0
    974a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    974e:	f01b fc3e 	bl	24fce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    9752:	04c2      	lsls	r2, r0, #19
    9754:	d422      	bmi.n	979c <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    9756:	f103 0012 	add.w	r0, r3, #18
    975a:	4669      	mov	r1, sp
    975c:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    9760:	f01b fb26 	bl	24db0 <bt_rpa_create>
	if (!err) {
    9764:	4604      	mov	r4, r0
    9766:	b950      	cbnz	r0, 977e <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    9768:	4668      	mov	r0, sp
    976a:	f7ff ffbd 	bl	96e8 <set_random_address>
		if (!err) {
    976e:	4604      	mov	r4, r0
    9770:	b928      	cbnz	r0, 977e <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9776:	f105 0094 	add.w	r0, r5, #148	; 0x94
    977a:	f01b fc37 	bl	24fec <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    977e:	4809      	ldr	r0, [pc, #36]	; (97a4 <le_set_private_addr+0x60>)
    9780:	210d      	movs	r1, #13
    9782:	f01b fc42 	bl	2500a <atomic_test_and_set_bit>
    9786:	b930      	cbnz	r0, 9796 <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9788:	4907      	ldr	r1, [pc, #28]	; (97a8 <le_set_private_addr+0x64>)
    978a:	4808      	ldr	r0, [pc, #32]	; (97ac <le_set_private_addr+0x68>)
    978c:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    9790:	2300      	movs	r3, #0
    9792:	f017 fb9b 	bl	20ecc <k_delayed_work_submit_to_queue>
}
    9796:	4620      	mov	r0, r4
    9798:	b003      	add	sp, #12
    979a:	bd30      	pop	{r4, r5, pc}
		return 0;
    979c:	2400      	movs	r4, #0
    979e:	e7fa      	b.n	9796 <le_set_private_addr+0x52>
    97a0:	20000000 	.word	0x20000000
    97a4:	20000094 	.word	0x20000094
    97a8:	20000130 	.word	0x20000130
    97ac:	2000b0f0 	.word	0x2000b0f0

000097b0 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    97b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    97b4:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    97b8:	4605      	mov	r5, r0
    97ba:	460f      	mov	r7, r1
    97bc:	4690      	mov	r8, r2
    97be:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    97c0:	d035      	beq.n	982e <le_adv_set_random_addr.isra.0+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    97c2:	b132      	cbz	r2, 97d2 <le_adv_set_random_addr.isra.0+0x22>
    97c4:	068b      	lsls	r3, r1, #26
    97c6:	d504      	bpl.n	97d2 <le_adv_set_random_addr.isra.0+0x22>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    97c8:	4b28      	ldr	r3, [pc, #160]	; (986c <le_adv_set_random_addr.isra.0+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    97ca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    97ce:	065c      	lsls	r4, r3, #25
    97d0:	d548      	bpl.n	9864 <le_adv_set_random_addr.isra.0+0xb4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    97d2:	0778      	lsls	r0, r7, #29
    97d4:	d40b      	bmi.n	97ee <le_adv_set_random_addr.isra.0+0x3e>
		return le_set_private_addr(adv->id);
    97d6:	4628      	mov	r0, r5
    97d8:	f7ff ffb4 	bl	9744 <le_set_private_addr>
			if (err) {
    97dc:	bb00      	cbnz	r0, 9820 <le_adv_set_random_addr.isra.0+0x70>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    97de:	f1b8 0f00 	cmp.w	r8, #0
    97e2:	d03d      	beq.n	9860 <le_adv_set_random_addr.isra.0+0xb0>
    97e4:	06b9      	lsls	r1, r7, #26
    97e6:	d53b      	bpl.n	9860 <le_adv_set_random_addr.isra.0+0xb0>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    97e8:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    97ea:	7033      	strb	r3, [r6, #0]
		if (err) {
    97ec:	e018      	b.n	9820 <le_adv_set_random_addr.isra.0+0x70>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    97ee:	4c1f      	ldr	r4, [pc, #124]	; (986c <le_adv_set_random_addr.isra.0+0xbc>)
    97f0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    97f4:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    97f8:	5ce3      	ldrb	r3, [r4, r3]
    97fa:	2b01      	cmp	r3, #1
    97fc:	d008      	beq.n	9810 <le_adv_set_random_addr.isra.0+0x60>
			*own_addr_type = id_addr->type;
    97fe:	eba9 0505 	sub.w	r5, r9, r5
    9802:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9804:	f1b8 0f00 	cmp.w	r8, #0
    9808:	d10c      	bne.n	9824 <le_adv_set_random_addr.isra.0+0x74>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    980a:	7033      	strb	r3, [r6, #0]
	return 0;
    980c:	2000      	movs	r0, #0
    980e:	e007      	b.n	9820 <le_adv_set_random_addr.isra.0+0x70>
				err = set_adv_random_address(adv, &id_addr->a);
    9810:	2007      	movs	r0, #7
    9812:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    9816:	4420      	add	r0, r4
    9818:	f7ff ff66 	bl	96e8 <set_random_address>
				if (err) {
    981c:	2800      	cmp	r0, #0
    981e:	d0ee      	beq.n	97fe <le_adv_set_random_addr.isra.0+0x4e>
}
    9820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9824:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9826:	bf48      	it	mi
    9828:	f043 0302 	orrmi.w	r3, r3, #2
    982c:	e7ed      	b.n	980a <le_adv_set_random_addr.isra.0+0x5a>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    982e:	074b      	lsls	r3, r1, #29
    9830:	d514      	bpl.n	985c <le_adv_set_random_addr.isra.0+0xac>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9832:	f8df 8038 	ldr.w	r8, [pc, #56]	; 986c <le_adv_set_random_addr.isra.0+0xbc>
    9836:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    983a:	00c7      	lsls	r7, r0, #3
    983c:	f818 3003 	ldrb.w	r3, [r8, r3]
    9840:	2b01      	cmp	r3, #1
    9842:	d109      	bne.n	9858 <le_adv_set_random_addr.isra.0+0xa8>
				err = set_adv_random_address(adv, &id_addr->a);
    9844:	2007      	movs	r0, #7
    9846:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    984a:	4440      	add	r0, r8
    984c:	f7ff ff4c 	bl	96e8 <set_random_address>
			*own_addr_type = id_addr->type;
    9850:	1b7d      	subs	r5, r7, r5
    9852:	f818 3005 	ldrb.w	r3, [r8, r5]
    9856:	e7c8      	b.n	97ea <le_adv_set_random_addr.isra.0+0x3a>
	int err = 0;
    9858:	4620      	mov	r0, r4
    985a:	e7f9      	b.n	9850 <le_adv_set_random_addr.isra.0+0xa0>
		return le_set_private_addr(adv->id);
    985c:	f7ff ff72 	bl	9744 <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9860:	2301      	movs	r3, #1
    9862:	e7c2      	b.n	97ea <le_adv_set_random_addr.isra.0+0x3a>
			return -ENOTSUP;
    9864:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9868:	e7da      	b.n	9820 <le_adv_set_random_addr.isra.0+0x70>
    986a:	bf00      	nop
    986c:	20000000 	.word	0x20000000

00009870 <set_le_adv_enable_legacy>:
{
    9870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9872:	4606      	mov	r6, r0
    9874:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    9876:	f242 000a 	movw	r0, #8202	; 0x200a
    987a:	2101      	movs	r1, #1
    987c:	f7ff fd5a 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    9880:	4604      	mov	r4, r0
    9882:	b1e8      	cbz	r0, 98c0 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    9884:	3008      	adds	r0, #8
	if (enable) {
    9886:	b1cd      	cbz	r5, 98bc <set_le_adv_enable_legacy+0x4c>
    9888:	2101      	movs	r1, #1
    988a:	f01d fa5e 	bl	26d4a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    988e:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    9890:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    9892:	4620      	mov	r0, r4
    9894:	9302      	str	r3, [sp, #8]
	state->target = target;
    9896:	9601      	str	r6, [sp, #4]
	state->val = val;
    9898:	f88d 500c 	strb.w	r5, [sp, #12]
    989c:	f013 ff34 	bl	1d708 <net_buf_id>
    98a0:	4b09      	ldr	r3, [pc, #36]	; (98c8 <set_le_adv_enable_legacy+0x58>)
    98a2:	220c      	movs	r2, #12
    98a4:	fb02 3300 	mla	r3, r2, r0, r3
    98a8:	aa01      	add	r2, sp, #4
    98aa:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    98ac:	4621      	mov	r1, r4
    98ae:	2200      	movs	r2, #0
    98b0:	f242 000a 	movw	r0, #8202	; 0x200a
    98b4:	f7ff fe9e 	bl	95f4 <bt_hci_cmd_send_sync>
}
    98b8:	b004      	add	sp, #16
    98ba:	bd70      	pop	{r4, r5, r6, pc}
    98bc:	4629      	mov	r1, r5
    98be:	e7e4      	b.n	988a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    98c0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    98c4:	e7f8      	b.n	98b8 <set_le_adv_enable_legacy+0x48>
    98c6:	bf00      	nop
    98c8:	2000db70 	.word	0x2000db70

000098cc <le_update_private_addr>:
{
    98cc:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    98ce:	4b19      	ldr	r3, [pc, #100]	; (9934 <le_update_private_addr+0x68>)
    98d0:	f103 0028 	add.w	r0, r3, #40	; 0x28
    98d4:	f01b fb7b 	bl	24fce <atomic_get>
		if (adv &&
    98d8:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    98da:	f3c0 1580 	ubfx	r5, r0, #6, #1
    98de:	d412      	bmi.n	9906 <le_update_private_addr+0x3a>
	uint8_t id = BT_ID_DEFAULT;
    98e0:	2400      	movs	r4, #0
	bool adv_enabled = false;
    98e2:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    98e4:	4620      	mov	r0, r4
    98e6:	f7ff ff2d 	bl	9744 <le_set_private_addr>
	if (err) {
    98ea:	4601      	mov	r1, r0
    98ec:	b1c8      	cbz	r0, 9922 <le_update_private_addr+0x56>
    98ee:	4b12      	ldr	r3, [pc, #72]	; (9938 <le_update_private_addr+0x6c>)
    98f0:	4a12      	ldr	r2, [pc, #72]	; (993c <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
    98f2:	4813      	ldr	r0, [pc, #76]	; (9940 <le_update_private_addr+0x74>)
    98f4:	1ad2      	subs	r2, r2, r3
    98f6:	08d2      	lsrs	r2, r2, #3
    98f8:	0192      	lsls	r2, r2, #6
}
    98fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    98fe:	f042 0202 	orr.w	r2, r2, #2
    9902:	f019 b98c 	b.w	22c1e <log_1>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9906:	f103 0028 	add.w	r0, r3, #40	; 0x28
    990a:	f01b fb60 	bl	24fce <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    990e:	0502      	lsls	r2, r0, #20
    9910:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    9914:	d4e4      	bmi.n	98e0 <le_update_private_addr+0x14>
			id = adv->id;
    9916:	4618      	mov	r0, r3
    9918:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    991c:	f7ff ffa8 	bl	9870 <set_le_adv_enable_legacy>
    9920:	e7e0      	b.n	98e4 <le_update_private_addr+0x18>
	if (adv && adv_enabled) {
    9922:	b12d      	cbz	r5, 9930 <le_update_private_addr+0x64>
}
    9924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    9928:	4806      	ldr	r0, [pc, #24]	; (9944 <le_update_private_addr+0x78>)
    992a:	2101      	movs	r1, #1
    992c:	f7ff bfa0 	b.w	9870 <set_le_adv_enable_legacy>
}
    9930:	bd38      	pop	{r3, r4, r5, pc}
    9932:	bf00      	nop
    9934:	20000000 	.word	0x20000000
    9938:	000281b4 	.word	0x000281b4
    993c:	0002827c 	.word	0x0002827c
    9940:	0002cd11 	.word	0x0002cd11
    9944:	20000018 	.word	0x20000018

00009948 <rpa_timeout>:
{
    9948:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
    994a:	2300      	movs	r3, #0
    994c:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
    9950:	f7fe fff4 	bl	893c <le_rpa_invalidate>
	bt_adv_foreach(adv_is_private_enabled, &adv_enabled);
    9954:	480d      	ldr	r0, [pc, #52]	; (998c <rpa_timeout+0x44>)
    9956:	f10d 0107 	add.w	r1, sp, #7
    995a:	f7fe ffbf 	bl	88dc <bt_adv_foreach>
	if (!(adv_enabled ||
    995e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9962:	b973      	cbnz	r3, 9982 <rpa_timeout+0x3a>
    9964:	480a      	ldr	r0, [pc, #40]	; (9990 <rpa_timeout+0x48>)
    9966:	f01b fb32 	bl	24fce <atomic_get>
    996a:	0501      	lsls	r1, r0, #20
    996c:	d409      	bmi.n	9982 <rpa_timeout+0x3a>
    996e:	4808      	ldr	r0, [pc, #32]	; (9990 <rpa_timeout+0x48>)
    9970:	f01b fb2d 	bl	24fce <atomic_get>
    9974:	0682      	lsls	r2, r0, #26
    9976:	d506      	bpl.n	9986 <rpa_timeout+0x3e>
    9978:	4805      	ldr	r0, [pc, #20]	; (9990 <rpa_timeout+0x48>)
    997a:	f01b fb28 	bl	24fce <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    997e:	0603      	lsls	r3, r0, #24
    9980:	d501      	bpl.n	9986 <rpa_timeout+0x3e>
	le_update_private_addr();
    9982:	f7ff ffa3 	bl	98cc <le_update_private_addr>
}
    9986:	b003      	add	sp, #12
    9988:	f85d fb04 	ldr.w	pc, [sp], #4
    998c:	000250b7 	.word	0x000250b7
    9990:	20000094 	.word	0x20000094

00009994 <hci_le_read_max_data_len>:
{
    9994:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9996:	4606      	mov	r6, r0
    9998:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    999a:	aa01      	add	r2, sp, #4
    999c:	2100      	movs	r1, #0
    999e:	f242 002f 	movw	r0, #8239	; 0x202f
    99a2:	f7ff fe27 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    99a6:	4604      	mov	r4, r0
    99a8:	b160      	cbz	r0, 99c4 <hci_le_read_max_data_len+0x30>
    99aa:	490c      	ldr	r1, [pc, #48]	; (99dc <hci_le_read_max_data_len+0x48>)
    99ac:	4b0c      	ldr	r3, [pc, #48]	; (99e0 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    99ae:	480d      	ldr	r0, [pc, #52]	; (99e4 <hci_le_read_max_data_len+0x50>)
    99b0:	1ac9      	subs	r1, r1, r3
    99b2:	08c9      	lsrs	r1, r1, #3
    99b4:	0189      	lsls	r1, r1, #6
    99b6:	f041 0101 	orr.w	r1, r1, #1
    99ba:	f019 f923 	bl	22c04 <log_0>
}
    99be:	4620      	mov	r0, r4
    99c0:	b002      	add	sp, #8
    99c2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    99c4:	9801      	ldr	r0, [sp, #4]
    99c6:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    99c8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    99cc:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    99ce:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    99d2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    99d4:	f013 ff4e 	bl	1d874 <net_buf_unref>
	return 0;
    99d8:	e7f1      	b.n	99be <hci_le_read_max_data_len+0x2a>
    99da:	bf00      	nop
    99dc:	0002827c 	.word	0x0002827c
    99e0:	000281b4 	.word	0x000281b4
    99e4:	0002cd33 	.word	0x0002cd33

000099e8 <hci_id_add>:
{
    99e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99ec:	4605      	mov	r5, r0
    99ee:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    99f0:	f242 0027 	movw	r0, #8231	; 0x2027
    99f4:	2127      	movs	r1, #39	; 0x27
{
    99f6:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    99f8:	f7ff fc9c 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    99fc:	4604      	mov	r4, r0
    99fe:	b1e8      	cbz	r0, 9a3c <hci_id_add+0x54>
	return net_buf_simple_add(&buf->b, len);
    9a00:	2127      	movs	r1, #39	; 0x27
    9a02:	3008      	adds	r0, #8
    9a04:	f01d f992 	bl	26d2c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    9a08:	4641      	mov	r1, r8
    9a0a:	4606      	mov	r6, r0
    9a0c:	f01b faeb 	bl	24fe6 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    9a10:	4639      	mov	r1, r7
    9a12:	2210      	movs	r2, #16
    9a14:	1df0      	adds	r0, r6, #7
    9a16:	f01b f91b 	bl	24c50 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    9a1a:	490a      	ldr	r1, [pc, #40]	; (9a44 <hci_id_add+0x5c>)
    9a1c:	3512      	adds	r5, #18
    9a1e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    9a22:	2210      	movs	r2, #16
    9a24:	f106 0017 	add.w	r0, r6, #23
    9a28:	f01b f912 	bl	24c50 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9a2c:	4621      	mov	r1, r4
    9a2e:	2200      	movs	r2, #0
}
    9a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9a34:	f242 0027 	movw	r0, #8231	; 0x2027
    9a38:	f7ff bddc 	b.w	95f4 <bt_hci_cmd_send_sync>
}
    9a3c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a44:	20000000 	.word	0x20000000

00009a48 <hci_set_ad>:
{
    9a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a4c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9a4e:	2120      	movs	r1, #32
{
    9a50:	4682      	mov	sl, r0
    9a52:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9a54:	f7ff fc6e 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    9a58:	4606      	mov	r6, r0
    9a5a:	2800      	cmp	r0, #0
    9a5c:	d05c      	beq.n	9b18 <hci_set_ad+0xd0>
    9a5e:	2120      	movs	r1, #32
    9a60:	3008      	adds	r0, #8
    9a62:	f01d f963 	bl	26d2c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    9a66:	2220      	movs	r2, #32
    9a68:	2100      	movs	r1, #0
    9a6a:	4681      	mov	r9, r0
    9a6c:	f01b f91b 	bl	24ca6 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9a70:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    9a74:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    9a78:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    9a7a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9a7c:	f8d4 8000 	ldr.w	r8, [r4]
    9a80:	2300      	movs	r3, #0
    9a82:	6862      	ldr	r2, [r4, #4]
    9a84:	4293      	cmp	r3, r2
    9a86:	d30d      	bcc.n	9aa4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    9a88:	9b00      	ldr	r3, [sp, #0]
    9a8a:	3408      	adds	r4, #8
    9a8c:	429c      	cmp	r4, r3
    9a8e:	d1f5      	bne.n	9a7c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a90:	2200      	movs	r2, #0
    9a92:	4631      	mov	r1, r6
    9a94:	4650      	mov	r0, sl
	*data_len = set_data_len;
    9a96:	f889 5000 	strb.w	r5, [r9]
}
    9a9a:	b003      	add	sp, #12
    9a9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9aa0:	f7ff bda8 	b.w	95f4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9aa4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    9aa8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9aac:	1ca8      	adds	r0, r5, #2
    9aae:	1881      	adds	r1, r0, r2
    9ab0:	291f      	cmp	r1, #31
    9ab2:	d91a      	bls.n	9aea <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9ab4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    9ab8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9abc:	d101      	bne.n	9ac2 <hci_set_ad+0x7a>
    9abe:	2a00      	cmp	r2, #0
    9ac0:	dc11      	bgt.n	9ae6 <hci_set_ad+0x9e>
    9ac2:	4b17      	ldr	r3, [pc, #92]	; (9b20 <hci_set_ad+0xd8>)
    9ac4:	4917      	ldr	r1, [pc, #92]	; (9b24 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    9ac6:	4818      	ldr	r0, [pc, #96]	; (9b28 <hci_set_ad+0xe0>)
    9ac8:	1ac9      	subs	r1, r1, r3
    9aca:	08c9      	lsrs	r1, r1, #3
    9acc:	0189      	lsls	r1, r1, #6
    9ace:	f041 0101 	orr.w	r1, r1, #1
    9ad2:	f019 f897 	bl	22c04 <log_0>
		net_buf_unref(buf);
    9ad6:	4630      	mov	r0, r6
    9ad8:	f013 fecc 	bl	1d874 <net_buf_unref>
					return -EINVAL;
    9adc:	f06f 0015 	mvn.w	r0, #21
}
    9ae0:	b003      	add	sp, #12
    9ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    9ae6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    9aea:	b2d7      	uxtb	r7, r2
    9aec:	1c79      	adds	r1, r7, #1
    9aee:	f80b 1005 	strb.w	r1, [fp, r5]
    9af2:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    9af4:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    9af6:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    9afa:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    9afe:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9b02:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    9b04:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    9b06:	f01b f8a3 	bl	24c50 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9b0a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9b0c:	443d      	add	r5, r7
    9b0e:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    9b10:	3301      	adds	r3, #1
    9b12:	f108 0808 	add.w	r8, r8, #8
    9b16:	e7b4      	b.n	9a82 <hci_set_ad+0x3a>
		return -ENOBUFS;
    9b18:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9b1c:	e7e0      	b.n	9ae0 <hci_set_ad+0x98>
    9b1e:	bf00      	nop
    9b20:	000281b4 	.word	0x000281b4
    9b24:	0002827c 	.word	0x0002827c
    9b28:	0002cd53 	.word	0x0002cd53

00009b2c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    9b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b30:	b087      	sub	sp, #28
    9b32:	4606      	mov	r6, r0
    9b34:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9b38:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    9b3c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    9b40:	460c      	mov	r4, r1
    9b42:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    9b44:	2100      	movs	r1, #0
    9b46:	2210      	movs	r2, #16
    9b48:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    9b4a:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    9b4c:	f01b f8ab 	bl	24ca6 <memset>
	if (use_name) {
    9b50:	f1b8 0f00 	cmp.w	r8, #0
    9b54:	d00e      	beq.n	9b74 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    9b56:	bbb4      	cbnz	r4, 9bc6 <le_adv_update.constprop.0+0x9a>
    9b58:	2d00      	cmp	r5, #0
    9b5a:	d13f      	bne.n	9bdc <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    9b5c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 9c10 <le_adv_update.constprop.0+0xe4>
    9b60:	4658      	mov	r0, fp
    9b62:	f01b f837 	bl	24bd4 <strlen>
    9b66:	2309      	movs	r3, #9
    9b68:	f88d 3000 	strb.w	r3, [sp]
    9b6c:	f88d 0001 	strb.w	r0, [sp, #1]
    9b70:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    9b74:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    9b78:	f1b8 0f00 	cmp.w	r8, #0
    9b7c:	d030      	beq.n	9be0 <le_adv_update.constprop.0+0xb4>
    9b7e:	f1ba 0f00 	cmp.w	sl, #0
    9b82:	d12d      	bne.n	9be0 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    9b84:	2301      	movs	r3, #1
			d[1].data = &data;
    9b86:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    9b8a:	9305      	str	r3, [sp, #20]
			d_len = 2;
    9b8c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    9b8e:	a902      	add	r1, sp, #8
    9b90:	f242 0008 	movw	r0, #8200	; 0x2008
    9b94:	f7ff ff58 	bl	9a48 <hci_set_ad>
		if (err) {
    9b98:	4604      	mov	r4, r0
    9b9a:	b938      	cbnz	r0, 9bac <le_adv_update.constprop.0+0x80>
	if (scannable) {
    9b9c:	f1ba 0f00 	cmp.w	sl, #0
    9ba0:	d120      	bne.n	9be4 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9ba2:	2104      	movs	r1, #4
    9ba4:	f106 0010 	add.w	r0, r6, #16
    9ba8:	f01b fa20 	bl	24fec <atomic_or>
}
    9bac:	4620      	mov	r0, r4
    9bae:	b007      	add	sp, #28
    9bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9bb4:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    9bb8:	3a08      	subs	r2, #8
    9bba:	2a01      	cmp	r2, #1
    9bbc:	d925      	bls.n	9c0a <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9bbe:	3301      	adds	r3, #1
    9bc0:	429f      	cmp	r7, r3
    9bc2:	d1f7      	bne.n	9bb4 <le_adv_update.constprop.0+0x88>
    9bc4:	e7c8      	b.n	9b58 <le_adv_update.constprop.0+0x2c>
    9bc6:	2300      	movs	r3, #0
    9bc8:	e7fa      	b.n	9bc0 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9bca:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    9bce:	3a08      	subs	r2, #8
    9bd0:	2a01      	cmp	r2, #1
    9bd2:	d91a      	bls.n	9c0a <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9bd4:	3301      	adds	r3, #1
    9bd6:	4599      	cmp	r9, r3
    9bd8:	d1f7      	bne.n	9bca <le_adv_update.constprop.0+0x9e>
    9bda:	e7bf      	b.n	9b5c <le_adv_update.constprop.0+0x30>
    9bdc:	2300      	movs	r3, #0
    9bde:	e7fa      	b.n	9bd6 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    9be0:	2201      	movs	r2, #1
    9be2:	e7d4      	b.n	9b8e <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    9be4:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    9be8:	2201      	movs	r2, #1
    9bea:	f1b8 0f00 	cmp.w	r8, #0
    9bee:	d003      	beq.n	9bf8 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    9bf0:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    9bf2:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    9bf6:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    9bf8:	a902      	add	r1, sp, #8
    9bfa:	f242 0009 	movw	r0, #8201	; 0x2009
    9bfe:	f7ff ff23 	bl	9a48 <hci_set_ad>
		if (err) {
    9c02:	2800      	cmp	r0, #0
    9c04:	d0cd      	beq.n	9ba2 <le_adv_update.constprop.0+0x76>
    9c06:	4604      	mov	r4, r0
    9c08:	e7d0      	b.n	9bac <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    9c0a:	f06f 0415 	mvn.w	r4, #21
    9c0e:	e7cd      	b.n	9bac <le_adv_update.constprop.0+0x80>
    9c10:	20000160 	.word	0x20000160

00009c14 <conn_auto_initiate>:
{
    9c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9c16:	7b43      	ldrb	r3, [r0, #13]
    9c18:	2b07      	cmp	r3, #7
{
    9c1a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9c1c:	d169      	bne.n	9cf2 <conn_auto_initiate+0xde>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    9c1e:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9c20:	4630      	mov	r0, r6
    9c22:	f01b f9d4 	bl	24fce <atomic_get>
    9c26:	0483      	lsls	r3, r0, #18
    9c28:	d41b      	bmi.n	9c62 <conn_auto_initiate+0x4e>
    9c2a:	78e3      	ldrb	r3, [r4, #3]
    9c2c:	b123      	cbz	r3, 9c38 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    9c2e:	4b32      	ldr	r3, [pc, #200]	; (9cf8 <conn_auto_initiate+0xe4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9c30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    9c34:	071d      	lsls	r5, r3, #28
    9c36:	d514      	bpl.n	9c62 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9c38:	2102      	movs	r1, #2
    9c3a:	f242 0016 	movw	r0, #8214	; 0x2016
    9c3e:	f7ff fb79 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    9c42:	4605      	mov	r5, r0
    9c44:	b168      	cbz	r0, 9c62 <conn_auto_initiate+0x4e>
    9c46:	2102      	movs	r1, #2
    9c48:	3008      	adds	r0, #8
    9c4a:	f01d f86f 	bl	26d2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9c4e:	8823      	ldrh	r3, [r4, #0]
    9c50:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9c52:	4629      	mov	r1, r5
    9c54:	f242 0016 	movw	r0, #8214	; 0x2016
}
    9c58:	b004      	add	sp, #16
    9c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9c5e:	f7ff bba3 	b.w	93a8 <bt_hci_cmd_send>
    9c62:	4630      	mov	r0, r6
    9c64:	f01b f9b3 	bl	24fce <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9c68:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9c6c:	4d22      	ldr	r5, [pc, #136]	; (9cf8 <conn_auto_initiate+0xe4>)
    9c6e:	f3c0 3100 	ubfx	r1, r0, #12, #1
    9c72:	d11c      	bne.n	9cae <conn_auto_initiate+0x9a>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    9c74:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    9c78:	07d8      	lsls	r0, r3, #31
    9c7a:	d518      	bpl.n	9cae <conn_auto_initiate+0x9a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    9c7c:	2302      	movs	r3, #2
    9c7e:	9100      	str	r1, [sp, #0]
    9c80:	461a      	mov	r2, r3
    9c82:	4620      	mov	r0, r4
    9c84:	f01b faaf 	bl	251e6 <bt_le_set_phy>
		if (!err) {
    9c88:	4601      	mov	r1, r0
    9c8a:	b930      	cbnz	r0, 9c9a <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9c8c:	2180      	movs	r1, #128	; 0x80
    9c8e:	4630      	mov	r0, r6
}
    9c90:	b004      	add	sp, #16
    9c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c96:	f01b b9a9 	b.w	24fec <atomic_or>
    9c9a:	4a18      	ldr	r2, [pc, #96]	; (9cfc <conn_auto_initiate+0xe8>)
    9c9c:	4b18      	ldr	r3, [pc, #96]	; (9d00 <conn_auto_initiate+0xec>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    9c9e:	4819      	ldr	r0, [pc, #100]	; (9d04 <conn_auto_initiate+0xf0>)
    9ca0:	1ad2      	subs	r2, r2, r3
    9ca2:	08d2      	lsrs	r2, r2, #3
    9ca4:	0192      	lsls	r2, r2, #6
    9ca6:	f042 0201 	orr.w	r2, r2, #1
    9caa:	f018 ffb8 	bl	22c1e <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    9cae:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9cb2:	069a      	lsls	r2, r3, #26
    9cb4:	d51d      	bpl.n	9cf2 <conn_auto_initiate+0xde>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    9cb6:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    9cba:	689b      	ldr	r3, [r3, #8]
    9cbc:	079b      	lsls	r3, r3, #30
    9cbe:	d518      	bpl.n	9cf2 <conn_auto_initiate+0xde>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9cc0:	f10d 010e 	add.w	r1, sp, #14
    9cc4:	a803      	add	r0, sp, #12
    9cc6:	f7ff fe65 	bl	9994 <hci_le_read_max_data_len>
			if (!err) {
    9cca:	b990      	cbnz	r0, 9cf2 <conn_auto_initiate+0xde>
				err = bt_le_set_data_len(conn,
    9ccc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9cd0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9cd4:	4620      	mov	r0, r4
    9cd6:	f01b fa69 	bl	251ac <bt_le_set_data_len>
				if (err) {
    9cda:	4601      	mov	r1, r0
    9cdc:	b148      	cbz	r0, 9cf2 <conn_auto_initiate+0xde>
    9cde:	4a07      	ldr	r2, [pc, #28]	; (9cfc <conn_auto_initiate+0xe8>)
    9ce0:	4b07      	ldr	r3, [pc, #28]	; (9d00 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
    9ce2:	4809      	ldr	r0, [pc, #36]	; (9d08 <conn_auto_initiate+0xf4>)
    9ce4:	1ad2      	subs	r2, r2, r3
    9ce6:	08d2      	lsrs	r2, r2, #3
    9ce8:	0192      	lsls	r2, r2, #6
    9cea:	f042 0201 	orr.w	r2, r2, #1
    9cee:	f018 ff96 	bl	22c1e <log_1>
}
    9cf2:	b004      	add	sp, #16
    9cf4:	bd70      	pop	{r4, r5, r6, pc}
    9cf6:	bf00      	nop
    9cf8:	20000000 	.word	0x20000000
    9cfc:	0002827c 	.word	0x0002827c
    9d00:	000281b4 	.word	0x000281b4
    9d04:	0002cd6c 	.word	0x0002cd6c
    9d08:	0002cd86 	.word	0x0002cd86

00009d0c <le_phy_update_complete>:
{
    9d0c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9d0e:	6883      	ldr	r3, [r0, #8]
    9d10:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    9d14:	4628      	mov	r0, r5
    9d16:	f001 fcc1 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    9d1a:	4604      	mov	r4, r0
    9d1c:	b960      	cbnz	r0, 9d38 <le_phy_update_complete+0x2c>
    9d1e:	4b11      	ldr	r3, [pc, #68]	; (9d64 <le_phy_update_complete+0x58>)
    9d20:	4a11      	ldr	r2, [pc, #68]	; (9d68 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9d22:	4812      	ldr	r0, [pc, #72]	; (9d6c <le_phy_update_complete+0x60>)
    9d24:	1ad2      	subs	r2, r2, r3
    9d26:	08d2      	lsrs	r2, r2, #3
    9d28:	0192      	lsls	r2, r2, #6
    9d2a:	4629      	mov	r1, r5
    9d2c:	f042 0201 	orr.w	r2, r2, #1
}
    9d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9d34:	f018 bf73 	b.w	22c1e <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    9d38:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9d3a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    9d3e:	4628      	mov	r0, r5
    9d40:	f01b f936 	bl	24fb0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9d44:	0603      	lsls	r3, r0, #24
    9d46:	d507      	bpl.n	9d58 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9d4c:	4628      	mov	r0, r5
    9d4e:	f01b f94d 	bl	24fec <atomic_or>
		conn_auto_initiate(conn);
    9d52:	4620      	mov	r0, r4
    9d54:	f7ff ff5e 	bl	9c14 <conn_auto_initiate>
	bt_conn_unref(conn);
    9d58:	4620      	mov	r0, r4
}
    9d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    9d5e:	f01b bbaf 	b.w	254c0 <bt_conn_unref>
    9d62:	bf00      	nop
    9d64:	000281b4 	.word	0x000281b4
    9d68:	0002827c 	.word	0x0002827c
    9d6c:	0002ca7d 	.word	0x0002ca7d

00009d70 <le_remote_feat_complete>:
{
    9d70:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    9d72:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9d74:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9d78:	4630      	mov	r0, r6
    9d7a:	f001 fc8f 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    9d7e:	4604      	mov	r4, r0
    9d80:	b960      	cbnz	r0, 9d9c <le_remote_feat_complete+0x2c>
    9d82:	4a10      	ldr	r2, [pc, #64]	; (9dc4 <le_remote_feat_complete+0x54>)
    9d84:	4b10      	ldr	r3, [pc, #64]	; (9dc8 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9d86:	4811      	ldr	r0, [pc, #68]	; (9dcc <le_remote_feat_complete+0x5c>)
    9d88:	1ad2      	subs	r2, r2, r3
    9d8a:	08d2      	lsrs	r2, r2, #3
    9d8c:	0192      	lsls	r2, r2, #6
    9d8e:	4631      	mov	r1, r6
    9d90:	f042 0201 	orr.w	r2, r2, #1
}
    9d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9d98:	f018 bf41 	b.w	22c1e <log_1>
	if (!evt->status) {
    9d9c:	782b      	ldrb	r3, [r5, #0]
    9d9e:	b923      	cbnz	r3, 9daa <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    9da0:	2208      	movs	r2, #8
    9da2:	1ce9      	adds	r1, r5, #3
    9da4:	30ac      	adds	r0, #172	; 0xac
    9da6:	f01a ff53 	bl	24c50 <memcpy>
    9daa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    9dae:	1d20      	adds	r0, r4, #4
    9db0:	f01b f91c 	bl	24fec <atomic_or>
	conn_auto_initiate(conn);
    9db4:	4620      	mov	r0, r4
    9db6:	f7ff ff2d 	bl	9c14 <conn_auto_initiate>
	bt_conn_unref(conn);
    9dba:	4620      	mov	r0, r4
}
    9dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9dc0:	f01b bb7e 	b.w	254c0 <bt_conn_unref>
    9dc4:	0002827c 	.word	0x0002827c
    9dc8:	000281b4 	.word	0x000281b4
    9dcc:	0002ca7d 	.word	0x0002ca7d

00009dd0 <bt_unpair>:
{
    9dd0:	b530      	push	{r4, r5, lr}
    9dd2:	b085      	sub	sp, #20
    9dd4:	460d      	mov	r5, r1
    9dd6:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    9dda:	b9c8      	cbnz	r0, 9e10 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9ddc:	b949      	cbnz	r1, 9df2 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    9dde:	490e      	ldr	r1, [pc, #56]	; (9e18 <bt_unpair+0x48>)
    9de0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9de4:	f10d 0207 	add.w	r2, sp, #7
    9de8:	f006 fb02 	bl	103f0 <bt_foreach_bond>
		return 0;
    9dec:	2000      	movs	r0, #0
}
    9dee:	b005      	add	sp, #20
    9df0:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    9df2:	9002      	str	r0, [sp, #8]
    9df4:	a902      	add	r1, sp, #8
    9df6:	f8cd 000b 	str.w	r0, [sp, #11]
    9dfa:	4628      	mov	r0, r5
    9dfc:	f01b f8ed 	bl	24fda <bt_addr_le_cmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9e00:	2800      	cmp	r0, #0
    9e02:	d0ec      	beq.n	9dde <bt_unpair+0xe>
	unpair(id, addr);
    9e04:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9e08:	4629      	mov	r1, r5
    9e0a:	f7fe fe47 	bl	8a9c <unpair>
	return 0;
    9e0e:	e7ed      	b.n	9dec <bt_unpair+0x1c>
		return -EINVAL;
    9e10:	f06f 0015 	mvn.w	r0, #21
    9e14:	e7eb      	b.n	9dee <bt_unpair+0x1e>
    9e16:	bf00      	nop
    9e18:	00025043 	.word	0x00025043

00009e1c <bt_security_err_get>:
	switch (hci_err) {
    9e1c:	2829      	cmp	r0, #41	; 0x29
    9e1e:	bf9a      	itte	ls
    9e20:	4b01      	ldrls	r3, [pc, #4]	; (9e28 <bt_security_err_get+0xc>)
    9e22:	5c18      	ldrbls	r0, [r3, r0]
{
    9e24:	2008      	movhi	r0, #8
}
    9e26:	4770      	bx	lr
    9e28:	0002d36b 	.word	0x0002d36b

00009e2c <hci_encrypt_key_refresh_complete>:
{
    9e2c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    9e2e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9e30:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    9e34:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    9e36:	4630      	mov	r0, r6
    9e38:	f001 fc30 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    9e3c:	4604      	mov	r4, r0
    9e3e:	b960      	cbnz	r0, 9e5a <hci_encrypt_key_refresh_complete+0x2e>
    9e40:	4a1f      	ldr	r2, [pc, #124]	; (9ec0 <hci_encrypt_key_refresh_complete+0x94>)
    9e42:	4b20      	ldr	r3, [pc, #128]	; (9ec4 <hci_encrypt_key_refresh_complete+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9e44:	4820      	ldr	r0, [pc, #128]	; (9ec8 <hci_encrypt_key_refresh_complete+0x9c>)
    9e46:	1ad2      	subs	r2, r2, r3
    9e48:	08d2      	lsrs	r2, r2, #3
    9e4a:	0192      	lsls	r2, r2, #6
    9e4c:	4631      	mov	r1, r6
    9e4e:	f042 0201 	orr.w	r2, r2, #1
}
    9e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9e56:	f018 bee2 	b.w	22c1e <log_1>
	if (status) {
    9e5a:	b165      	cbz	r5, 9e76 <hci_encrypt_key_refresh_complete+0x4a>
		bt_conn_security_changed(conn, status,
    9e5c:	4628      	mov	r0, r5
    9e5e:	f7ff ffdd 	bl	9e1c <bt_security_err_get>
    9e62:	4629      	mov	r1, r5
    9e64:	4602      	mov	r2, r0
    9e66:	4620      	mov	r0, r4
    9e68:	f001 fa6c 	bl	b344 <bt_conn_security_changed>
	bt_conn_unref(conn);
    9e6c:	4620      	mov	r0, r4
}
    9e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9e72:	f01b bb25 	b.w	254c0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9e76:	7883      	ldrb	r3, [r0, #2]
    9e78:	2b01      	cmp	r3, #1
    9e7a:	d107      	bne.n	9e8c <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    9e7c:	f006 f98c 	bl	10198 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9e80:	4620      	mov	r0, r4
    9e82:	f01b f86e 	bl	24f62 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9e86:	2800      	cmp	r0, #0
    9e88:	bf08      	it	eq
    9e8a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9e8c:	4628      	mov	r0, r5
    9e8e:	f7ff ffc5 	bl	9e1c <bt_security_err_get>
    9e92:	4629      	mov	r1, r5
    9e94:	4602      	mov	r2, r0
    9e96:	4620      	mov	r0, r4
    9e98:	f001 fa54 	bl	b344 <bt_conn_security_changed>
	if (status) {
    9e9c:	2d00      	cmp	r5, #0
    9e9e:	d0e5      	beq.n	9e6c <hci_encrypt_key_refresh_complete+0x40>
    9ea0:	4b08      	ldr	r3, [pc, #32]	; (9ec4 <hci_encrypt_key_refresh_complete+0x98>)
    9ea2:	4907      	ldr	r1, [pc, #28]	; (9ec0 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Failed to set required security level");
    9ea4:	4809      	ldr	r0, [pc, #36]	; (9ecc <hci_encrypt_key_refresh_complete+0xa0>)
    9ea6:	1ac9      	subs	r1, r1, r3
    9ea8:	08c9      	lsrs	r1, r1, #3
    9eaa:	0189      	lsls	r1, r1, #6
    9eac:	f041 0101 	orr.w	r1, r1, #1
    9eb0:	f018 fea8 	bl	22c04 <log_0>
		bt_conn_disconnect(conn, status);
    9eb4:	4629      	mov	r1, r5
    9eb6:	4620      	mov	r0, r4
    9eb8:	f01b fb3d 	bl	25536 <bt_conn_disconnect>
    9ebc:	e7d6      	b.n	9e6c <hci_encrypt_key_refresh_complete+0x40>
    9ebe:	bf00      	nop
    9ec0:	0002827c 	.word	0x0002827c
    9ec4:	000281b4 	.word	0x000281b4
    9ec8:	0002caa1 	.word	0x0002caa1
    9ecc:	0002cda2 	.word	0x0002cda2

00009ed0 <hci_encrypt_change>:
{
    9ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    9ed2:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9ed4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    9ed8:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    9eda:	4638      	mov	r0, r7
    9edc:	f001 fbde 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    9ee0:	4604      	mov	r4, r0
    9ee2:	b960      	cbnz	r0, 9efe <hci_encrypt_change+0x2e>
    9ee4:	4b20      	ldr	r3, [pc, #128]	; (9f68 <hci_encrypt_change+0x98>)
    9ee6:	4a21      	ldr	r2, [pc, #132]	; (9f6c <hci_encrypt_change+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9ee8:	4821      	ldr	r0, [pc, #132]	; (9f70 <hci_encrypt_change+0xa0>)
    9eea:	1ad2      	subs	r2, r2, r3
    9eec:	08d2      	lsrs	r2, r2, #3
    9eee:	0192      	lsls	r2, r2, #6
    9ef0:	4639      	mov	r1, r7
    9ef2:	f042 0201 	orr.w	r2, r2, #1
}
    9ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9efa:	f018 be90 	b.w	22c1e <log_1>
	if (status) {
    9efe:	b165      	cbz	r5, 9f1a <hci_encrypt_change+0x4a>
		bt_conn_security_changed(conn, status,
    9f00:	4628      	mov	r0, r5
    9f02:	f7ff ff8b 	bl	9e1c <bt_security_err_get>
    9f06:	4629      	mov	r1, r5
    9f08:	4602      	mov	r2, r0
    9f0a:	4620      	mov	r0, r4
    9f0c:	f001 fa1a 	bl	b344 <bt_conn_security_changed>
	bt_conn_unref(conn);
    9f10:	4620      	mov	r0, r4
}
    9f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    9f16:	f01b bad3 	b.w	254c0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9f1a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    9f1c:	78f3      	ldrb	r3, [r6, #3]
    9f1e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    9f20:	2a01      	cmp	r2, #1
    9f22:	d108      	bne.n	9f36 <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    9f24:	b10b      	cbz	r3, 9f2a <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    9f26:	f006 f937 	bl	10198 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9f2a:	4620      	mov	r0, r4
    9f2c:	f01b f819 	bl	24f62 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9f30:	2800      	cmp	r0, #0
    9f32:	bf08      	it	eq
    9f34:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9f36:	4628      	mov	r0, r5
    9f38:	f7ff ff70 	bl	9e1c <bt_security_err_get>
    9f3c:	4629      	mov	r1, r5
    9f3e:	4602      	mov	r2, r0
    9f40:	4620      	mov	r0, r4
    9f42:	f001 f9ff 	bl	b344 <bt_conn_security_changed>
	if (status) {
    9f46:	2d00      	cmp	r5, #0
    9f48:	d0e2      	beq.n	9f10 <hci_encrypt_change+0x40>
    9f4a:	4b07      	ldr	r3, [pc, #28]	; (9f68 <hci_encrypt_change+0x98>)
    9f4c:	4907      	ldr	r1, [pc, #28]	; (9f6c <hci_encrypt_change+0x9c>)
		BT_ERR("Failed to set required security level");
    9f4e:	4809      	ldr	r0, [pc, #36]	; (9f74 <hci_encrypt_change+0xa4>)
    9f50:	1ac9      	subs	r1, r1, r3
    9f52:	08c9      	lsrs	r1, r1, #3
    9f54:	0189      	lsls	r1, r1, #6
    9f56:	f041 0101 	orr.w	r1, r1, #1
    9f5a:	f018 fe53 	bl	22c04 <log_0>
		bt_conn_disconnect(conn, status);
    9f5e:	4629      	mov	r1, r5
    9f60:	4620      	mov	r0, r4
    9f62:	f01b fae8 	bl	25536 <bt_conn_disconnect>
    9f66:	e7d3      	b.n	9f10 <hci_encrypt_change+0x40>
    9f68:	000281b4 	.word	0x000281b4
    9f6c:	0002827c 	.word	0x0002827c
    9f70:	0002caa1 	.word	0x0002caa1
    9f74:	0002cda2 	.word	0x0002cda2

00009f78 <bt_id_add>:
{
    9f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9f7a:	4c5d      	ldr	r4, [pc, #372]	; (a0f0 <bt_id_add+0x178>)
    9f7c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    9f80:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    9f84:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9f86:	b10a      	cbz	r2, 9f8c <bt_id_add+0x14>
    9f88:	429a      	cmp	r2, r3
    9f8a:	d208      	bcs.n	9f9e <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    9f8c:	3301      	adds	r3, #1
    9f8e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    9f92:	7a2b      	ldrb	r3, [r5, #8]
    9f94:	f043 0304 	orr.w	r3, r3, #4
    9f98:	722b      	strb	r3, [r5, #8]
}
    9f9a:	b003      	add	sp, #12
    9f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9f9e:	2100      	movs	r1, #0
    9fa0:	2206      	movs	r2, #6
    9fa2:	4608      	mov	r0, r1
    9fa4:	f001 fcba 	bl	b91c <bt_conn_lookup_state_le>
	if (conn) {
    9fa8:	4606      	mov	r6, r0
    9faa:	b178      	cbz	r0, 9fcc <bt_id_add+0x54>
    9fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9fb0:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9fb4:	f01b f81a 	bl	24fec <atomic_or>
	keys->state |= flag;
    9fb8:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    9fba:	4630      	mov	r0, r6
	keys->state |= flag;
    9fbc:	f043 0301 	orr.w	r3, r3, #1
    9fc0:	722b      	strb	r3, [r5, #8]
}
    9fc2:	b003      	add	sp, #12
    9fc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    9fc8:	f01b ba7a 	b.w	254c0 <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    9fcc:	4601      	mov	r1, r0
    9fce:	4849      	ldr	r0, [pc, #292]	; (a0f4 <bt_id_add+0x17c>)
    9fd0:	f7fe fc84 	bl	88dc <bt_adv_foreach>
	if (bt_dev.le.rl_entries) {
    9fd4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9fd8:	b173      	cbz	r3, 9ff8 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9fda:	4630      	mov	r0, r6
    9fdc:	f01b f8ab 	bl	25136 <addr_res_enable>
		if (err) {
    9fe0:	b150      	cbz	r0, 9ff8 <bt_id_add+0x80>
    9fe2:	4945      	ldr	r1, [pc, #276]	; (a0f8 <bt_id_add+0x180>)
    9fe4:	4b45      	ldr	r3, [pc, #276]	; (a0fc <bt_id_add+0x184>)
			BT_WARN("Failed to disable address resolution");
    9fe6:	4846      	ldr	r0, [pc, #280]	; (a100 <bt_id_add+0x188>)
    9fe8:	1ac9      	subs	r1, r1, r3
    9fea:	08c9      	lsrs	r1, r1, #3
    9fec:	0189      	lsls	r1, r1, #6
    9fee:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    9ff2:	f018 fe07 	bl	22c04 <log_0>
	if (err) {
    9ff6:	e023      	b.n	a040 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9ff8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    9ffc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    a000:	429a      	cmp	r2, r3
    a002:	d127      	bne.n	a054 <bt_id_add+0xdc>
    a004:	4b3d      	ldr	r3, [pc, #244]	; (a0fc <bt_id_add+0x184>)
    a006:	4e3c      	ldr	r6, [pc, #240]	; (a0f8 <bt_id_add+0x180>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    a008:	483e      	ldr	r0, [pc, #248]	; (a104 <bt_id_add+0x18c>)
    a00a:	1af6      	subs	r6, r6, r3
    a00c:	08f6      	lsrs	r6, r6, #3
    a00e:	01b6      	lsls	r6, r6, #6
    a010:	f046 0102 	orr.w	r1, r6, #2
    a014:	f018 fdf6 	bl	22c04 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    a018:	2200      	movs	r2, #0
    a01a:	4611      	mov	r1, r2
    a01c:	f242 0029 	movw	r0, #8233	; 0x2029
    a020:	f7ff fae8 	bl	95f4 <bt_hci_cmd_send_sync>
		if (err) {
    a024:	b118      	cbz	r0, a02e <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    a026:	4838      	ldr	r0, [pc, #224]	; (a108 <bt_id_add+0x190>)
    a028:	f046 0101 	orr.w	r1, r6, #1
    a02c:	e7e1      	b.n	9ff2 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    a02e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    a032:	3301      	adds	r3, #1
    a034:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    a038:	7a2b      	ldrb	r3, [r5, #8]
    a03a:	f043 0304 	orr.w	r3, r3, #4
    a03e:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a040:	2001      	movs	r0, #1
    a042:	f01b f878 	bl	25136 <addr_res_enable>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a046:	4831      	ldr	r0, [pc, #196]	; (a10c <bt_id_add+0x194>)
    a048:	2100      	movs	r1, #0
}
    a04a:	b003      	add	sp, #12
    a04c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a050:	f7fe bc44 	b.w	88dc <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    a054:	462a      	mov	r2, r5
    a056:	1c6f      	adds	r7, r5, #1
    a058:	f812 0b2a 	ldrb.w	r0, [r2], #42
    a05c:	4639      	mov	r1, r7
    a05e:	f7ff fcc3 	bl	99e8 <hci_id_add>
	if (err) {
    a062:	4606      	mov	r6, r0
    a064:	b140      	cbz	r0, a078 <bt_id_add+0x100>
    a066:	4924      	ldr	r1, [pc, #144]	; (a0f8 <bt_id_add+0x180>)
    a068:	4b24      	ldr	r3, [pc, #144]	; (a0fc <bt_id_add+0x184>)
		BT_ERR("Failed to add IRK to controller");
    a06a:	4829      	ldr	r0, [pc, #164]	; (a110 <bt_id_add+0x198>)
    a06c:	1ac9      	subs	r1, r1, r3
    a06e:	08c9      	lsrs	r1, r1, #3
    a070:	0189      	lsls	r1, r1, #6
    a072:	f041 0101 	orr.w	r1, r1, #1
    a076:	e7bc      	b.n	9ff2 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    a078:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    a07c:	3301      	adds	r3, #1
    a07e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    a082:	7a2b      	ldrb	r3, [r5, #8]
    a084:	f043 0304 	orr.w	r3, r3, #4
    a088:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    a08a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    a08e:	075b      	lsls	r3, r3, #29
    a090:	d408      	bmi.n	a0a4 <bt_id_add+0x12c>
    a092:	4919      	ldr	r1, [pc, #100]	; (a0f8 <bt_id_add+0x180>)
    a094:	4b19      	ldr	r3, [pc, #100]	; (a0fc <bt_id_add+0x184>)
		BT_WARN("Set privacy mode command is not supported");
    a096:	481f      	ldr	r0, [pc, #124]	; (a114 <bt_id_add+0x19c>)
    a098:	1ac9      	subs	r1, r1, r3
    a09a:	08c9      	lsrs	r1, r1, #3
    a09c:	0189      	lsls	r1, r1, #6
    a09e:	f041 0102 	orr.w	r1, r1, #2
    a0a2:	e7a6      	b.n	9ff2 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    a0a4:	4639      	mov	r1, r7
    a0a6:	4668      	mov	r0, sp
    a0a8:	f01a ff9d 	bl	24fe6 <bt_addr_le_copy>
	cp.mode = mode;
    a0ac:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    a0ae:	2108      	movs	r1, #8
    a0b0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    a0b4:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    a0b8:	f7ff f93c 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    a0bc:	4604      	mov	r4, r0
    a0be:	b940      	cbnz	r0, a0d2 <bt_id_add+0x15a>
    a0c0:	490d      	ldr	r1, [pc, #52]	; (a0f8 <bt_id_add+0x180>)
    a0c2:	4b0e      	ldr	r3, [pc, #56]	; (a0fc <bt_id_add+0x184>)
		BT_ERR("Failed to set privacy mode");
    a0c4:	4814      	ldr	r0, [pc, #80]	; (a118 <bt_id_add+0x1a0>)
    a0c6:	1ac9      	subs	r1, r1, r3
    a0c8:	08c9      	lsrs	r1, r1, #3
    a0ca:	0189      	lsls	r1, r1, #6
    a0cc:	f041 0101 	orr.w	r1, r1, #1
    a0d0:	e78f      	b.n	9ff2 <bt_id_add+0x7a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a0d2:	2208      	movs	r2, #8
    a0d4:	4669      	mov	r1, sp
    a0d6:	4410      	add	r0, r2
    a0d8:	f01c fe2e 	bl	26d38 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    a0dc:	4632      	mov	r2, r6
    a0de:	4621      	mov	r1, r4
    a0e0:	f242 004e 	movw	r0, #8270	; 0x204e
    a0e4:	f7ff fa86 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d0a9      	beq.n	a040 <bt_id_add+0xc8>
    a0ec:	e7e8      	b.n	a0c0 <bt_id_add+0x148>
    a0ee:	bf00      	nop
    a0f0:	20000000 	.word	0x20000000
    a0f4:	000250d7 	.word	0x000250d7
    a0f8:	0002827c 	.word	0x0002827c
    a0fc:	000281b4 	.word	0x000281b4
    a100:	0002cdc8 	.word	0x0002cdc8
    a104:	0002cded 	.word	0x0002cded
    a108:	0002ce1e 	.word	0x0002ce1e
    a10c:	00025101 	.word	0x00025101
    a110:	0002ce3e 	.word	0x0002ce3e
    a114:	0002ce5e 	.word	0x0002ce5e
    a118:	0002ce88 	.word	0x0002ce88

0000a11c <bt_id_del>:
{
    a11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    a120:	4d44      	ldr	r5, [pc, #272]	; (a234 <bt_id_del+0x118>)
    a122:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a126:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
{
    a12a:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    a12c:	b112      	cbz	r2, a134 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a12e:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    a130:	4293      	cmp	r3, r2
    a132:	dd08      	ble.n	a146 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    a134:	3b01      	subs	r3, #1
    a136:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    a13a:	7a23      	ldrb	r3, [r4, #8]
    a13c:	f023 0304 	bic.w	r3, r3, #4
    a140:	7223      	strb	r3, [r4, #8]
}
    a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a146:	2100      	movs	r1, #0
    a148:	2206      	movs	r2, #6
    a14a:	4608      	mov	r0, r1
    a14c:	f001 fbe6 	bl	b91c <bt_conn_lookup_state_le>
	if (conn) {
    a150:	4606      	mov	r6, r0
    a152:	b170      	cbz	r0, a172 <bt_id_del+0x56>
    a154:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a158:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a15c:	f01a ff46 	bl	24fec <atomic_or>
	keys->state |= flag;
    a160:	7a23      	ldrb	r3, [r4, #8]
    a162:	f043 0302 	orr.w	r3, r3, #2
    a166:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    a168:	4630      	mov	r0, r6
}
    a16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    a16e:	f01b b9a7 	b.w	254c0 <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    a172:	4601      	mov	r1, r0
    a174:	4830      	ldr	r0, [pc, #192]	; (a238 <bt_id_del+0x11c>)
    a176:	f7fe fbb1 	bl	88dc <bt_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    a17a:	4630      	mov	r0, r6
    a17c:	f01a ffdb 	bl	25136 <addr_res_enable>
	if (err) {
    a180:	4606      	mov	r6, r0
    a182:	b1b0      	cbz	r0, a1b2 <bt_id_del+0x96>
    a184:	4a2d      	ldr	r2, [pc, #180]	; (a23c <bt_id_del+0x120>)
    a186:	4b2e      	ldr	r3, [pc, #184]	; (a240 <bt_id_del+0x124>)
    a188:	1ad2      	subs	r2, r2, r3
    a18a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    a18c:	0192      	lsls	r2, r2, #6
    a18e:	4601      	mov	r1, r0
    a190:	f042 0201 	orr.w	r2, r2, #1
    a194:	482b      	ldr	r0, [pc, #172]	; (a244 <bt_id_del+0x128>)
    a196:	f018 fd42 	bl	22c1e <log_1>
	if (bt_dev.le.rl_entries) {
    a19a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a19e:	b113      	cbz	r3, a1a6 <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a1a0:	2001      	movs	r0, #1
    a1a2:	f01a ffc8 	bl	25136 <addr_res_enable>
}
    a1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a1aa:	4827      	ldr	r0, [pc, #156]	; (a248 <bt_id_del+0x12c>)
    a1ac:	2100      	movs	r1, #0
    a1ae:	f7fe bb95 	b.w	88dc <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a1b2:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a1b6:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    a1ba:	429a      	cmp	r2, r3
    a1bc:	d20c      	bcs.n	a1d8 <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
    a1be:	3b01      	subs	r3, #1
    a1c0:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    a1c4:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a1c6:	4921      	ldr	r1, [pc, #132]	; (a24c <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    a1c8:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a1cc:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    a1ce:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a1d0:	2002      	movs	r0, #2
    a1d2:	f006 f935 	bl	10440 <bt_keys_foreach>
		goto done;
    a1d6:	e7e0      	b.n	a19a <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    a1d8:	2107      	movs	r1, #7
    a1da:	f242 0028 	movw	r0, #8232	; 0x2028
    a1de:	f7ff f8a9 	bl	9334 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    a1e2:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    a1e6:	4607      	mov	r7, r0
    a1e8:	b950      	cbnz	r0, a200 <bt_id_del+0xe4>
    a1ea:	4b15      	ldr	r3, [pc, #84]	; (a240 <bt_id_del+0x124>)
    a1ec:	4913      	ldr	r1, [pc, #76]	; (a23c <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    a1ee:	4818      	ldr	r0, [pc, #96]	; (a250 <bt_id_del+0x134>)
    a1f0:	1ac9      	subs	r1, r1, r3
    a1f2:	08c9      	lsrs	r1, r1, #3
    a1f4:	0189      	lsls	r1, r1, #6
    a1f6:	f041 0101 	orr.w	r1, r1, #1
    a1fa:	f018 fd03 	bl	22c04 <log_0>
		goto done;
    a1fe:	e7cc      	b.n	a19a <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
    a200:	2107      	movs	r1, #7
    a202:	3008      	adds	r0, #8
    a204:	f01c fd92 	bl	26d2c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    a208:	4641      	mov	r1, r8
    a20a:	f01a feec 	bl	24fe6 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    a20e:	4632      	mov	r2, r6
    a210:	4639      	mov	r1, r7
    a212:	f242 0028 	movw	r0, #8232	; 0x2028
    a216:	f7ff f9ed 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    a21a:	2800      	cmp	r0, #0
    a21c:	d1e5      	bne.n	a1ea <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
    a21e:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a222:	3b01      	subs	r3, #1
    a224:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    a228:	7a23      	ldrb	r3, [r4, #8]
    a22a:	f023 0304 	bic.w	r3, r3, #4
    a22e:	7223      	strb	r3, [r4, #8]
    a230:	e7b3      	b.n	a19a <bt_id_del+0x7e>
    a232:	bf00      	nop
    a234:	20000000 	.word	0x20000000
    a238:	000250d7 	.word	0x000250d7
    a23c:	0002827c 	.word	0x0002827c
    a240:	000281b4 	.word	0x000281b4
    a244:	0002cea3 	.word	0x0002cea3
    a248:	00025101 	.word	0x00025101
    a24c:	00025121 	.word	0x00025121
    a250:	0002ced0 	.word	0x0002ced0

0000a254 <hci_event_prio>:
{
    a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a258:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    a25a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    a25e:	4630      	mov	r0, r6
    a260:	f01c fd9b 	bl	26d9a <net_buf_simple_headroom>
	state->len = buf->len;
    a264:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a268:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    a26c:	4605      	mov	r5, r0
    a26e:	d80c      	bhi.n	a28a <hci_event_prio+0x36>
    a270:	4a1c      	ldr	r2, [pc, #112]	; (a2e4 <hci_event_prio+0x90>)
    a272:	491d      	ldr	r1, [pc, #116]	; (a2e8 <hci_event_prio+0x94>)
    a274:	481d      	ldr	r0, [pc, #116]	; (a2ec <hci_event_prio+0x98>)
    a276:	f641 03b8 	movw	r3, #6328	; 0x18b8
    a27a:	f018 f82d 	bl	222d8 <printk>
    a27e:	4040      	eors	r0, r0
    a280:	f380 8811 	msr	BASEPRI, r0
    a284:	f04f 0003 	mov.w	r0, #3
    a288:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a28a:	4630      	mov	r0, r6
    a28c:	2102      	movs	r1, #2
    a28e:	f01c fd74 	bl	26d7a <net_buf_simple_pull_mem>
    a292:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a294:	7800      	ldrb	r0, [r0, #0]
    a296:	f01a fe52 	bl	24f3e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a29a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a29c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a29e:	d40c      	bmi.n	a2ba <hci_event_prio+0x66>
    a2a0:	4a10      	ldr	r2, [pc, #64]	; (a2e4 <hci_event_prio+0x90>)
    a2a2:	4913      	ldr	r1, [pc, #76]	; (a2f0 <hci_event_prio+0x9c>)
    a2a4:	4811      	ldr	r0, [pc, #68]	; (a2ec <hci_event_prio+0x98>)
    a2a6:	f641 03bc 	movw	r3, #6332	; 0x18bc
    a2aa:	f018 f815 	bl	222d8 <printk>
    a2ae:	4040      	eors	r0, r0
    a2b0:	f380 8811 	msr	BASEPRI, r0
    a2b4:	f04f 0003 	mov.w	r0, #3
    a2b8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    a2ba:	2305      	movs	r3, #5
    a2bc:	4a0d      	ldr	r2, [pc, #52]	; (a2f4 <hci_event_prio+0xa0>)
    a2be:	7838      	ldrb	r0, [r7, #0]
    a2c0:	4621      	mov	r1, r4
    a2c2:	f7fe fdef 	bl	8ea4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    a2c6:	07b3      	lsls	r3, r6, #30
    a2c8:	d507      	bpl.n	a2da <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    a2ca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    a2cc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a2d0:	fa10 f585 	uxtah	r5, r0, r5
    a2d4:	60a5      	str	r5, [r4, #8]
}
    a2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    a2da:	4620      	mov	r0, r4
}
    a2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    a2e0:	f013 bac8 	b.w	1d874 <net_buf_unref>
    a2e4:	0002cbb9 	.word	0x0002cbb9
    a2e8:	0002cef5 	.word	0x0002cef5
    a2ec:	0002cbf6 	.word	0x0002cbf6
    a2f0:	0002cf0e 	.word	0x0002cf0e
    a2f4:	00028aac 	.word	0x00028aac

0000a2f8 <bt_recv>:
{
    a2f8:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a2fa:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    a2fc:	2901      	cmp	r1, #1
{
    a2fe:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    a300:	d04b      	beq.n	a39a <bt_recv+0xa2>
    a302:	2903      	cmp	r1, #3
    a304:	d178      	bne.n	a3f8 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a306:	8983      	ldrh	r3, [r0, #12]
    a308:	2b03      	cmp	r3, #3
    a30a:	d80c      	bhi.n	a326 <bt_recv+0x2e>
    a30c:	4a42      	ldr	r2, [pc, #264]	; (a418 <bt_recv+0x120>)
    a30e:	4943      	ldr	r1, [pc, #268]	; (a41c <bt_recv+0x124>)
    a310:	4843      	ldr	r0, [pc, #268]	; (a420 <bt_recv+0x128>)
    a312:	f240 43ac 	movw	r3, #1196	; 0x4ac
    a316:	f017 ffdf 	bl	222d8 <printk>
    a31a:	4040      	eors	r0, r0
    a31c:	f380 8811 	msr	BASEPRI, r0
    a320:	f04f 0003 	mov.w	r0, #3
    a324:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a326:	2104      	movs	r1, #4
    a328:	f104 0008 	add.w	r0, r4, #8
    a32c:	f01c fd25 	bl	26d7a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a330:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    a332:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    a334:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a336:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    a338:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    a33c:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    a33e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a340:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    a342:	d00d      	beq.n	a360 <bt_recv+0x68>
    a344:	4837      	ldr	r0, [pc, #220]	; (a424 <bt_recv+0x12c>)
    a346:	4b38      	ldr	r3, [pc, #224]	; (a428 <bt_recv+0x130>)
    a348:	1a1b      	subs	r3, r3, r0
    a34a:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    a34c:	019b      	lsls	r3, r3, #6
    a34e:	4837      	ldr	r0, [pc, #220]	; (a42c <bt_recv+0x134>)
    a350:	f043 0301 	orr.w	r3, r3, #1
    a354:	f018 fc77 	bl	22c46 <log_2>
	net_buf_unref(buf);
    a358:	4620      	mov	r0, r4
    a35a:	f013 fa8b 	bl	1d874 <net_buf_unref>
    a35e:	e01a      	b.n	a396 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    a360:	f001 f99c 	bl	b69c <bt_conn_lookup_handle>
	if (!conn) {
    a364:	4605      	mov	r5, r0
    a366:	b958      	cbnz	r0, a380 <bt_recv+0x88>
    a368:	4b2e      	ldr	r3, [pc, #184]	; (a424 <bt_recv+0x12c>)
    a36a:	4a2f      	ldr	r2, [pc, #188]	; (a428 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    a36c:	8ae1      	ldrh	r1, [r4, #22]
    a36e:	4830      	ldr	r0, [pc, #192]	; (a430 <bt_recv+0x138>)
    a370:	1ad2      	subs	r2, r2, r3
    a372:	08d2      	lsrs	r2, r2, #3
    a374:	0192      	lsls	r2, r2, #6
    a376:	f042 0201 	orr.w	r2, r2, #1
    a37a:	f018 fc50 	bl	22c1e <log_1>
		net_buf_unref(buf);
    a37e:	e7eb      	b.n	a358 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    a380:	f001 fc5c 	bl	bc3c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    a384:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    a386:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    a388:	4621      	mov	r1, r4
    a38a:	4628      	mov	r0, r5
    a38c:	f001 f828 	bl	b3e0 <bt_conn_recv>
	bt_conn_unref(conn);
    a390:	4628      	mov	r0, r5
    a392:	f01b f895 	bl	254c0 <bt_conn_unref>
		return 0;
    a396:	2000      	movs	r0, #0
}
    a398:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a39a:	8983      	ldrh	r3, [r0, #12]
    a39c:	2b01      	cmp	r3, #1
    a39e:	d80c      	bhi.n	a3ba <bt_recv+0xc2>
    a3a0:	4a1d      	ldr	r2, [pc, #116]	; (a418 <bt_recv+0x120>)
    a3a2:	491e      	ldr	r1, [pc, #120]	; (a41c <bt_recv+0x124>)
    a3a4:	481e      	ldr	r0, [pc, #120]	; (a420 <bt_recv+0x128>)
    a3a6:	f241 4305 	movw	r3, #5125	; 0x1405
    a3aa:	f017 ff95 	bl	222d8 <printk>
    a3ae:	4040      	eors	r0, r0
    a3b0:	f380 8811 	msr	BASEPRI, r0
    a3b4:	f04f 0003 	mov.w	r0, #3
    a3b8:	df02      	svc	2
    a3ba:	2102      	movs	r1, #2
    a3bc:	f104 0008 	add.w	r0, r4, #8
    a3c0:	f01c fcdb 	bl	26d7a <net_buf_simple_pull_mem>
    a3c4:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    a3c6:	7800      	ldrb	r0, [r0, #0]
    a3c8:	f01a fdb9 	bl	24f3e <bt_hci_evt_get_flags>
    a3cc:	0783      	lsls	r3, r0, #30
    a3ce:	d40c      	bmi.n	a3ea <bt_recv+0xf2>
    a3d0:	4a11      	ldr	r2, [pc, #68]	; (a418 <bt_recv+0x120>)
    a3d2:	4918      	ldr	r1, [pc, #96]	; (a434 <bt_recv+0x13c>)
    a3d4:	4812      	ldr	r0, [pc, #72]	; (a420 <bt_recv+0x128>)
    a3d6:	f241 4309 	movw	r3, #5129	; 0x1409
    a3da:	f017 ff7d 	bl	222d8 <printk>
    a3de:	4040      	eors	r0, r0
    a3e0:	f380 8811 	msr	BASEPRI, r0
    a3e4:	f04f 0003 	mov.w	r0, #3
    a3e8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    a3ea:	4a13      	ldr	r2, [pc, #76]	; (a438 <bt_recv+0x140>)
    a3ec:	7828      	ldrb	r0, [r5, #0]
    a3ee:	2306      	movs	r3, #6
    a3f0:	4621      	mov	r1, r4
    a3f2:	f7fe fd57 	bl	8ea4 <handle_event>
    a3f6:	e7af      	b.n	a358 <bt_recv+0x60>
    a3f8:	4b0a      	ldr	r3, [pc, #40]	; (a424 <bt_recv+0x12c>)
    a3fa:	4a0b      	ldr	r2, [pc, #44]	; (a428 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    a3fc:	480f      	ldr	r0, [pc, #60]	; (a43c <bt_recv+0x144>)
    a3fe:	1ad2      	subs	r2, r2, r3
    a400:	08d2      	lsrs	r2, r2, #3
    a402:	0192      	lsls	r2, r2, #6
    a404:	f042 0201 	orr.w	r2, r2, #1
    a408:	f018 fc09 	bl	22c1e <log_1>
		net_buf_unref(buf);
    a40c:	4620      	mov	r0, r4
    a40e:	f013 fa31 	bl	1d874 <net_buf_unref>
		return -EINVAL;
    a412:	f06f 0015 	mvn.w	r0, #21
    a416:	e7bf      	b.n	a398 <bt_recv+0xa0>
    a418:	0002cbb9 	.word	0x0002cbb9
    a41c:	0002cef5 	.word	0x0002cef5
    a420:	0002cbf6 	.word	0x0002cbf6
    a424:	000281b4 	.word	0x000281b4
    a428:	0002827c 	.word	0x0002827c
    a42c:	0002cf27 	.word	0x0002cf27
    a430:	0002cf4b 	.word	0x0002cf4b
    a434:	0002cf6d 	.word	0x0002cf6d
    a438:	00028a6c 	.word	0x00028a6c
    a43c:	0002cf9b 	.word	0x0002cf9b

0000a440 <bt_recv_prio>:
{
    a440:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a442:	7d03      	ldrb	r3, [r0, #20]
    a444:	2b01      	cmp	r3, #1
{
    a446:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a448:	d00c      	beq.n	a464 <bt_recv_prio+0x24>
    a44a:	4a09      	ldr	r2, [pc, #36]	; (a470 <bt_recv_prio+0x30>)
    a44c:	4909      	ldr	r1, [pc, #36]	; (a474 <bt_recv_prio+0x34>)
    a44e:	480a      	ldr	r0, [pc, #40]	; (a478 <bt_recv_prio+0x38>)
    a450:	f641 03ff 	movw	r3, #6399	; 0x18ff
    a454:	f017 ff40 	bl	222d8 <printk>
    a458:	4040      	eors	r0, r0
    a45a:	f380 8811 	msr	BASEPRI, r0
    a45e:	f04f 0003 	mov.w	r0, #3
    a462:	df02      	svc	2
	hci_event_prio(buf);
    a464:	4620      	mov	r0, r4
    a466:	f7ff fef5 	bl	a254 <hci_event_prio>
}
    a46a:	2000      	movs	r0, #0
    a46c:	bd10      	pop	{r4, pc}
    a46e:	bf00      	nop
    a470:	0002cbb9 	.word	0x0002cbb9
    a474:	0002cfaf 	.word	0x0002cfaf
    a478:	0002cbf6 	.word	0x0002cbf6

0000a47c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    a47c:	4a08      	ldr	r2, [pc, #32]	; (a4a0 <bt_hci_driver_register+0x24>)
{
    a47e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    a480:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    a484:	b930      	cbnz	r0, a494 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    a486:	68d9      	ldr	r1, [r3, #12]
    a488:	b139      	cbz	r1, a49a <bt_hci_driver_register+0x1e>
    a48a:	6919      	ldr	r1, [r3, #16]
    a48c:	b129      	cbz	r1, a49a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    a48e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    a492:	4770      	bx	lr
		return -EALREADY;
    a494:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a498:	4770      	bx	lr
		return -EINVAL;
    a49a:	f06f 0015 	mvn.w	r0, #21
}
    a49e:	4770      	bx	lr
    a4a0:	20000000 	.word	0x20000000

0000a4a4 <bt_finalize_init>:
{
    a4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a4a8:	4d2b      	ldr	r5, [pc, #172]	; (a558 <bt_finalize_init+0xb4>)
    a4aa:	4c2c      	ldr	r4, [pc, #176]	; (a55c <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    a4ac:	4e2c      	ldr	r6, [pc, #176]	; (a560 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    a4ae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a564 <bt_finalize_init+0xc0>
{
    a4b2:	b087      	sub	sp, #28
    a4b4:	2102      	movs	r1, #2
    a4b6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a4ba:	f01a fd97 	bl	24fec <atomic_or>
    a4be:	4b2a      	ldr	r3, [pc, #168]	; (a568 <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    a4c0:	492a      	ldr	r1, [pc, #168]	; (a56c <bt_finalize_init+0xc8>)
    a4c2:	1ae4      	subs	r4, r4, r3
    a4c4:	79eb      	ldrb	r3, [r5, #7]
    a4c6:	4628      	mov	r0, r5
    a4c8:	2b01      	cmp	r3, #1
    a4ca:	bf88      	it	hi
    a4cc:	460e      	movhi	r6, r1
    a4ce:	f7fd fe19 	bl	8104 <bt_addr_le_str_real>
    a4d2:	f7fb f883 	bl	55dc <log_strdup>
    a4d6:	08e4      	lsrs	r4, r4, #3
    a4d8:	01a4      	lsls	r4, r4, #6
    a4da:	f044 0803 	orr.w	r8, r4, #3
    a4de:	4602      	mov	r2, r0
    a4e0:	4631      	mov	r1, r6
    a4e2:	4823      	ldr	r0, [pc, #140]	; (a570 <bt_finalize_init+0xcc>)
    a4e4:	4643      	mov	r3, r8
    a4e6:	f018 fbae 	bl	22c46 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    a4ea:	462f      	mov	r7, r5
    a4ec:	2601      	movs	r6, #1
    a4ee:	79eb      	ldrb	r3, [r5, #7]
    a4f0:	429e      	cmp	r6, r3
    a4f2:	f107 0707 	add.w	r7, r7, #7
    a4f6:	db22      	blt.n	a53e <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    a4f8:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    a4fc:	4630      	mov	r0, r6
    a4fe:	f7fe fa01 	bl	8904 <ver_str>
    a502:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    a504:	9304      	str	r3, [sp, #16]
    a506:	f044 0403 	orr.w	r4, r4, #3
    a50a:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    a50c:	9305      	str	r3, [sp, #20]
    a50e:	e9cd 0602 	strd	r0, r6, [sp, #8]
    a512:	4623      	mov	r3, r4
    a514:	a902      	add	r1, sp, #8
    a516:	2204      	movs	r2, #4
    a518:	4816      	ldr	r0, [pc, #88]	; (a574 <bt_finalize_init+0xd0>)
    a51a:	f018 fbc9 	bl	22cb0 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    a51e:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
    a522:	4630      	mov	r0, r6
    a524:	f7fe f9ee 	bl	8904 <ver_str>
    a528:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    a52a:	f8ad 4000 	strh.w	r4, [sp]
    a52e:	4601      	mov	r1, r0
    a530:	4632      	mov	r2, r6
    a532:	4811      	ldr	r0, [pc, #68]	; (a578 <bt_finalize_init+0xd4>)
    a534:	f018 fba0 	bl	22c78 <log_3>
}
    a538:	b007      	add	sp, #28
    a53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    a53e:	4638      	mov	r0, r7
    a540:	f7fd fde0 	bl	8104 <bt_addr_le_str_real>
    a544:	f7fb f84a 	bl	55dc <log_strdup>
    a548:	4631      	mov	r1, r6
    a54a:	4602      	mov	r2, r0
    a54c:	4643      	mov	r3, r8
    a54e:	4648      	mov	r0, r9
    a550:	f018 fb79 	bl	22c46 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    a554:	3601      	adds	r6, #1
    a556:	e7ca      	b.n	a4ee <bt_finalize_init+0x4a>
    a558:	20000000 	.word	0x20000000
    a55c:	0002827c 	.word	0x0002827c
    a560:	00029eb8 	.word	0x00029eb8
    a564:	0002cfe5 	.word	0x0002cfe5
    a568:	000281b4 	.word	0x000281b4
    a56c:	0002cfd2 	.word	0x0002cfd2
    a570:	0002cfd6 	.word	0x0002cfd6
    a574:	0002cff6 	.word	0x0002cff6
    a578:	0002d034 	.word	0x0002d034

0000a57c <init_work>:
{
    a57c:	b510      	push	{r4, lr}
	err = bt_init();
    a57e:	f7f6 ff8f 	bl	14a0 <bt_init>
	if (ready_cb) {
    a582:	4b03      	ldr	r3, [pc, #12]	; (a590 <init_work+0x14>)
    a584:	681b      	ldr	r3, [r3, #0]
    a586:	b113      	cbz	r3, a58e <init_work+0x12>
}
    a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a58c:	4718      	bx	r3
}
    a58e:	bd10      	pop	{r4, pc}
    a590:	2000db90 	.word	0x2000db90

0000a594 <bt_enable>:
{
    a594:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a596:	4d31      	ldr	r5, [pc, #196]	; (a65c <bt_enable+0xc8>)
    a598:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    a59c:	b088      	sub	sp, #32
    a59e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a5a0:	b973      	cbnz	r3, a5c0 <bt_enable+0x2c>
    a5a2:	4b2f      	ldr	r3, [pc, #188]	; (a660 <bt_enable+0xcc>)
    a5a4:	492f      	ldr	r1, [pc, #188]	; (a664 <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
    a5a6:	4830      	ldr	r0, [pc, #192]	; (a668 <bt_enable+0xd4>)
    a5a8:	1ac9      	subs	r1, r1, r3
    a5aa:	08c9      	lsrs	r1, r1, #3
    a5ac:	0189      	lsls	r1, r1, #6
    a5ae:	f041 0101 	orr.w	r1, r1, #1
    a5b2:	f018 fb27 	bl	22c04 <log_0>
		return -ENODEV;
    a5b6:	f06f 0412 	mvn.w	r4, #18
}
    a5ba:	4620      	mov	r0, r4
    a5bc:	b008      	add	sp, #32
    a5be:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a5c0:	2100      	movs	r1, #0
    a5c2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a5c6:	f01a fd20 	bl	2500a <atomic_test_and_set_bit>
    a5ca:	2800      	cmp	r0, #0
    a5cc:	d143      	bne.n	a656 <bt_enable+0xc2>
		err = bt_settings_init();
    a5ce:	f7fe f8d7 	bl	8780 <bt_settings_init>
		if (err) {
    a5d2:	4604      	mov	r4, r0
    a5d4:	2800      	cmp	r0, #0
    a5d6:	d1f0      	bne.n	a5ba <bt_enable+0x26>
	ready_cb = cb;
    a5d8:	4b24      	ldr	r3, [pc, #144]	; (a66c <bt_enable+0xd8>)
    a5da:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a5dc:	2200      	movs	r2, #0
    a5de:	2300      	movs	r3, #0
    a5e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a5e4:	f06f 0308 	mvn.w	r3, #8
    a5e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
    a5ec:	e9cd 0000 	strd	r0, r0, [sp]
    a5f0:	9004      	str	r0, [sp, #16]
    a5f2:	4b1f      	ldr	r3, [pc, #124]	; (a670 <bt_enable+0xdc>)
    a5f4:	491f      	ldr	r1, [pc, #124]	; (a674 <bt_enable+0xe0>)
    a5f6:	4820      	ldr	r0, [pc, #128]	; (a678 <bt_enable+0xe4>)
    a5f8:	f44f 7220 	mov.w	r2, #640	; 0x280
    a5fc:	f016 fba4 	bl	20d48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a600:	491e      	ldr	r1, [pc, #120]	; (a67c <bt_enable+0xe8>)
    a602:	481d      	ldr	r0, [pc, #116]	; (a678 <bt_enable+0xe4>)
    a604:	f01d f9e5 	bl	279d2 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a608:	f7fd ff22 	bl	8450 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a60c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    a610:	68db      	ldr	r3, [r3, #12]
    a612:	4798      	blx	r3
	if (err) {
    a614:	4604      	mov	r4, r0
    a616:	b158      	cbz	r0, a630 <bt_enable+0x9c>
    a618:	4b11      	ldr	r3, [pc, #68]	; (a660 <bt_enable+0xcc>)
    a61a:	4a12      	ldr	r2, [pc, #72]	; (a664 <bt_enable+0xd0>)
    a61c:	1ad2      	subs	r2, r2, r3
    a61e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    a620:	0192      	lsls	r2, r2, #6
    a622:	4601      	mov	r1, r0
    a624:	f042 0201 	orr.w	r2, r2, #1
    a628:	4815      	ldr	r0, [pc, #84]	; (a680 <bt_enable+0xec>)
    a62a:	f018 faf8 	bl	22c1e <log_1>
		return err;
    a62e:	e7c4      	b.n	a5ba <bt_enable+0x26>
	if (!cb) {
    a630:	b926      	cbnz	r6, a63c <bt_enable+0xa8>
}
    a632:	b008      	add	sp, #32
    a634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    a638:	f7f6 bf32 	b.w	14a0 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a63c:	4601      	mov	r1, r0
    a63e:	f105 0090 	add.w	r0, r5, #144	; 0x90
    a642:	f01a fce2 	bl	2500a <atomic_test_and_set_bit>
    a646:	2800      	cmp	r0, #0
    a648:	d1b7      	bne.n	a5ba <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    a64a:	480e      	ldr	r0, [pc, #56]	; (a684 <bt_enable+0xf0>)
    a64c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a650:	f01d f867 	bl	27722 <k_queue_append>
    a654:	e7b1      	b.n	a5ba <bt_enable+0x26>
		return -EALREADY;
    a656:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a65a:	e7ae      	b.n	a5ba <bt_enable+0x26>
    a65c:	20000000 	.word	0x20000000
    a660:	000281b4 	.word	0x000281b4
    a664:	0002827c 	.word	0x0002827c
    a668:	0002d180 	.word	0x0002d180
    a66c:	2000db90 	.word	0x2000db90
    a670:	0000909d 	.word	0x0000909d
    a674:	20010fa0 	.word	0x20010fa0
    a678:	2000a6e0 	.word	0x2000a6e0
    a67c:	0002d199 	.word	0x0002d199
    a680:	0002d19f 	.word	0x0002d19f
    a684:	2000b0f0 	.word	0x2000b0f0

0000a688 <bt_set_name>:
{
    a688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a68a:	4605      	mov	r5, r0
	size_t len = strlen(name);
    a68c:	f01a faa2 	bl	24bd4 <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    a690:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    a692:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    a694:	d83a      	bhi.n	a70c <bt_set_name+0x84>
	if (!strcmp(bt_dev.name, name)) {
    a696:	4e1f      	ldr	r6, [pc, #124]	; (a714 <bt_set_name+0x8c>)
    a698:	4629      	mov	r1, r5
    a69a:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    a69e:	f01a faa9 	bl	24bf4 <strcmp>
    a6a2:	b910      	cbnz	r0, a6aa <bt_set_name+0x22>
	return 0;
    a6a4:	2000      	movs	r0, #0
}
    a6a6:	b004      	add	sp, #16
    a6a8:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    a6aa:	4622      	mov	r2, r4
    a6ac:	4629      	mov	r1, r5
    a6ae:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    a6b2:	f01a fa7d 	bl	24bb0 <strncpy>
	bt_dev.name[len] = '\0';
    a6b6:	1933      	adds	r3, r6, r4
    a6b8:	2200      	movs	r2, #0
    a6ba:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a6be:	f106 0028 	add.w	r0, r6, #40	; 0x28
    a6c2:	f01a fc84 	bl	24fce <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    a6c6:	0603      	lsls	r3, r0, #24
    a6c8:	d50e      	bpl.n	a6e8 <bt_set_name+0x60>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    a6ca:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    a6cc:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    a6ce:	a902      	add	r1, sp, #8
    a6d0:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    a6d4:	f88d 3000 	strb.w	r3, [sp]
    a6d8:	f88d 4001 	strb.w	r4, [sp, #1]
    a6dc:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    a6de:	f8cd d008 	str.w	sp, [sp, #8]
    a6e2:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    a6e4:	f7ff f9b0 	bl	9a48 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    a6e8:	490b      	ldr	r1, [pc, #44]	; (a718 <bt_set_name+0x90>)
    a6ea:	480c      	ldr	r0, [pc, #48]	; (a71c <bt_set_name+0x94>)
    a6ec:	4622      	mov	r2, r4
    a6ee:	f7fc f879 	bl	67e4 <settings_save_one>
		if (err) {
    a6f2:	2800      	cmp	r0, #0
    a6f4:	d0d6      	beq.n	a6a4 <bt_set_name+0x1c>
    a6f6:	4b0a      	ldr	r3, [pc, #40]	; (a720 <bt_set_name+0x98>)
    a6f8:	490a      	ldr	r1, [pc, #40]	; (a724 <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    a6fa:	480b      	ldr	r0, [pc, #44]	; (a728 <bt_set_name+0xa0>)
    a6fc:	1ac9      	subs	r1, r1, r3
    a6fe:	08c9      	lsrs	r1, r1, #3
    a700:	0189      	lsls	r1, r1, #6
    a702:	f041 0102 	orr.w	r1, r1, #2
    a706:	f018 fa7d 	bl	22c04 <log_0>
    a70a:	e7cb      	b.n	a6a4 <bt_set_name+0x1c>
		return -ENOMEM;
    a70c:	f06f 000b 	mvn.w	r0, #11
    a710:	e7c9      	b.n	a6a6 <bt_set_name+0x1e>
    a712:	bf00      	nop
    a714:	20000000 	.word	0x20000000
    a718:	20000160 	.word	0x20000160
    a71c:	0002d1bb 	.word	0x0002d1bb
    a720:	000281b4 	.word	0x000281b4
    a724:	0002827c 	.word	0x0002827c
    a728:	0002d1c3 	.word	0x0002d1c3

0000a72c <bt_get_name>:
}
    a72c:	4800      	ldr	r0, [pc, #0]	; (a730 <bt_get_name+0x4>)
    a72e:	4770      	bx	lr
    a730:	20000160 	.word	0x20000160

0000a734 <bt_id_create>:
{
    a734:	b5f0      	push	{r4, r5, r6, r7, lr}
    a736:	460e      	mov	r6, r1
    a738:	b087      	sub	sp, #28
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a73a:	4605      	mov	r5, r0
    a73c:	b930      	cbnz	r0, a74c <bt_id_create+0x18>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    a73e:	4f2b      	ldr	r7, [pc, #172]	; (a7ec <bt_id_create+0xb8>)
    a740:	79fb      	ldrb	r3, [r7, #7]
    a742:	2b01      	cmp	r3, #1
    a744:	d12a      	bne.n	a79c <bt_id_create+0x68>
		return -ENOMEM;
    a746:	f06f 040b 	mvn.w	r4, #11
    a74a:	e024      	b.n	a796 <bt_id_create+0x62>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a74c:	2300      	movs	r3, #0
    a74e:	a902      	add	r1, sp, #8
    a750:	9302      	str	r3, [sp, #8]
    a752:	f8cd 300b 	str.w	r3, [sp, #11]
    a756:	f01a fc40 	bl	24fda <bt_addr_le_cmp>
    a75a:	2800      	cmp	r0, #0
    a75c:	d0ef      	beq.n	a73e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a75e:	782b      	ldrb	r3, [r5, #0]
    a760:	2b01      	cmp	r3, #1
    a762:	d104      	bne.n	a76e <bt_id_create+0x3a>
    a764:	79ab      	ldrb	r3, [r5, #6]
    a766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a76a:	2bc0      	cmp	r3, #192	; 0xc0
    a76c:	d00c      	beq.n	a788 <bt_id_create+0x54>
    a76e:	4920      	ldr	r1, [pc, #128]	; (a7f0 <bt_id_create+0xbc>)
    a770:	4b20      	ldr	r3, [pc, #128]	; (a7f4 <bt_id_create+0xc0>)
			BT_ERR("Only static random identity address supported");
    a772:	4821      	ldr	r0, [pc, #132]	; (a7f8 <bt_id_create+0xc4>)
    a774:	1ac9      	subs	r1, r1, r3
    a776:	08c9      	lsrs	r1, r1, #3
    a778:	0189      	lsls	r1, r1, #6
    a77a:	f041 0101 	orr.w	r1, r1, #1
    a77e:	f018 fa41 	bl	22c04 <log_0>
			return -EINVAL;
    a782:	f06f 0415 	mvn.w	r4, #21
    a786:	e006      	b.n	a796 <bt_id_create+0x62>
		if (id_find(addr) >= 0) {
    a788:	4628      	mov	r0, r5
    a78a:	f7fe f8ff 	bl	898c <id_find>
    a78e:	2800      	cmp	r0, #0
    a790:	dbd5      	blt.n	a73e <bt_id_create+0xa>
			return -EALREADY;
    a792:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    a796:	4620      	mov	r0, r4
    a798:	b007      	add	sp, #28
    a79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a79c:	f107 0094 	add.w	r0, r7, #148	; 0x94
    a7a0:	f01a fc15 	bl	24fce <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a7a4:	f010 0001 	ands.w	r0, r0, #1
    a7a8:	d117      	bne.n	a7da <bt_id_create+0xa6>
		uint8_t zero_irk[16] = { 0 };
    a7aa:	e9cd 0002 	strd	r0, r0, [sp, #8]
    a7ae:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    a7b2:	2d00      	cmp	r5, #0
    a7b4:	d0e5      	beq.n	a782 <bt_id_create+0x4e>
    a7b6:	9000      	str	r0, [sp, #0]
    a7b8:	4669      	mov	r1, sp
    a7ba:	f8cd 0003 	str.w	r0, [sp, #3]
    a7be:	4628      	mov	r0, r5
    a7c0:	f01a fc0b 	bl	24fda <bt_addr_le_cmp>
    a7c4:	2800      	cmp	r0, #0
    a7c6:	d0dc      	beq.n	a782 <bt_id_create+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a7c8:	2e00      	cmp	r6, #0
    a7ca:	d0da      	beq.n	a782 <bt_id_create+0x4e>
		    !(irk && memcmp(irk, zero_irk, 16))) {
    a7cc:	2210      	movs	r2, #16
    a7ce:	a902      	add	r1, sp, #8
    a7d0:	4630      	mov	r0, r6
    a7d2:	f01a fa2c 	bl	24c2e <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d0d3      	beq.n	a782 <bt_id_create+0x4e>
	new_id = bt_dev.id_count++;
    a7da:	79fc      	ldrb	r4, [r7, #7]
	id_create(new_id, addr, irk);
    a7dc:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
    a7de:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    a7e0:	4629      	mov	r1, r5
    a7e2:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    a7e4:	71fb      	strb	r3, [r7, #7]
	id_create(new_id, addr, irk);
    a7e6:	f7fe fa8f 	bl	8d08 <id_create>
	return new_id;
    a7ea:	e7d4      	b.n	a796 <bt_id_create+0x62>
    a7ec:	20000000 	.word	0x20000000
    a7f0:	0002827c 	.word	0x0002827c
    a7f4:	000281b4 	.word	0x000281b4
    a7f8:	0002d1d8 	.word	0x0002d1d8

0000a7fc <bt_setup_public_id_addr>:
{
    a7fc:	b570      	push	{r4, r5, r6, lr}
    a7fe:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    a800:	aa01      	add	r2, sp, #4
    a802:	2100      	movs	r1, #0
    a804:	f241 0009 	movw	r0, #4105	; 0x1009
    a808:	f7fe fef4 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    a80c:	4e3b      	ldr	r6, [pc, #236]	; (a8fc <bt_setup_public_id_addr+0x100>)
    a80e:	4604      	mov	r4, r0
    a810:	b168      	cbz	r0, a82e <bt_setup_public_id_addr+0x32>
    a812:	493b      	ldr	r1, [pc, #236]	; (a900 <bt_setup_public_id_addr+0x104>)
    a814:	4b3b      	ldr	r3, [pc, #236]	; (a904 <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read public address");
    a816:	483c      	ldr	r0, [pc, #240]	; (a908 <bt_setup_public_id_addr+0x10c>)
    a818:	1ac9      	subs	r1, r1, r3
    a81a:	08c9      	lsrs	r1, r1, #3
    a81c:	0189      	lsls	r1, r1, #6
    a81e:	f041 0102 	orr.w	r1, r1, #2
    a822:	f018 f9ef 	bl	22c04 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a826:	2300      	movs	r3, #0
    a828:	71f3      	strb	r3, [r6, #7]
}
    a82a:	b00c      	add	sp, #48	; 0x30
    a82c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a82e:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a830:	689d      	ldr	r5, [r3, #8]
    a832:	9008      	str	r0, [sp, #32]
    a834:	3501      	adds	r5, #1
    a836:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    a83a:	2206      	movs	r2, #6
    a83c:	a908      	add	r1, sp, #32
    a83e:	4628      	mov	r0, r5
    a840:	f01a f9f5 	bl	24c2e <memcmp>
    a844:	b918      	cbnz	r0, a84e <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    a846:	9801      	ldr	r0, [sp, #4]
    a848:	f013 f814 	bl	1d874 <net_buf_unref>
    a84c:	e7eb      	b.n	a826 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a84e:	23ff      	movs	r3, #255	; 0xff
    a850:	2206      	movs	r2, #6
    a852:	a904      	add	r1, sp, #16
    a854:	4628      	mov	r0, r5
    a856:	f88d 3010 	strb.w	r3, [sp, #16]
    a85a:	f88d 3011 	strb.w	r3, [sp, #17]
    a85e:	f88d 3012 	strb.w	r3, [sp, #18]
    a862:	f88d 3013 	strb.w	r3, [sp, #19]
    a866:	f88d 3014 	strb.w	r3, [sp, #20]
    a86a:	f88d 3015 	strb.w	r3, [sp, #21]
    a86e:	f01a f9de 	bl	24c2e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a872:	2800      	cmp	r0, #0
    a874:	d0e7      	beq.n	a846 <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    a876:	4629      	mov	r1, r5
    a878:	f10d 0009 	add.w	r0, sp, #9
    a87c:	f01a fbb0 	bl	24fe0 <bt_addr_copy>
	net_buf_unref(rsp);
    a880:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a882:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    a886:	f012 fff5 	bl	1d874 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a88a:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    a88c:	2210      	movs	r2, #16
    a88e:	4621      	mov	r1, r4
    a890:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    a892:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    a894:	f01a fa07 	bl	24ca6 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    a898:	f896 3086 	ldrb.w	r3, [r6, #134]	; 0x86
    a89c:	079b      	lsls	r3, r3, #30
    a89e:	d510      	bpl.n	a8c2 <bt_setup_public_id_addr+0xc6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    a8a0:	aa04      	add	r2, sp, #16
    a8a2:	4621      	mov	r1, r4
    a8a4:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    a8a8:	f7fe fea4 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    a8ac:	b1c8      	cbz	r0, a8e2 <bt_setup_public_id_addr+0xe6>
    a8ae:	4914      	ldr	r1, [pc, #80]	; (a900 <bt_setup_public_id_addr+0x104>)
    a8b0:	4b14      	ldr	r3, [pc, #80]	; (a904 <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read identity root");
    a8b2:	4816      	ldr	r0, [pc, #88]	; (a90c <bt_setup_public_id_addr+0x110>)
    a8b4:	1ac9      	subs	r1, r1, r3
    a8b6:	08c9      	lsrs	r1, r1, #3
    a8b8:	0189      	lsls	r1, r1, #6
    a8ba:	f041 0102 	orr.w	r1, r1, #2
    a8be:	f018 f9a1 	bl	22c04 <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    a8c2:	a904      	add	r1, sp, #16
    a8c4:	a808      	add	r0, sp, #32
    a8c6:	f01c f8dc 	bl	26a82 <bt_smp_irk_get>
    a8ca:	b1a8      	cbz	r0, a8f8 <bt_setup_public_id_addr+0xfc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a8cc:	4810      	ldr	r0, [pc, #64]	; (a910 <bt_setup_public_id_addr+0x114>)
    a8ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a8d2:	f01a fb8b 	bl	24fec <atomic_or>
	uint8_t *irk = NULL;
    a8d6:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    a8d8:	a902      	add	r1, sp, #8
    a8da:	2000      	movs	r0, #0
    a8dc:	f7fe fa14 	bl	8d08 <id_create>
    a8e0:	e7a3      	b.n	a82a <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    a8e2:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    a8e4:	6899      	ldr	r1, [r3, #8]
    a8e6:	2210      	movs	r2, #16
    a8e8:	3101      	adds	r1, #1
    a8ea:	a808      	add	r0, sp, #32
    a8ec:	f01a f9b0 	bl	24c50 <memcpy>
	net_buf_unref(rsp);
    a8f0:	9804      	ldr	r0, [sp, #16]
    a8f2:	f012 ffbf 	bl	1d874 <net_buf_unref>
    a8f6:	e7e4      	b.n	a8c2 <bt_setup_public_id_addr+0xc6>
		irk = ir_irk;
    a8f8:	aa04      	add	r2, sp, #16
    a8fa:	e7ed      	b.n	a8d8 <bt_setup_public_id_addr+0xdc>
    a8fc:	20000000 	.word	0x20000000
    a900:	0002827c 	.word	0x0002827c
    a904:	000281b4 	.word	0x000281b4
    a908:	0002d206 	.word	0x0002d206
    a90c:	0002d224 	.word	0x0002d224
    a910:	20000094 	.word	0x20000094

0000a914 <bt_read_static_addr>:
{
    a914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a918:	4b25      	ldr	r3, [pc, #148]	; (a9b0 <bt_read_static_addr+0x9c>)
    a91a:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    a91e:	f014 0401 	ands.w	r4, r4, #1
{
    a922:	4607      	mov	r7, r0
    a924:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a926:	d10a      	bne.n	a93e <bt_read_static_addr+0x2a>
    a928:	4922      	ldr	r1, [pc, #136]	; (a9b4 <bt_read_static_addr+0xa0>)
    a92a:	4b23      	ldr	r3, [pc, #140]	; (a9b8 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    a92c:	4823      	ldr	r0, [pc, #140]	; (a9bc <bt_read_static_addr+0xa8>)
    a92e:	1ac9      	subs	r1, r1, r3
    a930:	08c9      	lsrs	r1, r1, #3
    a932:	0189      	lsls	r1, r1, #6
    a934:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    a938:	f018 f964 	bl	22c04 <log_0>
    a93c:	e012      	b.n	a964 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a93e:	aa01      	add	r2, sp, #4
    a940:	2100      	movs	r1, #0
    a942:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a946:	f7fe fe55 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    a94a:	4605      	mov	r5, r0
    a94c:	b170      	cbz	r0, a96c <bt_read_static_addr+0x58>
    a94e:	4b1a      	ldr	r3, [pc, #104]	; (a9b8 <bt_read_static_addr+0xa4>)
    a950:	4918      	ldr	r1, [pc, #96]	; (a9b4 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    a952:	481b      	ldr	r0, [pc, #108]	; (a9c0 <bt_read_static_addr+0xac>)
    a954:	1ac9      	subs	r1, r1, r3
    a956:	08c9      	lsrs	r1, r1, #3
    a958:	0189      	lsls	r1, r1, #6
    a95a:	f041 0102 	orr.w	r1, r1, #2
    a95e:	f018 f951 	bl	22c04 <log_0>
		return 0;
    a962:	2400      	movs	r4, #0
}
    a964:	4620      	mov	r0, r4
    a966:	b002      	add	sp, #8
    a968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    a96c:	9b01      	ldr	r3, [sp, #4]
    a96e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a970:	785c      	ldrb	r4, [r3, #1]
    a972:	42b4      	cmp	r4, r6
    a974:	bf28      	it	cs
    a976:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a978:	f04f 0816 	mov.w	r8, #22
    a97c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    a97e:	42a5      	cmp	r5, r4
    a980:	db0d      	blt.n	a99e <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    a982:	9801      	ldr	r0, [sp, #4]
    a984:	f012 ff76 	bl	1d874 <net_buf_unref>
	if (!cnt) {
    a988:	2c00      	cmp	r4, #0
    a98a:	d1eb      	bne.n	a964 <bt_read_static_addr+0x50>
    a98c:	4909      	ldr	r1, [pc, #36]	; (a9b4 <bt_read_static_addr+0xa0>)
    a98e:	4b0a      	ldr	r3, [pc, #40]	; (a9b8 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    a990:	480c      	ldr	r0, [pc, #48]	; (a9c4 <bt_read_static_addr+0xb0>)
    a992:	1ac9      	subs	r1, r1, r3
    a994:	08c9      	lsrs	r1, r1, #3
    a996:	0189      	lsls	r1, r1, #6
    a998:	f041 0102 	orr.w	r1, r1, #2
    a99c:	e7cc      	b.n	a938 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a99e:	fb08 7005 	mla	r0, r8, r5, r7
    a9a2:	2216      	movs	r2, #22
    a9a4:	4631      	mov	r1, r6
    a9a6:	f01a f953 	bl	24c50 <memcpy>
	for (i = 0; i < cnt; i++) {
    a9aa:	3501      	adds	r5, #1
    a9ac:	e7e7      	b.n	a97e <bt_read_static_addr+0x6a>
    a9ae:	bf00      	nop
    a9b0:	20000000 	.word	0x20000000
    a9b4:	0002827c 	.word	0x0002827c
    a9b8:	000281b4 	.word	0x000281b4
    a9bc:	0002d241 	.word	0x0002d241
    a9c0:	0002d26d 	.word	0x0002d26d
    a9c4:	0002d28d 	.word	0x0002d28d

0000a9c8 <bt_setup_random_id_addr>:
{
    a9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    a9cc:	f8df 808c 	ldr.w	r8, [pc, #140]	; aa5c <bt_setup_random_id_addr+0x94>
    a9d0:	f898 4007 	ldrb.w	r4, [r8, #7]
{
    a9d4:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    a9d6:	bba4      	cbnz	r4, aa42 <bt_setup_random_id_addr+0x7a>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a9d8:	2101      	movs	r1, #1
    a9da:	a806      	add	r0, sp, #24
    a9dc:	f7ff ff9a 	bl	a914 <bt_read_static_addr>
    a9e0:	f888 0007 	strb.w	r0, [r8, #7]
		if (bt_dev.id_count) {
    a9e4:	b368      	cbz	r0, aa42 <bt_setup_random_id_addr+0x7a>
    a9e6:	f04f 0916 	mov.w	r9, #22
    a9ea:	f108 0a94 	add.w	sl, r8, #148	; 0x94
    a9ee:	b2e5      	uxtb	r5, r4
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    a9f0:	fb09 f705 	mul.w	r7, r9, r5
    a9f4:	1db8      	adds	r0, r7, #6
    a9f6:	ab06      	add	r3, sp, #24
    a9f8:	a902      	add	r1, sp, #8
    a9fa:	4418      	add	r0, r3
    a9fc:	f01c f841 	bl	26a82 <bt_smp_irk_get>
    aa00:	b1e8      	cbz	r0, aa3e <bt_setup_random_id_addr+0x76>
    aa02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    aa06:	4650      	mov	r0, sl
    aa08:	f01a faf0 	bl	24fec <atomic_or>
				uint8_t *irk = NULL;
    aa0c:	2600      	movs	r6, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    aa0e:	ab06      	add	r3, sp, #24
    aa10:	19d9      	adds	r1, r3, r7
    aa12:	f10d 0001 	add.w	r0, sp, #1
    aa16:	f01a fae3 	bl	24fe0 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    aa1a:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    aa1c:	4632      	mov	r2, r6
    aa1e:	4669      	mov	r1, sp
    aa20:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    aa22:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    aa26:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    aa28:	f7fe f96e 	bl	8d08 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    aa2c:	f898 2007 	ldrb.w	r2, [r8, #7]
    aa30:	b2e3      	uxtb	r3, r4
    aa32:	429a      	cmp	r2, r3
    aa34:	d8db      	bhi.n	a9ee <bt_setup_random_id_addr+0x26>
}
    aa36:	2000      	movs	r0, #0
    aa38:	b00c      	add	sp, #48	; 0x30
    aa3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    aa3e:	ae02      	add	r6, sp, #8
    aa40:	e7e5      	b.n	aa0e <bt_setup_random_id_addr+0x46>
    aa42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    aa46:	4806      	ldr	r0, [pc, #24]	; (aa60 <bt_setup_random_id_addr+0x98>)
    aa48:	f01a fad0 	bl	24fec <atomic_or>
	return bt_id_create(NULL, NULL);
    aa4c:	2100      	movs	r1, #0
    aa4e:	4608      	mov	r0, r1
}
    aa50:	b00c      	add	sp, #48	; 0x30
    aa52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
    aa56:	f7ff be6d 	b.w	a734 <bt_id_create>
    aa5a:	bf00      	nop
    aa5c:	20000000 	.word	0x20000000
    aa60:	20000094 	.word	0x20000094

0000aa64 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    aa68:	690d      	ldr	r5, [r1, #16]
{
    aa6a:	b08f      	sub	sp, #60	; 0x3c
    aa6c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    aa6e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    aa70:	ebb5 0b03 	subs.w	fp, r5, r3
{
    aa74:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aa76:	4883      	ldr	r0, [pc, #524]	; (ac84 <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
    aa78:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    aa7a:	bf18      	it	ne
    aa7c:	f04f 0b01 	movne.w	fp, #1
    aa80:	f01a faa5 	bl	24fce <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aa84:	0787      	lsls	r7, r0, #30
{
    aa86:	460c      	mov	r4, r1
    aa88:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aa8a:	f140 80ed 	bpl.w	ac68 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    aa8e:	4608      	mov	r0, r1
    aa90:	f7fd ff94 	bl	89bc <valid_adv_param>
    aa94:	4607      	mov	r7, r0
    aa96:	2800      	cmp	r0, #0
    aa98:	f000 80e9 	beq.w	ac6e <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    aa9c:	f106 0810 	add.w	r8, r6, #16
    aaa0:	4640      	mov	r0, r8
    aaa2:	f01a fa94 	bl	24fce <atomic_get>
    aaa6:	f3c0 1180 	ubfx	r1, r0, #6, #1
    aaaa:	0640      	lsls	r0, r0, #25
    aaac:	f100 80e2 	bmi.w	ac74 <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    aab0:	220f      	movs	r2, #15
    aab2:	a80a      	add	r0, sp, #40	; 0x28
    aab4:	9105      	str	r1, [sp, #20]
    aab6:	f01a f8f6 	bl	24ca6 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    aaba:	68a3      	ldr	r3, [r4, #8]
    aabc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    aac0:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    aac2:	68e3      	ldr	r3, [r4, #12]
    aac4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    aac8:	f01a fa63 	bl	24f92 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    aacc:	7832      	ldrb	r2, [r6, #0]
    aace:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    aad0:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    aad2:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    aad6:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    aad8:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    aadc:	d004      	beq.n	aae8 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    aade:	4869      	ldr	r0, [pc, #420]	; (ac84 <bt_le_adv_start_legacy+0x220>)
    aae0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    aae4:	f01a fa64 	bl	24fb0 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    aae8:	4b67      	ldr	r3, [pc, #412]	; (ac88 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    aaea:	7820      	ldrb	r0, [r4, #0]
    aaec:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    aaee:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    aaf2:	465a      	mov	r2, fp
    aaf4:	6861      	ldr	r1, [r4, #4]
    aaf6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    aafa:	f7fe fe59 	bl	97b0 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    aafe:	4683      	mov	fp, r0
    ab00:	2800      	cmp	r0, #0
    ab02:	d16f      	bne.n	abe4 <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ab04:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    ab08:	2d00      	cmp	r5, #0
    ab0a:	d048      	beq.n	ab9e <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ab0c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    ab0e:	f01a fa6a 	bl	24fe6 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ab12:	6860      	ldr	r0, [r4, #4]
    ab14:	07c1      	lsls	r1, r0, #31
    ab16:	d54a      	bpl.n	abae <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    ab18:	2d00      	cmp	r5, #0
    ab1a:	d045      	beq.n	aba8 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    ab1c:	f010 0f10 	tst.w	r0, #16
    ab20:	bf14      	ite	ne
    ab22:	2304      	movne	r3, #4
    ab24:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    ab26:	6921      	ldr	r1, [r4, #16]
    ab28:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    ab2c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    ab30:	f01a fa59 	bl	24fe6 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    ab34:	210f      	movs	r1, #15
    ab36:	f242 0006 	movw	r0, #8198	; 0x2006
    ab3a:	f7fe fbfb 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    ab3e:	4683      	mov	fp, r0
    ab40:	2800      	cmp	r0, #0
    ab42:	f000 809a 	beq.w	ac7a <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ab46:	220f      	movs	r2, #15
    ab48:	a90a      	add	r1, sp, #40	; 0x28
    ab4a:	3008      	adds	r0, #8
    ab4c:	f01c f8f4 	bl	26d38 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    ab50:	2200      	movs	r2, #0
    ab52:	4659      	mov	r1, fp
    ab54:	f242 0006 	movw	r0, #8198	; 0x2006
    ab58:	f7fe fd4c 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    ab5c:	2800      	cmp	r0, #0
    ab5e:	f040 808f 	bne.w	ac80 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    ab62:	b37d      	cbz	r5, abc4 <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ab64:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ab66:	07da      	lsls	r2, r3, #31
    ab68:	d440      	bmi.n	abec <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    ab6a:	2101      	movs	r1, #1
    ab6c:	4630      	mov	r0, r6
    ab6e:	f7fe fe7f 	bl	9870 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    ab72:	4683      	mov	fp, r0
    ab74:	2800      	cmp	r0, #0
    ab76:	d070      	beq.n	ac5a <bt_le_adv_start_legacy+0x1f6>
    ab78:	4b44      	ldr	r3, [pc, #272]	; (ac8c <bt_le_adv_start_legacy+0x228>)
    ab7a:	4945      	ldr	r1, [pc, #276]	; (ac90 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    ab7c:	4845      	ldr	r0, [pc, #276]	; (ac94 <bt_le_adv_start_legacy+0x230>)
    ab7e:	1ac9      	subs	r1, r1, r3
    ab80:	08c9      	lsrs	r1, r1, #3
    ab82:	0189      	lsls	r1, r1, #6
    ab84:	f041 0101 	orr.w	r1, r1, #1
    ab88:	f018 f83c 	bl	22c04 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ab8c:	9807      	ldr	r0, [sp, #28]
    ab8e:	b348      	cbz	r0, abe4 <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ab90:	2100      	movs	r1, #0
    ab92:	f000 fd8b 	bl	b6ac <bt_conn_set_state>
			bt_conn_unref(conn);
    ab96:	9807      	ldr	r0, [sp, #28]
    ab98:	f01a fc92 	bl	254c0 <bt_conn_unref>
    ab9c:	e022      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    ab9e:	9508      	str	r5, [sp, #32]
    aba0:	a908      	add	r1, sp, #32
    aba2:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    aba6:	e7b2      	b.n	ab0e <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    aba8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    abac:	e7c2      	b.n	ab34 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    abae:	9b18      	ldr	r3, [sp, #96]	; 0x60
    abb0:	b933      	cbnz	r3, abc0 <bt_le_adv_start_legacy+0x15c>
    abb2:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    abb6:	f1c7 0303 	rsb	r3, r7, #3
    abba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    abbe:	e7b9      	b.n	ab34 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    abc0:	2701      	movs	r7, #1
    abc2:	e7f8      	b.n	abb6 <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    abc4:	6863      	ldr	r3, [r4, #4]
    abc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    abca:	e9cd 7301 	strd	r7, r3, [sp, #4]
    abce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    abd0:	9300      	str	r3, [sp, #0]
    abd2:	4652      	mov	r2, sl
    abd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    abd6:	4649      	mov	r1, r9
    abd8:	4630      	mov	r0, r6
    abda:	f7fe ffa7 	bl	9b2c <le_adv_update.constprop.0>
		if (err) {
    abde:	4683      	mov	fp, r0
    abe0:	2800      	cmp	r0, #0
    abe2:	d0bf      	beq.n	ab64 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    abe4:	4658      	mov	r0, fp
    abe6:	b00f      	add	sp, #60	; 0x3c
    abe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    abec:	a907      	add	r1, sp, #28
    abee:	4630      	mov	r0, r6
    abf0:	f7fe f8e2 	bl	8db8 <le_adv_start_add_conn>
		if (err) {
    abf4:	4683      	mov	fp, r0
    abf6:	2800      	cmp	r0, #0
    abf8:	d0b7      	beq.n	ab6a <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    abfa:	f110 0f0c 	cmn.w	r0, #12
    abfe:	d1f1      	bne.n	abe4 <bt_le_adv_start_legacy+0x180>
    ac00:	2d00      	cmp	r5, #0
    ac02:	d1ef      	bne.n	abe4 <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    ac04:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    ac06:	079b      	lsls	r3, r3, #30
    ac08:	d4ec      	bmi.n	abe4 <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ac0a:	6860      	ldr	r0, [r4, #4]
    ac0c:	f080 0002 	eor.w	r0, r0, #2
    ac10:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    ac14:	f00b 0201 	and.w	r2, fp, #1
    ac18:	210c      	movs	r1, #12
    ac1a:	4640      	mov	r0, r8
    ac1c:	f01a fa00 	bl	25020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    ac20:	6862      	ldr	r2, [r4, #4]
    ac22:	2107      	movs	r1, #7
    ac24:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ac28:	4640      	mov	r0, r8
    ac2a:	f01a f9f9 	bl	25020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    ac2e:	6862      	ldr	r2, [r4, #4]
    ac30:	2108      	movs	r1, #8
    ac32:	f002 0201 	and.w	r2, r2, #1
    ac36:	4640      	mov	r0, r8
    ac38:	f01a f9f2 	bl	25020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    ac3c:	463a      	mov	r2, r7
    ac3e:	2109      	movs	r1, #9
    ac40:	4640      	mov	r0, r8
    ac42:	f01a f9ed 	bl	25020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    ac46:	6862      	ldr	r2, [r4, #4]
    ac48:	210b      	movs	r1, #11
    ac4a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    ac4e:	4640      	mov	r0, r8
    ac50:	f01a f9e6 	bl	25020 <atomic_set_bit_to>
	return 0;
    ac54:	f04f 0b00 	mov.w	fp, #0
    ac58:	e7c4      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ac5a:	9807      	ldr	r0, [sp, #28]
    ac5c:	b108      	cbz	r0, ac62 <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    ac5e:	f01a fc2f 	bl	254c0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ac62:	2d00      	cmp	r5, #0
    ac64:	d1d6      	bne.n	ac14 <bt_le_adv_start_legacy+0x1b0>
    ac66:	e7d0      	b.n	ac0a <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    ac68:	f06f 0b0a 	mvn.w	fp, #10
    ac6c:	e7ba      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    ac6e:	f06f 0b15 	mvn.w	fp, #21
    ac72:	e7b7      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    ac74:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    ac78:	e7b4      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    ac7a:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    ac7e:	e7b1      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
    ac80:	4683      	mov	fp, r0
    ac82:	e7af      	b.n	abe4 <bt_le_adv_start_legacy+0x180>
    ac84:	20000094 	.word	0x20000094
    ac88:	20000000 	.word	0x20000000
    ac8c:	000281b4 	.word	0x000281b4
    ac90:	0002827c 	.word	0x0002827c
    ac94:	0002d2b6 	.word	0x0002d2b6

0000ac98 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    ac98:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ac9a:	9c04      	ldr	r4, [sp, #16]
    ac9c:	e9cd 3400 	strd	r3, r4, [sp]
    aca0:	4613      	mov	r3, r2
    aca2:	460a      	mov	r2, r1
    aca4:	4601      	mov	r1, r0
    aca6:	4802      	ldr	r0, [pc, #8]	; (acb0 <bt_le_adv_start+0x18>)
    aca8:	f7ff fedc 	bl	aa64 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    acac:	b002      	add	sp, #8
    acae:	bd10      	pop	{r4, pc}
    acb0:	20000018 	.word	0x20000018

0000acb4 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    acb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    acb6:	4c1f      	ldr	r4, [pc, #124]	; (ad34 <bt_le_adv_resume+0x80>)
    acb8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    acbc:	f01a f987 	bl	24fce <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    acc0:	04c0      	lsls	r0, r0, #19
    acc2:	d535      	bpl.n	ad30 <bt_le_adv_resume+0x7c>
    acc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    acc8:	f01a f981 	bl	24fce <atomic_get>
    accc:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    acce:	f3c0 1580 	ubfx	r5, r0, #6, #1
    acd2:	d42d      	bmi.n	ad30 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    acd4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    acd8:	f01a f979 	bl	24fce <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    acdc:	05c2      	lsls	r2, r0, #23
    acde:	d527      	bpl.n	ad30 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    ace0:	a901      	add	r1, sp, #4
    ace2:	f104 0018 	add.w	r0, r4, #24
    ace6:	f7fe f867 	bl	8db8 <le_adv_start_add_conn>
	if (err) {
    acea:	bb08      	cbnz	r0, ad30 <bt_le_adv_resume+0x7c>
    acec:	f104 0028 	add.w	r0, r4, #40	; 0x28
    acf0:	f01a f96d 	bl	24fce <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    acf4:	0503      	lsls	r3, r0, #20
    acf6:	d402      	bmi.n	acfe <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    acf8:	7e20      	ldrb	r0, [r4, #24]
    acfa:	f7fe fd23 	bl	9744 <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    acfe:	480e      	ldr	r0, [pc, #56]	; (ad38 <bt_le_adv_resume+0x84>)
    ad00:	2101      	movs	r1, #1
    ad02:	f7fe fdb5 	bl	9870 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    ad06:	b150      	cbz	r0, ad1e <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ad08:	9801      	ldr	r0, [sp, #4]
    ad0a:	2100      	movs	r1, #0
    ad0c:	f000 fcce 	bl	b6ac <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad10:	480a      	ldr	r0, [pc, #40]	; (ad3c <bt_le_adv_resume+0x88>)
    ad12:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    ad16:	f01a f94b 	bl	24fb0 <atomic_and>
	return (old & mask) != 0;
    ad1a:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    ad1e:	9801      	ldr	r0, [sp, #4]
    ad20:	f01a fbce 	bl	254c0 <bt_conn_unref>
	if (persist_paused) {
    ad24:	b125      	cbz	r5, ad30 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ad26:	4805      	ldr	r0, [pc, #20]	; (ad3c <bt_le_adv_resume+0x88>)
    ad28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ad2c:	f01a f95e 	bl	24fec <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    ad30:	b003      	add	sp, #12
    ad32:	bd30      	pop	{r4, r5, pc}
    ad34:	20000000 	.word	0x20000000
    ad38:	20000018 	.word	0x20000018
    ad3c:	20000028 	.word	0x20000028

0000ad40 <enh_conn_complete>:
{
    ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad44:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ad48:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    ad4c:	b086      	sub	sp, #24
    ad4e:	4604      	mov	r4, r0
    ad50:	4876      	ldr	r0, [pc, #472]	; (af2c <enh_conn_complete+0x1ec>)
    ad52:	f01a f92d 	bl	24fb0 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    ad56:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ad58:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    ad5c:	d504      	bpl.n	ad68 <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    ad5e:	4974      	ldr	r1, [pc, #464]	; (af30 <enh_conn_complete+0x1f0>)
    ad60:	2200      	movs	r2, #0
    ad62:	2002      	movs	r0, #2
    ad64:	f005 fb6c 	bl	10440 <bt_keys_foreach>
	if (evt->status) {
    ad68:	7825      	ldrb	r5, [r4, #0]
    ad6a:	b385      	cbz	r5, adce <enh_conn_complete+0x8e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ad6c:	2d3c      	cmp	r5, #60	; 0x3c
    ad6e:	d120      	bne.n	adb2 <enh_conn_complete+0x72>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad70:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ad74:	486f      	ldr	r0, [pc, #444]	; (af34 <enh_conn_complete+0x1f4>)
    ad76:	f01a f91b 	bl	24fb0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ad7a:	2000      	movs	r0, #0
    ad7c:	f7fe f872 	bl	8e64 <find_pending_connect.part.0>
		if (!conn) {
    ad80:	4604      	mov	r4, r0
    ad82:	b960      	cbnz	r0, ad9e <enh_conn_complete+0x5e>
    ad84:	4b6c      	ldr	r3, [pc, #432]	; (af38 <enh_conn_complete+0x1f8>)
    ad86:	496d      	ldr	r1, [pc, #436]	; (af3c <enh_conn_complete+0x1fc>)
			BT_ERR("No pending slave connection");
    ad88:	486d      	ldr	r0, [pc, #436]	; (af40 <enh_conn_complete+0x200>)
    ad8a:	1ac9      	subs	r1, r1, r3
    ad8c:	08c9      	lsrs	r1, r1, #3
    ad8e:	0189      	lsls	r1, r1, #6
    ad90:	f041 0101 	orr.w	r1, r1, #1
}
    ad94:	b006      	add	sp, #24
    ad96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    ad9a:	f017 bf33 	b.w	22c04 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    ad9e:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ada0:	2100      	movs	r1, #0
    ada2:	f000 fc83 	bl	b6ac <bt_conn_set_state>
		bt_conn_unref(conn);
    ada6:	4620      	mov	r0, r4
}
    ada8:	b006      	add	sp, #24
    adaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    adae:	f01a bb87 	b.w	254c0 <bt_conn_unref>
    adb2:	4b61      	ldr	r3, [pc, #388]	; (af38 <enh_conn_complete+0x1f8>)
    adb4:	4a61      	ldr	r2, [pc, #388]	; (af3c <enh_conn_complete+0x1fc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    adb6:	4863      	ldr	r0, [pc, #396]	; (af44 <enh_conn_complete+0x204>)
    adb8:	1ad2      	subs	r2, r2, r3
    adba:	08d2      	lsrs	r2, r2, #3
    adbc:	0192      	lsls	r2, r2, #6
    adbe:	f042 0202 	orr.w	r2, r2, #2
    adc2:	4629      	mov	r1, r5
}
    adc4:	b006      	add	sp, #24
    adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    adca:	f017 bf28 	b.w	22c1e <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    adce:	7923      	ldrb	r3, [r4, #4]
    add0:	3b02      	subs	r3, #2
    add2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    add4:	f104 0604 	add.w	r6, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    add8:	d839      	bhi.n	ae4e <enh_conn_complete+0x10e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    adda:	4631      	mov	r1, r6
    addc:	a804      	add	r0, sp, #16
    adde:	f01a f902 	bl	24fe6 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ade2:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ade6:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    adea:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    adec:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    adf0:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    adf4:	f01a f8f4 	bl	24fe0 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    adf8:	2301      	movs	r3, #1
    adfa:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    adfe:	78e3      	ldrb	r3, [r4, #3]
    ae00:	2b01      	cmp	r3, #1
    ae02:	d10c      	bne.n	ae1e <enh_conn_complete+0xde>
    ae04:	a804      	add	r0, sp, #16
    ae06:	f7fe f82d 	bl	8e64 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ae0a:	78e3      	ldrb	r3, [r4, #3]
    ae0c:	2b01      	cmp	r3, #1
    ae0e:	4605      	mov	r5, r0
    ae10:	d104      	bne.n	ae1c <enh_conn_complete+0xdc>
    ae12:	4848      	ldr	r0, [pc, #288]	; (af34 <enh_conn_complete+0x1f4>)
    ae14:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ae18:	f01a f8ca 	bl	24fb0 <atomic_and>
	if (!conn) {
    ae1c:	bb55      	cbnz	r5, ae74 <enh_conn_complete+0x134>
    ae1e:	4a46      	ldr	r2, [pc, #280]	; (af38 <enh_conn_complete+0x1f8>)
    ae20:	4c46      	ldr	r4, [pc, #280]	; (af3c <enh_conn_complete+0x1fc>)
		BT_ERR("No pending conn for peer %s",
    ae22:	4630      	mov	r0, r6
    ae24:	1aa4      	subs	r4, r4, r2
    ae26:	f7fd f96d 	bl	8104 <bt_addr_le_str_real>
    ae2a:	f7fa fbd7 	bl	55dc <log_strdup>
    ae2e:	08e4      	lsrs	r4, r4, #3
    ae30:	01a4      	lsls	r4, r4, #6
    ae32:	f044 0401 	orr.w	r4, r4, #1
    ae36:	4601      	mov	r1, r0
    ae38:	4622      	mov	r2, r4
    ae3a:	4843      	ldr	r0, [pc, #268]	; (af48 <enh_conn_complete+0x208>)
    ae3c:	f017 feef 	bl	22c1e <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    ae40:	211f      	movs	r1, #31
    ae42:	4638      	mov	r0, r7
    ae44:	f01a f997 	bl	25176 <bt_hci_disconnect>
}
    ae48:	b006      	add	sp, #24
    ae4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    ae4e:	78e3      	ldrb	r3, [r4, #3]
    ae50:	2b01      	cmp	r3, #1
    ae52:	bf04      	itt	eq
    ae54:	4b3d      	ldreq	r3, [pc, #244]	; (af4c <enh_conn_complete+0x20c>)
    ae56:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    ae5a:	4631      	mov	r1, r6
    ae5c:	4628      	mov	r0, r5
    ae5e:	f01a f982 	bl	25166 <bt_lookup_id_addr>
    ae62:	4601      	mov	r1, r0
    ae64:	a804      	add	r0, sp, #16
    ae66:	f01a f8be 	bl	24fe6 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    ae6a:	4631      	mov	r1, r6
    ae6c:	a802      	add	r0, sp, #8
    ae6e:	f01a f8ba 	bl	24fe6 <bt_addr_le_copy>
    ae72:	e7c4      	b.n	adfe <enh_conn_complete+0xbe>
	conn->handle = handle;
    ae74:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ae76:	a904      	add	r1, sp, #16
	conn->handle = handle;
    ae78:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ae7c:	f01a f8b3 	bl	24fe6 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    ae80:	7e22      	ldrb	r2, [r4, #24]
    ae82:	7de3      	ldrb	r3, [r4, #23]
    ae84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae88:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    ae8c:	7ea2      	ldrb	r2, [r4, #26]
    ae8e:	7e63      	ldrb	r3, [r4, #25]
    ae90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae94:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ae98:	7ee3      	ldrb	r3, [r4, #27]
    ae9a:	7f22      	ldrb	r2, [r4, #28]
    ae9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aea0:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    aea4:	78e7      	ldrb	r7, [r4, #3]
    aea6:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    aea8:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aeaa:	2f01      	cmp	r7, #1
	conn->err = 0U;
    aeac:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aeae:	d125      	bne.n	aefc <enh_conn_complete+0x1bc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aeb0:	4e26      	ldr	r6, [pc, #152]	; (af4c <enh_conn_complete+0x20c>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    aeb2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    aeb6:	a902      	add	r1, sp, #8
    aeb8:	f01a f895 	bl	24fe6 <bt_addr_le_copy>
    aebc:	f106 0028 	add.w	r0, r6, #40	; 0x28
    aec0:	f01a f885 	bl	24fce <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    aec4:	0502      	lsls	r2, r0, #20
    aec6:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    aeca:	d425      	bmi.n	af18 <enh_conn_complete+0x1d8>
				if (bt_addr_cmp(&evt->local_rpa,
    aecc:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    aece:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    aed2:	2206      	movs	r2, #6
    aed4:	4669      	mov	r1, sp
    aed6:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    aed8:	9300      	str	r3, [sp, #0]
    aeda:	f8ad 3004 	strh.w	r3, [sp, #4]
    aede:	f019 fea6 	bl	24c2e <memcmp>
    aee2:	4603      	mov	r3, r0
					bt_addr_copy(&conn->le.resp_addr.a,
    aee4:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    aee8:	b19b      	cbz	r3, af12 <enh_conn_complete+0x1d2>
					bt_addr_copy(&conn->le.resp_addr.a,
    aeea:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    aeec:	f01a f878 	bl	24fe0 <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    aef0:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
    aef4:	065b      	lsls	r3, r3, #25
    aef6:	d501      	bpl.n	aefc <enh_conn_complete+0x1bc>
			bt_le_adv_resume();
    aef8:	f7ff fedc 	bl	acb4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    aefc:	2107      	movs	r1, #7
    aefe:	4628      	mov	r0, r5
    af00:	f000 fbd4 	bl	b6ac <bt_conn_set_state>
	conn_auto_initiate(conn);
    af04:	4628      	mov	r0, r5
    af06:	f7fe fe85 	bl	9c14 <conn_auto_initiate>
	bt_conn_unref(conn);
    af0a:	4628      	mov	r0, r5
    af0c:	f01a fad8 	bl	254c0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    af10:	e79a      	b.n	ae48 <enh_conn_complete+0x108>
					bt_addr_copy(&conn->le.resp_addr.a,
    af12:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    af16:	e7e9      	b.n	aeec <enh_conn_complete+0x1ac>
						&bt_dev.id_addr[conn->id]);
    af18:	7a29      	ldrb	r1, [r5, #8]
    af1a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    af1e:	4431      	add	r1, r6
    af20:	f105 0096 	add.w	r0, r5, #150	; 0x96
    af24:	f01a f85f 	bl	24fe6 <bt_addr_le_copy>
    af28:	e7e2      	b.n	aef0 <enh_conn_complete+0x1b0>
    af2a:	bf00      	nop
    af2c:	20000094 	.word	0x20000094
    af30:	00025275 	.word	0x00025275
    af34:	20000028 	.word	0x20000028
    af38:	000281b4 	.word	0x000281b4
    af3c:	0002827c 	.word	0x0002827c
    af40:	0002d2d1 	.word	0x0002d2d1
    af44:	0002d2ed 	.word	0x0002d2ed
    af48:	0002d306 	.word	0x0002d306
    af4c:	20000000 	.word	0x20000000

0000af50 <le_legacy_conn_complete>:
{
    af50:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    af52:	6881      	ldr	r1, [r0, #8]
{
    af54:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    af56:	780b      	ldrb	r3, [r1, #0]
    af58:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    af5c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    af60:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    af64:	78cb      	ldrb	r3, [r1, #3]
    af66:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    af6a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    af6e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    af72:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    af76:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    af7a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    af7e:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    af82:	7c4b      	ldrb	r3, [r1, #17]
    af84:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    af88:	a803      	add	r0, sp, #12
    af8a:	3104      	adds	r1, #4
    af8c:	f01a f82b 	bl	24fe6 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    af90:	f10d 0013 	add.w	r0, sp, #19
    af94:	4908      	ldr	r1, [pc, #32]	; (afb8 <le_legacy_conn_complete+0x68>)
    af96:	f01a f823 	bl	24fe0 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    af9a:	2300      	movs	r3, #0
    af9c:	4669      	mov	r1, sp
    af9e:	f10d 0019 	add.w	r0, sp, #25
    afa2:	9300      	str	r3, [sp, #0]
    afa4:	f8ad 3004 	strh.w	r3, [sp, #4]
    afa8:	f01a f81a 	bl	24fe0 <bt_addr_copy>
	enh_conn_complete(&enh);
    afac:	a802      	add	r0, sp, #8
    afae:	f7ff fec7 	bl	ad40 <enh_conn_complete>
}
    afb2:	b00b      	add	sp, #44	; 0x2c
    afb4:	f85d fb04 	ldr.w	pc, [sp], #4
    afb8:	2000002d 	.word	0x2000002d

0000afbc <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    afbe:	4d21      	ldr	r5, [pc, #132]	; (b044 <bt_pub_key_gen+0x88>)
    afc0:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    afc4:	f003 0306 	and.w	r3, r3, #6
    afc8:	2b06      	cmp	r3, #6
    afca:	d00d      	beq.n	afe8 <bt_pub_key_gen+0x2c>
    afcc:	4b1e      	ldr	r3, [pc, #120]	; (b048 <bt_pub_key_gen+0x8c>)
    afce:	491f      	ldr	r1, [pc, #124]	; (b04c <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    afd0:	481f      	ldr	r0, [pc, #124]	; (b050 <bt_pub_key_gen+0x94>)
    afd2:	1ac9      	subs	r1, r1, r3
    afd4:	08c9      	lsrs	r1, r1, #3
    afd6:	0189      	lsls	r1, r1, #6
    afd8:	f041 0102 	orr.w	r1, r1, #2
    afdc:	f017 fe12 	bl	22c04 <log_0>
		return -ENOTSUP;
    afe0:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    afe4:	4620      	mov	r0, r4
    afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    afe8:	4e1a      	ldr	r6, [pc, #104]	; (b054 <bt_pub_key_gen+0x98>)
    afea:	6833      	ldr	r3, [r6, #0]
    afec:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    afee:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    aff0:	2104      	movs	r1, #4
    aff2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    aff6:	f01a f808 	bl	2500a <atomic_test_and_set_bit>
    affa:	4607      	mov	r7, r0
    affc:	bb00      	cbnz	r0, b040 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    affe:	f06f 0108 	mvn.w	r1, #8
    b002:	f105 0094 	add.w	r0, r5, #148	; 0x94
    b006:	f019 ffd3 	bl	24fb0 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    b00a:	463a      	mov	r2, r7
    b00c:	4639      	mov	r1, r7
    b00e:	f242 0025 	movw	r0, #8229	; 0x2025
    b012:	f7fe faef 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    b016:	4604      	mov	r4, r0
    b018:	2800      	cmp	r0, #0
    b01a:	d0e3      	beq.n	afe4 <bt_pub_key_gen+0x28>
    b01c:	4b0a      	ldr	r3, [pc, #40]	; (b048 <bt_pub_key_gen+0x8c>)
    b01e:	490b      	ldr	r1, [pc, #44]	; (b04c <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    b020:	480d      	ldr	r0, [pc, #52]	; (b058 <bt_pub_key_gen+0x9c>)
    b022:	1ac9      	subs	r1, r1, r3
    b024:	08c9      	lsrs	r1, r1, #3
    b026:	0189      	lsls	r1, r1, #6
    b028:	f041 0101 	orr.w	r1, r1, #1
    b02c:	f017 fdea 	bl	22c04 <log_0>
    b030:	f06f 0110 	mvn.w	r1, #16
    b034:	f105 0094 	add.w	r0, r5, #148	; 0x94
    b038:	f019 ffba 	bl	24fb0 <atomic_and>
		pub_key_cb = NULL;
    b03c:	6037      	str	r7, [r6, #0]
		return err;
    b03e:	e7d1      	b.n	afe4 <bt_pub_key_gen+0x28>
		return 0;
    b040:	2400      	movs	r4, #0
    b042:	e7cf      	b.n	afe4 <bt_pub_key_gen+0x28>
    b044:	20000000 	.word	0x20000000
    b048:	000281b4 	.word	0x000281b4
    b04c:	0002827c 	.word	0x0002827c
    b050:	0002d322 	.word	0x0002d322
    b054:	2000db8c 	.word	0x2000db8c
    b058:	0002d341 	.word	0x0002d341

0000b05c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    b05c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b05e:	4804      	ldr	r0, [pc, #16]	; (b070 <bt_pub_key_get+0x14>)
    b060:	f019 ffb5 	bl	24fce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
    b064:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
    b068:	4802      	ldr	r0, [pc, #8]	; (b074 <bt_pub_key_get+0x18>)
    b06a:	bf08      	it	eq
    b06c:	2000      	moveq	r0, #0
    b06e:	bd08      	pop	{r3, pc}
    b070:	20000094 	.word	0x20000094
    b074:	2000fac7 	.word	0x2000fac7

0000b078 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    b07a:	4d1c      	ldr	r5, [pc, #112]	; (b0ec <bt_dh_key_gen+0x74>)
    b07c:	682b      	ldr	r3, [r5, #0]
    b07e:	428b      	cmp	r3, r1
{
    b080:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    b082:	d02d      	beq.n	b0e0 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b084:	b113      	cbz	r3, b08c <bt_dh_key_gen+0x14>
		return -EBUSY;
    b086:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b08c:	4818      	ldr	r0, [pc, #96]	; (b0f0 <bt_dh_key_gen+0x78>)
    b08e:	f019 ff9e 	bl	24fce <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b092:	06c2      	lsls	r2, r0, #27
    b094:	f3c0 1700 	ubfx	r7, r0, #4, #1
    b098:	d4f5      	bmi.n	b086 <bt_dh_key_gen+0xe>
    b09a:	4815      	ldr	r0, [pc, #84]	; (b0f0 <bt_dh_key_gen+0x78>)
    b09c:	f019 ff97 	bl	24fce <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    b0a0:	0703      	lsls	r3, r0, #28
    b0a2:	d520      	bpl.n	b0e6 <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
    b0a4:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    b0a6:	f242 0026 	movw	r0, #8230	; 0x2026
    b0aa:	2140      	movs	r1, #64	; 0x40
    b0ac:	f7fe f942 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
    b0b0:	4604      	mov	r4, r0
    b0b2:	b918      	cbnz	r0, b0bc <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
    b0b4:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    b0b6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    b0ba:	e7e6      	b.n	b08a <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
    b0bc:	2140      	movs	r1, #64	; 0x40
    b0be:	3008      	adds	r0, #8
    b0c0:	f01b fe34 	bl	26d2c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    b0c4:	2240      	movs	r2, #64	; 0x40
    b0c6:	4631      	mov	r1, r6
    b0c8:	f019 fdc2 	bl	24c50 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    b0cc:	463a      	mov	r2, r7
    b0ce:	4621      	mov	r1, r4
    b0d0:	f242 0026 	movw	r0, #8230	; 0x2026
    b0d4:	f7fe fa8e 	bl	95f4 <bt_hci_cmd_send_sync>
	if (err) {
    b0d8:	2800      	cmp	r0, #0
    b0da:	d0d6      	beq.n	b08a <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    b0dc:	602f      	str	r7, [r5, #0]
		return err;
    b0de:	e7d4      	b.n	b08a <bt_dh_key_gen+0x12>
		return -EALREADY;
    b0e0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    b0e4:	e7d1      	b.n	b08a <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    b0e6:	f06f 0030 	mvn.w	r0, #48	; 0x30
    b0ea:	e7ce      	b.n	b08a <bt_dh_key_gen+0x12>
    b0ec:	2000db88 	.word	0x2000db88
    b0f0:	20000094 	.word	0x20000094

0000b0f4 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    b0f4:	2300      	movs	r3, #0
	tx->user_data = NULL;
    b0f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    b0fa:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    b0fc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    b0fe:	4801      	ldr	r0, [pc, #4]	; (b104 <tx_free+0x10>)
    b100:	f01c bb0f 	b.w	27722 <k_queue_append>
    b104:	2000a11c 	.word	0x2000a11c

0000b108 <notify_connected>:
{
    b108:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    b10a:	4b09      	ldr	r3, [pc, #36]	; (b130 <notify_connected+0x28>)
    b10c:	681d      	ldr	r5, [r3, #0]
{
    b10e:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
    b110:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    b112:	b92d      	cbnz	r5, b120 <notify_connected+0x18>
	if (!conn->err) {
    b114:	b951      	cbnz	r1, b12c <notify_connected+0x24>
		bt_gatt_connected(conn);
    b116:	4620      	mov	r0, r4
}
    b118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    b11c:	f003 b910 	b.w	e340 <bt_gatt_connected>
		if (cb->connected) {
    b120:	682b      	ldr	r3, [r5, #0]
    b122:	b10b      	cbz	r3, b128 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    b124:	4620      	mov	r0, r4
    b126:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b128:	69ad      	ldr	r5, [r5, #24]
    b12a:	e7f1      	b.n	b110 <notify_connected+0x8>
}
    b12c:	bd38      	pop	{r3, r4, r5, pc}
    b12e:	bf00      	nop
    b130:	2000db98 	.word	0x2000db98

0000b134 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    b138:	694d      	ldr	r5, [r1, #20]
{
    b13a:	4604      	mov	r4, r0
    b13c:	460e      	mov	r6, r1
    b13e:	4691      	mov	r9, r2
    b140:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    b142:	f04f 33ff 	mov.w	r3, #4294967295
    b146:	4844      	ldr	r0, [pc, #272]	; (b258 <send_frag+0x124>)
    b148:	f04f 32ff 	mov.w	r2, #4294967295
    b14c:	f015 fd8a 	bl	20c64 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    b150:	7b63      	ldrb	r3, [r4, #13]
    b152:	2b07      	cmp	r3, #7
    b154:	d151      	bne.n	b1fa <send_frag+0xc6>
	__asm__ volatile(
    b156:	f04f 0320 	mov.w	r3, #32
    b15a:	f3ef 8211 	mrs	r2, BASEPRI
    b15e:	f383 8811 	msr	BASEPRI, r3
    b162:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    b166:	69a3      	ldr	r3, [r4, #24]
    b168:	2d00      	cmp	r5, #0
    b16a:	d058      	beq.n	b21e <send_frag+0xea>
	parent->next = child;
    b16c:	2100      	movs	r1, #0
    b16e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    b170:	2b00      	cmp	r3, #0
    b172:	d151      	bne.n	b218 <send_frag+0xe4>
	list->head = node;
    b174:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    b178:	f382 8811 	msr	BASEPRI, r2
    b17c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    b180:	2104      	movs	r1, #4
    b182:	f106 0008 	add.w	r0, r6, #8
    b186:	f01b fde8 	bl	26d5a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b18a:	8823      	ldrh	r3, [r4, #0]
    b18c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    b190:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b194:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b196:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b19a:	3b04      	subs	r3, #4
    b19c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b19e:	2302      	movs	r3, #2
    b1a0:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    b1a2:	4630      	mov	r0, r6
    b1a4:	f01a f876 	bl	25294 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    b1a8:	4601      	mov	r1, r0
    b1aa:	2800      	cmp	r0, #0
    b1ac:	d051      	beq.n	b252 <send_frag+0x11e>
    b1ae:	4b2b      	ldr	r3, [pc, #172]	; (b25c <send_frag+0x128>)
    b1b0:	4a2b      	ldr	r2, [pc, #172]	; (b260 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    b1b2:	482c      	ldr	r0, [pc, #176]	; (b264 <send_frag+0x130>)
    b1b4:	1ad2      	subs	r2, r2, r3
    b1b6:	08d2      	lsrs	r2, r2, #3
    b1b8:	0192      	lsls	r2, r2, #6
    b1ba:	f042 0201 	orr.w	r2, r2, #1
    b1be:	f017 fd2e 	bl	22c1e <log_1>
	__asm__ volatile(
    b1c2:	f04f 0320 	mov.w	r3, #32
    b1c6:	f3ef 8011 	mrs	r0, BASEPRI
    b1ca:	f383 8811 	msr	BASEPRI, r3
    b1ce:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    b1d2:	2d00      	cmp	r5, #0
    b1d4:	d037      	beq.n	b246 <send_frag+0x112>
	return list->head;
    b1d6:	6963      	ldr	r3, [r4, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b1d8:	2200      	movs	r2, #0
    b1da:	b153      	cbz	r3, b1f2 <send_frag+0xbe>
    b1dc:	429d      	cmp	r5, r3
    b1de:	d12f      	bne.n	b240 <send_frag+0x10c>
	return node->next;
    b1e0:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    b1e2:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    b1e4:	bb3a      	cbnz	r2, b236 <send_frag+0x102>
    b1e6:	428d      	cmp	r5, r1
	list->head = node;
    b1e8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    b1ea:	d100      	bne.n	b1ee <send_frag+0xba>
	list->tail = node;
    b1ec:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    b1ee:	2300      	movs	r3, #0
    b1f0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    b1f2:	f380 8811 	msr	BASEPRI, r0
    b1f6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b1fa:	4817      	ldr	r0, [pc, #92]	; (b258 <send_frag+0x124>)
    b1fc:	f015 fd0c 	bl	20c18 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    b200:	b115      	cbz	r5, b208 <send_frag+0xd4>
		tx_free(tx);
    b202:	4628      	mov	r0, r5
    b204:	f7ff ff76 	bl	b0f4 <tx_free>
	}

	if (always_consume) {
    b208:	b11f      	cbz	r7, b212 <send_frag+0xde>
		net_buf_unref(buf);
    b20a:	4630      	mov	r0, r6
    b20c:	f012 fb32 	bl	1d874 <net_buf_unref>
	}
	return false;
    b210:	2700      	movs	r7, #0
}
    b212:	4638      	mov	r0, r7
    b214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b218:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b21a:	61a5      	str	r5, [r4, #24]
}
    b21c:	e7ac      	b.n	b178 <send_frag+0x44>
		if (tail_tx) {
    b21e:	b133      	cbz	r3, b22e <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    b220:	f103 080c 	add.w	r8, r3, #12
    b224:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    b226:	3301      	adds	r3, #1
    b228:	f8c8 3000 	str.w	r3, [r8]
    b22c:	e7a4      	b.n	b178 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    b22e:	69e3      	ldr	r3, [r4, #28]
    b230:	f104 081c 	add.w	r8, r4, #28
    b234:	e7f7      	b.n	b226 <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    b236:	428d      	cmp	r5, r1
	parent->next = child;
    b238:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b23a:	bf08      	it	eq
    b23c:	61a2      	streq	r2, [r4, #24]
}
    b23e:	e7d6      	b.n	b1ee <send_frag+0xba>
	return node->next;
    b240:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b242:	681b      	ldr	r3, [r3, #0]
    b244:	e7c9      	b.n	b1da <send_frag+0xa6>
			(*pending_no_cb)--;
    b246:	f8d8 3000 	ldr.w	r3, [r8]
    b24a:	3b01      	subs	r3, #1
    b24c:	f8c8 3000 	str.w	r3, [r8]
    b250:	e7cf      	b.n	b1f2 <send_frag+0xbe>
	return true;
    b252:	2701      	movs	r7, #1
    b254:	e7dd      	b.n	b212 <send_frag+0xde>
    b256:	bf00      	nop
    b258:	200000c8 	.word	0x200000c8
    b25c:	000281b4 	.word	0x000281b4
    b260:	000281cc 	.word	0x000281cc
    b264:	0002cc2e 	.word	0x0002cc2e

0000b268 <bt_conn_get_pkts>:
}
    b268:	4800      	ldr	r0, [pc, #0]	; (b26c <bt_conn_get_pkts+0x4>)
    b26a:	4770      	bx	lr
    b26c:	200000c8 	.word	0x200000c8

0000b270 <notify_le_param_updated>:
{
    b270:	b570      	push	{r4, r5, r6, lr}
    b272:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b274:	f3bf 8f5b 	dmb	ish
    b278:	6863      	ldr	r3, [r4, #4]
    b27a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    b27e:	059b      	lsls	r3, r3, #22
    b280:	f100 0004 	add.w	r0, r0, #4
    b284:	d511      	bpl.n	b2aa <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    b286:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    b28a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    b28e:	429a      	cmp	r2, r3
    b290:	d80b      	bhi.n	b2aa <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    b292:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    b296:	429a      	cmp	r2, r3
    b298:	d307      	bcc.n	b2aa <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    b29a:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    b29e:	429a      	cmp	r2, r3
    b2a0:	d103      	bne.n	b2aa <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b2a2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b2a6:	f01a f83a 	bl	2531e <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
    b2aa:	4b08      	ldr	r3, [pc, #32]	; (b2cc <notify_le_param_updated+0x5c>)
    b2ac:	681d      	ldr	r5, [r3, #0]
    b2ae:	b905      	cbnz	r5, b2b2 <notify_le_param_updated+0x42>
}
    b2b0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    b2b2:	68ee      	ldr	r6, [r5, #12]
    b2b4:	b13e      	cbz	r6, b2c6 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    b2b6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b2ba:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b2be:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b2c2:	4620      	mov	r0, r4
    b2c4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    b2c6:	69ad      	ldr	r5, [r5, #24]
    b2c8:	e7f1      	b.n	b2ae <notify_le_param_updated+0x3e>
    b2ca:	bf00      	nop
    b2cc:	2000db98 	.word	0x2000db98

0000b2d0 <le_param_req>:
{
    b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2d2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    b2d4:	4608      	mov	r0, r1
{
    b2d6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b2d8:	f019 ffab 	bl	25232 <bt_le_conn_params_valid>
    b2dc:	4604      	mov	r4, r0
    b2de:	b910      	cbnz	r0, b2e6 <le_param_req+0x16>
		return false;
    b2e0:	2400      	movs	r4, #0
}
    b2e2:	4620      	mov	r0, r4
    b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    b2e6:	4b09      	ldr	r3, [pc, #36]	; (b30c <le_param_req+0x3c>)
    b2e8:	681e      	ldr	r6, [r3, #0]
    b2ea:	2e00      	cmp	r6, #0
    b2ec:	d0f9      	beq.n	b2e2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    b2ee:	68b3      	ldr	r3, [r6, #8]
    b2f0:	b90b      	cbnz	r3, b2f6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    b2f2:	69b6      	ldr	r6, [r6, #24]
    b2f4:	e7f9      	b.n	b2ea <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    b2f6:	4629      	mov	r1, r5
    b2f8:	4638      	mov	r0, r7
    b2fa:	4798      	blx	r3
    b2fc:	2800      	cmp	r0, #0
    b2fe:	d0ef      	beq.n	b2e0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    b300:	4628      	mov	r0, r5
    b302:	f019 ff96 	bl	25232 <bt_le_conn_params_valid>
    b306:	2800      	cmp	r0, #0
    b308:	d1f3      	bne.n	b2f2 <le_param_req+0x22>
    b30a:	e7e9      	b.n	b2e0 <le_param_req+0x10>
    b30c:	2000db98 	.word	0x2000db98

0000b310 <bt_conn_identity_resolved>:
{
    b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b312:	78c3      	ldrb	r3, [r0, #3]
{
    b314:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b316:	b93b      	cbnz	r3, b328 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    b318:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    b31c:	4b08      	ldr	r3, [pc, #32]	; (b340 <bt_conn_identity_resolved+0x30>)
    b31e:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    b320:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    b324:	b91d      	cbnz	r5, b32e <bt_conn_identity_resolved+0x1e>
}
    b326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    b328:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    b32c:	e7f6      	b.n	b31c <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    b32e:	692b      	ldr	r3, [r5, #16]
    b330:	b11b      	cbz	r3, b33a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    b332:	463a      	mov	r2, r7
    b334:	4631      	mov	r1, r6
    b336:	4620      	mov	r0, r4
    b338:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b33a:	69ad      	ldr	r5, [r5, #24]
    b33c:	e7f2      	b.n	b324 <bt_conn_identity_resolved+0x14>
    b33e:	bf00      	nop
    b340:	2000db98 	.word	0x2000db98

0000b344 <bt_conn_security_changed>:
{
    b344:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    b346:	7a43      	ldrb	r3, [r0, #9]
    b348:	7283      	strb	r3, [r0, #10]
{
    b34a:	4604      	mov	r4, r0
    b34c:	4615      	mov	r5, r2
	bt_l2cap_security_changed(conn, hci_err);
    b34e:	f01a f989 	bl	25664 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    b352:	4b0d      	ldr	r3, [pc, #52]	; (b388 <bt_conn_security_changed+0x44>)
    b354:	681e      	ldr	r6, [r3, #0]
    b356:	b96e      	cbnz	r6, b374 <bt_conn_security_changed+0x30>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    b358:	b9a5      	cbnz	r5, b384 <bt_conn_security_changed+0x40>
    b35a:	7a63      	ldrb	r3, [r4, #9]
    b35c:	2b01      	cmp	r3, #1
    b35e:	d911      	bls.n	b384 <bt_conn_security_changed+0x40>
		if (conn->type == BT_CONN_TYPE_LE) {
    b360:	78a3      	ldrb	r3, [r4, #2]
    b362:	2b01      	cmp	r3, #1
    b364:	d10e      	bne.n	b384 <bt_conn_security_changed+0x40>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    b366:	7a20      	ldrb	r0, [r4, #8]
    b368:	f104 0188 	add.w	r1, r4, #136	; 0x88
}
    b36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    b370:	f005 ba4e 	b.w	10810 <bt_keys_update_usage>
		if (cb->security_changed) {
    b374:	6973      	ldr	r3, [r6, #20]
    b376:	b11b      	cbz	r3, b380 <bt_conn_security_changed+0x3c>
			cb->security_changed(conn, conn->sec_level, err);
    b378:	7a61      	ldrb	r1, [r4, #9]
    b37a:	462a      	mov	r2, r5
    b37c:	4620      	mov	r0, r4
    b37e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b380:	69b6      	ldr	r6, [r6, #24]
    b382:	e7e8      	b.n	b356 <bt_conn_security_changed+0x12>
}
    b384:	bd70      	pop	{r4, r5, r6, pc}
    b386:	bf00      	nop
    b388:	2000db98 	.word	0x2000db98

0000b38c <bt_conn_cb_register>:
	cb->_next = callback_list;
    b38c:	4b02      	ldr	r3, [pc, #8]	; (b398 <bt_conn_cb_register+0xc>)
    b38e:	681a      	ldr	r2, [r3, #0]
    b390:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    b392:	6018      	str	r0, [r3, #0]
}
    b394:	4770      	bx	lr
    b396:	bf00      	nop
    b398:	2000db98 	.word	0x2000db98

0000b39c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    b39c:	b570      	push	{r4, r5, r6, lr}
    b39e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    b3a0:	f100 0634 	add.w	r6, r0, #52	; 0x34
    b3a4:	2200      	movs	r2, #0
    b3a6:	2300      	movs	r3, #0
    b3a8:	4630      	mov	r0, r6
    b3aa:	f01b fc6e 	bl	26c8a <net_buf_get>
    b3ae:	4605      	mov	r5, r0
    b3b0:	b958      	cbnz	r0, b3ca <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    b3b2:	4620      	mov	r0, r4
    b3b4:	f01a f840 	bl	25438 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b3b8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b3bc:	4807      	ldr	r0, [pc, #28]	; (b3dc <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    b3be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b3c2:	2200      	movs	r2, #0
    b3c4:	2300      	movs	r3, #0
    b3c6:	f015 bd81 	b.w	20ecc <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    b3ca:	6968      	ldr	r0, [r5, #20]
    b3cc:	b108      	cbz	r0, b3d2 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    b3ce:	f7ff fe91 	bl	b0f4 <tx_free>
		net_buf_unref(buf);
    b3d2:	4628      	mov	r0, r5
    b3d4:	f012 fa4e 	bl	1d874 <net_buf_unref>
    b3d8:	e7e4      	b.n	b3a4 <conn_cleanup+0x8>
    b3da:	bf00      	nop
    b3dc:	2000b0f0 	.word	0x2000b0f0

0000b3e0 <bt_conn_recv>:
{
    b3e0:	b570      	push	{r4, r5, r6, lr}
    b3e2:	4616      	mov	r6, r2
    b3e4:	4604      	mov	r4, r0
    b3e6:	460d      	mov	r5, r1
	tx_notify(conn);
    b3e8:	f019 ffa8 	bl	2533c <tx_notify>
	switch (flags) {
    b3ec:	2e01      	cmp	r6, #1
    b3ee:	d02b      	beq.n	b448 <bt_conn_recv+0x68>
    b3f0:	2e02      	cmp	r6, #2
    b3f2:	d158      	bne.n	b4a6 <bt_conn_recv+0xc6>
		if (conn->rx) {
    b3f4:	6923      	ldr	r3, [r4, #16]
    b3f6:	b163      	cbz	r3, b412 <bt_conn_recv+0x32>
    b3f8:	4b35      	ldr	r3, [pc, #212]	; (b4d0 <bt_conn_recv+0xf0>)
    b3fa:	4936      	ldr	r1, [pc, #216]	; (b4d4 <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    b3fc:	4836      	ldr	r0, [pc, #216]	; (b4d8 <bt_conn_recv+0xf8>)
    b3fe:	1ac9      	subs	r1, r1, r3
    b400:	08c9      	lsrs	r1, r1, #3
    b402:	0189      	lsls	r1, r1, #6
    b404:	f041 0101 	orr.w	r1, r1, #1
    b408:	f017 fbfc 	bl	22c04 <log_0>
			bt_conn_reset_rx_state(conn);
    b40c:	4620      	mov	r0, r4
    b40e:	f01a f813 	bl	25438 <bt_conn_reset_rx_state>
		conn->rx = buf;
    b412:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b414:	6923      	ldr	r3, [r4, #16]
    b416:	8999      	ldrh	r1, [r3, #12]
    b418:	2901      	cmp	r1, #1
    b41a:	d958      	bls.n	b4ce <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b41c:	689a      	ldr	r2, [r3, #8]
    b41e:	8812      	ldrh	r2, [r2, #0]
    b420:	3204      	adds	r2, #4
    b422:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    b424:	428a      	cmp	r2, r1
    b426:	d852      	bhi.n	b4ce <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    b428:	d249      	bcs.n	b4be <bt_conn_recv+0xde>
    b42a:	4829      	ldr	r0, [pc, #164]	; (b4d0 <bt_conn_recv+0xf0>)
    b42c:	4b29      	ldr	r3, [pc, #164]	; (b4d4 <bt_conn_recv+0xf4>)
    b42e:	1a1b      	subs	r3, r3, r0
    b430:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    b432:	019b      	lsls	r3, r3, #6
    b434:	4829      	ldr	r0, [pc, #164]	; (b4dc <bt_conn_recv+0xfc>)
    b436:	f043 0301 	orr.w	r3, r3, #1
    b43a:	f017 fc04 	bl	22c46 <log_2>
		bt_conn_reset_rx_state(conn);
    b43e:	4620      	mov	r0, r4
}
    b440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    b444:	f019 bff8 	b.w	25438 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    b448:	6920      	ldr	r0, [r4, #16]
    b44a:	b968      	cbnz	r0, b468 <bt_conn_recv+0x88>
    b44c:	4921      	ldr	r1, [pc, #132]	; (b4d4 <bt_conn_recv+0xf4>)
    b44e:	4b20      	ldr	r3, [pc, #128]	; (b4d0 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    b450:	4823      	ldr	r0, [pc, #140]	; (b4e0 <bt_conn_recv+0x100>)
    b452:	1ac9      	subs	r1, r1, r3
    b454:	08c9      	lsrs	r1, r1, #3
    b456:	0189      	lsls	r1, r1, #6
    b458:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    b45c:	f017 fbd2 	bl	22c04 <log_0>
			bt_conn_reset_rx_state(conn);
    b460:	4620      	mov	r0, r4
    b462:	f019 ffe9 	bl	25438 <bt_conn_reset_rx_state>
    b466:	e001      	b.n	b46c <bt_conn_recv+0x8c>
		if (!buf->len) {
    b468:	89ae      	ldrh	r6, [r5, #12]
    b46a:	b926      	cbnz	r6, b476 <bt_conn_recv+0x96>
			net_buf_unref(buf);
    b46c:	4628      	mov	r0, r5
}
    b46e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    b472:	f012 b9ff 	b.w	1d874 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    b476:	3008      	adds	r0, #8
    b478:	f01b fc93 	bl	26da2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    b47c:	4286      	cmp	r6, r0
    b47e:	d908      	bls.n	b492 <bt_conn_recv+0xb2>
    b480:	4914      	ldr	r1, [pc, #80]	; (b4d4 <bt_conn_recv+0xf4>)
    b482:	4b13      	ldr	r3, [pc, #76]	; (b4d0 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    b484:	4817      	ldr	r0, [pc, #92]	; (b4e4 <bt_conn_recv+0x104>)
    b486:	1ac9      	subs	r1, r1, r3
    b488:	08c9      	lsrs	r1, r1, #3
    b48a:	0189      	lsls	r1, r1, #6
    b48c:	f041 0101 	orr.w	r1, r1, #1
    b490:	e7e4      	b.n	b45c <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b492:	6920      	ldr	r0, [r4, #16]
    b494:	89aa      	ldrh	r2, [r5, #12]
    b496:	68a9      	ldr	r1, [r5, #8]
    b498:	3008      	adds	r0, #8
    b49a:	f01b fc4d 	bl	26d38 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    b49e:	4628      	mov	r0, r5
    b4a0:	f012 f9e8 	bl	1d874 <net_buf_unref>
		break;
    b4a4:	e7b6      	b.n	b414 <bt_conn_recv+0x34>
    b4a6:	4a0a      	ldr	r2, [pc, #40]	; (b4d0 <bt_conn_recv+0xf0>)
    b4a8:	4b0a      	ldr	r3, [pc, #40]	; (b4d4 <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b4aa:	480f      	ldr	r0, [pc, #60]	; (b4e8 <bt_conn_recv+0x108>)
    b4ac:	1a9b      	subs	r3, r3, r2
    b4ae:	08db      	lsrs	r3, r3, #3
    b4b0:	019b      	lsls	r3, r3, #6
    b4b2:	f043 0201 	orr.w	r2, r3, #1
    b4b6:	4631      	mov	r1, r6
    b4b8:	f017 fbb1 	bl	22c1e <log_1>
		bt_conn_reset_rx_state(conn);
    b4bc:	e7d0      	b.n	b460 <bt_conn_recv+0x80>
	conn->rx = NULL;
    b4be:	2200      	movs	r2, #0
    b4c0:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    b4c2:	4620      	mov	r0, r4
    b4c4:	4619      	mov	r1, r3
}
    b4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    b4ca:	f000 bd21 	b.w	bf10 <bt_l2cap_recv>
}
    b4ce:	bd70      	pop	{r4, r5, r6, pc}
    b4d0:	000281b4 	.word	0x000281b4
    b4d4:	000281cc 	.word	0x000281cc
    b4d8:	0002d395 	.word	0x0002d395
    b4dc:	0002d415 	.word	0x0002d415
    b4e0:	0002d3b2 	.word	0x0002d3b2
    b4e4:	0002d3d0 	.word	0x0002d3d0
    b4e8:	0002d3f7 	.word	0x0002d3f7

0000b4ec <bt_conn_send_cb>:
{
    b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4f0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    b4f2:	7b43      	ldrb	r3, [r0, #13]
    b4f4:	2b07      	cmp	r3, #7
{
    b4f6:	4606      	mov	r6, r0
    b4f8:	460d      	mov	r5, r1
    b4fa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    b4fc:	d00f      	beq.n	b51e <bt_conn_send_cb+0x32>
    b4fe:	4b2a      	ldr	r3, [pc, #168]	; (b5a8 <bt_conn_send_cb+0xbc>)
    b500:	492a      	ldr	r1, [pc, #168]	; (b5ac <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    b502:	482b      	ldr	r0, [pc, #172]	; (b5b0 <bt_conn_send_cb+0xc4>)
    b504:	1ac9      	subs	r1, r1, r3
    b506:	08c9      	lsrs	r1, r1, #3
    b508:	0189      	lsls	r1, r1, #6
    b50a:	f041 0101 	orr.w	r1, r1, #1
    b50e:	f017 fb79 	bl	22c04 <log_0>
		net_buf_unref(buf);
    b512:	4628      	mov	r0, r5
    b514:	f012 f9ae 	bl	1d874 <net_buf_unref>
			return -ENOTCONN;
    b518:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b51c:	e020      	b.n	b560 <bt_conn_send_cb+0x74>
	if (cb) {
    b51e:	2a00      	cmp	r2, #0
    b520:	d040      	beq.n	b5a4 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    b522:	f015 fb73 	bl	20c0c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    b526:	4b23      	ldr	r3, [pc, #140]	; (b5b4 <bt_conn_send_cb+0xc8>)
    b528:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    b52a:	4823      	ldr	r0, [pc, #140]	; (b5b8 <bt_conn_send_cb+0xcc>)
    b52c:	bf07      	ittee	eq
    b52e:	2200      	moveq	r2, #0
    b530:	2300      	moveq	r3, #0
    b532:	f04f 32ff 	movne.w	r2, #4294967295
    b536:	f04f 33ff 	movne.w	r3, #4294967295
    b53a:	f014 ffb1 	bl	204a0 <z_impl_k_queue_get>
    b53e:	4604      	mov	r4, r0
		if (!tx) {
    b540:	b980      	cbnz	r0, b564 <bt_conn_send_cb+0x78>
    b542:	4b19      	ldr	r3, [pc, #100]	; (b5a8 <bt_conn_send_cb+0xbc>)
    b544:	4919      	ldr	r1, [pc, #100]	; (b5ac <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    b546:	481d      	ldr	r0, [pc, #116]	; (b5bc <bt_conn_send_cb+0xd0>)
    b548:	1ac9      	subs	r1, r1, r3
    b54a:	08c9      	lsrs	r1, r1, #3
    b54c:	0189      	lsls	r1, r1, #6
    b54e:	f041 0101 	orr.w	r1, r1, #1
    b552:	f017 fb57 	bl	22c04 <log_0>
			net_buf_unref(buf);
    b556:	4628      	mov	r0, r5
    b558:	f012 f98c 	bl	1d874 <net_buf_unref>
			return -ENOBUFS;
    b55c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    b564:	7b73      	ldrb	r3, [r6, #13]
    b566:	2b07      	cmp	r3, #7
    b568:	d010      	beq.n	b58c <bt_conn_send_cb+0xa0>
    b56a:	4b0f      	ldr	r3, [pc, #60]	; (b5a8 <bt_conn_send_cb+0xbc>)
    b56c:	490f      	ldr	r1, [pc, #60]	; (b5ac <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    b56e:	4814      	ldr	r0, [pc, #80]	; (b5c0 <bt_conn_send_cb+0xd4>)
    b570:	1ac9      	subs	r1, r1, r3
    b572:	08c9      	lsrs	r1, r1, #3
    b574:	0189      	lsls	r1, r1, #6
    b576:	f041 0102 	orr.w	r1, r1, #2
    b57a:	f017 fb43 	bl	22c04 <log_0>
			net_buf_unref(buf);
    b57e:	4628      	mov	r0, r5
    b580:	f012 f978 	bl	1d874 <net_buf_unref>
			tx_free(tx);
    b584:	4620      	mov	r0, r4
    b586:	f7ff fdb5 	bl	b0f4 <tx_free>
    b58a:	e7c5      	b.n	b518 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    b58c:	2300      	movs	r3, #0
		tx->user_data = user_data;
    b58e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    b592:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    b594:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    b596:	f106 0034 	add.w	r0, r6, #52	; 0x34
    b59a:	4629      	mov	r1, r5
    b59c:	f01b fb93 	bl	26cc6 <net_buf_put>
	return 0;
    b5a0:	2000      	movs	r0, #0
    b5a2:	e7dd      	b.n	b560 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    b5a4:	614a      	str	r2, [r1, #20]
    b5a6:	e7f6      	b.n	b596 <bt_conn_send_cb+0xaa>
    b5a8:	000281b4 	.word	0x000281b4
    b5ac:	000281cc 	.word	0x000281cc
    b5b0:	0002d430 	.word	0x0002d430
    b5b4:	2000b108 	.word	0x2000b108
    b5b8:	2000a11c 	.word	0x2000a11c
    b5bc:	0002d43f 	.word	0x0002d43f
    b5c0:	0002d45d 	.word	0x0002d45d

0000b5c4 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    b5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    b5c8:	4b1b      	ldr	r3, [pc, #108]	; (b638 <bt_conn_prepare_events+0x74>)
    b5ca:	4c1c      	ldr	r4, [pc, #112]	; (b63c <bt_conn_prepare_events+0x78>)
    b5cc:	2600      	movs	r6, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b5ce:	4632      	mov	r2, r6
    b5d0:	2101      	movs	r1, #1
{
    b5d2:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
    b5d4:	609e      	str	r6, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b5d6:	f01c fc45 	bl	27e64 <k_poll_event_init>
    b5da:	2501      	movs	r5, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    b5dc:	f04f 0914 	mov.w	r9, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b5e0:	f3bf 8f5b 	dmb	ish
    b5e4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    b5e8:	f3bf 8f5b 	dmb	ish
    b5ec:	fb09 7805 	mla	r8, r9, r5, r7
	if (!atomic_get(&conn->ref)) {
    b5f0:	b15b      	cbz	r3, b60a <bt_conn_prepare_events+0x46>
	if (conn->state == BT_CONN_DISCONNECTED &&
    b5f2:	7b63      	ldrb	r3, [r4, #13]
    b5f4:	b983      	cbnz	r3, b618 <bt_conn_prepare_events+0x54>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b5f6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b5fa:	1d20      	adds	r0, r4, #4
    b5fc:	f019 fe8f 	bl	2531e <atomic_and>
    b600:	0643      	lsls	r3, r0, #25
    b602:	d509      	bpl.n	b618 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
    b604:	4620      	mov	r0, r4
    b606:	f7ff fec9 	bl	b39c <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b60a:	34c0      	adds	r4, #192	; 0xc0
    b60c:	b116      	cbz	r6, b614 <bt_conn_prepare_events+0x50>
		}
	}
#endif

	return ev_count;
}
    b60e:	4628      	mov	r0, r5
    b610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b614:	2601      	movs	r6, #1
    b616:	e7e3      	b.n	b5e0 <bt_conn_prepare_events+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
    b618:	7b63      	ldrb	r3, [r4, #13]
    b61a:	2b07      	cmp	r3, #7
    b61c:	d1f5      	bne.n	b60a <bt_conn_prepare_events+0x46>
	k_poll_event_init(&events[0],
    b61e:	f104 0334 	add.w	r3, r4, #52	; 0x34
    b622:	2200      	movs	r2, #0
    b624:	2104      	movs	r1, #4
    b626:	4640      	mov	r0, r8
    b628:	f01c fc1c 	bl	27e64 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    b62c:	2301      	movs	r3, #1
    b62e:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
    b632:	441d      	add	r5, r3
    b634:	e7e9      	b.n	b60a <bt_conn_prepare_events+0x46>
    b636:	bf00      	nop
    b638:	20000390 	.word	0x20000390
    b63c:	2000a768 	.word	0x2000a768

0000b640 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    b640:	b570      	push	{r4, r5, r6, lr}
    b642:	4606      	mov	r6, r0
    b644:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    b646:	4811      	ldr	r0, [pc, #68]	; (b68c <bt_conn_add_le+0x4c>)
    b648:	2102      	movs	r1, #2
    b64a:	f019 fe9d 	bl	25388 <bt_conn_new>
	if (!conn) {
    b64e:	4604      	mov	r4, r0
    b650:	b1c8      	cbz	r0, b686 <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b652:	2230      	movs	r2, #48	; 0x30
    b654:	2100      	movs	r1, #0
    b656:	3058      	adds	r0, #88	; 0x58
    b658:	f019 fb25 	bl	24ca6 <memset>
    b65c:	4b0c      	ldr	r3, [pc, #48]	; (b690 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b65e:	4a0d      	ldr	r2, [pc, #52]	; (b694 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b660:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b662:	2300      	movs	r3, #0
    b664:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    b668:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    b66a:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    b66c:	2207      	movs	r2, #7
    b66e:	4629      	mov	r1, r5
    b670:	f104 0088 	add.w	r0, r4, #136	; 0x88
    b674:	f019 faec 	bl	24c50 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    b678:	2301      	movs	r3, #1
    b67a:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    b67c:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    b67e:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    b680:	4b05      	ldr	r3, [pc, #20]	; (b698 <bt_conn_add_le+0x58>)
    b682:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    b686:	4620      	mov	r0, r4
    b688:	bd70      	pop	{r4, r5, r6, pc}
    b68a:	bf00      	nop
    b68c:	2000a768 	.word	0x2000a768
    b690:	0000b9dd 	.word	0x0000b9dd
    b694:	00025383 	.word	0x00025383
    b698:	00280018 	.word	0x00280018

0000b69c <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    b69c:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b69e:	2102      	movs	r1, #2
    b6a0:	4801      	ldr	r0, [pc, #4]	; (b6a8 <bt_conn_lookup_handle+0xc>)
    b6a2:	f019 bf24 	b.w	254ee <conn_lookup_handle>
    b6a6:	bf00      	nop
    b6a8:	2000a768 	.word	0x2000a768

0000b6ac <bt_conn_set_state>:
{
    b6ac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    b6ae:	7b46      	ldrb	r6, [r0, #13]
    b6b0:	428e      	cmp	r6, r1
{
    b6b2:	4604      	mov	r4, r0
    b6b4:	460d      	mov	r5, r1
	if (conn->state == state) {
    b6b6:	d112      	bne.n	b6de <bt_conn_set_state+0x32>
    b6b8:	4b68      	ldr	r3, [pc, #416]	; (b85c <bt_conn_set_state+0x1b0>)
    b6ba:	4a69      	ldr	r2, [pc, #420]	; (b860 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    b6bc:	4869      	ldr	r0, [pc, #420]	; (b864 <bt_conn_set_state+0x1b8>)
    b6be:	2e08      	cmp	r6, #8
    b6c0:	eba2 0203 	sub.w	r2, r2, r3
    b6c4:	bf96      	itet	ls
    b6c6:	4b68      	ldrls	r3, [pc, #416]	; (b868 <bt_conn_set_state+0x1bc>)
    b6c8:	4968      	ldrhi	r1, [pc, #416]	; (b86c <bt_conn_set_state+0x1c0>)
    b6ca:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    b6ce:	08d2      	lsrs	r2, r2, #3
    b6d0:	0192      	lsls	r2, r2, #6
    b6d2:	f042 0202 	orr.w	r2, r2, #2
}
    b6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    b6da:	f017 baa0 	b.w	22c1e <log_1>
	conn->state = state;
    b6de:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    b6e0:	b90e      	cbnz	r6, b6e6 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    b6e2:	f019 fed2 	bl	2548a <bt_conn_ref>
	switch (conn->state) {
    b6e6:	7b63      	ldrb	r3, [r4, #13]
    b6e8:	2b08      	cmp	r3, #8
    b6ea:	f200 80ac 	bhi.w	b846 <bt_conn_set_state+0x19a>
    b6ee:	e8df f003 	tbb	[pc, r3]
    b6f2:	053e      	.short	0x053e
    b6f4:	b4b4b4b4 	.word	0xb4b4b4b4
    b6f8:	1cb4      	.short	0x1cb4
    b6fa:	b4          	.byte	0xb4
    b6fb:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    b6fc:	4d5c      	ldr	r5, [pc, #368]	; (b870 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    b6fe:	2600      	movs	r6, #0
	__asm__ volatile(
    b700:	f04f 0320 	mov.w	r3, #32
    b704:	f3ef 8211 	mrs	r2, BASEPRI
    b708:	f383 8811 	msr	BASEPRI, r3
    b70c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    b710:	69e3      	ldr	r3, [r4, #28]
    b712:	2b00      	cmp	r3, #0
    b714:	d078      	beq.n	b808 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    b716:	3b01      	subs	r3, #1
    b718:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    b71a:	f382 8811 	msr	BASEPRI, r2
    b71e:	f3bf 8f6f 	isb	sy
    b722:	4628      	mov	r0, r5
    b724:	f015 fa78 	bl	20c18 <z_impl_k_sem_give>
}
    b728:	e7ea      	b.n	b700 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b72a:	78a3      	ldrb	r3, [r4, #2]
    b72c:	2b04      	cmp	r3, #4
    b72e:	f000 8094 	beq.w	b85a <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    b732:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b736:	f01b ffe8 	bl	2770a <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    b73a:	2100      	movs	r1, #0
    b73c:	484d      	ldr	r0, [pc, #308]	; (b874 <bt_conn_set_state+0x1c8>)
    b73e:	f015 fe39 	bl	213b4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b742:	2300      	movs	r3, #0
	list->tail = NULL;
    b744:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    b748:	4620      	mov	r0, r4
    b74a:	f000 fb11 	bl	bd70 <bt_l2cap_connected>
		notify_connected(conn);
    b74e:	4620      	mov	r0, r4
    b750:	f7ff fcda 	bl	b108 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b754:	78e3      	ldrb	r3, [r4, #3]
    b756:	2b01      	cmp	r3, #1
    b758:	d17f      	bne.n	b85a <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b75a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b75e:	4846      	ldr	r0, [pc, #280]	; (b878 <bt_conn_set_state+0x1cc>)
}
    b760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b764:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b768:	2300      	movs	r3, #0
    b76a:	f015 bbaf 	b.w	20ecc <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b76e:	78a3      	ldrb	r3, [r4, #2]
    b770:	2b04      	cmp	r3, #4
    b772:	d104      	bne.n	b77e <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    b774:	4620      	mov	r0, r4
}
    b776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    b77a:	f019 bea1 	b.w	254c0 <bt_conn_unref>
		switch (old_state) {
    b77e:	2e08      	cmp	r6, #8
    b780:	d86b      	bhi.n	b85a <bt_conn_set_state+0x1ae>
    b782:	a301      	add	r3, pc, #4	; (adr r3, b788 <bt_conn_set_state+0xdc>)
    b784:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    b788:	0000b7f5 	.word	0x0000b7f5
    b78c:	0000b7ad 	.word	0x0000b7ad
    b790:	0000b7e7 	.word	0x0000b7e7
    b794:	0000b775 	.word	0x0000b775
    b798:	0000b775 	.word	0x0000b775
    b79c:	0000b7e7 	.word	0x0000b7e7
    b7a0:	0000b7e7 	.word	0x0000b7e7
    b7a4:	0000b7f5 	.word	0x0000b7f5
    b7a8:	0000b7f5 	.word	0x0000b7f5
			tx_notify(conn);
    b7ac:	4620      	mov	r0, r4
    b7ae:	f019 fdc5 	bl	2533c <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    b7b2:	78a3      	ldrb	r3, [r4, #2]
    b7b4:	2b01      	cmp	r3, #1
    b7b6:	d103      	bne.n	b7c0 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    b7b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b7bc:	f01c f971 	bl	27aa2 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7c0:	f3bf 8f5b 	dmb	ish
    b7c4:	3404      	adds	r4, #4
    b7c6:	e854 3f00 	ldrex	r3, [r4]
    b7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7ce:	e844 3200 	strex	r2, r3, [r4]
    b7d2:	2a00      	cmp	r2, #0
    b7d4:	d1f7      	bne.n	b7c6 <bt_conn_set_state+0x11a>
    b7d6:	f3bf 8f5b 	dmb	ish
    b7da:	4826      	ldr	r0, [pc, #152]	; (b874 <bt_conn_set_state+0x1c8>)
}
    b7dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b7e0:	2100      	movs	r1, #0
    b7e2:	f015 bde7 	b.w	213b4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    b7e6:	7b23      	ldrb	r3, [r4, #12]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d0c3      	beq.n	b774 <bt_conn_set_state+0xc8>
				notify_connected(conn);
    b7ec:	4620      	mov	r0, r4
    b7ee:	f7ff fc8b 	bl	b108 <notify_connected>
    b7f2:	e7bf      	b.n	b774 <bt_conn_set_state+0xc8>
    b7f4:	4a1a      	ldr	r2, [pc, #104]	; (b860 <bt_conn_set_state+0x1b4>)
    b7f6:	4b19      	ldr	r3, [pc, #100]	; (b85c <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    b7f8:	4820      	ldr	r0, [pc, #128]	; (b87c <bt_conn_set_state+0x1d0>)
    b7fa:	1ad2      	subs	r2, r2, r3
    b7fc:	08d2      	lsrs	r2, r2, #3
    b7fe:	0192      	lsls	r2, r2, #6
    b800:	f042 0202 	orr.w	r2, r2, #2
    b804:	4629      	mov	r1, r5
    b806:	e766      	b.n	b6d6 <bt_conn_set_state+0x2a>
	return list->head;
    b808:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b80a:	b128      	cbz	r0, b818 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b80c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    b80e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    b810:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b812:	4288      	cmp	r0, r1
	list->tail = node;
    b814:	bf08      	it	eq
    b816:	61a3      	streq	r3, [r4, #24]
    b818:	f382 8811 	msr	BASEPRI, r2
    b81c:	f3bf 8f6f 	isb	sy
		if (!node) {
    b820:	b1d8      	cbz	r0, b85a <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    b822:	f04f 0220 	mov.w	r2, #32
    b826:	f3ef 8311 	mrs	r3, BASEPRI
    b82a:	f382 8811 	msr	BASEPRI, r2
    b82e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b832:	68c2      	ldr	r2, [r0, #12]
    b834:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b836:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b838:	f383 8811 	msr	BASEPRI, r3
    b83c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b840:	f7ff fc58 	bl	b0f4 <tx_free>
    b844:	e76d      	b.n	b722 <bt_conn_set_state+0x76>
    b846:	4a06      	ldr	r2, [pc, #24]	; (b860 <bt_conn_set_state+0x1b4>)
    b848:	4b04      	ldr	r3, [pc, #16]	; (b85c <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    b84a:	480d      	ldr	r0, [pc, #52]	; (b880 <bt_conn_set_state+0x1d4>)
    b84c:	1ad2      	subs	r2, r2, r3
    b84e:	08d2      	lsrs	r2, r2, #3
    b850:	0192      	lsls	r2, r2, #6
    b852:	f042 0202 	orr.w	r2, r2, #2
    b856:	4629      	mov	r1, r5
    b858:	e73d      	b.n	b6d6 <bt_conn_set_state+0x2a>
}
    b85a:	bd70      	pop	{r4, r5, r6, pc}
    b85c:	000281b4 	.word	0x000281b4
    b860:	000281cc 	.word	0x000281cc
    b864:	0002d48d 	.word	0x0002d48d
    b868:	00028ae4 	.word	0x00028ae4
    b86c:	0002d483 	.word	0x0002d483
    b870:	200000c8 	.word	0x200000c8
    b874:	20000390 	.word	0x20000390
    b878:	2000b0f0 	.word	0x2000b0f0
    b87c:	0002d49e 	.word	0x0002d49e
    b880:	0002d4b5 	.word	0x0002d4b5

0000b884 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    b884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b888:	4d10      	ldr	r5, [pc, #64]	; (b8cc <bt_conn_lookup_addr_le+0x48>)
    b88a:	4606      	mov	r6, r0
    b88c:	460f      	mov	r7, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b88e:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b892:	4628      	mov	r0, r5
    b894:	f019 fdf9 	bl	2548a <bt_conn_ref>

		if (!conn) {
    b898:	4604      	mov	r4, r0
    b89a:	b120      	cbz	r0, b8a6 <bt_conn_lookup_addr_le+0x22>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b89c:	7883      	ldrb	r3, [r0, #2]
    b89e:	2b01      	cmp	r3, #1
    b8a0:	d00c      	beq.n	b8bc <bt_conn_lookup_addr_le+0x38>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    b8a2:	f019 fe0d 	bl	254c0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b8a6:	35c0      	adds	r5, #192	; 0xc0
    b8a8:	f1b8 0f00 	cmp.w	r8, #0
    b8ac:	d003      	beq.n	b8b6 <bt_conn_lookup_addr_le+0x32>
		}

		return conn;
	}

	return NULL;
    b8ae:	2400      	movs	r4, #0
}
    b8b0:	4620      	mov	r0, r4
    b8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8b6:	f04f 0801 	mov.w	r8, #1
    b8ba:	e7ea      	b.n	b892 <bt_conn_lookup_addr_le+0xe>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b8bc:	463a      	mov	r2, r7
    b8be:	4631      	mov	r1, r6
    b8c0:	f019 fdc3 	bl	2544a <bt_conn_is_peer_addr_le>
    b8c4:	2800      	cmp	r0, #0
    b8c6:	d1f3      	bne.n	b8b0 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
    b8c8:	4620      	mov	r0, r4
    b8ca:	e7ea      	b.n	b8a2 <bt_conn_lookup_addr_le+0x1e>
    b8cc:	2000a768 	.word	0x2000a768

0000b8d0 <bt_conn_exists_le>:
{
    b8d0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    b8d2:	f7ff ffd7 	bl	b884 <bt_conn_lookup_addr_le>
	if (conn) {
    b8d6:	4604      	mov	r4, r0
    b8d8:	b1a0      	cbz	r0, b904 <bt_conn_exists_le+0x34>
    b8da:	4b0b      	ldr	r3, [pc, #44]	; (b908 <bt_conn_exists_le+0x38>)
    b8dc:	4a0b      	ldr	r2, [pc, #44]	; (b90c <bt_conn_exists_le+0x3c>)
    b8de:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    b8e0:	7b43      	ldrb	r3, [r0, #13]
    b8e2:	480b      	ldr	r0, [pc, #44]	; (b910 <bt_conn_exists_le+0x40>)
    b8e4:	2b08      	cmp	r3, #8
    b8e6:	bf96      	itet	ls
    b8e8:	490a      	ldrls	r1, [pc, #40]	; (b914 <bt_conn_exists_le+0x44>)
    b8ea:	490b      	ldrhi	r1, [pc, #44]	; (b918 <bt_conn_exists_le+0x48>)
    b8ec:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    b8f0:	08d2      	lsrs	r2, r2, #3
    b8f2:	0192      	lsls	r2, r2, #6
    b8f4:	f042 0202 	orr.w	r2, r2, #2
    b8f8:	f017 f991 	bl	22c1e <log_1>
		bt_conn_unref(conn);
    b8fc:	4620      	mov	r0, r4
    b8fe:	f019 fddf 	bl	254c0 <bt_conn_unref>
		return true;
    b902:	2001      	movs	r0, #1
}
    b904:	bd10      	pop	{r4, pc}
    b906:	bf00      	nop
    b908:	000281b4 	.word	0x000281b4
    b90c:	000281cc 	.word	0x000281cc
    b910:	0002d4d1 	.word	0x0002d4d1
    b914:	00028ae4 	.word	0x00028ae4
    b918:	0002d483 	.word	0x0002d483

0000b91c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b920:	f8df a054 	ldr.w	sl, [pc, #84]	; b978 <bt_conn_lookup_state_le+0x5c>
{
    b924:	4605      	mov	r5, r0
    b926:	460e      	mov	r6, r1
    b928:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b92a:	2700      	movs	r7, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b92c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
    b930:	fb09 a007 	mla	r0, r9, r7, sl
    b934:	f019 fda9 	bl	2548a <bt_conn_ref>

		if (!conn) {
    b938:	4604      	mov	r4, r0
    b93a:	b120      	cbz	r0, b946 <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b93c:	7883      	ldrb	r3, [r0, #2]
    b93e:	2b01      	cmp	r3, #1
    b940:	d006      	beq.n	b950 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
    b942:	f019 fda2 	bl	2548a <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b946:	b10f      	cbz	r7, b94c <bt_conn_lookup_state_le+0x30>
		}

		return conn;
	}

	return NULL;
    b948:	2400      	movs	r4, #0
    b94a:	e011      	b.n	b970 <bt_conn_lookup_state_le+0x54>
    b94c:	2701      	movs	r7, #1
    b94e:	e7ef      	b.n	b930 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b950:	b146      	cbz	r6, b964 <bt_conn_lookup_state_le+0x48>
    b952:	4632      	mov	r2, r6
    b954:	4629      	mov	r1, r5
    b956:	f019 fd78 	bl	2544a <bt_conn_is_peer_addr_le>
    b95a:	b918      	cbnz	r0, b964 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
    b95c:	4620      	mov	r0, r4
    b95e:	f019 fdaf 	bl	254c0 <bt_conn_unref>
			continue;
    b962:	e7f0      	b.n	b946 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
    b964:	7b63      	ldrb	r3, [r4, #13]
    b966:	4543      	cmp	r3, r8
    b968:	d1f8      	bne.n	b95c <bt_conn_lookup_state_le+0x40>
    b96a:	7a23      	ldrb	r3, [r4, #8]
    b96c:	42ab      	cmp	r3, r5
    b96e:	d1f5      	bne.n	b95c <bt_conn_lookup_state_le+0x40>
}
    b970:	4620      	mov	r0, r4
    b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b976:	bf00      	nop
    b978:	2000a768 	.word	0x2000a768

0000b97c <send_conn_le_param_update>:
{
    b97c:	b538      	push	{r3, r4, r5, lr}
    b97e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b980:	4608      	mov	r0, r1
{
    b982:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b984:	f019 fc55 	bl	25232 <bt_le_conn_params_valid>
    b988:	b318      	cbz	r0, b9d2 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b98a:	4b13      	ldr	r3, [pc, #76]	; (b9d8 <send_conn_le_param_update+0x5c>)
    b98c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    b990:	0799      	lsls	r1, r3, #30
    b992:	d407      	bmi.n	b9a4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b994:	78e3      	ldrb	r3, [r4, #3]
    b996:	b183      	cbz	r3, b9ba <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    b998:	4629      	mov	r1, r5
    b99a:	4620      	mov	r0, r4
}
    b99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b9a0:	f000 baee 	b.w	bf80 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b9a4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b9a8:	079a      	lsls	r2, r3, #30
    b9aa:	d5f3      	bpl.n	b994 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b9ac:	f3bf 8f5b 	dmb	ish
    b9b0:	6863      	ldr	r3, [r4, #4]
    b9b2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b9b6:	055b      	lsls	r3, r3, #21
    b9b8:	d4ec      	bmi.n	b994 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b9ba:	4629      	mov	r1, r5
    b9bc:	4620      	mov	r0, r4
    b9be:	f019 fddb 	bl	25578 <bt_conn_le_conn_update>
		if (rc == 0) {
    b9c2:	b928      	cbnz	r0, b9d0 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    b9c4:	88ab      	ldrh	r3, [r5, #4]
    b9c6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b9ca:	88eb      	ldrh	r3, [r5, #6]
    b9cc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b9d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b9d2:	f06f 0015 	mvn.w	r0, #21
    b9d6:	e7fb      	b.n	b9d0 <send_conn_le_param_update+0x54>
    b9d8:	20000000 	.word	0x20000000

0000b9dc <deferred_work>:
{
    b9dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    b9de:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    b9e2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    b9e4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b9e8:	b99b      	cbnz	r3, ba12 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    b9ea:	4628      	mov	r0, r5
    b9ec:	f019 fe24 	bl	25638 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b9f0:	4b22      	ldr	r3, [pc, #136]	; (ba7c <deferred_work+0xa0>)
    b9f2:	681e      	ldr	r6, [r3, #0]
    b9f4:	b92e      	cbnz	r6, ba02 <deferred_work+0x26>
		bt_conn_unref(conn);
    b9f6:	4628      	mov	r0, r5
}
    b9f8:	b002      	add	sp, #8
    b9fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    b9fe:	f019 bd5f 	b.w	254c0 <bt_conn_unref>
		if (cb->disconnected) {
    ba02:	6873      	ldr	r3, [r6, #4]
    ba04:	b11b      	cbz	r3, ba0e <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    ba06:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ba0a:	4628      	mov	r0, r5
    ba0c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ba0e:	69b6      	ldr	r6, [r6, #24]
    ba10:	e7f0      	b.n	b9f4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    ba12:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    ba16:	2b01      	cmp	r3, #1
    ba18:	d128      	bne.n	ba6c <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
    ba1a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ba1e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    ba22:	4630      	mov	r0, r6
    ba24:	f019 fc7b 	bl	2531e <atomic_and>
    ba28:	0583      	lsls	r3, r0, #22
    ba2a:	d521      	bpl.n	ba70 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ba2c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    ba30:	f8ad 3000 	strh.w	r3, [sp]
    ba34:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    ba38:	f8ad 3002 	strh.w	r3, [sp, #2]
    ba3c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    ba40:	f8ad 3004 	strh.w	r3, [sp, #4]
    ba44:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    ba48:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    ba4c:	4669      	mov	r1, sp
    ba4e:	4628      	mov	r0, r5
    ba50:	f7ff ff94 	bl	b97c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba54:	f3bf 8f5b 	dmb	ish
    ba58:	e856 3f00 	ldrex	r3, [r6]
    ba5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ba60:	e846 3200 	strex	r2, r3, [r6]
    ba64:	2a00      	cmp	r2, #0
    ba66:	d1f7      	bne.n	ba58 <deferred_work+0x7c>
    ba68:	f3bf 8f5b 	dmb	ish
}
    ba6c:	b002      	add	sp, #8
    ba6e:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    ba70:	4a03      	ldr	r2, [pc, #12]	; (ba80 <deferred_work+0xa4>)
    ba72:	6810      	ldr	r0, [r2, #0]
    ba74:	6851      	ldr	r1, [r2, #4]
    ba76:	466b      	mov	r3, sp
    ba78:	c303      	stmia	r3!, {r0, r1}
    ba7a:	e7e7      	b.n	ba4c <deferred_work+0x70>
    ba7c:	2000db98 	.word	0x2000db98
    ba80:	000283f0 	.word	0x000283f0

0000ba84 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    ba84:	b538      	push	{r3, r4, r5, lr}
    ba86:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    ba88:	490c      	ldr	r1, [pc, #48]	; (babc <bt_conn_create_pdu_timeout+0x38>)
    ba8a:	2800      	cmp	r0, #0
    ba8c:	bf08      	it	eq
    ba8e:	4608      	moveq	r0, r1
    ba90:	f01b f8f6 	bl	26c80 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    ba94:	4604      	mov	r4, r0
    ba96:	b958      	cbnz	r0, bab0 <bt_conn_create_pdu_timeout+0x2c>
    ba98:	4909      	ldr	r1, [pc, #36]	; (bac0 <bt_conn_create_pdu_timeout+0x3c>)
    ba9a:	4b0a      	ldr	r3, [pc, #40]	; (bac4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    ba9c:	480a      	ldr	r0, [pc, #40]	; (bac8 <bt_conn_create_pdu_timeout+0x44>)
    ba9e:	1ac9      	subs	r1, r1, r3
    baa0:	08c9      	lsrs	r1, r1, #3
    baa2:	0189      	lsls	r1, r1, #6
    baa4:	f041 0102 	orr.w	r1, r1, #2
    baa8:	f017 f8ac 	bl	22c04 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    baac:	4620      	mov	r0, r4
    baae:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    bab0:	1d29      	adds	r1, r5, #4
    bab2:	3008      	adds	r0, #8
    bab4:	f01b f903 	bl	26cbe <net_buf_simple_reserve>
	return buf;
    bab8:	e7f8      	b.n	baac <bt_conn_create_pdu_timeout+0x28>
    baba:	bf00      	nop
    babc:	2000a14c 	.word	0x2000a14c
    bac0:	000281cc 	.word	0x000281cc
    bac4:	000281b4 	.word	0x000281b4
    bac8:	0002d4f4 	.word	0x0002d4f4

0000bacc <bt_conn_create_frag_timeout>:
{
    bacc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    bace:	4801      	ldr	r0, [pc, #4]	; (bad4 <bt_conn_create_frag_timeout+0x8>)
    bad0:	f7ff bfd8 	b.w	ba84 <bt_conn_create_pdu_timeout>
    bad4:	2000a19c 	.word	0x2000a19c

0000bad8 <create_frag>:
{
    bad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    badc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    bade:	f04f 33ff 	mov.w	r3, #4294967295
    bae2:	f04f 32ff 	mov.w	r2, #4294967295
    bae6:	2000      	movs	r0, #0
{
    bae8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    baea:	f7ff ffef 	bl	bacc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    baee:	7b73      	ldrb	r3, [r6, #13]
    baf0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    baf2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    baf4:	f04f 0600 	mov.w	r6, #0
    baf8:	d005      	beq.n	bb06 <create_frag+0x2e>
		net_buf_unref(frag);
    bafa:	f011 febb 	bl	1d874 <net_buf_unref>
		return NULL;
    bafe:	4635      	mov	r5, r6
}
    bb00:	4628      	mov	r0, r5
    bb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    bb06:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    bb08:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    bb0c:	4e0c      	ldr	r6, [pc, #48]	; (bb40 <create_frag+0x68>)
    bb0e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    bb10:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    bb14:	f01b f945 	bl	26da2 <net_buf_simple_tailroom>
    bb18:	4580      	cmp	r8, r0
    bb1a:	d20c      	bcs.n	bb36 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    bb1c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    bb20:	f854 1f08 	ldr.w	r1, [r4, #8]!
    bb24:	4632      	mov	r2, r6
    bb26:	4638      	mov	r0, r7
    bb28:	f01b f906 	bl	26d38 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    bb2c:	4631      	mov	r1, r6
    bb2e:	4620      	mov	r0, r4
    bb30:	f01b f91b 	bl	26d6a <net_buf_simple_pull>
    bb34:	e7e4      	b.n	bb00 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    bb36:	4638      	mov	r0, r7
    bb38:	f01b f933 	bl	26da2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    bb3c:	b286      	uxth	r6, r0
    bb3e:	e7ef      	b.n	bb20 <create_frag+0x48>
    bb40:	20000000 	.word	0x20000000

0000bb44 <bt_conn_process_tx>:
{
    bb44:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    bb46:	7b43      	ldrb	r3, [r0, #13]
{
    bb48:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    bb4a:	b95b      	cbnz	r3, bb64 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb4c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    bb50:	3004      	adds	r0, #4
    bb52:	f019 fbe4 	bl	2531e <atomic_and>
    bb56:	0643      	lsls	r3, r0, #25
    bb58:	d504      	bpl.n	bb64 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    bb5a:	4620      	mov	r0, r4
}
    bb5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    bb60:	f7ff bc1c 	b.w	b39c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    bb64:	2200      	movs	r2, #0
    bb66:	2300      	movs	r3, #0
    bb68:	f104 0034 	add.w	r0, r4, #52	; 0x34
    bb6c:	f01b f88d 	bl	26c8a <net_buf_get>
	BT_ASSERT(buf);
    bb70:	4605      	mov	r5, r0
    bb72:	b960      	cbnz	r0, bb8e <bt_conn_process_tx+0x4a>
    bb74:	4a1f      	ldr	r2, [pc, #124]	; (bbf4 <bt_conn_process_tx+0xb0>)
    bb76:	4920      	ldr	r1, [pc, #128]	; (bbf8 <bt_conn_process_tx+0xb4>)
    bb78:	4820      	ldr	r0, [pc, #128]	; (bbfc <bt_conn_process_tx+0xb8>)
    bb7a:	f240 535f 	movw	r3, #1375	; 0x55f
    bb7e:	f016 fbab 	bl	222d8 <printk>
    bb82:	4040      	eors	r0, r0
    bb84:	f380 8811 	msr	BASEPRI, r0
    bb88:	f04f 0003 	mov.w	r0, #3
    bb8c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    bb8e:	4e1c      	ldr	r6, [pc, #112]	; (bc00 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    bb90:	89aa      	ldrh	r2, [r5, #12]
    bb92:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    bb96:	429a      	cmp	r2, r3
    bb98:	d807      	bhi.n	bbaa <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    bb9a:	2300      	movs	r3, #0
    bb9c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    bb9e:	4629      	mov	r1, r5
    bba0:	4620      	mov	r0, r4
    bba2:	f7ff fac7 	bl	b134 <send_frag>
	if (!send_buf(conn, buf)) {
    bba6:	b130      	cbz	r0, bbb6 <bt_conn_process_tx+0x72>
}
    bba8:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    bbaa:	4629      	mov	r1, r5
    bbac:	4620      	mov	r0, r4
    bbae:	f7ff ff93 	bl	bad8 <create_frag>
	if (!frag) {
    bbb2:	4601      	mov	r1, r0
    bbb4:	b920      	cbnz	r0, bbc0 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    bbb6:	4628      	mov	r0, r5
}
    bbb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    bbbc:	f011 be5a 	b.w	1d874 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    bbc0:	2301      	movs	r3, #1
    bbc2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bbc4:	4620      	mov	r0, r4
    bbc6:	f7ff fab5 	bl	b134 <send_frag>
    bbca:	2800      	cmp	r0, #0
    bbcc:	d0f3      	beq.n	bbb6 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    bbce:	89aa      	ldrh	r2, [r5, #12]
    bbd0:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    bbd4:	429a      	cmp	r2, r3
    bbd6:	d802      	bhi.n	bbde <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    bbd8:	2300      	movs	r3, #0
    bbda:	2203      	movs	r2, #3
    bbdc:	e7df      	b.n	bb9e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    bbde:	4629      	mov	r1, r5
    bbe0:	4620      	mov	r0, r4
    bbe2:	f7ff ff79 	bl	bad8 <create_frag>
		if (!frag) {
    bbe6:	4601      	mov	r1, r0
    bbe8:	2800      	cmp	r0, #0
    bbea:	d0e4      	beq.n	bbb6 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bbec:	2301      	movs	r3, #1
    bbee:	461a      	mov	r2, r3
    bbf0:	e7e8      	b.n	bbc4 <bt_conn_process_tx+0x80>
    bbf2:	bf00      	nop
    bbf4:	0002d51d 	.word	0x0002d51d
    bbf8:	0002c95e 	.word	0x0002c95e
    bbfc:	0002cbf6 	.word	0x0002cbf6
    bc00:	20000000 	.word	0x20000000

0000bc04 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    bc04:	4b0c      	ldr	r3, [pc, #48]	; (bc38 <bt_conn_auth_cb_register+0x34>)
    bc06:	b908      	cbnz	r0, bc0c <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    bc08:	6018      	str	r0, [r3, #0]
		return 0;
    bc0a:	4770      	bx	lr
	}

	if (bt_auth) {
    bc0c:	681a      	ldr	r2, [r3, #0]
    bc0e:	b962      	cbnz	r2, bc2a <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    bc10:	6902      	ldr	r2, [r0, #16]
    bc12:	b93a      	cbnz	r2, bc24 <bt_conn_auth_cb_register+0x20>
    bc14:	6802      	ldr	r2, [r0, #0]
    bc16:	b95a      	cbnz	r2, bc30 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    bc18:	6842      	ldr	r2, [r0, #4]
    bc1a:	b94a      	cbnz	r2, bc30 <bt_conn_auth_cb_register+0x2c>
    bc1c:	6882      	ldr	r2, [r0, #8]
    bc1e:	b93a      	cbnz	r2, bc30 <bt_conn_auth_cb_register+0x2c>
    bc20:	6942      	ldr	r2, [r0, #20]
    bc22:	b92a      	cbnz	r2, bc30 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    bc24:	6018      	str	r0, [r3, #0]
	return 0;
    bc26:	2000      	movs	r0, #0
    bc28:	4770      	bx	lr
		return -EALREADY;
    bc2a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    bc2e:	4770      	bx	lr
		return -EINVAL;
    bc30:	f06f 0015 	mvn.w	r0, #21
}
    bc34:	4770      	bx	lr
    bc36:	bf00      	nop
    bc38:	2000db94 	.word	0x2000db94

0000bc3c <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    bc3c:	4b03      	ldr	r3, [pc, #12]	; (bc4c <bt_conn_index+0x10>)
    bc3e:	1ac0      	subs	r0, r0, r3
    bc40:	4b03      	ldr	r3, [pc, #12]	; (bc50 <bt_conn_index+0x14>)
    bc42:	1180      	asrs	r0, r0, #6
    bc44:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    bc46:	b2c0      	uxtb	r0, r0
    bc48:	4770      	bx	lr
    bc4a:	bf00      	nop
    bc4c:	2000a768 	.word	0x2000a768
    bc50:	aaaaaaab 	.word	0xaaaaaaab

0000bc54 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    bc54:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    bc56:	490b      	ldr	r1, [pc, #44]	; (bc84 <bt_conn_init+0x30>)
    bc58:	480b      	ldr	r0, [pc, #44]	; (bc88 <bt_conn_init+0x34>)
    bc5a:	f01b fd62 	bl	27722 <k_queue_append>
    bc5e:	490b      	ldr	r1, [pc, #44]	; (bc8c <bt_conn_init+0x38>)
    bc60:	4809      	ldr	r0, [pc, #36]	; (bc88 <bt_conn_init+0x34>)
    bc62:	f01b fd5e 	bl	27722 <k_queue_append>
    bc66:	490a      	ldr	r1, [pc, #40]	; (bc90 <bt_conn_init+0x3c>)
    bc68:	4807      	ldr	r0, [pc, #28]	; (bc88 <bt_conn_init+0x34>)
    bc6a:	f01b fd5a 	bl	27722 <k_queue_append>
	}

	bt_att_init();
    bc6e:	f01a f888 	bl	25d82 <bt_att_init>

	err = bt_smp_init();
    bc72:	f004 fb21 	bl	102b8 <bt_smp_init>
	if (err) {
    bc76:	4604      	mov	r4, r0
    bc78:	b908      	cbnz	r0, bc7e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    bc7a:	f019 fd49 	bl	25710 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    bc7e:	4620      	mov	r0, r4
    bc80:	bd10      	pop	{r4, pc}
    bc82:	bf00      	nop
    bc84:	2000db9c 	.word	0x2000db9c
    bc88:	2000a11c 	.word	0x2000a11c
    bc8c:	2000dbac 	.word	0x2000dbac
    bc90:	2000dbbc 	.word	0x2000dbbc

0000bc94 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    bc94:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    bc96:	4b0e      	ldr	r3, [pc, #56]	; (bcd0 <l2cap_accept+0x3c>)
    bc98:	681a      	ldr	r2, [r3, #0]
    bc9a:	b18a      	cbz	r2, bcc0 <l2cap_accept+0x2c>
    bc9c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    bca0:	b16a      	cbz	r2, bcbe <l2cap_accept+0x2a>
    bca2:	4b0c      	ldr	r3, [pc, #48]	; (bcd4 <l2cap_accept+0x40>)
    bca4:	4a0c      	ldr	r2, [pc, #48]	; (bcd8 <l2cap_accept+0x44>)
    bca6:	1ad2      	subs	r2, r2, r3
    bca8:	08d2      	lsrs	r2, r2, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    bcaa:	0192      	lsls	r2, r2, #6
    bcac:	4601      	mov	r1, r0
    bcae:	f042 0201 	orr.w	r2, r2, #1
    bcb2:	480a      	ldr	r0, [pc, #40]	; (bcdc <l2cap_accept+0x48>)
    bcb4:	f016 ffb3 	bl	22c1e <log_1>

	return -ENOMEM;
    bcb8:	f06f 000b 	mvn.w	r0, #11
}
    bcbc:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    bcbe:	2201      	movs	r2, #1
		l2cap->chan.chan.ops = &ops;
    bcc0:	20b8      	movs	r0, #184	; 0xb8
    bcc2:	fb00 3302 	mla	r3, r0, r2, r3
    bcc6:	4a06      	ldr	r2, [pc, #24]	; (bce0 <l2cap_accept+0x4c>)
    bcc8:	605a      	str	r2, [r3, #4]
		return 0;
    bcca:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    bccc:	600b      	str	r3, [r1, #0]
		return 0;
    bcce:	e7f5      	b.n	bcbc <l2cap_accept+0x28>
    bcd0:	2000a8e8 	.word	0x2000a8e8
    bcd4:	000281b4 	.word	0x000281b4
    bcd8:	00028294 	.word	0x00028294
    bcdc:	0002d5aa 	.word	0x0002d5aa
    bce0:	00028b28 	.word	0x00028b28

0000bce4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bce6:	4605      	mov	r5, r0
    bce8:	460f      	mov	r7, r1
    bcea:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    bcec:	2300      	movs	r3, #0
    bcee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bcf2:	2104      	movs	r1, #4
    bcf4:	2000      	movs	r0, #0
    bcf6:	f7ff fec5 	bl	ba84 <bt_conn_create_pdu_timeout>
	if (!buf) {
    bcfa:	4604      	mov	r4, r0
    bcfc:	b960      	cbnz	r0, bd18 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    bcfe:	4a0a      	ldr	r2, [pc, #40]	; (bd28 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    bd00:	4b0a      	ldr	r3, [pc, #40]	; (bd2c <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    bd02:	480b      	ldr	r0, [pc, #44]	; (bd30 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    bd04:	1ad2      	subs	r2, r2, r3
    bd06:	08d2      	lsrs	r2, r2, #3
    bd08:	0192      	lsls	r2, r2, #6
    bd0a:	f042 0201 	orr.w	r2, r2, #1
    bd0e:	4629      	mov	r1, r5
    bd10:	f016 ff85 	bl	22c1e <log_1>
}
    bd14:	4620      	mov	r0, r4
    bd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    bd18:	2104      	movs	r1, #4
    bd1a:	3008      	adds	r0, #8
    bd1c:	f01b f806 	bl	26d2c <net_buf_simple_add>
	hdr->code = code;
    bd20:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    bd22:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    bd24:	8046      	strh	r6, [r0, #2]
	return buf;
    bd26:	e7f5      	b.n	bd14 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    bd28:	00028294 	.word	0x00028294
    bd2c:	000281b4 	.word	0x000281b4
    bd30:	0002d5d1 	.word	0x0002d5d1

0000bd34 <l2cap_rtx_timeout>:
{
    bd34:	b538      	push	{r3, r4, r5, lr}
    bd36:	4a0b      	ldr	r2, [pc, #44]	; (bd64 <l2cap_rtx_timeout+0x30>)
    bd38:	4b0b      	ldr	r3, [pc, #44]	; (bd68 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    bd3a:	4604      	mov	r4, r0
    bd3c:	1ad2      	subs	r2, r2, r3
    bd3e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    bd42:	480a      	ldr	r0, [pc, #40]	; (bd6c <l2cap_rtx_timeout+0x38>)
    bd44:	08d2      	lsrs	r2, r2, #3
    bd46:	0192      	lsls	r2, r2, #6
    bd48:	4621      	mov	r1, r4
    bd4a:	f042 0201 	orr.w	r2, r2, #1
    bd4e:	f016 ff66 	bl	22c1e <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    bd52:	4628      	mov	r0, r5
    bd54:	4621      	mov	r1, r4
    bd56:	f019 fc39 	bl	255cc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    bd5a:	4620      	mov	r0, r4
}
    bd5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    bd60:	f019 bc55 	b.w	2560e <bt_l2cap_chan_del>
    bd64:	00028294 	.word	0x00028294
    bd68:	000281b4 	.word	0x000281b4
    bd6c:	0002d5f9 	.word	0x0002d5f9

0000bd70 <bt_l2cap_connected>:
{
    bd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bd74:	4e2a      	ldr	r6, [pc, #168]	; (be20 <bt_l2cap_connected+0xb0>)
    bd76:	4f2b      	ldr	r7, [pc, #172]	; (be24 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    bd78:	f8df 80ac 	ldr.w	r8, [pc, #172]	; be28 <bt_l2cap_connected+0xb8>
{
    bd7c:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bd7e:	42be      	cmp	r6, r7
    bd80:	d302      	bcc.n	bd88 <bt_l2cap_connected+0x18>
}
    bd82:	b003      	add	sp, #12
    bd84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    bd88:	6873      	ldr	r3, [r6, #4]
    bd8a:	a901      	add	r1, sp, #4
    bd8c:	4628      	mov	r0, r5
    bd8e:	4798      	blx	r3
    bd90:	2800      	cmp	r0, #0
    bd92:	db40      	blt.n	be16 <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    bd94:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    bd96:	8833      	ldrh	r3, [r6, #0]
    bd98:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    bd9c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    bda0:	2230      	movs	r2, #48	; 0x30
    bda2:	2100      	movs	r1, #0
    bda4:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    bda8:	f8d6 9008 	ldr.w	r9, [r6, #8]
    bdac:	f018 ff7b 	bl	24ca6 <memset>
    bdb0:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bdb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    bdb8:	2200      	movs	r2, #0
    bdba:	f3bf 8f5b 	dmb	ish
    bdbe:	e853 1f00 	ldrex	r1, [r3]
    bdc2:	e843 2000 	strex	r0, r2, [r3]
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d1f9      	bne.n	bdbe <bt_l2cap_connected+0x4e>
    bdca:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    bdce:	60a2      	str	r2, [r4, #8]
	return list->tail;
    bdd0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    bdd2:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
    bdd6:	bb02      	cbnz	r2, be1a <bt_l2cap_connected+0xaa>
	list->head = node;
    bdd8:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    bddc:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    bdde:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    bde0:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    bde2:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    bde6:	681b      	ldr	r3, [r3, #0]
    bde8:	b103      	cbz	r3, bdec <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    bdea:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bdec:	9b01      	ldr	r3, [sp, #4]
    bdee:	f3bf 8f5b 	dmb	ish
    bdf2:	3340      	adds	r3, #64	; 0x40
    bdf4:	e853 2f00 	ldrex	r2, [r3]
    bdf8:	f042 0201 	orr.w	r2, r2, #1
    bdfc:	e843 2100 	strex	r1, r2, [r3]
    be00:	2900      	cmp	r1, #0
    be02:	d1f7      	bne.n	bdf4 <bt_l2cap_connected+0x84>
    be04:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    be08:	9801      	ldr	r0, [sp, #4]
    be0a:	6843      	ldr	r3, [r0, #4]
    be0c:	699b      	ldr	r3, [r3, #24]
    be0e:	b113      	cbz	r3, be16 <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    be10:	f100 0140 	add.w	r1, r0, #64	; 0x40
    be14:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    be16:	360c      	adds	r6, #12
    be18:	e7b1      	b.n	bd7e <bt_l2cap_connected+0xe>
	parent->next = child;
    be1a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    be1c:	652b      	str	r3, [r5, #80]	; 0x50
}
    be1e:	e7dd      	b.n	bddc <bt_l2cap_connected+0x6c>
    be20:	000280e0 	.word	0x000280e0
    be24:	00028104 	.word	0x00028104
    be28:	0000bd35 	.word	0x0000bd35

0000be2c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    be2c:	898b      	ldrh	r3, [r1, #12]
    be2e:	2b03      	cmp	r3, #3
{
    be30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    be32:	4606      	mov	r6, r0
    be34:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    be36:	d80a      	bhi.n	be4e <l2cap_recv+0x22>
    be38:	492e      	ldr	r1, [pc, #184]	; (bef4 <l2cap_recv+0xc8>)
    be3a:	4b2f      	ldr	r3, [pc, #188]	; (bef8 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    be3c:	482f      	ldr	r0, [pc, #188]	; (befc <l2cap_recv+0xd0>)
    be3e:	1ac9      	subs	r1, r1, r3
    be40:	08c9      	lsrs	r1, r1, #3
    be42:	0189      	lsls	r1, r1, #6
    be44:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    be48:	f016 fedc 	bl	22c04 <log_0>
		return 0;
    be4c:	e013      	b.n	be76 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    be4e:	2104      	movs	r1, #4
    be50:	f105 0008 	add.w	r0, r5, #8
    be54:	f01a ff91 	bl	26d7a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    be58:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    be5a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    be5c:	428a      	cmp	r2, r1
    be5e:	4604      	mov	r4, r0
    be60:	d00c      	beq.n	be7c <l2cap_recv+0x50>
    be62:	4825      	ldr	r0, [pc, #148]	; (bef8 <l2cap_recv+0xcc>)
    be64:	4b23      	ldr	r3, [pc, #140]	; (bef4 <l2cap_recv+0xc8>)
    be66:	1a1b      	subs	r3, r3, r0
    be68:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    be6a:	019b      	lsls	r3, r3, #6
    be6c:	4824      	ldr	r0, [pc, #144]	; (bf00 <l2cap_recv+0xd4>)
    be6e:	f043 0301 	orr.w	r3, r3, #1
    be72:	f016 fee8 	bl	22c46 <log_2>
}
    be76:	2000      	movs	r0, #0
    be78:	b002      	add	sp, #8
    be7a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    be7c:	7843      	ldrb	r3, [r0, #1]
    be7e:	b943      	cbnz	r3, be92 <l2cap_recv+0x66>
    be80:	491c      	ldr	r1, [pc, #112]	; (bef4 <l2cap_recv+0xc8>)
    be82:	4b1d      	ldr	r3, [pc, #116]	; (bef8 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    be84:	481f      	ldr	r0, [pc, #124]	; (bf04 <l2cap_recv+0xd8>)
    be86:	1ac9      	subs	r1, r1, r3
    be88:	08c9      	lsrs	r1, r1, #3
    be8a:	0189      	lsls	r1, r1, #6
    be8c:	f041 0101 	orr.w	r1, r1, #1
    be90:	e7da      	b.n	be48 <l2cap_recv+0x1c>
	switch (hdr->code) {
    be92:	7801      	ldrb	r1, [r0, #0]
    be94:	2901      	cmp	r1, #1
    be96:	d0ee      	beq.n	be76 <l2cap_recv+0x4a>
    be98:	2913      	cmp	r1, #19
    be9a:	d10a      	bne.n	beb2 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    be9c:	2a01      	cmp	r2, #1
    be9e:	d8ea      	bhi.n	be76 <l2cap_recv+0x4a>
    bea0:	4914      	ldr	r1, [pc, #80]	; (bef4 <l2cap_recv+0xc8>)
    bea2:	4b15      	ldr	r3, [pc, #84]	; (bef8 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    bea4:	4818      	ldr	r0, [pc, #96]	; (bf08 <l2cap_recv+0xdc>)
    bea6:	1ac9      	subs	r1, r1, r3
    bea8:	08c9      	lsrs	r1, r1, #3
    beaa:	0189      	lsls	r1, r1, #6
    beac:	f041 0101 	orr.w	r1, r1, #1
    beb0:	e7ca      	b.n	be48 <l2cap_recv+0x1c>
    beb2:	4b11      	ldr	r3, [pc, #68]	; (bef8 <l2cap_recv+0xcc>)
    beb4:	4a0f      	ldr	r2, [pc, #60]	; (bef4 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    beb6:	4815      	ldr	r0, [pc, #84]	; (bf0c <l2cap_recv+0xe0>)
    beb8:	1ad2      	subs	r2, r2, r3
    beba:	08d2      	lsrs	r2, r2, #3
    bebc:	0192      	lsls	r2, r2, #6
    bebe:	f042 0202 	orr.w	r2, r2, #2
    bec2:	f016 feac 	bl	22c1e <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bec6:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    bec8:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    beca:	2202      	movs	r2, #2
    becc:	2001      	movs	r0, #1
    bece:	f7ff ff09 	bl	bce4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    bed2:	4604      	mov	r4, r0
    bed4:	2800      	cmp	r0, #0
    bed6:	d0ce      	beq.n	be76 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    bed8:	2102      	movs	r1, #2
    beda:	3008      	adds	r0, #8
    bedc:	f01a ff26 	bl	26d2c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    bee0:	2300      	movs	r3, #0
    bee2:	7003      	strb	r3, [r0, #0]
    bee4:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    bee6:	4622      	mov	r2, r4
    bee8:	9300      	str	r3, [sp, #0]
    beea:	2105      	movs	r1, #5
    beec:	4628      	mov	r0, r5
    beee:	f019 fbd6 	bl	2569e <bt_l2cap_send_cb>
}
    bef2:	e7c0      	b.n	be76 <l2cap_recv+0x4a>
    bef4:	00028294 	.word	0x00028294
    bef8:	000281b4 	.word	0x000281b4
    befc:	0002d609 	.word	0x0002d609
    bf00:	0002d627 	.word	0x0002d627
    bf04:	0002d648 	.word	0x0002d648
    bf08:	0002d669 	.word	0x0002d669
    bf0c:	0002d685 	.word	0x0002d685

0000bf10 <bt_l2cap_recv>:
{
    bf10:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    bf12:	898b      	ldrh	r3, [r1, #12]
    bf14:	2b03      	cmp	r3, #3
{
    bf16:	4605      	mov	r5, r0
    bf18:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    bf1a:	d80e      	bhi.n	bf3a <bt_l2cap_recv+0x2a>
    bf1c:	4914      	ldr	r1, [pc, #80]	; (bf70 <bt_l2cap_recv+0x60>)
    bf1e:	4b15      	ldr	r3, [pc, #84]	; (bf74 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    bf20:	4815      	ldr	r0, [pc, #84]	; (bf78 <bt_l2cap_recv+0x68>)
    bf22:	1ac9      	subs	r1, r1, r3
    bf24:	08c9      	lsrs	r1, r1, #3
    bf26:	0189      	lsls	r1, r1, #6
    bf28:	f041 0101 	orr.w	r1, r1, #1
    bf2c:	f016 fe6a 	bl	22c04 <log_0>
	net_buf_unref(buf);
    bf30:	4620      	mov	r0, r4
}
    bf32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    bf36:	f011 bc9d 	b.w	1d874 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    bf3a:	2104      	movs	r1, #4
    bf3c:	f104 0008 	add.w	r0, r4, #8
    bf40:	f01a ff1b 	bl	26d7a <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    bf44:	8841      	ldrh	r1, [r0, #2]
    bf46:	4628      	mov	r0, r5
    bf48:	f019 fbd2 	bl	256f0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bf4c:	b950      	cbnz	r0, bf64 <bt_l2cap_recv+0x54>
    bf4e:	4b09      	ldr	r3, [pc, #36]	; (bf74 <bt_l2cap_recv+0x64>)
    bf50:	4a07      	ldr	r2, [pc, #28]	; (bf70 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    bf52:	480a      	ldr	r0, [pc, #40]	; (bf7c <bt_l2cap_recv+0x6c>)
    bf54:	1ad2      	subs	r2, r2, r3
    bf56:	08d2      	lsrs	r2, r2, #3
    bf58:	0192      	lsls	r2, r2, #6
    bf5a:	f042 0202 	orr.w	r2, r2, #2
    bf5e:	f016 fe5e 	bl	22c1e <log_1>
		net_buf_unref(buf);
    bf62:	e7e5      	b.n	bf30 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    bf64:	6843      	ldr	r3, [r0, #4]
    bf66:	4621      	mov	r1, r4
    bf68:	691b      	ldr	r3, [r3, #16]
    bf6a:	4798      	blx	r3
    bf6c:	e7e0      	b.n	bf30 <bt_l2cap_recv+0x20>
    bf6e:	bf00      	nop
    bf70:	00028294 	.word	0x00028294
    bf74:	000281b4 	.word	0x000281b4
    bf78:	0002d6a3 	.word	0x0002d6a3
    bf7c:	0002d6c0 	.word	0x0002d6c0

0000bf80 <bt_l2cap_update_conn_param>:
{
    bf80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bf82:	460c      	mov	r4, r1
	ident++;
    bf84:	4914      	ldr	r1, [pc, #80]	; (bfd8 <bt_l2cap_update_conn_param+0x58>)
    bf86:	780b      	ldrb	r3, [r1, #0]
    bf88:	3301      	adds	r3, #1
	if (!ident) {
    bf8a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    bf8e:	bf08      	it	eq
    bf90:	2301      	moveq	r3, #1
    bf92:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bf94:	7809      	ldrb	r1, [r1, #0]
{
    bf96:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bf98:	2208      	movs	r2, #8
    bf9a:	2012      	movs	r0, #18
    bf9c:	f7ff fea2 	bl	bce4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    bfa0:	4606      	mov	r6, r0
    bfa2:	b1b0      	cbz	r0, bfd2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    bfa4:	2108      	movs	r1, #8
    bfa6:	4408      	add	r0, r1
    bfa8:	f01a fec0 	bl	26d2c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    bfac:	8822      	ldrh	r2, [r4, #0]
    bfae:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    bfb0:	8862      	ldrh	r2, [r4, #2]
    bfb2:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    bfb4:	88a2      	ldrh	r2, [r4, #4]
    bfb6:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    bfb8:	88e2      	ldrh	r2, [r4, #6]
    bfba:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    bfbc:	2400      	movs	r4, #0
    bfbe:	9400      	str	r4, [sp, #0]
    bfc0:	4623      	mov	r3, r4
    bfc2:	4632      	mov	r2, r6
    bfc4:	2105      	movs	r1, #5
    bfc6:	4628      	mov	r0, r5
    bfc8:	f019 fb69 	bl	2569e <bt_l2cap_send_cb>
	return 0;
    bfcc:	4620      	mov	r0, r4
}
    bfce:	b002      	add	sp, #8
    bfd0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    bfd2:	f06f 000b 	mvn.w	r0, #11
    bfd6:	e7fa      	b.n	bfce <bt_l2cap_update_conn_param+0x4e>
    bfd8:	2000fb07 	.word	0x2000fb07

0000bfdc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    bfdc:	4b02      	ldr	r3, [pc, #8]	; (bfe8 <att_cfm_sent+0xc>)
    bfde:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    bfe2:	f019 bba8 	b.w	25736 <att_sent>
    bfe6:	bf00      	nop
    bfe8:	00025a93 	.word	0x00025a93

0000bfec <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    bfec:	4b02      	ldr	r3, [pc, #8]	; (bff8 <att_rsp_sent+0xc>)
    bfee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    bff2:	f019 bba0 	b.w	25736 <att_sent>
    bff6:	bf00      	nop
    bff8:	00025aaf 	.word	0x00025aaf

0000bffc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    bffc:	4b02      	ldr	r3, [pc, #8]	; (c008 <att_req_sent+0xc>)
    bffe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    c002:	f019 bb98 	b.w	25736 <att_sent>
    c006:	bf00      	nop
    c008:	0000c209 	.word	0x0000c209

0000c00c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    c00c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    c00e:	7b43      	ldrb	r3, [r0, #13]
    c010:	2b07      	cmp	r3, #7
    c012:	d00b      	beq.n	c02c <att_get+0x20>
    c014:	4918      	ldr	r1, [pc, #96]	; (c078 <att_get+0x6c>)
    c016:	4b19      	ldr	r3, [pc, #100]	; (c07c <att_get+0x70>)
		BT_WARN("Not connected");
    c018:	4819      	ldr	r0, [pc, #100]	; (c080 <att_get+0x74>)
    c01a:	1ac9      	subs	r1, r1, r3
    c01c:	08c9      	lsrs	r1, r1, #3
    c01e:	0189      	lsls	r1, r1, #6
    c020:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    c024:	f016 fdee 	bl	22c04 <log_0>
		return NULL;
    c028:	2400      	movs	r4, #0
    c02a:	e00e      	b.n	c04a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c02c:	2104      	movs	r1, #4
    c02e:	f019 fb5f 	bl	256f0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c032:	4604      	mov	r4, r0
    c034:	b958      	cbnz	r0, c04e <att_get+0x42>
    c036:	4910      	ldr	r1, [pc, #64]	; (c078 <att_get+0x6c>)
    c038:	4b10      	ldr	r3, [pc, #64]	; (c07c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    c03a:	4812      	ldr	r0, [pc, #72]	; (c084 <att_get+0x78>)
    c03c:	1ac9      	subs	r1, r1, r3
    c03e:	08c9      	lsrs	r1, r1, #3
    c040:	0189      	lsls	r1, r1, #6
    c042:	f041 0101 	orr.w	r1, r1, #1
    c046:	f016 fddd 	bl	22c04 <log_0>
	}

	return att_chan->att;
}
    c04a:	4620      	mov	r0, r4
    c04c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c04e:	f3bf 8f5b 	dmb	ish
    c052:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    c056:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c05a:	075b      	lsls	r3, r3, #29
    c05c:	d508      	bpl.n	c070 <att_get+0x64>
    c05e:	4906      	ldr	r1, [pc, #24]	; (c078 <att_get+0x6c>)
    c060:	4b06      	ldr	r3, [pc, #24]	; (c07c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    c062:	4809      	ldr	r0, [pc, #36]	; (c088 <att_get+0x7c>)
    c064:	1ac9      	subs	r1, r1, r3
    c066:	08c9      	lsrs	r1, r1, #3
    c068:	0189      	lsls	r1, r1, #6
    c06a:	f041 0102 	orr.w	r1, r1, #2
    c06e:	e7d9      	b.n	c024 <att_get+0x18>
	return att_chan->att;
    c070:	f850 4c08 	ldr.w	r4, [r0, #-8]
    c074:	e7e9      	b.n	c04a <att_get+0x3e>
    c076:	bf00      	nop
    c078:	000281bc 	.word	0x000281bc
    c07c:	000281b4 	.word	0x000281b4
    c080:	0002d6fc 	.word	0x0002d6fc
    c084:	0002d70a 	.word	0x0002d70a
    c088:	0002d725 	.word	0x0002d725

0000c08c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    c08c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c08e:	3808      	subs	r0, #8
    c090:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    c092:	a901      	add	r1, sp, #4
    c094:	4802      	ldr	r0, [pc, #8]	; (c0a0 <bt_att_released+0x14>)
    c096:	f014 f921 	bl	202dc <k_mem_slab_free>
}
    c09a:	b003      	add	sp, #12
    c09c:	f85d fb04 	ldr.w	pc, [sp], #4
    c0a0:	2000a05c 	.word	0x2000a05c

0000c0a4 <find_type_cb>:
{
    c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    c0a8:	f8d2 9000 	ldr.w	r9, [r2]
{
    c0ac:	b091      	sub	sp, #68	; 0x44
    c0ae:	4607      	mov	r7, r0
    c0b0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c0b2:	2500      	movs	r5, #0
    c0b4:	f642 0301 	movw	r3, #10241	; 0x2801
    c0b8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c0ba:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c0be:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    c0c2:	a90b      	add	r1, sp, #44	; 0x2c
{
    c0c4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c0c6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c0ca:	f018 fee1 	bl	24e90 <bt_uuid_cmp>
    c0ce:	2800      	cmp	r0, #0
    c0d0:	d066      	beq.n	c1a0 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    c0d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c0d6:	6838      	ldr	r0, [r7, #0]
    c0d8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    c0dc:	a90b      	add	r1, sp, #44	; 0x2c
    c0de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c0e2:	f018 fed5 	bl	24e90 <bt_uuid_cmp>
    c0e6:	b138      	cbz	r0, c0f8 <find_type_cb+0x54>
		if (data->group &&
    c0e8:	68a3      	ldr	r3, [r4, #8]
    c0ea:	b11b      	cbz	r3, c0f4 <find_type_cb+0x50>
    c0ec:	885a      	ldrh	r2, [r3, #2]
    c0ee:	42b2      	cmp	r2, r6
    c0f0:	d200      	bcs.n	c0f4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c0f2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    c0f4:	2001      	movs	r0, #1
    c0f6:	e009      	b.n	c10c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    c0f8:	6861      	ldr	r1, [r4, #4]
    c0fa:	4608      	mov	r0, r1
    c0fc:	f019 fb13 	bl	25726 <net_buf_frags_len>
    c100:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    c104:	1a1b      	subs	r3, r3, r0
    c106:	2b03      	cmp	r3, #3
    c108:	d803      	bhi.n	c112 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    c10a:	2000      	movs	r0, #0
}
    c10c:	b011      	add	sp, #68	; 0x44
    c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    c112:	4608      	mov	r0, r1
    c114:	f01a fde8 	bl	26ce8 <net_buf_frag_last>
    c118:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c11a:	6860      	ldr	r0, [r4, #4]
    c11c:	f019 fb03 	bl	25726 <net_buf_frags_len>
    c120:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    c124:	f105 0b08 	add.w	fp, r5, #8
    c128:	ebaa 0a00 	sub.w	sl, sl, r0
    c12c:	4658      	mov	r0, fp
    c12e:	f01a fe38 	bl	26da2 <net_buf_simple_tailroom>
    c132:	4582      	cmp	sl, r0
    c134:	d237      	bcs.n	c1a6 <find_type_cb+0x102>
    c136:	6860      	ldr	r0, [r4, #4]
    c138:	f019 faf5 	bl	25726 <net_buf_frags_len>
    c13c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    c140:	1a18      	subs	r0, r3, r0
	if (!len) {
    c142:	b970      	cbnz	r0, c162 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c144:	6863      	ldr	r3, [r4, #4]
    c146:	7998      	ldrb	r0, [r3, #6]
    c148:	f011 fad6 	bl	1d6f8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    c14c:	2200      	movs	r2, #0
    c14e:	2300      	movs	r3, #0
    c150:	f01a fd96 	bl	26c80 <net_buf_alloc_fixed>
		if (!frag) {
    c154:	4605      	mov	r5, r0
    c156:	2800      	cmp	r0, #0
    c158:	d0d7      	beq.n	c10a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    c15a:	4601      	mov	r1, r0
    c15c:	6860      	ldr	r0, [r4, #4]
    c15e:	f01a fdd4 	bl	26d0a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c162:	2300      	movs	r3, #0
    c164:	9300      	str	r3, [sp, #0]
    c166:	f8d7 9004 	ldr.w	r9, [r7, #4]
    c16a:	4639      	mov	r1, r7
    c16c:	2310      	movs	r3, #16
    c16e:	aa02      	add	r2, sp, #8
    c170:	4640      	mov	r0, r8
    c172:	47c8      	blx	r9
	if (read < 0) {
    c174:	1e07      	subs	r7, r0, #0
    c176:	db13      	blt.n	c1a0 <find_type_cb+0xfc>
	if (read != data->value_len) {
    c178:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c17a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    c17c:	42ba      	cmp	r2, r7
    c17e:	d037      	beq.n	c1f0 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c180:	4601      	mov	r1, r0
    c182:	a80b      	add	r0, sp, #44	; 0x2c
    c184:	f018 feb2 	bl	24eec <bt_uuid_create>
    c188:	b988      	cbnz	r0, c1ae <find_type_cb+0x10a>
    c18a:	4a1b      	ldr	r2, [pc, #108]	; (c1f8 <find_type_cb+0x154>)
    c18c:	4b1b      	ldr	r3, [pc, #108]	; (c1fc <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c18e:	7c21      	ldrb	r1, [r4, #16]
    c190:	481b      	ldr	r0, [pc, #108]	; (c200 <find_type_cb+0x15c>)
    c192:	1ad2      	subs	r2, r2, r3
    c194:	08d2      	lsrs	r2, r2, #3
    c196:	0192      	lsls	r2, r2, #6
    c198:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    c19c:	f016 fd3f 	bl	22c1e <log_1>
	data->group = NULL;
    c1a0:	2300      	movs	r3, #0
    c1a2:	60a3      	str	r3, [r4, #8]
    c1a4:	e7a6      	b.n	c0f4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    c1a6:	4658      	mov	r0, fp
    c1a8:	f01a fdfb 	bl	26da2 <net_buf_simple_tailroom>
    c1ac:	e7c9      	b.n	c142 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c1ae:	b2fa      	uxtb	r2, r7
    c1b0:	a902      	add	r1, sp, #8
    c1b2:	a806      	add	r0, sp, #24
    c1b4:	f018 fe9a 	bl	24eec <bt_uuid_create>
    c1b8:	b948      	cbnz	r0, c1ce <find_type_cb+0x12a>
    c1ba:	4a0f      	ldr	r2, [pc, #60]	; (c1f8 <find_type_cb+0x154>)
    c1bc:	4b0f      	ldr	r3, [pc, #60]	; (c1fc <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    c1be:	4811      	ldr	r0, [pc, #68]	; (c204 <find_type_cb+0x160>)
    c1c0:	1ad2      	subs	r2, r2, r3
    c1c2:	08d2      	lsrs	r2, r2, #3
    c1c4:	0192      	lsls	r2, r2, #6
    c1c6:	f042 0202 	orr.w	r2, r2, #2
    c1ca:	4639      	mov	r1, r7
    c1cc:	e7e6      	b.n	c19c <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c1ce:	a906      	add	r1, sp, #24
    c1d0:	a80b      	add	r0, sp, #44	; 0x2c
    c1d2:	f018 fe5d 	bl	24e90 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c1d6:	2800      	cmp	r0, #0
    c1d8:	d1e2      	bne.n	c1a0 <find_type_cb+0xfc>
	data->err = 0x00;
    c1da:	2300      	movs	r3, #0
    c1dc:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    c1de:	2104      	movs	r1, #4
    c1e0:	f105 0008 	add.w	r0, r5, #8
    c1e4:	f01a fda2 	bl	26d2c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    c1e8:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c1ea:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c1ec:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c1ee:	e781      	b.n	c0f4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c1f0:	a902      	add	r1, sp, #8
    c1f2:	f018 fd1c 	bl	24c2e <memcmp>
    c1f6:	e7ee      	b.n	c1d6 <find_type_cb+0x132>
    c1f8:	000281bc 	.word	0x000281bc
    c1fc:	000281b4 	.word	0x000281b4
    c200:	0002d749 	.word	0x0002d749
    c204:	0002d768 	.word	0x0002d768

0000c208 <chan_req_sent>:
	if (chan->req) {
    c208:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    c20c:	b13b      	cbz	r3, c21e <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c20e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c212:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c216:	4802      	ldr	r0, [pc, #8]	; (c220 <chan_req_sent+0x18>)
    c218:	2300      	movs	r3, #0
    c21a:	f014 be57 	b.w	20ecc <k_delayed_work_submit_to_queue>
}
    c21e:	4770      	bx	lr
    c220:	2000b0f0 	.word	0x2000b0f0

0000c224 <chan_send>:
{
    c224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c228:	688b      	ldr	r3, [r1, #8]
    c22a:	781b      	ldrb	r3, [r3, #0]
    c22c:	2bd2      	cmp	r3, #210	; 0xd2
{
    c22e:	4606      	mov	r6, r0
    c230:	460c      	mov	r4, r1
    c232:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c234:	d116      	bne.n	c264 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    c236:	6803      	ldr	r3, [r0, #0]
    c238:	6818      	ldr	r0, [r3, #0]
    c23a:	f003 fa41 	bl	f6c0 <bt_smp_sign>
		if (err) {
    c23e:	4605      	mov	r5, r0
    c240:	b180      	cbz	r0, c264 <chan_send+0x40>
    c242:	4b24      	ldr	r3, [pc, #144]	; (c2d4 <chan_send+0xb0>)
    c244:	4924      	ldr	r1, [pc, #144]	; (c2d8 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    c246:	4825      	ldr	r0, [pc, #148]	; (c2dc <chan_send+0xb8>)
    c248:	1ac9      	subs	r1, r1, r3
    c24a:	08c9      	lsrs	r1, r1, #3
    c24c:	0189      	lsls	r1, r1, #6
    c24e:	f041 0101 	orr.w	r1, r1, #1
    c252:	f016 fcd7 	bl	22c04 <log_0>
			net_buf_unref(buf);
    c256:	4620      	mov	r0, r4
    c258:	f011 fb0c 	bl	1d874 <net_buf_unref>
}
    c25c:	4628      	mov	r0, r5
    c25e:	b003      	add	sp, #12
    c260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    c264:	f104 0008 	add.w	r0, r4, #8
    c268:	f01a fd97 	bl	26d9a <net_buf_simple_headroom>
	state->len = buf->len;
    c26c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    c270:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    c272:	b957      	cbnz	r7, c28a <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    c274:	68a3      	ldr	r3, [r4, #8]
    c276:	7818      	ldrb	r0, [r3, #0]
    c278:	f019 fa73 	bl	25762 <att_op_get_type>
    c27c:	1e43      	subs	r3, r0, #1
    c27e:	b2db      	uxtb	r3, r3
    c280:	2b04      	cmp	r3, #4
    c282:	bf9c      	itt	ls
    c284:	4a16      	ldrls	r2, [pc, #88]	; (c2e0 <chan_send+0xbc>)
    c286:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c28a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    c28c:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c290:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    c292:	4b14      	ldr	r3, [pc, #80]	; (c2e4 <chan_send+0xc0>)
    c294:	429f      	cmp	r7, r3
    c296:	d018      	beq.n	c2ca <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    c298:	4b13      	ldr	r3, [pc, #76]	; (c2e8 <chan_send+0xc4>)
    c29a:	429f      	cmp	r7, r3
    c29c:	d017      	beq.n	c2ce <chan_send+0xaa>
		return att_sent;
    c29e:	4913      	ldr	r1, [pc, #76]	; (c2ec <chan_send+0xc8>)
    c2a0:	4b13      	ldr	r3, [pc, #76]	; (c2f0 <chan_send+0xcc>)
    c2a2:	4a14      	ldr	r2, [pc, #80]	; (c2f4 <chan_send+0xd0>)
    c2a4:	428f      	cmp	r7, r1
    c2a6:	bf18      	it	ne
    c2a8:	4613      	movne	r3, r2
			       &chan->chan.chan);
    c2aa:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c2ac:	9600      	str	r6, [sp, #0]
    c2ae:	4622      	mov	r2, r4
    c2b0:	2104      	movs	r1, #4
    c2b2:	f019 f9f4 	bl	2569e <bt_l2cap_send_cb>
	if (err) {
    c2b6:	4605      	mov	r5, r0
    c2b8:	2800      	cmp	r0, #0
    c2ba:	d0cf      	beq.n	c25c <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    c2bc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    c2be:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    c2c2:	fa10 f088 	uxtah	r0, r0, r8
    c2c6:	60a0      	str	r0, [r4, #8]
}
    c2c8:	e7c8      	b.n	c25c <chan_send+0x38>
		return att_rsp_sent;
    c2ca:	4b0b      	ldr	r3, [pc, #44]	; (c2f8 <chan_send+0xd4>)
    c2cc:	e7ed      	b.n	c2aa <chan_send+0x86>
		return att_cfm_sent;
    c2ce:	4b0b      	ldr	r3, [pc, #44]	; (c2fc <chan_send+0xd8>)
    c2d0:	e7eb      	b.n	c2aa <chan_send+0x86>
    c2d2:	bf00      	nop
    c2d4:	000281b4 	.word	0x000281b4
    c2d8:	000281bc 	.word	0x000281bc
    c2dc:	0002d787 	.word	0x0002d787
    c2e0:	00028b48 	.word	0x00028b48
    c2e4:	00025aaf 	.word	0x00025aaf
    c2e8:	00025a93 	.word	0x00025a93
    c2ec:	0000c209 	.word	0x0000c209
    c2f0:	0000bffd 	.word	0x0000bffd
    c2f4:	00025737 	.word	0x00025737
    c2f8:	0000bfed 	.word	0x0000bfed
    c2fc:	0000bfdd 	.word	0x0000bfdd

0000c300 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c300:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    c302:	4a07      	ldr	r2, [pc, #28]	; (c320 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c304:	4604      	mov	r4, r0
    c306:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    c308:	f7ff ff8c 	bl	c224 <chan_send>
	if (err) {
    c30c:	b130      	cbz	r0, c31c <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    c30e:	4629      	mov	r1, r5
    c310:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
    c314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    c318:	f01a bcd5 	b.w	26cc6 <net_buf_put>
}
    c31c:	bd38      	pop	{r3, r4, r5, pc}
    c31e:	bf00      	nop
    c320:	00025aaf 	.word	0x00025aaf

0000c324 <read_group_cb>:
{
    c324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c328:	4605      	mov	r5, r0
    c32a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c32c:	f04f 0800 	mov.w	r8, #0
    c330:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c334:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    c336:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c338:	f88d 8008 	strb.w	r8, [sp, #8]
    c33c:	a902      	add	r1, sp, #8
{
    c33e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c340:	f8ad 300a 	strh.w	r3, [sp, #10]
    c344:	f018 fda4 	bl	24e90 <bt_uuid_cmp>
    c348:	b1a0      	cbz	r0, c374 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c34a:	f642 0301 	movw	r3, #10241	; 0x2801
    c34e:	6828      	ldr	r0, [r5, #0]
    c350:	f88d 800c 	strb.w	r8, [sp, #12]
    c354:	a903      	add	r1, sp, #12
    c356:	f8ad 300e 	strh.w	r3, [sp, #14]
    c35a:	f018 fd99 	bl	24e90 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c35e:	b148      	cbz	r0, c374 <read_group_cb+0x50>
		if (data->group &&
    c360:	6923      	ldr	r3, [r4, #16]
    c362:	b11b      	cbz	r3, c36c <read_group_cb+0x48>
    c364:	885a      	ldrh	r2, [r3, #2]
    c366:	42b2      	cmp	r2, r6
    c368:	d200      	bcs.n	c36c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c36a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c36c:	2001      	movs	r0, #1
}
    c36e:	b004      	add	sp, #16
    c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c374:	6861      	ldr	r1, [r4, #4]
    c376:	6828      	ldr	r0, [r5, #0]
    c378:	f018 fd8a 	bl	24e90 <bt_uuid_cmp>
    c37c:	b110      	cbz	r0, c384 <read_group_cb+0x60>
		data->group = NULL;
    c37e:	2300      	movs	r3, #0
    c380:	6123      	str	r3, [r4, #16]
    c382:	e7f3      	b.n	c36c <read_group_cb+0x48>
	if (data->rsp->len &&
    c384:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c386:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    c388:	781a      	ldrb	r2, [r3, #0]
    c38a:	b13a      	cbz	r2, c39c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c38c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    c390:	8981      	ldrh	r1, [r0, #12]
    c392:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c394:	4293      	cmp	r3, r2
    c396:	da01      	bge.n	c39c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    c398:	2000      	movs	r0, #0
    c39a:	e7e8      	b.n	c36e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    c39c:	2104      	movs	r1, #4
    c39e:	3008      	adds	r0, #8
    c3a0:	f01a fcc4 	bl	26d2c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c3a4:	4b09      	ldr	r3, [pc, #36]	; (c3cc <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c3a6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c3a8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c3aa:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c3ac:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c3ae:	4629      	mov	r1, r5
    c3b0:	9300      	str	r3, [sp, #0]
    c3b2:	9401      	str	r4, [sp, #4]
    c3b4:	2300      	movs	r3, #0
    c3b6:	4638      	mov	r0, r7
    c3b8:	f019 fae0 	bl	2597c <att_chan_read>
	if (read < 0) {
    c3bc:	2800      	cmp	r0, #0
    c3be:	dbeb      	blt.n	c398 <read_group_cb+0x74>
	if (!data->group) {
    c3c0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c3c2:	3800      	subs	r0, #0
    c3c4:	bf18      	it	ne
    c3c6:	2001      	movne	r0, #1
    c3c8:	e7d1      	b.n	c36e <read_group_cb+0x4a>
    c3ca:	bf00      	nop
    c3cc:	0002586b 	.word	0x0002586b

0000c3d0 <read_type_cb>:
{
    c3d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    c3d4:	f8d2 8000 	ldr.w	r8, [r2]
{
    c3d8:	4606      	mov	r6, r0
    c3da:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c3dc:	6800      	ldr	r0, [r0, #0]
    c3de:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c3e0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    c3e4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c3e6:	f018 fd53 	bl	24e90 <bt_uuid_cmp>
    c3ea:	4607      	mov	r7, r0
    c3ec:	2800      	cmp	r0, #0
    c3ee:	d13e      	bne.n	c46e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c3f0:	4628      	mov	r0, r5
    c3f2:	2215      	movs	r2, #21
    c3f4:	4631      	mov	r1, r6
    c3f6:	f01a f821 	bl	2643c <bt_gatt_check_perm>
    c3fa:	4605      	mov	r5, r0
    c3fc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c3fe:	b148      	cbz	r0, c414 <read_type_cb+0x44>
		if (data->rsp->len) {
    c400:	68e3      	ldr	r3, [r4, #12]
    c402:	781b      	ldrb	r3, [r3, #0]
    c404:	b923      	cbnz	r3, c410 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    c406:	2500      	movs	r5, #0
}
    c408:	4628      	mov	r0, r5
    c40a:	b003      	add	sp, #12
    c40c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    c410:	7527      	strb	r7, [r4, #20]
    c412:	e7f8      	b.n	c406 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c414:	68a0      	ldr	r0, [r4, #8]
    c416:	f01a fc67 	bl	26ce8 <net_buf_frag_last>
    c41a:	2102      	movs	r1, #2
    c41c:	3008      	adds	r0, #8
    c41e:	f01a fc85 	bl	26d2c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c422:	4b14      	ldr	r3, [pc, #80]	; (c474 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c424:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c426:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    c428:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c42c:	4631      	mov	r1, r6
    c42e:	9300      	str	r3, [sp, #0]
    c430:	9401      	str	r4, [sp, #4]
    c432:	462b      	mov	r3, r5
    c434:	4640      	mov	r0, r8
    c436:	f019 faa1 	bl	2597c <att_chan_read>
	if (read < 0) {
    c43a:	2800      	cmp	r0, #0
    c43c:	da07      	bge.n	c44e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    c43e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c442:	bf26      	itte	cs
    c444:	4240      	negcs	r0, r0
    c446:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c448:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c44a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c44c:	e7dc      	b.n	c408 <read_type_cb+0x38>
	if (!data->item) {
    c44e:	6923      	ldr	r3, [r4, #16]
    c450:	2b00      	cmp	r3, #0
    c452:	d0d8      	beq.n	c406 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c454:	68a0      	ldr	r0, [r4, #8]
    c456:	f019 f966 	bl	25726 <net_buf_frags_len>
    c45a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c45e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c460:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c462:	7818      	ldrb	r0, [r3, #0]
    c464:	4285      	cmp	r5, r0
    c466:	bf94      	ite	ls
    c468:	2500      	movls	r5, #0
    c46a:	2501      	movhi	r5, #1
    c46c:	e7cc      	b.n	c408 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c46e:	2501      	movs	r5, #1
    c470:	e7ca      	b.n	c408 <read_type_cb+0x38>
    c472:	bf00      	nop
    c474:	00025743 	.word	0x00025743

0000c478 <prep_write_cb>:
{
    c478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c47c:	4614      	mov	r4, r2
    c47e:	4606      	mov	r6, r0
    c480:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    c482:	222a      	movs	r2, #42	; 0x2a
    c484:	4601      	mov	r1, r0
    c486:	6820      	ldr	r0, [r4, #0]
    c488:	f019 ffd8 	bl	2643c <bt_gatt_check_perm>
    c48c:	4605      	mov	r5, r0
    c48e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    c490:	2800      	cmp	r0, #0
    c492:	d12e      	bne.n	c4f2 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    c494:	7cb3      	ldrb	r3, [r6, #18]
    c496:	065b      	lsls	r3, r3, #25
    c498:	d516      	bpl.n	c4c8 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    c49a:	2301      	movs	r3, #1
    c49c:	9301      	str	r3, [sp, #4]
    c49e:	89e3      	ldrh	r3, [r4, #14]
    c4a0:	9300      	str	r3, [sp, #0]
    c4a2:	f8d6 8008 	ldr.w	r8, [r6, #8]
    c4a6:	89a3      	ldrh	r3, [r4, #12]
    c4a8:	68a2      	ldr	r2, [r4, #8]
    c4aa:	6820      	ldr	r0, [r4, #0]
    c4ac:	4631      	mov	r1, r6
    c4ae:	47c0      	blx	r8
	if (write != 0) {
    c4b0:	b150      	cbz	r0, c4c8 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    c4b2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c4b6:	bf26      	itte	cs
    c4b8:	4243      	negcs	r3, r0
    c4ba:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    c4bc:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c4be:	7423      	strb	r3, [r4, #16]
}
    c4c0:	4628      	mov	r0, r5
    c4c2:	b002      	add	sp, #8
    c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    c4c8:	480b      	ldr	r0, [pc, #44]	; (c4f8 <prep_write_cb+0x80>)
    c4ca:	2200      	movs	r2, #0
    c4cc:	2300      	movs	r3, #0
    c4ce:	f01a fbd7 	bl	26c80 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    c4d2:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    c4d4:	b908      	cbnz	r0, c4da <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c4d6:	2309      	movs	r3, #9
    c4d8:	e7f1      	b.n	c4be <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    c4da:	89e3      	ldrh	r3, [r4, #14]
    c4dc:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    c4de:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c4e0:	89a2      	ldrh	r2, [r4, #12]
    c4e2:	68a1      	ldr	r1, [r4, #8]
    c4e4:	3008      	adds	r0, #8
    c4e6:	f01a fc27 	bl	26d38 <net_buf_simple_add_mem>
	data->err = 0U;
    c4ea:	2300      	movs	r3, #0
    c4ec:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    c4ee:	2501      	movs	r5, #1
    c4f0:	e7e6      	b.n	c4c0 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    c4f2:	2500      	movs	r5, #0
    c4f4:	e7e4      	b.n	c4c0 <prep_write_cb+0x48>
    c4f6:	bf00      	nop
    c4f8:	2000a23c 	.word	0x2000a23c

0000c4fc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c4fe:	2300      	movs	r3, #0
{
    c500:	4606      	mov	r6, r0
    c502:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c504:	4828      	ldr	r0, [pc, #160]	; (c5a8 <bt_att_accept+0xac>)
    c506:	2200      	movs	r2, #0
    c508:	4669      	mov	r1, sp
    c50a:	f013 feb7 	bl	2027c <k_mem_slab_alloc>
    c50e:	4604      	mov	r4, r0
    c510:	b178      	cbz	r0, c532 <bt_att_accept+0x36>
    c512:	4a26      	ldr	r2, [pc, #152]	; (c5ac <bt_att_accept+0xb0>)
    c514:	4b26      	ldr	r3, [pc, #152]	; (c5b0 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    c516:	4827      	ldr	r0, [pc, #156]	; (c5b4 <bt_att_accept+0xb8>)
    c518:	1ad2      	subs	r2, r2, r3
    c51a:	08d2      	lsrs	r2, r2, #3
    c51c:	0192      	lsls	r2, r2, #6
    c51e:	f042 0201 	orr.w	r2, r2, #1
    c522:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c524:	f016 fb7b 	bl	22c1e <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c528:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c52c:	4620      	mov	r0, r4
    c52e:	b003      	add	sp, #12
    c530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    c532:	4601      	mov	r1, r0
    c534:	2244      	movs	r2, #68	; 0x44
    c536:	9800      	ldr	r0, [sp, #0]
    c538:	f018 fbb5 	bl	24ca6 <memset>
	att->conn = conn;
    c53c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c53e:	481e      	ldr	r0, [pc, #120]	; (c5b8 <bt_att_accept+0xbc>)
	list->tail = NULL;
    c540:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c542:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    c546:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    c54a:	2200      	movs	r2, #0
    c54c:	2300      	movs	r3, #0
    c54e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c550:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c552:	f013 fe93 	bl	2027c <k_mem_slab_alloc>
    c556:	4604      	mov	r4, r0
    c558:	b148      	cbz	r0, c56e <bt_att_accept+0x72>
    c55a:	4a14      	ldr	r2, [pc, #80]	; (c5ac <bt_att_accept+0xb0>)
    c55c:	4b14      	ldr	r3, [pc, #80]	; (c5b0 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c55e:	6829      	ldr	r1, [r5, #0]
    c560:	4816      	ldr	r0, [pc, #88]	; (c5bc <bt_att_accept+0xc0>)
    c562:	1ad2      	subs	r2, r2, r3
    c564:	08d2      	lsrs	r2, r2, #3
    c566:	0192      	lsls	r2, r2, #6
    c568:	f042 0201 	orr.w	r2, r2, #1
    c56c:	e7da      	b.n	c524 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    c56e:	4601      	mov	r1, r0
    c570:	f44f 728c 	mov.w	r2, #280	; 0x118
    c574:	9801      	ldr	r0, [sp, #4]
    c576:	f018 fb96 	bl	24ca6 <memset>
	chan->chan.chan.ops = &ops;
    c57a:	9801      	ldr	r0, [sp, #4]
    c57c:	4b10      	ldr	r3, [pc, #64]	; (c5c0 <bt_att_accept+0xc4>)
    c57e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    c580:	30c8      	adds	r0, #200	; 0xc8
    c582:	f01b f8c2 	bl	2770a <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c586:	9b01      	ldr	r3, [sp, #4]
    c588:	f3bf 8f5b 	dmb	ish
    c58c:	33c0      	adds	r3, #192	; 0xc0
    c58e:	e853 2f00 	ldrex	r2, [r3]
    c592:	e843 4100 	strex	r1, r4, [r3]
    c596:	2900      	cmp	r1, #0
    c598:	d1f9      	bne.n	c58e <bt_att_accept+0x92>
    c59a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c59e:	9b01      	ldr	r3, [sp, #4]
    c5a0:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    c5a4:	603b      	str	r3, [r7, #0]
	return 0;
    c5a6:	e7c1      	b.n	c52c <bt_att_accept+0x30>
    c5a8:	2000a040 	.word	0x2000a040
    c5ac:	000281bc 	.word	0x000281bc
    c5b0:	000281b4 	.word	0x000281b4
    c5b4:	0002d79a 	.word	0x0002d79a
    c5b8:	2000a05c 	.word	0x2000a05c
    c5bc:	0002d7bf 	.word	0x0002d7bf
    c5c0:	200003a0 	.word	0x200003a0

0000c5c4 <bt_att_connected>:
{
    c5c4:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c5c6:	2104      	movs	r1, #4
{
    c5c8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c5ca:	6800      	ldr	r0, [r0, #0]
    c5cc:	f019 f880 	bl	256d0 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    c5d0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c5d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c5d6:	b93b      	cbnz	r3, c5e8 <bt_att_connected+0x24>
    c5d8:	f105 000c 	add.w	r0, r5, #12
    c5dc:	f01b f895 	bl	2770a <z_impl_k_queue_init>
    c5e0:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c5e4:	f01b f891 	bl	2770a <z_impl_k_queue_init>
	parent->next = child;
    c5e8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    c5ea:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
Z_GENLIST_PREPEND(slist, snode)
    c5ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    c5f0:	f504 7386 	add.w	r3, r4, #268	; 0x10c
	list->head = node;
    c5f4:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    c5f6:	b902      	cbnz	r2, c5fa <bt_att_connected+0x36>
	list->tail = node;
    c5f8:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5fa:	f3bf 8f5b 	dmb	ish
    c5fe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    c602:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    c606:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c608:	bf5e      	ittt	pl
    c60a:	2317      	movpl	r3, #23
    c60c:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c610:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c614:	2230      	movs	r2, #48	; 0x30
    c616:	2100      	movs	r1, #0
    c618:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    c61c:	f018 fb43 	bl	24ca6 <memset>
    c620:	4b01      	ldr	r3, [pc, #4]	; (c628 <bt_att_connected+0x64>)
    c622:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    c626:	bd38      	pop	{r3, r4, r5, pc}
    c628:	0000d0b9 	.word	0x0000d0b9

0000c62c <bt_att_chan_create_pdu>:
{
    c62c:	b538      	push	{r3, r4, r5, lr}
    c62e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c630:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    c634:	3201      	adds	r2, #1
    c636:	428a      	cmp	r2, r1
    c638:	d90c      	bls.n	c654 <bt_att_chan_create_pdu+0x28>
    c63a:	481a      	ldr	r0, [pc, #104]	; (c6a4 <bt_att_chan_create_pdu+0x78>)
    c63c:	4b1a      	ldr	r3, [pc, #104]	; (c6a8 <bt_att_chan_create_pdu+0x7c>)
    c63e:	1a1b      	subs	r3, r3, r0
    c640:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c642:	019b      	lsls	r3, r3, #6
    c644:	4819      	ldr	r0, [pc, #100]	; (c6ac <bt_att_chan_create_pdu+0x80>)
    c646:	f043 0302 	orr.w	r3, r3, #2
    c64a:	f016 fafc 	bl	22c46 <log_2>
		return NULL;
    c64e:	2400      	movs	r4, #0
}
    c650:	4620      	mov	r0, r4
    c652:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    c654:	4628      	mov	r0, r5
    c656:	f019 f884 	bl	25762 <att_op_get_type>
    c65a:	2802      	cmp	r0, #2
    c65c:	d001      	beq.n	c662 <bt_att_chan_create_pdu+0x36>
    c65e:	2804      	cmp	r0, #4
    c660:	d114      	bne.n	c68c <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    c662:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c666:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    c668:	2100      	movs	r1, #0
    c66a:	4608      	mov	r0, r1
    c66c:	f019 f814 	bl	25698 <bt_l2cap_create_pdu_timeout>
    c670:	4604      	mov	r4, r0
	if (!buf) {
    c672:	b980      	cbnz	r0, c696 <bt_att_chan_create_pdu+0x6a>
    c674:	4b0b      	ldr	r3, [pc, #44]	; (c6a4 <bt_att_chan_create_pdu+0x78>)
    c676:	4a0c      	ldr	r2, [pc, #48]	; (c6a8 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    c678:	480d      	ldr	r0, [pc, #52]	; (c6b0 <bt_att_chan_create_pdu+0x84>)
    c67a:	1ad2      	subs	r2, r2, r3
    c67c:	08d2      	lsrs	r2, r2, #3
    c67e:	0192      	lsls	r2, r2, #6
    c680:	f042 0201 	orr.w	r2, r2, #1
    c684:	4629      	mov	r1, r5
    c686:	f016 faca 	bl	22c1e <log_1>
		return NULL;
    c68a:	e7e1      	b.n	c650 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    c68c:	f04f 32ff 	mov.w	r2, #4294967295
    c690:	f04f 33ff 	mov.w	r3, #4294967295
    c694:	e7e8      	b.n	c668 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    c696:	2101      	movs	r1, #1
    c698:	3008      	adds	r0, #8
    c69a:	f01a fb47 	bl	26d2c <net_buf_simple_add>
	hdr->code = op;
    c69e:	7005      	strb	r5, [r0, #0]
	return buf;
    c6a0:	e7d6      	b.n	c650 <bt_att_chan_create_pdu+0x24>
    c6a2:	bf00      	nop
    c6a4:	000281b4 	.word	0x000281b4
    c6a8:	000281bc 	.word	0x000281bc
    c6ac:	0002d7e4 	.word	0x0002d7e4
    c6b0:	0002d5d1 	.word	0x0002d5d1

0000c6b4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    c6b4:	898b      	ldrh	r3, [r1, #12]
{
    c6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6ba:	4604      	mov	r4, r0
    c6bc:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    c6be:	b963      	cbnz	r3, c6da <bt_att_recv+0x26>
    c6c0:	494c      	ldr	r1, [pc, #304]	; (c7f4 <bt_att_recv+0x140>)
    c6c2:	4b4d      	ldr	r3, [pc, #308]	; (c7f8 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    c6c4:	484d      	ldr	r0, [pc, #308]	; (c7fc <bt_att_recv+0x148>)
    c6c6:	1ac9      	subs	r1, r1, r3
    c6c8:	08c9      	lsrs	r1, r1, #3
    c6ca:	0189      	lsls	r1, r1, #6
    c6cc:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    c6d0:	f016 fa98 	bl	22c04 <log_0>
}
    c6d4:	2000      	movs	r0, #0
    c6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c6da:	2101      	movs	r1, #1
    c6dc:	f108 0008 	add.w	r0, r8, #8
    c6e0:	f01a fb4b 	bl	26d7a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    c6e4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c6e8:	4605      	mov	r5, r0
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d0f2      	beq.n	c6d4 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    c6ee:	7801      	ldrb	r1, [r0, #0]
    c6f0:	4a43      	ldr	r2, [pc, #268]	; (c800 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c6f2:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c6f6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    c6f8:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    c6fc:	4288      	cmp	r0, r1
    c6fe:	d11e      	bne.n	c73e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    c700:	00d8      	lsls	r0, r3, #3
    c702:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c706:	789f      	ldrb	r7, [r3, #2]
    c708:	2f01      	cmp	r7, #1
    c70a:	d133      	bne.n	c774 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c70c:	f3bf 8f5b 	dmb	ish
    c710:	34b8      	adds	r4, #184	; 0xb8
    c712:	e854 3f00 	ldrex	r3, [r4]
    c716:	f043 0101 	orr.w	r1, r3, #1
    c71a:	e844 1c00 	strex	ip, r1, [r4]
    c71e:	f1bc 0f00 	cmp.w	ip, #0
    c722:	d1f6      	bne.n	c712 <bt_att_recv+0x5e>
    c724:	f3bf 8f5b 	dmb	ish
    c728:	07d9      	lsls	r1, r3, #31
    c72a:	d53e      	bpl.n	c7aa <bt_att_recv+0xf6>
    c72c:	4931      	ldr	r1, [pc, #196]	; (c7f4 <bt_att_recv+0x140>)
    c72e:	4b32      	ldr	r3, [pc, #200]	; (c7f8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    c730:	4834      	ldr	r0, [pc, #208]	; (c804 <bt_att_recv+0x150>)
    c732:	1ac9      	subs	r1, r1, r3
    c734:	08c9      	lsrs	r1, r1, #3
    c736:	0189      	lsls	r1, r1, #6
    c738:	f041 0102 	orr.w	r1, r1, #2
    c73c:	e7c8      	b.n	c6d0 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c73e:	3301      	adds	r3, #1
    c740:	2b0e      	cmp	r3, #14
    c742:	d1d9      	bne.n	c6f8 <bt_att_recv+0x44>
    c744:	4b2c      	ldr	r3, [pc, #176]	; (c7f8 <bt_att_recv+0x144>)
    c746:	4a2b      	ldr	r2, [pc, #172]	; (c7f4 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    c748:	482f      	ldr	r0, [pc, #188]	; (c808 <bt_att_recv+0x154>)
    c74a:	1ad2      	subs	r2, r2, r3
    c74c:	08d2      	lsrs	r2, r2, #3
    c74e:	0192      	lsls	r2, r2, #6
    c750:	f042 0202 	orr.w	r2, r2, #2
    c754:	f016 fa63 	bl	22c1e <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    c758:	7829      	ldrb	r1, [r5, #0]
    c75a:	4608      	mov	r0, r1
    c75c:	f019 f801 	bl	25762 <att_op_get_type>
    c760:	2800      	cmp	r0, #0
    c762:	d0b7      	beq.n	c6d4 <bt_att_recv+0x20>
	if (!req) {
    c764:	2900      	cmp	r1, #0
    c766:	d0b5      	beq.n	c6d4 <bt_att_recv+0x20>
    c768:	2306      	movs	r3, #6
    c76a:	2200      	movs	r2, #0
    c76c:	4630      	mov	r0, r6
    c76e:	f019 fa37 	bl	25be0 <send_err_rsp.part.0>
    c772:	e7af      	b.n	c6d4 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    c774:	2f05      	cmp	r7, #5
    c776:	d118      	bne.n	c7aa <bt_att_recv+0xf6>
    c778:	f3bf 8f5b 	dmb	ish
    c77c:	34b8      	adds	r4, #184	; 0xb8
    c77e:	e854 3f00 	ldrex	r3, [r4]
    c782:	f043 0102 	orr.w	r1, r3, #2
    c786:	e844 1c00 	strex	ip, r1, [r4]
    c78a:	f1bc 0f00 	cmp.w	ip, #0
    c78e:	d1f6      	bne.n	c77e <bt_att_recv+0xca>
    c790:	f3bf 8f5b 	dmb	ish
    c794:	079b      	lsls	r3, r3, #30
    c796:	d508      	bpl.n	c7aa <bt_att_recv+0xf6>
    c798:	4916      	ldr	r1, [pc, #88]	; (c7f4 <bt_att_recv+0x140>)
    c79a:	4b17      	ldr	r3, [pc, #92]	; (c7f8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    c79c:	481b      	ldr	r0, [pc, #108]	; (c80c <bt_att_recv+0x158>)
    c79e:	1ac9      	subs	r1, r1, r3
    c7a0:	08c9      	lsrs	r1, r1, #3
    c7a2:	0189      	lsls	r1, r1, #6
    c7a4:	f041 0102 	orr.w	r1, r1, #2
    c7a8:	e792      	b.n	c6d0 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    c7aa:	1813      	adds	r3, r2, r0
    c7ac:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    c7b0:	785a      	ldrb	r2, [r3, #1]
    c7b2:	428a      	cmp	r2, r1
    c7b4:	d90e      	bls.n	c7d4 <bt_att_recv+0x120>
    c7b6:	4a10      	ldr	r2, [pc, #64]	; (c7f8 <bt_att_recv+0x144>)
    c7b8:	4b0e      	ldr	r3, [pc, #56]	; (c7f4 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c7ba:	4815      	ldr	r0, [pc, #84]	; (c810 <bt_att_recv+0x15c>)
    c7bc:	1a9b      	subs	r3, r3, r2
    c7be:	08db      	lsrs	r3, r3, #3
    c7c0:	019b      	lsls	r3, r3, #6
    c7c2:	782a      	ldrb	r2, [r5, #0]
    c7c4:	f043 0301 	orr.w	r3, r3, #1
    c7c8:	f016 fa3d 	bl	22c46 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    c7cc:	2f01      	cmp	r7, #1
    c7ce:	d181      	bne.n	c6d4 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    c7d0:	2304      	movs	r3, #4
    c7d2:	e00a      	b.n	c7ea <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    c7d4:	685b      	ldr	r3, [r3, #4]
    c7d6:	4641      	mov	r1, r8
    c7d8:	4630      	mov	r0, r6
    c7da:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c7dc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    c7de:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c7e0:	f47f af78 	bne.w	c6d4 <bt_att_recv+0x20>
    c7e4:	2800      	cmp	r0, #0
    c7e6:	f43f af75 	beq.w	c6d4 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    c7ea:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c7ec:	2900      	cmp	r1, #0
    c7ee:	f43f af71 	beq.w	c6d4 <bt_att_recv+0x20>
    c7f2:	e7ba      	b.n	c76a <bt_att_recv+0xb6>
    c7f4:	000281bc 	.word	0x000281bc
    c7f8:	000281b4 	.word	0x000281b4
    c7fc:	0002d809 	.word	0x0002d809
    c800:	00028b5c 	.word	0x00028b5c
    c804:	0002d824 	.word	0x0002d824
    c808:	0002d87e 	.word	0x0002d87e
    c80c:	0002d840 	.word	0x0002d840
    c810:	0002d85f 	.word	0x0002d85f

0000c814 <att_write_rsp>:
{
    c814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c818:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c81a:	6803      	ldr	r3, [r0, #0]
    c81c:	460e      	mov	r6, r1
    c81e:	3900      	subs	r1, #0
{
    c820:	b086      	sub	sp, #24
    c822:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c824:	bf18      	it	ne
    c826:	2101      	movne	r1, #1
    c828:	6818      	ldr	r0, [r3, #0]
{
    c82a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c82c:	f019 fe31 	bl	26492 <bt_gatt_change_aware>
    c830:	2800      	cmp	r0, #0
    c832:	d04d      	beq.n	c8d0 <att_write_rsp+0xbc>
	if (!handle) {
    c834:	2f00      	cmp	r7, #0
    c836:	d04d      	beq.n	c8d4 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    c838:	2218      	movs	r2, #24
    c83a:	2100      	movs	r1, #0
    c83c:	4668      	mov	r0, sp
    c83e:	f018 fa32 	bl	24ca6 <memset>
	if (rsp) {
    c842:	f1b8 0f00 	cmp.w	r8, #0
    c846:	d126      	bne.n	c896 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    c848:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c84a:	4a23      	ldr	r2, [pc, #140]	; (c8d8 <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    c84c:	681b      	ldr	r3, [r3, #0]
    c84e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    c850:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c854:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    c858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c85a:	9303      	str	r3, [sp, #12]
	data.len = len;
    c85c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    c860:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c864:	2301      	movs	r3, #1
    c866:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c86a:	4639      	mov	r1, r7
    c86c:	466b      	mov	r3, sp
    c86e:	4638      	mov	r0, r7
	data.req = req;
    c870:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c874:	f018 ffa2 	bl	257bc <bt_gatt_foreach_attr>
	if (data.err) {
    c878:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c87c:	b30c      	cbz	r4, c8c2 <att_write_rsp+0xae>
		if (rsp) {
    c87e:	f1b8 0f00 	cmp.w	r8, #0
    c882:	d019      	beq.n	c8b8 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    c884:	9801      	ldr	r0, [sp, #4]
    c886:	f010 fff5 	bl	1d874 <net_buf_unref>
	if (!req) {
    c88a:	b976      	cbnz	r6, c8aa <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c88c:	2400      	movs	r4, #0
}
    c88e:	4620      	mov	r0, r4
    c890:	b006      	add	sp, #24
    c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c896:	2200      	movs	r2, #0
    c898:	4641      	mov	r1, r8
    c89a:	4628      	mov	r0, r5
    c89c:	f7ff fec6 	bl	c62c <bt_att_chan_create_pdu>
    c8a0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c8a2:	2800      	cmp	r0, #0
    c8a4:	d1d0      	bne.n	c848 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    c8a6:	240e      	movs	r4, #14
    c8a8:	e7f1      	b.n	c88e <att_write_rsp+0x7a>
    c8aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c8ae:	463a      	mov	r2, r7
    c8b0:	4631      	mov	r1, r6
    c8b2:	4628      	mov	r0, r5
    c8b4:	f019 f994 	bl	25be0 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c8b8:	2e18      	cmp	r6, #24
    c8ba:	d1e7      	bne.n	c88c <att_write_rsp+0x78>
    c8bc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c8c0:	e7e5      	b.n	c88e <att_write_rsp+0x7a>
	if (data.buf) {
    c8c2:	9901      	ldr	r1, [sp, #4]
    c8c4:	2900      	cmp	r1, #0
    c8c6:	d0e1      	beq.n	c88c <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c8c8:	4628      	mov	r0, r5
    c8ca:	f7ff fd19 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
    c8ce:	e7de      	b.n	c88e <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c8d0:	2412      	movs	r4, #18
    c8d2:	e7dc      	b.n	c88e <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    c8d4:	2401      	movs	r4, #1
    c8d6:	e7da      	b.n	c88e <att_write_rsp+0x7a>
    c8d8:	0002588b 	.word	0x0002588b

0000c8dc <att_signed_write_cmd>:
{
    c8dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    c8e0:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    c8e2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
    c8e4:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    c8e8:	460c      	mov	r4, r1
    c8ea:	4606      	mov	r6, r0
	return net_buf_simple_push(&buf->b, len);
    c8ec:	2101      	movs	r1, #1
    c8ee:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    c8f0:	881f      	ldrh	r7, [r3, #0]
    c8f2:	f01a fa32 	bl	26d5a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    c8f6:	4628      	mov	r0, r5
    c8f8:	4621      	mov	r1, r4
    c8fa:	f002 fe65 	bl	f5c8 <bt_smp_sign_verify>
	if (err) {
    c8fe:	4605      	mov	r5, r0
    c900:	b168      	cbz	r0, c91e <att_signed_write_cmd+0x42>
    c902:	4b12      	ldr	r3, [pc, #72]	; (c94c <att_signed_write_cmd+0x70>)
    c904:	4912      	ldr	r1, [pc, #72]	; (c950 <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    c906:	4813      	ldr	r0, [pc, #76]	; (c954 <att_signed_write_cmd+0x78>)
    c908:	1ac9      	subs	r1, r1, r3
    c90a:	08c9      	lsrs	r1, r1, #3
    c90c:	0189      	lsls	r1, r1, #6
    c90e:	f041 0101 	orr.w	r1, r1, #1
    c912:	f016 f977 	bl	22c04 <log_0>
		return 0;
    c916:	2000      	movs	r0, #0
}
    c918:	b004      	add	sp, #16
    c91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull(&buf->b, len);
    c91e:	2101      	movs	r1, #1
    c920:	4640      	mov	r0, r8
    c922:	f01a fa22 	bl	26d6a <net_buf_simple_pull>
    c926:	2102      	movs	r1, #2
    c928:	4640      	mov	r0, r8
    c92a:	f01a fa1e 	bl	26d6a <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    c92e:	89a3      	ldrh	r3, [r4, #12]
    c930:	3b0c      	subs	r3, #12
    c932:	b29b      	uxth	r3, r3
    c934:	9302      	str	r3, [sp, #8]
    c936:	68a3      	ldr	r3, [r4, #8]
    c938:	462a      	mov	r2, r5
    c93a:	e9cd 5300 	strd	r5, r3, [sp]
    c93e:	4629      	mov	r1, r5
    c940:	463b      	mov	r3, r7
    c942:	4630      	mov	r0, r6
    c944:	f7ff ff66 	bl	c814 <att_write_rsp>
    c948:	e7e6      	b.n	c918 <att_signed_write_cmd+0x3c>
    c94a:	bf00      	nop
    c94c:	000281b4 	.word	0x000281b4
    c950:	000281bc 	.word	0x000281bc
    c954:	0002d898 	.word	0x0002d898

0000c958 <bt_att_create_pdu>:
{
    c958:	b570      	push	{r4, r5, r6, lr}
    c95a:	460e      	mov	r6, r1
    c95c:	4615      	mov	r5, r2
	att = att_get(conn);
    c95e:	f7ff fb55 	bl	c00c <att_get>
	if (!att) {
    c962:	b1c0      	cbz	r0, c996 <bt_att_create_pdu+0x3e>
	return list->head;
    c964:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    c966:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c968:	b15b      	cbz	r3, c982 <bt_att_create_pdu+0x2a>
    c96a:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
    c96e:	d008      	beq.n	c982 <bt_att_create_pdu+0x2a>
	return node->next;
    c970:	681b      	ldr	r3, [r3, #0]
    c972:	b10b      	cbz	r3, c978 <bt_att_create_pdu+0x20>
    c974:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c978:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c97c:	4291      	cmp	r1, r2
    c97e:	d90c      	bls.n	c99a <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c980:	b98b      	cbnz	r3, c9a6 <bt_att_create_pdu+0x4e>
    c982:	4a0e      	ldr	r2, [pc, #56]	; (c9bc <bt_att_create_pdu+0x64>)
    c984:	4b0e      	ldr	r3, [pc, #56]	; (c9c0 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c986:	480f      	ldr	r0, [pc, #60]	; (c9c4 <bt_att_create_pdu+0x6c>)
    c988:	1ad2      	subs	r2, r2, r3
    c98a:	08d2      	lsrs	r2, r2, #3
    c98c:	0192      	lsls	r2, r2, #6
    c98e:	f042 0202 	orr.w	r2, r2, #2
    c992:	f016 f944 	bl	22c1e <log_1>
}
    c996:	2000      	movs	r0, #0
    c998:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c99a:	462a      	mov	r2, r5
    c99c:	4631      	mov	r1, r6
}
    c99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c9a2:	f7ff be43 	b.w	c62c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c9a6:	f513 748a 	adds.w	r4, r3, #276	; 0x114
    c9aa:	d004      	beq.n	c9b6 <bt_att_create_pdu+0x5e>
	return node->next;
    c9ac:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c9b0:	b10c      	cbz	r4, c9b6 <bt_att_create_pdu+0x5e>
    c9b2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
{
    c9b6:	4618      	mov	r0, r3
    c9b8:	4623      	mov	r3, r4
    c9ba:	e7dd      	b.n	c978 <bt_att_create_pdu+0x20>
    c9bc:	000281bc 	.word	0x000281bc
    c9c0:	000281b4 	.word	0x000281b4
    c9c4:	0002d8ad 	.word	0x0002d8ad

0000c9c8 <att_prepare_write_req>:
{
    c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9cc:	460c      	mov	r4, r1
    c9ce:	b087      	sub	sp, #28
    c9d0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c9d2:	2104      	movs	r1, #4
    c9d4:	f104 0008 	add.w	r0, r4, #8
    c9d8:	f01a f9cf 	bl	26d7a <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    c9dc:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    c9e0:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    c9e4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    c9e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
    c9ec:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    c9ee:	2101      	movs	r1, #1
    c9f0:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    c9f2:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    c9f6:	f019 fd4c 	bl	26492 <bt_gatt_change_aware>
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d04a      	beq.n	ca94 <att_prepare_write_req+0xcc>
	if (!handle) {
    c9fe:	2e00      	cmp	r6, #0
    ca00:	d04a      	beq.n	ca98 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    ca02:	2214      	movs	r2, #20
    ca04:	2100      	movs	r1, #0
    ca06:	a801      	add	r0, sp, #4
    ca08:	f018 f94d 	bl	24ca6 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ca0c:	2301      	movs	r3, #1
    ca0e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca12:	4a23      	ldr	r2, [pc, #140]	; (caa0 <att_prepare_write_req+0xd8>)
	data.conn = conn;
    ca14:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    ca18:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca1a:	ab01      	add	r3, sp, #4
    ca1c:	4631      	mov	r1, r6
    ca1e:	4630      	mov	r0, r6
	data.offset = offset;
    ca20:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    ca24:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    ca28:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca2c:	f018 fec6 	bl	257bc <bt_gatt_foreach_attr>
	if (data.err) {
    ca30:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ca34:	b154      	cbz	r4, ca4c <att_prepare_write_req+0x84>
	if (!req) {
    ca36:	4623      	mov	r3, r4
    ca38:	4632      	mov	r2, r6
    ca3a:	2116      	movs	r1, #22
    ca3c:	4628      	mov	r0, r5
    ca3e:	f019 f8cf 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    ca42:	2400      	movs	r4, #0
}
    ca44:	4620      	mov	r0, r4
    ca46:	b007      	add	sp, #28
    ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    ca4c:	6828      	ldr	r0, [r5, #0]
    ca4e:	9902      	ldr	r1, [sp, #8]
    ca50:	3024      	adds	r0, #36	; 0x24
    ca52:	f01a f938 	bl	26cc6 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    ca56:	4622      	mov	r2, r4
    ca58:	2117      	movs	r1, #23
    ca5a:	4658      	mov	r0, fp
    ca5c:	f7ff ff7c 	bl	c958 <bt_att_create_pdu>
    ca60:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ca62:	b1d8      	cbz	r0, ca9c <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    ca64:	2104      	movs	r1, #4
    ca66:	3008      	adds	r0, #8
    ca68:	f01a f960 	bl	26d2c <net_buf_simple_add>
    ca6c:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    ca6e:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    ca72:	f8a0 9002 	strh.w	r9, [r0, #2]
    ca76:	9802      	ldr	r0, [sp, #8]
    ca78:	4639      	mov	r1, r7
    ca7a:	3008      	adds	r0, #8
    ca7c:	f01a f956 	bl	26d2c <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    ca80:	4641      	mov	r1, r8
    ca82:	463a      	mov	r2, r7
    ca84:	1d30      	adds	r0, r6, #4
    ca86:	f018 f8e3 	bl	24c50 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ca8a:	9902      	ldr	r1, [sp, #8]
    ca8c:	4628      	mov	r0, r5
    ca8e:	f7ff fc37 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    ca92:	e7d7      	b.n	ca44 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ca94:	2412      	movs	r4, #18
    ca96:	e7d5      	b.n	ca44 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    ca98:	2401      	movs	r4, #1
    ca9a:	e7d3      	b.n	ca44 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    ca9c:	240e      	movs	r4, #14
    ca9e:	e7d1      	b.n	ca44 <att_prepare_write_req+0x7c>
    caa0:	0000c479 	.word	0x0000c479

0000caa4 <att_read_group_req>:
{
    caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    caa8:	898c      	ldrh	r4, [r1, #12]
    caaa:	3c04      	subs	r4, #4
    caac:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    caae:	2c02      	cmp	r4, #2
{
    cab0:	4605      	mov	r5, r0
    cab2:	b08c      	sub	sp, #48	; 0x30
    cab4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cab6:	d001      	beq.n	cabc <att_read_group_req+0x18>
    cab8:	2c10      	cmp	r4, #16
    caba:	d16e      	bne.n	cb9a <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    cabc:	2104      	movs	r1, #4
    cabe:	3008      	adds	r0, #8
    cac0:	f01a f95b 	bl	26d7a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cac4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    cac8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    caca:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cacc:	1d01      	adds	r1, r0, #4
    cace:	4622      	mov	r2, r4
    cad0:	4640      	mov	r0, r8
    cad2:	f018 fa0b 	bl	24eec <bt_uuid_create>
    cad6:	2800      	cmp	r0, #0
    cad8:	d061      	beq.n	cb9e <att_read_group_req+0xfa>
	if (!start || !end) {
    cada:	2e00      	cmp	r6, #0
    cadc:	d03a      	beq.n	cb54 <att_read_group_req+0xb0>
    cade:	2400      	movs	r4, #0
    cae0:	2f00      	cmp	r7, #0
    cae2:	d036      	beq.n	cb52 <att_read_group_req+0xae>
	if (start > end) {
    cae4:	42be      	cmp	r6, r7
    cae6:	d835      	bhi.n	cb54 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cae8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    caec:	a901      	add	r1, sp, #4
    caee:	4640      	mov	r0, r8
    caf0:	f88d 4004 	strb.w	r4, [sp, #4]
    caf4:	f8ad 3006 	strh.w	r3, [sp, #6]
    caf8:	f018 f9ca 	bl	24e90 <bt_uuid_cmp>
    cafc:	2800      	cmp	r0, #0
    cafe:	d134      	bne.n	cb6a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    cb00:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cb02:	2214      	movs	r2, #20
    cb04:	2100      	movs	r1, #0
    cb06:	a807      	add	r0, sp, #28
    cb08:	f018 f8cd 	bl	24ca6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    cb0c:	2201      	movs	r2, #1
    cb0e:	2111      	movs	r1, #17
    cb10:	4620      	mov	r0, r4
    cb12:	f7ff ff21 	bl	c958 <bt_att_create_pdu>
    cb16:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    cb18:	2800      	cmp	r0, #0
    cb1a:	d040      	beq.n	cb9e <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    cb1c:	2101      	movs	r1, #1
    cb1e:	3008      	adds	r0, #8
	data.uuid = uuid;
    cb20:	e9cd 5807 	strd	r5, r8, [sp, #28]
    cb24:	f01a f902 	bl	26d2c <net_buf_simple_add>
	data.rsp->len = 0U;
    cb28:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb2c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb2e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    cb30:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb34:	4a1b      	ldr	r2, [pc, #108]	; (cba4 <att_read_group_req+0x100>)
	data.group = NULL;
    cb36:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb3a:	4639      	mov	r1, r7
    cb3c:	4630      	mov	r0, r6
    cb3e:	f018 fe3d 	bl	257bc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    cb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb44:	781c      	ldrb	r4, [r3, #0]
    cb46:	bb1c      	cbnz	r4, cb90 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    cb48:	9809      	ldr	r0, [sp, #36]	; 0x24
    cb4a:	f010 fe93 	bl	1d874 <net_buf_unref>
	if (!req) {
    cb4e:	230a      	movs	r3, #10
    cb50:	e018      	b.n	cb84 <att_read_group_req+0xe0>
			*err = 0U;
    cb52:	463e      	mov	r6, r7
	if (!req) {
    cb54:	2301      	movs	r3, #1
    cb56:	4632      	mov	r2, r6
    cb58:	2110      	movs	r1, #16
    cb5a:	4628      	mov	r0, r5
    cb5c:	f019 f840 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    cb60:	2400      	movs	r4, #0
}
    cb62:	4620      	mov	r0, r4
    cb64:	b00c      	add	sp, #48	; 0x30
    cb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    cb6a:	f642 0301 	movw	r3, #10241	; 0x2801
    cb6e:	a907      	add	r1, sp, #28
    cb70:	4640      	mov	r0, r8
    cb72:	f88d 401c 	strb.w	r4, [sp, #28]
    cb76:	f8ad 301e 	strh.w	r3, [sp, #30]
    cb7a:	f018 f989 	bl	24e90 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cb7e:	2800      	cmp	r0, #0
    cb80:	d0be      	beq.n	cb00 <att_read_group_req+0x5c>
	if (!req) {
    cb82:	2310      	movs	r3, #16
    cb84:	4632      	mov	r2, r6
    cb86:	2110      	movs	r1, #16
    cb88:	4628      	mov	r0, r5
    cb8a:	f019 f829 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    cb8e:	e7e8      	b.n	cb62 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cb90:	9909      	ldr	r1, [sp, #36]	; 0x24
    cb92:	4628      	mov	r0, r5
    cb94:	f7ff fbb4 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cb98:	e7e2      	b.n	cb60 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    cb9a:	2404      	movs	r4, #4
    cb9c:	e7e1      	b.n	cb62 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    cb9e:	240e      	movs	r4, #14
    cba0:	e7df      	b.n	cb62 <att_read_group_req+0xbe>
    cba2:	bf00      	nop
    cba4:	0000c325 	.word	0x0000c325

0000cba8 <att_read_mult_req>:
{
    cba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cbac:	6886      	ldr	r6, [r0, #8]
{
    cbae:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    cbb0:	2210      	movs	r2, #16
{
    cbb2:	4604      	mov	r4, r0
    cbb4:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    cbb6:	4668      	mov	r0, sp
    cbb8:	2100      	movs	r1, #0
    cbba:	f018 f874 	bl	24ca6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    cbbe:	2200      	movs	r2, #0
    cbc0:	210f      	movs	r1, #15
    cbc2:	4630      	mov	r0, r6
    cbc4:	f7ff fec8 	bl	c958 <bt_att_create_pdu>
    cbc8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    cbca:	b358      	cbz	r0, cc24 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cbcc:	f8df 9058 	ldr.w	r9, [pc, #88]	; cc28 <att_read_mult_req+0x80>
	data.chan = chan;
    cbd0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    cbd2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cbd6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    cbda:	89ab      	ldrh	r3, [r5, #12]
    cbdc:	2b01      	cmp	r3, #1
    cbde:	d804      	bhi.n	cbea <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cbe0:	9902      	ldr	r1, [sp, #8]
    cbe2:	4620      	mov	r0, r4
    cbe4:	f7ff fb8c 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
    cbe8:	e018      	b.n	cc1c <att_read_mult_req+0x74>
    cbea:	4638      	mov	r0, r7
    cbec:	f01a f8cd 	bl	26d8a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cbf0:	466b      	mov	r3, sp
    cbf2:	464a      	mov	r2, r9
    cbf4:	4601      	mov	r1, r0
    cbf6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cbf8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cbfc:	f018 fdde 	bl	257bc <bt_gatt_foreach_attr>
		if (data.err) {
    cc00:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cc04:	2b00      	cmp	r3, #0
    cc06:	d0e8      	beq.n	cbda <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    cc08:	9802      	ldr	r0, [sp, #8]
    cc0a:	f010 fe33 	bl	1d874 <net_buf_unref>
	if (!req) {
    cc0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cc12:	4632      	mov	r2, r6
    cc14:	210e      	movs	r1, #14
    cc16:	4620      	mov	r0, r4
    cc18:	f018 ffe2 	bl	25be0 <send_err_rsp.part.0>
	return 0;
    cc1c:	2000      	movs	r0, #0
}
    cc1e:	b005      	add	sp, #20
    cc20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    cc24:	200e      	movs	r0, #14
    cc26:	e7fa      	b.n	cc1e <att_read_mult_req+0x76>
    cc28:	00025acb 	.word	0x00025acb

0000cc2c <att_read_rsp>:
{
    cc2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cc30:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    cc34:	4605      	mov	r5, r0
    cc36:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    cc38:	4640      	mov	r0, r8
    cc3a:	2101      	movs	r1, #1
{
    cc3c:	4614      	mov	r4, r2
    cc3e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    cc40:	f019 fc27 	bl	26492 <bt_gatt_change_aware>
    cc44:	b388      	cbz	r0, ccaa <att_read_rsp+0x7e>
	if (!handle) {
    cc46:	b396      	cbz	r6, ccae <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    cc48:	2210      	movs	r2, #16
    cc4a:	2100      	movs	r1, #0
    cc4c:	4668      	mov	r0, sp
    cc4e:	f018 f82a 	bl	24ca6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    cc52:	2200      	movs	r2, #0
    cc54:	4621      	mov	r1, r4
    cc56:	4640      	mov	r0, r8
    cc58:	f7ff fe7e 	bl	c958 <bt_att_create_pdu>
    cc5c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    cc5e:	b340      	cbz	r0, ccb2 <att_read_rsp+0x86>
	data.offset = offset;
    cc60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cc64:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc68:	2301      	movs	r3, #1
    cc6a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc6e:	4a12      	ldr	r2, [pc, #72]	; (ccb8 <att_read_rsp+0x8c>)
	data.chan = chan;
    cc70:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc72:	466b      	mov	r3, sp
    cc74:	4631      	mov	r1, r6
    cc76:	4630      	mov	r0, r6
    cc78:	f018 fda0 	bl	257bc <bt_gatt_foreach_attr>
	if (data.err) {
    cc7c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    cc80:	b174      	cbz	r4, cca0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    cc82:	9802      	ldr	r0, [sp, #8]
    cc84:	f010 fdf6 	bl	1d874 <net_buf_unref>
	if (!req) {
    cc88:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cc8c:	4632      	mov	r2, r6
    cc8e:	4639      	mov	r1, r7
    cc90:	4628      	mov	r0, r5
    cc92:	f018 ffa5 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    cc96:	2400      	movs	r4, #0
}
    cc98:	4620      	mov	r0, r4
    cc9a:	b004      	add	sp, #16
    cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cca0:	9902      	ldr	r1, [sp, #8]
    cca2:	4628      	mov	r0, r5
    cca4:	f7ff fb2c 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cca8:	e7f6      	b.n	cc98 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ccaa:	2412      	movs	r4, #18
    ccac:	e7f4      	b.n	cc98 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    ccae:	2401      	movs	r4, #1
    ccb0:	e7f2      	b.n	cc98 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    ccb2:	240e      	movs	r4, #14
    ccb4:	e7f0      	b.n	cc98 <att_read_rsp+0x6c>
    ccb6:	bf00      	nop
    ccb8:	00025acb 	.word	0x00025acb

0000ccbc <att_read_type_req>:
{
    ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    ccc0:	898c      	ldrh	r4, [r1, #12]
    ccc2:	3c04      	subs	r4, #4
    ccc4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    ccc6:	2c02      	cmp	r4, #2
{
    ccc8:	4605      	mov	r5, r0
    ccca:	b08c      	sub	sp, #48	; 0x30
    cccc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    ccce:	d001      	beq.n	ccd4 <att_read_type_req+0x18>
    ccd0:	2c10      	cmp	r4, #16
    ccd2:	d14f      	bne.n	cd74 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    ccd4:	2104      	movs	r1, #4
    ccd6:	3008      	adds	r0, #8
    ccd8:	f01a f84f 	bl	26d7a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ccdc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    cce0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cce2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cce4:	1d01      	adds	r1, r0, #4
    cce6:	4622      	mov	r2, r4
    cce8:	4640      	mov	r0, r8
    ccea:	f018 f8ff 	bl	24eec <bt_uuid_create>
    ccee:	b188      	cbz	r0, cd14 <att_read_type_req+0x58>
	if (!start || !end) {
    ccf0:	b19e      	cbz	r6, cd1a <att_read_type_req+0x5e>
    ccf2:	b18f      	cbz	r7, cd18 <att_read_type_req+0x5c>
	if (start > end) {
    ccf4:	42b7      	cmp	r7, r6
    ccf6:	d310      	bcc.n	cd1a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    ccf8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    ccfa:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    ccfc:	2100      	movs	r1, #0
    ccfe:	eb0d 0002 	add.w	r0, sp, r2
    cd02:	f017 ffd0 	bl	24ca6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    cd06:	2201      	movs	r2, #1
    cd08:	2109      	movs	r1, #9
    cd0a:	4620      	mov	r0, r4
    cd0c:	f7ff fe24 	bl	c958 <bt_att_create_pdu>
    cd10:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    cd12:	b968      	cbnz	r0, cd30 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    cd14:	240e      	movs	r4, #14
    cd16:	e007      	b.n	cd28 <att_read_type_req+0x6c>
			*err = 0U;
    cd18:	463e      	mov	r6, r7
	if (!req) {
    cd1a:	2301      	movs	r3, #1
    cd1c:	4632      	mov	r2, r6
    cd1e:	2108      	movs	r1, #8
    cd20:	4628      	mov	r0, r5
    cd22:	f018 ff5d 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    cd26:	2400      	movs	r4, #0
}
    cd28:	4620      	mov	r0, r4
    cd2a:	b00c      	add	sp, #48	; 0x30
    cd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    cd30:	2101      	movs	r1, #1
    cd32:	3008      	adds	r0, #8
	data.uuid = uuid;
    cd34:	e9cd 5806 	strd	r5, r8, [sp, #24]
    cd38:	f019 fff8 	bl	26d2c <net_buf_simple_add>
	data.rsp->len = 0U;
    cd3c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cd40:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cd42:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd44:	4a0c      	ldr	r2, [pc, #48]	; (cd78 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    cd46:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd4a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cd4c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd50:	4630      	mov	r0, r6
    cd52:	ab06      	add	r3, sp, #24
    cd54:	f018 fd32 	bl	257bc <bt_gatt_foreach_attr>
	if (data.err) {
    cd58:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    cd5c:	b12c      	cbz	r4, cd6a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    cd5e:	9808      	ldr	r0, [sp, #32]
    cd60:	f010 fd88 	bl	1d874 <net_buf_unref>
	if (!req) {
    cd64:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    cd68:	e7d8      	b.n	cd1c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cd6a:	9908      	ldr	r1, [sp, #32]
    cd6c:	4628      	mov	r0, r5
    cd6e:	f7ff fac7 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cd72:	e7d9      	b.n	cd28 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    cd74:	2404      	movs	r4, #4
    cd76:	e7d7      	b.n	cd28 <att_read_type_req+0x6c>
    cd78:	0000c3d1 	.word	0x0000c3d1

0000cd7c <att_find_type_req>:
{
    cd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd80:	4688      	mov	r8, r1
    cd82:	b086      	sub	sp, #24
    cd84:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    cd86:	2106      	movs	r1, #6
    cd88:	f108 0008 	add.w	r0, r8, #8
    cd8c:	f019 fff5 	bl	26d7a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    cd90:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    cd92:	b317      	cbz	r7, cdda <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    cd94:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    cd98:	f1b9 0f00 	cmp.w	r9, #0
    cd9c:	d01c      	beq.n	cdd8 <att_find_type_req+0x5c>
	if (start > end) {
    cd9e:	454f      	cmp	r7, r9
    cda0:	d81b      	bhi.n	cdda <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    cda2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cda4:	f8ad 3002 	strh.w	r3, [sp, #2]
    cda8:	2400      	movs	r4, #0
    cdaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cdae:	a901      	add	r1, sp, #4
    cdb0:	4668      	mov	r0, sp
	value = buf->data;
    cdb2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cdb6:	f88d 4000 	strb.w	r4, [sp]
    cdba:	f88d 4004 	strb.w	r4, [sp, #4]
    cdbe:	f8ad 3006 	strh.w	r3, [sp, #6]
    cdc2:	f018 f865 	bl	24e90 <bt_uuid_cmp>
    cdc6:	4606      	mov	r6, r0
    cdc8:	b190      	cbz	r0, cdf0 <att_find_type_req+0x74>
	if (!req) {
    cdca:	230a      	movs	r3, #10
    cdcc:	463a      	mov	r2, r7
    cdce:	2106      	movs	r1, #6
    cdd0:	4628      	mov	r0, r5
    cdd2:	f018 ff05 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    cdd6:	e007      	b.n	cde8 <att_find_type_req+0x6c>
			*err = 0U;
    cdd8:	464f      	mov	r7, r9
	if (!req) {
    cdda:	2301      	movs	r3, #1
    cddc:	463a      	mov	r2, r7
    cdde:	2106      	movs	r1, #6
    cde0:	4628      	mov	r0, r5
    cde2:	f018 fefd 	bl	25be0 <send_err_rsp.part.0>
		return 0;
    cde6:	2400      	movs	r4, #0
}
    cde8:	4620      	mov	r0, r4
    cdea:	b006      	add	sp, #24
    cdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    cdf0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    cdf4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cdf8:	4601      	mov	r1, r0
    cdfa:	2214      	movs	r2, #20
    cdfc:	a801      	add	r0, sp, #4
    cdfe:	f017 ff52 	bl	24ca6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    ce02:	4632      	mov	r2, r6
    ce04:	2107      	movs	r1, #7
    ce06:	4640      	mov	r0, r8
    ce08:	f7ff fda6 	bl	c958 <bt_att_create_pdu>
    ce0c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ce0e:	b1d8      	cbz	r0, ce48 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ce10:	230a      	movs	r3, #10
    ce12:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce16:	4a0d      	ldr	r2, [pc, #52]	; (ce4c <att_find_type_req+0xd0>)
	data.value_len = value_len;
    ce18:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce1c:	ab01      	add	r3, sp, #4
    ce1e:	4649      	mov	r1, r9
    ce20:	4638      	mov	r0, r7
	data.value = value;
    ce22:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    ce26:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce28:	f018 fcc8 	bl	257bc <bt_gatt_foreach_attr>
	if (data.err) {
    ce2c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    ce30:	b12c      	cbz	r4, ce3e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    ce32:	9802      	ldr	r0, [sp, #8]
    ce34:	f010 fd1e 	bl	1d874 <net_buf_unref>
	if (!req) {
    ce38:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ce3c:	e7ce      	b.n	cddc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ce3e:	9902      	ldr	r1, [sp, #8]
    ce40:	4628      	mov	r0, r5
    ce42:	f7ff fa5d 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    ce46:	e7cf      	b.n	cde8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    ce48:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ce4a:	e7cd      	b.n	cde8 <att_find_type_req+0x6c>
    ce4c:	0000c0a5 	.word	0x0000c0a5

0000ce50 <att_find_info_req>:
{
    ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    ce52:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    ce54:	881e      	ldrh	r6, [r3, #0]
{
    ce56:	b085      	sub	sp, #20
    ce58:	4605      	mov	r5, r0
	if (!start || !end) {
    ce5a:	b19e      	cbz	r6, ce84 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    ce5c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    ce5e:	b184      	cbz	r4, ce82 <att_find_info_req+0x32>
	if (start > end) {
    ce60:	42b4      	cmp	r4, r6
    ce62:	d30f      	bcc.n	ce84 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    ce64:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    ce66:	2210      	movs	r2, #16
    ce68:	2100      	movs	r1, #0
    ce6a:	4668      	mov	r0, sp
    ce6c:	f017 ff1b 	bl	24ca6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    ce70:	2200      	movs	r2, #0
    ce72:	2105      	movs	r1, #5
    ce74:	4638      	mov	r0, r7
    ce76:	f7ff fd6f 	bl	c958 <bt_att_create_pdu>
    ce7a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    ce7c:	b958      	cbnz	r0, ce96 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    ce7e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    ce80:	e007      	b.n	ce92 <att_find_info_req+0x42>
			*err = 0U;
    ce82:	4626      	mov	r6, r4
	if (!req) {
    ce84:	2301      	movs	r3, #1
    ce86:	4632      	mov	r2, r6
    ce88:	2104      	movs	r1, #4
    ce8a:	4628      	mov	r0, r5
    ce8c:	f018 fea8 	bl	25be0 <send_err_rsp.part.0>
	return 0;
    ce90:	2000      	movs	r0, #0
}
    ce92:	b005      	add	sp, #20
    ce94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    ce96:	4621      	mov	r1, r4
    ce98:	4a08      	ldr	r2, [pc, #32]	; (cebc <att_find_info_req+0x6c>)
	data.chan = chan;
    ce9a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    ce9c:	466b      	mov	r3, sp
    ce9e:	4630      	mov	r0, r6
    cea0:	f018 fc8c 	bl	257bc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    cea4:	9c02      	ldr	r4, [sp, #8]
    cea6:	b924      	cbnz	r4, ceb2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    cea8:	9801      	ldr	r0, [sp, #4]
    ceaa:	f010 fce3 	bl	1d874 <net_buf_unref>
	if (!req) {
    ceae:	230a      	movs	r3, #10
    ceb0:	e7e9      	b.n	ce86 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ceb2:	9901      	ldr	r1, [sp, #4]
    ceb4:	4628      	mov	r0, r5
    ceb6:	f7ff fa23 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
    ceba:	e7e9      	b.n	ce90 <att_find_info_req+0x40>
    cebc:	000257d3 	.word	0x000257d3

0000cec0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    cec0:	b513      	push	{r0, r1, r4, lr}
    cec2:	4602      	mov	r2, r0
    cec4:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cec6:	4808      	ldr	r0, [pc, #32]	; (cee8 <bt_att_req_alloc+0x28>)
    cec8:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    ceca:	2400      	movs	r4, #0
    cecc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cece:	f013 f9d5 	bl	2027c <k_mem_slab_alloc>
    ced2:	4601      	mov	r1, r0
    ced4:	b930      	cbnz	r0, cee4 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    ced6:	9801      	ldr	r0, [sp, #4]
    ced8:	221c      	movs	r2, #28
    ceda:	f017 fee4 	bl	24ca6 <memset>

	return req;
    cede:	9801      	ldr	r0, [sp, #4]
}
    cee0:	b002      	add	sp, #8
    cee2:	bd10      	pop	{r4, pc}
		return NULL;
    cee4:	4620      	mov	r0, r4
    cee6:	e7fb      	b.n	cee0 <bt_att_req_alloc+0x20>
    cee8:	2000a078 	.word	0x2000a078

0000ceec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    ceec:	b507      	push	{r0, r1, r2, lr}
    ceee:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    cef0:	6880      	ldr	r0, [r0, #8]
    cef2:	b120      	cbz	r0, cefe <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    cef4:	f010 fcbe 	bl	1d874 <net_buf_unref>
		req->buf = NULL;
    cef8:	9b01      	ldr	r3, [sp, #4]
    cefa:	2200      	movs	r2, #0
    cefc:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    cefe:	4803      	ldr	r0, [pc, #12]	; (cf0c <bt_att_req_free+0x20>)
    cf00:	a901      	add	r1, sp, #4
    cf02:	f013 f9eb 	bl	202dc <k_mem_slab_free>
}
    cf06:	b003      	add	sp, #12
    cf08:	f85d fb04 	ldr.w	pc, [sp], #4
    cf0c:	2000a078 	.word	0x2000a078

0000cf10 <att_handle_rsp>:
{
    cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf14:	4605      	mov	r5, r0
    cf16:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    cf18:	30e0      	adds	r0, #224	; 0xe0
{
    cf1a:	4689      	mov	r9, r1
    cf1c:	4692      	mov	sl, r2
    cf1e:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    cf20:	f01a fdbf 	bl	27aa2 <k_delayed_work_cancel>
	if (!chan->req) {
    cf24:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    cf28:	bb5c      	cbnz	r4, cf82 <att_handle_rsp+0x72>
    cf2a:	4b2e      	ldr	r3, [pc, #184]	; (cfe4 <att_handle_rsp+0xd4>)
    cf2c:	492e      	ldr	r1, [pc, #184]	; (cfe8 <att_handle_rsp+0xd8>)
		BT_WARN("No pending ATT request");
    cf2e:	482f      	ldr	r0, [pc, #188]	; (cfec <att_handle_rsp+0xdc>)
    cf30:	1ac9      	subs	r1, r1, r3
    cf32:	08c9      	lsrs	r1, r1, #3
    cf34:	0189      	lsls	r1, r1, #6
    cf36:	f041 0102 	orr.w	r1, r1, #2
    cf3a:	f015 fe63 	bl	22c04 <log_0>
	bt_att_func_t func = NULL;
    cf3e:	4627      	mov	r7, r4
	att_process(chan->att);
    cf40:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    cf44:	f10b 0004 	add.w	r0, fp, #4
    cf48:	f018 fbe3 	bl	25712 <sys_slist_get>
	if (!node) {
    cf4c:	4606      	mov	r6, r0
    cf4e:	b380      	cbz	r0, cfb2 <att_handle_rsp+0xa2>
	return list->head;
    cf50:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cf54:	b152      	cbz	r2, cf6c <att_handle_rsp+0x5c>
    cf56:	f5b2 708a 	subs.w	r0, r2, #276	; 0x114
    cf5a:	d007      	beq.n	cf6c <att_handle_rsp+0x5c>
	return node->next;
    cf5c:	6814      	ldr	r4, [r2, #0]
    cf5e:	b10c      	cbz	r4, cf64 <att_handle_rsp+0x54>
    cf60:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		if (!chan->req) {
    cf64:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    cf68:	b1f2      	cbz	r2, cfa8 <att_handle_rsp+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cf6a:	bb7c      	cbnz	r4, cfcc <att_handle_rsp+0xbc>
	parent->next = child;
    cf6c:	f8db 2004 	ldr.w	r2, [fp, #4]
    cf70:	6032      	str	r2, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    cf72:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    cf76:	f8cb 6004 	str.w	r6, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    cf7a:	b9d2      	cbnz	r2, cfb2 <att_handle_rsp+0xa2>
	list->tail = node;
    cf7c:	f8cb 6008 	str.w	r6, [fp, #8]
}
    cf80:	e017      	b.n	cfb2 <att_handle_rsp+0xa2>
	if (chan->req == &cancel) {
    cf82:	4b1b      	ldr	r3, [pc, #108]	; (cff0 <att_handle_rsp+0xe0>)
    cf84:	429c      	cmp	r4, r3
    cf86:	f04f 0600 	mov.w	r6, #0
    cf8a:	d103      	bne.n	cf94 <att_handle_rsp+0x84>
		chan->req = NULL;
    cf8c:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
	bt_att_func_t func = NULL;
    cf90:	4637      	mov	r7, r6
		goto process;
    cf92:	e7d5      	b.n	cf40 <att_handle_rsp+0x30>
	func = chan->req->func;
    cf94:	6867      	ldr	r7, [r4, #4]
	params = chan->req->user_data;
    cf96:	69a3      	ldr	r3, [r4, #24]
	chan->req->func = NULL;
    cf98:	6066      	str	r6, [r4, #4]
	bt_att_req_free(chan->req);
    cf9a:	4620      	mov	r0, r4
	params = chan->req->user_data;
    cf9c:	9303      	str	r3, [sp, #12]
	bt_att_req_free(chan->req);
    cf9e:	f7ff ffa5 	bl	ceec <bt_att_req_free>
	chan->req = NULL;
    cfa2:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    cfa6:	e7cb      	b.n	cf40 <att_handle_rsp+0x30>
	return chan_req_send(chan, req);
    cfa8:	4631      	mov	r1, r6
    cfaa:	f018 fc9c 	bl	258e6 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    cfae:	2800      	cmp	r0, #0
    cfb0:	dbdb      	blt.n	cf6a <att_handle_rsp+0x5a>
	if (func) {
    cfb2:	b13f      	cbz	r7, cfc4 <att_handle_rsp+0xb4>
		func(chan->att->conn, err, pdu, len, params);
    cfb4:	9b03      	ldr	r3, [sp, #12]
    cfb6:	6828      	ldr	r0, [r5, #0]
    cfb8:	9300      	str	r3, [sp, #0]
    cfba:	6800      	ldr	r0, [r0, #0]
    cfbc:	4653      	mov	r3, sl
    cfbe:	464a      	mov	r2, r9
    cfc0:	4641      	mov	r1, r8
    cfc2:	47b8      	blx	r7
}
    cfc4:	2000      	movs	r0, #0
    cfc6:	b005      	add	sp, #20
    cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    cfcc:	f514 728a 	adds.w	r2, r4, #276	; 0x114
    cfd0:	d004      	beq.n	cfdc <att_handle_rsp+0xcc>
	return node->next;
    cfd2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cfd6:	b10a      	cbz	r2, cfdc <att_handle_rsp+0xcc>
    cfd8:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
	bt_att_func_t func = NULL;
    cfdc:	4620      	mov	r0, r4
    cfde:	4614      	mov	r4, r2
    cfe0:	e7c0      	b.n	cf64 <att_handle_rsp+0x54>
    cfe2:	bf00      	nop
    cfe4:	000281b4 	.word	0x000281b4
    cfe8:	000281bc 	.word	0x000281bc
    cfec:	0002d8c8 	.word	0x0002d8c8
    cff0:	2000dbcc 	.word	0x2000dbcc

0000cff4 <bt_att_disconnected>:
{
    cff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    cff6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    cffa:	b085      	sub	sp, #20
    cffc:	4604      	mov	r4, r0
	if (!att_chan->att) {
    cffe:	2d00      	cmp	r5, #0
    d000:	d056      	beq.n	d0b0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    d002:	f500 7186 	add.w	r1, r0, #268	; 0x10c
    d006:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    d00a:	f018 fc9f 	bl	2594c <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    d00e:	f1a4 0608 	sub.w	r6, r4, #8
    d012:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    d016:	2200      	movs	r2, #0
    d018:	2300      	movs	r3, #0
    d01a:	4638      	mov	r0, r7
    d01c:	f019 fe35 	bl	26c8a <net_buf_get>
    d020:	4602      	mov	r2, r0
    d022:	bb50      	cbnz	r0, d07a <bt_att_disconnected+0x86>
	if (chan->req) {
    d024:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    d028:	b123      	cbz	r3, d034 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    d02a:	4601      	mov	r1, r0
    d02c:	230e      	movs	r3, #14
    d02e:	4630      	mov	r0, r6
    d030:	f7ff ff6e 	bl	cf10 <att_handle_rsp>
	chan->att = NULL;
    d034:	2300      	movs	r3, #0
    d036:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    d03a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    d03c:	2b00      	cmp	r3, #0
    d03e:	d137      	bne.n	d0b0 <bt_att_disconnected+0xbc>
	att_reset(att);
    d040:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    d042:	9803      	ldr	r0, [sp, #12]
    d044:	2200      	movs	r2, #0
    d046:	2300      	movs	r3, #0
    d048:	3024      	adds	r0, #36	; 0x24
    d04a:	f019 fe1e 	bl	26c8a <net_buf_get>
    d04e:	b9b8      	cbnz	r0, d080 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    d050:	9803      	ldr	r0, [sp, #12]
    d052:	2200      	movs	r2, #0
    d054:	2300      	movs	r3, #0
    d056:	300c      	adds	r0, #12
    d058:	f019 fe17 	bl	26c8a <net_buf_get>
    d05c:	b998      	cbnz	r0, d086 <bt_att_disconnected+0x92>
	att->conn = NULL;
    d05e:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    d060:	6855      	ldr	r5, [r2, #4]
    d062:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d064:	b995      	cbnz	r5, d08c <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    d066:	4813      	ldr	r0, [pc, #76]	; (d0b4 <bt_att_disconnected+0xc0>)
    d068:	a903      	add	r1, sp, #12
    d06a:	f013 f937 	bl	202dc <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    d06e:	6820      	ldr	r0, [r4, #0]
}
    d070:	b005      	add	sp, #20
    d072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    d076:	f001 ba69 	b.w	e54c <bt_gatt_disconnected>
		net_buf_unref(buf);
    d07a:	f010 fbfb 	bl	1d874 <net_buf_unref>
    d07e:	e7ca      	b.n	d016 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    d080:	f010 fbf8 	bl	1d874 <net_buf_unref>
    d084:	e7dd      	b.n	d042 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    d086:	f010 fbf5 	bl	1d874 <net_buf_unref>
    d08a:	e7e1      	b.n	d050 <bt_att_disconnected+0x5c>
	return node->next;
    d08c:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    d08e:	686f      	ldr	r7, [r5, #4]
    d090:	b137      	cbz	r7, d0a0 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    d092:	69ab      	ldr	r3, [r5, #24]
    d094:	9300      	str	r3, [sp, #0]
    d096:	2300      	movs	r3, #0
    d098:	461a      	mov	r2, r3
    d09a:	210e      	movs	r1, #14
    d09c:	4618      	mov	r0, r3
    d09e:	47b8      	blx	r7
		bt_att_req_free(req);
    d0a0:	4628      	mov	r0, r5
    d0a2:	f7ff ff23 	bl	ceec <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d0a6:	2e00      	cmp	r6, #0
    d0a8:	d0dd      	beq.n	d066 <bt_att_disconnected+0x72>
    d0aa:	4635      	mov	r5, r6
    d0ac:	6836      	ldr	r6, [r6, #0]
    d0ae:	e7ee      	b.n	d08e <bt_att_disconnected+0x9a>
}
    d0b0:	b005      	add	sp, #20
    d0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0b4:	2000a040 	.word	0x2000a040

0000d0b8 <att_timeout>:
    d0b8:	4b08      	ldr	r3, [pc, #32]	; (d0dc <att_timeout+0x24>)
    d0ba:	4909      	ldr	r1, [pc, #36]	; (d0e0 <att_timeout+0x28>)
{
    d0bc:	b510      	push	{r4, lr}
    d0be:	1ac9      	subs	r1, r1, r3
    d0c0:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    d0c2:	0189      	lsls	r1, r1, #6
{
    d0c4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    d0c6:	f041 0101 	orr.w	r1, r1, #1
    d0ca:	4806      	ldr	r0, [pc, #24]	; (d0e4 <att_timeout+0x2c>)
    d0cc:	f015 fd9a 	bl	22c04 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    d0d0:	f1a4 00d8 	sub.w	r0, r4, #216	; 0xd8
}
    d0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    d0d8:	f7ff bf8c 	b.w	cff4 <bt_att_disconnected>
    d0dc:	000281b4 	.word	0x000281b4
    d0e0:	000281bc 	.word	0x000281bc
    d0e4:	0002d8df 	.word	0x0002d8df

0000d0e8 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    d0e8:	490a      	ldr	r1, [pc, #40]	; (d114 <db_hash_store+0x2c>)
    d0ea:	480b      	ldr	r0, [pc, #44]	; (d118 <db_hash_store+0x30>)
{
    d0ec:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    d0ee:	2210      	movs	r2, #16
    d0f0:	f7f9 fb78 	bl	67e4 <settings_save_one>
	if (err) {
    d0f4:	4601      	mov	r1, r0
    d0f6:	b158      	cbz	r0, d110 <db_hash_store+0x28>
    d0f8:	4b08      	ldr	r3, [pc, #32]	; (d11c <db_hash_store+0x34>)
    d0fa:	4a09      	ldr	r2, [pc, #36]	; (d120 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    d0fc:	4809      	ldr	r0, [pc, #36]	; (d124 <db_hash_store+0x3c>)
    d0fe:	1ad2      	subs	r2, r2, r3
    d100:	08d2      	lsrs	r2, r2, #3
    d102:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    d104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    d108:	f042 0201 	orr.w	r2, r2, #1
    d10c:	f015 bd87 	b.w	22c1e <log_1>
}
    d110:	bd08      	pop	{r3, pc}
    d112:	bf00      	nop
    d114:	2000fb08 	.word	0x2000fb08
    d118:	0002d8f2 	.word	0x0002d8f2
    d11c:	000281b4 	.word	0x000281b4
    d120:	00028274 	.word	0x00028274
    d124:	0002d8fa 	.word	0x0002d8fa

0000d128 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    d128:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    d12a:	490b      	ldr	r1, [pc, #44]	; (d158 <db_hash_set+0x30>)
{
    d12c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    d12e:	4618      	mov	r0, r3
    d130:	2210      	movs	r2, #16
    d132:	47a0      	blx	r4
	if (len < 0) {
    d134:	1e04      	subs	r4, r0, #0
    d136:	da0c      	bge.n	d152 <db_hash_set+0x2a>
    d138:	4a08      	ldr	r2, [pc, #32]	; (d15c <db_hash_set+0x34>)
    d13a:	4b09      	ldr	r3, [pc, #36]	; (d160 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    d13c:	4809      	ldr	r0, [pc, #36]	; (d164 <db_hash_set+0x3c>)
    d13e:	1ad2      	subs	r2, r2, r3
    d140:	08d2      	lsrs	r2, r2, #3
    d142:	0192      	lsls	r2, r2, #6
    d144:	f042 0201 	orr.w	r2, r2, #1
    d148:	4621      	mov	r1, r4
    d14a:	f015 fd68 	bl	22c1e <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    d14e:	4620      	mov	r0, r4
    d150:	bd10      	pop	{r4, pc}
	return 0;
    d152:	2400      	movs	r4, #0
    d154:	e7fb      	b.n	d14e <db_hash_set+0x26>
    d156:	bf00      	nop
    d158:	2000fb18 	.word	0x2000fb18
    d15c:	00028274 	.word	0x00028274
    d160:	000281b4 	.word	0x000281b4
    d164:	0002d920 	.word	0x0002d920

0000d168 <find_cf_cfg>:
{
    d168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d16a:	4d0f      	ldr	r5, [pc, #60]	; (d1a8 <find_cf_cfg+0x40>)
    d16c:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d16e:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    d170:	462f      	mov	r7, r5
		if (!conn) {
    d172:	1c68      	adds	r0, r5, #1
    d174:	b954      	cbnz	r4, d18c <find_cf_cfg+0x24>
	return memcmp(a, b, sizeof(*a));
    d176:	2207      	movs	r2, #7
    d178:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d17a:	9400      	str	r4, [sp, #0]
    d17c:	f8cd 4003 	str.w	r4, [sp, #3]
    d180:	f017 fd55 	bl	24c2e <memcmp>
    d184:	b948      	cbnz	r0, d19a <find_cf_cfg+0x32>
}
    d186:	4638      	mov	r0, r7
    d188:	b003      	add	sp, #12
    d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d18c:	4602      	mov	r2, r0
    d18e:	7829      	ldrb	r1, [r5, #0]
    d190:	4620      	mov	r0, r4
    d192:	f018 f95a 	bl	2544a <bt_conn_is_peer_addr_le>
    d196:	2800      	cmp	r0, #0
    d198:	d1f5      	bne.n	d186 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d19a:	3601      	adds	r6, #1
    d19c:	2e04      	cmp	r6, #4
    d19e:	f105 0510 	add.w	r5, r5, #16
    d1a2:	d1e5      	bne.n	d170 <find_cf_cfg+0x8>
	return NULL;
    d1a4:	2700      	movs	r7, #0
    d1a6:	e7ee      	b.n	d186 <find_cf_cfg+0x1e>
    d1a8:	2000dbe8 	.word	0x2000dbe8

0000d1ac <cf_write>:
{
    d1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d1b0:	461f      	mov	r7, r3
    d1b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
    d1b6:	2b01      	cmp	r3, #1
{
    d1b8:	4680      	mov	r8, r0
    d1ba:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    d1bc:	d84b      	bhi.n	d256 <cf_write+0xaa>
	if (offset + len > sizeof(cfg->data)) {
    d1be:	443b      	add	r3, r7
    d1c0:	2b01      	cmp	r3, #1
    d1c2:	463d      	mov	r5, r7
    d1c4:	dc4a      	bgt.n	d25c <cf_write+0xb0>
	cfg = find_cf_cfg(conn);
    d1c6:	f7ff ffcf 	bl	d168 <find_cf_cfg>
	if (!cfg) {
    d1ca:	4604      	mov	r4, r0
    d1cc:	b918      	cbnz	r0, d1d6 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    d1ce:	f7ff ffcb 	bl	d168 <find_cf_cfg>
	if (!cfg) {
    d1d2:	4604      	mov	r4, r0
    d1d4:	b1d8      	cbz	r0, d20e <cf_write+0x62>
    d1d6:	4632      	mov	r2, r6
    d1d8:	f104 0008 	add.w	r0, r4, #8
    d1dc:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    d1e0:	4596      	cmp	lr, r2
    d1e2:	d123      	bne.n	d22c <cf_write+0x80>
	for (i = 0U; i < len && i < last_byte; i++) {
    d1e4:	b12f      	cbz	r7, d1f2 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    d1e6:	7833      	ldrb	r3, [r6, #0]
    d1e8:	7a22      	ldrb	r2, [r4, #8]
    d1ea:	f003 0307 	and.w	r3, r3, #7
    d1ee:	4313      	orrs	r3, r2
    d1f0:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d1f2:	f108 0188 	add.w	r1, r8, #136	; 0x88
    d1f6:	1c60      	adds	r0, r4, #1
    d1f8:	f018 feae 	bl	25f58 <bt_addr_le_copy>
	cfg->id = conn->id;
    d1fc:	4620      	mov	r0, r4
    d1fe:	f898 3008 	ldrb.w	r3, [r8, #8]
    d202:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d206:	2101      	movs	r1, #1
    d208:	f018 ff2d 	bl	26066 <atomic_or>
}
    d20c:	e00b      	b.n	d226 <cf_write+0x7a>
    d20e:	4b16      	ldr	r3, [pc, #88]	; (d268 <cf_write+0xbc>)
    d210:	4916      	ldr	r1, [pc, #88]	; (d26c <cf_write+0xc0>)
		BT_WARN("No space to store Client Supported Features");
    d212:	4817      	ldr	r0, [pc, #92]	; (d270 <cf_write+0xc4>)
    d214:	1ac9      	subs	r1, r1, r3
    d216:	08c9      	lsrs	r1, r1, #3
    d218:	0189      	lsls	r1, r1, #6
    d21a:	f041 0102 	orr.w	r1, r1, #2
    d21e:	f015 fcf1 	bl	22c04 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d222:	f06f 0510 	mvn.w	r5, #16
}
    d226:	4628      	mov	r0, r5
    d228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    d22c:	f812 1b01 	ldrb.w	r1, [r2], #1
    d230:	f810 cb01 	ldrb.w	ip, [r0], #1
    d234:	2300      	movs	r3, #0
    d236:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
    d23a:	fa21 f903 	lsr.w	r9, r1, r3
    d23e:	f019 0f01 	tst.w	r9, #1
    d242:	d004      	beq.n	d24e <cf_write+0xa2>
    d244:	fa2c f903 	lsr.w	r9, ip, r3
    d248:	f019 0f01 	tst.w	r9, #1
    d24c:	d109      	bne.n	d262 <cf_write+0xb6>
		for (bit = 0U; bit <= last_bit; bit++) {
    d24e:	3301      	adds	r3, #1
    d250:	2b03      	cmp	r3, #3
    d252:	d1f2      	bne.n	d23a <cf_write+0x8e>
    d254:	e7c4      	b.n	d1e0 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d256:	f06f 0506 	mvn.w	r5, #6
    d25a:	e7e4      	b.n	d226 <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d25c:	f06f 050c 	mvn.w	r5, #12
    d260:	e7e1      	b.n	d226 <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    d262:	f06f 0512 	mvn.w	r5, #18
    d266:	e7de      	b.n	d226 <cf_write+0x7a>
    d268:	000281b4 	.word	0x000281b4
    d26c:	00028274 	.word	0x00028274
    d270:	0002d941 	.word	0x0002d941

0000d274 <sc_store>:
{
    d274:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    d276:	4605      	mov	r5, r0
{
    d278:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    d27a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    d27e:	4604      	mov	r4, r0
	if (cfg->id) {
    d280:	b1fa      	cbz	r2, d2c2 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d282:	ae02      	add	r6, sp, #8
    d284:	2104      	movs	r1, #4
    d286:	4630      	mov	r0, r6
    d288:	f014 ff73 	bl	22172 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    d28c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    d28e:	4a0e      	ldr	r2, [pc, #56]	; (d2c8 <sc_store+0x54>)
    d290:	462b      	mov	r3, r5
    d292:	2124      	movs	r1, #36	; 0x24
    d294:	a803      	add	r0, sp, #12
    d296:	f7fb f9e3 	bl	8660 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    d29a:	f104 0108 	add.w	r1, r4, #8
    d29e:	2204      	movs	r2, #4
    d2a0:	a803      	add	r0, sp, #12
    d2a2:	f7f9 fa9f 	bl	67e4 <settings_save_one>
	if (err) {
    d2a6:	4601      	mov	r1, r0
    d2a8:	b148      	cbz	r0, d2be <sc_store+0x4a>
    d2aa:	4a08      	ldr	r2, [pc, #32]	; (d2cc <sc_store+0x58>)
    d2ac:	4b08      	ldr	r3, [pc, #32]	; (d2d0 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    d2ae:	4809      	ldr	r0, [pc, #36]	; (d2d4 <sc_store+0x60>)
    d2b0:	1ad2      	subs	r2, r2, r3
    d2b2:	08d2      	lsrs	r2, r2, #3
    d2b4:	0192      	lsls	r2, r2, #6
    d2b6:	f042 0201 	orr.w	r2, r2, #1
    d2ba:	f015 fcb0 	bl	22c1e <log_1>
}
    d2be:	b00c      	add	sp, #48	; 0x30
    d2c0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    d2c2:	9200      	str	r2, [sp, #0]
    d2c4:	e7e3      	b.n	d28e <sc_store+0x1a>
    d2c6:	bf00      	nop
    d2c8:	0002db6b 	.word	0x0002db6b
    d2cc:	00028274 	.word	0x00028274
    d2d0:	000281b4 	.word	0x000281b4
    d2d4:	0002d96d 	.word	0x0002d96d

0000d2d8 <gatt_indicate>:
{
    d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2dc:	4680      	mov	r8, r0
    d2de:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d2e0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d2e4:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    d2e6:	8a96      	ldrh	r6, [r2, #20]
{
    d2e8:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d2ea:	f7ff fde9 	bl	cec0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    d2ee:	3602      	adds	r6, #2
	if (!req) {
    d2f0:	4604      	mov	r4, r0
    d2f2:	b920      	cbnz	r0, d2fe <gatt_indicate+0x26>
		return -ENOMEM;
    d2f4:	f06f 050b 	mvn.w	r5, #11
}
    d2f8:	4628      	mov	r0, r5
    d2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    d2fe:	2300      	movs	r3, #0
    d300:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    d302:	211d      	movs	r1, #29
	req->func = func;
    d304:	4b1b      	ldr	r3, [pc, #108]	; (d374 <gatt_indicate+0x9c>)
	req->len = len;
    d306:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    d308:	7441      	strb	r1, [r0, #17]
	req->func = func;
    d30a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    d30c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    d30e:	4632      	mov	r2, r6
    d310:	4640      	mov	r0, r8
    d312:	f7ff fb21 	bl	c958 <bt_att_create_pdu>
	if (!buf) {
    d316:	4606      	mov	r6, r0
    d318:	b968      	cbnz	r0, d336 <gatt_indicate+0x5e>
    d31a:	4b17      	ldr	r3, [pc, #92]	; (d378 <gatt_indicate+0xa0>)
    d31c:	4917      	ldr	r1, [pc, #92]	; (d37c <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    d31e:	4818      	ldr	r0, [pc, #96]	; (d380 <gatt_indicate+0xa8>)
    d320:	1ac9      	subs	r1, r1, r3
    d322:	08c9      	lsrs	r1, r1, #3
    d324:	0189      	lsls	r1, r1, #6
    d326:	f041 0102 	orr.w	r1, r1, #2
    d32a:	f015 fc6b 	bl	22c04 <log_0>
		bt_att_req_free(req);
    d32e:	4620      	mov	r0, r4
    d330:	f7ff fddc 	bl	ceec <bt_att_req_free>
    d334:	e7de      	b.n	d2f4 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    d336:	f100 0a08 	add.w	sl, r0, #8
    d33a:	2102      	movs	r1, #2
    d33c:	4650      	mov	r0, sl
    d33e:	f019 fcf5 	bl	26d2c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d342:	4607      	mov	r7, r0
    d344:	8aa9      	ldrh	r1, [r5, #20]
    d346:	f827 9b02 	strh.w	r9, [r7], #2
    d34a:	4650      	mov	r0, sl
    d34c:	f019 fcee 	bl	26d2c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d350:	8aaa      	ldrh	r2, [r5, #20]
    d352:	6929      	ldr	r1, [r5, #16]
    d354:	4638      	mov	r0, r7
    d356:	f017 fc7b 	bl	24c50 <memcpy>
	req->buf = buf;
    d35a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    d35c:	4621      	mov	r1, r4
    d35e:	4640      	mov	r0, r8
    d360:	f018 fda1 	bl	25ea6 <bt_att_req_send>
	if (err) {
    d364:	4605      	mov	r5, r0
    d366:	2800      	cmp	r0, #0
    d368:	d0c6      	beq.n	d2f8 <gatt_indicate+0x20>
		bt_att_req_free(req);
    d36a:	4620      	mov	r0, r4
    d36c:	f7ff fdbe 	bl	ceec <bt_att_req_free>
    d370:	e7c2      	b.n	d2f8 <gatt_indicate+0x20>
    d372:	bf00      	nop
    d374:	00025f27 	.word	0x00025f27
    d378:	000281b4 	.word	0x000281b4
    d37c:	00028274 	.word	0x00028274
    d380:	0002d989 	.word	0x0002d989

0000d384 <gatt_notify>:
{
    d384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d388:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    d38a:	8992      	ldrh	r2, [r2, #12]
{
    d38c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d38e:	3202      	adds	r2, #2
    d390:	211b      	movs	r1, #27
{
    d392:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d394:	f7ff fae0 	bl	c958 <bt_att_create_pdu>
	if (!buf) {
    d398:	4605      	mov	r5, r0
    d39a:	b1c8      	cbz	r0, d3d0 <gatt_notify+0x4c>
    d39c:	f100 0908 	add.w	r9, r0, #8
    d3a0:	2102      	movs	r1, #2
    d3a2:	4648      	mov	r0, r9
    d3a4:	f019 fcc2 	bl	26d2c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d3a8:	4606      	mov	r6, r0
    d3aa:	89a1      	ldrh	r1, [r4, #12]
    d3ac:	f826 8b02 	strh.w	r8, [r6], #2
    d3b0:	4648      	mov	r0, r9
    d3b2:	f019 fcbb 	bl	26d2c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    d3b6:	89a2      	ldrh	r2, [r4, #12]
    d3b8:	68a1      	ldr	r1, [r4, #8]
    d3ba:	4630      	mov	r0, r6
    d3bc:	f017 fc48 	bl	24c50 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    d3c0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d3c4:	4629      	mov	r1, r5
    d3c6:	4638      	mov	r0, r7
}
    d3c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    d3cc:	f018 bd21 	b.w	25e12 <bt_att_send>
    d3d0:	4b06      	ldr	r3, [pc, #24]	; (d3ec <gatt_notify+0x68>)
    d3d2:	4907      	ldr	r1, [pc, #28]	; (d3f0 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    d3d4:	4807      	ldr	r0, [pc, #28]	; (d3f4 <gatt_notify+0x70>)
    d3d6:	1ac9      	subs	r1, r1, r3
    d3d8:	08c9      	lsrs	r1, r1, #3
    d3da:	0189      	lsls	r1, r1, #6
    d3dc:	f041 0102 	orr.w	r1, r1, #2
    d3e0:	f015 fc10 	bl	22c04 <log_0>
}
    d3e4:	f06f 000b 	mvn.w	r0, #11
    d3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3ec:	000281b4 	.word	0x000281b4
    d3f0:	00028274 	.word	0x00028274
    d3f4:	0002d9b0 	.word	0x0002d9b0

0000d3f8 <find_cf_cfg_by_addr>:
{
    d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3fa:	4d0c      	ldr	r5, [pc, #48]	; (d42c <find_cf_cfg_by_addr+0x34>)
    d3fc:	4606      	mov	r6, r0
    d3fe:	460f      	mov	r7, r1
    d400:	2400      	movs	r4, #0
			if (id == cf_cfg[i].id &&
    d402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d406:	42b3      	cmp	r3, r6
    d408:	d108      	bne.n	d41c <find_cf_cfg_by_addr+0x24>
    d40a:	2207      	movs	r2, #7
    d40c:	4629      	mov	r1, r5
    d40e:	4638      	mov	r0, r7
    d410:	f017 fc0d 	bl	24c2e <memcmp>
    d414:	b910      	cbnz	r0, d41c <find_cf_cfg_by_addr+0x24>
				return &cf_cfg[i];
    d416:	4806      	ldr	r0, [pc, #24]	; (d430 <find_cf_cfg_by_addr+0x38>)
    d418:	4420      	add	r0, r4
}
    d41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d41c:	3410      	adds	r4, #16
    d41e:	2c40      	cmp	r4, #64	; 0x40
    d420:	f105 0510 	add.w	r5, r5, #16
    d424:	d1ed      	bne.n	d402 <find_cf_cfg_by_addr+0xa>
	return NULL;
    d426:	2000      	movs	r0, #0
    d428:	e7f7      	b.n	d41a <find_cf_cfg_by_addr+0x22>
    d42a:	bf00      	nop
    d42c:	2000dbe9 	.word	0x2000dbe9
    d430:	2000dbe8 	.word	0x2000dbe8

0000d434 <cf_set>:
{
    d434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d438:	4689      	mov	r9, r1
    d43a:	b085      	sub	sp, #20
    d43c:	4617      	mov	r7, r2
    d43e:	4698      	mov	r8, r3
	if (!name) {
    d440:	4605      	mov	r5, r0
    d442:	b978      	cbnz	r0, d464 <cf_set+0x30>
    d444:	4934      	ldr	r1, [pc, #208]	; (d518 <cf_set+0xe4>)
    d446:	4b35      	ldr	r3, [pc, #212]	; (d51c <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    d448:	4835      	ldr	r0, [pc, #212]	; (d520 <cf_set+0xec>)
    d44a:	1ac9      	subs	r1, r1, r3
    d44c:	08c9      	lsrs	r1, r1, #3
    d44e:	0189      	lsls	r1, r1, #6
    d450:	f041 0101 	orr.w	r1, r1, #1
    d454:	f015 fbd6 	bl	22c04 <log_0>
		return -EINVAL;
    d458:	f06f 0415 	mvn.w	r4, #21
}
    d45c:	4620      	mov	r0, r4
    d45e:	b005      	add	sp, #20
    d460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d464:	a902      	add	r1, sp, #8
    d466:	f017 fcef 	bl	24e48 <bt_settings_decode_key>
	if (err) {
    d46a:	4604      	mov	r4, r0
    d46c:	b178      	cbz	r0, d48e <cf_set+0x5a>
    d46e:	4a2b      	ldr	r2, [pc, #172]	; (d51c <cf_set+0xe8>)
    d470:	4c29      	ldr	r4, [pc, #164]	; (d518 <cf_set+0xe4>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d472:	4628      	mov	r0, r5
    d474:	1aa4      	subs	r4, r4, r2
    d476:	08e4      	lsrs	r4, r4, #3
    d478:	f7f8 f8b0 	bl	55dc <log_strdup>
    d47c:	01a4      	lsls	r4, r4, #6
    d47e:	f044 0401 	orr.w	r4, r4, #1
    d482:	4601      	mov	r1, r0
    d484:	4622      	mov	r2, r4
    d486:	4827      	ldr	r0, [pc, #156]	; (d524 <cf_set+0xf0>)
    d488:	f015 fbc9 	bl	22c1e <log_1>
    d48c:	e7e4      	b.n	d458 <cf_set+0x24>
	settings_name_next(name, &next);
    d48e:	a901      	add	r1, sp, #4
    d490:	4628      	mov	r0, r5
    d492:	f016 f886 	bl	235a2 <settings_name_next>
	if (!next) {
    d496:	9801      	ldr	r0, [sp, #4]
    d498:	b1d8      	cbz	r0, d4d2 <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    d49a:	220a      	movs	r2, #10
    d49c:	4621      	mov	r1, r4
    d49e:	f017 fb09 	bl	24ab4 <strtol>
    d4a2:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    d4a4:	a902      	add	r1, sp, #8
    d4a6:	4630      	mov	r0, r6
    d4a8:	f7ff ffa6 	bl	d3f8 <find_cf_cfg_by_addr>
	if (!cfg) {
    d4ac:	4605      	mov	r5, r0
    d4ae:	b9b8      	cbnz	r0, d4e0 <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    d4b0:	f7ff fe5a 	bl	d168 <find_cf_cfg>
		if (!cfg) {
    d4b4:	4605      	mov	r5, r0
    d4b6:	b970      	cbnz	r0, d4d6 <cf_set+0xa2>
    d4b8:	4b18      	ldr	r3, [pc, #96]	; (d51c <cf_set+0xe8>)
    d4ba:	4917      	ldr	r1, [pc, #92]	; (d518 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    d4bc:	481a      	ldr	r0, [pc, #104]	; (d528 <cf_set+0xf4>)
    d4be:	1ac9      	subs	r1, r1, r3
    d4c0:	08c9      	lsrs	r1, r1, #3
    d4c2:	0189      	lsls	r1, r1, #6
    d4c4:	f041 0101 	orr.w	r1, r1, #1
    d4c8:	f015 fb9c 	bl	22c04 <log_0>
			return -ENOMEM;
    d4cc:	f06f 040b 	mvn.w	r4, #11
    d4d0:	e7c4      	b.n	d45c <cf_set+0x28>
		id = BT_ID_DEFAULT;
    d4d2:	4626      	mov	r6, r4
    d4d4:	e7e6      	b.n	d4a4 <cf_set+0x70>
		cfg->id = id;
    d4d6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d4da:	a902      	add	r1, sp, #8
    d4dc:	f018 fd3c 	bl	25f58 <bt_addr_le_copy>
	if (len_rd) {
    d4e0:	f1b9 0f00 	cmp.w	r9, #0
    d4e4:	d013      	beq.n	d50e <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    d4e6:	f105 0108 	add.w	r1, r5, #8
    d4ea:	2201      	movs	r2, #1
    d4ec:	4640      	mov	r0, r8
    d4ee:	47b8      	blx	r7
		if (len < 0) {
    d4f0:	1e05      	subs	r5, r0, #0
    d4f2:	dab3      	bge.n	d45c <cf_set+0x28>
    d4f4:	4b09      	ldr	r3, [pc, #36]	; (d51c <cf_set+0xe8>)
    d4f6:	4a08      	ldr	r2, [pc, #32]	; (d518 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    d4f8:	480c      	ldr	r0, [pc, #48]	; (d52c <cf_set+0xf8>)
    d4fa:	1ad2      	subs	r2, r2, r3
    d4fc:	08d2      	lsrs	r2, r2, #3
    d4fe:	0192      	lsls	r2, r2, #6
    d500:	f042 0201 	orr.w	r2, r2, #1
    d504:	4629      	mov	r1, r5
    d506:	f015 fb8a 	bl	22c1e <log_1>
			return len;
    d50a:	462c      	mov	r4, r5
    d50c:	e7a6      	b.n	d45c <cf_set+0x28>
		clear_cf_cfg(cfg);
    d50e:	4628      	mov	r0, r5
    d510:	f018 fdb8 	bl	26084 <clear_cf_cfg>
    d514:	e7a2      	b.n	d45c <cf_set+0x28>
    d516:	bf00      	nop
    d518:	00028274 	.word	0x00028274
    d51c:	000281b4 	.word	0x000281b4
    d520:	0002c7db 	.word	0x0002c7db
    d524:	0002d9d9 	.word	0x0002d9d9
    d528:	0002d9f5 	.word	0x0002d9f5
    d52c:	0002d920 	.word	0x0002d920

0000d530 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    d530:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    d532:	6881      	ldr	r1, [r0, #8]
{
    d534:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d536:	4a07      	ldr	r2, [pc, #28]	; (d554 <remove_peer_from_attr+0x24>)
    d538:	4291      	cmp	r1, r2
    d53a:	d109      	bne.n	d550 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    d53c:	791a      	ldrb	r2, [r3, #4]
    d53e:	6819      	ldr	r1, [r3, #0]
    d540:	68c0      	ldr	r0, [r0, #12]
    d542:	f018 fe71 	bl	26228 <ccc_find_cfg>
	if (cfg) {
    d546:	b118      	cbz	r0, d550 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    d548:	220a      	movs	r2, #10
    d54a:	2100      	movs	r1, #0
    d54c:	f017 fbab 	bl	24ca6 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    d550:	2001      	movs	r0, #1
    d552:	bd08      	pop	{r3, pc}
    d554:	0000d61d 	.word	0x0000d61d

0000d558 <ccc_save>:
{
    d558:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d55a:	4b0c      	ldr	r3, [pc, #48]	; (d58c <ccc_save+0x34>)
{
    d55c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d55e:	6882      	ldr	r2, [r0, #8]
    d560:	429a      	cmp	r2, r3
{
    d562:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    d564:	d10f      	bne.n	d586 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    d566:	7922      	ldrb	r2, [r4, #4]
    d568:	6821      	ldr	r1, [r4, #0]
    d56a:	68c0      	ldr	r0, [r0, #12]
    d56c:	f018 fe5c 	bl	26228 <ccc_find_cfg>
	if (!cfg) {
    d570:	b148      	cbz	r0, d586 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    d572:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    d576:	8901      	ldrh	r1, [r0, #8]
    d578:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    d57c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    d57e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    d580:	8151      	strh	r1, [r2, #10]
	save->count++;
    d582:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    d586:	2001      	movs	r0, #1
    d588:	bd38      	pop	{r3, r4, r5, pc}
    d58a:	bf00      	nop
    d58c:	0000d61d 	.word	0x0000d61d

0000d590 <ccc_load>:
{
    d590:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d592:	4b21      	ldr	r3, [pc, #132]	; (d618 <ccc_load+0x88>)
{
    d594:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d596:	6882      	ldr	r2, [r0, #8]
    d598:	429a      	cmp	r2, r3
    d59a:	d002      	beq.n	d5a2 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    d59c:	2001      	movs	r0, #1
}
    d59e:	b002      	add	sp, #8
    d5a0:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    d5a2:	68a3      	ldr	r3, [r4, #8]
    d5a4:	68c6      	ldr	r6, [r0, #12]
    d5a6:	b94b      	cbnz	r3, d5bc <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    d5a8:	7922      	ldrb	r2, [r4, #4]
    d5aa:	6821      	ldr	r1, [r4, #0]
    d5ac:	4630      	mov	r0, r6
    d5ae:	f018 fe3b 	bl	26228 <ccc_find_cfg>
	if (!cfg) {
    d5b2:	2800      	cmp	r0, #0
    d5b4:	d0f2      	beq.n	d59c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    d5b6:	f018 fcd2 	bl	25f5e <clear_ccc_cfg>
    d5ba:	e7ef      	b.n	d59c <ccc_load+0xc>
	} else if (!load->count) {
    d5bc:	68e0      	ldr	r0, [r4, #12]
    d5be:	2800      	cmp	r0, #0
    d5c0:	d0ed      	beq.n	d59e <ccc_load+0xe>
	if (load->entry->handle != handle) {
    d5c2:	881b      	ldrh	r3, [r3, #0]
    d5c4:	4299      	cmp	r1, r3
    d5c6:	d00a      	beq.n	d5de <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    d5c8:	d9e8      	bls.n	d59c <ccc_load+0xc>
	load->count--;
    d5ca:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    d5cc:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    d5ce:	3801      	subs	r0, #1
	load->entry++;
    d5d0:	3304      	adds	r3, #4
	load->count--;
    d5d2:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    d5d4:	3800      	subs	r0, #0
	load->entry++;
    d5d6:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    d5d8:	bf18      	it	ne
    d5da:	2001      	movne	r0, #1
    d5dc:	e7df      	b.n	d59e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    d5de:	7922      	ldrb	r2, [r4, #4]
    d5e0:	6821      	ldr	r1, [r4, #0]
    d5e2:	4630      	mov	r0, r6
    d5e4:	f018 fe20 	bl	26228 <ccc_find_cfg>
	if (!cfg) {
    d5e8:	4605      	mov	r5, r0
    d5ea:	b980      	cbnz	r0, d60e <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    d5ec:	9000      	str	r0, [sp, #0]
    d5ee:	4602      	mov	r2, r0
    d5f0:	f8cd 0003 	str.w	r0, [sp, #3]
    d5f4:	4669      	mov	r1, sp
    d5f6:	4630      	mov	r0, r6
    d5f8:	f018 fe16 	bl	26228 <ccc_find_cfg>
		if (!cfg) {
    d5fc:	4605      	mov	r5, r0
    d5fe:	2800      	cmp	r0, #0
    d600:	d0e3      	beq.n	d5ca <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    d602:	6821      	ldr	r1, [r4, #0]
    d604:	3001      	adds	r0, #1
    d606:	f018 fca7 	bl	25f58 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    d60a:	7923      	ldrb	r3, [r4, #4]
    d60c:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    d60e:	68a3      	ldr	r3, [r4, #8]
    d610:	885b      	ldrh	r3, [r3, #2]
    d612:	812b      	strh	r3, [r5, #8]
    d614:	e7d9      	b.n	d5ca <ccc_load+0x3a>
    d616:	bf00      	nop
    d618:	0000d61d 	.word	0x0000d61d

0000d61c <bt_gatt_attr_write_ccc>:
{
    d61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d620:	461f      	mov	r7, r3
    d622:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d626:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    d62a:	4604      	mov	r4, r0
    d62c:	4688      	mov	r8, r1
	if (offset) {
    d62e:	2b00      	cmp	r3, #0
    d630:	d147      	bne.n	d6c2 <bt_gatt_attr_write_ccc+0xa6>
	if (!len || len > sizeof(uint16_t)) {
    d632:	1e7b      	subs	r3, r7, #1
    d634:	2b01      	cmp	r3, #1
    d636:	d847      	bhi.n	d6c8 <bt_gatt_attr_write_ccc+0xac>
		value = *(uint8_t *)buf;
    d638:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    d63a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    d63c:	4649      	mov	r1, r9
    d63e:	bf14      	ite	ne
    d640:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    d642:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    d644:	f018 fe0f 	bl	26266 <find_ccc_cfg>
	if (!cfg) {
    d648:	4605      	mov	r5, r0
    d64a:	b9e0      	cbnz	r0, d686 <bt_gatt_attr_write_ccc+0x6a>
		if (!value) {
    d64c:	b916      	cbnz	r6, d654 <bt_gatt_attr_write_ccc+0x38>
			return len;
    d64e:	4638      	mov	r0, r7
}
    d650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d654:	4649      	mov	r1, r9
    d656:	f018 fe06 	bl	26266 <find_ccc_cfg>
		if (!cfg) {
    d65a:	4605      	mov	r5, r0
    d65c:	b960      	cbnz	r0, d678 <bt_gatt_attr_write_ccc+0x5c>
    d65e:	4b1c      	ldr	r3, [pc, #112]	; (d6d0 <bt_gatt_attr_write_ccc+0xb4>)
    d660:	491c      	ldr	r1, [pc, #112]	; (d6d4 <bt_gatt_attr_write_ccc+0xb8>)
			BT_WARN("No space to store CCC cfg");
    d662:	481d      	ldr	r0, [pc, #116]	; (d6d8 <bt_gatt_attr_write_ccc+0xbc>)
    d664:	1ac9      	subs	r1, r1, r3
    d666:	08c9      	lsrs	r1, r1, #3
    d668:	0189      	lsls	r1, r1, #6
    d66a:	f041 0102 	orr.w	r1, r1, #2
    d66e:	f015 fac9 	bl	22c04 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d672:	f06f 0010 	mvn.w	r0, #16
    d676:	e7eb      	b.n	d650 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d678:	f104 0188 	add.w	r1, r4, #136	; 0x88
    d67c:	3001      	adds	r0, #1
    d67e:	f018 fc6b 	bl	25f58 <bt_addr_le_copy>
		cfg->id = conn->id;
    d682:	7a23      	ldrb	r3, [r4, #8]
    d684:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    d686:	f8d9 301c 	ldr.w	r3, [r9, #28]
    d68a:	b973      	cbnz	r3, d6aa <bt_gatt_attr_write_ccc+0x8e>
	if (cfg->value != ccc->value) {
    d68c:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    d690:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
    d692:	42b3      	cmp	r3, r6
    d694:	d003      	beq.n	d69e <bt_gatt_attr_write_ccc+0x82>
		gatt_ccc_changed(attr, ccc);
    d696:	4649      	mov	r1, r9
    d698:	4640      	mov	r0, r8
    d69a:	f018 fc36 	bl	25f0a <gatt_ccc_changed>
	if (!value) {
    d69e:	2e00      	cmp	r6, #0
    d6a0:	d1d5      	bne.n	d64e <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
    d6a2:	4628      	mov	r0, r5
    d6a4:	f018 fc5b 	bl	25f5e <clear_ccc_cfg>
    d6a8:	e7d1      	b.n	d64e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d6aa:	4632      	mov	r2, r6
    d6ac:	4641      	mov	r1, r8
    d6ae:	4620      	mov	r0, r4
    d6b0:	4798      	blx	r3
		if (write < 0) {
    d6b2:	2800      	cmp	r0, #0
    d6b4:	dbcc      	blt.n	d650 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    d6b6:	1e44      	subs	r4, r0, #1
    d6b8:	2c01      	cmp	r4, #1
    d6ba:	d9e7      	bls.n	d68c <bt_gatt_attr_write_ccc+0x70>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d6bc:	f06f 000d 	mvn.w	r0, #13
    d6c0:	e7c6      	b.n	d650 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d6c2:	f06f 0006 	mvn.w	r0, #6
    d6c6:	e7c3      	b.n	d650 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d6c8:	f06f 000c 	mvn.w	r0, #12
    d6cc:	e7c0      	b.n	d650 <bt_gatt_attr_write_ccc+0x34>
    d6ce:	bf00      	nop
    d6d0:	000281b4 	.word	0x000281b4
    d6d4:	00028274 	.word	0x00028274
    d6d8:	0002da17 	.word	0x0002da17

0000d6dc <find_sc_cfg>:
{
    d6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6de:	4d0c      	ldr	r5, [pc, #48]	; (d710 <find_sc_cfg+0x34>)
    d6e0:	4606      	mov	r6, r0
    d6e2:	460f      	mov	r7, r1
    d6e4:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
    d6e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d6ea:	42b3      	cmp	r3, r6
    d6ec:	d108      	bne.n	d700 <find_sc_cfg+0x24>
    d6ee:	2207      	movs	r2, #7
    d6f0:	4639      	mov	r1, r7
    d6f2:	4628      	mov	r0, r5
    d6f4:	f017 fa9b 	bl	24c2e <memcmp>
    d6f8:	b910      	cbnz	r0, d700 <find_sc_cfg+0x24>
			return &sc_cfg[i];
    d6fa:	4806      	ldr	r0, [pc, #24]	; (d714 <find_sc_cfg+0x38>)
    d6fc:	4420      	add	r0, r4
}
    d6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d700:	340c      	adds	r4, #12
    d702:	2c30      	cmp	r4, #48	; 0x30
    d704:	f105 050c 	add.w	r5, r5, #12
    d708:	d1ed      	bne.n	d6e6 <find_sc_cfg+0xa>
	return NULL;
    d70a:	2000      	movs	r0, #0
    d70c:	e7f7      	b.n	d6fe <find_sc_cfg+0x22>
    d70e:	bf00      	nop
    d710:	2000f559 	.word	0x2000f559
    d714:	2000f558 	.word	0x2000f558

0000d718 <sc_save>:
{
    d718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d71c:	4680      	mov	r8, r0
    d71e:	460f      	mov	r7, r1
    d720:	4616      	mov	r6, r2
    d722:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    d724:	f7ff ffda 	bl	d6dc <find_sc_cfg>
	if (!cfg) {
    d728:	4604      	mov	r4, r0
    d72a:	b9c8      	cbnz	r0, d760 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d72c:	4669      	mov	r1, sp
    d72e:	9000      	str	r0, [sp, #0]
    d730:	f8cd 0003 	str.w	r0, [sp, #3]
    d734:	f7ff ffd2 	bl	d6dc <find_sc_cfg>
		if (!cfg) {
    d738:	4604      	mov	r4, r0
    d73a:	b960      	cbnz	r0, d756 <sc_save+0x3e>
    d73c:	4916      	ldr	r1, [pc, #88]	; (d798 <sc_save+0x80>)
    d73e:	4b17      	ldr	r3, [pc, #92]	; (d79c <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    d740:	4817      	ldr	r0, [pc, #92]	; (d7a0 <sc_save+0x88>)
    d742:	1ac9      	subs	r1, r1, r3
    d744:	08c9      	lsrs	r1, r1, #3
    d746:	0189      	lsls	r1, r1, #6
    d748:	f041 0101 	orr.w	r1, r1, #1
    d74c:	f015 fa5a 	bl	22c04 <log_0>
}
    d750:	b002      	add	sp, #8
    d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    d756:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    d75a:	4639      	mov	r1, r7
    d75c:	f018 fbfc 	bl	25f58 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    d760:	8922      	ldrh	r2, [r4, #8]
    d762:	8963      	ldrh	r3, [r4, #10]
    d764:	b97a      	cbnz	r2, d786 <sc_save+0x6e>
    d766:	b983      	cbnz	r3, d78a <sc_save+0x72>
		cfg->data.start = start;
    d768:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    d76a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    d76c:	4621      	mov	r1, r4
    d76e:	f811 0b01 	ldrb.w	r0, [r1], #1
    d772:	f017 fd91 	bl	25298 <bt_addr_le_is_bonded>
    d776:	2800      	cmp	r0, #0
    d778:	d0ea      	beq.n	d750 <sc_save+0x38>
		sc_store(cfg);
    d77a:	4620      	mov	r0, r4
}
    d77c:	b002      	add	sp, #8
    d77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
    d782:	f7ff bd77 	b.w	d274 <sc_store>
	if (new_start >= *start && new_end <= *end) {
    d786:	4296      	cmp	r6, r2
    d788:	d302      	bcc.n	d790 <sc_save+0x78>
    d78a:	429d      	cmp	r5, r3
    d78c:	d8ed      	bhi.n	d76a <sc_save+0x52>
    d78e:	e7df      	b.n	d750 <sc_save+0x38>
	if (*end < new_end) {
    d790:	429d      	cmp	r5, r3
		*start = new_start;
    d792:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    d794:	d9ea      	bls.n	d76c <sc_save+0x54>
    d796:	e7e8      	b.n	d76a <sc_save+0x52>
    d798:	00028274 	.word	0x00028274
    d79c:	000281b4 	.word	0x000281b4
    d7a0:	0002da31 	.word	0x0002da31

0000d7a4 <notify_cb>:
{
    d7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7a8:	4b39      	ldr	r3, [pc, #228]	; (d890 <notify_cb+0xec>)
{
    d7aa:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7ac:	6882      	ldr	r2, [r0, #8]
    d7ae:	429a      	cmp	r2, r3
{
    d7b0:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7b2:	d003      	beq.n	d7bc <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    d7b4:	2001      	movs	r0, #1
}
    d7b6:	b003      	add	sp, #12
    d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    d7bc:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    d7c0:	4b34      	ldr	r3, [pc, #208]	; (d894 <notify_cb+0xf0>)
    d7c2:	4599      	cmp	r9, r3
    d7c4:	d01a      	beq.n	d7fc <notify_cb+0x58>
    d7c6:	f109 0701 	add.w	r7, r9, #1
    d7ca:	f109 0a15 	add.w	sl, r9, #21
    d7ce:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    d7d2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    d7d6:	89a3      	ldrh	r3, [r4, #12]
    d7d8:	429a      	cmp	r2, r3
    d7da:	d10b      	bne.n	d7f4 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d7dc:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    d7e0:	4639      	mov	r1, r7
    d7e2:	f7fe f84f 	bl	b884 <bt_conn_lookup_addr_le>
		if (!conn) {
    d7e6:	4605      	mov	r5, r0
    d7e8:	b120      	cbz	r0, d7f4 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    d7ea:	7b43      	ldrb	r3, [r0, #13]
    d7ec:	2b07      	cmp	r3, #7
    d7ee:	d02a      	beq.n	d846 <notify_cb+0xa2>
			bt_conn_unref(conn);
    d7f0:	f017 fe66 	bl	254c0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d7f4:	370a      	adds	r7, #10
    d7f6:	4557      	cmp	r7, sl
    d7f8:	d0dc      	beq.n	d7b4 <notify_cb+0x10>
    d7fa:	e7ea      	b.n	d7d2 <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d7fc:	2600      	movs	r6, #0
    d7fe:	4d26      	ldr	r5, [pc, #152]	; (d898 <notify_cb+0xf4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d800:	4637      	mov	r7, r6
    d802:	2207      	movs	r2, #7
    d804:	4669      	mov	r1, sp
    d806:	4628      	mov	r0, r5
    d808:	9700      	str	r7, [sp, #0]
    d80a:	f8cd 7003 	str.w	r7, [sp, #3]
    d80e:	f017 fa0e 	bl	24c2e <memcmp>
    d812:	b178      	cbz	r0, d834 <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    d814:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d818:	2207      	movs	r2, #7
    d81a:	4629      	mov	r1, r5
    d81c:	f7fe f87e 	bl	b91c <bt_conn_lookup_state_le>
			if (!conn) {
    d820:	b970      	cbnz	r0, d840 <notify_cb+0x9c>
				sc = (struct sc_data *)data->ind_params->data;
    d822:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    d824:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    d828:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    d82a:	4629      	mov	r1, r5
    d82c:	8853      	ldrh	r3, [r2, #2]
    d82e:	8812      	ldrh	r2, [r2, #0]
    d830:	f7ff ff72 	bl	d718 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d834:	3601      	adds	r6, #1
    d836:	2e04      	cmp	r6, #4
    d838:	f105 050c 	add.w	r5, r5, #12
    d83c:	d1e1      	bne.n	d802 <notify_cb+0x5e>
    d83e:	e7c2      	b.n	d7c6 <notify_cb+0x22>
			bt_conn_unref(conn);
    d840:	f017 fe3e 	bl	254c0 <bt_conn_unref>
    d844:	e7f6      	b.n	d834 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    d846:	f8d9 3020 	ldr.w	r3, [r9, #32]
    d84a:	b123      	cbz	r3, d856 <notify_cb+0xb2>
    d84c:	4641      	mov	r1, r8
    d84e:	4798      	blx	r3
    d850:	b908      	cbnz	r0, d856 <notify_cb+0xb2>
			bt_conn_unref(conn);
    d852:	4628      	mov	r0, r5
    d854:	e7cc      	b.n	d7f0 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d856:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    d858:	88a1      	ldrh	r1, [r4, #4]
    d85a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    d85c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    d85e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    d860:	d10f      	bne.n	d882 <notify_cb+0xde>
			err = gatt_indicate(conn, data->handle,
    d862:	f7ff fd39 	bl	d2d8 <gatt_indicate>
			if (err == 0) {
    d866:	4606      	mov	r6, r0
    d868:	b918      	cbnz	r0, d872 <notify_cb+0xce>
				data->ind_params->_ref++;
    d86a:	6922      	ldr	r2, [r4, #16]
    d86c:	7d93      	ldrb	r3, [r2, #22]
    d86e:	3301      	adds	r3, #1
    d870:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    d872:	4628      	mov	r0, r5
    d874:	f017 fe24 	bl	254c0 <bt_conn_unref>
		if (err < 0) {
    d878:	2e00      	cmp	r6, #0
    d87a:	db06      	blt.n	d88a <notify_cb+0xe6>
		data->err = 0;
    d87c:	f8c4 b008 	str.w	fp, [r4, #8]
    d880:	e7b8      	b.n	d7f4 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    d882:	f7ff fd7f 	bl	d384 <gatt_notify>
    d886:	4606      	mov	r6, r0
    d888:	e7f3      	b.n	d872 <notify_cb+0xce>
			return BT_GATT_ITER_STOP;
    d88a:	2000      	movs	r0, #0
    d88c:	e793      	b.n	d7b6 <notify_cb+0x12>
    d88e:	bf00      	nop
    d890:	0000d61d 	.word	0x0000d61d
    d894:	200003f0 	.word	0x200003f0
    d898:	2000f559 	.word	0x2000f559

0000d89c <bt_gatt_clear_sc>:
{
    d89c:	b570      	push	{r4, r5, r6, lr}
    d89e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    d8a0:	f7ff ff1c 	bl	d6dc <find_sc_cfg>
	if (!cfg) {
    d8a4:	4604      	mov	r4, r0
    d8a6:	b318      	cbz	r0, d8f0 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    d8a8:	4605      	mov	r5, r0
    d8aa:	f815 2b01 	ldrb.w	r2, [r5], #1
    d8ae:	b312      	cbz	r2, d8f6 <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d8b0:	ae02      	add	r6, sp, #8
    d8b2:	2104      	movs	r1, #4
    d8b4:	4630      	mov	r0, r6
    d8b6:	f014 fc5c 	bl	22172 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    d8ba:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    d8bc:	2124      	movs	r1, #36	; 0x24
    d8be:	4a0f      	ldr	r2, [pc, #60]	; (d8fc <bt_gatt_clear_sc+0x60>)
    d8c0:	462b      	mov	r3, r5
    d8c2:	a803      	add	r0, sp, #12
    d8c4:	f7fa fecc 	bl	8660 <bt_settings_encode_key>
		err = settings_delete(key);
    d8c8:	a803      	add	r0, sp, #12
    d8ca:	f015 fe43 	bl	23554 <settings_delete>
		if (err) {
    d8ce:	4601      	mov	r1, r0
    d8d0:	b148      	cbz	r0, d8e6 <bt_gatt_clear_sc+0x4a>
    d8d2:	4a0b      	ldr	r2, [pc, #44]	; (d900 <bt_gatt_clear_sc+0x64>)
    d8d4:	4b0b      	ldr	r3, [pc, #44]	; (d904 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    d8d6:	480c      	ldr	r0, [pc, #48]	; (d908 <bt_gatt_clear_sc+0x6c>)
    d8d8:	1ad2      	subs	r2, r2, r3
    d8da:	08d2      	lsrs	r2, r2, #3
    d8dc:	0192      	lsls	r2, r2, #6
    d8de:	f042 0201 	orr.w	r2, r2, #1
    d8e2:	f015 f99c 	bl	22c1e <log_1>
	memset(cfg, 0, sizeof(*cfg));
    d8e6:	220c      	movs	r2, #12
    d8e8:	2100      	movs	r1, #0
    d8ea:	4620      	mov	r0, r4
    d8ec:	f017 f9db 	bl	24ca6 <memset>
}
    d8f0:	2000      	movs	r0, #0
    d8f2:	b00c      	add	sp, #48	; 0x30
    d8f4:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    d8f6:	9200      	str	r2, [sp, #0]
    d8f8:	e7e0      	b.n	d8bc <bt_gatt_clear_sc+0x20>
    d8fa:	bf00      	nop
    d8fc:	0002db6b 	.word	0x0002db6b
    d900:	00028274 	.word	0x00028274
    d904:	000281b4 	.word	0x000281b4
    d908:	0002da50 	.word	0x0002da50

0000d90c <sc_clear>:
{
    d90c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d90e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    d912:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d914:	4631      	mov	r1, r6
    d916:	7a00      	ldrb	r0, [r0, #8]
    d918:	f017 fcbe 	bl	25298 <bt_addr_le_is_bonded>
    d91c:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d91e:	4631      	mov	r1, r6
    d920:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d922:	b17d      	cbz	r5, d944 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d924:	f7ff ffba 	bl	d89c <bt_gatt_clear_sc>
		if (err) {
    d928:	4601      	mov	r1, r0
    d92a:	b1a0      	cbz	r0, d956 <sc_clear+0x4a>
    d92c:	4a0a      	ldr	r2, [pc, #40]	; (d958 <sc_clear+0x4c>)
    d92e:	4b0b      	ldr	r3, [pc, #44]	; (d95c <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    d930:	480b      	ldr	r0, [pc, #44]	; (d960 <sc_clear+0x54>)
    d932:	1ad2      	subs	r2, r2, r3
    d934:	08d2      	lsrs	r2, r2, #3
    d936:	0192      	lsls	r2, r2, #6
}
    d938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    d93c:	f042 0201 	orr.w	r2, r2, #1
    d940:	f015 b96d 	b.w	22c1e <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d944:	f7ff feca 	bl	d6dc <find_sc_cfg>
		if (cfg) {
    d948:	b128      	cbz	r0, d956 <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    d94a:	4629      	mov	r1, r5
    d94c:	220c      	movs	r2, #12
}
    d94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    d952:	f017 b9a8 	b.w	24ca6 <memset>
}
    d956:	bd70      	pop	{r4, r5, r6, pc}
    d958:	00028274 	.word	0x00028274
    d95c:	000281b4 	.word	0x000281b4
    d960:	0002da6d 	.word	0x0002da6d

0000d964 <disconnected_cb>:
{
    d964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d968:	4b25      	ldr	r3, [pc, #148]	; (da00 <disconnected_cb+0x9c>)
{
    d96a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d96c:	6882      	ldr	r2, [r0, #8]
    d96e:	429a      	cmp	r2, r3
{
    d970:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d972:	d12f      	bne.n	d9d4 <disconnected_cb+0x70>
	ccc = attr->user_data;
    d974:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    d976:	8aab      	ldrh	r3, [r5, #20]
    d978:	b363      	cbz	r3, d9d4 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    d97a:	f8df b088 	ldr.w	fp, [pc, #136]	; da04 <disconnected_cb+0xa0>
    d97e:	1c6c      	adds	r4, r5, #1
    d980:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    d984:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d988:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    d98c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d990:	b19b      	cbz	r3, d9ba <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d992:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    d996:	4622      	mov	r2, r4
    d998:	4630      	mov	r0, r6
    d99a:	f017 fd56 	bl	2544a <bt_conn_is_peer_addr_le>
    d99e:	b9e0      	cbnz	r0, d9da <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d9a0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d9a4:	4621      	mov	r1, r4
    d9a6:	f7fd ff6d 	bl	b884 <bt_conn_lookup_addr_le>
			if (tmp) {
    d9aa:	b130      	cbz	r0, d9ba <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    d9ac:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    d9ae:	2b07      	cmp	r3, #7
    d9b0:	bf08      	it	eq
    d9b2:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    d9b6:	f017 fd83 	bl	254c0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d9ba:	340a      	adds	r4, #10
    d9bc:	45a2      	cmp	sl, r4
    d9be:	d1e5      	bne.n	d98c <disconnected_cb+0x28>
	if (!value_used) {
    d9c0:	f1b8 0f00 	cmp.w	r8, #0
    d9c4:	d106      	bne.n	d9d4 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    d9c6:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    d9c8:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    d9cc:	b113      	cbz	r3, d9d4 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    d9ce:	4641      	mov	r1, r8
    d9d0:	4638      	mov	r0, r7
    d9d2:	4798      	blx	r3
}
    d9d4:	2001      	movs	r0, #1
    d9d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d9da:	7a30      	ldrb	r0, [r6, #8]
    d9dc:	4649      	mov	r1, r9
    d9de:	f017 fc5b 	bl	25298 <bt_addr_le_is_bonded>
    d9e2:	b940      	cbnz	r0, d9f6 <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
    d9e4:	455d      	cmp	r5, fp
    d9e6:	d102      	bne.n	d9ee <disconnected_cb+0x8a>
					sc_clear(conn);
    d9e8:	4630      	mov	r0, r6
    d9ea:	f7ff ff8f 	bl	d90c <sc_clear>
				clear_ccc_cfg(cfg);
    d9ee:	1e60      	subs	r0, r4, #1
    d9f0:	f018 fab5 	bl	25f5e <clear_ccc_cfg>
    d9f4:	e7e1      	b.n	d9ba <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d9f6:	4649      	mov	r1, r9
    d9f8:	4620      	mov	r0, r4
    d9fa:	f018 faad 	bl	25f58 <bt_addr_le_copy>
    d9fe:	e7dc      	b.n	d9ba <disconnected_cb+0x56>
    da00:	0000d61d 	.word	0x0000d61d
    da04:	200003f0 	.word	0x200003f0

0000da08 <sc_set>:
{
    da08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da0c:	460e      	mov	r6, r1
    da0e:	b087      	sub	sp, #28
    da10:	4690      	mov	r8, r2
    da12:	4699      	mov	r9, r3
	if (!name) {
    da14:	4607      	mov	r7, r0
    da16:	b978      	cbnz	r0, da38 <sc_set+0x30>
    da18:	4937      	ldr	r1, [pc, #220]	; (daf8 <sc_set+0xf0>)
    da1a:	4b38      	ldr	r3, [pc, #224]	; (dafc <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    da1c:	4838      	ldr	r0, [pc, #224]	; (db00 <sc_set+0xf8>)
    da1e:	1ac9      	subs	r1, r1, r3
    da20:	08c9      	lsrs	r1, r1, #3
    da22:	0189      	lsls	r1, r1, #6
    da24:	f041 0101 	orr.w	r1, r1, #1
    da28:	f015 f8ec 	bl	22c04 <log_0>
		return -EINVAL;
    da2c:	f06f 0515 	mvn.w	r5, #21
}
    da30:	4628      	mov	r0, r5
    da32:	b007      	add	sp, #28
    da34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    da38:	a902      	add	r1, sp, #8
    da3a:	f017 fa05 	bl	24e48 <bt_settings_decode_key>
	if (err) {
    da3e:	4605      	mov	r5, r0
    da40:	b178      	cbz	r0, da62 <sc_set+0x5a>
    da42:	4a2e      	ldr	r2, [pc, #184]	; (dafc <sc_set+0xf4>)
    da44:	4c2c      	ldr	r4, [pc, #176]	; (daf8 <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    da46:	4638      	mov	r0, r7
    da48:	1aa4      	subs	r4, r4, r2
    da4a:	08e4      	lsrs	r4, r4, #3
    da4c:	f7f7 fdc6 	bl	55dc <log_strdup>
    da50:	01a4      	lsls	r4, r4, #6
    da52:	f044 0401 	orr.w	r4, r4, #1
    da56:	4601      	mov	r1, r0
    da58:	4622      	mov	r2, r4
    da5a:	482a      	ldr	r0, [pc, #168]	; (db04 <sc_set+0xfc>)
    da5c:	f015 f8df 	bl	22c1e <log_1>
    da60:	e7e4      	b.n	da2c <sc_set+0x24>
	settings_name_next(name, &next);
    da62:	a901      	add	r1, sp, #4
    da64:	4638      	mov	r0, r7
    da66:	f015 fd9c 	bl	235a2 <settings_name_next>
	if (!next) {
    da6a:	9801      	ldr	r0, [sp, #4]
    da6c:	b308      	cbz	r0, dab2 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    da6e:	220a      	movs	r2, #10
    da70:	4629      	mov	r1, r5
    da72:	f017 f81f 	bl	24ab4 <strtol>
    da76:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    da78:	a902      	add	r1, sp, #8
    da7a:	4638      	mov	r0, r7
    da7c:	f7ff fe2e 	bl	d6dc <find_sc_cfg>
	if (!cfg && len_rd) {
    da80:	4604      	mov	r4, r0
    da82:	bb88      	cbnz	r0, dae8 <sc_set+0xe0>
    da84:	2e00      	cmp	r6, #0
    da86:	d0d3      	beq.n	da30 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    da88:	a904      	add	r1, sp, #16
    da8a:	9004      	str	r0, [sp, #16]
    da8c:	f8cd 0013 	str.w	r0, [sp, #19]
    da90:	f7ff fe24 	bl	d6dc <find_sc_cfg>
		if (!cfg) {
    da94:	4604      	mov	r4, r0
    da96:	b970      	cbnz	r0, dab6 <sc_set+0xae>
    da98:	4b18      	ldr	r3, [pc, #96]	; (dafc <sc_set+0xf4>)
    da9a:	4917      	ldr	r1, [pc, #92]	; (daf8 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    da9c:	481a      	ldr	r0, [pc, #104]	; (db08 <sc_set+0x100>)
    da9e:	1ac9      	subs	r1, r1, r3
    daa0:	08c9      	lsrs	r1, r1, #3
    daa2:	0189      	lsls	r1, r1, #6
    daa4:	f041 0101 	orr.w	r1, r1, #1
    daa8:	f015 f8ac 	bl	22c04 <log_0>
			return -ENOMEM;
    daac:	f06f 050b 	mvn.w	r5, #11
    dab0:	e7be      	b.n	da30 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    dab2:	462f      	mov	r7, r5
    dab4:	e7e0      	b.n	da78 <sc_set+0x70>
		cfg->id = id;
    dab6:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    daba:	a902      	add	r1, sp, #8
    dabc:	f018 fa4c 	bl	25f58 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    dac0:	f104 0108 	add.w	r1, r4, #8
    dac4:	2204      	movs	r2, #4
    dac6:	4648      	mov	r0, r9
    dac8:	47c0      	blx	r8
		if (len < 0) {
    daca:	1e04      	subs	r4, r0, #0
    dacc:	dab0      	bge.n	da30 <sc_set+0x28>
    dace:	4b0b      	ldr	r3, [pc, #44]	; (dafc <sc_set+0xf4>)
    dad0:	4a09      	ldr	r2, [pc, #36]	; (daf8 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
    dad2:	480e      	ldr	r0, [pc, #56]	; (db0c <sc_set+0x104>)
    dad4:	1ad2      	subs	r2, r2, r3
    dad6:	08d2      	lsrs	r2, r2, #3
    dad8:	0192      	lsls	r2, r2, #6
    dada:	f042 0201 	orr.w	r2, r2, #1
    dade:	4621      	mov	r1, r4
    dae0:	f015 f89d 	bl	22c1e <log_1>
			return len;
    dae4:	4625      	mov	r5, r4
    dae6:	e7a3      	b.n	da30 <sc_set+0x28>
	if (len_rd) {
    dae8:	2e00      	cmp	r6, #0
    daea:	d1e9      	bne.n	dac0 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    daec:	220c      	movs	r2, #12
    daee:	4631      	mov	r1, r6
    daf0:	f017 f8d9 	bl	24ca6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    daf4:	e79c      	b.n	da30 <sc_set+0x28>
    daf6:	bf00      	nop
    daf8:	00028274 	.word	0x00028274
    dafc:	000281b4 	.word	0x000281b4
    db00:	0002c7db 	.word	0x0002c7db
    db04:	0002d9d9 	.word	0x0002d9d9
    db08:	0002da83 	.word	0x0002da83
    db0c:	0002d920 	.word	0x0002d920

0000db10 <sc_commit>:
{
    db10:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    db12:	4c0c      	ldr	r4, [pc, #48]	; (db44 <sc_commit+0x34>)
    db14:	f06f 0102 	mvn.w	r1, #2
    db18:	f104 0050 	add.w	r0, r4, #80	; 0x50
    db1c:	f018 facf 	bl	260be <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db20:	f3bf 8f5b 	dmb	ish
    db24:	6d23      	ldr	r3, [r4, #80]	; 0x50
    db26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    db2a:	07db      	lsls	r3, r3, #31
    db2c:	d507      	bpl.n	db3e <sc_commit+0x2e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    db2e:	4806      	ldr	r0, [pc, #24]	; (db48 <sc_commit+0x38>)
    db30:	f44f 72a4 	mov.w	r2, #328	; 0x148
    db34:	2300      	movs	r3, #0
    db36:	f104 0120 	add.w	r1, r4, #32
    db3a:	f013 f9c7 	bl	20ecc <k_delayed_work_submit_to_queue>
}
    db3e:	2000      	movs	r0, #0
    db40:	bd10      	pop	{r4, pc}
    db42:	bf00      	nop
    db44:	2000aa88 	.word	0x2000aa88
    db48:	2000b0f0 	.word	0x2000b0f0

0000db4c <sc_indicate_rsp>:
{
    db4c:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    db4e:	4d12      	ldr	r5, [pc, #72]	; (db98 <sc_indicate_rsp+0x4c>)
    db50:	4604      	mov	r4, r0
    db52:	f06f 0102 	mvn.w	r1, #2
    db56:	f105 0050 	add.w	r0, r5, #80	; 0x50
    db5a:	f018 fab0 	bl	260be <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db5e:	f3bf 8f5b 	dmb	ish
    db62:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    db64:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    db68:	07da      	lsls	r2, r3, #31
    db6a:	d506      	bpl.n	db7a <sc_indicate_rsp+0x2e>
    db6c:	480b      	ldr	r0, [pc, #44]	; (db9c <sc_indicate_rsp+0x50>)
    db6e:	2200      	movs	r2, #0
    db70:	2300      	movs	r3, #0
    db72:	f105 0120 	add.w	r1, r5, #32
    db76:	f013 f9a9 	bl	20ecc <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    db7a:	4620      	mov	r0, r4
    db7c:	f7ff faf4 	bl	d168 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    db80:	b140      	cbz	r0, db94 <sc_indicate_rsp+0x48>
    db82:	7a03      	ldrb	r3, [r0, #8]
    db84:	07db      	lsls	r3, r3, #31
    db86:	d505      	bpl.n	db94 <sc_indicate_rsp+0x48>
}
    db88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    db8c:	2101      	movs	r1, #1
    db8e:	300c      	adds	r0, #12
    db90:	f018 ba69 	b.w	26066 <atomic_or>
    db94:	bd38      	pop	{r3, r4, r5, pc}
    db96:	bf00      	nop
    db98:	2000aa88 	.word	0x2000aa88
    db9c:	2000b0f0 	.word	0x2000b0f0

0000dba0 <bt_gatt_init>:
{
    dba0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    dba2:	4b26      	ldr	r3, [pc, #152]	; (dc3c <bt_gatt_init+0x9c>)
    dba4:	f3bf 8f5b 	dmb	ish
    dba8:	2201      	movs	r2, #1
    dbaa:	e853 1f00 	ldrex	r1, [r3]
    dbae:	2900      	cmp	r1, #0
    dbb0:	d103      	bne.n	dbba <bt_gatt_init+0x1a>
    dbb2:	e843 2000 	strex	r0, r2, [r3]
    dbb6:	2800      	cmp	r0, #0
    dbb8:	d1f7      	bne.n	dbaa <bt_gatt_init+0xa>
    dbba:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    dbbe:	d13b      	bne.n	dc38 <bt_gatt_init+0x98>
    dbc0:	f3bf 8f5b 	dmb	ish
    dbc4:	4b1e      	ldr	r3, [pc, #120]	; (dc40 <bt_gatt_init+0xa0>)
    dbc6:	e853 1f00 	ldrex	r1, [r3]
    dbca:	2900      	cmp	r1, #0
    dbcc:	d103      	bne.n	dbd6 <bt_gatt_init+0x36>
    dbce:	e843 2000 	strex	r0, r2, [r3]
    dbd2:	2800      	cmp	r0, #0
    dbd4:	d1f7      	bne.n	dbc6 <bt_gatt_init+0x26>
    dbd6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    dbda:	d108      	bne.n	dbee <bt_gatt_init+0x4e>
    dbdc:	4919      	ldr	r1, [pc, #100]	; (dc44 <bt_gatt_init+0xa4>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dbde:	4a1a      	ldr	r2, [pc, #104]	; (dc48 <bt_gatt_init+0xa8>)
    dbe0:	880b      	ldrh	r3, [r1, #0]
    dbe2:	4c1a      	ldr	r4, [pc, #104]	; (dc4c <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
    dbe4:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dbe6:	42a2      	cmp	r2, r4
    dbe8:	d320      	bcc.n	dc2c <bt_gatt_init+0x8c>
    dbea:	b100      	cbz	r0, dbee <bt_gatt_init+0x4e>
    dbec:	800b      	strh	r3, [r1, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dbee:	4c18      	ldr	r4, [pc, #96]	; (dc50 <bt_gatt_init+0xb0>)
    dbf0:	2230      	movs	r2, #48	; 0x30
    dbf2:	2100      	movs	r1, #0
    dbf4:	4620      	mov	r0, r4
    dbf6:	f017 f856 	bl	24ca6 <memset>
    dbfa:	4b16      	ldr	r3, [pc, #88]	; (dc54 <bt_gatt_init+0xb4>)
    dbfc:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dbfe:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dc00:	4c15      	ldr	r4, [pc, #84]	; (dc58 <bt_gatt_init+0xb8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dc02:	4816      	ldr	r0, [pc, #88]	; (dc5c <bt_gatt_init+0xbc>)
    dc04:	2300      	movs	r3, #0
    dc06:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dc0a:	f013 f95f 	bl	20ecc <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dc0e:	2100      	movs	r1, #0
    dc10:	f104 0020 	add.w	r0, r4, #32
    dc14:	2230      	movs	r2, #48	; 0x30
    dc16:	f017 f846 	bl	24ca6 <memset>
    dc1a:	4b11      	ldr	r3, [pc, #68]	; (dc60 <bt_gatt_init+0xc0>)
    dc1c:	6263      	str	r3, [r4, #36]	; 0x24
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    dc1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    dc22:	2102      	movs	r1, #2
}
    dc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc28:	f018 ba1d 	b.w	26066 <atomic_or>
		last_static_handle += svc->attr_count;
    dc2c:	6850      	ldr	r0, [r2, #4]
    dc2e:	4403      	add	r3, r0
    dc30:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dc32:	3208      	adds	r2, #8
    dc34:	2001      	movs	r0, #1
    dc36:	e7d6      	b.n	dbe6 <bt_gatt_init+0x46>
}
    dc38:	bd10      	pop	{r4, pc}
    dc3a:	bf00      	nop
    dc3c:	2000dc28 	.word	0x2000dc28
    dc40:	2000dc5c 	.word	0x2000dc5c
    dc44:	2000f556 	.word	0x2000f556
    dc48:	00028104 	.word	0x00028104
    dc4c:	0002813c 	.word	0x0002813c
    dc50:	2000aa58 	.word	0x2000aa58
    dc54:	00026401 	.word	0x00026401
    dc58:	2000aa88 	.word	0x2000aa88
    dc5c:	2000b0f0 	.word	0x2000b0f0
    dc60:	0000e1a5 	.word	0x0000e1a5

0000dc64 <bt_gatt_attr_get_handle>:
{
    dc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    dc68:	4603      	mov	r3, r0
    dc6a:	b148      	cbz	r0, dc80 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    dc6c:	8a00      	ldrh	r0, [r0, #16]
    dc6e:	b938      	cbnz	r0, dc80 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc70:	4912      	ldr	r1, [pc, #72]	; (dcbc <bt_gatt_attr_get_handle+0x58>)
    dc72:	f8df e04c 	ldr.w	lr, [pc, #76]	; dcc0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    dc76:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    dc78:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc7c:	4571      	cmp	r1, lr
    dc7e:	d301      	bcc.n	dc84 <bt_gatt_attr_get_handle+0x20>
}
    dc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    dc84:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    dc88:	42bb      	cmp	r3, r7
    dc8a:	d304      	bcc.n	dc96 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    dc8c:	fb0c 7206 	mla	r2, ip, r6, r7
    dc90:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    dc92:	4293      	cmp	r3, r2
    dc94:	d90e      	bls.n	dcb4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    dc96:	19a2      	adds	r2, r4, r6
    dc98:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc9a:	3108      	adds	r1, #8
    dc9c:	4614      	mov	r4, r2
    dc9e:	e7ed      	b.n	dc7c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    dca0:	fb0c 7805 	mla	r8, ip, r5, r7
    dca4:	4543      	cmp	r3, r8
    dca6:	d007      	beq.n	dcb8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    dca8:	3501      	adds	r5, #1
    dcaa:	1962      	adds	r2, r4, r5
    dcac:	42b5      	cmp	r5, r6
    dcae:	b292      	uxth	r2, r2
    dcb0:	d1f6      	bne.n	dca0 <bt_gatt_attr_get_handle+0x3c>
    dcb2:	e7f2      	b.n	dc9a <bt_gatt_attr_get_handle+0x36>
    dcb4:	2500      	movs	r5, #0
    dcb6:	e7f8      	b.n	dcaa <bt_gatt_attr_get_handle+0x46>
    dcb8:	4610      	mov	r0, r2
    dcba:	e7e1      	b.n	dc80 <bt_gatt_attr_get_handle+0x1c>
    dcbc:	00028104 	.word	0x00028104
    dcc0:	0002813c 	.word	0x0002813c

0000dcc4 <bt_gatt_foreach_attr_type>:
{
    dcc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcc8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    dccc:	9100      	str	r1, [sp, #0]
    dcce:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    dcd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dcd4:	2d00      	cmp	r5, #0
    dcd6:	bf08      	it	eq
    dcd8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    dcda:	4b24      	ldr	r3, [pc, #144]	; (dd6c <bt_gatt_foreach_attr_type+0xa8>)
    dcdc:	881b      	ldrh	r3, [r3, #0]
    dcde:	4283      	cmp	r3, r0
{
    dce0:	4607      	mov	r7, r0
    dce2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    dce4:	d23c      	bcs.n	dd60 <bt_gatt_foreach_attr_type+0x9c>
}
    dce6:	b003      	add	sp, #12
    dce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    dcec:	6873      	ldr	r3, [r6, #4]
    dcee:	4423      	add	r3, r4
    dcf0:	42bb      	cmp	r3, r7
    dcf2:	d232      	bcs.n	dd5a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    dcf4:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dcf6:	3608      	adds	r6, #8
    dcf8:	4b1d      	ldr	r3, [pc, #116]	; (dd70 <bt_gatt_foreach_attr_type+0xac>)
    dcfa:	429e      	cmp	r6, r3
    dcfc:	d3f6      	bcc.n	dcec <bt_gatt_foreach_attr_type+0x28>
    dcfe:	e7f2      	b.n	dce6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dd00:	5889      	ldr	r1, [r1, r2]
    dd02:	9301      	str	r3, [sp, #4]
    dd04:	4640      	mov	r0, r8
    dd06:	f017 f8c3 	bl	24e90 <bt_uuid_cmp>
    dd0a:	9b01      	ldr	r3, [sp, #4]
    dd0c:	b190      	cbz	r0, dd34 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dd0e:	3401      	adds	r4, #1
    dd10:	f10a 0a01 	add.w	sl, sl, #1
    dd14:	b2a4      	uxth	r4, r4
    dd16:	6873      	ldr	r3, [r6, #4]
    dd18:	4553      	cmp	r3, sl
    dd1a:	d9ec      	bls.n	dcf6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    dd1c:	9b00      	ldr	r3, [sp, #0]
    dd1e:	429c      	cmp	r4, r3
    dd20:	d8e1      	bhi.n	dce6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    dd22:	42bc      	cmp	r4, r7
    dd24:	d3f3      	bcc.n	dd0e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dd26:	6831      	ldr	r1, [r6, #0]
    dd28:	fb0b f20a 	mul.w	r2, fp, sl
    dd2c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dd2e:	f1b8 0f00 	cmp.w	r8, #0
    dd32:	d1e5      	bne.n	dd00 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    dd34:	f1b9 0f00 	cmp.w	r9, #0
    dd38:	d10b      	bne.n	dd52 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    dd3a:	3d01      	subs	r5, #1
    dd3c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    dd3e:	4618      	mov	r0, r3
    dd40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd44:	4621      	mov	r1, r4
    dd46:	4798      	blx	r3
	if (!*num_matches) {
    dd48:	2d00      	cmp	r5, #0
    dd4a:	d0cc      	beq.n	dce6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dd4c:	2800      	cmp	r0, #0
    dd4e:	d1de      	bne.n	dd0e <bt_gatt_foreach_attr_type+0x4a>
    dd50:	e7c9      	b.n	dce6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    dd52:	68da      	ldr	r2, [r3, #12]
    dd54:	4591      	cmp	r9, r2
    dd56:	d1da      	bne.n	dd0e <bt_gatt_foreach_attr_type+0x4a>
    dd58:	e7ef      	b.n	dd3a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dd5a:	f04f 0a00 	mov.w	sl, #0
    dd5e:	e7da      	b.n	dd16 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dd60:	4e04      	ldr	r6, [pc, #16]	; (dd74 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    dd62:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dd64:	f04f 0b14 	mov.w	fp, #20
    dd68:	e7c6      	b.n	dcf8 <bt_gatt_foreach_attr_type+0x34>
    dd6a:	bf00      	nop
    dd6c:	2000f556 	.word	0x2000f556
    dd70:	0002813c 	.word	0x0002813c
    dd74:	00028104 	.word	0x00028104

0000dd78 <db_hash_gen>:
{
    dd78:	b530      	push	{r4, r5, lr}
    dd7a:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    dd7c:	2300      	movs	r3, #0
{
    dd7e:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dd80:	aa1c      	add	r2, sp, #112	; 0x70
    dd82:	4669      	mov	r1, sp
    dd84:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    dd86:	e9cd 3300 	strd	r3, r3, [sp]
    dd8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dd8e:	f016 fdb7 	bl	24900 <tc_cmac_setup>
    dd92:	b958      	cbnz	r0, ddac <db_hash_gen+0x34>
    dd94:	4918      	ldr	r1, [pc, #96]	; (ddf8 <db_hash_gen+0x80>)
    dd96:	4b19      	ldr	r3, [pc, #100]	; (ddfc <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    dd98:	4819      	ldr	r0, [pc, #100]	; (de00 <db_hash_gen+0x88>)
    dd9a:	1ac9      	subs	r1, r1, r3
    dd9c:	08c9      	lsrs	r1, r1, #3
    dd9e:	0189      	lsls	r1, r1, #6
    dda0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    dda4:	f014 ff2e 	bl	22c04 <log_0>
}
    dda8:	b049      	add	sp, #292	; 0x124
    ddaa:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    ddac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddb0:	2001      	movs	r0, #1
    ddb2:	4a14      	ldr	r2, [pc, #80]	; (de04 <db_hash_gen+0x8c>)
    ddb4:	ab04      	add	r3, sp, #16
    ddb6:	f018 fb18 	bl	263ea <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ddba:	4813      	ldr	r0, [pc, #76]	; (de08 <db_hash_gen+0x90>)
    ddbc:	a904      	add	r1, sp, #16
    ddbe:	f016 fe35 	bl	24a2c <tc_cmac_final>
    ddc2:	b940      	cbnz	r0, ddd6 <db_hash_gen+0x5e>
    ddc4:	490c      	ldr	r1, [pc, #48]	; (ddf8 <db_hash_gen+0x80>)
    ddc6:	4b0d      	ldr	r3, [pc, #52]	; (ddfc <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    ddc8:	4810      	ldr	r0, [pc, #64]	; (de0c <db_hash_gen+0x94>)
    ddca:	1ac9      	subs	r1, r1, r3
    ddcc:	08c9      	lsrs	r1, r1, #3
    ddce:	0189      	lsls	r1, r1, #6
    ddd0:	f041 0101 	orr.w	r1, r1, #1
    ddd4:	e7e6      	b.n	dda4 <db_hash_gen+0x2c>
    ddd6:	4b0c      	ldr	r3, [pc, #48]	; (de08 <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ddd8:	2208      	movs	r2, #8
    ddda:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    ddde:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    dde0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    dde4:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    dde8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    ddea:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    ddec:	d1f7      	bne.n	ddde <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    ddee:	2c00      	cmp	r4, #0
    ddf0:	d0da      	beq.n	dda8 <db_hash_gen+0x30>
		db_hash_store();
    ddf2:	f7ff f979 	bl	d0e8 <db_hash_store>
    ddf6:	e7d7      	b.n	dda8 <db_hash_gen+0x30>
    ddf8:	00028274 	.word	0x00028274
    ddfc:	000281b4 	.word	0x000281b4
    de00:	0002daa5 	.word	0x0002daa5
    de04:	00025fbb 	.word	0x00025fbb
    de08:	2000fb08 	.word	0x2000fb08
    de0c:	0002dabe 	.word	0x0002dabe

0000de10 <db_hash_commit>:
{
    de10:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    de12:	4820      	ldr	r0, [pc, #128]	; (de94 <db_hash_commit+0x84>)
    de14:	f019 fe45 	bl	27aa2 <k_delayed_work_cancel>
	if (!err) {
    de18:	b908      	cbnz	r0, de1e <db_hash_commit+0xe>
		db_hash_gen(false);
    de1a:	f7ff ffad 	bl	dd78 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    de1e:	491e      	ldr	r1, [pc, #120]	; (de98 <db_hash_commit+0x88>)
    de20:	481e      	ldr	r0, [pc, #120]	; (de9c <db_hash_commit+0x8c>)
    de22:	2210      	movs	r2, #16
    de24:	f016 ff03 	bl	24c2e <memcmp>
    de28:	b948      	cbnz	r0, de3e <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    de2a:	481d      	ldr	r0, [pc, #116]	; (dea0 <db_hash_commit+0x90>)
    de2c:	f019 fe39 	bl	27aa2 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    de30:	481c      	ldr	r0, [pc, #112]	; (dea4 <db_hash_commit+0x94>)
    de32:	f06f 0101 	mvn.w	r1, #1
    de36:	f018 f942 	bl	260be <atomic_and.isra.0>
}
    de3a:	2000      	movs	r0, #0
    de3c:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    de3e:	4c1a      	ldr	r4, [pc, #104]	; (dea8 <db_hash_commit+0x98>)
    de40:	2101      	movs	r1, #1
    de42:	f104 0050 	add.w	r0, r4, #80	; 0x50
    de46:	f018 f90e 	bl	26066 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    de4a:	07c2      	lsls	r2, r0, #31
    de4c:	d412      	bmi.n	de74 <db_hash_commit+0x64>
		gatt_sc.start = start;
    de4e:	4b17      	ldr	r3, [pc, #92]	; (deac <db_hash_commit+0x9c>)
    de50:	61a3      	str	r3, [r4, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    de52:	f3bf 8f5b 	dmb	ish
    de56:	6d23      	ldr	r3, [r4, #80]	; 0x50
    de58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    de5c:	079b      	lsls	r3, r3, #30
    de5e:	d406      	bmi.n	de6e <db_hash_commit+0x5e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    de60:	490f      	ldr	r1, [pc, #60]	; (dea0 <db_hash_commit+0x90>)
    de62:	4813      	ldr	r0, [pc, #76]	; (deb0 <db_hash_commit+0xa0>)
    de64:	f44f 72a4 	mov.w	r2, #328	; 0x148
    de68:	2300      	movs	r3, #0
    de6a:	f013 f82f 	bl	20ecc <k_delayed_work_submit_to_queue>
	db_hash_store();
    de6e:	f7ff f93b 	bl	d0e8 <db_hash_store>
	return 0;
    de72:	e7e2      	b.n	de3a <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    de74:	8b23      	ldrh	r3, [r4, #24]
    de76:	8b62      	ldrh	r2, [r4, #26]
    de78:	2b01      	cmp	r3, #1
    de7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    de7e:	d805      	bhi.n	de8c <db_hash_commit+0x7c>
    de80:	429a      	cmp	r2, r3
    de82:	d0f4      	beq.n	de6e <db_hash_commit+0x5e>
		*end = new_end;
    de84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    de88:	8363      	strh	r3, [r4, #26]
    de8a:	e7e2      	b.n	de52 <db_hash_commit+0x42>
	if (*end < new_end) {
    de8c:	429a      	cmp	r2, r3
		*start = new_start;
    de8e:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
    de90:	d0df      	beq.n	de52 <db_hash_commit+0x42>
    de92:	e7f7      	b.n	de84 <db_hash_commit+0x74>
    de94:	2000aa58 	.word	0x2000aa58
    de98:	2000fb08 	.word	0x2000fb08
    de9c:	2000fb18 	.word	0x2000fb18
    dea0:	2000aaa8 	.word	0x2000aaa8
    dea4:	2000aad8 	.word	0x2000aad8
    dea8:	2000aa88 	.word	0x2000aa88
    deac:	ffff0001 	.word	0xffff0001
    deb0:	2000b0f0 	.word	0x2000b0f0

0000deb4 <ccc_set_direct>:
{
    deb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    deb8:	b0b9      	sub	sp, #228	; 0xe4
    deba:	4688      	mov	r8, r1
    debc:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    debe:	4939      	ldr	r1, [pc, #228]	; (dfa4 <ccc_set_direct+0xf0>)
    dec0:	9840      	ldr	r0, [sp, #256]	; 0x100
    dec2:	466a      	mov	r2, sp
{
    dec4:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    dec6:	f015 fb49 	bl	2355c <settings_name_steq>
    deca:	b978      	cbnz	r0, deec <ccc_set_direct+0x38>
    decc:	4b36      	ldr	r3, [pc, #216]	; (dfa8 <ccc_set_direct+0xf4>)
    dece:	4937      	ldr	r1, [pc, #220]	; (dfac <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    ded0:	4837      	ldr	r0, [pc, #220]	; (dfb0 <ccc_set_direct+0xfc>)
    ded2:	1ac9      	subs	r1, r1, r3
    ded4:	08c9      	lsrs	r1, r1, #3
    ded6:	0189      	lsls	r1, r1, #6
    ded8:	f041 0101 	orr.w	r1, r1, #1
    dedc:	f014 fe92 	bl	22c04 <log_0>
			return -EINVAL;
    dee0:	f06f 0515 	mvn.w	r5, #21
}
    dee4:	4628      	mov	r0, r5
    dee6:	b039      	add	sp, #228	; 0xe4
    dee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    deec:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    deee:	a901      	add	r1, sp, #4
    def0:	4630      	mov	r0, r6
    def2:	f015 fb56 	bl	235a2 <settings_name_next>
		if (!name) {
    def6:	b96e      	cbnz	r6, df14 <ccc_set_direct+0x60>
    def8:	492c      	ldr	r1, [pc, #176]	; (dfac <ccc_set_direct+0xf8>)
    defa:	4b2b      	ldr	r3, [pc, #172]	; (dfa8 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    defc:	482d      	ldr	r0, [pc, #180]	; (dfb4 <ccc_set_direct+0x100>)
    defe:	1ac9      	subs	r1, r1, r3
    df00:	08c9      	lsrs	r1, r1, #3
    df02:	0189      	lsls	r1, r1, #6
    df04:	f041 0101 	orr.w	r1, r1, #1
    df08:	f014 fe7c 	bl	22c04 <log_0>
			return -EINVAL;
    df0c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    df10:	4625      	mov	r5, r4
    df12:	e7e7      	b.n	dee4 <ccc_set_direct+0x30>
		} else if (!next) {
    df14:	9801      	ldr	r0, [sp, #4]
    df16:	b9c8      	cbnz	r0, df4c <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    df18:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    df1c:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    df20:	4649      	mov	r1, r9
    df22:	4630      	mov	r0, r6
    df24:	f016 ff90 	bl	24e48 <bt_settings_decode_key>
		if (err) {
    df28:	4605      	mov	r5, r0
    df2a:	b1a0      	cbz	r0, df56 <ccc_set_direct+0xa2>
    df2c:	4a1e      	ldr	r2, [pc, #120]	; (dfa8 <ccc_set_direct+0xf4>)
    df2e:	4c1f      	ldr	r4, [pc, #124]	; (dfac <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    df30:	4630      	mov	r0, r6
    df32:	1aa4      	subs	r4, r4, r2
    df34:	08e4      	lsrs	r4, r4, #3
    df36:	f7f7 fb51 	bl	55dc <log_strdup>
    df3a:	01a4      	lsls	r4, r4, #6
    df3c:	f044 0401 	orr.w	r4, r4, #1
    df40:	4601      	mov	r1, r0
    df42:	4622      	mov	r2, r4
    df44:	481c      	ldr	r0, [pc, #112]	; (dfb8 <ccc_set_direct+0x104>)
    df46:	f014 fe6a 	bl	22c1e <log_1>
    df4a:	e7df      	b.n	df0c <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    df4c:	220a      	movs	r2, #10
    df4e:	2100      	movs	r1, #0
    df50:	f016 fdb0 	bl	24ab4 <strtol>
    df54:	e7e0      	b.n	df18 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    df56:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    df5a:	f1b8 0f00 	cmp.w	r8, #0
    df5e:	d01d      	beq.n	df9c <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    df60:	ae08      	add	r6, sp, #32
    df62:	22c0      	movs	r2, #192	; 0xc0
    df64:	4631      	mov	r1, r6
    df66:	4638      	mov	r0, r7
    df68:	47a0      	blx	r4
			if (len < 0) {
    df6a:	1e04      	subs	r4, r0, #0
    df6c:	da0b      	bge.n	df86 <ccc_set_direct+0xd2>
    df6e:	4b0e      	ldr	r3, [pc, #56]	; (dfa8 <ccc_set_direct+0xf4>)
    df70:	4a0e      	ldr	r2, [pc, #56]	; (dfac <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    df72:	4812      	ldr	r0, [pc, #72]	; (dfbc <ccc_set_direct+0x108>)
    df74:	1ad2      	subs	r2, r2, r3
    df76:	08d2      	lsrs	r2, r2, #3
    df78:	0192      	lsls	r2, r2, #6
    df7a:	f042 0201 	orr.w	r2, r2, #1
    df7e:	4621      	mov	r1, r4
    df80:	f014 fe4d 	bl	22c1e <log_1>
				return len;
    df84:	e7c4      	b.n	df10 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    df86:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    df88:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    df8a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    df8c:	4a0c      	ldr	r2, [pc, #48]	; (dfc0 <ccc_set_direct+0x10c>)
    df8e:	ab04      	add	r3, sp, #16
    df90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df94:	2001      	movs	r0, #1
    df96:	f018 fa28 	bl	263ea <bt_gatt_foreach_attr>
	return 0;
    df9a:	e7a3      	b.n	dee4 <ccc_set_direct+0x30>
			load.count = 0;
    df9c:	e9cd 0006 	strd	r0, r0, [sp, #24]
    dfa0:	e7f4      	b.n	df8c <ccc_set_direct+0xd8>
    dfa2:	bf00      	nop
    dfa4:	0002dad7 	.word	0x0002dad7
    dfa8:	000281b4 	.word	0x000281b4
    dfac:	00028274 	.word	0x00028274
    dfb0:	0002dade 	.word	0x0002dade
    dfb4:	0002c7db 	.word	0x0002c7db
    dfb8:	0002d9d9 	.word	0x0002d9d9
    dfbc:	0002d920 	.word	0x0002d920
    dfc0:	0000d591 	.word	0x0000d591

0000dfc4 <bt_gatt_notify_cb>:
{
    dfc4:	b530      	push	{r4, r5, lr}
    dfc6:	4b37      	ldr	r3, [pc, #220]	; (e0a4 <bt_gatt_notify_cb+0xe0>)
    dfc8:	f3bf 8f5b 	dmb	ish
    dfcc:	681b      	ldr	r3, [r3, #0]
    dfce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dfd2:	079a      	lsls	r2, r3, #30
{
    dfd4:	b08b      	sub	sp, #44	; 0x2c
    dfd6:	4604      	mov	r4, r0
    dfd8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dfda:	d55d      	bpl.n	e098 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    dfdc:	6848      	ldr	r0, [r1, #4]
    dfde:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    dfe0:	b114      	cbz	r4, dfe8 <bt_gatt_notify_cb+0x24>
    dfe2:	7b63      	ldrb	r3, [r4, #13]
    dfe4:	2b07      	cmp	r3, #7
    dfe6:	d15a      	bne.n	e09e <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    dfe8:	f7ff fe3c 	bl	dc64 <bt_gatt_attr_get_handle>
    dfec:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    dff0:	b918      	cbnz	r0, dffa <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    dff2:	f06f 0001 	mvn.w	r0, #1
}
    dff6:	b00b      	add	sp, #44	; 0x2c
    dff8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    dffa:	682a      	ldr	r2, [r5, #0]
    dffc:	b9aa      	cbnz	r2, e02a <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    dffe:	9b05      	ldr	r3, [sp, #20]
    e000:	6818      	ldr	r0, [r3, #0]
    e002:	2300      	movs	r3, #0
    e004:	f88d 3010 	strb.w	r3, [sp, #16]
    e008:	a904      	add	r1, sp, #16
    e00a:	f642 0303 	movw	r3, #10243	; 0x2803
    e00e:	f8ad 3012 	strh.w	r3, [sp, #18]
    e012:	f016 ff3d 	bl	24e90 <bt_uuid_cmp>
    e016:	b1c0      	cbz	r0, e04a <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
    e018:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    e01c:	b314      	cbz	r4, e064 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    e01e:	4601      	mov	r1, r0
    e020:	462a      	mov	r2, r5
    e022:	4620      	mov	r0, r4
    e024:	f7ff f9ae 	bl	d384 <gatt_notify>
    e028:	e7e5      	b.n	dff6 <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e02a:	a905      	add	r1, sp, #20
    e02c:	9102      	str	r1, [sp, #8]
    e02e:	491e      	ldr	r1, [pc, #120]	; (e0a8 <bt_gatt_notify_cb+0xe4>)
    e030:	9101      	str	r1, [sp, #4]
    e032:	2101      	movs	r1, #1
	found->attr = NULL;
    e034:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e036:	9100      	str	r1, [sp, #0]
    e038:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    e03c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e03e:	f7ff fe41 	bl	dcc4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    e042:	9b05      	ldr	r3, [sp, #20]
    e044:	2b00      	cmp	r3, #0
    e046:	d1da      	bne.n	dffe <bt_gatt_notify_cb+0x3a>
    e048:	e7d3      	b.n	dff2 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    e04a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    e04c:	68c3      	ldr	r3, [r0, #12]
    e04e:	799b      	ldrb	r3, [r3, #6]
    e050:	06db      	lsls	r3, r3, #27
    e052:	d402      	bmi.n	e05a <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    e054:	f06f 0015 	mvn.w	r0, #21
    e058:	e7cd      	b.n	dff6 <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    e05a:	f018 f978 	bl	2634e <bt_gatt_attr_value_handle>
    e05e:	f8ad 0018 	strh.w	r0, [sp, #24]
    e062:	e7d9      	b.n	e018 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e064:	f642 1202 	movw	r2, #10498	; 0x2902
    e068:	f8ad 2012 	strh.w	r2, [sp, #18]
    e06c:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    e06e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e072:	9202      	str	r2, [sp, #8]
    e074:	4a0d      	ldr	r2, [pc, #52]	; (e0ac <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    e076:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    e078:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e07a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    e07e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e082:	aa04      	add	r2, sp, #16
    e084:	4623      	mov	r3, r4
    e086:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    e08a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e08c:	f88d 4010 	strb.w	r4, [sp, #16]
    e090:	f7ff fe18 	bl	dcc4 <bt_gatt_foreach_attr_type>
	return data.err;
    e094:	9807      	ldr	r0, [sp, #28]
    e096:	e7ae      	b.n	dff6 <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    e098:	f06f 000a 	mvn.w	r0, #10
    e09c:	e7ab      	b.n	dff6 <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    e09e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e0a2:	e7a8      	b.n	dff6 <bt_gatt_notify_cb+0x32>
    e0a4:	20000094 	.word	0x20000094
    e0a8:	00025f4d 	.word	0x00025f4d
    e0ac:	0000d7a5 	.word	0x0000d7a5

0000e0b0 <bt_gatt_indicate>:
{
    e0b0:	b530      	push	{r4, r5, lr}
    e0b2:	4b39      	ldr	r3, [pc, #228]	; (e198 <bt_gatt_indicate+0xe8>)
    e0b4:	f3bf 8f5b 	dmb	ish
    e0b8:	681b      	ldr	r3, [r3, #0]
    e0ba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e0be:	079a      	lsls	r2, r3, #30
{
    e0c0:	b08b      	sub	sp, #44	; 0x2c
    e0c2:	4604      	mov	r4, r0
    e0c4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e0c6:	d561      	bpl.n	e18c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    e0c8:	6848      	ldr	r0, [r1, #4]
    e0ca:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e0cc:	b114      	cbz	r4, e0d4 <bt_gatt_indicate+0x24>
    e0ce:	7b63      	ldrb	r3, [r4, #13]
    e0d0:	2b07      	cmp	r3, #7
    e0d2:	d15e      	bne.n	e192 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    e0d4:	f7ff fdc6 	bl	dc64 <bt_gatt_attr_get_handle>
    e0d8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    e0dc:	b918      	cbnz	r0, e0e6 <bt_gatt_indicate+0x36>
		return -ENOENT;
    e0de:	f06f 0001 	mvn.w	r0, #1
}
    e0e2:	b00b      	add	sp, #44	; 0x2c
    e0e4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    e0e6:	682a      	ldr	r2, [r5, #0]
    e0e8:	b9ba      	cbnz	r2, e11a <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    e0ea:	9b05      	ldr	r3, [sp, #20]
    e0ec:	6818      	ldr	r0, [r3, #0]
    e0ee:	2300      	movs	r3, #0
    e0f0:	f88d 3010 	strb.w	r3, [sp, #16]
    e0f4:	a904      	add	r1, sp, #16
    e0f6:	f642 0303 	movw	r3, #10243	; 0x2803
    e0fa:	f8ad 3012 	strh.w	r3, [sp, #18]
    e0fe:	f016 fec7 	bl	24e90 <bt_uuid_cmp>
    e102:	b1d0      	cbz	r0, e13a <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
    e104:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    e108:	b324      	cbz	r4, e154 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    e10a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    e10c:	4601      	mov	r1, r0
		params->_ref = 1;
    e10e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    e110:	462a      	mov	r2, r5
    e112:	4620      	mov	r0, r4
    e114:	f7ff f8e0 	bl	d2d8 <gatt_indicate>
    e118:	e7e3      	b.n	e0e2 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e11a:	a905      	add	r1, sp, #20
    e11c:	9102      	str	r1, [sp, #8]
    e11e:	491f      	ldr	r1, [pc, #124]	; (e19c <bt_gatt_indicate+0xec>)
    e120:	9101      	str	r1, [sp, #4]
    e122:	2101      	movs	r1, #1
	found->attr = NULL;
    e124:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e126:	9100      	str	r1, [sp, #0]
    e128:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    e12c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e12e:	f7ff fdc9 	bl	dcc4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    e132:	9b05      	ldr	r3, [sp, #20]
    e134:	2b00      	cmp	r3, #0
    e136:	d1d8      	bne.n	e0ea <bt_gatt_indicate+0x3a>
    e138:	e7d1      	b.n	e0de <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    e13a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    e13c:	68c3      	ldr	r3, [r0, #12]
    e13e:	799b      	ldrb	r3, [r3, #6]
    e140:	069b      	lsls	r3, r3, #26
    e142:	d402      	bmi.n	e14a <bt_gatt_indicate+0x9a>
			return -EINVAL;
    e144:	f06f 0015 	mvn.w	r0, #21
    e148:	e7cb      	b.n	e0e2 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    e14a:	f018 f900 	bl	2634e <bt_gatt_attr_value_handle>
    e14e:	f8ad 0018 	strh.w	r0, [sp, #24]
    e152:	e7d7      	b.n	e104 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    e154:	f06f 0338 	mvn.w	r3, #56	; 0x38
    e158:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    e15a:	2302      	movs	r3, #2
    e15c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e160:	f642 1302 	movw	r3, #10498	; 0x2902
    e164:	f8ad 3012 	strh.w	r3, [sp, #18]
    e168:	ab05      	add	r3, sp, #20
    e16a:	9302      	str	r3, [sp, #8]
    e16c:	4b0c      	ldr	r3, [pc, #48]	; (e1a0 <bt_gatt_indicate+0xf0>)
    e16e:	9301      	str	r3, [sp, #4]
    e170:	2301      	movs	r3, #1
    e172:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    e174:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e176:	4623      	mov	r3, r4
    e178:	aa04      	add	r2, sp, #16
    e17a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    e17e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e180:	f88d 4010 	strb.w	r4, [sp, #16]
    e184:	f7ff fd9e 	bl	dcc4 <bt_gatt_foreach_attr_type>
	return data.err;
    e188:	9807      	ldr	r0, [sp, #28]
    e18a:	e7aa      	b.n	e0e2 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    e18c:	f06f 000a 	mvn.w	r0, #10
    e190:	e7a7      	b.n	e0e2 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    e192:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e196:	e7a4      	b.n	e0e2 <bt_gatt_indicate+0x32>
    e198:	20000094 	.word	0x20000094
    e19c:	00025f4d 	.word	0x00025f4d
    e1a0:	0000d7a5 	.word	0x0000d7a5

0000e1a4 <sc_process>:
{
    e1a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e1a6:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    e1aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e1ae:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    e1b2:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    e1b4:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    e1b8:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e1bc:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e1c0:	f06f 0101 	mvn.w	r1, #1
    e1c4:	4628      	mov	r0, r5
    e1c6:	f017 ff7a 	bl	260be <atomic_and.isra.0>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    e1ca:	4b0d      	ldr	r3, [pc, #52]	; (e200 <sc_process+0x5c>)
    e1cc:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    e1d0:	4b0c      	ldr	r3, [pc, #48]	; (e204 <sc_process+0x60>)
    e1d2:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    e1d6:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    e1d8:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    e1da:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    e1de:	2304      	movs	r3, #4
	sc->start = 0U;
    e1e0:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    e1e4:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    e1e8:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e1ec:	4631      	mov	r1, r6
    e1ee:	f7ff ff5f 	bl	e0b0 <bt_gatt_indicate>
    e1f2:	b918      	cbnz	r0, e1fc <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e1f4:	2102      	movs	r1, #2
    e1f6:	4628      	mov	r0, r5
    e1f8:	f017 ff35 	bl	26066 <atomic_or>
}
    e1fc:	b002      	add	sp, #8
    e1fe:	bd70      	pop	{r4, r5, r6, pc}
    e200:	00028c04 	.word	0x00028c04
    e204:	0000db4d 	.word	0x0000db4d

0000e208 <update_ccc>:
{
    e208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e20c:	6881      	ldr	r1, [r0, #8]
{
    e20e:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    e210:	4a42      	ldr	r2, [pc, #264]	; (e31c <update_ccc+0x114>)
    e212:	4291      	cmp	r1, r2
{
    e214:	b085      	sub	sp, #20
    e216:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e218:	d17b      	bne.n	e312 <update_ccc+0x10a>
    e21a:	4c41      	ldr	r4, [pc, #260]	; (e320 <update_ccc+0x118>)
    e21c:	4941      	ldr	r1, [pc, #260]	; (e324 <update_ccc+0x11c>)
	ccc = attr->user_data;
    e21e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    e222:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    e224:	f8df b100 	ldr.w	fp, [pc, #256]	; e328 <update_ccc+0x120>
    e228:	1a64      	subs	r4, r4, r1
    e22a:	08e4      	lsrs	r4, r4, #3
    e22c:	f108 0315 	add.w	r3, r8, #21
    e230:	ea4f 1984 	mov.w	r9, r4, lsl #6
    e234:	f108 0601 	add.w	r6, r8, #1
    e238:	9300      	str	r3, [sp, #0]
    e23a:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    e23e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    e242:	b19a      	cbz	r2, e26c <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e244:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    e248:	4632      	mov	r2, r6
    e24a:	4628      	mov	r0, r5
    e24c:	f017 f8fd 	bl	2544a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e250:	b160      	cbz	r0, e26c <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e252:	222a      	movs	r2, #42	; 0x2a
    e254:	4651      	mov	r1, sl
    e256:	4628      	mov	r0, r5
    e258:	f018 f8f0 	bl	2643c <bt_gatt_check_perm>
		if (err) {
    e25c:	b1d8      	cbz	r0, e296 <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e25e:	2803      	cmp	r0, #3
    e260:	d109      	bne.n	e276 <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    e262:	464a      	mov	r2, r9
    e264:	4651      	mov	r1, sl
    e266:	4658      	mov	r0, fp
    e268:	f014 fcd9 	bl	22c1e <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e26c:	9b00      	ldr	r3, [sp, #0]
    e26e:	360a      	adds	r6, #10
    e270:	429e      	cmp	r6, r3
    e272:	d04e      	beq.n	e312 <update_ccc+0x10a>
    e274:	e7e3      	b.n	e23e <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    e276:	2805      	cmp	r0, #5
    e278:	bf14      	ite	ne
    e27a:	2202      	movne	r2, #2
    e27c:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    e27e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    e280:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    e282:	f017 f8d7 	bl	25434 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    e286:	9a01      	ldr	r2, [sp, #4]
    e288:	4282      	cmp	r2, r0
    e28a:	d904      	bls.n	e296 <update_ccc+0x8e>
				if (data->sec < sec) {
    e28c:	7939      	ldrb	r1, [r7, #4]
    e28e:	4291      	cmp	r1, r2
    e290:	d2ec      	bcs.n	e26c <update_ccc+0x64>
					data->sec = sec;
    e292:	713a      	strb	r2, [r7, #4]
    e294:	e7ea      	b.n	e26c <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    e296:	4641      	mov	r1, r8
    e298:	4650      	mov	r0, sl
    e29a:	f017 fe36 	bl	25f0a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e29e:	4b23      	ldr	r3, [pc, #140]	; (e32c <update_ccc+0x124>)
    e2a0:	4598      	cmp	r8, r3
    e2a2:	d136      	bne.n	e312 <update_ccc+0x10a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e2a4:	7a28      	ldrb	r0, [r5, #8]
    e2a6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e2aa:	f7ff fa17 	bl	d6dc <find_sc_cfg>
	if (!cfg) {
    e2ae:	4606      	mov	r6, r0
    e2b0:	b378      	cbz	r0, e312 <update_ccc+0x10a>
	if (!(cfg->data.start || cfg->data.end)) {
    e2b2:	8902      	ldrh	r2, [r0, #8]
    e2b4:	8943      	ldrh	r3, [r0, #10]
    e2b6:	ea52 0103 	orrs.w	r1, r2, r3
    e2ba:	d02a      	beq.n	e312 <update_ccc+0x10a>
	index = bt_conn_index(conn);
    e2bc:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e2be:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e2c2:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    e2c6:	f7fd fcb9 	bl	bc3c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e2ca:	4919      	ldr	r1, [pc, #100]	; (e330 <update_ccc+0x128>)
    e2cc:	4a19      	ldr	r2, [pc, #100]	; (e334 <update_ccc+0x12c>)
    e2ce:	2318      	movs	r3, #24
    e2d0:	fb03 1300 	mla	r3, r3, r0, r1
    e2d4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e2d6:	4a18      	ldr	r2, [pc, #96]	; (e338 <update_ccc+0x130>)
    e2d8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    e2da:	aa03      	add	r2, sp, #12
    e2dc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    e2de:	2204      	movs	r2, #4
    e2e0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e2e2:	b203      	sxth	r3, r0
    e2e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e2e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e2ec:	4628      	mov	r0, r5
    e2ee:	f7ff fedf 	bl	e0b0 <bt_gatt_indicate>
    e2f2:	b128      	cbz	r0, e300 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    e2f4:	01a1      	lsls	r1, r4, #6
    e2f6:	4811      	ldr	r0, [pc, #68]	; (e33c <update_ccc+0x134>)
    e2f8:	f041 0101 	orr.w	r1, r1, #1
    e2fc:	f014 fc82 	bl	22c04 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    e300:	2204      	movs	r2, #4
    e302:	2100      	movs	r1, #0
    e304:	f106 0008 	add.w	r0, r6, #8
    e308:	f016 fccd 	bl	24ca6 <memset>
		sc_store(cfg);
    e30c:	4630      	mov	r0, r6
    e30e:	f7fe ffb1 	bl	d274 <sc_store>
}
    e312:	2001      	movs	r0, #1
    e314:	b005      	add	sp, #20
    e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e31a:	bf00      	nop
    e31c:	0000d61d 	.word	0x0000d61d
    e320:	00028274 	.word	0x00028274
    e324:	000281b4 	.word	0x000281b4
    e328:	0002daea 	.word	0x0002daea
    e32c:	200003f0 	.word	0x200003f0
    e330:	2000dc2c 	.word	0x2000dc2c
    e334:	00028c04 	.word	0x00028c04
    e338:	00026305 	.word	0x00026305
    e33c:	0002dafe 	.word	0x0002dafe

0000e340 <bt_gatt_connected>:
{
    e340:	b570      	push	{r4, r5, r6, lr}
    e342:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e344:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    e348:	4604      	mov	r4, r0
	data.conn = conn;
    e34a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    e34c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e34e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    e350:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e354:	4629      	mov	r1, r5
    e356:	f016 ff9f 	bl	25298 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e35a:	b190      	cbz	r0, e382 <bt_gatt_connected+0x42>
		if (conn->id) {
    e35c:	7a22      	ldrb	r2, [r4, #8]
    e35e:	b31a      	cbz	r2, e3a8 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e360:	ae02      	add	r6, sp, #8
    e362:	2104      	movs	r1, #4
    e364:	4630      	mov	r0, r6
    e366:	f013 ff04 	bl	22172 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e36a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e36c:	4a0f      	ldr	r2, [pc, #60]	; (e3ac <bt_gatt_connected+0x6c>)
    e36e:	2124      	movs	r1, #36	; 0x24
    e370:	a805      	add	r0, sp, #20
    e372:	462b      	mov	r3, r5
    e374:	f7fa f974 	bl	8660 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    e378:	aa05      	add	r2, sp, #20
    e37a:	490d      	ldr	r1, [pc, #52]	; (e3b0 <bt_gatt_connected+0x70>)
    e37c:	4610      	mov	r0, r2
    e37e:	f7f8 fa91 	bl	68a4 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e382:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e386:	4a0b      	ldr	r2, [pc, #44]	; (e3b4 <bt_gatt_connected+0x74>)
    e388:	ab03      	add	r3, sp, #12
    e38a:	2001      	movs	r0, #1
    e38c:	f018 f82d 	bl	263ea <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    e390:	4620      	mov	r0, r4
    e392:	f017 f84f 	bl	25434 <bt_conn_get_security>
    e396:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    e39a:	4288      	cmp	r0, r1
    e39c:	d202      	bcs.n	e3a4 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    e39e:	4620      	mov	r0, r4
    e3a0:	f017 f818 	bl	253d4 <bt_conn_set_security>
}
    e3a4:	b00e      	add	sp, #56	; 0x38
    e3a6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e3a8:	9200      	str	r2, [sp, #0]
    e3aa:	e7df      	b.n	e36c <bt_gatt_connected+0x2c>
    e3ac:	0002dada 	.word	0x0002dada
    e3b0:	0000deb5 	.word	0x0000deb5
    e3b4:	0000e209 	.word	0x0000e209

0000e3b8 <bt_gatt_encrypt_change>:
{
    e3b8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3ba:	4a06      	ldr	r2, [pc, #24]	; (e3d4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    e3bc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3be:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e3c0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    e3c6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3ca:	f018 f80e 	bl	263ea <bt_gatt_foreach_attr>
}
    e3ce:	b003      	add	sp, #12
    e3d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3d4:	0000e209 	.word	0x0000e209

0000e3d8 <db_hash_read>:
{
    e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3da:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    e3dc:	4810      	ldr	r0, [pc, #64]	; (e420 <db_hash_read+0x48>)
{
    e3de:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e3e2:	4615      	mov	r5, r2
    e3e4:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    e3e6:	f019 fb5c 	bl	27aa2 <k_delayed_work_cancel>
	if (!err) {
    e3ea:	b910      	cbnz	r0, e3f2 <db_hash_read+0x1a>
		db_hash_gen(true);
    e3ec:	2001      	movs	r0, #1
    e3ee:	f7ff fcc3 	bl	dd78 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    e3f2:	2101      	movs	r1, #1
    e3f4:	4620      	mov	r0, r4
    e3f6:	f018 f84c 	bl	26492 <bt_gatt_change_aware>
	if (offset > value_len) {
    e3fa:	2e10      	cmp	r6, #16
    e3fc:	d80c      	bhi.n	e418 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    e3fe:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    e402:	4908      	ldr	r1, [pc, #32]	; (e424 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    e404:	42bc      	cmp	r4, r7
    e406:	bfa8      	it	ge
    e408:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e40a:	4622      	mov	r2, r4
    e40c:	4431      	add	r1, r6
    e40e:	4628      	mov	r0, r5
    e410:	f016 fc1e 	bl	24c50 <memcpy>
}
    e414:	4620      	mov	r0, r4
    e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e418:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e41c:	e7fa      	b.n	e414 <db_hash_read+0x3c>
    e41e:	bf00      	nop
    e420:	2000aa58 	.word	0x2000aa58
    e424:	2000fb08 	.word	0x2000fb08

0000e428 <bt_gatt_store_ccc>:
{
    e428:	b570      	push	{r4, r5, r6, lr}
    e42a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    e42c:	2300      	movs	r3, #0
{
    e42e:	4604      	mov	r4, r0
    e430:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    e432:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    e434:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    e438:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    e43a:	4a18      	ldr	r2, [pc, #96]	; (e49c <bt_gatt_store_ccc+0x74>)
    e43c:	ab0d      	add	r3, sp, #52	; 0x34
    e43e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e442:	2001      	movs	r0, #1
    e444:	f017 ffd1 	bl	263ea <bt_gatt_foreach_attr>
	if (id) {
    e448:	b31c      	cbz	r4, e492 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    e44a:	ae03      	add	r6, sp, #12
    e44c:	4622      	mov	r2, r4
    e44e:	2104      	movs	r1, #4
    e450:	4630      	mov	r0, r6
    e452:	f013 fe8e 	bl	22172 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    e456:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e458:	4a11      	ldr	r2, [pc, #68]	; (e4a0 <bt_gatt_store_ccc+0x78>)
    e45a:	462b      	mov	r3, r5
    e45c:	2124      	movs	r1, #36	; 0x24
    e45e:	a804      	add	r0, sp, #16
    e460:	f7fa f8fe 	bl	8660 <bt_settings_encode_key>
	if (save.count) {
    e464:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    e466:	b1b2      	cbz	r2, e496 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    e468:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    e46a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    e46c:	a804      	add	r0, sp, #16
    e46e:	f7f8 f9b9 	bl	67e4 <settings_save_one>
	if (err) {
    e472:	4604      	mov	r4, r0
    e474:	b150      	cbz	r0, e48c <bt_gatt_store_ccc+0x64>
    e476:	4a0b      	ldr	r2, [pc, #44]	; (e4a4 <bt_gatt_store_ccc+0x7c>)
    e478:	4b0b      	ldr	r3, [pc, #44]	; (e4a8 <bt_gatt_store_ccc+0x80>)
    e47a:	1ad2      	subs	r2, r2, r3
    e47c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    e47e:	0192      	lsls	r2, r2, #6
    e480:	4601      	mov	r1, r0
    e482:	f042 0201 	orr.w	r2, r2, #1
    e486:	4809      	ldr	r0, [pc, #36]	; (e4ac <bt_gatt_store_ccc+0x84>)
    e488:	f014 fbc9 	bl	22c1e <log_1>
}
    e48c:	4620      	mov	r0, r4
    e48e:	b040      	add	sp, #256	; 0x100
    e490:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e492:	9400      	str	r4, [sp, #0]
    e494:	e7e0      	b.n	e458 <bt_gatt_store_ccc+0x30>
		str = NULL;
    e496:	4611      	mov	r1, r2
    e498:	e7e8      	b.n	e46c <bt_gatt_store_ccc+0x44>
    e49a:	bf00      	nop
    e49c:	0000d559 	.word	0x0000d559
    e4a0:	0002dada 	.word	0x0002dada
    e4a4:	00028274 	.word	0x00028274
    e4a8:	000281b4 	.word	0x000281b4
    e4ac:	0002db1b 	.word	0x0002db1b

0000e4b0 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
    e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4b2:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    e4b4:	ae03      	add	r6, sp, #12
{
    e4b6:	4604      	mov	r4, r0
    e4b8:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    e4ba:	9103      	str	r1, [sp, #12]
    e4bc:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    e4c0:	4a1f      	ldr	r2, [pc, #124]	; (e540 <bt_gatt_clear+0x90>)
    e4c2:	4633      	mov	r3, r6
    e4c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e4c8:	2001      	movs	r0, #1
    e4ca:	f017 ff8e 	bl	263ea <bt_gatt_foreach_attr>
		if (id) {
    e4ce:	b394      	cbz	r4, e536 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
    e4d0:	af02      	add	r7, sp, #8
    e4d2:	4622      	mov	r2, r4
    e4d4:	2104      	movs	r1, #4
    e4d6:	4638      	mov	r0, r7
    e4d8:	f013 fe4b 	bl	22172 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e4dc:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e4de:	4a19      	ldr	r2, [pc, #100]	; (e544 <bt_gatt_clear+0x94>)
    e4e0:	462b      	mov	r3, r5
    e4e2:	2124      	movs	r1, #36	; 0x24
    e4e4:	a805      	add	r0, sp, #20
    e4e6:	f7fa f8bb 	bl	8660 <bt_settings_encode_key>
		return settings_delete(key);
    e4ea:	a805      	add	r0, sp, #20
    e4ec:	f015 f832 	bl	23554 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    e4f0:	2800      	cmp	r0, #0
    e4f2:	db1e      	blt.n	e532 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
    e4f4:	4629      	mov	r1, r5
    e4f6:	4620      	mov	r0, r4
    e4f8:	f7ff f9d0 	bl	d89c <bt_gatt_clear_sc>
		if (err < 0) {
    e4fc:	2800      	cmp	r0, #0
    e4fe:	db18      	blt.n	e532 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
    e500:	4629      	mov	r1, r5
    e502:	4620      	mov	r0, r4
    e504:	f7fe ff78 	bl	d3f8 <find_cf_cfg_by_addr>
	if (cfg) {
    e508:	b108      	cbz	r0, e50e <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
    e50a:	f017 fdbb 	bl	26084 <clear_cf_cfg>
		if (id) {
    e50e:	b1a4      	cbz	r4, e53a <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
    e510:	4622      	mov	r2, r4
    e512:	2104      	movs	r1, #4
    e514:	4630      	mov	r0, r6
    e516:	f013 fe2c 	bl	22172 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e51a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    e51c:	4a0a      	ldr	r2, [pc, #40]	; (e548 <bt_gatt_clear+0x98>)
    e51e:	462b      	mov	r3, r5
    e520:	2124      	movs	r1, #36	; 0x24
    e522:	a805      	add	r0, sp, #20
    e524:	f7fa f89c 	bl	8660 <bt_settings_encode_key>
		return settings_delete(key);
    e528:	a805      	add	r0, sp, #20
    e52a:	f015 f813 	bl	23554 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    e52e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    e532:	b00f      	add	sp, #60	; 0x3c
    e534:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e536:	9400      	str	r4, [sp, #0]
    e538:	e7d1      	b.n	e4de <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e53a:	9400      	str	r4, [sp, #0]
    e53c:	e7ee      	b.n	e51c <bt_gatt_clear+0x6c>
    e53e:	bf00      	nop
    e540:	0000d531 	.word	0x0000d531
    e544:	0002dada 	.word	0x0002dada
    e548:	0002db65 	.word	0x0002db65

0000e54c <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    e54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e54e:	4604      	mov	r4, r0
    e550:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e552:	4603      	mov	r3, r0
    e554:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e558:	2001      	movs	r0, #1
    e55a:	4a3a      	ldr	r2, [pc, #232]	; (e644 <bt_gatt_disconnected+0xf8>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e55c:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e560:	f017 ff43 	bl	263ea <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e564:	7a20      	ldrb	r0, [r4, #8]
    e566:	4629      	mov	r1, r5
    e568:	f016 fe96 	bl	25298 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e56c:	2800      	cmp	r0, #0
    e56e:	d035      	beq.n	e5dc <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    e570:	4629      	mov	r1, r5
    e572:	7a20      	ldrb	r0, [r4, #8]
    e574:	f7ff ff58 	bl	e428 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    e578:	4620      	mov	r0, r4
    e57a:	f7fe fdf5 	bl	d168 <find_cf_cfg>
	if (!cfg) {
    e57e:	4606      	mov	r6, r0
    e580:	2800      	cmp	r0, #0
    e582:	d04b      	beq.n	e61c <bt_gatt_disconnected+0xd0>
		if (conn->id) {
    e584:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    e586:	3608      	adds	r6, #8
		if (conn->id) {
    e588:	2a00      	cmp	r2, #0
    e58a:	d049      	beq.n	e620 <bt_gatt_disconnected+0xd4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e58c:	af02      	add	r7, sp, #8
    e58e:	2104      	movs	r1, #4
    e590:	4638      	mov	r0, r7
    e592:	f013 fdee 	bl	22172 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e596:	9700      	str	r7, [sp, #0]
    e598:	462b      	mov	r3, r5
    e59a:	4a2b      	ldr	r2, [pc, #172]	; (e648 <bt_gatt_disconnected+0xfc>)
    e59c:	2124      	movs	r1, #36	; 0x24
    e59e:	a803      	add	r0, sp, #12
    e5a0:	f7fa f85e 	bl	8660 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    e5a4:	7a23      	ldrb	r3, [r4, #8]
    e5a6:	2701      	movs	r7, #1
    e5a8:	b93b      	cbnz	r3, e5ba <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    e5aa:	2300      	movs	r3, #0
    e5ac:	9300      	str	r3, [sp, #0]
    e5ae:	4a26      	ldr	r2, [pc, #152]	; (e648 <bt_gatt_disconnected+0xfc>)
    e5b0:	462b      	mov	r3, r5
    e5b2:	2124      	movs	r1, #36	; 0x24
    e5b4:	a803      	add	r0, sp, #12
    e5b6:	f7fa f853 	bl	8660 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    e5ba:	4631      	mov	r1, r6
    e5bc:	463a      	mov	r2, r7
    e5be:	a803      	add	r0, sp, #12
    e5c0:	f7f8 f910 	bl	67e4 <settings_save_one>
	if (err) {
    e5c4:	4601      	mov	r1, r0
    e5c6:	b148      	cbz	r0, e5dc <bt_gatt_disconnected+0x90>
    e5c8:	4a20      	ldr	r2, [pc, #128]	; (e64c <bt_gatt_disconnected+0x100>)
    e5ca:	4b21      	ldr	r3, [pc, #132]	; (e650 <bt_gatt_disconnected+0x104>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    e5cc:	4821      	ldr	r0, [pc, #132]	; (e654 <bt_gatt_disconnected+0x108>)
    e5ce:	1ad2      	subs	r2, r2, r3
    e5d0:	08d2      	lsrs	r2, r2, #3
    e5d2:	0192      	lsls	r2, r2, #6
    e5d4:	f042 0201 	orr.w	r2, r2, #1
    e5d8:	f014 fb21 	bl	22c1e <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e5dc:	7a20      	ldrb	r0, [r4, #8]
    e5de:	4629      	mov	r1, r5
    e5e0:	f016 fe5a 	bl	25298 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e5e4:	b150      	cbz	r0, e5fc <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    e5e6:	7a23      	ldrb	r3, [r4, #8]
    e5e8:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e5ec:	4a1a      	ldr	r2, [pc, #104]	; (e658 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
    e5ee:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e5f0:	ab03      	add	r3, sp, #12
    e5f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5f6:	2001      	movs	r0, #1
    e5f8:	f017 fef7 	bl	263ea <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    e5fc:	4620      	mov	r0, r4
    e5fe:	f7fe fdb3 	bl	d168 <find_cf_cfg>
	if (!cfg) {
    e602:	4606      	mov	r6, r0
    e604:	b1d8      	cbz	r0, e63e <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e606:	7a20      	ldrb	r0, [r4, #8]
    e608:	4629      	mov	r1, r5
    e60a:	f016 fe45 	bl	25298 <bt_addr_le_is_bonded>
    e60e:	b948      	cbnz	r0, e624 <bt_gatt_disconnected+0xd8>
		clear_cf_cfg(cfg);
    e610:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e612:	b00d      	add	sp, #52	; 0x34
    e614:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
    e618:	f017 bd34 	b.w	26084 <clear_cf_cfg>
		len = 0;
    e61c:	4607      	mov	r7, r0
    e61e:	e7c4      	b.n	e5aa <bt_gatt_disconnected+0x5e>
    e620:	2701      	movs	r7, #1
    e622:	e7c2      	b.n	e5aa <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e624:	4629      	mov	r1, r5
    e626:	1c70      	adds	r0, r6, #1
    e628:	f017 fc96 	bl	25f58 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e62c:	f06f 0102 	mvn.w	r1, #2
    e630:	f106 000c 	add.w	r0, r6, #12
}
    e634:	b00d      	add	sp, #52	; 0x34
    e636:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e63a:	f017 bd40 	b.w	260be <atomic_and.isra.0>
    e63e:	b00d      	add	sp, #52	; 0x34
    e640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e642:	bf00      	nop
    e644:	0000d965 	.word	0x0000d965
    e648:	0002db65 	.word	0x0002db65
    e64c:	00028274 	.word	0x00028274
    e650:	000281b4 	.word	0x000281b4
    e654:	0002db39 	.word	0x0002db39
    e658:	0000d531 	.word	0x0000d531

0000e65c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    e65c:	4b10      	ldr	r3, [pc, #64]	; (e6a0 <get_io_capa+0x44>)
    e65e:	681b      	ldr	r3, [r3, #0]
    e660:	b1bb      	cbz	r3, e692 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    e662:	681a      	ldr	r2, [r3, #0]
    e664:	b142      	cbz	r2, e678 <get_io_capa+0x1c>
    e666:	6859      	ldr	r1, [r3, #4]
    e668:	b131      	cbz	r1, e678 <get_io_capa+0x1c>
    e66a:	6899      	ldr	r1, [r3, #8]
    e66c:	b911      	cbnz	r1, e674 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    e66e:	490d      	ldr	r1, [pc, #52]	; (e6a4 <get_io_capa+0x48>)
    e670:	7809      	ldrb	r1, [r1, #0]
    e672:	b939      	cbnz	r1, e684 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    e674:	2004      	movs	r0, #4
    e676:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    e678:	490a      	ldr	r1, [pc, #40]	; (e6a4 <get_io_capa+0x48>)
    e67a:	7809      	ldrb	r1, [r1, #0]
    e67c:	b111      	cbz	r1, e684 <get_io_capa+0x28>
    e67e:	b10a      	cbz	r2, e684 <get_io_capa+0x28>
    e680:	6899      	ldr	r1, [r3, #8]
    e682:	b941      	cbnz	r1, e696 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    e684:	685b      	ldr	r3, [r3, #4]
    e686:	b943      	cbnz	r3, e69a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    e688:	2a00      	cmp	r2, #0
    e68a:	bf0c      	ite	eq
    e68c:	2003      	moveq	r0, #3
    e68e:	2000      	movne	r0, #0
    e690:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    e692:	2003      	movs	r0, #3
    e694:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    e696:	2001      	movs	r0, #1
    e698:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    e69a:	2002      	movs	r0, #2
	}
}
    e69c:	4770      	bx	lr
    e69e:	bf00      	nop
    e6a0:	2000db94 	.word	0x2000db94
    e6a4:	2000fb29 	.word	0x2000fb29

0000e6a8 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
    e6a8:	b508      	push	{r3, lr}
    e6aa:	4601      	mov	r1, r0
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    e6ac:	4808      	ldr	r0, [pc, #32]	; (e6d0 <smp_find+0x28>)
    e6ae:	4b09      	ldr	r3, [pc, #36]	; (e6d4 <smp_find+0x2c>)
    e6b0:	f017 ff32 	bl	26518 <atomic_test_bit>
    e6b4:	b950      	cbnz	r0, e6cc <smp_find+0x24>
    e6b6:	f503 7025 	add.w	r0, r3, #660	; 0x294
    e6ba:	f017 ff2d 	bl	26518 <atomic_test_bit>
    e6be:	b120      	cbz	r0, e6ca <smp_find+0x22>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e6c0:	2001      	movs	r0, #1
			return &bt_smp_pool[i];
    e6c2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
    e6c6:	fb02 3000 	mla	r0, r2, r0, r3
		}
	}

	return NULL;
}
    e6ca:	bd08      	pop	{r3, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e6cc:	2000      	movs	r0, #0
    e6ce:	e7f8      	b.n	e6c2 <smp_find+0x1a>
    e6d0:	2000ab9c 	.word	0x2000ab9c
    e6d4:	2000aae0 	.word	0x2000aae0

0000e6d8 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    e6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    e6da:	1d14      	adds	r4, r2, #4
{
    e6dc:	b08b      	sub	sp, #44	; 0x2c
    e6de:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    e6e0:	588b      	ldr	r3, [r1, r2]
    e6e2:	9301      	str	r3, [sp, #4]
{
    e6e4:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    e6e6:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    e6e8:	4628      	mov	r0, r5
    e6ea:	4621      	mov	r1, r4
    e6ec:	f017 ff05 	bl	264fa <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    e6f0:	4631      	mov	r1, r6
    e6f2:	2210      	movs	r2, #16
    e6f4:	a802      	add	r0, sp, #8
    e6f6:	f017 fef6 	bl	264e6 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    e6fa:	ab06      	add	r3, sp, #24
    e6fc:	4622      	mov	r2, r4
    e6fe:	4629      	mov	r1, r5
    e700:	a802      	add	r0, sp, #8
    e702:	f017 ff12 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
    e706:	4606      	mov	r6, r0
    e708:	b160      	cbz	r0, e724 <smp_sign_buf+0x4c>
    e70a:	4910      	ldr	r1, [pc, #64]	; (e74c <smp_sign_buf+0x74>)
    e70c:	4b10      	ldr	r3, [pc, #64]	; (e750 <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    e70e:	4811      	ldr	r0, [pc, #68]	; (e754 <smp_sign_buf+0x7c>)
    e710:	1ac9      	subs	r1, r1, r3
    e712:	08c9      	lsrs	r1, r1, #3
    e714:	0189      	lsls	r1, r1, #6
    e716:	f041 0101 	orr.w	r1, r1, #1
    e71a:	f014 fa73 	bl	22c04 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    e71e:	4630      	mov	r0, r6
    e720:	b00b      	add	sp, #44	; 0x2c
    e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    e724:	a806      	add	r0, sp, #24
    e726:	2110      	movs	r1, #16
    e728:	f017 fee7 	bl	264fa <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    e72c:	2204      	movs	r2, #4
    e72e:	eb0d 0102 	add.w	r1, sp, r2
    e732:	a807      	add	r0, sp, #28
    e734:	f016 fa8c 	bl	24c50 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    e738:	4621      	mov	r1, r4
    e73a:	4628      	mov	r0, r5
    e73c:	f017 fedd 	bl	264fa <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    e740:	220c      	movs	r2, #12
    e742:	a907      	add	r1, sp, #28
    e744:	4638      	mov	r0, r7
    e746:	f016 fa83 	bl	24c50 <memcpy>
	return 0;
    e74a:	e7e8      	b.n	e71e <smp_sign_buf+0x46>
    e74c:	000282ac 	.word	0x000282ac
    e750:	000281b4 	.word	0x000281b4
    e754:	0002db76 	.word	0x0002db76

0000e758 <smp_chan_get>:
{
    e758:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e75a:	2106      	movs	r1, #6
    e75c:	f016 ffc8 	bl	256f0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e760:	4604      	mov	r4, r0
    e762:	b948      	cbnz	r0, e778 <smp_chan_get+0x20>
    e764:	4905      	ldr	r1, [pc, #20]	; (e77c <smp_chan_get+0x24>)
    e766:	4b06      	ldr	r3, [pc, #24]	; (e780 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    e768:	4806      	ldr	r0, [pc, #24]	; (e784 <smp_chan_get+0x2c>)
    e76a:	1ac9      	subs	r1, r1, r3
    e76c:	08c9      	lsrs	r1, r1, #3
    e76e:	0189      	lsls	r1, r1, #6
    e770:	f041 0101 	orr.w	r1, r1, #1
    e774:	f014 fa46 	bl	22c04 <log_0>
}
    e778:	4620      	mov	r0, r4
    e77a:	bd10      	pop	{r4, pc}
    e77c:	000282ac 	.word	0x000282ac
    e780:	000281b4 	.word	0x000281b4
    e784:	0002db8a 	.word	0x0002db8a

0000e788 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    e788:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e78a:	4b0f      	ldr	r3, [pc, #60]	; (e7c8 <bt_smp_accept+0x40>)
    e78c:	681a      	ldr	r2, [r3, #0]
    e78e:	b18a      	cbz	r2, e7b4 <bt_smp_accept+0x2c>
    e790:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
    e794:	b16a      	cbz	r2, e7b2 <bt_smp_accept+0x2a>
    e796:	4b0d      	ldr	r3, [pc, #52]	; (e7cc <bt_smp_accept+0x44>)
    e798:	4a0d      	ldr	r2, [pc, #52]	; (e7d0 <bt_smp_accept+0x48>)
    e79a:	1ad2      	subs	r2, r2, r3
    e79c:	08d2      	lsrs	r2, r2, #3
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    e79e:	0192      	lsls	r2, r2, #6
    e7a0:	4601      	mov	r1, r0
    e7a2:	f042 0201 	orr.w	r2, r2, #1
    e7a6:	480b      	ldr	r0, [pc, #44]	; (e7d4 <bt_smp_accept+0x4c>)
    e7a8:	f014 fa39 	bl	22c1e <log_1>

	return -ENOMEM;
    e7ac:	f06f 000b 	mvn.w	r0, #11
}
    e7b0:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e7b2:	2201      	movs	r2, #1
		smp->chan.chan.ops = &ops;
    e7b4:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    e7b8:	fb00 3302 	mla	r3, r0, r2, r3
    e7bc:	4a06      	ldr	r2, [pc, #24]	; (e7d8 <bt_smp_accept+0x50>)
    e7be:	605a      	str	r2, [r3, #4]
		return 0;
    e7c0:	2000      	movs	r0, #0
		*chan = &smp->chan.chan;
    e7c2:	600b      	str	r3, [r1, #0]
		return 0;
    e7c4:	e7f4      	b.n	e7b0 <bt_smp_accept+0x28>
    e7c6:	bf00      	nop
    e7c8:	2000aae0 	.word	0x2000aae0
    e7cc:	000281b4 	.word	0x000281b4
    e7d0:	000282ac 	.word	0x000282ac
    e7d4:	0002dba5 	.word	0x0002dba5
    e7d8:	00028d80 	.word	0x00028d80

0000e7dc <get_auth.constprop.0>:
	if (sc_supported) {
    e7dc:	4b0c      	ldr	r3, [pc, #48]	; (e810 <get_auth.constprop.0+0x34>)
    e7de:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    e7e0:	b510      	push	{r4, lr}
	if (sc_supported) {
    e7e2:	b17b      	cbz	r3, e804 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    e7e4:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e7e8:	f7ff ff38 	bl	e65c <get_io_capa>
	if (bondable) {
    e7ec:	4b09      	ldr	r3, [pc, #36]	; (e814 <get_auth.constprop.0+0x38>)
    e7ee:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e7f0:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    e7f2:	bf0c      	ite	eq
    e7f4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    e7f8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    e7fc:	b12b      	cbz	r3, e80a <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    e7fe:	f044 0001 	orr.w	r0, r4, #1
}
    e802:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    e804:	f000 0407 	and.w	r4, r0, #7
    e808:	e7ee      	b.n	e7e8 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    e80a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    e80e:	e7f8      	b.n	e802 <get_auth.constprop.0+0x26>
    e810:	2000fb29 	.word	0x2000fb29
    e814:	20009e68 	.word	0x20009e68

0000e818 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e818:	b513      	push	{r0, r1, r4, lr}
    e81a:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e81c:	2200      	movs	r2, #0
    e81e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e820:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e822:	460a      	mov	r2, r1
    e824:	6800      	ldr	r0, [r0, #0]
    e826:	2106      	movs	r1, #6
    e828:	f016 ff39 	bl	2569e <bt_l2cap_send_cb>
    e82c:	4805      	ldr	r0, [pc, #20]	; (e844 <smp_send.constprop.0+0x2c>)
    e82e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e832:	2300      	movs	r3, #0
    e834:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    e838:	b002      	add	sp, #8
    e83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e83e:	f012 bb45 	b.w	20ecc <k_delayed_work_submit_to_queue>
    e842:	bf00      	nop
    e844:	2000b0f0 	.word	0x2000b0f0

0000e848 <smp_init>:
{
    e848:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e84a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    e84e:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e850:	22f0      	movs	r2, #240	; 0xf0
    e852:	2100      	movs	r1, #0
    e854:	4628      	mov	r0, r5
    e856:	f016 fa26 	bl	24ca6 <memset>
	if (bt_rand(smp->prnd, 16)) {
    e85a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    e85e:	2110      	movs	r1, #16
    e860:	f004 ff18 	bl	13694 <bt_rand>
    e864:	4604      	mov	r4, r0
    e866:	b948      	cbnz	r0, e87c <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e868:	2105      	movs	r1, #5
    e86a:	4628      	mov	r0, r5
    e86c:	f017 fefb 	bl	26666 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    e870:	f7fc fbf4 	bl	b05c <bt_pub_key_get>
    e874:	4b02      	ldr	r3, [pc, #8]	; (e880 <smp_init+0x38>)
    e876:	6018      	str	r0, [r3, #0]
}
    e878:	4620      	mov	r0, r4
    e87a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e87c:	2408      	movs	r4, #8
    e87e:	e7fb      	b.n	e878 <smp_init+0x30>
    e880:	2000dc60 	.word	0x2000dc60

0000e884 <smp_dhkey_generate>:
{
    e884:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e886:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    e88a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e88c:	2108      	movs	r1, #8
    e88e:	4628      	mov	r0, r5
    e890:	f017 fee9 	bl	26666 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    e894:	490a      	ldr	r1, [pc, #40]	; (e8c0 <smp_dhkey_generate+0x3c>)
    e896:	f204 100f 	addw	r0, r4, #271	; 0x10f
    e89a:	f7fc fbed 	bl	b078 <bt_dh_key_gen>
	if (err) {
    e89e:	b170      	cbz	r0, e8be <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e8a0:	2108      	movs	r1, #8
    e8a2:	4628      	mov	r0, r5
    e8a4:	f017 fed0 	bl	26648 <atomic_clear_bit>
    e8a8:	4b06      	ldr	r3, [pc, #24]	; (e8c4 <smp_dhkey_generate+0x40>)
    e8aa:	4907      	ldr	r1, [pc, #28]	; (e8c8 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    e8ac:	4807      	ldr	r0, [pc, #28]	; (e8cc <smp_dhkey_generate+0x48>)
    e8ae:	1ac9      	subs	r1, r1, r3
    e8b0:	08c9      	lsrs	r1, r1, #3
    e8b2:	0189      	lsls	r1, r1, #6
    e8b4:	f041 0101 	orr.w	r1, r1, #1
    e8b8:	f014 f9a4 	bl	22c04 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    e8bc:	2008      	movs	r0, #8
}
    e8be:	bd38      	pop	{r3, r4, r5, pc}
    e8c0:	00026b2d 	.word	0x00026b2d
    e8c4:	000281b4 	.word	0x000281b4
    e8c8:	000282ac 	.word	0x000282ac
    e8cc:	0002dbca 	.word	0x0002dbca

0000e8d0 <smp_ident_info>:
{
    e8d0:	b570      	push	{r4, r5, r6, lr}
    e8d2:	460b      	mov	r3, r1
    e8d4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e8d6:	210d      	movs	r1, #13
    e8d8:	30bc      	adds	r0, #188	; 0xbc
    e8da:	f017 fe1d 	bl	26518 <atomic_test_bit>
    e8de:	b308      	cbz	r0, e924 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e8e0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e8e2:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e8e4:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e8e8:	7a19      	ldrb	r1, [r3, #8]
    e8ea:	462a      	mov	r2, r5
    e8ec:	2002      	movs	r0, #2
    e8ee:	f018 f9b2 	bl	26c56 <bt_keys_get_type>
		if (!keys) {
    e8f2:	b990      	cbnz	r0, e91a <smp_ident_info+0x4a>
    e8f4:	4a0f      	ldr	r2, [pc, #60]	; (e934 <smp_ident_info+0x64>)
    e8f6:	4c10      	ldr	r4, [pc, #64]	; (e938 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e8f8:	4628      	mov	r0, r5
    e8fa:	1aa4      	subs	r4, r4, r2
    e8fc:	f7f9 fc02 	bl	8104 <bt_addr_le_str_real>
    e900:	f7f6 fe6c 	bl	55dc <log_strdup>
    e904:	08e4      	lsrs	r4, r4, #3
    e906:	01a4      	lsls	r4, r4, #6
    e908:	f044 0401 	orr.w	r4, r4, #1
    e90c:	4601      	mov	r1, r0
    e90e:	4622      	mov	r2, r4
    e910:	480a      	ldr	r0, [pc, #40]	; (e93c <smp_ident_info+0x6c>)
    e912:	f014 f984 	bl	22c1e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e916:	2008      	movs	r0, #8
}
    e918:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e91a:	2210      	movs	r2, #16
    e91c:	4631      	mov	r1, r6
    e91e:	302a      	adds	r0, #42	; 0x2a
    e920:	f016 f996 	bl	24c50 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e924:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e928:	2109      	movs	r1, #9
    e92a:	f017 fe9c 	bl	26666 <atomic_set_bit>
	return 0;
    e92e:	2000      	movs	r0, #0
    e930:	e7f2      	b.n	e918 <smp_ident_info+0x48>
    e932:	bf00      	nop
    e934:	000281b4 	.word	0x000281b4
    e938:	000282ac 	.word	0x000282ac
    e93c:	0002dbe3 	.word	0x0002dbe3

0000e940 <smp_encrypt_info>:
{
    e940:	b570      	push	{r4, r5, r6, lr}
    e942:	460b      	mov	r3, r1
    e944:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e946:	210d      	movs	r1, #13
    e948:	30bc      	adds	r0, #188	; 0xbc
    e94a:	f017 fde5 	bl	26518 <atomic_test_bit>
    e94e:	b308      	cbz	r0, e994 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e950:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e952:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e954:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e958:	7a19      	ldrb	r1, [r3, #8]
    e95a:	462a      	mov	r2, r5
    e95c:	2004      	movs	r0, #4
    e95e:	f018 f97a 	bl	26c56 <bt_keys_get_type>
		if (!keys) {
    e962:	b990      	cbnz	r0, e98a <smp_encrypt_info+0x4a>
    e964:	4a0f      	ldr	r2, [pc, #60]	; (e9a4 <smp_encrypt_info+0x64>)
    e966:	4c10      	ldr	r4, [pc, #64]	; (e9a8 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e968:	4628      	mov	r0, r5
    e96a:	1aa4      	subs	r4, r4, r2
    e96c:	f7f9 fbca 	bl	8104 <bt_addr_le_str_real>
    e970:	f7f6 fe34 	bl	55dc <log_strdup>
    e974:	08e4      	lsrs	r4, r4, #3
    e976:	01a4      	lsls	r4, r4, #6
    e978:	f044 0401 	orr.w	r4, r4, #1
    e97c:	4601      	mov	r1, r0
    e97e:	4622      	mov	r2, r4
    e980:	480a      	ldr	r0, [pc, #40]	; (e9ac <smp_encrypt_info+0x6c>)
    e982:	f014 f94c 	bl	22c1e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e986:	2008      	movs	r0, #8
}
    e988:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e98a:	2210      	movs	r2, #16
    e98c:	4631      	mov	r1, r6
    e98e:	301a      	adds	r0, #26
    e990:	f016 f95e 	bl	24c50 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e994:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e998:	2107      	movs	r1, #7
    e99a:	f017 fe64 	bl	26666 <atomic_set_bit>
	return 0;
    e99e:	2000      	movs	r0, #0
    e9a0:	e7f2      	b.n	e988 <smp_encrypt_info+0x48>
    e9a2:	bf00      	nop
    e9a4:	000281b4 	.word	0x000281b4
    e9a8:	000282ac 	.word	0x000282ac
    e9ac:	0002dbe3 	.word	0x0002dbe3

0000e9b0 <smp_pairing_req>:
{
    e9b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e9b4:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e9b6:	78fb      	ldrb	r3, [r7, #3]
    e9b8:	3b07      	subs	r3, #7
    e9ba:	2b09      	cmp	r3, #9
{
    e9bc:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e9be:	d904      	bls.n	e9ca <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e9c0:	2706      	movs	r7, #6
}
    e9c2:	4638      	mov	r0, r7
    e9c4:	b002      	add	sp, #8
    e9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e9ca:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    e9cc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    e9d0:	b163      	cbz	r3, e9ec <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e9d2:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    e9d6:	210f      	movs	r1, #15
    e9d8:	4628      	mov	r0, r5
    e9da:	f017 fd9d 	bl	26518 <atomic_test_bit>
    e9de:	b980      	cbnz	r0, ea02 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    e9e0:	4620      	mov	r0, r4
    e9e2:	f7ff ff31 	bl	e848 <smp_init>
		if (ret) {
    e9e6:	b160      	cbz	r0, ea02 <smp_pairing_req+0x52>
			return ret;
    e9e8:	b2c7      	uxtb	r7, r0
    e9ea:	e7ea      	b.n	e9c2 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e9ec:	7a30      	ldrb	r0, [r6, #8]
    e9ee:	f106 0188 	add.w	r1, r6, #136	; 0x88
    e9f2:	f001 fc77 	bl	102e4 <bt_keys_get_addr>
    e9f6:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    e9fa:	2800      	cmp	r0, #0
    e9fc:	d1e9      	bne.n	e9d2 <smp_pairing_req+0x22>
	switch (conn->required_sec_level) {
    e9fe:	2708      	movs	r7, #8
    ea00:	e7df      	b.n	e9c2 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ea02:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    ea04:	2206      	movs	r2, #6
    ea06:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ea08:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    ea0c:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    ea10:	f016 f91e 	bl	24c50 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ea14:	2302      	movs	r3, #2
    ea16:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    ea1a:	78b8      	ldrb	r0, [r7, #2]
    ea1c:	f7ff fede 	bl	e7dc <get_auth.constprop.0>
    ea20:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    ea24:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    ea26:	f7ff fe19 	bl	e65c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ea2a:	4b9e      	ldr	r3, [pc, #632]	; (eca4 <smp_pairing_req+0x2f4>)
	rsp->io_capability = get_io_capa();
    ea2c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ea30:	781b      	ldrb	r3, [r3, #0]
    ea32:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    ea36:	2310      	movs	r3, #16
    ea38:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    ea3c:	793b      	ldrb	r3, [r7, #4]
    ea3e:	f003 0307 	and.w	r3, r3, #7
    ea42:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    ea46:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ea48:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    ea4c:	f003 0307 	and.w	r3, r3, #7
    ea50:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ea54:	d012      	beq.n	ea7c <smp_pairing_req+0xcc>
    ea56:	78bb      	ldrb	r3, [r7, #2]
    ea58:	0719      	lsls	r1, r3, #28
    ea5a:	d50f      	bpl.n	ea7c <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ea5c:	2105      	movs	r1, #5
    ea5e:	4628      	mov	r0, r5
    ea60:	f017 fe01 	bl	26666 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    ea64:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    ea68:	f003 0306 	and.w	r3, r3, #6
    ea6c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    ea70:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    ea74:	f003 0306 	and.w	r3, r3, #6
    ea78:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    ea7c:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    ea80:	069a      	lsls	r2, r3, #26
    ea82:	d506      	bpl.n	ea92 <smp_pairing_req+0xe2>
    ea84:	78bb      	ldrb	r3, [r7, #2]
    ea86:	069b      	lsls	r3, r3, #26
    ea88:	d503      	bpl.n	ea92 <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ea8a:	2114      	movs	r1, #20
    ea8c:	4628      	mov	r0, r5
    ea8e:	f017 fdea 	bl	26666 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    ea92:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    ea96:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    ea9a:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    ea9e:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    eaa2:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    eaa6:	07d8      	lsls	r0, r3, #31
    eaa8:	d506      	bpl.n	eab8 <smp_pairing_req+0x108>
    eaaa:	78bb      	ldrb	r3, [r7, #2]
    eaac:	07d9      	lsls	r1, r3, #31
    eaae:	d503      	bpl.n	eab8 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    eab0:	210d      	movs	r1, #13
    eab2:	4628      	mov	r0, r5
    eab4:	f017 fdd7 	bl	26666 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    eab8:	2103      	movs	r1, #3
    eaba:	4628      	mov	r0, r5
    eabc:	f017 fdd3 	bl	26666 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eac0:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    eac2:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eac4:	f017 fd28 	bl	26518 <atomic_test_bit>
    eac8:	f8d4 8000 	ldr.w	r8, [r4]
    eacc:	2800      	cmp	r0, #0
    eace:	d15a      	bne.n	eb86 <smp_pairing_req+0x1d6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ead0:	2f04      	cmp	r7, #4
    ead2:	d879      	bhi.n	ebc8 <smp_pairing_req+0x218>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ead4:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    ead8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    eadc:	4013      	ands	r3, r2
    eade:	07da      	lsls	r2, r3, #31
    eae0:	d470      	bmi.n	ebc4 <smp_pairing_req+0x214>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    eae2:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
    eae6:	f894 00cb 	ldrb.w	r0, [r4, #203]	; 0xcb
    eaea:	4301      	orrs	r1, r0
    eaec:	f011 0104 	ands.w	r1, r1, #4
    eaf0:	d00e      	beq.n	eb10 <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    eaf2:	f7ff fdb3 	bl	e65c <get_io_capa>
    eaf6:	4b6c      	ldr	r3, [pc, #432]	; (eca8 <smp_pairing_req+0x2f8>)
    eaf8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    eafc:	441f      	add	r7, r3
    eafe:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    eb00:	2904      	cmp	r1, #4
    eb02:	d105      	bne.n	eb10 <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    eb04:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    eb08:	2b00      	cmp	r3, #0
    eb0a:	bf0c      	ite	eq
    eb0c:	2102      	moveq	r1, #2
    eb0e:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    eb10:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    eb14:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    eb18:	b93b      	cbnz	r3, eb2a <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    eb1a:	f898 0008 	ldrb.w	r0, [r8, #8]
    eb1e:	f108 0188 	add.w	r1, r8, #136	; 0x88
    eb22:	f001 fbdf 	bl	102e4 <bt_keys_get_addr>
    eb26:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    eb2a:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    eb2e:	2a00      	cmp	r2, #0
    eb30:	d163      	bne.n	ebfa <smp_pairing_req+0x24a>
	switch (conn->required_sec_level) {
    eb32:	6823      	ldr	r3, [r4, #0]
    eb34:	7a9b      	ldrb	r3, [r3, #10]
    eb36:	2b03      	cmp	r3, #3
    eb38:	d05a      	beq.n	ebf0 <smp_pairing_req+0x240>
    eb3a:	d847      	bhi.n	ebcc <smp_pairing_req+0x21c>
    eb3c:	3b01      	subs	r3, #1
    eb3e:	2b01      	cmp	r3, #1
    eb40:	f63f af5d 	bhi.w	e9fe <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eb44:	2105      	movs	r1, #5
    eb46:	4628      	mov	r0, r5
    eb48:	f017 fce6 	bl	26518 <atomic_test_bit>
    eb4c:	2800      	cmp	r0, #0
    eb4e:	f040 8104 	bne.w	ed5a <smp_pairing_req+0x3aa>
	struct bt_conn *conn = smp->chan.chan.conn;
    eb52:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    eb54:	f106 0188 	add.w	r1, r6, #136	; 0x88
    eb58:	7a30      	ldrb	r0, [r6, #8]
    eb5a:	f001 fd1b 	bl	10594 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    eb5e:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    eb62:	2800      	cmp	r0, #0
    eb64:	d067      	beq.n	ec36 <smp_pairing_req+0x286>
    eb66:	7b43      	ldrb	r3, [r0, #13]
    eb68:	07db      	lsls	r3, r3, #31
    eb6a:	d564      	bpl.n	ec36 <smp_pairing_req+0x286>
    eb6c:	2900      	cmp	r1, #0
    eb6e:	d162      	bne.n	ec36 <smp_pairing_req+0x286>
    eb70:	4b4e      	ldr	r3, [pc, #312]	; (ecac <smp_pairing_req+0x2fc>)
    eb72:	494f      	ldr	r1, [pc, #316]	; (ecb0 <smp_pairing_req+0x300>)
		BT_ERR("JustWorks failed, authenticated keys present");
    eb74:	484f      	ldr	r0, [pc, #316]	; (ecb4 <smp_pairing_req+0x304>)
    eb76:	1ac9      	subs	r1, r1, r3
    eb78:	08c9      	lsrs	r1, r1, #3
    eb7a:	0189      	lsls	r1, r1, #6
    eb7c:	f041 0101 	orr.w	r1, r1, #1
    eb80:	f014 f840 	bl	22c04 <log_0>
	if (ret) {
    eb84:	e73b      	b.n	e9fe <smp_pairing_req+0x4e>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    eb86:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    eb8a:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    eb8e:	ea00 0302 	and.w	r3, r0, r2
    eb92:	071b      	lsls	r3, r3, #28
    eb94:	d507      	bpl.n	eba6 <smp_pairing_req+0x1f6>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    eb96:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    eb9a:	f894 c0ca 	ldrb.w	ip, [r4, #202]	; 0xca
    eb9e:	ea43 030c 	orr.w	r3, r3, ip
    eba2:	07db      	lsls	r3, r3, #31
    eba4:	d4b4      	bmi.n	eb10 <smp_pairing_req+0x160>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    eba6:	2f04      	cmp	r7, #4
    eba8:	d80e      	bhi.n	ebc8 <smp_pairing_req+0x218>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ebaa:	ea40 0102 	orr.w	r1, r0, r2
    ebae:	f011 0104 	ands.w	r1, r1, #4
    ebb2:	d0ad      	beq.n	eb10 <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    ebb4:	f7ff fd52 	bl	e65c <get_io_capa>
    ebb8:	4b3f      	ldr	r3, [pc, #252]	; (ecb8 <smp_pairing_req+0x308>)
    ebba:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    ebbe:	441f      	add	r7, r3
    ebc0:	5c39      	ldrb	r1, [r7, r0]
    ebc2:	e7a5      	b.n	eb10 <smp_pairing_req+0x160>
		return LEGACY_OOB;
    ebc4:	2106      	movs	r1, #6
    ebc6:	e7a3      	b.n	eb10 <smp_pairing_req+0x160>
		return JUST_WORKS;
    ebc8:	2100      	movs	r1, #0
    ebca:	e7a1      	b.n	eb10 <smp_pairing_req+0x160>
	switch (conn->required_sec_level) {
    ebcc:	2b04      	cmp	r3, #4
    ebce:	f47f af16 	bne.w	e9fe <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    ebd2:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ebd6:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    ebda:	4293      	cmp	r3, r2
    ebdc:	bf28      	it	cs
    ebde:	4613      	movcs	r3, r2
    ebe0:	2b10      	cmp	r3, #16
    ebe2:	f47f aeed 	bne.w	e9c0 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ebe6:	2105      	movs	r1, #5
    ebe8:	4628      	mov	r0, r5
    ebea:	f017 fc95 	bl	26518 <atomic_test_bit>
    ebee:	b190      	cbz	r0, ec16 <smp_pairing_req+0x266>
		if (smp->method == JUST_WORKS) {
    ebf0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ebf4:	2b00      	cmp	r3, #0
    ebf6:	d1a5      	bne.n	eb44 <smp_pairing_req+0x194>
    ebf8:	e00d      	b.n	ec16 <smp_pairing_req+0x266>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ebfa:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    ebfc:	f011 0f24 	tst.w	r1, #36	; 0x24
    ec00:	d097      	beq.n	eb32 <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    ec02:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ec06:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    ec0a:	7b12      	ldrb	r2, [r2, #12]
    ec0c:	4283      	cmp	r3, r0
    ec0e:	bf28      	it	cs
    ec10:	4603      	movcs	r3, r0
    ec12:	429a      	cmp	r2, r3
    ec14:	d901      	bls.n	ec1a <smp_pairing_req+0x26a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ec16:	2703      	movs	r7, #3
    ec18:	e6d3      	b.n	e9c2 <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    ec1a:	068a      	lsls	r2, r1, #26
    ec1c:	d404      	bmi.n	ec28 <smp_pairing_req+0x278>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    ec1e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ec22:	2b00      	cmp	r3, #0
    ec24:	d185      	bne.n	eb32 <smp_pairing_req+0x182>
    ec26:	e7f6      	b.n	ec16 <smp_pairing_req+0x266>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ec28:	2105      	movs	r1, #5
    ec2a:	4628      	mov	r0, r5
    ec2c:	f017 fc74 	bl	26518 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    ec30:	2800      	cmp	r0, #0
    ec32:	d1f4      	bne.n	ec1e <smp_pairing_req+0x26e>
    ec34:	e7ef      	b.n	ec16 <smp_pairing_req+0x266>
	switch (smp->method) {
    ec36:	2906      	cmp	r1, #6
    ec38:	d877      	bhi.n	ed2a <smp_pairing_req+0x37a>
    ec3a:	e8df f001 	tbb	[pc, r1]
    ec3e:	6c1b      	.short	0x6c1b
    ec40:	76767641 	.word	0x76767641
    ec44:	04          	.byte	0x04
    ec45:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    ec46:	4e1d      	ldr	r6, [pc, #116]	; (ecbc <smp_pairing_req+0x30c>)
    ec48:	6833      	ldr	r3, [r6, #0]
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	d078      	beq.n	ed40 <smp_pairing_req+0x390>
    ec4e:	68db      	ldr	r3, [r3, #12]
    ec50:	2b00      	cmp	r3, #0
    ec52:	d075      	beq.n	ed40 <smp_pairing_req+0x390>
			struct bt_conn_oob_info info = {
    ec54:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec56:	210a      	movs	r1, #10
    ec58:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    ec5a:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec5e:	f017 fd02 	bl	26666 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    ec62:	6833      	ldr	r3, [r6, #0]
    ec64:	6820      	ldr	r0, [r4, #0]
    ec66:	68db      	ldr	r3, [r3, #12]
    ec68:	a901      	add	r1, sp, #4
    ec6a:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ec6c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ec70:	2b00      	cmp	r3, #0
    ec72:	d167      	bne.n	ed44 <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ec74:	210f      	movs	r1, #15
    ec76:	4628      	mov	r0, r5
    ec78:	f017 fc4e 	bl	26518 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ec7c:	4607      	mov	r7, r0
    ec7e:	2800      	cmp	r0, #0
    ec80:	d160      	bne.n	ed44 <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ec82:	4e0e      	ldr	r6, [pc, #56]	; (ecbc <smp_pairing_req+0x30c>)
    ec84:	6833      	ldr	r3, [r6, #0]
    ec86:	2b00      	cmp	r3, #0
    ec88:	d05c      	beq.n	ed44 <smp_pairing_req+0x394>
	    bt_auth && bt_auth->pairing_confirm) {
    ec8a:	695b      	ldr	r3, [r3, #20]
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	d059      	beq.n	ed44 <smp_pairing_req+0x394>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec90:	4628      	mov	r0, r5
    ec92:	210a      	movs	r1, #10
    ec94:	f017 fce7 	bl	26666 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    ec98:	6833      	ldr	r3, [r6, #0]
    ec9a:	6820      	ldr	r0, [r4, #0]
    ec9c:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    ec9e:	4798      	blx	r3
		return 0;
    eca0:	e68f      	b.n	e9c2 <smp_pairing_req+0x12>
    eca2:	bf00      	nop
    eca4:	2000fb28 	.word	0x2000fb28
    eca8:	0002df9e 	.word	0x0002df9e
    ecac:	000281b4 	.word	0x000281b4
    ecb0:	000282ac 	.word	0x000282ac
    ecb4:	0002dbfd 	.word	0x0002dbfd
    ecb8:	0002dfb7 	.word	0x0002dfb7
    ecbc:	2000db94 	.word	0x2000db94
			if (bt_rand(&passkey, sizeof(passkey))) {
    ecc0:	2104      	movs	r1, #4
    ecc2:	eb0d 0001 	add.w	r0, sp, r1
    ecc6:	f004 fce5 	bl	13694 <bt_rand>
    ecca:	2800      	cmp	r0, #0
    eccc:	f47f ae97 	bne.w	e9fe <smp_pairing_req+0x4e>
			passkey %= 1000000;
    ecd0:	9b01      	ldr	r3, [sp, #4]
    ecd2:	4a2f      	ldr	r2, [pc, #188]	; (ed90 <smp_pairing_req+0x3e0>)
		if (bt_auth && bt_auth->passkey_display) {
    ecd4:	4f2f      	ldr	r7, [pc, #188]	; (ed94 <smp_pairing_req+0x3e4>)
			passkey %= 1000000;
    ecd6:	fbb3 f1f2 	udiv	r1, r3, r2
    ecda:	fb02 3311 	mls	r3, r2, r1, r3
    ecde:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    ece0:	683b      	ldr	r3, [r7, #0]
    ece2:	b153      	cbz	r3, ecfa <smp_pairing_req+0x34a>
    ece4:	681b      	ldr	r3, [r3, #0]
    ece6:	b143      	cbz	r3, ecfa <smp_pairing_req+0x34a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    ece8:	210b      	movs	r1, #11
    ecea:	4628      	mov	r0, r5
    ecec:	f017 fcbb 	bl	26666 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    ecf0:	683b      	ldr	r3, [r7, #0]
    ecf2:	9901      	ldr	r1, [sp, #4]
    ecf4:	681b      	ldr	r3, [r3, #0]
    ecf6:	4630      	mov	r0, r6
    ecf8:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    ecfa:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    ecfc:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    ed00:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    ed04:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ed06:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    ed0a:	0a1b      	lsrs	r3, r3, #8
    ed0c:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    ed10:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
	if (ret) {
    ed14:	e7aa      	b.n	ec6c <smp_pairing_req+0x2bc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ed16:	4628      	mov	r0, r5
    ed18:	210a      	movs	r1, #10
    ed1a:	f017 fca4 	bl	26666 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    ed1e:	4b1d      	ldr	r3, [pc, #116]	; (ed94 <smp_pairing_req+0x3e4>)
    ed20:	681b      	ldr	r3, [r3, #0]
    ed22:	4630      	mov	r0, r6
    ed24:	685b      	ldr	r3, [r3, #4]
    ed26:	4798      	blx	r3
	if (ret) {
    ed28:	e7a0      	b.n	ec6c <smp_pairing_req+0x2bc>
    ed2a:	4b1b      	ldr	r3, [pc, #108]	; (ed98 <smp_pairing_req+0x3e8>)
    ed2c:	4a1b      	ldr	r2, [pc, #108]	; (ed9c <smp_pairing_req+0x3ec>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ed2e:	481c      	ldr	r0, [pc, #112]	; (eda0 <smp_pairing_req+0x3f0>)
    ed30:	1ad2      	subs	r2, r2, r3
    ed32:	08d2      	lsrs	r2, r2, #3
    ed34:	0192      	lsls	r2, r2, #6
    ed36:	f042 0201 	orr.w	r2, r2, #1
    ed3a:	f013 ff70 	bl	22c1e <log_1>
	if (ret) {
    ed3e:	e65e      	b.n	e9fe <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    ed40:	2702      	movs	r7, #2
    ed42:	e63e      	b.n	e9c2 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ed44:	2103      	movs	r1, #3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ed46:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ed4a:	f017 fc8c 	bl	26666 <atomic_set_bit>
	return send_pairing_rsp(smp);
    ed4e:	4620      	mov	r0, r4
}
    ed50:	b002      	add	sp, #8
    ed52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    ed56:	f017 bcbb 	b.w	266d0 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ed5a:	f894 70c0 	ldrb.w	r7, [r4, #192]	; 0xc0
    ed5e:	b9a7      	cbnz	r7, ed8a <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ed60:	210f      	movs	r1, #15
    ed62:	4628      	mov	r0, r5
    ed64:	f017 fbd8 	bl	26518 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ed68:	b978      	cbnz	r0, ed8a <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ed6a:	f8df 8028 	ldr.w	r8, [pc, #40]	; ed94 <smp_pairing_req+0x3e4>
    ed6e:	f8d8 3000 	ldr.w	r3, [r8]
    ed72:	b153      	cbz	r3, ed8a <smp_pairing_req+0x3da>
	    bt_auth && bt_auth->pairing_confirm) {
    ed74:	695b      	ldr	r3, [r3, #20]
    ed76:	b143      	cbz	r3, ed8a <smp_pairing_req+0x3da>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ed78:	4628      	mov	r0, r5
    ed7a:	210a      	movs	r1, #10
    ed7c:	f017 fc73 	bl	26666 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    ed80:	f8d8 3000 	ldr.w	r3, [r8]
    ed84:	4630      	mov	r0, r6
    ed86:	695b      	ldr	r3, [r3, #20]
    ed88:	e789      	b.n	ec9e <smp_pairing_req+0x2ee>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ed8a:	210c      	movs	r1, #12
    ed8c:	e7db      	b.n	ed46 <smp_pairing_req+0x396>
    ed8e:	bf00      	nop
    ed90:	000f4240 	.word	0x000f4240
    ed94:	2000db94 	.word	0x2000db94
    ed98:	000281b4 	.word	0x000281b4
    ed9c:	000282ac 	.word	0x000282ac
    eda0:	0002dc2a 	.word	0x0002dc2a

0000eda4 <compute_and_check_and_send_slave_dhcheck>:
{
    eda4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    eda8:	2210      	movs	r2, #16
{
    edaa:	b0a3      	sub	sp, #140	; 0x8c
    edac:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    edae:	2100      	movs	r1, #0
    edb0:	eb0d 0002 	add.w	r0, sp, r2
    edb4:	f015 ff77 	bl	24ca6 <memset>
	switch (smp->method) {
    edb8:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    edbc:	2905      	cmp	r1, #5
    edbe:	f200 809a 	bhi.w	eef6 <compute_and_check_and_send_slave_dhcheck+0x152>
    edc2:	e8df f001 	tbb	[pc, r1]
    edc6:	0309      	.short	0x0309
    edc8:	8f980903 	.word	0x8f980903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    edcc:	2204      	movs	r2, #4
    edce:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    edd2:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    edd4:	f015 ff3c 	bl	24c50 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    edd8:	4b79      	ldr	r3, [pc, #484]	; (efc0 <compute_and_check_and_send_slave_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
    edda:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    edde:	aa14      	add	r2, sp, #80	; 0x50
    ede0:	f103 0630 	add.w	r6, r3, #48	; 0x30
    ede4:	6818      	ldr	r0, [r3, #0]
    ede6:	6859      	ldr	r1, [r3, #4]
    ede8:	4615      	mov	r5, r2
    edea:	c503      	stmia	r5!, {r0, r1}
    edec:	3308      	adds	r3, #8
    edee:	42b3      	cmp	r3, r6
    edf0:	462a      	mov	r2, r5
    edf2:	d1f7      	bne.n	ede4 <compute_and_check_and_send_slave_dhcheck+0x40>
    edf4:	6818      	ldr	r0, [r3, #0]
    edf6:	791b      	ldrb	r3, [r3, #4]
    edf8:	6028      	str	r0, [r5, #0]
    edfa:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    edfc:	ad0c      	add	r5, sp, #48	; 0x30
    edfe:	2220      	movs	r2, #32
    ee00:	f204 114f 	addw	r1, r4, #335	; 0x14f
    ee04:	4628      	mov	r0, r5
    ee06:	f017 fb6e 	bl	264e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ee0a:	486e      	ldr	r0, [pc, #440]	; (efc4 <compute_and_check_and_send_slave_dhcheck+0x220>)
    ee0c:	ab08      	add	r3, sp, #32
    ee0e:	2220      	movs	r2, #32
    ee10:	4629      	mov	r1, r5
    ee12:	f017 fb8a 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
    ee16:	2800      	cmp	r0, #0
    ee18:	f040 80c9 	bne.w	efae <compute_and_check_and_send_slave_dhcheck+0x20a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    ee1c:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    ee20:	2210      	movs	r2, #16
    ee22:	4639      	mov	r1, r7
    ee24:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    ee28:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    ee2c:	f017 fb5b 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    ee30:	2210      	movs	r2, #16
    ee32:	4641      	mov	r1, r8
    ee34:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    ee38:	f017 fb55 	bl	264e6 <sys_memcpy_swap>
	m[37] = a1->type;
    ee3c:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    ee40:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ee44:	2206      	movs	r2, #6
    ee46:	f109 0190 	add.w	r1, r9, #144	; 0x90
    ee4a:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    ee4e:	f017 fb4a 	bl	264e6 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    ee52:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    ee56:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    ee5a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ee5e:	2206      	movs	r2, #6
    ee60:	f109 0197 	add.w	r1, r9, #151	; 0x97
    ee64:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    ee68:	f017 fb3d 	bl	264e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ee6c:	4633      	mov	r3, r6
    ee6e:	2235      	movs	r2, #53	; 0x35
    ee70:	a914      	add	r1, sp, #80	; 0x50
    ee72:	a808      	add	r0, sp, #32
    ee74:	f017 fb59 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
    ee78:	2800      	cmp	r0, #0
    ee7a:	f040 8098 	bne.w	efae <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(mackey, 16);
    ee7e:	2110      	movs	r1, #16
    ee80:	4630      	mov	r0, r6
    ee82:	f017 fb3a 	bl	264fa <sys_mem_swap>
		   smp->tk)) {
    ee86:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    ee8a:	2301      	movs	r3, #1
    ee8c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ee90:	2235      	movs	r2, #53	; 0x35
    ee92:	464b      	mov	r3, r9
    ee94:	a914      	add	r1, sp, #80	; 0x50
    ee96:	a808      	add	r0, sp, #32
    ee98:	f017 fb47 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
    ee9c:	2800      	cmp	r0, #0
    ee9e:	f040 8086 	bne.w	efae <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(ltk, 16);
    eea2:	2110      	movs	r1, #16
    eea4:	4648      	mov	r0, r9
    eea6:	f017 fb28 	bl	264fa <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    eeaa:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    eeac:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    eeae:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    eeb2:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    eeb4:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    eeb8:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    eeba:	e9cd 2300 	strd	r2, r3, [sp]
    eebe:	9102      	str	r1, [sp, #8]
    eec0:	ab04      	add	r3, sp, #16
    eec2:	463a      	mov	r2, r7
    eec4:	4641      	mov	r1, r8
    eec6:	4630      	mov	r0, r6
    eec8:	f017 fb71 	bl	265ae <smp_f6>
    eecc:	b1f8      	cbz	r0, ef0e <compute_and_check_and_send_slave_dhcheck+0x16a>
    eece:	493e      	ldr	r1, [pc, #248]	; (efc8 <compute_and_check_and_send_slave_dhcheck+0x224>)
    eed0:	4b3e      	ldr	r3, [pc, #248]	; (efcc <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
    eed2:	483f      	ldr	r0, [pc, #252]	; (efd0 <compute_and_check_and_send_slave_dhcheck+0x22c>)
    eed4:	1ac9      	subs	r1, r1, r3
    eed6:	08c9      	lsrs	r1, r1, #3
    eed8:	0189      	lsls	r1, r1, #6
    eeda:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    eede:	f013 fe91 	bl	22c04 <log_0>
    eee2:	e012      	b.n	ef0a <compute_and_check_and_send_slave_dhcheck+0x166>
		if (smp->oobd_remote) {
    eee4:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    eee8:	2900      	cmp	r1, #0
    eeea:	f43f af75 	beq.w	edd8 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    eeee:	2210      	movs	r2, #16
    eef0:	eb0d 0002 	add.w	r0, sp, r2
    eef4:	e76e      	b.n	edd4 <compute_and_check_and_send_slave_dhcheck+0x30>
    eef6:	4a34      	ldr	r2, [pc, #208]	; (efc8 <compute_and_check_and_send_slave_dhcheck+0x224>)
    eef8:	4b34      	ldr	r3, [pc, #208]	; (efcc <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    eefa:	4836      	ldr	r0, [pc, #216]	; (efd4 <compute_and_check_and_send_slave_dhcheck+0x230>)
    eefc:	1ad2      	subs	r2, r2, r3
    eefe:	08d2      	lsrs	r2, r2, #3
    ef00:	0192      	lsls	r2, r2, #6
    ef02:	f042 0201 	orr.w	r2, r2, #1
    ef06:	f013 fe8a 	bl	22c1e <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ef0a:	2008      	movs	r0, #8
    ef0c:	e04a      	b.n	efa4 <compute_and_check_and_send_slave_dhcheck+0x200>
	if (smp->method == LE_SC_OOB) {
    ef0e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ef12:	2b05      	cmp	r3, #5
    ef14:	d107      	bne.n	ef26 <compute_and_check_and_send_slave_dhcheck+0x182>
		if (smp->oobd_local) {
    ef16:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    ef1a:	2210      	movs	r2, #16
    ef1c:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    ef20:	b1d9      	cbz	r1, ef5a <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    ef22:	f015 fe95 	bl	24c50 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    ef26:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ef28:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    ef2a:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ef2e:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    ef30:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    ef34:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ef36:	e9cd 2300 	strd	r2, r3, [sp]
    ef3a:	9102      	str	r1, [sp, #8]
    ef3c:	ab04      	add	r3, sp, #16
    ef3e:	4642      	mov	r2, r8
    ef40:	4639      	mov	r1, r7
    ef42:	f017 fb34 	bl	265ae <smp_f6>
    ef46:	b158      	cbz	r0, ef60 <compute_and_check_and_send_slave_dhcheck+0x1bc>
    ef48:	491f      	ldr	r1, [pc, #124]	; (efc8 <compute_and_check_and_send_slave_dhcheck+0x224>)
    ef4a:	4b20      	ldr	r3, [pc, #128]	; (efcc <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
    ef4c:	4822      	ldr	r0, [pc, #136]	; (efd8 <compute_and_check_and_send_slave_dhcheck+0x234>)
    ef4e:	1ac9      	subs	r1, r1, r3
    ef50:	08c9      	lsrs	r1, r1, #3
    ef52:	0189      	lsls	r1, r1, #6
    ef54:	f041 0101 	orr.w	r1, r1, #1
    ef58:	e7c1      	b.n	eede <compute_and_check_and_send_slave_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
    ef5a:	f015 fea4 	bl	24ca6 <memset>
    ef5e:	e7e2      	b.n	ef26 <compute_and_check_and_send_slave_dhcheck+0x182>
	if (memcmp(smp->e, re, 16)) {
    ef60:	4629      	mov	r1, r5
    ef62:	2210      	movs	r2, #16
    ef64:	f204 106f 	addw	r0, r4, #367	; 0x16f
    ef68:	f015 fe61 	bl	24c2e <memcmp>
    ef6c:	4605      	mov	r5, r0
    ef6e:	b9e0      	cbnz	r0, efaa <compute_and_check_and_send_slave_dhcheck+0x206>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    ef70:	210d      	movs	r1, #13
    ef72:	4620      	mov	r0, r4
    ef74:	f017 fb8c 	bl	26690 <smp_create_pdu.constprop.0>
	if (!buf) {
    ef78:	4606      	mov	r6, r0
    ef7a:	2800      	cmp	r0, #0
    ef7c:	d0c5      	beq.n	ef0a <compute_and_check_and_send_slave_dhcheck+0x166>
    ef7e:	2110      	movs	r1, #16
    ef80:	3008      	adds	r0, #8
    ef82:	f017 fed3 	bl	26d2c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    ef86:	2210      	movs	r2, #16
    ef88:	a914      	add	r1, sp, #80	; 0x50
    ef8a:	f015 fe61 	bl	24c50 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    ef8e:	462a      	mov	r2, r5
    ef90:	4631      	mov	r1, r6
    ef92:	4620      	mov	r0, r4
    ef94:	f7ff fc40 	bl	e818 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ef98:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ef9c:	2101      	movs	r1, #1
    ef9e:	f017 fb62 	bl	26666 <atomic_set_bit>
	return 0;
    efa2:	4628      	mov	r0, r5
}
    efa4:	b023      	add	sp, #140	; 0x8c
    efa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    efaa:	200b      	movs	r0, #11
    efac:	e7fa      	b.n	efa4 <compute_and_check_and_send_slave_dhcheck+0x200>
    efae:	4906      	ldr	r1, [pc, #24]	; (efc8 <compute_and_check_and_send_slave_dhcheck+0x224>)
    efb0:	4b06      	ldr	r3, [pc, #24]	; (efcc <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
    efb2:	480a      	ldr	r0, [pc, #40]	; (efdc <compute_and_check_and_send_slave_dhcheck+0x238>)
    efb4:	1ac9      	subs	r1, r1, r3
    efb6:	08c9      	lsrs	r1, r1, #3
    efb8:	0189      	lsls	r1, r1, #6
    efba:	f041 0101 	orr.w	r1, r1, #1
    efbe:	e78e      	b.n	eede <compute_and_check_and_send_slave_dhcheck+0x13a>
    efc0:	00028404 	.word	0x00028404
    efc4:	0002dfd0 	.word	0x0002dfd0
    efc8:	000282ac 	.word	0x000282ac
    efcc:	000281b4 	.word	0x000281b4
    efd0:	0002dc46 	.word	0x0002dc46
    efd4:	0002dc2a 	.word	0x0002dc2a
    efd8:	0002dc69 	.word	0x0002dc69
    efdc:	0002dc8d 	.word	0x0002dc8d

0000efe0 <smp_send_pairing_confirm>:
{
    efe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    efe2:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    efe6:	2c02      	cmp	r4, #2
{
    efe8:	4606      	mov	r6, r0
	switch (smp->method) {
    efea:	d823      	bhi.n	f034 <smp_send_pairing_confirm+0x54>
    efec:	b144      	cbz	r4, f000 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    efee:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    eff2:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    eff6:	40dc      	lsrs	r4, r3
    eff8:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    effc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f000:	2103      	movs	r1, #3
    f002:	4630      	mov	r0, r6
    f004:	f017 fb44 	bl	26690 <smp_create_pdu.constprop.0>
	if (!buf) {
    f008:	4605      	mov	r5, r0
    f00a:	b300      	cbz	r0, f04e <smp_send_pairing_confirm+0x6e>
    f00c:	2110      	movs	r1, #16
    f00e:	3008      	adds	r0, #8
    f010:	f017 fe8c 	bl	26d2c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f014:	9000      	str	r0, [sp, #0]
    f016:	4816      	ldr	r0, [pc, #88]	; (f070 <smp_send_pairing_confirm+0x90>)
    f018:	4623      	mov	r3, r4
    f01a:	6800      	ldr	r0, [r0, #0]
    f01c:	f106 02df 	add.w	r2, r6, #223	; 0xdf
    f020:	f206 110f 	addw	r1, r6, #271	; 0x10f
    f024:	f017 fa9d 	bl	26562 <smp_f4>
    f028:	4604      	mov	r4, r0
    f02a:	b1a0      	cbz	r0, f056 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
    f02c:	4628      	mov	r0, r5
    f02e:	f00e fc21 	bl	1d874 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f032:	e00c      	b.n	f04e <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
    f034:	2c03      	cmp	r4, #3
    f036:	d00c      	beq.n	f052 <smp_send_pairing_confirm+0x72>
    f038:	4a0e      	ldr	r2, [pc, #56]	; (f074 <smp_send_pairing_confirm+0x94>)
    f03a:	4b0f      	ldr	r3, [pc, #60]	; (f078 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f03c:	480f      	ldr	r0, [pc, #60]	; (f07c <smp_send_pairing_confirm+0x9c>)
    f03e:	1ad2      	subs	r2, r2, r3
    f040:	08d2      	lsrs	r2, r2, #3
    f042:	0192      	lsls	r2, r2, #6
    f044:	f042 0201 	orr.w	r2, r2, #1
    f048:	4621      	mov	r1, r4
    f04a:	f013 fde8 	bl	22c1e <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    f04e:	2008      	movs	r0, #8
    f050:	e00c      	b.n	f06c <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    f052:	2400      	movs	r4, #0
    f054:	e7d4      	b.n	f000 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    f056:	4602      	mov	r2, r0
    f058:	4629      	mov	r1, r5
    f05a:	4630      	mov	r0, r6
    f05c:	f7ff fbdc 	bl	e818 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f060:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    f064:	4621      	mov	r1, r4
    f066:	f017 faef 	bl	26648 <atomic_clear_bit>
	return 0;
    f06a:	4620      	mov	r0, r4
}
    f06c:	b002      	add	sp, #8
    f06e:	bd70      	pop	{r4, r5, r6, pc}
    f070:	2000dc60 	.word	0x2000dc60
    f074:	000282ac 	.word	0x000282ac
    f078:	000281b4 	.word	0x000281b4
    f07c:	0002dc2a 	.word	0x0002dc2a

0000f080 <smp_public_key_slave>:
{
    f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f084:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
{
    f088:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f08a:	210e      	movs	r1, #14
    f08c:	4630      	mov	r0, r6
    f08e:	f017 fa43 	bl	26518 <atomic_test_bit>
    f092:	b998      	cbnz	r0, f0bc <smp_public_key_slave+0x3c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    f094:	4b4c      	ldr	r3, [pc, #304]	; (f1c8 <smp_public_key_slave+0x148>)
    f096:	2240      	movs	r2, #64	; 0x40
    f098:	6819      	ldr	r1, [r3, #0]
    f09a:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f09e:	f015 fdc6 	bl	24c2e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f0a2:	b958      	cbnz	r0, f0bc <smp_public_key_slave+0x3c>
    f0a4:	4949      	ldr	r1, [pc, #292]	; (f1cc <smp_public_key_slave+0x14c>)
    f0a6:	4b4a      	ldr	r3, [pc, #296]	; (f1d0 <smp_public_key_slave+0x150>)
		BT_WARN("Remote is using identical public key");
    f0a8:	484a      	ldr	r0, [pc, #296]	; (f1d4 <smp_public_key_slave+0x154>)
    f0aa:	1ac9      	subs	r1, r1, r3
    f0ac:	08c9      	lsrs	r1, r1, #3
    f0ae:	0189      	lsls	r1, r1, #6
    f0b0:	f041 0102 	orr.w	r1, r1, #2
    f0b4:	f013 fda6 	bl	22c04 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    f0b8:	2008      	movs	r0, #8
    f0ba:	e031      	b.n	f120 <smp_public_key_slave+0xa0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    f0bc:	210c      	movs	r1, #12
    f0be:	4620      	mov	r0, r4
    f0c0:	f017 fae6 	bl	26690 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f0c4:	4605      	mov	r5, r0
    f0c6:	2800      	cmp	r0, #0
    f0c8:	d0f6      	beq.n	f0b8 <smp_public_key_slave+0x38>
    f0ca:	2140      	movs	r1, #64	; 0x40
    f0cc:	3008      	adds	r0, #8
    f0ce:	f017 fe2d 	bl	26d2c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f0d2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f1c8 <smp_public_key_slave+0x148>
    f0d6:	2220      	movs	r2, #32
    f0d8:	f8d8 1000 	ldr.w	r1, [r8]
    f0dc:	4607      	mov	r7, r0
    f0de:	f015 fdb7 	bl	24c50 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    f0e2:	f8d8 1000 	ldr.w	r1, [r8]
    f0e6:	2220      	movs	r2, #32
    f0e8:	4411      	add	r1, r2
    f0ea:	18b8      	adds	r0, r7, r2
    f0ec:	f015 fdb0 	bl	24c50 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    f0f0:	4629      	mov	r1, r5
    f0f2:	2200      	movs	r2, #0
    f0f4:	4620      	mov	r0, r4
    f0f6:	f7ff fb8f 	bl	e818 <smp_send.constprop.0>
	switch (smp->method) {
    f0fa:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f0fe:	2905      	cmp	r1, #5
    f100:	d854      	bhi.n	f1ac <smp_public_key_slave+0x12c>
    f102:	e8df f001 	tbb	[pc, r1]
    f106:	3603      	.short	0x3603
    f108:	5153030f 	.word	0x5153030f
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f10c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f110:	2104      	movs	r1, #4
    f112:	f017 faa8 	bl	26666 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    f116:	4620      	mov	r0, r4
    f118:	f7ff ff62 	bl	efe0 <smp_send_pairing_confirm>
		if (err) {
    f11c:	2800      	cmp	r0, #0
    f11e:	d036      	beq.n	f18e <smp_public_key_slave+0x10e>
}
    f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    f124:	2104      	movs	r1, #4
    f126:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    f12a:	f004 fab3 	bl	13694 <bt_rand>
    f12e:	2800      	cmp	r0, #0
    f130:	d1c2      	bne.n	f0b8 <smp_public_key_slave+0x38>
		smp->passkey %= 1000000;
    f132:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    f136:	4a28      	ldr	r2, [pc, #160]	; (f1d8 <smp_public_key_slave+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
    f138:	4d28      	ldr	r5, [pc, #160]	; (f1dc <smp_public_key_slave+0x15c>)
		smp->passkey %= 1000000;
    f13a:	fbb3 f1f2 	udiv	r1, r3, r2
    f13e:	fb02 3311 	mls	r3, r2, r1, r3
    f142:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    f146:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    f148:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    f14c:	b15b      	cbz	r3, f166 <smp_public_key_slave+0xe6>
    f14e:	681b      	ldr	r3, [r3, #0]
    f150:	b14b      	cbz	r3, f166 <smp_public_key_slave+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f152:	210b      	movs	r1, #11
    f154:	4630      	mov	r0, r6
    f156:	f017 fa86 	bl	26666 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    f15a:	682b      	ldr	r3, [r5, #0]
    f15c:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    f160:	681b      	ldr	r3, [r3, #0]
    f162:	6820      	ldr	r0, [r4, #0]
    f164:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f166:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f168:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f16c:	f017 fa7b 	bl	26666 <atomic_set_bit>
		break;
    f170:	e00d      	b.n	f18e <smp_public_key_slave+0x10e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f172:	2103      	movs	r1, #3
    f174:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f178:	f017 fa75 	bl	26666 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f17c:	4630      	mov	r0, r6
    f17e:	210a      	movs	r1, #10
    f180:	f017 fa71 	bl	26666 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    f184:	4b15      	ldr	r3, [pc, #84]	; (f1dc <smp_public_key_slave+0x15c>)
    f186:	6820      	ldr	r0, [r4, #0]
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	685b      	ldr	r3, [r3, #4]
    f18c:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f18e:	4630      	mov	r0, r6
    f190:	2107      	movs	r1, #7
    f192:	f017 fa68 	bl	26666 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    f196:	2008      	movs	r0, #8
    f198:	f7ff fa86 	bl	e6a8 <smp_find>
    f19c:	b988      	cbnz	r0, f1c2 <smp_public_key_slave+0x142>
		return smp_dhkey_generate(smp);
    f19e:	4620      	mov	r0, r4
}
    f1a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    f1a4:	f7ff bb6e 	b.w	e884 <smp_dhkey_generate>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f1a8:	2104      	movs	r1, #4
    f1aa:	e7dd      	b.n	f168 <smp_public_key_slave+0xe8>
    f1ac:	4b08      	ldr	r3, [pc, #32]	; (f1d0 <smp_public_key_slave+0x150>)
    f1ae:	4a07      	ldr	r2, [pc, #28]	; (f1cc <smp_public_key_slave+0x14c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f1b0:	480b      	ldr	r0, [pc, #44]	; (f1e0 <smp_public_key_slave+0x160>)
    f1b2:	1ad2      	subs	r2, r2, r3
    f1b4:	08d2      	lsrs	r2, r2, #3
    f1b6:	0192      	lsls	r2, r2, #6
    f1b8:	f042 0201 	orr.w	r2, r2, #1
    f1bc:	f013 fd2f 	bl	22c1e <log_1>
    f1c0:	e77a      	b.n	f0b8 <smp_public_key_slave+0x38>
	return 0;
    f1c2:	2000      	movs	r0, #0
    f1c4:	e7ac      	b.n	f120 <smp_public_key_slave+0xa0>
    f1c6:	bf00      	nop
    f1c8:	2000dc60 	.word	0x2000dc60
    f1cc:	000282ac 	.word	0x000282ac
    f1d0:	000281b4 	.word	0x000281b4
    f1d4:	0002dca2 	.word	0x0002dca2
    f1d8:	000f4240 	.word	0x000f4240
    f1dc:	2000db94 	.word	0x2000db94
    f1e0:	0002dc2a 	.word	0x0002dc2a

0000f1e4 <smp_public_key>:
{
    f1e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f1e6:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f1e8:	f200 150f 	addw	r5, r0, #271	; 0x10f
{
    f1ec:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    f1ee:	2220      	movs	r2, #32
    f1f0:	4631      	mov	r1, r6
    f1f2:	4628      	mov	r0, r5
    f1f4:	f015 fd2c 	bl	24c50 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f1f8:	2220      	movs	r2, #32
    f1fa:	18b1      	adds	r1, r6, r2
    f1fc:	f204 102f 	addw	r0, r4, #303	; 0x12f
    f200:	f015 fd26 	bl	24c50 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f204:	491e      	ldr	r1, [pc, #120]	; (f280 <smp_public_key+0x9c>)
    f206:	2240      	movs	r2, #64	; 0x40
    f208:	4628      	mov	r0, r5
    f20a:	f015 fd10 	bl	24c2e <memcmp>
    f20e:	b148      	cbz	r0, f224 <smp_public_key+0x40>
	if (!sc_public_key) {
    f210:	4b1c      	ldr	r3, [pc, #112]	; (f284 <smp_public_key+0xa0>)
    f212:	681d      	ldr	r5, [r3, #0]
    f214:	bb75      	cbnz	r5, f274 <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f216:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f21a:	2106      	movs	r1, #6
    f21c:	f017 fa23 	bl	26666 <atomic_set_bit>
		return 0;
    f220:	4628      	mov	r0, r5
    f222:	e026      	b.n	f272 <smp_public_key+0x8e>
    f224:	4b18      	ldr	r3, [pc, #96]	; (f288 <smp_public_key+0xa4>)
    f226:	4919      	ldr	r1, [pc, #100]	; (f28c <smp_public_key+0xa8>)
		BT_INFO("Remote is using Debug Public key");
    f228:	4819      	ldr	r0, [pc, #100]	; (f290 <smp_public_key+0xac>)
    f22a:	1ac9      	subs	r1, r1, r3
    f22c:	08c9      	lsrs	r1, r1, #3
    f22e:	0189      	lsls	r1, r1, #6
    f230:	f041 0103 	orr.w	r1, r1, #3
    f234:	f013 fce6 	bl	22c04 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f238:	210e      	movs	r1, #14
    f23a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f23e:	f017 fa12 	bl	26666 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f242:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    f244:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f248:	b933      	cbnz	r3, f258 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f24a:	7a28      	ldrb	r0, [r5, #8]
    f24c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f250:	f001 f848 	bl	102e4 <bt_keys_get_addr>
    f254:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f258:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f25c:	2b00      	cmp	r3, #0
    f25e:	d0d7      	beq.n	f210 <smp_public_key+0x2c>
    f260:	89da      	ldrh	r2, [r3, #14]
    f262:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f266:	2a00      	cmp	r2, #0
    f268:	d0d2      	beq.n	f210 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    f26a:	7b5b      	ldrb	r3, [r3, #13]
    f26c:	079b      	lsls	r3, r3, #30
    f26e:	d4cf      	bmi.n	f210 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f270:	2003      	movs	r0, #3
}
    f272:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
    f274:	4620      	mov	r0, r4
}
    f276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    f27a:	f7ff bf01 	b.w	f080 <smp_public_key_slave>
    f27e:	bf00      	nop
    f280:	0002dfe0 	.word	0x0002dfe0
    f284:	2000dc60 	.word	0x2000dc60
    f288:	000281b4 	.word	0x000281b4
    f28c:	000282ac 	.word	0x000282ac
    f290:	0002dcc7 	.word	0x0002dcc7

0000f294 <bt_smp_connected>:
{
    f294:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    f296:	2230      	movs	r2, #48	; 0x30
    f298:	4604      	mov	r4, r0
    f29a:	2100      	movs	r1, #0
    f29c:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    f2a0:	f015 fd01 	bl	24ca6 <memset>
    f2a4:	4b03      	ldr	r3, [pc, #12]	; (f2b4 <bt_smp_connected+0x20>)
    f2a6:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	smp_reset(smp);
    f2aa:	4620      	mov	r0, r4
}
    f2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f2b0:	f017 ba83 	b.w	267ba <smp_reset>
    f2b4:	0001015d 	.word	0x0001015d

0000f2b8 <smp_pairing_confirm>:
{
    f2b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    f2ba:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f2bc:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    f2c0:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f2c2:	210b      	movs	r1, #11
    f2c4:	4628      	mov	r0, r5
    f2c6:	f017 f9bf 	bl	26648 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    f2ca:	4631      	mov	r1, r6
    f2cc:	2210      	movs	r2, #16
    f2ce:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f2d2:	f015 fcbd 	bl	24c50 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f2d6:	2105      	movs	r1, #5
    f2d8:	4628      	mov	r0, r5
    f2da:	f017 f91d 	bl	26518 <atomic_test_bit>
    f2de:	b920      	cbnz	r0, f2ea <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
    f2e0:	4620      	mov	r0, r4
}
    f2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    f2e6:	f017 bae8 	b.w	268ba <legacy_pairing_confirm>
	switch (smp->method) {
    f2ea:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f2ee:	2901      	cmp	r1, #1
    f2f0:	d00b      	beq.n	f30a <smp_pairing_confirm+0x52>
    f2f2:	2902      	cmp	r1, #2
    f2f4:	d115      	bne.n	f322 <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f2f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f2fa:	2104      	movs	r1, #4
    f2fc:	f017 f9b3 	bl	26666 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    f300:	4620      	mov	r0, r4
}
    f302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    f306:	f7ff be6b 	b.w	efe0 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f30a:	210a      	movs	r1, #10
    f30c:	4628      	mov	r0, r5
    f30e:	f017 f903 	bl	26518 <atomic_test_bit>
    f312:	2800      	cmp	r0, #0
    f314:	d0ef      	beq.n	f2f6 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f316:	4628      	mov	r0, r5
    f318:	2100      	movs	r1, #0
    f31a:	f017 f9a4 	bl	26666 <atomic_set_bit>
			return 0;
    f31e:	2000      	movs	r0, #0
}
    f320:	bd70      	pop	{r4, r5, r6, pc}
    f322:	4b06      	ldr	r3, [pc, #24]	; (f33c <smp_pairing_confirm+0x84>)
    f324:	4a06      	ldr	r2, [pc, #24]	; (f340 <smp_pairing_confirm+0x88>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f326:	4807      	ldr	r0, [pc, #28]	; (f344 <smp_pairing_confirm+0x8c>)
    f328:	1ad2      	subs	r2, r2, r3
    f32a:	08d2      	lsrs	r2, r2, #3
    f32c:	0192      	lsls	r2, r2, #6
    f32e:	f042 0201 	orr.w	r2, r2, #1
    f332:	f013 fc74 	bl	22c1e <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    f336:	2008      	movs	r0, #8
    f338:	e7f2      	b.n	f320 <smp_pairing_confirm+0x68>
    f33a:	bf00      	nop
    f33c:	000281b4 	.word	0x000281b4
    f340:	000282ac 	.word	0x000282ac
    f344:	0002dc2a 	.word	0x0002dc2a

0000f348 <smp_pairing_random>:
{
    f348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f34c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f34e:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    f352:	6889      	ldr	r1, [r1, #8]
{
    f354:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f356:	2210      	movs	r2, #16
    f358:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f35a:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f35e:	f015 fc77 	bl	24c50 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f362:	2105      	movs	r1, #5
    f364:	4630      	mov	r0, r6
    f366:	f017 f8d7 	bl	26518 <atomic_test_bit>
    f36a:	2800      	cmp	r0, #0
    f36c:	d146      	bne.n	f3fc <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    f36e:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f370:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    f372:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f376:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f378:	f103 0296 	add.w	r2, r3, #150	; 0x96
    f37c:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f37e:	9201      	str	r2, [sp, #4]
    f380:	9300      	str	r3, [sp, #0]
    f382:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    f386:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    f38a:	4639      	mov	r1, r7
    f38c:	4640      	mov	r0, r8
    f38e:	f017 fa39 	bl	26804 <smp_c1>
	if (err) {
    f392:	bb18      	cbnz	r0, f3dc <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f394:	2210      	movs	r2, #16
    f396:	4629      	mov	r1, r5
    f398:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f39c:	f015 fc47 	bl	24c2e <memcmp>
    f3a0:	2800      	cmp	r0, #0
    f3a2:	f040 8096 	bne.w	f4d2 <smp_pairing_random+0x18a>
	memcpy(out, r2, 8);
    f3a6:	2208      	movs	r2, #8
    f3a8:	4639      	mov	r1, r7
    f3aa:	4628      	mov	r0, r5
    f3ac:	f015 fc50 	bl	24c50 <memcpy>
	memcpy(out + 8, r1, 8);
    f3b0:	2208      	movs	r2, #8
    f3b2:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f3b6:	a80c      	add	r0, sp, #48	; 0x30
    f3b8:	f015 fc4a 	bl	24c50 <memcpy>
	return bt_encrypt_le(k, out, out);
    f3bc:	462a      	mov	r2, r5
    f3be:	4629      	mov	r1, r5
    f3c0:	4640      	mov	r0, r8
    f3c2:	f004 f969 	bl	13698 <bt_encrypt_le>
		if (err) {
    f3c6:	b158      	cbz	r0, f3e0 <smp_pairing_random+0x98>
    f3c8:	4976      	ldr	r1, [pc, #472]	; (f5a4 <smp_pairing_random+0x25c>)
    f3ca:	4b77      	ldr	r3, [pc, #476]	; (f5a8 <smp_pairing_random+0x260>)
			BT_ERR("Calculate STK failed");
    f3cc:	4877      	ldr	r0, [pc, #476]	; (f5ac <smp_pairing_random+0x264>)
    f3ce:	1ac9      	subs	r1, r1, r3
    f3d0:	08c9      	lsrs	r1, r1, #3
    f3d2:	0189      	lsls	r1, r1, #6
    f3d4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    f3d8:	f013 fc14 	bl	22c04 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    f3dc:	2508      	movs	r5, #8
    f3de:	e079      	b.n	f4d4 <smp_pairing_random+0x18c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    f3e0:	4629      	mov	r1, r5
    f3e2:	2210      	movs	r2, #16
    f3e4:	4640      	mov	r0, r8
    f3e6:	f015 fc33 	bl	24c50 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f3ea:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f3ec:	4630      	mov	r0, r6
    f3ee:	f017 f93a 	bl	26666 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    f3f2:	4620      	mov	r0, r4
    f3f4:	f017 f985 	bl	26702 <smp_send_pairing_random>
    f3f8:	4605      	mov	r5, r0
    f3fa:	e06b      	b.n	f4d4 <smp_pairing_random+0x18c>
	switch (smp->method) {
    f3fc:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f400:	2905      	cmp	r1, #5
    f402:	f200 80af 	bhi.w	f564 <smp_pairing_random+0x21c>
    f406:	e8df f001 	tbb	[pc, r1]
    f40a:	413a      	.short	0x413a
    f40c:	8ead0341 	.word	0x8ead0341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f410:	4b67      	ldr	r3, [pc, #412]	; (f5b0 <smp_pairing_random+0x268>)
    f412:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    f414:	2220      	movs	r2, #32
    f416:	f204 110f 	addw	r1, r4, #271	; 0x10f
    f41a:	a80a      	add	r0, sp, #40	; 0x28
    f41c:	f017 f863 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    f420:	2220      	movs	r2, #32
    f422:	4629      	mov	r1, r5
    f424:	a812      	add	r0, sp, #72	; 0x48
    f426:	f017 f85e 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    f42a:	2210      	movs	r2, #16
    f42c:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f430:	a81a      	add	r0, sp, #104	; 0x68
    f432:	f017 f858 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    f436:	2210      	movs	r2, #16
    f438:	4639      	mov	r1, r7
    f43a:	a806      	add	r0, sp, #24
    f43c:	f017 f853 	bl	264e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    f440:	ab06      	add	r3, sp, #24
    f442:	2250      	movs	r2, #80	; 0x50
    f444:	a90a      	add	r1, sp, #40	; 0x28
    f446:	4618      	mov	r0, r3
    f448:	f017 f86f 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
    f44c:	2800      	cmp	r0, #0
    f44e:	d1c5      	bne.n	f3dc <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    f450:	2204      	movs	r2, #4
    f452:	a909      	add	r1, sp, #36	; 0x24
    f454:	a805      	add	r0, sp, #20
    f456:	f015 fbfb 	bl	24c50 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f45a:	9b05      	ldr	r3, [sp, #20]
    f45c:	4a55      	ldr	r2, [pc, #340]	; (f5b4 <smp_pairing_random+0x26c>)
    f45e:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f460:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f462:	fbb3 f1f2 	udiv	r1, r3, r2
    f466:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f46a:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f46c:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f46e:	f017 f8fa 	bl	26666 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f472:	4b51      	ldr	r3, [pc, #324]	; (f5b8 <smp_pairing_random+0x270>)
    f474:	9905      	ldr	r1, [sp, #20]
    f476:	681b      	ldr	r3, [r3, #0]
    f478:	6820      	ldr	r0, [r4, #0]
    f47a:	689b      	ldr	r3, [r3, #8]
    f47c:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f47e:	210d      	movs	r1, #13
    f480:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f484:	f017 f8ef 	bl	26666 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f488:	2110      	movs	r1, #16
    f48a:	e7af      	b.n	f3ec <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f48c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    f490:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f494:	4946      	ldr	r1, [pc, #280]	; (f5b0 <smp_pairing_random+0x268>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f496:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f498:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f49a:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f49e:	9500      	str	r5, [sp, #0]
    f4a0:	6809      	ldr	r1, [r1, #0]
    f4a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f4a6:	463a      	mov	r2, r7
    f4a8:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f4ac:	f017 f859 	bl	26562 <smp_f4>
    f4b0:	b140      	cbz	r0, f4c4 <smp_pairing_random+0x17c>
    f4b2:	493c      	ldr	r1, [pc, #240]	; (f5a4 <smp_pairing_random+0x25c>)
    f4b4:	4b3c      	ldr	r3, [pc, #240]	; (f5a8 <smp_pairing_random+0x260>)
		BT_ERR("Calculate confirm failed");
    f4b6:	4841      	ldr	r0, [pc, #260]	; (f5bc <smp_pairing_random+0x274>)
    f4b8:	1ac9      	subs	r1, r1, r3
    f4ba:	08c9      	lsrs	r1, r1, #3
    f4bc:	0189      	lsls	r1, r1, #6
    f4be:	f041 0101 	orr.w	r1, r1, #1
    f4c2:	e789      	b.n	f3d8 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    f4c4:	2210      	movs	r2, #16
    f4c6:	4629      	mov	r1, r5
    f4c8:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f4cc:	f015 fbaf 	bl	24c2e <memcmp>
    f4d0:	b120      	cbz	r0, f4dc <smp_pairing_random+0x194>
		return BT_SMP_ERR_CONFIRM_FAILED;
    f4d2:	2504      	movs	r5, #4
}
    f4d4:	4628      	mov	r0, r5
    f4d6:	b01e      	add	sp, #120	; 0x78
    f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    f4dc:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    f4e0:	2103      	movs	r1, #3
    f4e2:	4638      	mov	r0, r7
    f4e4:	f017 f8bf 	bl	26666 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f4e8:	4620      	mov	r0, r4
    f4ea:	f017 f90a 	bl	26702 <smp_send_pairing_random>
		if (err) {
    f4ee:	4605      	mov	r5, r0
    f4f0:	2800      	cmp	r0, #0
    f4f2:	d1ef      	bne.n	f4d4 <smp_pairing_random+0x18c>
		smp->passkey_round++;
    f4f4:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    f4f8:	3301      	adds	r3, #1
    f4fa:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f4fc:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f4fe:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    f502:	d108      	bne.n	f516 <smp_pairing_random+0x1ce>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f504:	4638      	mov	r0, r7
    f506:	210d      	movs	r1, #13
    f508:	f017 f8ad 	bl	26666 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f50c:	2110      	movs	r1, #16
    f50e:	4630      	mov	r0, r6
    f510:	f017 f8a9 	bl	26666 <atomic_set_bit>
			return 0;
    f514:	e7de      	b.n	f4d4 <smp_pairing_random+0x18c>
		if (bt_rand(smp->prnd, 16)) {
    f516:	2110      	movs	r1, #16
    f518:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f51c:	f004 f8ba 	bl	13694 <bt_rand>
    f520:	2800      	cmp	r0, #0
    f522:	d0d7      	beq.n	f4d4 <smp_pairing_random+0x18c>
    f524:	e75a      	b.n	f3dc <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    f526:	2110      	movs	r1, #16
    f528:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f52c:	f004 f8b2 	bl	13694 <bt_rand>
    f530:	2800      	cmp	r0, #0
    f532:	f47f af53 	bne.w	f3dc <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    f536:	4f20      	ldr	r7, [pc, #128]	; (f5b8 <smp_pairing_random+0x270>)
    f538:	683b      	ldr	r3, [r7, #0]
    f53a:	b1f3      	cbz	r3, f57a <smp_pairing_random+0x232>
    f53c:	68db      	ldr	r3, [r3, #12]
    f53e:	b1e3      	cbz	r3, f57a <smp_pairing_random+0x232>
			struct bt_conn_oob_info info = {
    f540:	4b1f      	ldr	r3, [pc, #124]	; (f5c0 <smp_pairing_random+0x278>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f542:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    f546:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    f54a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f54e:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f552:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f554:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f558:	d411      	bmi.n	f57e <smp_pairing_random+0x236>
				     BT_CONN_OOB_BOTH_PEERS :
    f55a:	2b00      	cmp	r3, #0
    f55c:	bf0c      	ite	eq
    f55e:	2003      	moveq	r0, #3
    f560:	2001      	movne	r0, #1
    f562:	e00f      	b.n	f584 <smp_pairing_random+0x23c>
    f564:	4b10      	ldr	r3, [pc, #64]	; (f5a8 <smp_pairing_random+0x260>)
    f566:	4a0f      	ldr	r2, [pc, #60]	; (f5a4 <smp_pairing_random+0x25c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f568:	4816      	ldr	r0, [pc, #88]	; (f5c4 <smp_pairing_random+0x27c>)
    f56a:	1ad2      	subs	r2, r2, r3
    f56c:	08d2      	lsrs	r2, r2, #3
    f56e:	0192      	lsls	r2, r2, #6
    f570:	f042 0201 	orr.w	r2, r2, #1
    f574:	f013 fb53 	bl	22c1e <log_1>
    f578:	e730      	b.n	f3dc <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f57a:	2502      	movs	r5, #2
    f57c:	e7aa      	b.n	f4d4 <smp_pairing_random+0x18c>
				     BT_CONN_OOB_BOTH_PEERS :
    f57e:	2b00      	cmp	r3, #0
    f580:	bf18      	it	ne
    f582:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    f584:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    f586:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    f58a:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f58e:	4630      	mov	r0, r6
    f590:	210c      	movs	r1, #12
    f592:	f017 f868 	bl	26666 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f596:	683b      	ldr	r3, [r7, #0]
    f598:	6820      	ldr	r0, [r4, #0]
    f59a:	68db      	ldr	r3, [r3, #12]
    f59c:	a90a      	add	r1, sp, #40	; 0x28
    f59e:	4798      	blx	r3
			return 0;
    f5a0:	e798      	b.n	f4d4 <smp_pairing_random+0x18c>
    f5a2:	bf00      	nop
    f5a4:	000282ac 	.word	0x000282ac
    f5a8:	000281b4 	.word	0x000281b4
    f5ac:	0002dce8 	.word	0x0002dce8
    f5b0:	2000dc60 	.word	0x2000dc60
    f5b4:	000f4240 	.word	0x000f4240
    f5b8:	2000db94 	.word	0x2000db94
    f5bc:	0002dcfd 	.word	0x0002dcfd
    f5c0:	00028404 	.word	0x00028404
    f5c4:	0002dc2a 	.word	0x0002dc2a

0000f5c8 <bt_smp_sign_verify>:
{
    f5c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    f5ca:	898b      	ldrh	r3, [r1, #12]
    f5cc:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f5ce:	6889      	ldr	r1, [r1, #8]
{
    f5d0:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f5d2:	3b0c      	subs	r3, #12
    f5d4:	4419      	add	r1, r3
    f5d6:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    f5d8:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f5dc:	a801      	add	r0, sp, #4
    f5de:	f015 fb37 	bl	24c50 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    f5e2:	7a31      	ldrb	r1, [r6, #8]
    f5e4:	462a      	mov	r2, r5
    f5e6:	2010      	movs	r0, #16
    f5e8:	f000 ff50 	bl	1048c <bt_keys_find>
	if (!keys) {
    f5ec:	4606      	mov	r6, r0
    f5ee:	b9a0      	cbnz	r0, f61a <bt_smp_sign_verify+0x52>
    f5f0:	4a2e      	ldr	r2, [pc, #184]	; (f6ac <bt_smp_sign_verify+0xe4>)
    f5f2:	4c2f      	ldr	r4, [pc, #188]	; (f6b0 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    f5f4:	4628      	mov	r0, r5
    f5f6:	1aa4      	subs	r4, r4, r2
    f5f8:	f7f8 fd84 	bl	8104 <bt_addr_le_str_real>
    f5fc:	f7f5 ffee 	bl	55dc <log_strdup>
    f600:	08e4      	lsrs	r4, r4, #3
    f602:	01a4      	lsls	r4, r4, #6
    f604:	f044 0401 	orr.w	r4, r4, #1
    f608:	4601      	mov	r1, r0
    f60a:	4622      	mov	r2, r4
    f60c:	4829      	ldr	r0, [pc, #164]	; (f6b4 <bt_smp_sign_verify+0xec>)
    f60e:	f013 fb06 	bl	22c1e <log_1>
		return -ENOENT;
    f612:	f06f 0001 	mvn.w	r0, #1
}
    f616:	b004      	add	sp, #16
    f618:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    f61a:	6e43      	ldr	r3, [r0, #100]	; 0x64
    f61c:	9300      	str	r3, [sp, #0]
    f61e:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    f620:	68a0      	ldr	r0, [r4, #8]
    f622:	3b0c      	subs	r3, #12
    f624:	2204      	movs	r2, #4
    f626:	4669      	mov	r1, sp
    f628:	4418      	add	r0, r3
    f62a:	f015 fb11 	bl	24c50 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    f62e:	89a2      	ldrh	r2, [r4, #12]
    f630:	68a1      	ldr	r1, [r4, #8]
    f632:	3a0c      	subs	r2, #12
    f634:	b292      	uxth	r2, r2
    f636:	f106 0054 	add.w	r0, r6, #84	; 0x54
    f63a:	f7ff f84d 	bl	e6d8 <smp_sign_buf>
	if (err) {
    f63e:	b198      	cbz	r0, f668 <bt_smp_sign_verify+0xa0>
    f640:	4a1a      	ldr	r2, [pc, #104]	; (f6ac <bt_smp_sign_verify+0xe4>)
    f642:	4c1b      	ldr	r4, [pc, #108]	; (f6b0 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    f644:	4628      	mov	r0, r5
    f646:	1aa4      	subs	r4, r4, r2
    f648:	f7f8 fd5c 	bl	8104 <bt_addr_le_str_real>
    f64c:	f7f5 ffc6 	bl	55dc <log_strdup>
    f650:	08e4      	lsrs	r4, r4, #3
    f652:	01a4      	lsls	r4, r4, #6
    f654:	f044 0401 	orr.w	r4, r4, #1
    f658:	4601      	mov	r1, r0
    f65a:	4622      	mov	r2, r4
    f65c:	4816      	ldr	r0, [pc, #88]	; (f6b8 <bt_smp_sign_verify+0xf0>)
    f65e:	f013 fade 	bl	22c1e <log_1>
		return -EIO;
    f662:	f06f 0004 	mvn.w	r0, #4
    f666:	e7d6      	b.n	f616 <bt_smp_sign_verify+0x4e>
    f668:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    f66a:	68a1      	ldr	r1, [r4, #8]
    f66c:	3b0c      	subs	r3, #12
    f66e:	220c      	movs	r2, #12
    f670:	4419      	add	r1, r3
    f672:	a801      	add	r0, sp, #4
    f674:	f015 fadb 	bl	24c2e <memcmp>
    f678:	b198      	cbz	r0, f6a2 <bt_smp_sign_verify+0xda>
    f67a:	4a0c      	ldr	r2, [pc, #48]	; (f6ac <bt_smp_sign_verify+0xe4>)
    f67c:	4c0c      	ldr	r4, [pc, #48]	; (f6b0 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    f67e:	4628      	mov	r0, r5
    f680:	1aa4      	subs	r4, r4, r2
    f682:	f7f8 fd3f 	bl	8104 <bt_addr_le_str_real>
    f686:	f7f5 ffa9 	bl	55dc <log_strdup>
    f68a:	08e4      	lsrs	r4, r4, #3
    f68c:	01a4      	lsls	r4, r4, #6
    f68e:	f044 0401 	orr.w	r4, r4, #1
    f692:	4601      	mov	r1, r0
    f694:	4622      	mov	r2, r4
    f696:	4809      	ldr	r0, [pc, #36]	; (f6bc <bt_smp_sign_verify+0xf4>)
    f698:	f013 fac1 	bl	22c1e <log_1>
		return -EBADMSG;
    f69c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f6a0:	e7b9      	b.n	f616 <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    f6a2:	6e73      	ldr	r3, [r6, #100]	; 0x64
    f6a4:	3301      	adds	r3, #1
    f6a6:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    f6a8:	e7b5      	b.n	f616 <bt_smp_sign_verify+0x4e>
    f6aa:	bf00      	nop
    f6ac:	000281b4 	.word	0x000281b4
    f6b0:	000282ac 	.word	0x000282ac
    f6b4:	0002dd16 	.word	0x0002dd16
    f6b8:	0002dd38 	.word	0x0002dd38
    f6bc:	0002dd5a 	.word	0x0002dd5a

0000f6c0 <bt_smp_sign>:
{
    f6c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    f6c2:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    f6c6:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    f6c8:	462a      	mov	r2, r5
    f6ca:	7a01      	ldrb	r1, [r0, #8]
    f6cc:	2008      	movs	r0, #8
    f6ce:	f000 fedd 	bl	1048c <bt_keys_find>
	if (!keys) {
    f6d2:	4604      	mov	r4, r0
    f6d4:	b9a0      	cbnz	r0, f700 <bt_smp_sign+0x40>
    f6d6:	4a23      	ldr	r2, [pc, #140]	; (f764 <bt_smp_sign+0xa4>)
    f6d8:	4c23      	ldr	r4, [pc, #140]	; (f768 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    f6da:	4628      	mov	r0, r5
    f6dc:	1aa4      	subs	r4, r4, r2
    f6de:	f7f8 fd11 	bl	8104 <bt_addr_le_str_real>
    f6e2:	f7f5 ff7b 	bl	55dc <log_strdup>
    f6e6:	08e4      	lsrs	r4, r4, #3
    f6e8:	01a4      	lsls	r4, r4, #6
    f6ea:	f044 0401 	orr.w	r4, r4, #1
    f6ee:	4601      	mov	r1, r0
    f6f0:	4622      	mov	r2, r4
    f6f2:	481e      	ldr	r0, [pc, #120]	; (f76c <bt_smp_sign+0xac>)
    f6f4:	f013 fa93 	bl	22c1e <log_1>
		return -ENOENT;
    f6f8:	f06f 0001 	mvn.w	r0, #1
}
    f6fc:	b002      	add	sp, #8
    f6fe:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
    f700:	210c      	movs	r1, #12
    f702:	f106 0008 	add.w	r0, r6, #8
    f706:	f017 fb11 	bl	26d2c <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    f70a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f70c:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
    f70e:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    f710:	68b0      	ldr	r0, [r6, #8]
    f712:	2204      	movs	r2, #4
    f714:	3b0c      	subs	r3, #12
    f716:	eb0d 0102 	add.w	r1, sp, r2
    f71a:	4418      	add	r0, r3
    f71c:	f015 fa98 	bl	24c50 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    f720:	89b2      	ldrh	r2, [r6, #12]
    f722:	68b1      	ldr	r1, [r6, #8]
    f724:	3a0c      	subs	r2, #12
    f726:	b292      	uxth	r2, r2
    f728:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f72c:	f7fe ffd4 	bl	e6d8 <smp_sign_buf>
	if (err) {
    f730:	b198      	cbz	r0, f75a <bt_smp_sign+0x9a>
    f732:	4a0c      	ldr	r2, [pc, #48]	; (f764 <bt_smp_sign+0xa4>)
    f734:	4c0c      	ldr	r4, [pc, #48]	; (f768 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    f736:	4628      	mov	r0, r5
    f738:	1aa4      	subs	r4, r4, r2
    f73a:	f7f8 fce3 	bl	8104 <bt_addr_le_str_real>
    f73e:	f7f5 ff4d 	bl	55dc <log_strdup>
    f742:	08e4      	lsrs	r4, r4, #3
    f744:	01a4      	lsls	r4, r4, #6
    f746:	f044 0401 	orr.w	r4, r4, #1
    f74a:	4601      	mov	r1, r0
    f74c:	4622      	mov	r2, r4
    f74e:	4808      	ldr	r0, [pc, #32]	; (f770 <bt_smp_sign+0xb0>)
    f750:	f013 fa65 	bl	22c1e <log_1>
		return -EIO;
    f754:	f06f 0004 	mvn.w	r0, #4
    f758:	e7d0      	b.n	f6fc <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    f75a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f75c:	3301      	adds	r3, #1
    f75e:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    f760:	e7cc      	b.n	f6fc <bt_smp_sign+0x3c>
    f762:	bf00      	nop
    f764:	000281b4 	.word	0x000281b4
    f768:	000282ac 	.word	0x000282ac
    f76c:	0002dd7c 	.word	0x0002dd7c
    f770:	0002dd38 	.word	0x0002dd38

0000f774 <bt_smp_start_security>:
{
    f774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    f778:	78c4      	ldrb	r4, [r0, #3]
    f77a:	2c01      	cmp	r4, #1
{
    f77c:	4605      	mov	r5, r0
	switch (conn->role) {
    f77e:	d005      	beq.n	f78c <bt_smp_start_security+0x18>
		return -EINVAL;
    f780:	f06f 0415 	mvn.w	r4, #21
}
    f784:	4620      	mov	r0, r4
    f786:	b003      	add	sp, #12
    f788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    f78c:	f7fe ffe4 	bl	e758 <smp_chan_get>
	if (!smp) {
    f790:	4606      	mov	r6, r0
    f792:	2800      	cmp	r0, #0
    f794:	f000 80a0 	beq.w	f8d8 <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f798:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    f79c:	2104      	movs	r1, #4
    f79e:	4638      	mov	r0, r7
    f7a0:	f016 feba 	bl	26518 <atomic_test_bit>
    f7a4:	2800      	cmp	r0, #0
    f7a6:	f040 809a 	bne.w	f8de <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f7aa:	2103      	movs	r1, #3
    f7ac:	4638      	mov	r0, r7
    f7ae:	f016 feb3 	bl	26518 <atomic_test_bit>
    f7b2:	b110      	cbz	r0, f7ba <bt_smp_start_security+0x46>
		return -EBUSY;
    f7b4:	f06f 040f 	mvn.w	r4, #15
    f7b8:	e7e4      	b.n	f784 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f7ba:	4621      	mov	r1, r4
    f7bc:	4638      	mov	r0, r7
    f7be:	f016 feab 	bl	26518 <atomic_test_bit>
    f7c2:	2800      	cmp	r0, #0
    f7c4:	d1f6      	bne.n	f7b4 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f7c6:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    f7c8:	2b03      	cmp	r3, #3
    f7ca:	d03d      	beq.n	f848 <bt_smp_start_security+0xd4>
    f7cc:	d82c      	bhi.n	f828 <bt_smp_start_security+0xb4>
    f7ce:	3b01      	subs	r3, #1
    f7d0:	2b01      	cmp	r3, #1
    f7d2:	d946      	bls.n	f862 <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    f7d4:	210b      	movs	r1, #11
    f7d6:	1d28      	adds	r0, r5, #4
    f7d8:	f016 fe9e 	bl	26518 <atomic_test_bit>
    f7dc:	2800      	cmp	r0, #0
    f7de:	d1cf      	bne.n	f780 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    f7e0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f7e4:	b983      	cbnz	r3, f808 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    f7e6:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    f7ea:	7a29      	ldrb	r1, [r5, #8]
    f7ec:	4622      	mov	r2, r4
    f7ee:	2020      	movs	r0, #32
    f7f0:	f000 fe4c 	bl	1048c <bt_keys_find>
    f7f4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f7f8:	b930      	cbnz	r0, f808 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    f7fa:	7a29      	ldrb	r1, [r5, #8]
    f7fc:	4622      	mov	r2, r4
    f7fe:	2004      	movs	r0, #4
    f800:	f000 fe44 	bl	1048c <bt_keys_find>
    f804:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f808:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f80c:	2b00      	cmp	r3, #0
    f80e:	d0b7      	beq.n	f780 <bt_smp_start_security+0xc>
    f810:	89da      	ldrh	r2, [r3, #14]
    f812:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f816:	2a00      	cmp	r2, #0
    f818:	d0b2      	beq.n	f780 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    f81a:	7aaa      	ldrb	r2, [r5, #10]
    f81c:	2a02      	cmp	r2, #2
    f81e:	d920      	bls.n	f862 <bt_smp_start_security+0xee>
    f820:	7b5b      	ldrb	r3, [r3, #13]
    f822:	07db      	lsls	r3, r3, #31
    f824:	d5ac      	bpl.n	f780 <bt_smp_start_security+0xc>
    f826:	e01c      	b.n	f862 <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    f828:	2b04      	cmp	r3, #4
    f82a:	d1d3      	bne.n	f7d4 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f82c:	f7fe ff16 	bl	e65c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f830:	2803      	cmp	r0, #3
    f832:	d104      	bne.n	f83e <bt_smp_start_security+0xca>
    f834:	4b2b      	ldr	r3, [pc, #172]	; (f8e4 <bt_smp_start_security+0x170>)
    f836:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f838:	b1f3      	cbz	r3, f878 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f83a:	68dc      	ldr	r4, [r3, #12]
    f83c:	b10c      	cbz	r4, f842 <bt_smp_start_security+0xce>
    f83e:	4b2a      	ldr	r3, [pc, #168]	; (f8e8 <bt_smp_start_security+0x174>)
    f840:	781c      	ldrb	r4, [r3, #0]
    f842:	f004 0401 	and.w	r4, r4, #1
    f846:	e00a      	b.n	f85e <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f848:	f7fe ff08 	bl	e65c <get_io_capa>
    f84c:	2803      	cmp	r0, #3
    f84e:	d106      	bne.n	f85e <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    f850:	4b24      	ldr	r3, [pc, #144]	; (f8e4 <bt_smp_start_security+0x170>)
    f852:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f854:	b11c      	cbz	r4, f85e <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    f856:	68e4      	ldr	r4, [r4, #12]
    f858:	3c00      	subs	r4, #0
    f85a:	bf18      	it	ne
    f85c:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f85e:	2c00      	cmp	r4, #0
    f860:	d0b8      	beq.n	f7d4 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    f862:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f866:	b14b      	cbz	r3, f87c <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    f868:	4630      	mov	r0, r6
    f86a:	f7fe ffed 	bl	e848 <smp_init>
    f86e:	4604      	mov	r4, r0
    f870:	b180      	cbz	r0, f894 <bt_smp_start_security+0x120>
		return -ENOBUFS;
    f872:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f876:	e785      	b.n	f784 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f878:	2400      	movs	r4, #0
    f87a:	e7e2      	b.n	f842 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f87c:	7a28      	ldrb	r0, [r5, #8]
    f87e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f882:	f000 fd2f 	bl	102e4 <bt_keys_get_addr>
    f886:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f88a:	2800      	cmp	r0, #0
    f88c:	d1ec      	bne.n	f868 <bt_smp_start_security+0xf4>
			return -ENOMEM;
    f88e:	f06f 040b 	mvn.w	r4, #11
    f892:	e777      	b.n	f784 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    f894:	210b      	movs	r1, #11
    f896:	4630      	mov	r0, r6
    f898:	f016 fefa 	bl	26690 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f89c:	4680      	mov	r8, r0
    f89e:	2800      	cmp	r0, #0
    f8a0:	d0e7      	beq.n	f872 <bt_smp_start_security+0xfe>
	return net_buf_simple_add(&buf->b, len);
    f8a2:	2101      	movs	r1, #1
    f8a4:	3008      	adds	r0, #8
    f8a6:	f017 fa41 	bl	26d2c <net_buf_simple_add>
    f8aa:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f8ac:	2009      	movs	r0, #9
    f8ae:	f7fe ff95 	bl	e7dc <get_auth.constprop.0>
    f8b2:	4623      	mov	r3, r4
    f8b4:	f889 0000 	strb.w	r0, [r9]
    f8b8:	4642      	mov	r2, r8
    f8ba:	9400      	str	r4, [sp, #0]
    f8bc:	2106      	movs	r1, #6
    f8be:	4628      	mov	r0, r5
    f8c0:	f015 feed 	bl	2569e <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f8c4:	4638      	mov	r0, r7
    f8c6:	210f      	movs	r1, #15
    f8c8:	f016 fecd 	bl	26666 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    f8cc:	2101      	movs	r1, #1
    f8ce:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f8d2:	f016 fec8 	bl	26666 <atomic_set_bit>
	return 0;
    f8d6:	e755      	b.n	f784 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    f8d8:	f06f 0438 	mvn.w	r4, #56	; 0x38
    f8dc:	e752      	b.n	f784 <bt_smp_start_security+0x10>
		return -EIO;
    f8de:	f06f 0404 	mvn.w	r4, #4
    f8e2:	e74f      	b.n	f784 <bt_smp_start_security+0x10>
    f8e4:	2000db94 	.word	0x2000db94
    f8e8:	2000fb29 	.word	0x2000fb29

0000f8ec <smp_pairing_complete>:
{
    f8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f8f0:	4606      	mov	r6, r0
    f8f2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; f99c <smp_pairing_complete+0xb0>
    f8f6:	f856 4bbc 	ldr.w	r4, [r6], #188
{
    f8fa:	4607      	mov	r7, r0
	if (!status) {
    f8fc:	b9e9      	cbnz	r1, f93a <smp_pairing_complete+0x4e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f8fe:	210d      	movs	r1, #13
    f900:	4630      	mov	r0, r6
    f902:	f016 fe09 	bl	26518 <atomic_test_bit>
		if (bond_flag) {
    f906:	4605      	mov	r5, r0
    f908:	b118      	cbz	r0, f912 <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
    f90a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f90e:	f000 ff4b 	bl	107a8 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    f912:	f8d8 3000 	ldr.w	r3, [r8]
    f916:	b123      	cbz	r3, f922 <smp_pairing_complete+0x36>
    f918:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    f91a:	b113      	cbz	r3, f922 <smp_pairing_complete+0x36>
			bt_auth->pairing_failed(conn, security_err);
    f91c:	4629      	mov	r1, r5
    f91e:	4620      	mov	r0, r4
    f920:	4798      	blx	r3
	smp_reset(smp);
    f922:	4638      	mov	r0, r7
    f924:	f016 ff49 	bl	267ba <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    f928:	7a62      	ldrb	r2, [r4, #9]
    f92a:	7aa3      	ldrb	r3, [r4, #10]
    f92c:	429a      	cmp	r2, r3
    f92e:	d033      	beq.n	f998 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
    f930:	4620      	mov	r0, r4
}
    f932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    f936:	f7ff bf1d 	b.w	f774 <bt_smp_start_security>
	switch (smp_err) {
    f93a:	3901      	subs	r1, #1
    f93c:	b2c9      	uxtb	r1, r1
    f93e:	290d      	cmp	r1, #13
    f940:	bf9c      	itt	ls
    f942:	4b17      	ldrls	r3, [pc, #92]	; (f9a0 <smp_pairing_complete+0xb4>)
    f944:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    f946:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    f94a:	bf88      	it	hi
    f94c:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    f94e:	b143      	cbz	r3, f962 <smp_pairing_complete+0x76>
    f950:	7b1b      	ldrb	r3, [r3, #12]
    f952:	b9d3      	cbnz	r3, f98a <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
    f954:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f958:	f000 fe40 	bl	105dc <bt_keys_clear>
			conn->le.keys = NULL;
    f95c:	2300      	movs	r3, #0
    f95e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f962:	2102      	movs	r1, #2
    f964:	4630      	mov	r0, r6
    f966:	f016 fdd7 	bl	26518 <atomic_test_bit>
    f96a:	b940      	cbnz	r0, f97e <smp_pairing_complete+0x92>
	switch (err) {
    f96c:	2d08      	cmp	r5, #8
    f96e:	bf16      	itet	ne
    f970:	4b0c      	ldrne	r3, [pc, #48]	; (f9a4 <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f972:	211f      	moveq	r1, #31
    f974:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    f976:	462a      	mov	r2, r5
    f978:	4620      	mov	r0, r4
    f97a:	f7fb fce3 	bl	b344 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    f97e:	f8d8 3000 	ldr.w	r3, [r8]
    f982:	2b00      	cmp	r3, #0
    f984:	d0cd      	beq.n	f922 <smp_pairing_complete+0x36>
    f986:	69db      	ldr	r3, [r3, #28]
    f988:	e7c7      	b.n	f91a <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    f98a:	2102      	movs	r1, #2
    f98c:	4630      	mov	r0, r6
    f98e:	f016 fdc3 	bl	26518 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    f992:	2800      	cmp	r0, #0
    f994:	d1de      	bne.n	f954 <smp_pairing_complete+0x68>
    f996:	e7e4      	b.n	f962 <smp_pairing_complete+0x76>
}
    f998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f99c:	2000db94 	.word	0x2000db94
    f9a0:	0002df80 	.word	0x0002df80
    f9a4:	0002df96 	.word	0x0002df96

0000f9a8 <bt_smp_recv>:
{
    f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    f9aa:	898b      	ldrh	r3, [r1, #12]
{
    f9ac:	4604      	mov	r4, r0
    f9ae:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f9b0:	b95b      	cbnz	r3, f9ca <bt_smp_recv+0x22>
    f9b2:	493a      	ldr	r1, [pc, #232]	; (fa9c <bt_smp_recv+0xf4>)
    f9b4:	4b3a      	ldr	r3, [pc, #232]	; (faa0 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    f9b6:	483b      	ldr	r0, [pc, #236]	; (faa4 <bt_smp_recv+0xfc>)
    f9b8:	1ac9      	subs	r1, r1, r3
    f9ba:	08c9      	lsrs	r1, r1, #3
    f9bc:	0189      	lsls	r1, r1, #6
    f9be:	f041 0101 	orr.w	r1, r1, #1
    f9c2:	f013 f91f 	bl	22c04 <log_0>
}
    f9c6:	2000      	movs	r0, #0
    f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f9ca:	2101      	movs	r1, #1
    f9cc:	f105 0008 	add.w	r0, r5, #8
    f9d0:	f017 f9d3 	bl	26d7a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f9d4:	2104      	movs	r1, #4
    f9d6:	4606      	mov	r6, r0
    f9d8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f9dc:	f016 fd9c 	bl	26518 <atomic_test_bit>
    f9e0:	7831      	ldrb	r1, [r6, #0]
    f9e2:	b150      	cbz	r0, f9fa <bt_smp_recv+0x52>
    f9e4:	4a2d      	ldr	r2, [pc, #180]	; (fa9c <bt_smp_recv+0xf4>)
    f9e6:	4b2e      	ldr	r3, [pc, #184]	; (faa0 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f9e8:	482f      	ldr	r0, [pc, #188]	; (faa8 <bt_smp_recv+0x100>)
    f9ea:	1ad2      	subs	r2, r2, r3
    f9ec:	08d2      	lsrs	r2, r2, #3
    f9ee:	0192      	lsls	r2, r2, #6
    f9f0:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f9f4:	f013 f913 	bl	22c1e <log_1>
		return 0;
    f9f8:	e7e5      	b.n	f9c6 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    f9fa:	290e      	cmp	r1, #14
    f9fc:	d908      	bls.n	fa10 <bt_smp_recv+0x68>
    f9fe:	4a27      	ldr	r2, [pc, #156]	; (fa9c <bt_smp_recv+0xf4>)
    fa00:	4b27      	ldr	r3, [pc, #156]	; (faa0 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    fa02:	482a      	ldr	r0, [pc, #168]	; (faac <bt_smp_recv+0x104>)
    fa04:	1ad2      	subs	r2, r2, r3
    fa06:	08d2      	lsrs	r2, r2, #3
    fa08:	0192      	lsls	r2, r2, #6
    fa0a:	f042 0202 	orr.w	r2, r2, #2
    fa0e:	e7f1      	b.n	f9f4 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    fa10:	4f27      	ldr	r7, [pc, #156]	; (fab0 <bt_smp_recv+0x108>)
    fa12:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    fa16:	b973      	cbnz	r3, fa36 <bt_smp_recv+0x8e>
    fa18:	4b21      	ldr	r3, [pc, #132]	; (faa0 <bt_smp_recv+0xf8>)
    fa1a:	4a20      	ldr	r2, [pc, #128]	; (fa9c <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    fa1c:	4825      	ldr	r0, [pc, #148]	; (fab4 <bt_smp_recv+0x10c>)
    fa1e:	1ad2      	subs	r2, r2, r3
    fa20:	08d2      	lsrs	r2, r2, #3
    fa22:	0192      	lsls	r2, r2, #6
    fa24:	f042 0202 	orr.w	r2, r2, #2
    fa28:	f013 f8f9 	bl	22c1e <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    fa2c:	2107      	movs	r1, #7
		smp_error(smp, err);
    fa2e:	4620      	mov	r0, r4
    fa30:	f017 f848 	bl	26ac4 <smp_error>
    fa34:	e7c7      	b.n	f9c6 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    fa36:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fa3a:	f016 fea6 	bl	2678a <atomic_test_and_clear_bit>
    fa3e:	7831      	ldrb	r1, [r6, #0]
    fa40:	b970      	cbnz	r0, fa60 <bt_smp_recv+0xb8>
    fa42:	4b17      	ldr	r3, [pc, #92]	; (faa0 <bt_smp_recv+0xf8>)
    fa44:	4a15      	ldr	r2, [pc, #84]	; (fa9c <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    fa46:	481c      	ldr	r0, [pc, #112]	; (fab8 <bt_smp_recv+0x110>)
    fa48:	1ad2      	subs	r2, r2, r3
    fa4a:	08d2      	lsrs	r2, r2, #3
    fa4c:	0192      	lsls	r2, r2, #6
    fa4e:	f042 0202 	orr.w	r2, r2, #2
    fa52:	f013 f8e4 	bl	22c1e <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    fa56:	7833      	ldrb	r3, [r6, #0]
    fa58:	2b05      	cmp	r3, #5
    fa5a:	d0b4      	beq.n	f9c6 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fa5c:	2108      	movs	r1, #8
    fa5e:	e7e6      	b.n	fa2e <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    fa60:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    fa64:	89a8      	ldrh	r0, [r5, #12]
    fa66:	791b      	ldrb	r3, [r3, #4]
    fa68:	4283      	cmp	r3, r0
    fa6a:	d00d      	beq.n	fa88 <bt_smp_recv+0xe0>
    fa6c:	4a0c      	ldr	r2, [pc, #48]	; (faa0 <bt_smp_recv+0xf8>)
    fa6e:	4b0b      	ldr	r3, [pc, #44]	; (fa9c <bt_smp_recv+0xf4>)
    fa70:	1a9b      	subs	r3, r3, r2
    fa72:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    fa74:	019b      	lsls	r3, r3, #6
    fa76:	460a      	mov	r2, r1
    fa78:	f043 0301 	orr.w	r3, r3, #1
    fa7c:	4601      	mov	r1, r0
    fa7e:	480f      	ldr	r0, [pc, #60]	; (fabc <bt_smp_recv+0x114>)
    fa80:	f013 f8e1 	bl	22c46 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    fa84:	210a      	movs	r1, #10
    fa86:	e7d2      	b.n	fa2e <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    fa88:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    fa8c:	4620      	mov	r0, r4
    fa8e:	4629      	mov	r1, r5
    fa90:	4798      	blx	r3
	if (err) {
    fa92:	4601      	mov	r1, r0
    fa94:	2800      	cmp	r0, #0
    fa96:	d096      	beq.n	f9c6 <bt_smp_recv+0x1e>
    fa98:	e7c9      	b.n	fa2e <bt_smp_recv+0x86>
    fa9a:	bf00      	nop
    fa9c:	000282ac 	.word	0x000282ac
    faa0:	000281b4 	.word	0x000281b4
    faa4:	0002dd9d 	.word	0x0002dd9d
    faa8:	0002ddb8 	.word	0x0002ddb8
    faac:	0002dde9 	.word	0x0002dde9
    fab0:	00028d08 	.word	0x00028d08
    fab4:	0002de0b 	.word	0x0002de0b
    fab8:	0002de25 	.word	0x0002de25
    fabc:	0002d85f 	.word	0x0002d85f

0000fac0 <bt_smp_pkey_ready>:
{
    fac0:	b508      	push	{r3, lr}
	sc_public_key = pkey;
    fac2:	4b17      	ldr	r3, [pc, #92]	; (fb20 <bt_smp_pkey_ready+0x60>)
    fac4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    fac6:	b958      	cbnz	r0, fae0 <bt_smp_pkey_ready+0x20>
    fac8:	4b16      	ldr	r3, [pc, #88]	; (fb24 <bt_smp_pkey_ready+0x64>)
    faca:	4917      	ldr	r1, [pc, #92]	; (fb28 <bt_smp_pkey_ready+0x68>)
		BT_WARN("Public key not available");
    facc:	4817      	ldr	r0, [pc, #92]	; (fb2c <bt_smp_pkey_ready+0x6c>)
    face:	1ac9      	subs	r1, r1, r3
    fad0:	08c9      	lsrs	r1, r1, #3
    fad2:	0189      	lsls	r1, r1, #6
}
    fad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Public key not available");
    fad8:	f041 0102 	orr.w	r1, r1, #2
    fadc:	f013 b892 	b.w	22c04 <log_0>
	z_impl_k_sem_give(sem);
    fae0:	4813      	ldr	r0, [pc, #76]	; (fb30 <bt_smp_pkey_ready+0x70>)
    fae2:	f011 f899 	bl	20c18 <z_impl_k_sem_give>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    fae6:	4813      	ldr	r0, [pc, #76]	; (fb34 <bt_smp_pkey_ready+0x74>)
    fae8:	2106      	movs	r1, #6
    faea:	f016 fd15 	bl	26518 <atomic_test_bit>
    faee:	b138      	cbz	r0, fb00 <bt_smp_pkey_ready+0x40>
		err = smp_public_key_slave(smp);
    faf0:	4811      	ldr	r0, [pc, #68]	; (fb38 <bt_smp_pkey_ready+0x78>)
    faf2:	f7ff fac5 	bl	f080 <smp_public_key_slave>
		if (err) {
    faf6:	4601      	mov	r1, r0
    faf8:	b110      	cbz	r0, fb00 <bt_smp_pkey_ready+0x40>
			smp_error(smp, err);
    fafa:	480f      	ldr	r0, [pc, #60]	; (fb38 <bt_smp_pkey_ready+0x78>)
    fafc:	f016 ffe2 	bl	26ac4 <smp_error>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    fb00:	480e      	ldr	r0, [pc, #56]	; (fb3c <bt_smp_pkey_ready+0x7c>)
    fb02:	2106      	movs	r1, #6
    fb04:	f016 fd08 	bl	26518 <atomic_test_bit>
    fb08:	b148      	cbz	r0, fb1e <bt_smp_pkey_ready+0x5e>
		err = smp_public_key_slave(smp);
    fb0a:	480d      	ldr	r0, [pc, #52]	; (fb40 <bt_smp_pkey_ready+0x80>)
    fb0c:	f7ff fab8 	bl	f080 <smp_public_key_slave>
		if (err) {
    fb10:	4601      	mov	r1, r0
    fb12:	b120      	cbz	r0, fb1e <bt_smp_pkey_ready+0x5e>
}
    fb14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_error(smp, err);
    fb18:	4809      	ldr	r0, [pc, #36]	; (fb40 <bt_smp_pkey_ready+0x80>)
    fb1a:	f016 bfd3 	b.w	26ac4 <smp_error>
}
    fb1e:	bd08      	pop	{r3, pc}
    fb20:	2000dc60 	.word	0x2000dc60
    fb24:	000281b4 	.word	0x000281b4
    fb28:	000282ac 	.word	0x000282ac
    fb2c:	0002de40 	.word	0x0002de40
    fb30:	2000a0ec 	.word	0x2000a0ec
    fb34:	2000ab9c 	.word	0x2000ab9c
    fb38:	2000aae0 	.word	0x2000aae0
    fb3c:	2000ad74 	.word	0x2000ad74
    fb40:	2000acb8 	.word	0x2000acb8

0000fb44 <smp_signing_info>:
{
    fb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb46:	4605      	mov	r5, r0
    fb48:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    fb4a:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fb4e:	210d      	movs	r1, #13
    fb50:	f016 fce2 	bl	26518 <atomic_test_bit>
    fb54:	b300      	cbz	r0, fb98 <smp_signing_info+0x54>
					&conn->le.dst);
    fb56:	f104 0688 	add.w	r6, r4, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    fb5a:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    fb5c:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    fb5e:	4632      	mov	r2, r6
    fb60:	2010      	movs	r0, #16
    fb62:	f017 f878 	bl	26c56 <bt_keys_get_type>
		if (!keys) {
    fb66:	b990      	cbnz	r0, fb8e <smp_signing_info+0x4a>
    fb68:	4a13      	ldr	r2, [pc, #76]	; (fbb8 <smp_signing_info+0x74>)
    fb6a:	4c14      	ldr	r4, [pc, #80]	; (fbbc <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    fb6c:	4630      	mov	r0, r6
    fb6e:	1aa4      	subs	r4, r4, r2
    fb70:	f7f8 fac8 	bl	8104 <bt_addr_le_str_real>
    fb74:	f7f5 fd32 	bl	55dc <log_strdup>
    fb78:	08e4      	lsrs	r4, r4, #3
    fb7a:	01a4      	lsls	r4, r4, #6
    fb7c:	f044 0401 	orr.w	r4, r4, #1
    fb80:	4601      	mov	r1, r0
    fb82:	4622      	mov	r2, r4
    fb84:	480e      	ldr	r0, [pc, #56]	; (fbc0 <smp_signing_info+0x7c>)
    fb86:	f013 f84a 	bl	22c1e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fb8a:	2008      	movs	r0, #8
}
    fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    fb8e:	2210      	movs	r2, #16
    fb90:	4639      	mov	r1, r7
    fb92:	3054      	adds	r0, #84	; 0x54
    fb94:	f015 f85c 	bl	24c50 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    fb98:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    fb9c:	f023 0304 	bic.w	r3, r3, #4
    fba0:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
    fba4:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    fba8:	b91c      	cbnz	r4, fbb2 <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    fbaa:	4621      	mov	r1, r4
    fbac:	4628      	mov	r0, r5
    fbae:	f7ff fe9d 	bl	f8ec <smp_pairing_complete>
	return 0;
    fbb2:	2000      	movs	r0, #0
    fbb4:	e7ea      	b.n	fb8c <smp_signing_info+0x48>
    fbb6:	bf00      	nop
    fbb8:	000281b4 	.word	0x000281b4
    fbbc:	000282ac 	.word	0x000282ac
    fbc0:	0002dbe3 	.word	0x0002dbe3

0000fbc4 <smp_ident_addr_info>:
{
    fbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    fbc8:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fbca:	6805      	ldr	r5, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fbcc:	7833      	ldrb	r3, [r6, #0]
{
    fbce:	4604      	mov	r4, r0
    fbd0:	b31b      	cbz	r3, fc1a <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    fbd2:	79b3      	ldrb	r3, [r6, #6]
    fbd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fbd8:	2bc0      	cmp	r3, #192	; 0xc0
    fbda:	d01e      	beq.n	fc1a <smp_ident_addr_info+0x56>
    fbdc:	4b43      	ldr	r3, [pc, #268]	; (fcec <smp_ident_addr_info+0x128>)
    fbde:	4c44      	ldr	r4, [pc, #272]	; (fcf0 <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    fbe0:	4630      	mov	r0, r6
    fbe2:	1ae4      	subs	r4, r4, r3
    fbe4:	f7f8 fa8e 	bl	8104 <bt_addr_le_str_real>
    fbe8:	f7f5 fcf8 	bl	55dc <log_strdup>
    fbec:	08e4      	lsrs	r4, r4, #3
    fbee:	01a4      	lsls	r4, r4, #6
    fbf0:	f044 0401 	orr.w	r4, r4, #1
    fbf4:	4601      	mov	r1, r0
    fbf6:	4622      	mov	r2, r4
    fbf8:	483e      	ldr	r0, [pc, #248]	; (fcf4 <smp_ident_addr_info+0x130>)
    fbfa:	f013 f810 	bl	22c1e <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    fbfe:	f105 0088 	add.w	r0, r5, #136	; 0x88
    fc02:	f7f8 fa7f 	bl	8104 <bt_addr_le_str_real>
    fc06:	f7f5 fce9 	bl	55dc <log_strdup>
    fc0a:	4622      	mov	r2, r4
    fc0c:	4601      	mov	r1, r0
    fc0e:	483a      	ldr	r0, [pc, #232]	; (fcf8 <smp_ident_addr_info+0x134>)
    fc10:	f013 f805 	bl	22c1e <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    fc14:	200a      	movs	r0, #10
}
    fc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fc1a:	210d      	movs	r1, #13
    fc1c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    fc20:	f016 fc7a 	bl	26518 <atomic_test_bit>
    fc24:	2800      	cmp	r0, #0
    fc26:	d048      	beq.n	fcba <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    fc28:	f105 0788 	add.w	r7, r5, #136	; 0x88
    fc2c:	7a29      	ldrb	r1, [r5, #8]
    fc2e:	463a      	mov	r2, r7
    fc30:	2002      	movs	r0, #2
    fc32:	f017 f810 	bl	26c56 <bt_keys_get_type>
		if (!keys) {
    fc36:	4680      	mov	r8, r0
    fc38:	b990      	cbnz	r0, fc60 <smp_ident_addr_info+0x9c>
    fc3a:	4a2c      	ldr	r2, [pc, #176]	; (fcec <smp_ident_addr_info+0x128>)
    fc3c:	4c2c      	ldr	r4, [pc, #176]	; (fcf0 <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    fc3e:	4638      	mov	r0, r7
    fc40:	1aa4      	subs	r4, r4, r2
    fc42:	f7f8 fa5f 	bl	8104 <bt_addr_le_str_real>
    fc46:	f7f5 fcc9 	bl	55dc <log_strdup>
    fc4a:	08e4      	lsrs	r4, r4, #3
    fc4c:	01a4      	lsls	r4, r4, #6
    fc4e:	f044 0401 	orr.w	r4, r4, #1
    fc52:	4601      	mov	r1, r0
    fc54:	4622      	mov	r2, r4
    fc56:	4829      	ldr	r0, [pc, #164]	; (fcfc <smp_ident_addr_info+0x138>)
    fc58:	f012 ffe1 	bl	22c1e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fc5c:	2008      	movs	r0, #8
    fc5e:	e7da      	b.n	fc16 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    fc60:	78eb      	ldrb	r3, [r5, #3]
    fc62:	2b00      	cmp	r3, #0
    fc64:	d13f      	bne.n	fce6 <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    fc66:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fc6a:	780b      	ldrb	r3, [r1, #0]
    fc6c:	2b01      	cmp	r3, #1
    fc6e:	d121      	bne.n	fcb4 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    fc70:	798b      	ldrb	r3, [r1, #6]
    fc72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc76:	2b40      	cmp	r3, #64	; 0x40
    fc78:	d11c      	bne.n	fcb4 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fc7a:	2206      	movs	r2, #6
    fc7c:	3101      	adds	r1, #1
    fc7e:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    fc82:	f014 ffe5 	bl	24c50 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fc86:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    fc8a:	b19b      	cbz	r3, fcb4 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    fc8c:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    fc90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc94:	2bc0      	cmp	r3, #192	; 0xc0
    fc96:	d00d      	beq.n	fcb4 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fc98:	2207      	movs	r2, #7
    fc9a:	4631      	mov	r1, r6
    fc9c:	f108 0001 	add.w	r0, r8, #1
    fca0:	f014 ffd6 	bl	24c50 <memcpy>
    fca4:	2207      	movs	r2, #7
    fca6:	4631      	mov	r1, r6
    fca8:	4638      	mov	r0, r7
    fcaa:	f014 ffd1 	bl	24c50 <memcpy>
				bt_conn_identity_resolved(conn);
    fcae:	4628      	mov	r0, r5
    fcb0:	f7fb fb2e 	bl	b310 <bt_conn_identity_resolved>
		bt_id_add(keys);
    fcb4:	4640      	mov	r0, r8
    fcb6:	f7fa f95f 	bl	9f78 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fcba:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fcbe:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fcc2:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fcc4:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fcc8:	d504      	bpl.n	fcd4 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fcca:	210a      	movs	r1, #10
    fccc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fcd0:	f016 fcc9 	bl	26666 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    fcd4:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    fcd8:	b91d      	cbnz	r5, fce2 <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    fcda:	4629      	mov	r1, r5
    fcdc:	4620      	mov	r0, r4
    fcde:	f7ff fe05 	bl	f8ec <smp_pairing_complete>
	return 0;
    fce2:	2000      	movs	r0, #0
    fce4:	e797      	b.n	fc16 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    fce6:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    fcea:	e7be      	b.n	fc6a <smp_ident_addr_info+0xa6>
    fcec:	000281b4 	.word	0x000281b4
    fcf0:	000282ac 	.word	0x000282ac
    fcf4:	0002de59 	.word	0x0002de59
    fcf8:	0002dd30 	.word	0x0002dd30
    fcfc:	0002dbe3 	.word	0x0002dbe3

0000fd00 <smp_master_ident>:
{
    fd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd02:	4604      	mov	r4, r0
    fd04:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    fd06:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fd0a:	210d      	movs	r1, #13
    fd0c:	f016 fc04 	bl	26518 <atomic_test_bit>
    fd10:	b368      	cbz	r0, fd6e <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fd12:	f105 0788 	add.w	r7, r5, #136	; 0x88
    fd16:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    fd18:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fd1a:	463a      	mov	r2, r7
    fd1c:	2004      	movs	r0, #4
    fd1e:	f016 ff9a 	bl	26c56 <bt_keys_get_type>
		if (!keys) {
    fd22:	4605      	mov	r5, r0
    fd24:	b990      	cbnz	r0, fd4c <smp_master_ident+0x4c>
    fd26:	4a1d      	ldr	r2, [pc, #116]	; (fd9c <smp_master_ident+0x9c>)
    fd28:	4c1d      	ldr	r4, [pc, #116]	; (fda0 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    fd2a:	4638      	mov	r0, r7
    fd2c:	1aa4      	subs	r4, r4, r2
    fd2e:	f7f8 f9e9 	bl	8104 <bt_addr_le_str_real>
    fd32:	f7f5 fc53 	bl	55dc <log_strdup>
    fd36:	08e4      	lsrs	r4, r4, #3
    fd38:	01a4      	lsls	r4, r4, #6
    fd3a:	f044 0401 	orr.w	r4, r4, #1
    fd3e:	4601      	mov	r1, r0
    fd40:	4622      	mov	r2, r4
    fd42:	4818      	ldr	r0, [pc, #96]	; (fda4 <smp_master_ident+0xa4>)
    fd44:	f012 ff6b 	bl	22c1e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fd48:	2008      	movs	r0, #8
}
    fd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    fd4c:	2202      	movs	r2, #2
    fd4e:	4631      	mov	r1, r6
    fd50:	3018      	adds	r0, #24
    fd52:	f014 ff7d 	bl	24c50 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    fd56:	2208      	movs	r2, #8
    fd58:	1cb1      	adds	r1, r6, #2
    fd5a:	f105 0010 	add.w	r0, r5, #16
    fd5e:	f014 ff77 	bl	24c50 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    fd62:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fd66:	f023 0301 	bic.w	r3, r3, #1
    fd6a:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fd6e:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fd72:	079a      	lsls	r2, r3, #30
    fd74:	d50d      	bpl.n	fd92 <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fd76:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd78:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fd7c:	f016 fc73 	bl	26666 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    fd80:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    fd84:	b91d      	cbnz	r5, fd8e <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    fd86:	4629      	mov	r1, r5
    fd88:	4620      	mov	r0, r4
    fd8a:	f7ff fdaf 	bl	f8ec <smp_pairing_complete>
	return 0;
    fd8e:	2000      	movs	r0, #0
    fd90:	e7db      	b.n	fd4a <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fd92:	075b      	lsls	r3, r3, #29
    fd94:	d5f4      	bpl.n	fd80 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd96:	210a      	movs	r1, #10
    fd98:	e7ee      	b.n	fd78 <smp_master_ident+0x78>
    fd9a:	bf00      	nop
    fd9c:	000281b4 	.word	0x000281b4
    fda0:	000282ac 	.word	0x000282ac
    fda4:	0002dbe3 	.word	0x0002dbe3

0000fda8 <smp_pairing_failed>:
{
    fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdaa:	4a15      	ldr	r2, [pc, #84]	; (fe00 <smp_pairing_failed+0x58>)
    fdac:	4b15      	ldr	r3, [pc, #84]	; (fe04 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    fdae:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fdb0:	4605      	mov	r5, r0
    fdb2:	1ad2      	subs	r2, r2, r3
    fdb4:	08d2      	lsrs	r2, r2, #3
    fdb6:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    fdba:	7831      	ldrb	r1, [r6, #0]
    fdbc:	0192      	lsls	r2, r2, #6
{
    fdbe:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    fdc0:	f042 0201 	orr.w	r2, r2, #1
    fdc4:	4810      	ldr	r0, [pc, #64]	; (fe08 <smp_pairing_failed+0x60>)
    fdc6:	f012 ff2a 	bl	22c1e <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fdca:	210a      	movs	r1, #10
    fdcc:	4628      	mov	r0, r5
    fdce:	f016 fcdc 	bl	2678a <atomic_test_and_clear_bit>
    fdd2:	b140      	cbz	r0, fde6 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    fdd4:	4b0d      	ldr	r3, [pc, #52]	; (fe0c <smp_pairing_failed+0x64>)
    fdd6:	681b      	ldr	r3, [r3, #0]
    fdd8:	b963      	cbnz	r3, fdf4 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    fdda:	4620      	mov	r0, r4
    fddc:	7831      	ldrb	r1, [r6, #0]
    fdde:	f7ff fd85 	bl	f8ec <smp_pairing_complete>
}
    fde2:	2000      	movs	r0, #0
    fde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    fde6:	210b      	movs	r1, #11
    fde8:	4628      	mov	r0, r5
    fdea:	f016 fcce 	bl	2678a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fdee:	2800      	cmp	r0, #0
    fdf0:	d1f0      	bne.n	fdd4 <smp_pairing_failed+0x2c>
    fdf2:	e7f2      	b.n	fdda <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    fdf4:	691b      	ldr	r3, [r3, #16]
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	d0ef      	beq.n	fdda <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    fdfa:	4638      	mov	r0, r7
    fdfc:	4798      	blx	r3
    fdfe:	e7ec      	b.n	fdda <smp_pairing_failed+0x32>
    fe00:	000282ac 	.word	0x000282ac
    fe04:	000281b4 	.word	0x000281b4
    fe08:	0002de6d 	.word	0x0002de6d
    fe0c:	2000db94 	.word	0x2000db94

0000fe10 <bt_smp_encrypt_change>:
{
    fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    fe14:	4605      	mov	r5, r0
{
    fe16:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    fe18:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    fe1c:	4604      	mov	r4, r0
    fe1e:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fe20:	4628      	mov	r0, r5
    fe22:	2101      	movs	r1, #1
    fe24:	f016 fcb1 	bl	2678a <atomic_test_and_clear_bit>
    fe28:	2800      	cmp	r0, #0
    fe2a:	f000 8178 	beq.w	1011e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f>
	if (hci_status) {
    fe2e:	b1de      	cbz	r6, fe68 <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fe30:	2103      	movs	r1, #3
    fe32:	4628      	mov	r0, r5
    fe34:	f016 fb70 	bl	26518 <atomic_test_bit>
    fe38:	2800      	cmp	r0, #0
    fe3a:	f000 8170 	beq.w	1011e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f>
			uint8_t smp_err = smp_err_get(
    fe3e:	4630      	mov	r0, r6
    fe40:	f7f9 ffec 	bl	9e1c <bt_security_err_get>
	switch (auth_err) {
    fe44:	3801      	subs	r0, #1
    fe46:	b2c0      	uxtb	r0, r0
    fe48:	2807      	cmp	r0, #7
    fe4a:	bf9a      	itte	ls
    fe4c:	4bb5      	ldrls	r3, [pc, #724]	; (10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>)
    fe4e:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    fe50:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fe52:	2102      	movs	r1, #2
    fe54:	4628      	mov	r0, r5
    fe56:	f016 fc06 	bl	26666 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    fe5a:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    fe5c:	4620      	mov	r0, r4
}
    fe5e:	b009      	add	sp, #36	; 0x24
    fe60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_pairing_complete(smp, 0);
    fe64:	f7ff bd42 	b.w	f8ec <smp_pairing_complete>
	if (!conn->encrypt) {
    fe68:	7afb      	ldrb	r3, [r7, #11]
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	f000 8157 	beq.w	1011e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fe70:	2103      	movs	r1, #3
    fe72:	4628      	mov	r0, r5
    fe74:	f016 fb50 	bl	26518 <atomic_test_bit>
    fe78:	b928      	cbnz	r0, fe86 <bt_smp_encrypt_change+0x76>
		smp_reset(smp);
    fe7a:	4620      	mov	r0, r4
}
    fe7c:	b009      	add	sp, #36	; 0x24
    fe7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_reset(smp);
    fe82:	f016 bc9a 	b.w	267ba <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fe86:	2105      	movs	r1, #5
    fe88:	4628      	mov	r0, r5
    fe8a:	f016 fb45 	bl	26518 <atomic_test_bit>
    fe8e:	b198      	cbz	r0, feb8 <bt_smp_encrypt_change+0xa8>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    fe90:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    fe94:	071a      	lsls	r2, r3, #28
    fe96:	d507      	bpl.n	fea8 <bt_smp_encrypt_change+0x98>
    fe98:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fe9c:	071b      	lsls	r3, r3, #28
    fe9e:	d503      	bpl.n	fea8 <bt_smp_encrypt_change+0x98>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    fea0:	2111      	movs	r1, #17
    fea2:	4628      	mov	r0, r5
    fea4:	f016 fbdf 	bl	26666 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    fea8:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    feac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    feb0:	f023 0308 	bic.w	r3, r3, #8
    feb4:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    feb8:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    febc:	07df      	lsls	r7, r3, #31
    febe:	d521      	bpl.n	ff04 <bt_smp_encrypt_change+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    fec0:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fec2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fec6:	f016 fbce 	bl	26666 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    feca:	2102      	movs	r1, #2
    fecc:	4628      	mov	r0, r5
    fece:	f016 fbca 	bl	26666 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    fed2:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    fed4:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
	if (!keys) {
    fed8:	b9e7      	cbnz	r7, ff14 <bt_smp_encrypt_change+0x104>
    feda:	4a93      	ldr	r2, [pc, #588]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
    fedc:	4c93      	ldr	r4, [pc, #588]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    fede:	f106 0088 	add.w	r0, r6, #136	; 0x88
    fee2:	1aa4      	subs	r4, r4, r2
    fee4:	f7f8 f90e 	bl	8104 <bt_addr_le_str_real>
    fee8:	f7f5 fb78 	bl	55dc <log_strdup>
    feec:	08e4      	lsrs	r4, r4, #3
    feee:	01a4      	lsls	r4, r4, #6
    fef0:	f044 0401 	orr.w	r4, r4, #1
    fef4:	4601      	mov	r1, r0
    fef6:	488e      	ldr	r0, [pc, #568]	; (10130 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x131>)
    fef8:	4622      	mov	r2, r4
}
    fefa:	b009      	add	sp, #36	; 0x24
    fefc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    ff00:	f012 be8d 	b.w	22c1e <log_1>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ff04:	079e      	lsls	r6, r3, #30
    ff06:	d501      	bpl.n	ff0c <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    ff08:	2108      	movs	r1, #8
    ff0a:	e7da      	b.n	fec2 <bt_smp_encrypt_change+0xb2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ff0c:	0758      	lsls	r0, r3, #29
    ff0e:	d5dc      	bpl.n	feca <bt_smp_encrypt_change+0xba>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ff10:	210a      	movs	r1, #10
    ff12:	e7d6      	b.n	fec2 <bt_smp_encrypt_change+0xb2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ff14:	2105      	movs	r1, #5
    ff16:	f016 faff 	bl	26518 <atomic_test_bit>
    ff1a:	b9b0      	cbnz	r0, ff4a <bt_smp_encrypt_change+0x13a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    ff1c:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    ff20:	07d9      	lsls	r1, r3, #31
    ff22:	d512      	bpl.n	ff4a <bt_smp_encrypt_change+0x13a>
	struct bt_keys *keys = conn->le.keys;
    ff24:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    ff26:	211a      	movs	r1, #26
    ff28:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    ff2a:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    ff2e:	f003 fbb1 	bl	13694 <bt_rand>
    ff32:	4682      	mov	sl, r0
    ff34:	b310      	cbz	r0, ff7c <bt_smp_encrypt_change+0x16c>
    ff36:	497d      	ldr	r1, [pc, #500]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
    ff38:	4b7b      	ldr	r3, [pc, #492]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
			BT_ERR("Unable to get random bytes");
    ff3a:	487e      	ldr	r0, [pc, #504]	; (10134 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x135>)
    ff3c:	1ac9      	subs	r1, r1, r3
    ff3e:	08c9      	lsrs	r1, r1, #3
    ff40:	0189      	lsls	r1, r1, #6
    ff42:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    ff46:	f012 fe5d 	bl	22c04 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    ff4a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    ff4e:	079a      	lsls	r2, r3, #30
    ff50:	f140 80ad 	bpl.w	100ae <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    ff54:	2108      	movs	r1, #8
    ff56:	4620      	mov	r0, r4
    ff58:	f016 fb9a 	bl	26690 <smp_create_pdu.constprop.0>
		if (!buf) {
    ff5c:	4680      	mov	r8, r0
    ff5e:	2800      	cmp	r0, #0
    ff60:	d174      	bne.n	1004c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d>
    ff62:	4972      	ldr	r1, [pc, #456]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
    ff64:	4b70      	ldr	r3, [pc, #448]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
			BT_ERR("Unable to allocate Ident Info buffer");
    ff66:	4874      	ldr	r0, [pc, #464]	; (10138 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x139>)
    ff68:	1ac9      	subs	r1, r1, r3
    ff6a:	08c9      	lsrs	r1, r1, #3
    ff6c:	0189      	lsls	r1, r1, #6
    ff6e:	f041 0101 	orr.w	r1, r1, #1
}
    ff72:	b009      	add	sp, #36	; 0x24
    ff74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    ff78:	f012 be44 	b.w	22c04 <log_0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    ff7c:	2106      	movs	r1, #6
    ff7e:	4620      	mov	r0, r4
    ff80:	f016 fb86 	bl	26690 <smp_create_pdu.constprop.0>
		if (!buf) {
    ff84:	4681      	mov	r9, r0
    ff86:	b940      	cbnz	r0, ff9a <bt_smp_encrypt_change+0x18a>
    ff88:	4968      	ldr	r1, [pc, #416]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
    ff8a:	4b67      	ldr	r3, [pc, #412]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    ff8c:	486b      	ldr	r0, [pc, #428]	; (1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>)
    ff8e:	1ac9      	subs	r1, r1, r3
    ff90:	08c9      	lsrs	r1, r1, #3
    ff92:	0189      	lsls	r1, r1, #6
    ff94:	f041 0101 	orr.w	r1, r1, #1
    ff98:	e7d5      	b.n	ff46 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
    ff9a:	2110      	movs	r1, #16
    ff9c:	3008      	adds	r0, #8
    ff9e:	f016 fec5 	bl	26d2c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    ffa2:	f898 200c 	ldrb.w	r2, [r8, #12]
    ffa6:	a901      	add	r1, sp, #4
    ffa8:	4683      	mov	fp, r0
    ffaa:	f014 fe51 	bl	24c50 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ffae:	f898 000c 	ldrb.w	r0, [r8, #12]
    ffb2:	280f      	cmp	r0, #15
    ffb4:	d805      	bhi.n	ffc2 <bt_smp_encrypt_change+0x1b2>
			(void)memset(info->ltk + keys->enc_size, 0,
    ffb6:	f1c0 0210 	rsb	r2, r0, #16
    ffba:	4651      	mov	r1, sl
    ffbc:	4458      	add	r0, fp
    ffbe:	f014 fe72 	bl	24ca6 <memset>
		smp_send(smp, buf, NULL, NULL);
    ffc2:	4649      	mov	r1, r9
    ffc4:	2200      	movs	r2, #0
    ffc6:	4620      	mov	r0, r4
    ffc8:	f7fe fc26 	bl	e818 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    ffcc:	2107      	movs	r1, #7
    ffce:	4620      	mov	r0, r4
    ffd0:	f016 fb5e 	bl	26690 <smp_create_pdu.constprop.0>
		if (!buf) {
    ffd4:	4681      	mov	r9, r0
    ffd6:	b940      	cbnz	r0, ffea <bt_smp_encrypt_change+0x1da>
    ffd8:	4954      	ldr	r1, [pc, #336]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
    ffda:	4b53      	ldr	r3, [pc, #332]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
			BT_ERR("Unable to allocate Master Ident buffer");
    ffdc:	4858      	ldr	r0, [pc, #352]	; (10140 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x141>)
    ffde:	1ac9      	subs	r1, r1, r3
    ffe0:	08c9      	lsrs	r1, r1, #3
    ffe2:	0189      	lsls	r1, r1, #6
    ffe4:	f041 0101 	orr.w	r1, r1, #1
    ffe8:	e7ad      	b.n	ff46 <bt_smp_encrypt_change+0x136>
    ffea:	210a      	movs	r1, #10
    ffec:	3008      	adds	r0, #8
    ffee:	f016 fe9d 	bl	26d2c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    fff2:	2208      	movs	r2, #8
    fff4:	4682      	mov	sl, r0
    fff6:	a905      	add	r1, sp, #20
    fff8:	3002      	adds	r0, #2
    fffa:	f014 fe29 	bl	24c50 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    fffe:	2202      	movs	r2, #2
   10000:	a907      	add	r1, sp, #28
   10002:	4650      	mov	r0, sl
   10004:	f014 fe24 	bl	24c50 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   10008:	4649      	mov	r1, r9
   1000a:	4620      	mov	r0, r4
   1000c:	4a4d      	ldr	r2, [pc, #308]	; (10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>)
   1000e:	f7fe fc03 	bl	e818 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10012:	210d      	movs	r1, #13
   10014:	4628      	mov	r0, r5
   10016:	f016 fa7f 	bl	26518 <atomic_test_bit>
   1001a:	2800      	cmp	r0, #0
   1001c:	d095      	beq.n	ff4a <bt_smp_encrypt_change+0x13a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1001e:	4640      	mov	r0, r8
   10020:	2101      	movs	r1, #1
   10022:	f016 fe28 	bl	26c76 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   10026:	a901      	add	r1, sp, #4
   10028:	2210      	movs	r2, #16
   1002a:	f108 0072 	add.w	r0, r8, #114	; 0x72
   1002e:	f014 fe0f 	bl	24c50 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   10032:	a905      	add	r1, sp, #20
   10034:	2208      	movs	r2, #8
   10036:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1003a:	f014 fe09 	bl	24c50 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1003e:	2202      	movs	r2, #2
   10040:	a907      	add	r1, sp, #28
   10042:	f108 0070 	add.w	r0, r8, #112	; 0x70
   10046:	f014 fe03 	bl	24c50 <memcpy>
   1004a:	e77e      	b.n	ff4a <bt_smp_encrypt_change+0x13a>
   1004c:	2110      	movs	r1, #16
   1004e:	3008      	adds	r0, #8
   10050:	f016 fe6c 	bl	26d2c <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   10054:	7a31      	ldrb	r1, [r6, #8]
   10056:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 10148 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x149>
   1005a:	3112      	adds	r1, #18
   1005c:	2210      	movs	r2, #16
   1005e:	eb09 1101 	add.w	r1, r9, r1, lsl #4
   10062:	f014 fdf5 	bl	24c50 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   10066:	4641      	mov	r1, r8
   10068:	2200      	movs	r2, #0
   1006a:	4620      	mov	r0, r4
   1006c:	f7fe fbd4 	bl	e818 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   10070:	2109      	movs	r1, #9
   10072:	4620      	mov	r0, r4
   10074:	f016 fb0c 	bl	26690 <smp_create_pdu.constprop.0>
		if (!buf) {
   10078:	4680      	mov	r8, r0
   1007a:	b940      	cbnz	r0, 1008e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f>
   1007c:	492b      	ldr	r1, [pc, #172]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
   1007e:	4b2a      	ldr	r3, [pc, #168]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   10080:	4832      	ldr	r0, [pc, #200]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   10082:	1ac9      	subs	r1, r1, r3
   10084:	08c9      	lsrs	r1, r1, #3
   10086:	0189      	lsls	r1, r1, #6
   10088:	f041 0101 	orr.w	r1, r1, #1
   1008c:	e771      	b.n	ff72 <bt_smp_encrypt_change+0x162>
   1008e:	2107      	movs	r1, #7
   10090:	3008      	adds	r0, #8
   10092:	f016 fe4b 	bl	26d2c <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   10096:	7a31      	ldrb	r1, [r6, #8]
   10098:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1009c:	2207      	movs	r2, #7
   1009e:	4449      	add	r1, r9
   100a0:	f014 fdd6 	bl	24c50 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   100a4:	4a2a      	ldr	r2, [pc, #168]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   100a6:	4641      	mov	r1, r8
   100a8:	4620      	mov	r0, r4
   100aa:	f7fe fbb5 	bl	e818 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   100ae:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   100b2:	075b      	lsls	r3, r3, #29
   100b4:	d52e      	bpl.n	10114 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x115>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   100b6:	210a      	movs	r1, #10
   100b8:	4620      	mov	r0, r4
   100ba:	f016 fae9 	bl	26690 <smp_create_pdu.constprop.0>
		if (!buf) {
   100be:	4606      	mov	r6, r0
   100c0:	b940      	cbnz	r0, 100d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd5>
   100c2:	491a      	ldr	r1, [pc, #104]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
   100c4:	4b18      	ldr	r3, [pc, #96]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
			BT_ERR("Unable to allocate Signing Info buffer");
   100c6:	4823      	ldr	r0, [pc, #140]	; (10154 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x155>)
   100c8:	1ac9      	subs	r1, r1, r3
   100ca:	08c9      	lsrs	r1, r1, #3
   100cc:	0189      	lsls	r1, r1, #6
   100ce:	f041 0101 	orr.w	r1, r1, #1
   100d2:	e74e      	b.n	ff72 <bt_smp_encrypt_change+0x162>
   100d4:	2110      	movs	r1, #16
   100d6:	3008      	adds	r0, #8
   100d8:	f016 fe28 	bl	26d2c <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   100dc:	2110      	movs	r1, #16
   100de:	4681      	mov	r9, r0
   100e0:	f003 fad8 	bl	13694 <bt_rand>
   100e4:	4680      	mov	r8, r0
   100e6:	b9d0      	cbnz	r0, 1011e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   100e8:	210d      	movs	r1, #13
   100ea:	4628      	mov	r0, r5
   100ec:	f016 fa14 	bl	26518 <atomic_test_bit>
   100f0:	b158      	cbz	r0, 1010a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10b>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   100f2:	2108      	movs	r1, #8
   100f4:	4638      	mov	r0, r7
   100f6:	f016 fdbe 	bl	26c76 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   100fa:	2210      	movs	r2, #16
   100fc:	4649      	mov	r1, r9
   100fe:	f107 0040 	add.w	r0, r7, #64	; 0x40
   10102:	f014 fda5 	bl	24c50 <memcpy>
			keys->local_csrk.cnt = 0U;
   10106:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1010a:	4a13      	ldr	r2, [pc, #76]	; (10158 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x159>)
   1010c:	4631      	mov	r1, r6
   1010e:	4620      	mov	r0, r4
   10110:	f7fe fb82 	bl	e818 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   10114:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   10118:	2900      	cmp	r1, #0
   1011a:	f43f ae9f 	beq.w	fe5c <bt_smp_encrypt_change+0x4c>
}
   1011e:	b009      	add	sp, #36	; 0x24
   10120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10124:	0002df8e 	.word	0x0002df8e
   10128:	000281b4 	.word	0x000281b4
   1012c:	000282ac 	.word	0x000282ac
   10130:	0002de79 	.word	0x0002de79
   10134:	0002de8e 	.word	0x0002de8e
   10138:	0002def7 	.word	0x0002def7
   1013c:	0002dea9 	.word	0x0002dea9
   10140:	0002ded0 	.word	0x0002ded0
   10144:	00026be9 	.word	0x00026be9
   10148:	20000000 	.word	0x20000000
   1014c:	0002df1c 	.word	0x0002df1c
   10150:	00026be3 	.word	0x00026be3
   10154:	0002df46 	.word	0x0002df46
   10158:	00026bdd 	.word	0x00026bdd

0001015c <smp_timeout>:
   1015c:	4b0b      	ldr	r3, [pc, #44]	; (1018c <smp_timeout+0x30>)
   1015e:	490c      	ldr	r1, [pc, #48]	; (10190 <smp_timeout+0x34>)
{
   10160:	b510      	push	{r4, lr}
   10162:	1ac9      	subs	r1, r1, r3
   10164:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   10166:	0189      	lsls	r1, r1, #6
{
   10168:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1016a:	f041 0101 	orr.w	r1, r1, #1
   1016e:	4809      	ldr	r0, [pc, #36]	; (10194 <smp_timeout+0x38>)
   10170:	f012 fd48 	bl	22c04 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   10174:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
   10178:	2108      	movs	r1, #8
   1017a:	f7ff fbb7 	bl	f8ec <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1017e:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   10182:	2104      	movs	r1, #4
}
   10184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   10188:	f016 ba6d 	b.w	26666 <atomic_set_bit>
   1018c:	000281b4 	.word	0x000281b4
   10190:	000282ac 	.word	0x000282ac
   10194:	0002df6d 	.word	0x0002df6d

00010198 <bt_smp_update_keys>:
{
   10198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1019a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1019c:	f7fe fadc 	bl	e758 <smp_chan_get>
	if (!smp) {
   101a0:	4605      	mov	r5, r0
   101a2:	2800      	cmp	r0, #0
   101a4:	f000 8081 	beq.w	102aa <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   101a8:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   101ac:	2103      	movs	r1, #3
   101ae:	4630      	mov	r0, r6
   101b0:	f016 f9b2 	bl	26518 <atomic_test_bit>
   101b4:	2800      	cmp	r0, #0
   101b6:	d078      	beq.n	102aa <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
   101b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   101bc:	b108      	cbz	r0, 101c2 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
   101be:	f000 fa0d 	bl	105dc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   101c2:	f104 0788 	add.w	r7, r4, #136	; 0x88
   101c6:	7a20      	ldrb	r0, [r4, #8]
   101c8:	4639      	mov	r1, r7
   101ca:	f000 f88b 	bl	102e4 <bt_keys_get_addr>
   101ce:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   101d2:	b9b0      	cbnz	r0, 10202 <bt_smp_update_keys+0x6a>
   101d4:	4a35      	ldr	r2, [pc, #212]	; (102ac <bt_smp_update_keys+0x114>)
   101d6:	4c36      	ldr	r4, [pc, #216]	; (102b0 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
   101d8:	4638      	mov	r0, r7
   101da:	1aa4      	subs	r4, r4, r2
   101dc:	f7f7 ff92 	bl	8104 <bt_addr_le_str_real>
   101e0:	f7f5 f9fc 	bl	55dc <log_strdup>
   101e4:	08e4      	lsrs	r4, r4, #3
   101e6:	01a4      	lsls	r4, r4, #6
   101e8:	f044 0401 	orr.w	r4, r4, #1
   101ec:	4601      	mov	r1, r0
   101ee:	4622      	mov	r2, r4
   101f0:	4830      	ldr	r0, [pc, #192]	; (102b4 <bt_smp_update_keys+0x11c>)
   101f2:	f012 fd14 	bl	22c1e <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   101f6:	4628      	mov	r0, r5
   101f8:	2108      	movs	r1, #8
}
   101fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   101fe:	f016 bc61 	b.w	26ac4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   10202:	210e      	movs	r1, #14
   10204:	4630      	mov	r0, r6
   10206:	f016 f987 	bl	26518 <atomic_test_bit>
   1020a:	b128      	cbz	r0, 10218 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1020c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   10210:	7b53      	ldrb	r3, [r2, #13]
   10212:	f043 0302 	orr.w	r3, r3, #2
   10216:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   10218:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1021c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   10220:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10222:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   10224:	d838      	bhi.n	10298 <bt_smp_update_keys+0x100>
   10226:	b3d2      	cbz	r2, 1029e <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10228:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1022c:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1022e:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   10232:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
   10236:	4293      	cmp	r3, r2
   10238:	bf28      	it	cs
   1023a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1023c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1023e:	4630      	mov	r0, r6
   10240:	2105      	movs	r1, #5
   10242:	f016 f969 	bl	26518 <atomic_test_bit>
   10246:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1024a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1024c:	b350      	cbz	r0, 102a4 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
   1024e:	f042 0210 	orr.w	r2, r2, #16
   10252:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10254:	210d      	movs	r1, #13
   10256:	4630      	mov	r0, r6
   10258:	f016 f95e 	bl	26518 <atomic_test_bit>
   1025c:	b328      	cbz	r0, 102aa <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1025e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10262:	2120      	movs	r1, #32
   10264:	f016 fd07 	bl	26c76 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   10268:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1026c:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   10270:	2210      	movs	r2, #16
   10272:	301a      	adds	r0, #26
   10274:	f014 fcec 	bl	24c50 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   10278:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1027c:	2208      	movs	r2, #8
   1027e:	2100      	movs	r1, #0
   10280:	3010      	adds	r0, #16
   10282:	f014 fd10 	bl	24ca6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10286:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1028a:	2202      	movs	r2, #2
}
   1028c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10290:	2100      	movs	r1, #0
   10292:	3018      	adds	r0, #24
   10294:	f014 bd07 	b.w	24ca6 <memset>
	switch (smp->method) {
   10298:	3a05      	subs	r2, #5
   1029a:	2a01      	cmp	r2, #1
   1029c:	d9c4      	bls.n	10228 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1029e:	f023 0301 	bic.w	r3, r3, #1
   102a2:	e7c3      	b.n	1022c <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   102a4:	f022 0210 	bic.w	r2, r2, #16
   102a8:	735a      	strb	r2, [r3, #13]
}
   102aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102ac:	000281b4 	.word	0x000281b4
   102b0:	000282ac 	.word	0x000282ac
   102b4:	0002dbe3 	.word	0x0002dbe3

000102b8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   102b8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   102ba:	4b07      	ldr	r3, [pc, #28]	; (102d8 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   102bc:	4807      	ldr	r0, [pc, #28]	; (102dc <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   102be:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   102c2:	f003 0306 	and.w	r3, r3, #6
   102c6:	1f9a      	subs	r2, r3, #6
   102c8:	4253      	negs	r3, r2
   102ca:	4153      	adcs	r3, r2
   102cc:	4a04      	ldr	r2, [pc, #16]	; (102e0 <bt_smp_init+0x28>)
   102ce:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   102d0:	f7fa fe74 	bl	afbc <bt_pub_key_gen>
	}

	return smp_self_test();
}
   102d4:	2000      	movs	r0, #0
   102d6:	bd08      	pop	{r3, pc}
   102d8:	20000000 	.word	0x20000000
   102dc:	20000414 	.word	0x20000414
   102e0:	2000fb29 	.word	0x2000fb29

000102e4 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   102e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   102e8:	4d3c      	ldr	r5, [pc, #240]	; (103dc <bt_keys_get_addr+0xf8>)
   102ea:	782b      	ldrb	r3, [r5, #0]
   102ec:	4283      	cmp	r3, r0
{
   102ee:	b085      	sub	sp, #20
   102f0:	4607      	mov	r7, r0
   102f2:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   102f4:	d105      	bne.n	10302 <bt_keys_get_addr+0x1e>
	return memcmp(a, b, sizeof(*a));
   102f6:	2207      	movs	r2, #7
   102f8:	1c68      	adds	r0, r5, #1
   102fa:	f014 fc98 	bl	24c2e <memcmp>
   102fe:	2800      	cmp	r0, #0
   10300:	d03c      	beq.n	1037c <bt_keys_get_addr+0x98>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   10302:	2300      	movs	r3, #0
   10304:	4836      	ldr	r0, [pc, #216]	; (103e0 <bt_keys_get_addr+0xfc>)
   10306:	9302      	str	r3, [sp, #8]
   10308:	2207      	movs	r2, #7
   1030a:	a902      	add	r1, sp, #8
   1030c:	f8cd 300b 	str.w	r3, [sp, #11]
   10310:	f014 fc8d 	bl	24c2e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10314:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   10318:	2800      	cmp	r0, #0
   1031a:	bf0c      	ite	eq
   1031c:	2400      	moveq	r4, #0
   1031e:	2402      	movne	r4, #2
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10320:	42bb      	cmp	r3, r7
   10322:	d023      	beq.n	1036c <bt_keys_get_addr+0x88>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   10324:	2c02      	cmp	r4, #2
   10326:	d10c      	bne.n	10342 <bt_keys_get_addr+0x5e>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   10328:	f04f 0900 	mov.w	r9, #0
   1032c:	482d      	ldr	r0, [pc, #180]	; (103e4 <bt_keys_get_addr+0x100>)
   1032e:	f8cd 9008 	str.w	r9, [sp, #8]
   10332:	2207      	movs	r2, #7
   10334:	a902      	add	r1, sp, #8
   10336:	f8cd 900b 	str.w	r9, [sp, #11]
   1033a:	f014 fc78 	bl	24c2e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1033e:	bb18      	cbnz	r0, 10388 <bt_keys_get_addr+0xa4>
			first_free_slot = i;
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (first_free_slot == ARRAY_SIZE(key_pool)) {
   10340:	2401      	movs	r4, #1
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
   10342:	2088      	movs	r0, #136	; 0x88
   10344:	4344      	muls	r4, r0
   10346:	eb05 0904 	add.w	r9, r5, r4
		keys->id = id;
   1034a:	552f      	strb	r7, [r5, r4]
		bt_addr_le_copy(&keys->addr, addr);
   1034c:	3401      	adds	r4, #1
	memcpy(dst, src, sizeof(*dst));
   1034e:	2207      	movs	r2, #7
   10350:	4631      	mov	r1, r6
   10352:	1928      	adds	r0, r5, r4
   10354:	f014 fc7c 	bl	24c50 <memcpy>
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
   10358:	4a23      	ldr	r2, [pc, #140]	; (103e8 <bt_keys_get_addr+0x104>)
   1035a:	6813      	ldr	r3, [r2, #0]
   1035c:	3301      	adds	r3, #1
   1035e:	6013      	str	r3, [r2, #0]
   10360:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
		last_keys_updated = keys;
   10364:	4b21      	ldr	r3, [pc, #132]	; (103ec <bt_keys_get_addr+0x108>)
   10366:	f8c3 9000 	str.w	r9, [r3]
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
   1036a:	e009      	b.n	10380 <bt_keys_get_addr+0x9c>
	return memcmp(a, b, sizeof(*a));
   1036c:	481d      	ldr	r0, [pc, #116]	; (103e4 <bt_keys_get_addr+0x100>)
   1036e:	2207      	movs	r2, #7
   10370:	4631      	mov	r1, r6
   10372:	f014 fc5c 	bl	24c2e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10376:	2800      	cmp	r0, #0
   10378:	d1d4      	bne.n	10324 <bt_keys_get_addr+0x40>
   1037a:	2088      	movs	r0, #136	; 0x88
		keys = &key_pool[i];
   1037c:	eb05 0900 	add.w	r9, r5, r0
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   10380:	4648      	mov	r0, r9
   10382:	b005      	add	sp, #20
   10384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				oldest = current;
   10388:	4c14      	ldr	r4, [pc, #80]	; (103dc <bt_keys_get_addr+0xf8>)
			if (current->aging_counter < oldest->aging_counter) {
   1038a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1038e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
				oldest = current;
   10392:	f104 0188 	add.w	r1, r4, #136	; 0x88
   10396:	429a      	cmp	r2, r3
   10398:	bf38      	it	cc
   1039a:	460c      	movcc	r4, r1
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
   1039c:	f104 0801 	add.w	r8, r4, #1
	memcpy(dst, src, sizeof(*dst));
   103a0:	2207      	movs	r2, #7
   103a2:	4641      	mov	r1, r8
   103a4:	4668      	mov	r0, sp
   103a6:	f014 fc53 	bl	24c50 <memcpy>
		bt_unpair(oldest->id, &oldest_addr);
   103aa:	4669      	mov	r1, sp
   103ac:	7820      	ldrb	r0, [r4, #0]
   103ae:	f7f9 fd0f 	bl	9dd0 <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   103b2:	2207      	movs	r2, #7
   103b4:	a902      	add	r1, sp, #8
   103b6:	4640      	mov	r0, r8
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   103b8:	f8cd 9008 	str.w	r9, [sp, #8]
   103bc:	f8cd 900b 	str.w	r9, [sp, #11]
   103c0:	f014 fc35 	bl	24c2e <memcmp>
   103c4:	2800      	cmp	r0, #0
   103c6:	d1db      	bne.n	10380 <bt_keys_get_addr+0x9c>
			first_free_slot = oldest - &key_pool[0];
   103c8:	1b64      	subs	r4, r4, r5
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   103ca:	2c88      	cmp	r4, #136	; 0x88
   103cc:	d804      	bhi.n	103d8 <bt_keys_get_addr+0xf4>
			first_free_slot = oldest - &key_pool[0];
   103ce:	10e4      	asrs	r4, r4, #3
   103d0:	f1a0 300f 	sub.w	r0, r0, #252645135	; 0xf0f0f0f
   103d4:	4344      	muls	r4, r0
   103d6:	e7b4      	b.n	10342 <bt_keys_get_addr+0x5e>
	return NULL;
   103d8:	4681      	mov	r9, r0
   103da:	e7d1      	b.n	10380 <bt_keys_get_addr+0x9c>
   103dc:	2000dc68 	.word	0x2000dc68
   103e0:	2000dc69 	.word	0x2000dc69
   103e4:	2000dcf1 	.word	0x2000dcf1
   103e8:	2000dc64 	.word	0x2000dc64
   103ec:	2000dd78 	.word	0x2000dd78

000103f0 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   103f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   103f2:	4c11      	ldr	r4, [pc, #68]	; (10438 <bt_foreach_bond+0x48>)
   103f4:	89e3      	ldrh	r3, [r4, #14]
{
   103f6:	4607      	mov	r7, r0
   103f8:	460d      	mov	r5, r1
   103fa:	4616      	mov	r6, r2
		if (keys->keys && keys->id == id) {
   103fc:	b153      	cbz	r3, 10414 <bt_foreach_bond+0x24>
   103fe:	7823      	ldrb	r3, [r4, #0]
   10400:	4283      	cmp	r3, r0
   10402:	d107      	bne.n	10414 <bt_foreach_bond+0x24>
	memcpy(dst, src, sizeof(*dst));
   10404:	1c61      	adds	r1, r4, #1
   10406:	2207      	movs	r2, #7
   10408:	4668      	mov	r0, sp
   1040a:	f014 fc21 	bl	24c50 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   1040e:	4631      	mov	r1, r6
   10410:	4668      	mov	r0, sp
   10412:	47a8      	blx	r5
		if (keys->keys && keys->id == id) {
   10414:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
   10418:	b15b      	cbz	r3, 10432 <bt_foreach_bond+0x42>
   1041a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1041e:	42bb      	cmp	r3, r7
   10420:	d107      	bne.n	10432 <bt_foreach_bond+0x42>
   10422:	4906      	ldr	r1, [pc, #24]	; (1043c <bt_foreach_bond+0x4c>)
   10424:	2207      	movs	r2, #7
   10426:	4668      	mov	r0, sp
   10428:	f014 fc12 	bl	24c50 <memcpy>
			func(&info, user_data);
   1042c:	4631      	mov	r1, r6
   1042e:	4668      	mov	r0, sp
   10430:	47a8      	blx	r5
		}
	}
}
   10432:	b003      	add	sp, #12
   10434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10436:	bf00      	nop
   10438:	2000dc68 	.word	0x2000dc68
   1043c:	2000dcf1 	.word	0x2000dcf1

00010440 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   10440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10444:	4f0a      	ldr	r7, [pc, #40]	; (10470 <bt_keys_foreach+0x30>)
   10446:	89fb      	ldrh	r3, [r7, #14]
   10448:	4203      	tst	r3, r0
{
   1044a:	4606      	mov	r6, r0
   1044c:	460c      	mov	r4, r1
   1044e:	4615      	mov	r5, r2
		if ((key_pool[i].keys & type)) {
   10450:	d002      	beq.n	10458 <bt_keys_foreach+0x18>
			func(&key_pool[i], data);
   10452:	4611      	mov	r1, r2
   10454:	4638      	mov	r0, r7
   10456:	47a0      	blx	r4
		if ((key_pool[i].keys & type)) {
   10458:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
   1045c:	4233      	tst	r3, r6
   1045e:	d005      	beq.n	1046c <bt_keys_foreach+0x2c>
			func(&key_pool[i], data);
   10460:	4629      	mov	r1, r5
   10462:	4623      	mov	r3, r4
   10464:	4803      	ldr	r0, [pc, #12]	; (10474 <bt_keys_foreach+0x34>)
		}
	}
}
   10466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			func(&key_pool[i], data);
   1046a:	4718      	bx	r3
}
   1046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10470:	2000dc68 	.word	0x2000dc68
   10474:	2000dcf0 	.word	0x2000dcf0

00010478 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   10478:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1047a:	4903      	ldr	r1, [pc, #12]	; (10488 <keys_commit+0x10>)
   1047c:	2200      	movs	r2, #0
   1047e:	2002      	movs	r0, #2
   10480:	f7ff ffde 	bl	10440 <bt_keys_foreach>
	}

	return 0;
}
   10484:	2000      	movs	r0, #0
   10486:	bd08      	pop	{r3, pc}
   10488:	00026c53 	.word	0x00026c53

0001048c <bt_keys_find>:
{
   1048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1048e:	4c11      	ldr	r4, [pc, #68]	; (104d4 <bt_keys_find+0x48>)
   10490:	89e3      	ldrh	r3, [r4, #14]
   10492:	4203      	tst	r3, r0
{
   10494:	4607      	mov	r7, r0
   10496:	460e      	mov	r6, r1
   10498:	4615      	mov	r5, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1049a:	d008      	beq.n	104ae <bt_keys_find+0x22>
   1049c:	7823      	ldrb	r3, [r4, #0]
   1049e:	428b      	cmp	r3, r1
   104a0:	d105      	bne.n	104ae <bt_keys_find+0x22>
	return memcmp(a, b, sizeof(*a));
   104a2:	2207      	movs	r2, #7
   104a4:	4629      	mov	r1, r5
   104a6:	1c60      	adds	r0, r4, #1
   104a8:	f014 fbc1 	bl	24c2e <memcmp>
   104ac:	b170      	cbz	r0, 104cc <bt_keys_find+0x40>
   104ae:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
   104b2:	423b      	tst	r3, r7
   104b4:	d00c      	beq.n	104d0 <bt_keys_find+0x44>
   104b6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   104ba:	42b3      	cmp	r3, r6
   104bc:	d108      	bne.n	104d0 <bt_keys_find+0x44>
   104be:	4806      	ldr	r0, [pc, #24]	; (104d8 <bt_keys_find+0x4c>)
   104c0:	2207      	movs	r2, #7
   104c2:	4629      	mov	r1, r5
   104c4:	f014 fbb3 	bl	24c2e <memcmp>
   104c8:	b910      	cbnz	r0, 104d0 <bt_keys_find+0x44>
   104ca:	2088      	movs	r0, #136	; 0x88
			return &key_pool[i];
   104cc:	4420      	add	r0, r4
}
   104ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   104d0:	2000      	movs	r0, #0
   104d2:	e7fc      	b.n	104ce <bt_keys_find+0x42>
   104d4:	2000dc68 	.word	0x2000dc68
   104d8:	2000dcf1 	.word	0x2000dcf1

000104dc <bt_keys_find_irk>:
{
   104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   104de:	780b      	ldrb	r3, [r1, #0]
   104e0:	2b01      	cmp	r3, #1
   104e2:	4606      	mov	r6, r0
   104e4:	460d      	mov	r5, r1
   104e6:	d001      	beq.n	104ec <bt_keys_find_irk+0x10>
		return NULL;
   104e8:	2000      	movs	r0, #0
}
   104ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   104ec:	798b      	ldrb	r3, [r1, #6]
   104ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   104f2:	2b40      	cmp	r3, #64	; 0x40
   104f4:	d1f8      	bne.n	104e8 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   104f6:	4c23      	ldr	r4, [pc, #140]	; (10584 <bt_keys_find_irk+0xa8>)
   104f8:	89e3      	ldrh	r3, [r4, #14]
   104fa:	0798      	lsls	r0, r3, #30
   104fc:	d509      	bpl.n	10512 <bt_keys_find_irk+0x36>
		if (key_pool[i].id == id &&
   104fe:	7823      	ldrb	r3, [r4, #0]
   10500:	42b3      	cmp	r3, r6
   10502:	d106      	bne.n	10512 <bt_keys_find_irk+0x36>
	return memcmp(a, b, sizeof(*a));
   10504:	2206      	movs	r2, #6
   10506:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1050a:	1c68      	adds	r0, r5, #1
   1050c:	f014 fb8f 	bl	24c2e <memcmp>
   10510:	b170      	cbz	r0, 10530 <bt_keys_find_irk+0x54>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10512:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
   10516:	0799      	lsls	r1, r3, #30
   10518:	d50c      	bpl.n	10534 <bt_keys_find_irk+0x58>
		if (key_pool[i].id == id &&
   1051a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1051e:	42b3      	cmp	r3, r6
   10520:	d108      	bne.n	10534 <bt_keys_find_irk+0x58>
   10522:	4919      	ldr	r1, [pc, #100]	; (10588 <bt_keys_find_irk+0xac>)
   10524:	2206      	movs	r2, #6
   10526:	1c68      	adds	r0, r5, #1
   10528:	f014 fb81 	bl	24c2e <memcmp>
   1052c:	b910      	cbnz	r0, 10534 <bt_keys_find_irk+0x58>
   1052e:	2088      	movs	r0, #136	; 0x88
			return &key_pool[i];
   10530:	4420      	add	r0, r4
   10532:	e7da      	b.n	104ea <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10534:	89e3      	ldrh	r3, [r4, #14]
   10536:	079a      	lsls	r2, r3, #30
   10538:	d508      	bpl.n	1054c <bt_keys_find_irk+0x70>
		if (key_pool[i].id != id) {
   1053a:	7823      	ldrb	r3, [r4, #0]
   1053c:	42b3      	cmp	r3, r6
   1053e:	d105      	bne.n	1054c <bt_keys_find_irk+0x70>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   10540:	1c6f      	adds	r7, r5, #1
   10542:	4812      	ldr	r0, [pc, #72]	; (1058c <bt_keys_find_irk+0xb0>)
   10544:	4639      	mov	r1, r7
   10546:	f014 fc20 	bl	24d8a <bt_rpa_irk_matches>
   1054a:	b9c0      	cbnz	r0, 1057e <bt_keys_find_irk+0xa2>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1054c:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
   10550:	079b      	lsls	r3, r3, #30
   10552:	d5c9      	bpl.n	104e8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   10554:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   10558:	42b3      	cmp	r3, r6
   1055a:	d1c5      	bne.n	104e8 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1055c:	1c6f      	adds	r7, r5, #1
   1055e:	480c      	ldr	r0, [pc, #48]	; (10590 <bt_keys_find_irk+0xb4>)
   10560:	4639      	mov	r1, r7
   10562:	f014 fc12 	bl	24d8a <bt_rpa_irk_matches>
   10566:	2800      	cmp	r0, #0
   10568:	d0be      	beq.n	104e8 <bt_keys_find_irk+0xc>
   1056a:	2588      	movs	r5, #136	; 0x88
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   1056c:	f105 003a 	add.w	r0, r5, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   10570:	2206      	movs	r2, #6
   10572:	4639      	mov	r1, r7
   10574:	4420      	add	r0, r4
   10576:	f014 fb6b 	bl	24c50 <memcpy>
			return &key_pool[i];
   1057a:	1960      	adds	r0, r4, r5
   1057c:	e7b5      	b.n	104ea <bt_keys_find_irk+0xe>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1057e:	2500      	movs	r5, #0
   10580:	e7f4      	b.n	1056c <bt_keys_find_irk+0x90>
   10582:	bf00      	nop
   10584:	2000dc68 	.word	0x2000dc68
   10588:	2000dd2a 	.word	0x2000dd2a
   1058c:	2000dc92 	.word	0x2000dc92
   10590:	2000dd1a 	.word	0x2000dd1a

00010594 <bt_keys_find_addr>:
{
   10594:	b570      	push	{r4, r5, r6, lr}
		if (key_pool[i].id == id &&
   10596:	4c0f      	ldr	r4, [pc, #60]	; (105d4 <bt_keys_find_addr+0x40>)
   10598:	7823      	ldrb	r3, [r4, #0]
   1059a:	4283      	cmp	r3, r0
{
   1059c:	4605      	mov	r5, r0
   1059e:	460e      	mov	r6, r1
		if (key_pool[i].id == id &&
   105a0:	d00b      	beq.n	105ba <bt_keys_find_addr+0x26>
   105a2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   105a6:	42ab      	cmp	r3, r5
   105a8:	d111      	bne.n	105ce <bt_keys_find_addr+0x3a>
	return memcmp(a, b, sizeof(*a));
   105aa:	480b      	ldr	r0, [pc, #44]	; (105d8 <bt_keys_find_addr+0x44>)
   105ac:	2207      	movs	r2, #7
   105ae:	4631      	mov	r1, r6
   105b0:	f014 fb3d 	bl	24c2e <memcmp>
   105b4:	b958      	cbnz	r0, 105ce <bt_keys_find_addr+0x3a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   105b6:	2001      	movs	r0, #1
   105b8:	e005      	b.n	105c6 <bt_keys_find_addr+0x32>
   105ba:	2207      	movs	r2, #7
   105bc:	1c60      	adds	r0, r4, #1
   105be:	f014 fb36 	bl	24c2e <memcmp>
		if (key_pool[i].id == id &&
   105c2:	2800      	cmp	r0, #0
   105c4:	d1ed      	bne.n	105a2 <bt_keys_find_addr+0xe>
			return &key_pool[i];
   105c6:	2388      	movs	r3, #136	; 0x88
   105c8:	fb03 4000 	mla	r0, r3, r0, r4
   105cc:	e000      	b.n	105d0 <bt_keys_find_addr+0x3c>
	return NULL;
   105ce:	2000      	movs	r0, #0
}
   105d0:	bd70      	pop	{r4, r5, r6, pc}
   105d2:	bf00      	nop
   105d4:	2000dc68 	.word	0x2000dc68
   105d8:	2000dcf1 	.word	0x2000dcf1

000105dc <bt_keys_clear>:
{
   105dc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   105de:	7a03      	ldrb	r3, [r0, #8]
   105e0:	075b      	lsls	r3, r3, #29
{
   105e2:	b08c      	sub	sp, #48	; 0x30
   105e4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   105e6:	d501      	bpl.n	105ec <bt_keys_clear+0x10>
		bt_id_del(keys);
   105e8:	f7f9 fd98 	bl	a11c <bt_id_del>
		if (keys->id) {
   105ec:	4625      	mov	r5, r4
   105ee:	f815 2b01 	ldrb.w	r2, [r5], #1
   105f2:	b1b2      	cbz	r2, 10622 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   105f4:	ae02      	add	r6, sp, #8
   105f6:	2104      	movs	r1, #4
   105f8:	4630      	mov	r0, r6
   105fa:	f011 fdba 	bl	22172 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   105fe:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   10600:	4a09      	ldr	r2, [pc, #36]	; (10628 <bt_keys_clear+0x4c>)
   10602:	462b      	mov	r3, r5
   10604:	2124      	movs	r1, #36	; 0x24
   10606:	a803      	add	r0, sp, #12
   10608:	f7f8 f82a 	bl	8660 <bt_settings_encode_key>
		settings_delete(key);
   1060c:	a803      	add	r0, sp, #12
   1060e:	f012 ffa1 	bl	23554 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   10612:	2288      	movs	r2, #136	; 0x88
   10614:	2100      	movs	r1, #0
   10616:	4620      	mov	r0, r4
}
   10618:	b00c      	add	sp, #48	; 0x30
   1061a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1061e:	f014 bb42 	b.w	24ca6 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   10622:	9200      	str	r2, [sp, #0]
   10624:	e7ec      	b.n	10600 <bt_keys_clear+0x24>
   10626:	bf00      	nop
   10628:	0002e0e1 	.word	0x0002e0e1

0001062c <keys_set>:
{
   1062c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1062e:	4614      	mov	r4, r2
   10630:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
   10632:	4606      	mov	r6, r0
   10634:	b970      	cbnz	r0, 10654 <keys_set+0x28>
   10636:	4952      	ldr	r1, [pc, #328]	; (10780 <keys_set+0x154>)
   10638:	4b52      	ldr	r3, [pc, #328]	; (10784 <keys_set+0x158>)
		BT_ERR("Insufficient number of arguments");
   1063a:	4853      	ldr	r0, [pc, #332]	; (10788 <keys_set+0x15c>)
   1063c:	1ac9      	subs	r1, r1, r3
   1063e:	08c9      	lsrs	r1, r1, #3
   10640:	0189      	lsls	r1, r1, #6
   10642:	f041 0101 	orr.w	r1, r1, #1
   10646:	f012 fadd 	bl	22c04 <log_0>
		return -EINVAL;
   1064a:	f06f 0415 	mvn.w	r4, #21
}
   1064e:	4620      	mov	r0, r4
   10650:	b023      	add	sp, #140	; 0x8c
   10652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   10654:	227c      	movs	r2, #124	; 0x7c
   10656:	a903      	add	r1, sp, #12
   10658:	4618      	mov	r0, r3
   1065a:	47a0      	blx	r4
	if (len < 0) {
   1065c:	1e05      	subs	r5, r0, #0
   1065e:	da0b      	bge.n	10678 <keys_set+0x4c>
   10660:	4a47      	ldr	r2, [pc, #284]	; (10780 <keys_set+0x154>)
   10662:	4b48      	ldr	r3, [pc, #288]	; (10784 <keys_set+0x158>)
		BT_ERR("Failed to read value (err %zd)", len);
   10664:	4849      	ldr	r0, [pc, #292]	; (1078c <keys_set+0x160>)
   10666:	1ad2      	subs	r2, r2, r3
   10668:	08d2      	lsrs	r2, r2, #3
   1066a:	0192      	lsls	r2, r2, #6
   1066c:	f042 0201 	orr.w	r2, r2, #1
   10670:	4629      	mov	r1, r5
   10672:	f012 fad4 	bl	22c1e <log_1>
   10676:	e7e8      	b.n	1064a <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   10678:	a901      	add	r1, sp, #4
   1067a:	4630      	mov	r0, r6
   1067c:	f014 fbe4 	bl	24e48 <bt_settings_decode_key>
	if (err) {
   10680:	4604      	mov	r4, r0
   10682:	b148      	cbz	r0, 10698 <keys_set+0x6c>
   10684:	4a3e      	ldr	r2, [pc, #248]	; (10780 <keys_set+0x154>)
   10686:	4b3f      	ldr	r3, [pc, #252]	; (10784 <keys_set+0x158>)
		BT_ERR("Unable to decode address %s", name);
   10688:	4841      	ldr	r0, [pc, #260]	; (10790 <keys_set+0x164>)
   1068a:	1ad2      	subs	r2, r2, r3
   1068c:	08d2      	lsrs	r2, r2, #3
   1068e:	0192      	lsls	r2, r2, #6
   10690:	f042 0201 	orr.w	r2, r2, #1
   10694:	4631      	mov	r1, r6
   10696:	e7ec      	b.n	10672 <keys_set+0x46>
	settings_name_next(name, &next);
   10698:	4669      	mov	r1, sp
   1069a:	4630      	mov	r0, r6
   1069c:	f012 ff81 	bl	235a2 <settings_name_next>
	if (!next) {
   106a0:	9800      	ldr	r0, [sp, #0]
   106a2:	b188      	cbz	r0, 106c8 <keys_set+0x9c>
		id = strtol(next, NULL, 10);
   106a4:	220a      	movs	r2, #10
   106a6:	4621      	mov	r1, r4
   106a8:	f014 fa04 	bl	24ab4 <strtol>
   106ac:	b2c0      	uxtb	r0, r0
	if (!len) {
   106ae:	b9fd      	cbnz	r5, 106f0 <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   106b0:	4601      	mov	r1, r0
   106b2:	aa01      	add	r2, sp, #4
   106b4:	203f      	movs	r0, #63	; 0x3f
   106b6:	f7ff fee9 	bl	1048c <bt_keys_find>
		if (keys) {
   106ba:	b138      	cbz	r0, 106cc <keys_set+0xa0>
			(void)memset(keys, 0, sizeof(*keys));
   106bc:	2288      	movs	r2, #136	; 0x88
   106be:	4629      	mov	r1, r5
   106c0:	f014 faf1 	bl	24ca6 <memset>
		return 0;
   106c4:	462c      	mov	r4, r5
   106c6:	e7c2      	b.n	1064e <keys_set+0x22>
		id = BT_ID_DEFAULT;
   106c8:	4620      	mov	r0, r4
   106ca:	e7f0      	b.n	106ae <keys_set+0x82>
   106cc:	4a2d      	ldr	r2, [pc, #180]	; (10784 <keys_set+0x158>)
   106ce:	4c2c      	ldr	r4, [pc, #176]	; (10780 <keys_set+0x154>)
			BT_WARN("Unable to find deleted keys for %s",
   106d0:	a801      	add	r0, sp, #4
   106d2:	1aa4      	subs	r4, r4, r2
   106d4:	f7f7 fd16 	bl	8104 <bt_addr_le_str_real>
   106d8:	f7f4 ff80 	bl	55dc <log_strdup>
   106dc:	08e4      	lsrs	r4, r4, #3
   106de:	01a4      	lsls	r4, r4, #6
   106e0:	f044 0402 	orr.w	r4, r4, #2
   106e4:	4601      	mov	r1, r0
   106e6:	4622      	mov	r2, r4
   106e8:	482a      	ldr	r0, [pc, #168]	; (10794 <keys_set+0x168>)
   106ea:	f012 fa98 	bl	22c1e <log_1>
   106ee:	e7e9      	b.n	106c4 <keys_set+0x98>
	keys = bt_keys_get_addr(id, &addr);
   106f0:	a901      	add	r1, sp, #4
   106f2:	f7ff fdf7 	bl	102e4 <bt_keys_get_addr>
	if (!keys) {
   106f6:	4607      	mov	r7, r0
   106f8:	b998      	cbnz	r0, 10722 <keys_set+0xf6>
   106fa:	4a22      	ldr	r2, [pc, #136]	; (10784 <keys_set+0x158>)
   106fc:	4c20      	ldr	r4, [pc, #128]	; (10780 <keys_set+0x154>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   106fe:	a801      	add	r0, sp, #4
   10700:	1aa4      	subs	r4, r4, r2
   10702:	f7f7 fcff 	bl	8104 <bt_addr_le_str_real>
   10706:	f7f4 ff69 	bl	55dc <log_strdup>
   1070a:	08e4      	lsrs	r4, r4, #3
   1070c:	01a4      	lsls	r4, r4, #6
   1070e:	f044 0401 	orr.w	r4, r4, #1
   10712:	4601      	mov	r1, r0
   10714:	4622      	mov	r2, r4
   10716:	4820      	ldr	r0, [pc, #128]	; (10798 <keys_set+0x16c>)
   10718:	f012 fa81 	bl	22c1e <log_1>
		return -ENOMEM;
   1071c:	f06f 040b 	mvn.w	r4, #11
   10720:	e795      	b.n	1064e <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   10722:	2d7c      	cmp	r5, #124	; 0x7c
   10724:	d013      	beq.n	1074e <keys_set+0x122>
   10726:	4b16      	ldr	r3, [pc, #88]	; (10780 <keys_set+0x154>)
   10728:	4a16      	ldr	r2, [pc, #88]	; (10784 <keys_set+0x158>)
   1072a:	1a9b      	subs	r3, r3, r2
   1072c:	08db      	lsrs	r3, r3, #3
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1072e:	2d78      	cmp	r5, #120	; 0x78
   10730:	ea4f 1383 	mov.w	r3, r3, lsl #6
   10734:	d119      	bne.n	1076a <keys_set+0x13e>
				BT_WARN("Keys for %s have no aging counter",
   10736:	a801      	add	r0, sp, #4
   10738:	f043 0602 	orr.w	r6, r3, #2
   1073c:	f7f7 fce2 	bl	8104 <bt_addr_le_str_real>
   10740:	f7f4 ff4c 	bl	55dc <log_strdup>
   10744:	4632      	mov	r2, r6
   10746:	4601      	mov	r1, r0
   10748:	4814      	ldr	r0, [pc, #80]	; (1079c <keys_set+0x170>)
   1074a:	f012 fa68 	bl	22c1e <log_1>
		memcpy(keys->storage_start, val, len);
   1074e:	462a      	mov	r2, r5
   10750:	a903      	add	r1, sp, #12
   10752:	f107 000c 	add.w	r0, r7, #12
   10756:	f014 fa7b 	bl	24c50 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1075a:	4b11      	ldr	r3, [pc, #68]	; (107a0 <keys_set+0x174>)
   1075c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   10760:	6819      	ldr	r1, [r3, #0]
   10762:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   10764:	bf88      	it	hi
   10766:	601a      	strhi	r2, [r3, #0]
   10768:	e771      	b.n	1064e <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
   1076a:	480e      	ldr	r0, [pc, #56]	; (107a4 <keys_set+0x178>)
   1076c:	f043 0301 	orr.w	r3, r3, #1
   10770:	227c      	movs	r2, #124	; 0x7c
   10772:	4629      	mov	r1, r5
   10774:	f012 fa67 	bl	22c46 <log_2>
			bt_keys_clear(keys);
   10778:	4638      	mov	r0, r7
   1077a:	f7ff ff2f 	bl	105dc <bt_keys_clear>
			return -EINVAL;
   1077e:	e764      	b.n	1064a <keys_set+0x1e>
   10780:	0002828c 	.word	0x0002828c
   10784:	000281b4 	.word	0x000281b4
   10788:	0002c7db 	.word	0x0002c7db
   1078c:	0002e020 	.word	0x0002e020
   10790:	0002d9d9 	.word	0x0002d9d9
   10794:	0002e03f 	.word	0x0002e03f
   10798:	0002e062 	.word	0x0002e062
   1079c:	0002e081 	.word	0x0002e081
   107a0:	2000dc64 	.word	0x2000dc64
   107a4:	0002e0a3 	.word	0x0002e0a3

000107a8 <bt_keys_store>:
{
   107a8:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   107aa:	4605      	mov	r5, r0
{
   107ac:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   107ae:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   107b2:	4604      	mov	r4, r0
	if (keys->id) {
   107b4:	b30a      	cbz	r2, 107fa <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   107b6:	ae02      	add	r6, sp, #8
   107b8:	2104      	movs	r1, #4
   107ba:	4630      	mov	r0, r6
   107bc:	f011 fcd9 	bl	22172 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   107c0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   107c2:	4a0f      	ldr	r2, [pc, #60]	; (10800 <bt_keys_store+0x58>)
   107c4:	462b      	mov	r3, r5
   107c6:	2124      	movs	r1, #36	; 0x24
   107c8:	a803      	add	r0, sp, #12
   107ca:	f7f7 ff49 	bl	8660 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   107ce:	f104 010c 	add.w	r1, r4, #12
   107d2:	227c      	movs	r2, #124	; 0x7c
   107d4:	a803      	add	r0, sp, #12
   107d6:	f7f6 f805 	bl	67e4 <settings_save_one>
	if (err) {
   107da:	4604      	mov	r4, r0
   107dc:	b150      	cbz	r0, 107f4 <bt_keys_store+0x4c>
   107de:	4a09      	ldr	r2, [pc, #36]	; (10804 <bt_keys_store+0x5c>)
   107e0:	4b09      	ldr	r3, [pc, #36]	; (10808 <bt_keys_store+0x60>)
   107e2:	1ad2      	subs	r2, r2, r3
   107e4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   107e6:	0192      	lsls	r2, r2, #6
   107e8:	4601      	mov	r1, r0
   107ea:	f042 0201 	orr.w	r2, r2, #1
   107ee:	4807      	ldr	r0, [pc, #28]	; (1080c <bt_keys_store+0x64>)
   107f0:	f012 fa15 	bl	22c1e <log_1>
}
   107f4:	4620      	mov	r0, r4
   107f6:	b00c      	add	sp, #48	; 0x30
   107f8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   107fa:	9200      	str	r2, [sp, #0]
   107fc:	e7e1      	b.n	107c2 <bt_keys_store+0x1a>
   107fe:	bf00      	nop
   10800:	0002e0e1 	.word	0x0002e0e1
   10804:	0002828c 	.word	0x0002828c
   10808:	000281b4 	.word	0x000281b4
   1080c:	0002e0c1 	.word	0x0002e0c1

00010810 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   10810:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   10812:	f7ff febf 	bl	10594 <bt_keys_find_addr>

	if (!keys) {
   10816:	b150      	cbz	r0, 1082e <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   10818:	4a05      	ldr	r2, [pc, #20]	; (10830 <bt_keys_update_usage+0x20>)
   1081a:	6813      	ldr	r3, [r2, #0]
   1081c:	4283      	cmp	r3, r0
   1081e:	d006      	beq.n	1082e <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   10820:	4904      	ldr	r1, [pc, #16]	; (10834 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   10822:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   10824:	680b      	ldr	r3, [r1, #0]
   10826:	3301      	adds	r3, #1
   10828:	600b      	str	r3, [r1, #0]
   1082a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1082e:	bd08      	pop	{r3, pc}
   10830:	2000dd78 	.word	0x2000dd78
   10834:	2000dc64 	.word	0x2000dc64

00010838 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   10838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1083c:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1083e:	1dc2      	adds	r2, r0, #7
   10840:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10844:	1e75      	subs	r5, r6, #1
{
   10846:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10848:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   1084a:	6018      	str	r0, [r3, #0]
{
   1084c:	b082      	sub	sp, #8
   1084e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10850:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10852:	2100      	movs	r1, #0
   10854:	2204      	movs	r2, #4
   10856:	fb07 0005 	mla	r0, r7, r5, r0
   1085a:	f014 fa24 	bl	24ca6 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1085e:	b1bd      	cbz	r5, 10890 <mem_init+0x58>
   10860:	3e02      	subs	r6, #2
   10862:	b2b6      	uxth	r6, r6
   10864:	fb06 7307 	mla	r3, r6, r7, r7
   10868:	fb06 f807 	mul.w	r8, r6, r7
   1086c:	441c      	add	r4, r3
   1086e:	eba8 0803 	sub.w	r8, r8, r3
   10872:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10874:	2204      	movs	r2, #4
   10876:	eb04 0008 	add.w	r0, r4, r8
   1087a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   1087e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10880:	f014 f9e6 	bl	24c50 <memcpy>
	while (mem_count--) {
   10884:	42b5      	cmp	r5, r6
   10886:	eba4 0407 	sub.w	r4, r4, r7
   1088a:	f105 0501 	add.w	r5, r5, #1
   1088e:	d1f1      	bne.n	10874 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   10890:	b002      	add	sp, #8
   10892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10896:	bf00      	nop

00010898 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   10898:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   1089a:	6805      	ldr	r5, [r0, #0]
{
   1089c:	b082      	sub	sp, #8
	if (*mem_head) {
   1089e:	b195      	cbz	r5, 108c6 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   108a0:	1deb      	adds	r3, r5, #7
   108a2:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   108a6:	2204      	movs	r2, #4
   108a8:	4604      	mov	r4, r0
   108aa:	4629      	mov	r1, r5
   108ac:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   108b0:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   108b2:	f014 f9cd 	bl	24c50 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   108b6:	9b01      	ldr	r3, [sp, #4]
   108b8:	b123      	cbz	r3, 108c4 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   108ba:	1dda      	adds	r2, r3, #7
   108bc:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   108c0:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   108c2:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   108c4:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   108c6:	4628      	mov	r0, r5
   108c8:	b002      	add	sp, #8
   108ca:	bd70      	pop	{r4, r5, r6, pc}

000108cc <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   108cc:	680b      	ldr	r3, [r1, #0]
{
   108ce:	b570      	push	{r4, r5, r6, lr}
   108d0:	460c      	mov	r4, r1
   108d2:	4605      	mov	r5, r0
	if (*mem_head) {
   108d4:	b183      	cbz	r3, 108f8 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   108d6:	3307      	adds	r3, #7
   108d8:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   108dc:	881e      	ldrh	r6, [r3, #0]
   108de:	3601      	adds	r6, #1
   108e0:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   108e2:	2204      	movs	r2, #4
   108e4:	4621      	mov	r1, r4
   108e6:	4628      	mov	r0, r5
   108e8:	f014 f9b2 	bl	24c50 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   108ec:	1deb      	adds	r3, r5, #7
   108ee:	f023 0303 	bic.w	r3, r3, #3
   108f2:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   108f4:	6025      	str	r5, [r4, #0]
}
   108f6:	bd70      	pop	{r4, r5, r6, pc}
   108f8:	2601      	movs	r6, #1
   108fa:	e7f2      	b.n	108e2 <mem_release+0x16>

000108fc <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   108fc:	fb02 0001 	mla	r0, r2, r1, r0
   10900:	4770      	bx	lr
   10902:	bf00      	nop

00010904 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   10904:	1a40      	subs	r0, r0, r1
   10906:	b280      	uxth	r0, r0
}
   10908:	fbb0 f0f2 	udiv	r0, r0, r2
   1090c:	4770      	bx	lr
   1090e:	bf00      	nop

00010910 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   10910:	1e53      	subs	r3, r2, #1
	src += len;
   10912:	4411      	add	r1, r2
	while (len--) {
   10914:	b29b      	uxth	r3, r3
   10916:	b142      	cbz	r2, 1092a <mem_rcopy+0x1a>
   10918:	43db      	mvns	r3, r3
   1091a:	3801      	subs	r0, #1
   1091c:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1091e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   10922:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   10926:	4291      	cmp	r1, r2
   10928:	d1f9      	bne.n	1091e <mem_rcopy+0xe>
	}
}
   1092a:	4770      	bx	lr

0001092c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1092c:	4401      	add	r1, r0
   1092e:	e002      	b.n	10936 <mem_nz+0xa>
		if (*src++) {
   10930:	f810 3b01 	ldrb.w	r3, [r0], #1
   10934:	b91b      	cbnz	r3, 1093e <mem_nz+0x12>
	while (len--) {
   10936:	4288      	cmp	r0, r1
   10938:	d1fa      	bne.n	10930 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   1093a:	2000      	movs	r0, #0
   1093c:	4770      	bx	lr
			return 1;
   1093e:	2001      	movs	r0, #1
}
   10940:	4770      	bx	lr
   10942:	bf00      	nop

00010944 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   10944:	6010      	str	r0, [r2, #0]
   10946:	6008      	str	r0, [r1, #0]

	return link;
}
   10948:	4770      	bx	lr
   1094a:	bf00      	nop

0001094c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1094c:	680a      	ldr	r2, [r1, #0]
{
   1094e:	4603      	mov	r3, r0
	if (*head != *tail) {
   10950:	6800      	ldr	r0, [r0, #0]
   10952:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   10954:	bf05      	ittet	eq
   10956:	2200      	moveq	r2, #0
   10958:	600a      	streq	r2, [r1, #0]
		return NULL;
   1095a:	2000      	movne	r0, #0
	*head = *tail = NULL;
   1095c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1095e:	4770      	bx	lr

00010960 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   10960:	f8d2 c000 	ldr.w	ip, [r2]
   10964:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   10968:	f8d2 c000 	ldr.w	ip, [r2]
   1096c:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   10970:	6010      	str	r0, [r2, #0]

	return link;
}
   10972:	4770      	bx	lr

00010974 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   10974:	4288      	cmp	r0, r1
   10976:	d003      	beq.n	10980 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   10978:	b11a      	cbz	r2, 10982 <memq_peek+0xe>
		*mem = head->mem;
   1097a:	6843      	ldr	r3, [r0, #4]
   1097c:	6013      	str	r3, [r2, #0]
   1097e:	4770      	bx	lr
		return NULL;
   10980:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   10982:	4770      	bx	lr

00010984 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   10984:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   10986:	4283      	cmp	r3, r0
   10988:	d009      	beq.n	1099e <memq_dequeue+0x1a>
	if (mem) {
   1098a:	b12a      	cbz	r2, 10998 <memq_dequeue+0x14>
		*mem = head->mem;
   1098c:	6858      	ldr	r0, [r3, #4]
   1098e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   10990:	681a      	ldr	r2, [r3, #0]
   10992:	600a      	str	r2, [r1, #0]

	return old_head;
}
   10994:	4618      	mov	r0, r3
   10996:	4770      	bx	lr
	if (old_head == NULL) {
   10998:	2b00      	cmp	r3, #0
   1099a:	d1f9      	bne.n	10990 <memq_dequeue+0xc>
   1099c:	e7fa      	b.n	10994 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1099e:	2300      	movs	r3, #0
   109a0:	e7f8      	b.n	10994 <memq_dequeue+0x10>
   109a2:	bf00      	nop

000109a4 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   109a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109a8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 109dc <mayfly_init+0x38>
   109ac:	4e0c      	ldr	r6, [pc, #48]	; (109e0 <mayfly_init+0x3c>)
   109ae:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   109b0:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   109b4:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   109b6:	1d22      	adds	r2, r4, #4
   109b8:	4621      	mov	r1, r4
   109ba:	4628      	mov	r0, r5
		while (caller_id--) {
   109bc:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   109be:	f7ff ffc1 	bl	10944 <memq_init>
		while (caller_id--) {
   109c2:	42b4      	cmp	r4, r6
   109c4:	f1a5 0508 	sub.w	r5, r5, #8
   109c8:	d1f5      	bne.n	109b6 <mayfly_init+0x12>
	while (callee_id--) {
   109ca:	3f04      	subs	r7, #4
   109cc:	1d3b      	adds	r3, r7, #4
   109ce:	f1a8 0820 	sub.w	r8, r8, #32
   109d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   109d6:	d1eb      	bne.n	109b0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   109d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109dc:	2000ddf4 	.word	0x2000ddf4
   109e0:	2000de84 	.word	0x2000de84

000109e4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   109e4:	b410      	push	{r4}
   109e6:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   109e8:	4c15      	ldr	r4, [pc, #84]	; (10a40 <mayfly_enable+0x5c>)
{
   109ea:	468c      	mov	ip, r1
	if (enable) {
   109ec:	b192      	cbz	r2, 10a14 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   109ee:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   109f2:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   109f6:	0100      	lsls	r0, r0, #4
   109f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   109fc:	4421      	add	r1, r4
   109fe:	7a48      	ldrb	r0, [r1, #9]
   10a00:	7a0c      	ldrb	r4, [r1, #8]
   10a02:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10a04:	bf04      	itt	eq
   10a06:	3001      	addeq	r0, #1
   10a08:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   10a0a:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   10a0c:	4661      	mov	r1, ip
   10a0e:	4618      	mov	r0, r3
   10a10:	f00c bc5a 	b.w	1d2c8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10a14:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10a18:	0112      	lsls	r2, r2, #4
   10a1a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10a1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10a22:	4423      	add	r3, r4
   10a24:	7a9c      	ldrb	r4, [r3, #10]
   10a26:	7ada      	ldrb	r2, [r3, #11]
   10a28:	42a2      	cmp	r2, r4
   10a2a:	d001      	beq.n	10a30 <mayfly_enable+0x4c>
}
   10a2c:	bc10      	pop	{r4}
   10a2e:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   10a30:	3201      	adds	r2, #1
   10a32:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10a34:	4b03      	ldr	r3, [pc, #12]	; (10a44 <mayfly_enable+0x60>)
   10a36:	2201      	movs	r2, #1
   10a38:	545a      	strb	r2, [r3, r1]
}
   10a3a:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   10a3c:	f00c bc9a 	b.w	1d374 <mayfly_pend>
   10a40:	2000de00 	.word	0x2000de00
   10a44:	2000ddfc 	.word	0x2000ddfc

00010a48 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   10a48:	b570      	push	{r4, r5, r6, lr}
   10a4a:	4606      	mov	r6, r0
   10a4c:	461c      	mov	r4, r3
   10a4e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10a50:	b322      	cbz	r2, 10a9c <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10a52:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10a54:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10a56:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10a58:	f012 0203 	ands.w	r2, r2, #3
   10a5c:	d005      	beq.n	10a6a <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   10a5e:	2a01      	cmp	r2, #1
   10a60:	d040      	beq.n	10ae4 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10a62:	3301      	adds	r3, #1
   10a64:	b2db      	uxtb	r3, r3
   10a66:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   10a68:	e00f      	b.n	10a8a <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   10a6a:	3301      	adds	r3, #1
   10a6c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10a6e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   10a70:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10a72:	2304      	movs	r3, #4
   10a74:	fb11 3105 	smlabb	r1, r1, r5, r3
   10a78:	4a1b      	ldr	r2, [pc, #108]	; (10ae8 <mayfly_enqueue+0xa0>)
   10a7a:	6860      	ldr	r0, [r4, #4]
   10a7c:	230c      	movs	r3, #12
   10a7e:	fb13 1306 	smlabb	r3, r3, r6, r1
   10a82:	441a      	add	r2, r3
   10a84:	4621      	mov	r1, r4
   10a86:	f7ff ff6b 	bl	10960 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   10a8a:	4b18      	ldr	r3, [pc, #96]	; (10aec <mayfly_enqueue+0xa4>)
   10a8c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   10a8e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10a90:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10a92:	4629      	mov	r1, r5
   10a94:	f00c fc6e 	bl	1d374 <mayfly_pend>

	return 0;
   10a98:	2000      	movs	r0, #0
}
   10a9a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10a9c:	f00c fc54 	bl	1d348 <mayfly_prio_is_equal>
   10aa0:	2800      	cmp	r0, #0
   10aa2:	d0d6      	beq.n	10a52 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10aa4:	4629      	mov	r1, r5
   10aa6:	4630      	mov	r0, r6
   10aa8:	f00c fc2e 	bl	1d308 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10aac:	2800      	cmp	r0, #0
   10aae:	d0d0      	beq.n	10a52 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   10ab0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   10ab4:	0112      	lsls	r2, r2, #4
   10ab6:	490c      	ldr	r1, [pc, #48]	; (10ae8 <mayfly_enqueue+0xa0>)
   10ab8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10abc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10ac0:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   10ac2:	7a9a      	ldrb	r2, [r3, #10]
   10ac4:	7adb      	ldrb	r3, [r3, #11]
   10ac6:	429a      	cmp	r2, r3
   10ac8:	d1c3      	bne.n	10a52 <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   10aca:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10acc:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10ace:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10ad0:	0792      	lsls	r2, r2, #30
   10ad2:	d002      	beq.n	10ada <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   10ad4:	3302      	adds	r3, #2
   10ad6:	b2db      	uxtb	r3, r3
   10ad8:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   10ada:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   10ade:	4798      	blx	r3
		return 0;
   10ae0:	2000      	movs	r0, #0
}
   10ae2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10ae4:	4610      	mov	r0, r2
}
   10ae6:	bd70      	pop	{r4, r5, r6, pc}
   10ae8:	2000de00 	.word	0x2000de00
   10aec:	2000ddfc 	.word	0x2000ddfc

00010af0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   10af0:	4a4f      	ldr	r2, [pc, #316]	; (10c30 <mayfly_run+0x140>)
   10af2:	5c13      	ldrb	r3, [r2, r0]
   10af4:	2b00      	cmp	r3, #0
   10af6:	f000 8099 	beq.w	10c2c <mayfly_run+0x13c>
{
   10afa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   10afe:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10b00:	4f4c      	ldr	r7, [pc, #304]	; (10c34 <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
   10b02:	5413      	strb	r3, [r2, r0]
{
   10b04:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   10b06:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10b08:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   10b0c:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10b10:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   10b14:	9303      	str	r3, [sp, #12]
   10b16:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10b1a:	f10b 0804 	add.w	r8, fp, #4
   10b1e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   10b22:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   10b26:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   10b28:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10b2c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   10b2e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   10b30:	f7ff ff20 	bl	10974 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10b34:	f107 0624 	add.w	r6, r7, #36	; 0x24
   10b38:	4683      	mov	fp, r0
   10b3a:	b398      	cbz	r0, 10ba4 <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   10b3c:	9c05      	ldr	r4, [sp, #20]
   10b3e:	7863      	ldrb	r3, [r4, #1]
   10b40:	7825      	ldrb	r5, [r4, #0]
   10b42:	1aed      	subs	r5, r5, r3
   10b44:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   10b48:	2d01      	cmp	r5, #1
   10b4a:	d106      	bne.n	10b5a <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   10b4c:	3b01      	subs	r3, #1
   10b4e:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10b50:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   10b54:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   10b56:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   10b58:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   10b5a:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   10b5c:	1ac3      	subs	r3, r0, r3
   10b5e:	f003 0303 	and.w	r3, r3, #3
   10b62:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   10b64:	f04f 0200 	mov.w	r2, #0
   10b68:	4631      	mov	r1, r6
	req = m->_req;
   10b6a:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   10b6e:	d00f      	beq.n	10b90 <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
   10b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10b72:	f7ff ff07 	bl	10984 <memq_dequeue>
		ack = m->_ack;
   10b76:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10b7a:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   10b7c:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10b80:	eba3 030c 	sub.w	r3, r3, ip
   10b84:	f003 0303 	and.w	r3, r3, #3
   10b88:	2b01      	cmp	r3, #1
		m->_ack = req;
   10b8a:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10b8e:	d045      	beq.n	10c1c <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10b90:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10b94:	aa05      	add	r2, sp, #20
   10b96:	f7ff feed 	bl	10974 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   10b9a:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   10b9c:	4683      	mov	fp, r0
			if (state == 1U) {
   10b9e:	d02b      	beq.n	10bf8 <mayfly_run+0x108>
		while (link) {
   10ba0:	2800      	cmp	r0, #0
   10ba2:	d1cb      	bne.n	10b3c <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   10ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   10ba8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   10bac:	429a      	cmp	r2, r3
   10bae:	d003      	beq.n	10bb8 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   10bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   10bb4:	2301      	movs	r3, #1
   10bb6:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   10bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10bbc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   10bc0:	429a      	cmp	r2, r3
   10bc2:	d003      	beq.n	10bcc <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   10bc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   10bc8:	2301      	movs	r3, #1
   10bca:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   10bcc:	f109 39ff 	add.w	r9, r9, #4294967295
   10bd0:	fa5f f989 	uxtb.w	r9, r9
   10bd4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   10bd8:	f1a7 070c 	sub.w	r7, r7, #12
   10bdc:	d1a3      	bne.n	10b26 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   10bde:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   10be2:	b1c3      	cbz	r3, 10c16 <mayfly_run+0x126>
   10be4:	9b03      	ldr	r3, [sp, #12]
   10be6:	b9b3      	cbnz	r3, 10c16 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10be8:	461a      	mov	r2, r3
   10bea:	4651      	mov	r1, sl
   10bec:	4650      	mov	r0, sl
	}
}
   10bee:	b007      	add	sp, #28
   10bf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   10bf4:	f00c bb68 	b.w	1d2c8 <mayfly_enable_cb>
				if (caller_id || link) {
   10bf8:	f1b9 0f00 	cmp.w	r9, #0
   10bfc:	d101      	bne.n	10c02 <mayfly_run+0x112>
   10bfe:	2800      	cmp	r0, #0
   10c00:	d0d0      	beq.n	10ba4 <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
   10c02:	f8dd a008 	ldr.w	sl, [sp, #8]
   10c06:	4a0a      	ldr	r2, [pc, #40]	; (10c30 <mayfly_run+0x140>)
   10c08:	2301      	movs	r3, #1
   10c0a:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   10c0e:	4651      	mov	r1, sl
   10c10:	4650      	mov	r0, sl
   10c12:	f00c fbaf 	bl	1d374 <mayfly_pend>
}
   10c16:	b007      	add	sp, #28
   10c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10c1c:	4642      	mov	r2, r8
   10c1e:	4621      	mov	r1, r4
   10c20:	4658      	mov	r0, fp
			m->_ack = ack;
   10c22:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10c26:	f7ff fe9b 	bl	10960 <memq_enqueue>
   10c2a:	e7b1      	b.n	10b90 <mayfly_run+0xa0>
   10c2c:	4770      	bx	lr
   10c2e:	bf00      	nop
   10c30:	2000ddfc 	.word	0x2000ddfc
   10c34:	2000de00 	.word	0x2000de00

00010c38 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10c38:	1e4b      	subs	r3, r1, #1
   10c3a:	b2db      	uxtb	r3, r3
   10c3c:	b189      	cbz	r1, 10c62 <util_ones_count_get+0x2a>
   10c3e:	1e41      	subs	r1, r0, #1
   10c40:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   10c44:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   10c46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   10c4a:	b13b      	cbz	r3, 10c5c <util_ones_count_get+0x24>
			bite &= (bite - 1);
   10c4c:	b25b      	sxtb	r3, r3
   10c4e:	1e5a      	subs	r2, r3, #1
   10c50:	4013      	ands	r3, r2
			one_count++;
   10c52:	3001      	adds	r0, #1
		while (bite) {
   10c54:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10c58:	b2c0      	uxtb	r0, r0
		while (bite) {
   10c5a:	d1f7      	bne.n	10c4c <util_ones_count_get+0x14>
	while (octets_len--) {
   10c5c:	4561      	cmp	r1, ip
   10c5e:	d1f2      	bne.n	10c46 <util_ones_count_get+0xe>
   10c60:	4770      	bx	lr
	uint8_t one_count = 0U;
   10c62:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   10c64:	4770      	bx	lr
   10c66:	bf00      	nop

00010c68 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10c68:	eba2 0c01 	sub.w	ip, r2, r1
   10c6c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   10c70:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   10c72:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10c74:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10c76:	d10a      	bne.n	10c8e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c78:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10c7c:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   10c7e:	42a3      	cmp	r3, r4
   10c80:	d914      	bls.n	10cac <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   10c82:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   10c84:	2100      	movs	r1, #0
}
   10c86:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10c88:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10c8a:	6141      	str	r1, [r0, #20]
}
   10c8c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c8e:	1a89      	subs	r1, r1, r2
   10c90:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10c94:	428b      	cmp	r3, r1
   10c96:	d806      	bhi.n	10ca6 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   10c98:	4421      	add	r1, r4
   10c9a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   10c9c:	2300      	movs	r3, #0
}
   10c9e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10ca0:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10ca2:	6141      	str	r1, [r0, #20]
}
   10ca4:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   10ca6:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   10ca8:	42a3      	cmp	r3, r4
   10caa:	d8ea      	bhi.n	10c82 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   10cac:	1ae1      	subs	r1, r4, r3
   10cae:	e7f5      	b.n	10c9c <ticks_to_expire_prep+0x34>

00010cb0 <ticker_job_list_insert>:
{
   10cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cb4:	b087      	sub	sp, #28
   10cb6:	4603      	mov	r3, r0
	count_user = instance->count_user;
   10cb8:	7a42      	ldrb	r2, [r0, #9]
{
   10cba:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   10cbc:	6800      	ldr	r0, [r0, #0]
   10cbe:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   10cc0:	6858      	ldr	r0, [r3, #4]
   10cc2:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   10cc4:	2a00      	cmp	r2, #0
   10cc6:	f000 80f6 	beq.w	10eb6 <ticker_job_list_insert+0x206>
   10cca:	1e53      	subs	r3, r2, #1
   10ccc:	b2db      	uxtb	r3, r3
   10cce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   10cd2:	460f      	mov	r7, r1
   10cd4:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   10cd6:	9b03      	ldr	r3, [sp, #12]
   10cd8:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   10cda:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   10cdc:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   10cde:	2fff      	cmp	r7, #255	; 0xff
   10ce0:	d05e      	beq.n	10da0 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   10ce2:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   10ce6:	9b02      	ldr	r3, [sp, #8]
   10ce8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   10cec:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   10cee:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   10cf2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   10cf6:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   10cf8:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   10cfa:	f04f 09ff 	mov.w	r9, #255	; 0xff
   10cfe:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   10d02:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   10d06:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   10d08:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d0c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   10d0e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d12:	d10f      	bne.n	10d34 <ticker_job_list_insert+0x84>
   10d14:	e0ca      	b.n	10eac <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10d16:	1a09      	subs	r1, r1, r0
   10d18:	d106      	bne.n	10d28 <ticker_job_list_insert+0x78>
   10d1a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   10d1e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   10d22:	45e2      	cmp	sl, ip
   10d24:	f200 8086 	bhi.w	10e34 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   10d28:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d2c:	2bff      	cmp	r3, #255	; 0xff
   10d2e:	4691      	mov	r9, r2
   10d30:	d072      	beq.n	10e18 <ticker_job_list_insert+0x168>
   10d32:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   10d34:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   10d38:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   10d3c:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   10d3e:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d42:	4288      	cmp	r0, r1
   10d44:	d9e7      	bls.n	10d16 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   10d46:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   10d4a:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   10d4e:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   10d52:	d166      	bne.n	10e22 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   10d54:	9b01      	ldr	r3, [sp, #4]
   10d56:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10d5a:	2aff      	cmp	r2, #255	; 0xff
   10d5c:	d008      	beq.n	10d70 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   10d5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10d62:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   10d66:	f8de 3008 	ldr.w	r3, [lr, #8]
   10d6a:	1a5b      	subs	r3, r3, r1
   10d6c:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   10d70:	78a3      	ldrb	r3, [r4, #2]
   10d72:	3301      	adds	r3, #1
   10d74:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10d76:	2d00      	cmp	r5, #0
   10d78:	d0b1      	beq.n	10cde <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10d7a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   10d7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10d80:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   10d82:	2200      	movs	r2, #0
   10d84:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10d86:	b113      	cbz	r3, 10d8e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10d88:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10d8a:	4610      	mov	r0, r2
   10d8c:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10d8e:	6863      	ldr	r3, [r4, #4]
   10d90:	2b00      	cmp	r3, #0
   10d92:	d1a4      	bne.n	10cde <ticker_job_list_insert+0x2e>
					ticker->op_context =
   10d94:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   10d98:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   10d9a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10d9e:	d1a0      	bne.n	10ce2 <ticker_job_list_insert+0x32>
   10da0:	9b03      	ldr	r3, [sp, #12]
   10da2:	7898      	ldrb	r0, [r3, #2]
   10da4:	42b0      	cmp	r0, r6
   10da6:	d02f      	beq.n	10e08 <ticker_job_list_insert+0x158>
   10da8:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   10dac:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10db0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
   10db4:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10db8:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
   10dbc:	3601      	adds	r6, #1
   10dbe:	b2f6      	uxtb	r6, r6
					first = 0U;
   10dc0:	42b1      	cmp	r1, r6
   10dc2:	bf08      	it	eq
   10dc4:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10dc6:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
   10dc8:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10dcc:	d11a      	bne.n	10e04 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   10dce:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   10dd2:	9902      	ldr	r1, [sp, #8]
   10dd4:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   10dd8:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   10ddc:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   10de0:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   10de2:	7862      	ldrb	r2, [r4, #1]
   10de4:	1a52      	subs	r2, r2, r1
   10de6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10dea:	d025      	beq.n	10e38 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10dec:	f04f 0200 	mov.w	r2, #0
   10df0:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   10df4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10df6:	2001      	movs	r0, #1
	user_op->status = status;
   10df8:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10dfa:	b10b      	cbz	r3, 10e00 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10dfc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10dfe:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10e00:	f89b 0002 	ldrb.w	r0, [fp, #2]
   10e04:	42b0      	cmp	r0, r6
   10e06:	d1d1      	bne.n	10dac <ticker_job_list_insert+0xfc>
	while (count_user--) {
   10e08:	9a03      	ldr	r2, [sp, #12]
   10e0a:	9905      	ldr	r1, [sp, #20]
   10e0c:	4291      	cmp	r1, r2
   10e0e:	f1a2 0308 	sub.w	r3, r2, #8
   10e12:	d050      	beq.n	10eb6 <ticker_job_list_insert+0x206>
   10e14:	9303      	str	r3, [sp, #12]
   10e16:	e75e      	b.n	10cd6 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   10e18:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   10e1c:	f88b 3000 	strb.w	r3, [fp]
   10e20:	461a      	mov	r2, r3
		node[previous].next = id;
   10e22:	fa0f f989 	sxth.w	r9, r9
   10e26:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   10e2a:	ea4f 1909 	mov.w	r9, r9, lsl #4
   10e2e:	f80e 8009 	strb.w	r8, [lr, r9]
   10e32:	e792      	b.n	10d5a <ticker_job_list_insert+0xaa>
   10e34:	4601      	mov	r1, r0
   10e36:	e786      	b.n	10d46 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10e38:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10e3a:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10e3c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   10e40:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   10e42:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10e44:	d02a      	beq.n	10e9c <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
   10e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10e4a:	1a9a      	subs	r2, r3, r2
   10e4c:	fab2 f282 	clz	r2, r2
   10e50:	0952      	lsrs	r2, r2, #5
   10e52:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10e56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10e58:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10e5a:	68ea      	ldr	r2, [r5, #12]
   10e5c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10e5e:	692a      	ldr	r2, [r5, #16]
   10e60:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10e62:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   10e66:	4293      	cmp	r3, r2
   10e68:	bf88      	it	hi
   10e6a:	2300      	movhi	r3, #0
   10e6c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   10e6e:	69ab      	ldr	r3, [r5, #24]
   10e70:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   10e72:	69eb      	ldr	r3, [r5, #28]
   10e74:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10e76:	6a2b      	ldr	r3, [r5, #32]
   10e78:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   10e7a:	68ab      	ldr	r3, [r5, #8]
   10e7c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   10e7e:	2300      	movs	r3, #0
   10e80:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10e82:	686a      	ldr	r2, [r5, #4]
   10e84:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   10e86:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10e88:	f7ff feee 	bl	10c68 <ticks_to_expire_prep>
	ticker->force = 1U;
   10e8c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   10e90:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10e94:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   10e98:	70e3      	strb	r3, [r4, #3]
}
   10e9a:	e72d      	b.n	10cf8 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   10e9c:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   10e9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10ea0:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10ea2:	68ea      	ldr	r2, [r5, #12]
   10ea4:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10ea6:	692a      	ldr	r2, [r5, #16]
   10ea8:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10eaa:	e7df      	b.n	10e6c <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
   10eac:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   10eb0:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10eb4:	e75c      	b.n	10d70 <ticker_job_list_insert+0xc0>
}
   10eb6:	b007      	add	sp, #28
   10eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010ebc <ticker_worker>:
{
   10ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   10ec0:	7f82      	ldrb	r2, [r0, #30]
{
   10ec2:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   10ec4:	2301      	movs	r3, #1
	if (instance->job_guard) {
   10ec6:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
   10ec8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   10eca:	2a00      	cmp	r2, #0
   10ecc:	d15b      	bne.n	10f86 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   10ece:	7f43      	ldrb	r3, [r0, #29]
   10ed0:	2bff      	cmp	r3, #255	; 0xff
   10ed2:	4681      	mov	r9, r0
   10ed4:	d056      	beq.n	10f84 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10ed6:	f00b fd3f 	bl	1c958 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10eda:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10ede:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   10ee2:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ee6:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10ee8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10eea:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10eee:	f000 8139 	beq.w	11164 <ticker_worker+0x2a8>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   10ef2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   10ef6:	42b3      	cmp	r3, r6
   10ef8:	bf94      	ite	ls
   10efa:	2300      	movls	r3, #0
   10efc:	2301      	movhi	r3, #1
   10efe:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   10f00:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   10f04:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   10f08:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   10f0c:	d046      	beq.n	10f9c <ticker_worker+0xe0>
			must_expire_skip = 1U;
   10f0e:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
   10f12:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   10f16:	eb07 140b 	add.w	r4, r7, fp, lsl #4
   10f1a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   10f1e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10f20:	42b3      	cmp	r3, r6
   10f22:	d839      	bhi.n	10f98 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10f24:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
   10f28:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
   10f2c:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   10f2e:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10f30:	7863      	ldrb	r3, [r4, #1]
   10f32:	eba3 030a 	sub.w	r3, r3, sl
   10f36:	b2db      	uxtb	r3, r3
   10f38:	2b01      	cmp	r3, #1
   10f3a:	d12a      	bne.n	10f92 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
   10f3c:	69a0      	ldr	r0, [r4, #24]
   10f3e:	2800      	cmp	r0, #0
   10f40:	d054      	beq.n	10fec <ticker_worker+0x130>
   10f42:	9b01      	ldr	r3, [sp, #4]
   10f44:	2b00      	cmp	r3, #0
   10f46:	d04c      	beq.n	10fe2 <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   10f48:	8be3      	ldrh	r3, [r4, #30]
   10f4a:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   10f4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
   10f4e:	b13a      	cbz	r2, 10f60 <ticker_worker+0xa4>
   10f50:	6813      	ldr	r3, [r2, #0]
   10f52:	b11b      	cbz	r3, 10f5c <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
   10f54:	7a13      	ldrb	r3, [r2, #8]
   10f56:	2b00      	cmp	r3, #0
   10f58:	f000 80ea 	beq.w	11130 <ticker_worker+0x274>
				ext_data->reschedule_state =
   10f5c:	2300      	movs	r3, #0
   10f5e:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
   10f60:	9b03      	ldr	r3, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   10f62:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   10f66:	3301      	adds	r3, #1
   10f68:	b29b      	uxth	r3, r3
   10f6a:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   10f6c:	b171      	cbz	r1, 10f8c <ticker_worker+0xd0>
   10f6e:	8ba1      	ldrh	r1, [r4, #28]
   10f70:	4299      	cmp	r1, r3
   10f72:	d20b      	bcs.n	10f8c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10f74:	2a00      	cmp	r2, #0
   10f76:	f000 80f8 	beq.w	1116a <ticker_worker+0x2ae>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   10f7a:	7a13      	ldrb	r3, [r2, #8]
   10f7c:	2b01      	cmp	r3, #1
   10f7e:	d005      	beq.n	10f8c <ticker_worker+0xd0>
			must_expire_skip = 1U;
   10f80:	2301      	movs	r3, #1
   10f82:	e036      	b.n	10ff2 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   10f84:	77c2      	strb	r2, [r0, #31]
}
   10f86:	b00d      	add	sp, #52	; 0x34
   10f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   10f8c:	f10a 33ff 	add.w	r3, sl, #4294967295
   10f90:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   10f92:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10f96:	d1bc      	bne.n	10f12 <ticker_worker+0x56>
   10f98:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10f9c:	f899 300b 	ldrb.w	r3, [r9, #11]
   10fa0:	f899 200a 	ldrb.w	r2, [r9, #10]
   10fa4:	429a      	cmp	r2, r3
   10fa6:	d10a      	bne.n	10fbe <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   10fa8:	3201      	adds	r2, #1
   10faa:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   10fac:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10fae:	bf1c      	itt	ne
   10fb0:	4613      	movne	r3, r2
   10fb2:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
   10fb4:	9a04      	ldr	r2, [sp, #16]
   10fb6:	f889 200b 	strb.w	r2, [r9, #11]
   10fba:	bf08      	it	eq
   10fbc:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10fbe:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10fc2:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10fc6:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   10fca:	2200      	movs	r2, #0
   10fcc:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10fd0:	464b      	mov	r3, r9
   10fd2:	2201      	movs	r2, #1
   10fd4:	2104      	movs	r1, #4
   10fd6:	2003      	movs	r0, #3
   10fd8:	46a4      	mov	ip, r4
}
   10fda:	b00d      	add	sp, #52	; 0x34
   10fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10fe0:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   10fe2:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   10fe6:	9305      	str	r3, [sp, #20]
   10fe8:	3380      	adds	r3, #128	; 0x80
   10fea:	d136      	bne.n	1105a <ticker_worker+0x19e>
		if (ticker->ext_data) {
   10fec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10fee:	b1c2      	cbz	r2, 11022 <ticker_worker+0x166>
   10ff0:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
   10ff2:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
   10ff4:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
   10ff6:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
   10ff8:	6051      	str	r1, [r2, #4]
		ticker->ack--;
   10ffa:	f10a 30ff 	add.w	r0, sl, #4294967295
   10ffe:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   11000:	2d00      	cmp	r5, #0
   11002:	d0c6      	beq.n	10f92 <ticker_worker+0xd6>
					   ticks_expired -
   11004:	9a02      	ldr	r2, [sp, #8]
   11006:	6960      	ldr	r0, [r4, #20]
   11008:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   1100a:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   1100c:	eba8 0000 	sub.w	r0, r8, r0
   11010:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   11012:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   11016:	b19b      	cbz	r3, 11040 <ticker_worker+0x184>
   11018:	6923      	ldr	r3, [r4, #16]
   1101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1101e:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
   11020:	e7b7      	b.n	10f92 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
   11022:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   11024:	f10a 33ff 	add.w	r3, sl, #4294967295
   11028:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1102a:	2d00      	cmp	r5, #0
   1102c:	d0b1      	beq.n	10f92 <ticker_worker+0xd6>
					   ticks_expired -
   1102e:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   11030:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   11032:	eba8 0003 	sub.w	r0, r8, r3
   11036:	9b02      	ldr	r3, [sp, #8]
   11038:	695b      	ldr	r3, [r3, #20]
   1103a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1103c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   11040:	6923      	ldr	r3, [r4, #16]
   11042:	8be2      	ldrh	r2, [r4, #30]
   11044:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   11046:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   11048:	2b00      	cmp	r3, #0
   1104a:	9b01      	ldr	r3, [sp, #4]
   1104c:	bf18      	it	ne
   1104e:	2301      	movne	r3, #1
   11050:	9301      	str	r3, [sp, #4]
				ticker->lazy_current = 0U;
   11052:	2300      	movs	r3, #0
   11054:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   11056:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   11058:	e79b      	b.n	10f92 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1105a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1105e:	d0c5      	beq.n	10fec <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
   11060:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   11062:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   11064:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   11068:	9203      	str	r2, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   1106a:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   1106c:	bf28      	it	cs
   1106e:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   11070:	fb02 c10c 	mla	r1, r2, ip, ip
   11074:	9106      	str	r1, [sp, #24]
				(lazy_current - ticker->priority);
   11076:	9905      	ldr	r1, [sp, #20]
		uint32_t acc_ticks_to_expire = 0U;
   11078:	f8cd a020 	str.w	sl, [sp, #32]
   1107c:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   11080:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
   11082:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
   11084:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
   11086:	9207      	str	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   11088:	2500      	movs	r5, #0
   1108a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   1108e:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
   11090:	b21b      	sxth	r3, r3
   11092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11096:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   1109a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1109c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   110a0:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   110a2:	42a8      	cmp	r0, r5
   110a4:	d33c      	bcc.n	11120 <ticker_worker+0x264>
			if (ticker_next->ticks_slot == 0U) {
   110a6:	6991      	ldr	r1, [r2, #24]
   110a8:	2900      	cmp	r1, #0
   110aa:	d036      	beq.n	1111a <ticker_worker+0x25e>
			int32_t lazy_next = ticker_next->lazy_current;
   110ac:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   110ae:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   110b0:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   110b4:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   110b8:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   110ba:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   110bc:	bf28      	it	cs
   110be:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   110c2:	f1ba 0f00 	cmp.w	sl, #0
   110c6:	d040      	beq.n	1114a <ticker_worker+0x28e>
   110c8:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   110cc:	2c00      	cmp	r4, #0
   110ce:	d038      	beq.n	11142 <ticker_worker+0x286>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   110d0:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   110d4:	f8dd a018 	ldr.w	sl, [sp, #24]
   110d8:	45c2      	cmp	sl, r8
   110da:	bf8c      	ite	hi
   110dc:	f04f 0801 	movhi.w	r8, #1
   110e0:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   110e4:	bf34      	ite	cc
   110e6:	f04f 0a01 	movcc.w	sl, #1
   110ea:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   110ee:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   110f0:	f892 b003 	ldrb.w	fp, [r2, #3]
   110f4:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   110f8:	d30f      	bcc.n	1111a <ticker_worker+0x25e>
   110fa:	4593      	cmp	fp, r2
   110fc:	d82a      	bhi.n	11154 <ticker_worker+0x298>
			    (next_force ||
   110fe:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   11102:	d027      	beq.n	11154 <ticker_worker+0x298>
			     next_is_critical ||
   11104:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   11106:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   1110a:	4594      	cmp	ip, r2
   1110c:	dd02      	ble.n	11114 <ticker_worker+0x258>
			     (next_has_priority && !current_is_older) ||
   1110e:	f1b8 0f00 	cmp.w	r8, #0
   11112:	d01f      	beq.n	11154 <ticker_worker+0x298>
   11114:	9a05      	ldr	r2, [sp, #20]
   11116:	4572      	cmp	r2, lr
   11118:	d019      	beq.n	1114e <ticker_worker+0x292>
			id_head = ticker_next->next;
   1111a:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   1111c:	2bff      	cmp	r3, #255	; 0xff
   1111e:	d1b7      	bne.n	11090 <ticker_worker+0x1d4>
   11120:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   11124:	f8dd a020 	ldr.w	sl, [sp, #32]
   11128:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1112c:	464c      	mov	r4, r9
   1112e:	e75d      	b.n	10fec <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
   11130:	8ba3      	ldrh	r3, [r4, #28]
   11132:	9903      	ldr	r1, [sp, #12]
   11134:	428b      	cmp	r3, r1
   11136:	f63f af11 	bhi.w	10f5c <ticker_worker+0xa0>
				ext_data->reschedule_state =
   1113a:	f04f 0301 	mov.w	r3, #1
   1113e:	7213      	strb	r3, [r2, #8]
   11140:	e70e      	b.n	10f60 <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
   11142:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
   11146:	46a2      	mov	sl, r4
   11148:	e7d1      	b.n	110ee <ticker_worker+0x232>
					  0U :
   1114a:	46d0      	mov	r8, sl
   1114c:	e7be      	b.n	110cc <ticker_worker+0x210>
			     (equal_priority && next_is_older))) {
   1114e:	f1ba 0f00 	cmp.w	sl, #0
   11152:	d0e2      	beq.n	1111a <ticker_worker+0x25e>
   11154:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   11158:	f8dd a020 	ldr.w	sl, [sp, #32]
   1115c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   11160:	464c      	mov	r4, r9
   11162:	e6f3      	b.n	10f4c <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
   11164:	9b04      	ldr	r3, [sp, #16]
   11166:	9301      	str	r3, [sp, #4]
   11168:	e6ca      	b.n	10f00 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   1116a:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1116c:	f10a 33ff 	add.w	r3, sl, #4294967295
   11170:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   11172:	2d00      	cmp	r5, #0
   11174:	f43f af0d 	beq.w	10f92 <ticker_worker+0xd6>
					   ticks_expired -
   11178:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1117a:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   1117c:	eba8 0003 	sub.w	r0, r8, r3
   11180:	9b02      	ldr	r3, [sp, #8]
   11182:	695b      	ldr	r3, [r3, #20]
   11184:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   11186:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1118a:	e745      	b.n	11018 <ticker_worker+0x15c>

0001118c <ticker_job>:
	if (instance->worker_trigger) {
   1118c:	7fc2      	ldrb	r2, [r0, #31]
   1118e:	2a00      	cmp	r2, #0
   11190:	f040 83f3 	bne.w	1197a <ticker_job+0x7ee>
{
   11194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11198:	4683      	mov	fp, r0
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1119a:	7a83      	ldrb	r3, [r0, #10]
   1119c:	7ac1      	ldrb	r1, [r0, #11]
{
   1119e:	b08f      	sub	sp, #60	; 0x3c
	instance->job_guard = 1U;
   111a0:	2001      	movs	r0, #1
   111a2:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   111a6:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   111a8:	f8db 0014 	ldr.w	r0, [fp, #20]
   111ac:	900a      	str	r0, [sp, #40]	; 0x28
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   111ae:	f000 80a2 	beq.w	112f6 <ticker_job+0x16a>
	uint8_t idx = *ticks_elapsed_index + 1;
   111b2:	3301      	adds	r3, #1
   111b4:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   111b6:	2b02      	cmp	r3, #2
		idx = 0U;
   111b8:	bf08      	it	eq
   111ba:	4613      	moveq	r3, r2
		ticks_elapsed =
   111bc:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   111c0:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   111c4:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   111c8:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   111ca:	930b      	str	r3, [sp, #44]	; 0x2c
		instance->ticks_current += ticks_elapsed;
   111cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticks_elapsed =
   111ce:	9205      	str	r2, [sp, #20]
		instance->ticks_current += ticks_elapsed;
   111d0:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   111d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   111d6:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   111da:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   111de:	f8db 3000 	ldr.w	r3, [fp]
   111e2:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   111e4:	f8db 3004 	ldr.w	r3, [fp, #4]
   111e8:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   111ea:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   111ec:	9208      	str	r2, [sp, #32]
	while (count_user--) {
   111ee:	b2db      	uxtb	r3, r3
   111f0:	2a00      	cmp	r2, #0
   111f2:	f000 84c0 	beq.w	11b76 <ticker_job+0x9ea>
		flag_elapsed = 1U;
   111f6:	2201      	movs	r2, #1
   111f8:	920d      	str	r2, [sp, #52]	; 0x34
   111fa:	9a07      	ldr	r2, [sp, #28]
   111fc:	f8cd b004 	str.w	fp, [sp, #4]
   11200:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   11204:	2300      	movs	r3, #0
   11206:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11208:	23ff      	movs	r3, #255	; 0xff
   1120a:	9304      	str	r3, [sp, #16]
   1120c:	46cb      	mov	fp, r9
		user_ops = &user->user_op[0];
   1120e:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
   11212:	f89b c003 	ldrb.w	ip, [fp, #3]
   11216:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1121a:	45e1      	cmp	r9, ip
   1121c:	d063      	beq.n	112e6 <ticker_job+0x15a>
			if (middle == user->count_user_op) {
   1121e:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
   11222:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
   11226:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
   1122a:	b2db      	uxtb	r3, r3
				middle = 0U;
   1122c:	429a      	cmp	r2, r3
   1122e:	bf08      	it	eq
   11230:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   11232:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   11236:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
   1123a:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1123e:	f818 2027 	ldrb.w	r2, [r8, r7, lsl #2]
   11242:	2a04      	cmp	r2, #4
			user_op = &user_ops[user->middle];
   11244:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   11248:	d969      	bls.n	1131e <ticker_job+0x192>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1124a:	2a07      	cmp	r2, #7
   1124c:	d879      	bhi.n	11342 <ticker_job+0x1b6>
			ticker = &node[user_op->id];
   1124e:	7875      	ldrb	r5, [r6, #1]
   11250:	9903      	ldr	r1, [sp, #12]
   11252:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   11256:	eb01 1404 	add.w	r4, r1, r4, lsl #4
   1125a:	b229      	sxth	r1, r5
			state = (ticker->req - ticker->ack) & 0xff;
   1125c:	f894 e002 	ldrb.w	lr, [r4, #2]
			ticker = &node[user_op->id];
   11260:	9102      	str	r1, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   11262:	7861      	ldrb	r1, [r4, #1]
   11264:	eba1 010e 	sub.w	r1, r1, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   11268:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1126c:	d069      	beq.n	11342 <ticker_job+0x1b6>
			    (state == 0U) ||
   1126e:	2a05      	cmp	r2, #5
   11270:	d057      	beq.n	11322 <ticker_job+0x196>
			if (state == 1U) {
   11272:	2901      	cmp	r1, #1
   11274:	f040 8170 	bne.w	11558 <ticker_job+0x3cc>
	previous = instance->ticker_id_head;
   11278:	9901      	ldr	r1, [sp, #4]
   1127a:	7f4b      	ldrb	r3, [r1, #29]
	node = &instance->nodes[0];
   1127c:	f8d1 9000 	ldr.w	r9, [r1]
	while (current != TICKER_NULL) {
   11280:	2bff      	cmp	r3, #255	; 0xff
   11282:	d016      	beq.n	112b2 <ticker_job+0x126>
		ticker_current = &node[current];
   11284:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		if (current == id) {
   11288:	429d      	cmp	r5, r3
		ticker_current = &node[current];
   1128a:	eb09 1101 	add.w	r1, r9, r1, lsl #4
		if (current == id) {
   1128e:	f000 8260 	beq.w	11752 <ticker_job+0x5c6>
	total = 0U;
   11292:	f04f 0c00 	mov.w	ip, #0
   11296:	e001      	b.n	1129c <ticker_job+0x110>
		if (current == id) {
   11298:	429d      	cmp	r5, r3
   1129a:	d061      	beq.n	11360 <ticker_job+0x1d4>
		total += ticker_current->ticks_to_expire;
   1129c:	4618      	mov	r0, r3
		current = ticker_current->next;
   1129e:	780b      	ldrb	r3, [r1, #0]
		total += ticker_current->ticks_to_expire;
   112a0:	f8d1 a008 	ldr.w	sl, [r1, #8]
	while (current != TICKER_NULL) {
   112a4:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   112a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   112aa:	44d4      	add	ip, sl
		ticker_current = &node[current];
   112ac:	eb09 1101 	add.w	r1, r9, r1, lsl #4
	while (current != TICKER_NULL) {
   112b0:	d1f2      	bne.n	11298 <ticker_job+0x10c>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   112b2:	2300      	movs	r3, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   112b4:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   112b6:	60a3      	str	r3, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   112b8:	f000 8135 	beq.w	11526 <ticker_job+0x39a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   112bc:	9b01      	ldr	r3, [sp, #4]
		ticker->req = ticker->ack;
   112be:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   112c2:	7f1b      	ldrb	r3, [r3, #28]
   112c4:	42ab      	cmp	r3, r5
   112c6:	f000 8102 	beq.w	114ce <ticker_job+0x342>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   112ca:	2000      	movs	r0, #0
   112cc:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   112d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
   112d2:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   112d4:	b10b      	cbz	r3, 112da <ticker_job+0x14e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   112d6:	6b31      	ldr	r1, [r6, #48]	; 0x30
   112d8:	4798      	blx	r3
		while (user->middle != user->last) {
   112da:	f89b c003 	ldrb.w	ip, [fp, #3]
   112de:	f89b 9002 	ldrb.w	r9, [fp, #2]
   112e2:	45e1      	cmp	r9, ip
   112e4:	d19b      	bne.n	1121e <ticker_job+0x92>
	while (count_user--) {
   112e6:	9a07      	ldr	r2, [sp, #28]
   112e8:	455a      	cmp	r2, fp
   112ea:	f1ab 0308 	sub.w	r3, fp, #8
   112ee:	f000 8143 	beq.w	11578 <ticker_job+0x3ec>
   112f2:	469b      	mov	fp, r3
   112f4:	e78b      	b.n	1120e <ticker_job+0x82>
	ticker_id_old_head = instance->ticker_id_head;
   112f6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   112fa:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   112fe:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->nodes[0];
   11300:	f8db 3000 	ldr.w	r3, [fp]
   11304:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   11306:	f8db 3004 	ldr.w	r3, [fp, #4]
   1130a:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   1130c:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1130e:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   11310:	b2db      	uxtb	r3, r3
   11312:	2900      	cmp	r1, #0
   11314:	f000 82f5 	beq.w	11902 <ticker_job+0x776>
		flag_elapsed = 0U;
   11318:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1131a:	9205      	str	r2, [sp, #20]
   1131c:	e76d      	b.n	111fa <ticker_job+0x6e>
   1131e:	4699      	mov	r9, r3
   11320:	e77b      	b.n	1121a <ticker_job+0x8e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   11322:	6870      	ldr	r0, [r6, #4]
   11324:	2800      	cmp	r0, #0
   11326:	d1a4      	bne.n	11272 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   11328:	68b0      	ldr	r0, [r6, #8]
   1132a:	2800      	cmp	r0, #0
   1132c:	d1a1      	bne.n	11272 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1132e:	68f0      	ldr	r0, [r6, #12]
   11330:	2800      	cmp	r0, #0
   11332:	d19e      	bne.n	11272 <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   11334:	6930      	ldr	r0, [r6, #16]
   11336:	2800      	cmp	r0, #0
   11338:	d19b      	bne.n	11272 <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
   1133a:	6970      	ldr	r0, [r6, #20]
   1133c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   11340:	d197      	bne.n	11272 <ticker_job+0xe6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11342:	2200      	movs	r2, #0
   11344:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   11348:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
   1134a:	2001      	movs	r0, #1
   1134c:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   1134e:	2a00      	cmp	r2, #0
   11350:	d0e5      	beq.n	1131e <ticker_job+0x192>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11352:	6b31      	ldr	r1, [r6, #48]	; 0x30
   11354:	4790      	blx	r2
		while (user->middle != user->last) {
   11356:	f89b c003 	ldrb.w	ip, [fp, #3]
   1135a:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1135e:	e75c      	b.n	1121a <ticker_job+0x8e>
	if (previous == current) {
   11360:	4285      	cmp	r5, r0
   11362:	f000 80c9 	beq.w	114f8 <ticker_job+0x36c>
	node[previous].next = ticker_current->next;
   11366:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1136a:	780b      	ldrb	r3, [r1, #0]
   1136c:	eb09 1000 	add.w	r0, r9, r0, lsl #4
	timeout = ticker_current->ticks_to_expire;
   11370:	f8d1 a008 	ldr.w	sl, [r1, #8]
	node[previous].next = ticker_current->next;
   11374:	7003      	strb	r3, [r0, #0]
	if (ticker_current->next != TICKER_NULL) {
   11376:	780b      	ldrb	r3, [r1, #0]
   11378:	2bff      	cmp	r3, #255	; 0xff
   1137a:	d008      	beq.n	1138e <ticker_job+0x202>
		node[ticker_current->next].ticks_to_expire += timeout;
   1137c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11380:	eb09 1903 	add.w	r9, r9, r3, lsl #4
   11384:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11388:	4453      	add	r3, sl
   1138a:	f8c9 3008 	str.w	r3, [r9, #8]
	return (total + timeout);
   1138e:	eb0a 090c 	add.w	r9, sl, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11392:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11394:	f8c4 9008 	str.w	r9, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11398:	d190      	bne.n	112bc <ticker_job+0x130>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1139a:	9b01      	ldr	r3, [sp, #4]
   1139c:	695d      	ldr	r5, [r3, #20]
   1139e:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   113a0:	f00b fada 	bl	1c958 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   113a4:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   113a6:	1b42      	subs	r2, r0, r5
   113a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   113ac:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   113ae:	4591      	cmp	r9, r2
	ticks_now = cntr_cnt_get();
   113b0:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
   113b2:	f240 80c4 	bls.w	1153e <ticker_job+0x3b2>
	ticker->ticks_to_expire_minus +=
   113b6:	6963      	ldr	r3, [r4, #20]
   113b8:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   113ba:	eba9 0202 	sub.w	r2, r9, r2
	if ((ticker->ticks_periodic != 0U) &&
   113be:	6865      	ldr	r5, [r4, #4]
   113c0:	2d00      	cmp	r5, #0
   113c2:	d059      	beq.n	11478 <ticker_job+0x2ec>
	    (user_op->params.update.lazy != 0U)) {
   113c4:	f8b6 9014 	ldrh.w	r9, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   113c8:	f1b9 0f00 	cmp.w	r9, #0
   113cc:	d054      	beq.n	11478 <ticker_job+0x2ec>
		user_op->params.update.lazy--;
   113ce:	f109 3eff 	add.w	lr, r9, #4294967295
   113d2:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   113d6:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   113d8:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   113da:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   113de:	d223      	bcs.n	11428 <ticker_job+0x29c>
   113e0:	1c69      	adds	r1, r5, #1
   113e2:	f8cd 8020 	str.w	r8, [sp, #32]
   113e6:	960c      	str	r6, [sp, #48]	; 0x30
   113e8:	468c      	mov	ip, r1
   113ea:	e018      	b.n	1141e <ticker_job+0x292>
	if ((ticker->remainder_current >= BIT(31)) ||
   113ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   113ee:	f8df 8160 	ldr.w	r8, [pc, #352]	; 11550 <ticker_job+0x3c4>
   113f2:	4e58      	ldr	r6, [pc, #352]	; (11554 <ticker_job+0x3c8>)
   113f4:	4488      	add	r8, r1
   113f6:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   113f8:	bf84      	itt	hi
   113fa:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   113fe:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   11402:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   11404:	6a26      	ldr	r6, [r4, #32]
   11406:	bf94      	ite	ls
   11408:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1140a:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   1140e:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   11410:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   11412:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
   11414:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11416:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   11418:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
   1141a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1141c:	d201      	bcs.n	11422 <ticker_job+0x296>
   1141e:	459e      	cmp	lr, r3
   11420:	d3e4      	bcc.n	113ec <ticker_job+0x260>
   11422:	f8dd 8020 	ldr.w	r8, [sp, #32]
   11426:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11428:	459e      	cmp	lr, r3
   1142a:	d923      	bls.n	11474 <ticker_job+0x2e8>
   1142c:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   1142e:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   11430:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
   11434:	b29b      	uxth	r3, r3
			ticks_to_expire += ticker->ticks_periodic +
   11436:	9008      	str	r0, [sp, #32]
   11438:	940c      	str	r4, [sp, #48]	; 0x30
   1143a:	e005      	b.n	11448 <ticker_job+0x2bc>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1143c:	3301      	adds	r3, #1
   1143e:	b29b      	uxth	r3, r3
   11440:	4628      	mov	r0, r5
   11442:	4599      	cmp	r9, r3
			ticks_to_expire += ticker->ticks_periodic +
   11444:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11446:	d011      	beq.n	1146c <ticker_job+0x2e0>
	if ((ticker->remainder_current < BIT(31)) &&
   11448:	4841      	ldr	r0, [pc, #260]	; (11550 <ticker_job+0x3c4>)
   1144a:	4c42      	ldr	r4, [pc, #264]	; (11554 <ticker_job+0x3c8>)
	ticker->remainder_current += ticker->remainder_periodic;
   1144c:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1144e:	1808      	adds	r0, r1, r0
   11450:	42a0      	cmp	r0, r4
   11452:	d8f3      	bhi.n	1143c <ticker_job+0x2b0>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11454:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   11456:	9808      	ldr	r0, [sp, #32]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11458:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1145c:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1145e:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11462:	4599      	cmp	r9, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11464:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   11468:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1146a:	d1ed      	bne.n	11448 <ticker_job+0x2bc>
   1146c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1146e:	6261      	str	r1, [r4, #36]	; 0x24
   11470:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   11474:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   11478:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   1147a:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire = ticks_to_expire +
   1147c:	440a      	add	r2, r1
   1147e:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus +=
   11480:	9a06      	ldr	r2, [sp, #24]
   11482:	4402      	add	r2, r0
   11484:	6162      	str	r2, [r4, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
   11486:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   11488:	b11a      	cbz	r2, 11492 <ticker_job+0x306>
   1148a:	6813      	ldr	r3, [r2, #0]
   1148c:	b10b      	cbz	r3, 11492 <ticker_job+0x306>
			user_op->params.update.ticks_drift_plus -
   1148e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   11490:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11492:	4652      	mov	r2, sl
   11494:	9902      	ldr	r1, [sp, #8]
   11496:	4620      	mov	r0, r4
   11498:	f7ff fbe6 	bl	10c68 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1149c:	68f2      	ldr	r2, [r6, #12]
   1149e:	69a3      	ldr	r3, [r4, #24]
   114a0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   114a2:	6932      	ldr	r2, [r6, #16]
   114a4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   114a6:	bf8c      	ite	hi
   114a8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   114aa:	2300      	movls	r3, #0
   114ac:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   114ae:	7db3      	ldrb	r3, [r6, #22]
   114b0:	b103      	cbz	r3, 114b4 <ticker_job+0x328>
		ticker->force = user_op->params.update.force;
   114b2:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   114b4:	7df3      	ldrb	r3, [r6, #23]
   114b6:	b113      	cbz	r3, 114be <ticker_job+0x332>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   114b8:	3b01      	subs	r3, #1
   114ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   114be:	9b04      	ldr	r3, [sp, #16]
   114c0:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   114c2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   114c4:	7872      	ldrb	r2, [r6, #1]
   114c6:	9204      	str	r2, [sp, #16]
		ticker->req++;
   114c8:	3301      	adds	r3, #1
   114ca:	7063      	strb	r3, [r4, #1]
   114cc:	e6fd      	b.n	112ca <ticker_job+0x13e>
			instance->ticker_id_slot_previous = TICKER_NULL;
   114ce:	9901      	ldr	r1, [sp, #4]
   114d0:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   114d2:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   114d4:	770b      	strb	r3, [r1, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   114d6:	d123      	bne.n	11520 <ticker_job+0x394>
				ticks_at_stop =
   114d8:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   114da:	9b01      	ldr	r3, [sp, #4]
   114dc:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
   114de:	1ac2      	subs	r2, r0, r3
   114e0:	0214      	lsls	r4, r2, #8
   114e2:	d414      	bmi.n	1150e <ticker_job+0x382>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   114e4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   114e8:	9a05      	ldr	r2, [sp, #20]
   114ea:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   114ec:	9901      	ldr	r1, [sp, #4]
   114ee:	698a      	ldr	r2, [r1, #24]
   114f0:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   114f2:	bf88      	it	hi
   114f4:	618b      	strhi	r3, [r1, #24]
   114f6:	e6e8      	b.n	112ca <ticker_job+0x13e>
	node[previous].next = ticker_current->next;
   114f8:	9b02      	ldr	r3, [sp, #8]
   114fa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   114fe:	eb09 1000 	add.w	r0, r9, r0, lsl #4
		instance->ticker_id_head = ticker_current->next;
   11502:	f8dd a004 	ldr.w	sl, [sp, #4]
   11506:	780b      	ldrb	r3, [r1, #0]
   11508:	f88a 301d 	strb.w	r3, [sl, #29]
   1150c:	e730      	b.n	11370 <ticker_job+0x1e4>
				if (ticks_elapsed > ticks_used) {
   1150e:	9a05      	ldr	r2, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11510:	1a1b      	subs	r3, r3, r0
   11512:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   11516:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   11518:	bf34      	ite	cc
   1151a:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   1151c:	2300      	movcs	r3, #0
   1151e:	e7e5      	b.n	114ec <ticker_job+0x360>
				ticks_at_stop = cntr_cnt_get();
   11520:	f00b fa1a 	bl	1c958 <cntr_cnt_get>
   11524:	e7d9      	b.n	114da <ticker_job+0x34e>
		return 0;
   11526:	4699      	mov	r9, r3
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11528:	9b01      	ldr	r3, [sp, #4]
   1152a:	695d      	ldr	r5, [r3, #20]
   1152c:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   1152e:	f00b fa13 	bl	1c958 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11532:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11534:	1b42      	subs	r2, r0, r5
   11536:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   1153a:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1153c:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1153e:	6963      	ldr	r3, [r4, #20]
   11540:	441a      	add	r2, r3
   11542:	eba2 0309 	sub.w	r3, r2, r9
   11546:	9306      	str	r3, [sp, #24]
   11548:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   1154a:	2200      	movs	r2, #0
   1154c:	e737      	b.n	113be <ticker_job+0x232>
   1154e:	bf00      	nop
   11550:	ff172b5a 	.word	0xff172b5a
   11554:	7f172b59 	.word	0x7f172b59
				instance->sched_cb(TICKER_CALL_ID_JOB,
   11558:	9b01      	ldr	r3, [sp, #4]
   1155a:	2104      	movs	r1, #4
   1155c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1155e:	2201      	movs	r2, #1
   11560:	4608      	mov	r0, r1
   11562:	47a0      	blx	r4
	while (count_user--) {
   11564:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   11566:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
   1156a:	2301      	movs	r3, #1
	while (count_user--) {
   1156c:	455a      	cmp	r2, fp
				pending = 1U;
   1156e:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   11570:	f1ab 0308 	sub.w	r3, fp, #8
   11574:	f47f aebd 	bne.w	112f2 <ticker_job+0x166>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11578:	f8dd b004 	ldr.w	fp, [sp, #4]
		flag_compare_update = 1U;
   1157c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   1157e:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   11582:	1a9b      	subs	r3, r3, r2
   11584:	bf18      	it	ne
   11586:	2301      	movne	r3, #1
   11588:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   1158a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1158c:	2b00      	cmp	r3, #0
   1158e:	f000 81bb 	beq.w	11908 <ticker_job+0x77c>
	ticks_now = cntr_cnt_get();
   11592:	f00b f9e1 	bl	1c958 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	while (instance->ticker_id_head != TICKER_NULL) {
   11598:	f89b 601d 	ldrb.w	r6, [fp, #29]
	node = &instance->nodes[0];
   1159c:	f8db 9000 	ldr.w	r9, [fp]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   115a0:	1ac3      	subs	r3, r0, r3
   115a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   115a6:	2eff      	cmp	r6, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   115a8:	9303      	str	r3, [sp, #12]
	while (instance->ticker_id_head != TICKER_NULL) {
   115aa:	d051      	beq.n	11650 <ticker_job+0x4c4>
	ticks_expired = 0U;
   115ac:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   115ae:	f8df 829c 	ldr.w	r8, [pc, #668]	; 1184c <ticker_job+0x6c0>
   115b2:	f8df a29c 	ldr.w	sl, [pc, #668]	; 11850 <ticker_job+0x6c4>
	while (instance->ticker_id_head != TICKER_NULL) {
   115b6:	9f05      	ldr	r7, [sp, #20]
	ticks_expired = 0U;
   115b8:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   115ba:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   115be:	eb09 1403 	add.w	r4, r9, r3, lsl #4
   115c2:	011b      	lsls	r3, r3, #4
   115c4:	9301      	str	r3, [sp, #4]
		ticks_to_expire = ticker->ticks_to_expire;
   115c6:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   115c8:	42bb      	cmp	r3, r7
   115ca:	f200 82a6 	bhi.w	11b1a <ticker_job+0x98e>
		ticks_expired += ticks_to_expire;
   115ce:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   115d0:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   115d4:	441a      	add	r2, r3
   115d6:	9202      	str	r2, [sp, #8]
		ticks_latency -= ticks_to_expire;
   115d8:	9a03      	ldr	r2, [sp, #12]
   115da:	1ad2      	subs	r2, r2, r3
   115dc:	9203      	str	r2, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   115de:	f8db 2018 	ldr.w	r2, [fp, #24]
   115e2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   115e4:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   115e8:	bf25      	ittet	cs
   115ea:	f04f 33ff 	movcs.w	r3, #4294967295
   115ee:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   115f2:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   115f4:	2300      	movcs	r3, #0
   115f6:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   115fa:	78a2      	ldrb	r2, [r4, #2]
   115fc:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   115fe:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   11600:	1a9b      	subs	r3, r3, r2
   11602:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11604:	b111      	cbz	r1, 1160c <ticker_job+0x480>
   11606:	2b02      	cmp	r3, #2
   11608:	f000 81a4 	beq.w	11954 <ticker_job+0x7c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1160c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
   1160e:	2100      	movs	r1, #0
   11610:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11612:	9901      	ldr	r1, [sp, #4]
   11614:	f819 1001 	ldrb.w	r1, [r9, r1]
   11618:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1161c:	6865      	ldr	r5, [r4, #4]
   1161e:	2d00      	cmp	r5, #0
   11620:	f040 809b 	bne.w	1175a <ticker_job+0x5ce>
   11624:	b118      	cbz	r0, 1162e <ticker_job+0x4a2>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   11626:	7a01      	ldrb	r1, [r0, #8]
   11628:	2901      	cmp	r1, #1
   1162a:	f000 809d 	beq.w	11768 <ticker_job+0x5dc>
			if (state && ((state == 1U) || skip_collision) &&
   1162e:	b153      	cbz	r3, 11646 <ticker_job+0x4ba>
   11630:	2b01      	cmp	r3, #1
   11632:	d002      	beq.n	1163a <ticker_job+0x4ae>
   11634:	f1be 0f00 	cmp.w	lr, #0
   11638:	d005      	beq.n	11646 <ticker_job+0x4ba>
			    ticker->fp_op_func) {
   1163a:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   1163c:	b11b      	cbz	r3, 11646 <ticker_job+0x4ba>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1163e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11640:	2001      	movs	r0, #1
   11642:	4798      	blx	r3
			ticker->req = ticker->ack;
   11644:	78a2      	ldrb	r2, [r4, #2]
   11646:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   11648:	f89b 601d 	ldrb.w	r6, [fp, #29]
   1164c:	2eff      	cmp	r6, #255	; 0xff
   1164e:	d1b4      	bne.n	115ba <ticker_job+0x42e>
			flag_compare_update = 1U;
   11650:	9b08      	ldr	r3, [sp, #32]
   11652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_job_list_insert(instance, insert_head);
   11654:	9904      	ldr	r1, [sp, #16]
			flag_compare_update = 1U;
   11656:	4296      	cmp	r6, r2
   11658:	bf18      	it	ne
   1165a:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   1165c:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   1165e:	9308      	str	r3, [sp, #32]
		ticker_job_list_insert(instance, insert_head);
   11660:	f7ff fb26 	bl	10cb0 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   11664:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   11668:	f8db 1000 	ldr.w	r1, [fp]
	while (rescheduling) {
   1166c:	e9cd 3b01 	strd	r3, fp, [sp, #4]
	uint8_t  rescheduled = 0U;
   11670:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   11672:	9b01      	ldr	r3, [sp, #4]
   11674:	2bff      	cmp	r3, #255	; 0xff
   11676:	d00f      	beq.n	11698 <ticker_job+0x50c>
   11678:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
   1167a:	b23b      	sxth	r3, r7
   1167c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11680:	eb01 1603 	add.w	r6, r1, r3, lsl #4
   11684:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   11686:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   11688:	b118      	cbz	r0, 11692 <ticker_job+0x506>
   1168a:	7a04      	ldrb	r4, [r0, #8]
   1168c:	2c01      	cmp	r4, #1
   1168e:	f000 8083 	beq.w	11798 <ticker_job+0x60c>
			ticker_id_head = ticker->next;
   11692:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
   11694:	2fff      	cmp	r7, #255	; 0xff
   11696:	d1f0      	bne.n	1167a <ticker_job+0x4ee>
	return rescheduled;
   11698:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   1169c:	2a00      	cmp	r2, #0
   1169e:	f000 813a 	beq.w	11916 <ticker_job+0x78a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   116a2:	9b01      	ldr	r3, [sp, #4]
   116a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   116a6:	428b      	cmp	r3, r1
   116a8:	f000 819b 	beq.w	119e2 <ticker_job+0x856>
	if (!pending) {
   116ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116ae:	2b00      	cmp	r3, #0
   116b0:	f000 81a2 	beq.w	119f8 <ticker_job+0x86c>
	if (instance->ticker_id_head == TICKER_NULL) {
   116b4:	f89b 201d 	ldrb.w	r2, [fp, #29]
   116b8:	9201      	str	r2, [sp, #4]
	instance->job_guard = 0U;
   116ba:	2300      	movs	r3, #0
   116bc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	2bff      	cmp	r3, #255	; 0xff
   116c4:	f000 824b 	beq.w	11b5e <ticker_job+0x9d2>
	if (ticker_id_old_head == TICKER_NULL) {
   116c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   116ca:	2bff      	cmp	r3, #255	; 0xff
   116cc:	f000 8258 	beq.w	11b80 <ticker_job+0x9f4>
	ticker = &instance->nodes[instance->ticker_id_head];
   116d0:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
   116d2:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   116d6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 11854 <ticker_job+0x6c8>
   116da:	f8df 817c 	ldr.w	r8, [pc, #380]	; 11858 <ticker_job+0x6cc>
   116de:	4f5f      	ldr	r7, [pc, #380]	; (1185c <ticker_job+0x6d0>)
	ticker = &instance->nodes[instance->ticker_id_head];
   116e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   116e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   116e8:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   116ea:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   116ec:	f00b f934 	bl	1c958 <cntr_cnt_get>
		cc = instance->ticks_current;
   116f0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   116f4:	1b03      	subs	r3, r0, r4
   116f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   116fa:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   116fc:	42b3      	cmp	r3, r6
   116fe:	bf2c      	ite	cs
   11700:	18e4      	addcs	r4, r4, r3
   11702:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   11704:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   11708:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   1170c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   1170e:	4620      	mov	r0, r4
   11710:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11712:	f00b f921 	bl	1c958 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11716:	eba0 030a 	sub.w	r3, r0, sl
   1171a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1171e:	eba4 020a 	sub.w	r2, r4, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   11722:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11724:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   11728:	4293      	cmp	r3, r2
		i--;
   1172a:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   1172e:	f240 8102 	bls.w	11936 <ticker_job+0x7aa>
		LL_ASSERT(i);
   11732:	2d00      	cmp	r5, #0
   11734:	d1da      	bne.n	116ec <ticker_job+0x560>
   11736:	f640 03ba 	movw	r3, #2234	; 0x8ba
   1173a:	464a      	mov	r2, r9
   1173c:	4641      	mov	r1, r8
   1173e:	4638      	mov	r0, r7
   11740:	f010 fdca 	bl	222d8 <printk>
   11744:	4040      	eors	r0, r0
   11746:	f380 8811 	msr	BASEPRI, r0
   1174a:	f04f 0003 	mov.w	r0, #3
   1174e:	df02      	svc	2
   11750:	e7cc      	b.n	116ec <ticker_job+0x560>
		if (current == id) {
   11752:	4608      	mov	r0, r1
	total = 0U;
   11754:	f04f 0c00 	mov.w	ip, #0
   11758:	e6d3      	b.n	11502 <ticker_job+0x376>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1175a:	2800      	cmp	r0, #0
   1175c:	f000 80a6 	beq.w	118ac <ticker_job+0x720>
   11760:	7a03      	ldrb	r3, [r0, #8]
   11762:	2b01      	cmp	r3, #1
   11764:	f040 80a2 	bne.w	118ac <ticker_job+0x720>
				ticker->req = ticker->ack;
   11768:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   1176a:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1176c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1176e:	9a02      	ldr	r2, [sp, #8]
   11770:	f8db 1014 	ldr.w	r1, [fp, #20]
   11774:	189a      	adds	r2, r3, r2
   11776:	4620      	mov	r0, r4
   11778:	f7ff fa76 	bl	10c68 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   1177c:	9a01      	ldr	r2, [sp, #4]
   1177e:	9b04      	ldr	r3, [sp, #16]
   11780:	f809 3002 	strb.w	r3, [r9, r2]
			ticker->req++;
   11784:	7863      	ldrb	r3, [r4, #1]
   11786:	9604      	str	r6, [sp, #16]
   11788:	3301      	adds	r3, #1
   1178a:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1178c:	f89b 601d 	ldrb.w	r6, [fp, #29]
   11790:	2eff      	cmp	r6, #255	; 0xff
   11792:	f47f af12 	bne.w	115ba <ticker_job+0x42e>
   11796:	e75b      	b.n	11650 <ticker_job+0x4c4>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11798:	9b02      	ldr	r3, [sp, #8]
   1179a:	7f1b      	ldrb	r3, [r3, #28]
   1179c:	2bff      	cmp	r3, #255	; 0xff
   1179e:	4686      	mov	lr, r0
   117a0:	d044      	beq.n	1182c <ticker_job+0x6a0>
			instance->ticks_slot_previous > ticks_elapsed) {
   117a2:	9b02      	ldr	r3, [sp, #8]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   117a4:	9a05      	ldr	r2, [sp, #20]
			instance->ticks_slot_previous > ticks_elapsed) {
   117a6:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   117a8:	4293      	cmp	r3, r2
   117aa:	d93f      	bls.n	1182c <ticker_job+0x6a0>
			window_start_ticks = instance->ticks_slot_previous -
   117ac:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   117b0:	e9de 2300 	ldrd	r2, r3, [lr]
   117b4:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   117b6:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   117ba:	d23f      	bcs.n	1183c <ticker_job+0x6b0>
		while (ticker_id_iter != TICKER_NULL &&
   117bc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   117c0:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
   117c4:	d03a      	beq.n	1183c <ticker_job+0x6b0>
		       ticks_start_offset + ticker->ticks_slot <=
   117c6:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
   117ca:	45c1      	cmp	r9, r8
   117cc:	f04f 0300 	mov.w	r3, #0
   117d0:	d337      	bcc.n	11842 <ticker_job+0x6b6>
   117d2:	46c2      	mov	sl, r8
   117d4:	465a      	mov	r2, fp
   117d6:	461d      	mov	r5, r3
   117d8:	e01b      	b.n	11812 <ticker_job+0x686>
			if (node->ticks_to_expire >
   117da:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
   117dc:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   117de:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   117e0:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   117e2:	d909      	bls.n	117f8 <ticker_job+0x66c>
				window_end_ticks =
   117e4:	454b      	cmp	r3, r9
   117e6:	bf28      	it	cs
   117e8:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
   117ea:	459a      	cmp	sl, r3
   117ec:	d204      	bcs.n	117f8 <ticker_job+0x66c>
			if (ticks_to_expire != 0U &&
   117ee:	ebb3 0308 	subs.w	r3, r3, r8
   117f2:	d001      	beq.n	117f8 <ticker_job+0x66c>
   117f4:	459c      	cmp	ip, r3
   117f6:	d924      	bls.n	11842 <ticker_job+0x6b6>
			window_start_ticks  = node->ticks_to_expire +
   117f8:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
   117fa:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
   117fc:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
   11800:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
   11802:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
   11806:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   11808:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
   1180c:	d019      	beq.n	11842 <ticker_job+0x6b6>
   1180e:	45d1      	cmp	r9, sl
   11810:	d317      	bcc.n	11842 <ticker_job+0x6b6>
			node = &nodes[ticker_id_iter];
   11812:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11816:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   1181a:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   1181c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1181e:	2800      	cmp	r0, #0
   11820:	d0db      	beq.n	117da <ticker_job+0x64e>
   11822:	7a00      	ldrb	r0, [r0, #8]
   11824:	2801      	cmp	r0, #1
   11826:	d1d8      	bne.n	117da <ticker_job+0x64e>
				ticker_id_iter = node->next;
   11828:	5c8a      	ldrb	r2, [r1, r2]
				continue;
   1182a:	e7ec      	b.n	11806 <ticker_job+0x67a>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1182c:	e9de 2300 	ldrd	r2, r3, [lr]
   11830:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   11832:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
   11836:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1183a:	d3bf      	bcc.n	117bc <ticker_job+0x630>
		ticker->ticks_to_expire = ticks_to_expire;
   1183c:	2300      	movs	r3, #0
   1183e:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
   11840:	e02b      	b.n	1189a <ticker_job+0x70e>
		ticker->ticks_to_expire = ticks_to_expire;
   11842:	60b3      	str	r3, [r6, #8]
   11844:	465d      	mov	r5, fp
   11846:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1184a:	e00a      	b.n	11862 <ticker_job+0x6d6>
   1184c:	ff172b5a 	.word	0xff172b5a
   11850:	7f172b59 	.word	0x7f172b59
   11854:	00028da0 	.word	0x00028da0
   11858:	00028ea4 	.word	0x00028ea4
   1185c:	00028de0 	.word	0x00028de0
   11860:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   11862:	b228      	sxth	r0, r5
   11864:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   11868:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
   1186c:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1186e:	f8dc 4008 	ldr.w	r4, [ip, #8]
   11872:	429c      	cmp	r4, r3
   11874:	f080 80ab 	bcs.w	119ce <ticker_job+0x842>
				ticker->ticks_to_expire -=
   11878:	1b1b      	subs	r3, r3, r4
   1187a:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
   1187c:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1187e:	2aff      	cmp	r2, #255	; 0xff
   11880:	46a8      	mov	r8, r5
   11882:	d1ed      	bne.n	11860 <ticker_job+0x6d4>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11884:	9a02      	ldr	r2, [sp, #8]
			nodes[ticker_id_prev].next = ticker_id_head;
   11886:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1188a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1188e:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11890:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11894:	5cca      	ldrb	r2, [r1, r3]
   11896:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   11898:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
   1189a:	8bf3      	ldrh	r3, [r6, #30]
   1189c:	3b01      	subs	r3, #1
   1189e:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
   118a0:	f04f 0302 	mov.w	r3, #2
   118a4:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
   118a8:	2201      	movs	r2, #1
   118aa:	e6e2      	b.n	11672 <ticker_job+0x4e6>
				if (!ticker->lazy_current) {
   118ac:	f1be 0f00 	cmp.w	lr, #0
   118b0:	d15f      	bne.n	11972 <ticker_job+0x7e6>
					lazy_periodic = ticker->lazy_periodic;
   118b2:	8ba3      	ldrh	r3, [r4, #28]
   118b4:	9307      	str	r3, [sp, #28]
   118b6:	461a      	mov	r2, r3
				while (count--) {
   118b8:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   118ba:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   118be:	2100      	movs	r1, #0
   118c0:	9006      	str	r0, [sp, #24]
   118c2:	e004      	b.n	118ce <ticker_job+0x742>
   118c4:	4628      	mov	r0, r5
				while (count--) {
   118c6:	3a01      	subs	r2, #1
					ticks_to_expire +=
   118c8:	4401      	add	r1, r0
				while (count--) {
   118ca:	1c50      	adds	r0, r2, #1
   118cc:	d00f      	beq.n	118ee <ticker_job+0x762>
	ticker->remainder_current += ticker->remainder_periodic;
   118ce:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   118d0:	eb03 0008 	add.w	r0, r3, r8
   118d4:	4550      	cmp	r0, sl
   118d6:	d8f5      	bhi.n	118c4 <ticker_job+0x738>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   118d8:	9806      	ldr	r0, [sp, #24]
   118da:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   118de:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   118e0:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   118e4:	4401      	add	r1, r0
				while (count--) {
   118e6:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   118e8:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   118ec:	d1ef      	bne.n	118ce <ticker_job+0x742>
				if (!ticker->must_expire) {
   118ee:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   118f2:	6263      	str	r3, [r4, #36]	; 0x24
   118f4:	2a00      	cmp	r2, #0
   118f6:	d041      	beq.n	1197c <ticker_job+0x7f0>
				ticker->lazy_current += (lazy_periodic + lazy);
   118f8:	9b07      	ldr	r3, [sp, #28]
				ticker->ticks_to_expire = ticks_to_expire;
   118fa:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   118fc:	4473      	add	r3, lr
   118fe:	83e3      	strh	r3, [r4, #30]
   11900:	e734      	b.n	1176c <ticker_job+0x5e0>
	insert_head = TICKER_NULL;
   11902:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   11904:	9109      	str	r1, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11906:	9304      	str	r3, [sp, #16]
		ticker_job_list_insert(instance, insert_head);
   11908:	9904      	ldr	r1, [sp, #16]
   1190a:	4658      	mov	r0, fp
   1190c:	f7ff f9d0 	bl	10cb0 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11910:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11914:	9301      	str	r3, [sp, #4]
   11916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11918:	9a01      	ldr	r2, [sp, #4]
   1191a:	4293      	cmp	r3, r2
   1191c:	f47f aec6 	bne.w	116ac <ticker_job+0x520>
	if (!pending) {
   11920:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11922:	2b00      	cmp	r3, #0
   11924:	f000 80fc 	beq.w	11b20 <ticker_job+0x994>
	instance->job_guard = 0U;
   11928:	2300      	movs	r3, #0
   1192a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   1192e:	9b08      	ldr	r3, [sp, #32]
   11930:	2b00      	cmp	r3, #0
   11932:	f040 8133 	bne.w	11b9c <ticker_job+0xa10>
	if (instance->worker_trigger) {
   11936:	f89b 301f 	ldrb.w	r3, [fp, #31]
   1193a:	2b00      	cmp	r3, #0
   1193c:	d059      	beq.n	119f2 <ticker_job+0x866>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1193e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11942:	465b      	mov	r3, fp
   11944:	2201      	movs	r2, #1
   11946:	2103      	movs	r1, #3
   11948:	2004      	movs	r0, #4
   1194a:	46a4      	mov	ip, r4
}
   1194c:	b00f      	add	sp, #60	; 0x3c
   1194e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11952:	4760      	bx	ip
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11954:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11956:	f1be 0f00 	cmp.w	lr, #0
   1195a:	f47f ae58 	bne.w	1160e <ticker_job+0x482>
   1195e:	b118      	cbz	r0, 11968 <ticker_job+0x7dc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11960:	7a05      	ldrb	r5, [r0, #8]
   11962:	2d01      	cmp	r5, #1
   11964:	f000 80e6 	beq.w	11b34 <ticker_job+0x9a8>
			instance->ticks_slot_previous = ticker->ticks_slot;
   11968:	f8cb 1018 	str.w	r1, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   1196c:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11970:	e64d      	b.n	1160e <ticker_job+0x482>
					ticker->req = ticker->ack;
   11972:	7062      	strb	r2, [r4, #1]
   11974:	2200      	movs	r2, #0
					lazy_periodic = 0U;
   11976:	9207      	str	r2, [sp, #28]
   11978:	e79e      	b.n	118b8 <ticker_job+0x72c>
   1197a:	4770      	bx	lr
					while (ticks_to_expire <
   1197c:	9803      	ldr	r0, [sp, #12]
   1197e:	4288      	cmp	r0, r1
   11980:	d9ba      	bls.n	118f8 <ticker_job+0x76c>
   11982:	1c68      	adds	r0, r5, #1
   11984:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   11988:	9006      	str	r0, [sp, #24]
   1198a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1198e:	e005      	b.n	1199c <ticker_job+0x810>
   11990:	4628      	mov	r0, r5
						ticks_to_expire +=
   11992:	4401      	add	r1, r0
						lazy++;
   11994:	3201      	adds	r2, #1
					while (ticks_to_expire <
   11996:	4589      	cmp	r9, r1
						lazy++;
   11998:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1199a:	d910      	bls.n	119be <ticker_job+0x832>
	ticker->remainder_current += ticker->remainder_periodic;
   1199c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1199e:	eb03 0008 	add.w	r0, r3, r8
   119a2:	4550      	cmp	r0, sl
   119a4:	d8f4      	bhi.n	11990 <ticker_job+0x804>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119a6:	9806      	ldr	r0, [sp, #24]
   119a8:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   119ac:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119ae:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   119b2:	3201      	adds	r2, #1
					while (ticks_to_expire <
   119b4:	4589      	cmp	r9, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119b6:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   119ba:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   119bc:	d8ee      	bhi.n	1199c <ticker_job+0x810>
				ticker->lazy_current += (lazy_periodic + lazy);
   119be:	9807      	ldr	r0, [sp, #28]
   119c0:	6263      	str	r3, [r4, #36]	; 0x24
   119c2:	4410      	add	r0, r2
   119c4:	b283      	uxth	r3, r0
   119c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   119ca:	9307      	str	r3, [sp, #28]
   119cc:	e794      	b.n	118f8 <ticker_job+0x76c>
				node->ticks_to_expire -=
   119ce:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
   119d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
   119d4:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   119d8:	f43f af5f 	beq.w	1189a <ticker_job+0x70e>
   119dc:	fa0f f088 	sxth.w	r0, r8
   119e0:	e750      	b.n	11884 <ticker_job+0x6f8>
	if (!pending) {
   119e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   119e4:	2b00      	cmp	r3, #0
   119e6:	f000 80b1 	beq.w	11b4c <ticker_job+0x9c0>
	instance->job_guard = 0U;
   119ea:	2300      	movs	r3, #0
   119ec:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   119f0:	e666      	b.n	116c0 <ticker_job+0x534>
}
   119f2:	b00f      	add	sp, #60	; 0x3c
   119f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	count_user = instance->count_user;
   119f8:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   119fc:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11a00:	1e5c      	subs	r4, r3, #1
   11a02:	b2e4      	uxtb	r4, r4
   11a04:	2b00      	cmp	r3, #0
   11a06:	f43f ae55 	beq.w	116b4 <ticker_job+0x528>
		flag_compare_update = 1U;
   11a0a:	2301      	movs	r3, #1
   11a0c:	9308      	str	r3, [sp, #32]
   11a0e:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   11a12:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   11a14:	f04f 0a01 	mov.w	sl, #1
   11a18:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
   11a1a:	7863      	ldrb	r3, [r4, #1]
   11a1c:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
   11a1e:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
   11a20:	429a      	cmp	r2, r3
   11a22:	d10c      	bne.n	11a3e <ticker_job+0x8b2>
   11a24:	e068      	b.n	11af8 <ticker_job+0x96c>
	switch (uop->op) {
   11a26:	2b01      	cmp	r3, #1
   11a28:	d05e      	beq.n	11ae8 <ticker_job+0x95c>
			first = user->first + 1;
   11a2a:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   11a2c:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
   11a2e:	3301      	adds	r3, #1
   11a30:	b2db      	uxtb	r3, r3
				first = 0U;
   11a32:	4299      	cmp	r1, r3
   11a34:	bf08      	it	eq
   11a36:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   11a38:	429a      	cmp	r2, r3
			user->first = first;
   11a3a:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11a3c:	d05c      	beq.n	11af8 <ticker_job+0x96c>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11a3e:	b21b      	sxth	r3, r3
   11a40:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11a44:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11a48:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
   11a4c:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   11a50:	2b02      	cmp	r3, #2
   11a52:	d01d      	beq.n	11a90 <ticker_job+0x904>
   11a54:	2b03      	cmp	r3, #3
   11a56:	d1e6      	bne.n	11a26 <ticker_job+0x89a>
		if (uop->id < instance->count_node) {
   11a58:	f89c 3001 	ldrb.w	r3, [ip, #1]
   11a5c:	f89b 2008 	ldrb.w	r2, [fp, #8]
   11a60:	429a      	cmp	r2, r3
   11a62:	d946      	bls.n	11af2 <ticker_job+0x966>
			node[uop->id].priority =
   11a64:	f8db 2000 	ldr.w	r2, [fp]
   11a68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11a6c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   11a70:	f89c 2004 	ldrb.w	r2, [ip, #4]
   11a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   11a78:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   11a7c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
   11a80:	b123      	cbz	r3, 11a8c <ticker_job+0x900>
		fp_op_func(uop->status, uop->op_context);
   11a82:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   11a86:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   11a8a:	4798      	blx	r3
   11a8c:	78e2      	ldrb	r2, [r4, #3]
   11a8e:	e7cc      	b.n	11a2a <ticker_job+0x89e>
		ticker_by_next_slot_get(instance,
   11a90:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   11a94:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   11a98:	f8dc 800c 	ldr.w	r8, [ip, #12]
	node = instance->nodes;
   11a9c:	f8db 0000 	ldr.w	r0, [fp]
	    (*ticks_current != instance->ticks_current)) {
   11aa0:	f8db 6014 	ldr.w	r6, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11aa4:	2aff      	cmp	r2, #255	; 0xff
   11aa6:	d002      	beq.n	11aae <ticker_job+0x922>
   11aa8:	680b      	ldr	r3, [r1, #0]
   11aaa:	42b3      	cmp	r3, r6
   11aac:	d02e      	beq.n	11b0c <ticker_job+0x980>
		_ticker_id_head = instance->ticker_id_head;
   11aae:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   11ab2:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
   11ab4:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   11ab6:	2aff      	cmp	r2, #255	; 0xff
   11ab8:	bf18      	it	ne
   11aba:	46a1      	movne	r9, r4
   11abc:	d105      	bne.n	11aca <ticker_job+0x93e>
   11abe:	e00f      	b.n	11ae0 <ticker_job+0x954>
		_ticker_id_head = ticker->next;
   11ac0:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   11ac2:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   11ac4:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   11ac6:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
   11ac8:	d01e      	beq.n	11b08 <ticker_job+0x97c>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   11aca:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   11ace:	eb00 1103 	add.w	r1, r0, r3, lsl #4
   11ad2:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   11ad4:	698c      	ldr	r4, [r1, #24]
   11ad6:	2c00      	cmp	r4, #0
   11ad8:	d0f2      	beq.n	11ac0 <ticker_job+0x934>
		_ticks_to_expire += ticker->ticks_to_expire;
   11ada:	688b      	ldr	r3, [r1, #8]
   11adc:	464c      	mov	r4, r9
   11ade:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
   11ae0:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   11ae4:	f8c8 6000 	str.w	r6, [r8]
		fp_op_func = uop->fp_op_func;
   11ae8:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   11aec:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
   11af0:	e7c6      	b.n	11a80 <ticker_job+0x8f4>
			uop->status = TICKER_STATUS_FAILURE;
   11af2:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
   11af6:	e7c1      	b.n	11a7c <ticker_job+0x8f0>
	while (count_user--) {
   11af8:	9a01      	ldr	r2, [sp, #4]
   11afa:	42a2      	cmp	r2, r4
   11afc:	f1a4 0308 	sub.w	r3, r4, #8
   11b00:	f43f af12 	beq.w	11928 <ticker_job+0x79c>
   11b04:	461c      	mov	r4, r3
   11b06:	e788      	b.n	11a1a <ticker_job+0x88e>
   11b08:	464c      	mov	r4, r9
   11b0a:	e7e9      	b.n	11ae0 <ticker_job+0x954>
		ticker = &node[_ticker_id_head];
   11b0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11b10:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   11b12:	f8d8 6000 	ldr.w	r6, [r8]
		_ticker_id_head = ticker->next;
   11b16:	5cc2      	ldrb	r2, [r0, r3]
   11b18:	e7cd      	b.n	11ab6 <ticker_job+0x92a>
			ticker->ticks_to_expire -= ticks_elapsed;
   11b1a:	1bdb      	subs	r3, r3, r7
   11b1c:	60a3      	str	r3, [r4, #8]
			break;
   11b1e:	e597      	b.n	11650 <ticker_job+0x4c4>
	count_user = instance->count_user;
   11b20:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11b24:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11b28:	1e5c      	subs	r4, r3, #1
   11b2a:	b2e4      	uxtb	r4, r4
   11b2c:	2b00      	cmp	r3, #0
   11b2e:	f47f af6e 	bne.w	11a0e <ticker_job+0x882>
   11b32:	e6f9      	b.n	11928 <ticker_job+0x79c>
		instance->ticker_id_head = ticker->next;
   11b34:	9901      	ldr	r1, [sp, #4]
		ticker->ticks_to_expire = 0U;
   11b36:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11b3a:	f819 1001 	ldrb.w	r1, [r9, r1]
   11b3e:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11b42:	6861      	ldr	r1, [r4, #4]
   11b44:	2900      	cmp	r1, #0
   11b46:	f43f ad6e 	beq.w	11626 <ticker_job+0x49a>
   11b4a:	e60d      	b.n	11768 <ticker_job+0x5dc>
	count_user = instance->count_user;
   11b4c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11b50:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11b54:	1e5c      	subs	r4, r3, #1
   11b56:	b2e4      	uxtb	r4, r4
   11b58:	b323      	cbz	r3, 11ba4 <ticker_job+0xa18>
			flag_compare_update = 1U;
   11b5a:	9208      	str	r2, [sp, #32]
   11b5c:	e757      	b.n	11a0e <ticker_job+0x882>
		if (cntr_stop() == 0) {
   11b5e:	f00a fed5 	bl	1c90c <cntr_stop>
   11b62:	2800      	cmp	r0, #0
   11b64:	f47f aee7 	bne.w	11936 <ticker_job+0x7aa>
			instance->ticks_slot_previous = 0U;
   11b68:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   11b6c:	f00a fef4 	bl	1c958 <cntr_cnt_get>
   11b70:	f8cb 0014 	str.w	r0, [fp, #20]
   11b74:	e6df      	b.n	11936 <ticker_job+0x7aa>
	pending = 0U;
   11b76:	9b08      	ldr	r3, [sp, #32]
   11b78:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11b7a:	23ff      	movs	r3, #255	; 0xff
   11b7c:	9304      	str	r3, [sp, #16]
   11b7e:	e508      	b.n	11592 <ticker_job+0x406>
		ticks_current = cntr_cnt_get();
   11b80:	f00a feea 	bl	1c958 <cntr_cnt_get>
   11b84:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11b86:	f00a feb1 	bl	1c8ec <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   11b8a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11b8e:	9301      	str	r3, [sp, #4]
		if (cntr_start() == 0) {
   11b90:	2800      	cmp	r0, #0
   11b92:	f47f ad9d 	bne.w	116d0 <ticker_job+0x544>
			instance->ticks_current = ticks_current;
   11b96:	f8cb 4014 	str.w	r4, [fp, #20]
   11b9a:	e599      	b.n	116d0 <ticker_job+0x544>
	if (instance->ticker_id_head == TICKER_NULL) {
   11b9c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11ba0:	9301      	str	r3, [sp, #4]
   11ba2:	e58d      	b.n	116c0 <ticker_job+0x534>
	instance->job_guard = 0U;
   11ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ba6:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11baa:	e589      	b.n	116c0 <ticker_job+0x534>

00011bac <ticker_init>:
{
   11bac:	b4f0      	push	{r4, r5, r6, r7}
   11bae:	9d04      	ldr	r5, [sp, #16]
   11bb0:	f89d 7014 	ldrb.w	r7, [sp, #20]
   11bb4:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   11bb6:	2800      	cmp	r0, #0
   11bb8:	d137      	bne.n	11c2a <ticker_init+0x7e>
	instance->count_node = count_node;
   11bba:	4e1d      	ldr	r6, [pc, #116]	; (11c30 <ticker_init+0x84>)
	while (count_node--) {
   11bbc:	f101 3cff 	add.w	ip, r1, #4294967295
	instance->count_node = count_node;
   11bc0:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   11bc2:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   11bc4:	fa5f fc8c 	uxtb.w	ip, ip
   11bc8:	b149      	cbz	r1, 11bde <ticker_init+0x32>
   11bca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11bce:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   11bd2:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   11bd4:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   11bd8:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   11bdc:	d1f9      	bne.n	11bd2 <ticker_init+0x26>
	while (count_user--) {
   11bde:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   11be0:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   11be2:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   11be4:	b2d2      	uxtb	r2, r2
   11be6:	b183      	cbz	r3, 11c0a <ticker_init+0x5e>
   11be8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   11bec:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   11bee:	4610      	mov	r0, r2
   11bf0:	f812 3908 	ldrb.w	r3, [r2], #-8
   11bf4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11bf8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   11bfc:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   11bfe:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   11c02:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   11c06:	b2df      	uxtb	r7, r3
	while (count_user--) {
   11c08:	d1f0      	bne.n	11bec <ticker_init+0x40>
	if (count_op) {
   11c0a:	b977      	cbnz	r7, 11c2a <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   11c0c:	9a07      	ldr	r2, [sp, #28]
   11c0e:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   11c10:	9a08      	ldr	r2, [sp, #32]
   11c12:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   11c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   11c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11c1a:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   11c1c:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   11c1e:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   11c22:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   11c24:	8177      	strh	r7, [r6, #10]
}
   11c26:	bcf0      	pop	{r4, r5, r6, r7}
   11c28:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   11c2a:	2001      	movs	r0, #1
}
   11c2c:	bcf0      	pop	{r4, r5, r6, r7}
   11c2e:	4770      	bx	lr
   11c30:	2000dec0 	.word	0x2000dec0

00011c34 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   11c34:	4b04      	ldr	r3, [pc, #16]	; (11c48 <ticker_is_initialized+0x14>)
   11c36:	222c      	movs	r2, #44	; 0x2c
   11c38:	fb02 3300 	mla	r3, r2, r0, r3
   11c3c:	7a18      	ldrb	r0, [r3, #8]
}
   11c3e:	3800      	subs	r0, #0
   11c40:	bf18      	it	ne
   11c42:	2001      	movne	r0, #1
   11c44:	4770      	bx	lr
   11c46:	bf00      	nop
   11c48:	2000dec0 	.word	0x2000dec0

00011c4c <ticker_trigger>:
	if (instance->sched_cb) {
   11c4c:	4b0a      	ldr	r3, [pc, #40]	; (11c78 <ticker_trigger+0x2c>)
   11c4e:	222c      	movs	r2, #44	; 0x2c
   11c50:	fb02 3200 	mla	r2, r2, r0, r3
{
   11c54:	b410      	push	{r4}
	if (instance->sched_cb) {
   11c56:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11c58:	b15c      	cbz	r4, 11c72 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   11c5a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   11c5e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11c62:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   11c66:	46a4      	mov	ip, r4
   11c68:	2201      	movs	r2, #1
}
   11c6a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11c6c:	2103      	movs	r1, #3
   11c6e:	2002      	movs	r0, #2
   11c70:	4760      	bx	ip
}
   11c72:	bc10      	pop	{r4}
   11c74:	4770      	bx	lr
   11c76:	bf00      	nop
   11c78:	2000dec0 	.word	0x2000dec0

00011c7c <ticker_start_ext>:
{
   11c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11c80:	4e28      	ldr	r6, [pc, #160]	; (11d24 <ticker_start_ext+0xa8>)
{
   11c82:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   11c86:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   11c88:	252c      	movs	r5, #44	; 0x2c
   11c8a:	fb05 6504 	mla	r5, r5, r4, r6
{
   11c8e:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   11c90:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   11c94:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   11c98:	6869      	ldr	r1, [r5, #4]
   11c9a:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   11c9e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   11ca2:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   11ca6:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   11caa:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   11cac:	f10e 0c01 	add.w	ip, lr, #1
   11cb0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11cb4:	4564      	cmp	r4, ip
   11cb6:	bf98      	it	ls
   11cb8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11cbc:	4561      	cmp	r1, ip
   11cbe:	d02e      	beq.n	11d1e <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   11cc0:	6879      	ldr	r1, [r7, #4]
   11cc2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   11cc6:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   11cca:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   11cce:	f04f 0904 	mov.w	r9, #4
   11cd2:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11cd6:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11cd8:	9b08      	ldr	r3, [sp, #32]
   11cda:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   11cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11cde:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   11ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ce2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ce6:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   11ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11cea:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   11cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11cee:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   11cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11cf2:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   11cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   11cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11cfa:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11cfc:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11cfe:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11d00:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   11d02:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   11d06:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11d0a:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   11d0e:	4798      	blx	r3
   11d10:	4633      	mov	r3, r6
   11d12:	4649      	mov	r1, r9
   11d14:	2200      	movs	r2, #0
   11d16:	47a8      	blx	r5
	return user_op->status;
   11d18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   11d1e:	2001      	movs	r0, #1
}
   11d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d24:	2000dec0 	.word	0x2000dec0

00011d28 <ticker_start>:
{
   11d28:	b510      	push	{r4, lr}
   11d2a:	b08a      	sub	sp, #40	; 0x28
   11d2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d2e:	9400      	str	r4, [sp, #0]
{
   11d30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d32:	9401      	str	r4, [sp, #4]
{
   11d34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d36:	9402      	str	r4, [sp, #8]
{
   11d38:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d3c:	9403      	str	r4, [sp, #12]
{
   11d3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d40:	9404      	str	r4, [sp, #16]
{
   11d42:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d44:	9405      	str	r4, [sp, #20]
{
   11d46:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d48:	9406      	str	r4, [sp, #24]
{
   11d4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d4c:	9407      	str	r4, [sp, #28]
{
   11d4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11d50:	9408      	str	r4, [sp, #32]
   11d52:	2400      	movs	r4, #0
   11d54:	9409      	str	r4, [sp, #36]	; 0x24
   11d56:	f7ff ff91 	bl	11c7c <ticker_start_ext>
}
   11d5a:	b00a      	add	sp, #40	; 0x28
   11d5c:	bd10      	pop	{r4, pc}
   11d5e:	bf00      	nop

00011d60 <ticker_update_ext>:
{
   11d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11d64:	4d28      	ldr	r5, [pc, #160]	; (11e08 <ticker_update_ext+0xa8>)
{
   11d66:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   11d6a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   11d6e:	4604      	mov	r4, r0
   11d70:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11d72:	212c      	movs	r1, #44	; 0x2c
   11d74:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11d78:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   11d7c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   11d80:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   11d84:	684c      	ldr	r4, [r1, #4]
   11d86:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   11d8a:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   11d8e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11d92:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   11d94:	f10e 0c01 	add.w	ip, lr, #1
   11d98:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11d9c:	45e1      	cmp	r9, ip
   11d9e:	bf98      	it	ls
   11da0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11da4:	4564      	cmp	r4, ip
{
   11da6:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   11daa:	d02a      	beq.n	11e02 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   11dac:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11db0:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   11db4:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   11db8:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   11dbc:	f04f 0b05 	mov.w	fp, #5
   11dc0:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   11dc4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   11dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11dc8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   11dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11dcc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11dd0:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   11dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   11dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11dd8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11dda:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11ddc:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11dde:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   11de0:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   11de2:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   11de6:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   11dea:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11dee:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11df2:	4798      	blx	r3
   11df4:	462b      	mov	r3, r5
   11df6:	2200      	movs	r2, #0
   11df8:	2104      	movs	r1, #4
   11dfa:	47b0      	blx	r6
	return user_op->status;
   11dfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   11e02:	2001      	movs	r0, #1
}
   11e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e08:	2000dec0 	.word	0x2000dec0

00011e0c <ticker_update>:
{
   11e0c:	b510      	push	{r4, lr}
   11e0e:	b088      	sub	sp, #32
   11e10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e12:	9400      	str	r4, [sp, #0]
{
   11e14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e16:	9401      	str	r4, [sp, #4]
{
   11e18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e1a:	9402      	str	r4, [sp, #8]
{
   11e1c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e20:	9403      	str	r4, [sp, #12]
{
   11e22:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e26:	9404      	str	r4, [sp, #16]
{
   11e28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e2a:	9405      	str	r4, [sp, #20]
{
   11e2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11e2e:	9406      	str	r4, [sp, #24]
   11e30:	2400      	movs	r4, #0
   11e32:	9407      	str	r4, [sp, #28]
   11e34:	f7ff ff94 	bl	11d60 <ticker_update_ext>
}
   11e38:	b008      	add	sp, #32
   11e3a:	bd10      	pop	{r4, pc}

00011e3c <ticker_stop>:
{
   11e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11e40:	4c1e      	ldr	r4, [pc, #120]	; (11ebc <ticker_stop+0x80>)
{
   11e42:	4684      	mov	ip, r0
   11e44:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11e46:	212c      	movs	r1, #44	; 0x2c
   11e48:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   11e4c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   11e50:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   11e54:	684d      	ldr	r5, [r1, #4]
   11e56:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   11e5a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   11e5e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11e62:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   11e64:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   11e68:	f10e 0c01 	add.w	ip, lr, #1
   11e6c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11e70:	4567      	cmp	r7, ip
   11e72:	bf98      	it	ls
   11e74:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11e78:	4565      	cmp	r5, ip
   11e7a:	d01c      	beq.n	11eb6 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   11e7c:	6877      	ldr	r7, [r6, #4]
   11e7e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   11e82:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   11e86:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   11e8a:	f04f 0806 	mov.w	r8, #6
   11e8e:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   11e92:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   11e94:	9b06      	ldr	r3, [sp, #24]
   11e96:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11e98:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11e9a:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11e9c:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   11e9e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11ea2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11ea6:	4798      	blx	r3
   11ea8:	4623      	mov	r3, r4
   11eaa:	2200      	movs	r2, #0
   11eac:	2104      	movs	r1, #4
   11eae:	47b0      	blx	r6
	return user_op->status;
   11eb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   11eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11eb6:	2001      	movs	r0, #1
}
   11eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ebc:	2000dec0 	.word	0x2000dec0

00011ec0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11ec0:	f00a bd4a 	b.w	1c958 <cntr_cnt_get>

00011ec4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11ec4:	1a40      	subs	r0, r0, r1
}
   11ec6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11eca:	4770      	bx	lr

00011ecc <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   11ecc:	2801      	cmp	r0, #1
{
   11ece:	b508      	push	{r3, lr}
   11ed0:	4603      	mov	r3, r0
	if (addr_type > 1) {
   11ed2:	d811      	bhi.n	11ef8 <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
   11ed4:	4608      	mov	r0, r1
   11ed6:	b943      	cbnz	r3, 11eea <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   11ed8:	b129      	cbz	r1, 11ee6 <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   11eda:	4909      	ldr	r1, [pc, #36]	; (11f00 <ll_addr_get+0x34>)
   11edc:	2206      	movs	r2, #6
   11ede:	f012 feb7 	bl	24c50 <memcpy>
	}

	return pub_addr;
   11ee2:	4807      	ldr	r0, [pc, #28]	; (11f00 <ll_addr_get+0x34>)
}
   11ee4:	bd08      	pop	{r3, pc}
	return pub_addr;
   11ee6:	4806      	ldr	r0, [pc, #24]	; (11f00 <ll_addr_get+0x34>)
}
   11ee8:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   11eea:	b139      	cbz	r1, 11efc <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   11eec:	4905      	ldr	r1, [pc, #20]	; (11f04 <ll_addr_get+0x38>)
   11eee:	2206      	movs	r2, #6
   11ef0:	f012 feae 	bl	24c50 <memcpy>
		return rnd_addr;
   11ef4:	4803      	ldr	r0, [pc, #12]	; (11f04 <ll_addr_get+0x38>)
}
   11ef6:	bd08      	pop	{r3, pc}
		return NULL;
   11ef8:	2000      	movs	r0, #0
}
   11efa:	bd08      	pop	{r3, pc}
		return rnd_addr;
   11efc:	4801      	ldr	r0, [pc, #4]	; (11f04 <ll_addr_get+0x38>)
}
   11efe:	bd08      	pop	{r3, pc}
   11f00:	2000deec 	.word	0x2000deec
   11f04:	2000def4 	.word	0x2000def4

00011f08 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   11f08:	b570      	push	{r4, r5, r6, lr}
   11f0a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   11f0c:	2000      	movs	r0, #0
{
   11f0e:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   11f10:	f003 f8fc 	bl	1510c <ull_adv_is_enabled>
   11f14:	b978      	cbnz	r0, 11f36 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   11f16:	b13c      	cbz	r4, 11f28 <ll_addr_set+0x20>
   11f18:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11f1a:	2206      	movs	r2, #6
   11f1c:	4631      	mov	r1, r6
   11f1e:	4807      	ldr	r0, [pc, #28]	; (11f3c <ll_addr_set+0x34>)
   11f20:	f012 fe96 	bl	24c50 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11f24:	4628      	mov	r0, r5
}
   11f26:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11f28:	2206      	movs	r2, #6
   11f2a:	4631      	mov	r1, r6
   11f2c:	4804      	ldr	r0, [pc, #16]	; (11f40 <ll_addr_set+0x38>)
   11f2e:	f012 fe8f 	bl	24c50 <memcpy>
	return 0;
   11f32:	4620      	mov	r0, r4
}
   11f34:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   11f36:	200c      	movs	r0, #12
}
   11f38:	bd70      	pop	{r4, r5, r6, pc}
   11f3a:	bf00      	nop
   11f3c:	2000def4 	.word	0x2000def4
   11f40:	2000deec 	.word	0x2000deec

00011f44 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11f44:	2802      	cmp	r0, #2
   11f46:	d001      	beq.n	11f4c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11f48:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   11f4a:	4770      	bx	lr
{
   11f4c:	b538      	push	{r3, r4, r5, lr}
   11f4e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11f50:	4608      	mov	r0, r1
   11f52:	461d      	mov	r5, r3
   11f54:	f003 fea2 	bl	15c9c <ll_connected_get>
			if (!conn) {
   11f58:	b110      	cbz	r0, 11f60 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   11f5a:	2000      	movs	r0, #0
   11f5c:	7028      	strb	r0, [r5, #0]
}
   11f5e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11f60:	4620      	mov	r0, r4
}
   11f62:	bd38      	pop	{r3, r4, r5, pc}

00011f64 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   11f64:	2300      	movs	r3, #0
   11f66:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11f68:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   11f6a:	4770      	bx	lr

00011f6c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   11f6c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   11f6e:	4802      	ldr	r0, [pc, #8]	; (11f78 <hci_driver_init+0xc>)
   11f70:	f7f8 fa84 	bl	a47c <bt_hci_driver_register>

	return 0;
}
   11f74:	2000      	movs	r0, #0
   11f76:	bd08      	pop	{r3, pc}
   11f78:	00028ed0 	.word	0x00028ed0

00011f7c <hci_driver_send>:
{
   11f7c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   11f7e:	8983      	ldrh	r3, [r0, #12]
{
   11f80:	b083      	sub	sp, #12
	if (!buf->len) {
   11f82:	2b00      	cmp	r3, #0
   11f84:	d03a      	beq.n	11ffc <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11f86:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11f88:	4604      	mov	r4, r0
   11f8a:	b31b      	cbz	r3, 11fd4 <hci_driver_send+0x58>
   11f8c:	2b02      	cmp	r3, #2
   11f8e:	d00f      	beq.n	11fb0 <hci_driver_send+0x34>
   11f90:	4921      	ldr	r1, [pc, #132]	; (12018 <hci_driver_send+0x9c>)
   11f92:	4a22      	ldr	r2, [pc, #136]	; (1201c <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11f94:	4822      	ldr	r0, [pc, #136]	; (12020 <hci_driver_send+0xa4>)
   11f96:	1a52      	subs	r2, r2, r1
   11f98:	08d2      	lsrs	r2, r2, #3
   11f9a:	0192      	lsls	r2, r2, #6
   11f9c:	f042 0201 	orr.w	r2, r2, #1
   11fa0:	4619      	mov	r1, r3
   11fa2:	f010 fe3c 	bl	22c1e <log_1>
		return -EINVAL;
   11fa6:	f06f 0515 	mvn.w	r5, #21
}
   11faa:	4628      	mov	r0, r5
   11fac:	b003      	add	sp, #12
   11fae:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11fb0:	a901      	add	r1, sp, #4
   11fb2:	f000 ff3f 	bl	12e34 <hci_acl_handle>
	if (evt) {
   11fb6:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   11fb8:	4605      	mov	r5, r0
	if (evt) {
   11fba:	b113      	cbz	r3, 11fc2 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   11fbc:	4618      	mov	r0, r3
   11fbe:	f7f8 fa3f 	bl	a440 <bt_recv_prio>
	if (!err) {
   11fc2:	2d00      	cmp	r5, #0
   11fc4:	d1f1      	bne.n	11faa <hci_driver_send+0x2e>
		net_buf_unref(buf);
   11fc6:	4620      	mov	r0, r4
   11fc8:	f00b fc54 	bl	1d874 <net_buf_unref>
   11fcc:	2500      	movs	r5, #0
}
   11fce:	4628      	mov	r0, r5
   11fd0:	b003      	add	sp, #12
   11fd2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11fd4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   11fd6:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11fd8:	f000 fa54 	bl	12484 <hci_cmd_handle>
	if (evt) {
   11fdc:	2800      	cmp	r0, #0
   11fde:	d0f2      	beq.n	11fc6 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11fe0:	f7f8 fa2e 	bl	a440 <bt_recv_prio>
		if (node_rx) {
   11fe4:	9d01      	ldr	r5, [sp, #4]
   11fe6:	2d00      	cmp	r5, #0
   11fe8:	d0ed      	beq.n	11fc6 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11fea:	4628      	mov	r0, r5
   11fec:	f001 fb1c 	bl	13628 <hci_get_class>
   11ff0:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   11ff2:	9901      	ldr	r1, [sp, #4]
   11ff4:	480b      	ldr	r0, [pc, #44]	; (12024 <hci_driver_send+0xa8>)
   11ff6:	f015 fb94 	bl	27722 <k_queue_append>
	if (!err) {
   11ffa:	e7e4      	b.n	11fc6 <hci_driver_send+0x4a>
   11ffc:	4b06      	ldr	r3, [pc, #24]	; (12018 <hci_driver_send+0x9c>)
   11ffe:	4907      	ldr	r1, [pc, #28]	; (1201c <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   12000:	4809      	ldr	r0, [pc, #36]	; (12028 <hci_driver_send+0xac>)
   12002:	1ac9      	subs	r1, r1, r3
   12004:	08c9      	lsrs	r1, r1, #3
   12006:	0189      	lsls	r1, r1, #6
   12008:	f041 0101 	orr.w	r1, r1, #1
   1200c:	f010 fdfa 	bl	22c04 <log_0>
		return -EINVAL;
   12010:	f06f 0515 	mvn.w	r5, #21
   12014:	e7c9      	b.n	11faa <hci_driver_send+0x2e>
   12016:	bf00      	nop
   12018:	000281b4 	.word	0x000281b4
   1201c:	00028204 	.word	0x00028204
   12020:	00028e24 	.word	0x00028e24
   12024:	2000a134 	.word	0x2000a134
   12028:	00028e10 	.word	0x00028e10

0001202c <recv_thread>:
{
   1202c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1202e:	4d37      	ldr	r5, [pc, #220]	; (1210c <recv_thread+0xe0>)
		LL_ASSERT(0);
   12030:	4f37      	ldr	r7, [pc, #220]	; (12110 <recv_thread+0xe4>)
   12032:	4e38      	ldr	r6, [pc, #224]	; (12114 <recv_thread+0xe8>)
{
   12034:	b083      	sub	sp, #12
   12036:	e015      	b.n	12064 <recv_thread+0x38>
	switch (class) {
   12038:	2b00      	cmp	r3, #0
   1203a:	d13c      	bne.n	120b6 <recv_thread+0x8a>
		LL_ASSERT(0);
   1203c:	4836      	ldr	r0, [pc, #216]	; (12118 <recv_thread+0xec>)
   1203e:	23cf      	movs	r3, #207	; 0xcf
   12040:	463a      	mov	r2, r7
   12042:	4631      	mov	r1, r6
   12044:	f010 f948 	bl	222d8 <printk>
   12048:	4040      	eors	r0, r0
   1204a:	f380 8811 	msr	BASEPRI, r0
   1204e:	f04f 0003 	mov.w	r0, #3
   12052:	df02      	svc	2
	node_rx->hdr.next = NULL;
   12054:	9b01      	ldr	r3, [sp, #4]
   12056:	2200      	movs	r2, #0
   12058:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1205a:	a801      	add	r0, sp, #4
   1205c:	f002 f94c 	bl	142f8 <ll_rx_mem_release>
	z_impl_k_yield();
   12060:	f00e fd32 	bl	20ac8 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   12064:	f04f 32ff 	mov.w	r2, #4294967295
   12068:	f04f 33ff 	mov.w	r3, #4294967295
   1206c:	4628      	mov	r0, r5
   1206e:	f00e fa17 	bl	204a0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   12072:	2800      	cmp	r0, #0
   12074:	d0f4      	beq.n	12060 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   12076:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   12078:	9001      	str	r0, [sp, #4]
	switch (class) {
   1207a:	2b04      	cmp	r3, #4
   1207c:	d9dc      	bls.n	12038 <recv_thread+0xc>
   1207e:	2b05      	cmp	r3, #5
   12080:	d1dc      	bne.n	1203c <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12082:	f04f 32ff 	mov.w	r2, #4294967295
   12086:	f04f 33ff 	mov.w	r3, #4294967295
   1208a:	2003      	movs	r0, #3
   1208c:	f7f6 fbc6 	bl	881c <bt_buf_get_rx>
   12090:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   12092:	4621      	mov	r1, r4
   12094:	9801      	ldr	r0, [sp, #4]
   12096:	f000 ff8b 	bl	12fb0 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1209a:	9b01      	ldr	r3, [sp, #4]
   1209c:	2200      	movs	r2, #0
   1209e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   120a0:	a801      	add	r0, sp, #4
   120a2:	f002 f929 	bl	142f8 <ll_rx_mem_release>
		if (buf) {
   120a6:	2c00      	cmp	r4, #0
   120a8:	d0da      	beq.n	12060 <recv_thread+0x34>
			if (buf->len) {
   120aa:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   120ac:	4620      	mov	r0, r4
			if (buf->len) {
   120ae:	b1db      	cbz	r3, 120e8 <recv_thread+0xbc>
				bt_recv(buf);
   120b0:	f7f8 f922 	bl	a2f8 <bt_recv>
   120b4:	e7d4      	b.n	12060 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   120b6:	2b02      	cmp	r3, #2
   120b8:	d019      	beq.n	120ee <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   120ba:	f04f 32ff 	mov.w	r2, #4294967295
   120be:	f04f 33ff 	mov.w	r3, #4294967295
   120c2:	2001      	movs	r0, #1
   120c4:	f7f6 fbaa 	bl	881c <bt_buf_get_rx>
   120c8:	4604      	mov	r4, r0
		if (buf) {
   120ca:	b1cc      	cbz	r4, 12100 <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
   120cc:	9801      	ldr	r0, [sp, #4]
   120ce:	4621      	mov	r1, r4
   120d0:	f000 ffa8 	bl	13024 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   120d4:	9b01      	ldr	r3, [sp, #4]
   120d6:	2200      	movs	r2, #0
   120d8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   120da:	a801      	add	r0, sp, #4
   120dc:	f002 f90c 	bl	142f8 <ll_rx_mem_release>
			if (buf->len) {
   120e0:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   120e2:	4620      	mov	r0, r4
			if (buf->len) {
   120e4:	2b00      	cmp	r3, #0
   120e6:	d1e3      	bne.n	120b0 <recv_thread+0x84>
				net_buf_unref(buf);
   120e8:	f00b fbc4 	bl	1d874 <net_buf_unref>
   120ec:	e7b8      	b.n	12060 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   120ee:	2200      	movs	r2, #0
   120f0:	2300      	movs	r3, #0
   120f2:	2101      	movs	r1, #1
   120f4:	2000      	movs	r0, #0
   120f6:	f7f6 fbc7 	bl	8888 <bt_buf_get_evt>
   120fa:	4604      	mov	r4, r0
		if (buf) {
   120fc:	2c00      	cmp	r4, #0
   120fe:	d1e5      	bne.n	120cc <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
   12100:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   12102:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   12104:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12106:	f002 f8f7 	bl	142f8 <ll_rx_mem_release>
		if (buf) {
   1210a:	e7a9      	b.n	12060 <recv_thread+0x34>
   1210c:	2000a134 	.word	0x2000a134
   12110:	00028e38 	.word	0x00028e38
   12114:	00028e78 	.word	0x00028e78
   12118:	00028de0 	.word	0x00028de0

0001211c <prio_recv_thread>:
{
   1211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   12120:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 121d4 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
   12124:	4f2c      	ldr	r7, [pc, #176]	; (121d8 <prio_recv_thread+0xbc>)
{
   12126:	b082      	sub	sp, #8
   12128:	e00c      	b.n	12144 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1212a:	f7f6 fbad 	bl	8888 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1212e:	4622      	mov	r2, r4
   12130:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12134:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   12136:	f001 fa5f 	bl	135f8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1213a:	4620      	mov	r0, r4
   1213c:	f7f8 f980 	bl	a440 <bt_recv_prio>
	z_impl_k_yield();
   12140:	f00e fcc2 	bl	20ac8 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12144:	f10d 0102 	add.w	r1, sp, #2
   12148:	a801      	add	r0, sp, #4
   1214a:	f001 ff21 	bl	13f90 <ll_rx_get>
   1214e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12150:	f04f 32ff 	mov.w	r2, #4294967295
   12154:	f04f 33ff 	mov.w	r3, #4294967295
   12158:	2100      	movs	r1, #0
   1215a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1215c:	2c00      	cmp	r4, #0
   1215e:	d1e4      	bne.n	1212a <prio_recv_thread+0xe>
		if (node_rx) {
   12160:	9b01      	ldr	r3, [sp, #4]
   12162:	b193      	cbz	r3, 1218a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   12164:	f001 fffa 	bl	1415c <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12168:	9e01      	ldr	r6, [sp, #4]
   1216a:	4630      	mov	r0, r6
   1216c:	f001 fa5c 	bl	13628 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   12170:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12172:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   12174:	796b      	ldrb	r3, [r5, #5]
   12176:	2b03      	cmp	r3, #3
   12178:	d102      	bne.n	12180 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1217a:	792b      	ldrb	r3, [r5, #4]
   1217c:	2b14      	cmp	r3, #20
   1217e:	d00c      	beq.n	1219a <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   12180:	4629      	mov	r1, r5
   12182:	4638      	mov	r0, r7
   12184:	f015 facd 	bl	27722 <k_queue_append>
			continue;
   12188:	e7dc      	b.n	12144 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   1218a:	f04f 32ff 	mov.w	r2, #4294967295
   1218e:	f04f 33ff 	mov.w	r3, #4294967295
   12192:	4640      	mov	r0, r8
   12194:	f00e fd66 	bl	20c64 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12198:	e7d4      	b.n	12144 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1219a:	f04f 33ff 	mov.w	r3, #4294967295
   1219e:	4621      	mov	r1, r4
   121a0:	f04f 32ff 	mov.w	r2, #4294967295
   121a4:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   121a6:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   121a8:	f7f6 fb6e 	bl	8888 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   121ac:	4631      	mov	r1, r6
   121ae:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   121b0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   121b2:	f105 001c 	add.w	r0, r5, #28
   121b6:	f000 fed3 	bl	12f60 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   121ba:	4630      	mov	r0, r6
   121bc:	f000 fef0 	bl	12fa0 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   121c0:	4620      	mov	r0, r4
			if (buf) {
   121c2:	b124      	cbz	r4, 121ce <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   121c4:	f7f8 f93c 	bl	a440 <bt_recv_prio>
					net_buf_unref(buf);
   121c8:	4620      	mov	r0, r4
   121ca:	f00b fb53 	bl	1d874 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   121ce:	9d01      	ldr	r5, [sp, #4]
   121d0:	e7d6      	b.n	12180 <prio_recv_thread+0x64>
   121d2:	bf00      	nop
   121d4:	2000a104 	.word	0x2000a104
   121d8:	2000a134 	.word	0x2000a134

000121dc <hci_driver_open>:
{
   121dc:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   121de:	4821      	ldr	r0, [pc, #132]	; (12264 <hci_driver_open+0x88>)
{
   121e0:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   121e2:	f001 fdd1 	bl	13d88 <ll_init>
	if (err) {
   121e6:	4604      	mov	r4, r0
   121e8:	bb70      	cbnz	r0, 12248 <hci_driver_open+0x6c>
	hci_init(NULL);
   121ea:	f001 fa33 	bl	13654 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   121ee:	2600      	movs	r6, #0
   121f0:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   121f2:	f06f 0209 	mvn.w	r2, #9
   121f6:	e9cd 2403 	strd	r2, r4, [sp, #12]
   121fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
   121fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12202:	4b19      	ldr	r3, [pc, #100]	; (12268 <hci_driver_open+0x8c>)
   12204:	4919      	ldr	r1, [pc, #100]	; (1226c <hci_driver_open+0x90>)
   12206:	9400      	str	r4, [sp, #0]
   12208:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1220c:	4818      	ldr	r0, [pc, #96]	; (12270 <hci_driver_open+0x94>)
   1220e:	f00e fd9b 	bl	20d48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12212:	4918      	ldr	r1, [pc, #96]	; (12274 <hci_driver_open+0x98>)
   12214:	4816      	ldr	r0, [pc, #88]	; (12270 <hci_driver_open+0x94>)
   12216:	f015 fbdc 	bl	279d2 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1221a:	f06f 0207 	mvn.w	r2, #7
   1221e:	e9cd 2403 	strd	r2, r4, [sp, #12]
   12222:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12226:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1222a:	4b13      	ldr	r3, [pc, #76]	; (12278 <hci_driver_open+0x9c>)
   1222c:	4913      	ldr	r1, [pc, #76]	; (1227c <hci_driver_open+0xa0>)
   1222e:	9400      	str	r4, [sp, #0]
   12230:	f640 0298 	movw	r2, #2200	; 0x898
   12234:	4812      	ldr	r0, [pc, #72]	; (12280 <hci_driver_open+0xa4>)
   12236:	f00e fd87 	bl	20d48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1223a:	4912      	ldr	r1, [pc, #72]	; (12284 <hci_driver_open+0xa8>)
   1223c:	4810      	ldr	r0, [pc, #64]	; (12280 <hci_driver_open+0xa4>)
   1223e:	f015 fbc8 	bl	279d2 <z_impl_k_thread_name_set>
}
   12242:	4620      	mov	r0, r4
   12244:	b008      	add	sp, #32
   12246:	bdd0      	pop	{r4, r6, r7, pc}
   12248:	4b0f      	ldr	r3, [pc, #60]	; (12288 <hci_driver_open+0xac>)
   1224a:	4a10      	ldr	r2, [pc, #64]	; (1228c <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
   1224c:	4810      	ldr	r0, [pc, #64]	; (12290 <hci_driver_open+0xb4>)
   1224e:	1ad2      	subs	r2, r2, r3
   12250:	08d2      	lsrs	r2, r2, #3
   12252:	0192      	lsls	r2, r2, #6
   12254:	f042 0201 	orr.w	r2, r2, #1
   12258:	4621      	mov	r1, r4
   1225a:	f010 fce0 	bl	22c1e <log_1>
}
   1225e:	4620      	mov	r0, r4
   12260:	b008      	add	sp, #32
   12262:	bdd0      	pop	{r4, r6, r7, pc}
   12264:	2000a104 	.word	0x2000a104
   12268:	0001211d 	.word	0x0001211d
   1226c:	20011240 	.word	0x20011240
   12270:	2000ae90 	.word	0x2000ae90
   12274:	00028e9c 	.word	0x00028e9c
   12278:	0001202d 	.word	0x0001202d
   1227c:	20011420 	.word	0x20011420
   12280:	2000af18 	.word	0x2000af18
   12284:	00028ea8 	.word	0x00028ea8
   12288:	000281b4 	.word	0x000281b4
   1228c:	00028204 	.word	0x00028204
   12290:	00028e7c 	.word	0x00028e7c

00012294 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   12294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12296:	4c19      	ldr	r4, [pc, #100]	; (122fc <le_remote_feat_complete+0x68>)
   12298:	6864      	ldr	r4, [r4, #4]
   1229a:	00a4      	lsls	r4, r4, #2
   1229c:	d504      	bpl.n	122a8 <le_remote_feat_complete+0x14>
   1229e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   122a0:	4a17      	ldr	r2, [pc, #92]	; (12300 <le_remote_feat_complete+0x6c>)
   122a2:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   122a4:	0712      	lsls	r2, r2, #28
   122a6:	d400      	bmi.n	122aa <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   122a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122aa:	f103 0408 	add.w	r4, r3, #8
   122ae:	4607      	mov	r7, r0
   122b0:	460e      	mov	r6, r1
   122b2:	4620      	mov	r0, r4
   122b4:	2102      	movs	r1, #2
   122b6:	f014 fd39 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   122ba:	233e      	movs	r3, #62	; 0x3e
   122bc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   122be:	230c      	movs	r3, #12
   122c0:	7043      	strb	r3, [r0, #1]
   122c2:	2101      	movs	r1, #1
   122c4:	4620      	mov	r0, r4
   122c6:	f014 fd31 	bl	26d2c <net_buf_simple_add>
   122ca:	4603      	mov	r3, r0
	me->subevent = subevt;
   122cc:	2204      	movs	r2, #4
   122ce:	701a      	strb	r2, [r3, #0]
   122d0:	4620      	mov	r0, r4
   122d2:	210b      	movs	r1, #11
   122d4:	f014 fd2a 	bl	26d2c <net_buf_simple_add>
		memcpy(&sep->features[0],
   122d8:	2208      	movs	r2, #8
	sep->status = status;
   122da:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   122dc:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   122e0:	b92f      	cbnz	r7, 122ee <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   122e2:	1d31      	adds	r1, r6, #4
   122e4:	3003      	adds	r0, #3
}
   122e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   122ea:	f012 bcb1 	b.w	24c50 <memcpy>
}
   122ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   122f2:	2100      	movs	r1, #0
   122f4:	3003      	adds	r0, #3
   122f6:	f012 bcd6 	b.w	24ca6 <memset>
   122fa:	bf00      	nop
   122fc:	200001a8 	.word	0x200001a8
   12300:	200001b0 	.word	0x200001b0

00012304 <hci_vendor_cmd_handle_common>:
{
   12304:	b5f0      	push	{r4, r5, r6, r7, lr}
   12306:	3801      	subs	r0, #1
   12308:	b087      	sub	sp, #28
   1230a:	4615      	mov	r5, r2
   1230c:	2809      	cmp	r0, #9
   1230e:	d806      	bhi.n	1231e <hci_vendor_cmd_handle_common+0x1a>
   12310:	e8df f000 	tbb	[pc, r0]
   12314:	05432609 	.word	0x05432609
   12318:	6b055705 	.word	0x6b055705
   1231c:	9f8a      	.short	0x9f8a
	return 0;
   1231e:	f06f 0015 	mvn.w	r0, #21
}
   12322:	b007      	add	sp, #28
   12324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12326:	4b55      	ldr	r3, [pc, #340]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
   12328:	210d      	movs	r1, #13
   1232a:	8818      	ldrh	r0, [r3, #0]
   1232c:	f012 ffd3 	bl	252d6 <bt_hci_cmd_complete_create>
   12330:	210d      	movs	r1, #13
   12332:	6028      	str	r0, [r5, #0]
   12334:	3008      	adds	r0, #8
   12336:	f014 fcf9 	bl	26d2c <net_buf_simple_add>
   1233a:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1233c:	2202      	movs	r2, #2
	rp->status = 0x00;
   1233e:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12340:	2105      	movs	r1, #5
	rp->status = 0x00;
   12342:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12344:	705a      	strb	r2, [r3, #1]
   12346:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12348:	70da      	strb	r2, [r3, #3]
   1234a:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   1234c:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1234e:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12350:	71d9      	strb	r1, [r3, #7]
   12352:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   12354:	7258      	strb	r0, [r3, #9]
   12356:	7298      	strb	r0, [r3, #10]
   12358:	72d8      	strb	r0, [r3, #11]
   1235a:	7318      	strb	r0, [r3, #12]
}
   1235c:	b007      	add	sp, #28
   1235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12360:	4b46      	ldr	r3, [pc, #280]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
   12362:	2141      	movs	r1, #65	; 0x41
   12364:	8818      	ldrh	r0, [r3, #0]
   12366:	f012 ffb6 	bl	252d6 <bt_hci_cmd_complete_create>
   1236a:	2141      	movs	r1, #65	; 0x41
   1236c:	6028      	str	r0, [r5, #0]
   1236e:	3008      	adds	r0, #8
   12370:	f014 fcdc 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12374:	2400      	movs	r4, #0
   12376:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12378:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1237a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1237e:	4621      	mov	r1, r4
   12380:	f012 fc91 	bl	24ca6 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   12384:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12386:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   12388:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1238c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   12390:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   12392:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12394:	70ab      	strb	r3, [r5, #2]
}
   12396:	b007      	add	sp, #28
   12398:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1239a:	4b38      	ldr	r3, [pc, #224]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
   1239c:	2109      	movs	r1, #9
   1239e:	8818      	ldrh	r0, [r3, #0]
   123a0:	f012 ff99 	bl	252d6 <bt_hci_cmd_complete_create>
   123a4:	2109      	movs	r1, #9
   123a6:	6028      	str	r0, [r5, #0]
   123a8:	3008      	adds	r0, #8
   123aa:	f014 fcbf 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   123ae:	2400      	movs	r4, #0
   123b0:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   123b4:	2208      	movs	r2, #8
   123b6:	4621      	mov	r1, r4
   123b8:	f012 fc75 	bl	24ca6 <memset>
	return 0;
   123bc:	4620      	mov	r0, r4
}
   123be:	b007      	add	sp, #28
   123c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   123c2:	6889      	ldr	r1, [r1, #8]
   123c4:	2000      	movs	r0, #0
   123c6:	f7ff fd9f 	bl	11f08 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   123ca:	4b2c      	ldr	r3, [pc, #176]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
   123cc:	2101      	movs	r1, #1
   123ce:	8818      	ldrh	r0, [r3, #0]
   123d0:	f012 ff81 	bl	252d6 <bt_hci_cmd_complete_create>
   123d4:	2101      	movs	r1, #1
   123d6:	4604      	mov	r4, r0
   123d8:	3008      	adds	r0, #8
   123da:	f014 fca7 	bl	26d2c <net_buf_simple_add>
   123de:	4603      	mov	r3, r0
	ccst->status = status;
   123e0:	2000      	movs	r0, #0
   123e2:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   123e4:	602c      	str	r4, [r5, #0]
}
   123e6:	b007      	add	sp, #28
   123e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   123ea:	4e25      	ldr	r6, [pc, #148]	; (12480 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   123ec:	4f23      	ldr	r7, [pc, #140]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   123ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   123f0:	46ec      	mov	ip, sp
   123f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   123f6:	e896 0003 	ldmia.w	r6, {r0, r1}
   123fa:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   123fe:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   12400:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12404:	2116      	movs	r1, #22
   12406:	f012 ff66 	bl	252d6 <bt_hci_cmd_complete_create>
   1240a:	2116      	movs	r1, #22
   1240c:	6028      	str	r0, [r5, #0]
   1240e:	3008      	adds	r0, #8
   12410:	f014 fc8c 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12414:	2400      	movs	r4, #0
   12416:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   1241a:	2215      	movs	r2, #21
   1241c:	4669      	mov	r1, sp
   1241e:	f012 fc17 	bl	24c50 <memcpy>
	return 0;
   12422:	4620      	mov	r0, r4
}
   12424:	b007      	add	sp, #28
   12426:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12428:	4b14      	ldr	r3, [pc, #80]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
   1242a:	2118      	movs	r1, #24
   1242c:	8818      	ldrh	r0, [r3, #0]
   1242e:	f012 ff52 	bl	252d6 <bt_hci_cmd_complete_create>
   12432:	2118      	movs	r1, #24
   12434:	6028      	str	r0, [r5, #0]
   12436:	3008      	adds	r0, #8
   12438:	f014 fc78 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   1243c:	2400      	movs	r4, #0
   1243e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12440:	2101      	movs	r1, #1
	rp->status = 0x00;
   12442:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12446:	f00b f89b 	bl	1d580 <hci_vendor_read_static_addr>
   1244a:	7068      	strb	r0, [r5, #1]
	return 0;
   1244c:	4620      	mov	r0, r4
}
   1244e:	b007      	add	sp, #28
   12450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12452:	4b0a      	ldr	r3, [pc, #40]	; (1247c <hci_vendor_cmd_handle_common+0x178>)
   12454:	2121      	movs	r1, #33	; 0x21
   12456:	8818      	ldrh	r0, [r3, #0]
   12458:	f012 ff3d 	bl	252d6 <bt_hci_cmd_complete_create>
   1245c:	2121      	movs	r1, #33	; 0x21
   1245e:	6028      	str	r0, [r5, #0]
   12460:	3008      	adds	r0, #8
   12462:	f014 fc63 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12466:	4601      	mov	r1, r0
   12468:	2400      	movs	r4, #0
   1246a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   1246e:	3001      	adds	r0, #1
   12470:	f00b f8fa 	bl	1d668 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   12474:	4620      	mov	r0, r4
}
   12476:	b007      	add	sp, #28
   12478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1247a:	bf00      	nop
   1247c:	2000f588 	.word	0x2000f588
   12480:	00028ee4 	.word	0x00028ee4

00012484 <hci_cmd_handle>:
{
   12484:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12486:	8983      	ldrh	r3, [r0, #12]
{
   12488:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   1248a:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   1248c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1248e:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   12490:	f240 811c 	bls.w	126cc <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
   12494:	4605      	mov	r5, r0
   12496:	2103      	movs	r1, #3
   12498:	3008      	adds	r0, #8
   1249a:	f014 fc6e 	bl	26d7a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1249e:	89aa      	ldrh	r2, [r5, #12]
   124a0:	7883      	ldrb	r3, [r0, #2]
   124a2:	429a      	cmp	r2, r3
   124a4:	f0c0 8150 	bcc.w	12748 <hci_cmd_handle+0x2c4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   124a8:	8802      	ldrh	r2, [r0, #0]
   124aa:	4ebc      	ldr	r6, [pc, #752]	; (1279c <hci_cmd_handle+0x318>)
	switch (BT_OGF(_opcode)) {
   124ac:	f3c2 2385 	ubfx	r3, r2, #10, #6
   124b0:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   124b2:	8032      	strh	r2, [r6, #0]
   124b4:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   124b6:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   124ba:	d809      	bhi.n	124d0 <hci_cmd_handle+0x4c>
   124bc:	b1a3      	cbz	r3, 124e8 <hci_cmd_handle+0x64>
   124be:	3b01      	subs	r3, #1
   124c0:	2b07      	cmp	r3, #7
   124c2:	d811      	bhi.n	124e8 <hci_cmd_handle+0x64>
   124c4:	e8df f003 	tbb	[pc, r3]
   124c8:	e9c81017 	.word	0xe9c81017
   124cc:	26101010 	.word	0x26101010
   124d0:	2b3f      	cmp	r3, #63	; 0x3f
   124d2:	d109      	bne.n	124e8 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   124d4:	4629      	mov	r1, r5
   124d6:	aa07      	add	r2, sp, #28
   124d8:	4620      	mov	r0, r4
   124da:	f7ff ff13 	bl	12304 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   124de:	3016      	adds	r0, #22
	return evt;
   124e0:	bf18      	it	ne
   124e2:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
   124e4:	d104      	bne.n	124f0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   124e6:	8830      	ldrh	r0, [r6, #0]
   124e8:	2101      	movs	r1, #1
   124ea:	f012 ff06 	bl	252fa <bt_hci_cmd_status_create>
   124ee:	4605      	mov	r5, r0
}
   124f0:	4628      	mov	r0, r5
   124f2:	b00d      	add	sp, #52	; 0x34
   124f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   124f6:	2c06      	cmp	r4, #6
   124f8:	f000 8437 	beq.w	12d6a <hci_cmd_handle+0x8e6>
   124fc:	2c1d      	cmp	r4, #29
   124fe:	d1f3      	bne.n	124e8 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   12500:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   12502:	8818      	ldrh	r0, [r3, #0]
   12504:	f003 fd5e 	bl	15fc4 <ll_version_ind_send>
   12508:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1250a:	8830      	ldrh	r0, [r6, #0]
   1250c:	f012 fef5 	bl	252fa <bt_hci_cmd_status_create>
   12510:	4605      	mov	r5, r0
}
   12512:	e7ed      	b.n	124f0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   12514:	1e62      	subs	r2, r4, #1
   12516:	2a4d      	cmp	r2, #77	; 0x4d
   12518:	d8e6      	bhi.n	124e8 <hci_cmd_handle+0x64>
   1251a:	a301      	add	r3, pc, #4	; (adr r3, 12520 <hci_cmd_handle+0x9c>)
   1251c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   12520:	00012aa3 	.word	0x00012aa3
   12524:	00012b05 	.word	0x00012b05
   12528:	00012ad5 	.word	0x00012ad5
   1252c:	000124e9 	.word	0x000124e9
   12530:	00012acb 	.word	0x00012acb
   12534:	00012aaf 	.word	0x00012aaf
   12538:	00012b83 	.word	0x00012b83
   1253c:	00012b77 	.word	0x00012b77
   12540:	00012b6b 	.word	0x00012b6b
   12544:	00012b61 	.word	0x00012b61
   12548:	000124e9 	.word	0x000124e9
   1254c:	000124e9 	.word	0x000124e9
   12550:	000124e9 	.word	0x000124e9
   12554:	000124e9 	.word	0x000124e9
   12558:	00012b3f 	.word	0x00012b3f
   1255c:	00012b39 	.word	0x00012b39
   12560:	00012b31 	.word	0x00012b31
   12564:	00012b29 	.word	0x00012b29
   12568:	00012d43 	.word	0x00012d43
   1256c:	000124e9 	.word	0x000124e9
   12570:	00012d17 	.word	0x00012d17
   12574:	00012d01 	.word	0x00012d01
   12578:	00012ccb 	.word	0x00012ccb
   1257c:	00012ca9 	.word	0x00012ca9
   12580:	000124e9 	.word	0x000124e9
   12584:	00012c9f 	.word	0x00012c9f
   12588:	00012c8f 	.word	0x00012c8f
   1258c:	00012c59 	.word	0x00012c59
   12590:	000124e9 	.word	0x000124e9
   12594:	000124e9 	.word	0x000124e9
   12598:	000124e9 	.word	0x000124e9
   1259c:	00012c43 	.word	0x00012c43
   125a0:	00012c0d 	.word	0x00012c0d
   125a4:	00012bfd 	.word	0x00012bfd
   125a8:	00012bc7 	.word	0x00012bc7
   125ac:	00012bbb 	.word	0x00012bbb
   125b0:	000124e9 	.word	0x000124e9
   125b4:	000124e9 	.word	0x000124e9
   125b8:	00012bad 	.word	0x00012bad
   125bc:	00012ba5 	.word	0x00012ba5
   125c0:	00012b9f 	.word	0x00012b9f
   125c4:	00012a27 	.word	0x00012a27
   125c8:	000129f9 	.word	0x000129f9
   125cc:	000129cb 	.word	0x000129cb
   125d0:	000129c1 	.word	0x000129c1
   125d4:	00012a95 	.word	0x00012a95
   125d8:	00012a49 	.word	0x00012a49
   125dc:	00012967 	.word	0x00012967
   125e0:	00012949 	.word	0x00012949
   125e4:	000128ed 	.word	0x000128ed
   125e8:	000124e9 	.word	0x000124e9
   125ec:	000124e9 	.word	0x000124e9
   125f0:	000124e9 	.word	0x000124e9
   125f4:	000124e9 	.word	0x000124e9
   125f8:	000124e9 	.word	0x000124e9
   125fc:	000124e9 	.word	0x000124e9
   12600:	000124e9 	.word	0x000124e9
   12604:	000124e9 	.word	0x000124e9
   12608:	000124e9 	.word	0x000124e9
   1260c:	000124e9 	.word	0x000124e9
   12610:	000124e9 	.word	0x000124e9
   12614:	000124e9 	.word	0x000124e9
   12618:	000124e9 	.word	0x000124e9
   1261c:	000124e9 	.word	0x000124e9
   12620:	000124e9 	.word	0x000124e9
   12624:	000124e9 	.word	0x000124e9
   12628:	000124e9 	.word	0x000124e9
   1262c:	000124e9 	.word	0x000124e9
   12630:	000124e9 	.word	0x000124e9
   12634:	000124e9 	.word	0x000124e9
   12638:	000124e9 	.word	0x000124e9
   1263c:	000124e9 	.word	0x000124e9
   12640:	000124e9 	.word	0x000124e9
   12644:	000124e9 	.word	0x000124e9
   12648:	000128c9 	.word	0x000128c9
   1264c:	000124e9 	.word	0x000124e9
   12650:	000124e9 	.word	0x000124e9
   12654:	000128a7 	.word	0x000128a7
	switch (ocf) {
   12658:	2c63      	cmp	r4, #99	; 0x63
   1265a:	f000 8392 	beq.w	12d82 <hci_cmd_handle+0x8fe>
   1265e:	d857      	bhi.n	12710 <hci_cmd_handle+0x28c>
   12660:	2c03      	cmp	r4, #3
   12662:	f000 8395 	beq.w	12d90 <hci_cmd_handle+0x90c>
   12666:	2c2d      	cmp	r4, #45	; 0x2d
   12668:	d13e      	bne.n	126e8 <hci_cmd_handle+0x264>
		read_tx_power_level(cmd, evt);
   1266a:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1266c:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1266e:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   12670:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12672:	f012 fe30 	bl	252d6 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   12676:	2104      	movs	r1, #4
   12678:	9007      	str	r0, [sp, #28]
   1267a:	3008      	adds	r0, #8
   1267c:	f014 fb56 	bl	26d2c <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   12680:	b2b5      	uxth	r5, r6
   12682:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   12684:	1cc3      	adds	r3, r0, #3
   12686:	4629      	mov	r1, r5
   12688:	463a      	mov	r2, r7
   1268a:	2002      	movs	r0, #2
   1268c:	f7ff fc5a 	bl	11f44 <ll_tx_pwr_lvl_get>
	rp->status = status;
   12690:	7020      	strb	r0, [r4, #0]
	return evt;
   12692:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   12694:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   12698:	e72a      	b.n	124f0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1269a:	1e62      	subs	r2, r4, #1
   1269c:	2a08      	cmp	r2, #8
   1269e:	f63f af23 	bhi.w	124e8 <hci_cmd_handle+0x64>
   126a2:	a301      	add	r3, pc, #4	; (adr r3, 126a8 <hci_cmd_handle+0x224>)
   126a4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   126a8:	00012871 	.word	0x00012871
   126ac:	000127b5 	.word	0x000127b5
   126b0:	00012773 	.word	0x00012773
   126b4:	000124e9 	.word	0x000124e9
   126b8:	000124e9 	.word	0x000124e9
   126bc:	000124e9 	.word	0x000124e9
   126c0:	000124e9 	.word	0x000124e9
   126c4:	000124e9 	.word	0x000124e9
   126c8:	00012751 	.word	0x00012751
   126cc:	4934      	ldr	r1, [pc, #208]	; (127a0 <hci_cmd_handle+0x31c>)
   126ce:	4b35      	ldr	r3, [pc, #212]	; (127a4 <hci_cmd_handle+0x320>)
		BT_ERR("No HCI Command header");
   126d0:	4835      	ldr	r0, [pc, #212]	; (127a8 <hci_cmd_handle+0x324>)
   126d2:	1ac9      	subs	r1, r1, r3
   126d4:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   126d6:	0189      	lsls	r1, r1, #6
   126d8:	f041 0101 	orr.w	r1, r1, #1
   126dc:	f010 fa92 	bl	22c04 <log_0>
		return NULL;
   126e0:	4625      	mov	r5, r4
}
   126e2:	4628      	mov	r0, r5
   126e4:	b00d      	add	sp, #52	; 0x34
   126e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   126e8:	2c01      	cmp	r4, #1
   126ea:	f47f aefd 	bne.w	124e8 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   126ee:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   126f0:	4b2e      	ldr	r3, [pc, #184]	; (127ac <hci_cmd_handle+0x328>)
   126f2:	6811      	ldr	r1, [r2, #0]
   126f4:	6852      	ldr	r2, [r2, #4]
   126f6:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   126f8:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   126fa:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   126fc:	f012 fdeb 	bl	252d6 <bt_hci_cmd_complete_create>
   12700:	2101      	movs	r1, #1
   12702:	4605      	mov	r5, r0
   12704:	3008      	adds	r0, #8
   12706:	f014 fb11 	bl	26d2c <net_buf_simple_add>
	ccst->status = status;
   1270a:	2300      	movs	r3, #0
   1270c:	7003      	strb	r3, [r0, #0]
}
   1270e:	e6ef      	b.n	124f0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   12710:	2c7b      	cmp	r4, #123	; 0x7b
   12712:	f000 835f 	beq.w	12dd4 <hci_cmd_handle+0x950>
   12716:	2c7c      	cmp	r4, #124	; 0x7c
   12718:	f47f aee6 	bne.w	124e8 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
   1271c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1271e:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   12720:	8859      	ldrh	r1, [r3, #2]
   12722:	b2b8      	uxth	r0, r7
   12724:	f003 fd96 	bl	16254 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12728:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1272a:	2103      	movs	r1, #3
   1272c:	8830      	ldrh	r0, [r6, #0]
   1272e:	f012 fdd2 	bl	252d6 <bt_hci_cmd_complete_create>
   12732:	2103      	movs	r1, #3
   12734:	4603      	mov	r3, r0
   12736:	3008      	adds	r0, #8
   12738:	9307      	str	r3, [sp, #28]
   1273a:	f014 faf7 	bl	26d2c <net_buf_simple_add>
	rp->status = status;
   1273e:	7004      	strb	r4, [r0, #0]
	return evt;
   12740:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   12742:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   12746:	e6d3      	b.n	124f0 <hci_cmd_handle+0x6c>
   12748:	4915      	ldr	r1, [pc, #84]	; (127a0 <hci_cmd_handle+0x31c>)
   1274a:	4b16      	ldr	r3, [pc, #88]	; (127a4 <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
   1274c:	4818      	ldr	r0, [pc, #96]	; (127b0 <hci_cmd_handle+0x32c>)
   1274e:	e7c0      	b.n	126d2 <hci_cmd_handle+0x24e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12750:	2107      	movs	r1, #7
   12752:	f012 fdc0 	bl	252d6 <bt_hci_cmd_complete_create>
   12756:	2107      	movs	r1, #7
   12758:	4603      	mov	r3, r0
   1275a:	3008      	adds	r0, #8
   1275c:	9307      	str	r3, [sp, #28]
   1275e:	f014 fae5 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12762:	4601      	mov	r1, r0
   12764:	2000      	movs	r0, #0
   12766:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1276a:	f7ff fbaf 	bl	11ecc <ll_addr_get>
	return evt;
   1276e:	9d07      	ldr	r5, [sp, #28]
   12770:	e6be      	b.n	124f0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12772:	2109      	movs	r1, #9
   12774:	f012 fdaf 	bl	252d6 <bt_hci_cmd_complete_create>
   12778:	2109      	movs	r1, #9
   1277a:	4603      	mov	r3, r0
   1277c:	3008      	adds	r0, #8
   1277e:	9307      	str	r3, [sp, #28]
   12780:	f014 fad4 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12784:	2100      	movs	r1, #0
   12786:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12788:	2208      	movs	r2, #8
	rp->status = 0x00;
   1278a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1278e:	f012 fa8a 	bl	24ca6 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   12792:	2360      	movs	r3, #96	; 0x60
	return evt;
   12794:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   12796:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   12798:	e6aa      	b.n	124f0 <hci_cmd_handle+0x6c>
   1279a:	bf00      	nop
   1279c:	2000f588 	.word	0x2000f588
   127a0:	000281fc 	.word	0x000281fc
   127a4:	000281b4 	.word	0x000281b4
   127a8:	00028efc 	.word	0x00028efc
   127ac:	200001a8 	.word	0x200001a8
   127b0:	00028f14 	.word	0x00028f14
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   127b4:	2141      	movs	r1, #65	; 0x41
   127b6:	f012 fd8e 	bl	252d6 <bt_hci_cmd_complete_create>
   127ba:	2141      	movs	r1, #65	; 0x41
   127bc:	4603      	mov	r3, r0
   127be:	3008      	adds	r0, #8
   127c0:	9307      	str	r3, [sp, #28]
   127c2:	f014 fab3 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   127c6:	2100      	movs	r1, #0
   127c8:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   127ca:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   127cc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   127d0:	f012 fa69 	bl	24ca6 <memset>
	rp->commands[15] |= BIT(1);
   127d4:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   127d6:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   127d8:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   127da:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   127dc:	f043 0302 	orr.w	r3, r3, #2
   127e0:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   127e2:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   127e4:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   127e8:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   127ec:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   127f0:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   127f2:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   127f4:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   127f6:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   127f8:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   127fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   127fe:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   12802:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   12806:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   1280a:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   1280e:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   12810:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   12812:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   12814:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   12816:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   12818:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1281c:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1281e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   12822:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12826:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   1282a:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1282e:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   12832:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   12834:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   12836:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   1283a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1283e:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12840:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   12844:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12848:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1284c:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   12850:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   12854:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   12858:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1285c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12860:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   12864:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12868:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   1286c:	9d07      	ldr	r5, [sp, #28]
   1286e:	e63f      	b.n	124f0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12870:	2109      	movs	r1, #9
   12872:	f012 fd30 	bl	252d6 <bt_hci_cmd_complete_create>
   12876:	2109      	movs	r1, #9
   12878:	4603      	mov	r3, r0
   1287a:	3008      	adds	r0, #8
   1287c:	9307      	str	r3, [sp, #28]
   1287e:	f014 fa55 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12882:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   12884:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12886:	f04f 32ff 	mov.w	r2, #4294967295
	rp->status = 0x00;
   1288a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1288c:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1288e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   12892:	7083      	strb	r3, [r0, #2]
   12894:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12896:	2305      	movs	r3, #5
	return evt;
   12898:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
   1289a:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1289c:	7144      	strb	r4, [r0, #5]
   1289e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   128a0:	71c2      	strb	r2, [r0, #7]
   128a2:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   128a4:	e624      	b.n	124f0 <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
   128a6:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   128a8:	79c1      	ldrb	r1, [r0, #7]
   128aa:	f007 fd23 	bl	1a2f4 <ll_priv_mode_set>
   128ae:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   128b0:	2101      	movs	r1, #1
   128b2:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   128b4:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   128b6:	f012 fd0e 	bl	252d6 <bt_hci_cmd_complete_create>
   128ba:	2101      	movs	r1, #1
   128bc:	4605      	mov	r5, r0
   128be:	3008      	adds	r0, #8
   128c0:	f014 fa34 	bl	26d2c <net_buf_simple_add>
	ccst->status = status;
   128c4:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   128c6:	e613      	b.n	124f0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   128c8:	2103      	movs	r1, #3
   128ca:	f012 fd04 	bl	252d6 <bt_hci_cmd_complete_create>
   128ce:	2103      	movs	r1, #3
   128d0:	4603      	mov	r3, r0
   128d2:	3008      	adds	r0, #8
   128d4:	9307      	str	r3, [sp, #28]
   128d6:	f014 fa29 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   128da:	4601      	mov	r1, r0
   128dc:	2300      	movs	r3, #0
   128de:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   128e2:	3001      	adds	r0, #1
   128e4:	f7ff fb3e 	bl	11f64 <ll_tx_pwr_get>
	return evt;
   128e8:	9d07      	ldr	r5, [sp, #28]
   128ea:	e601      	b.n	124f0 <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
   128ec:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   128ee:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   128f0:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   128f2:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   128f4:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   128f8:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   128fa:	bf44      	itt	mi
   128fc:	f041 0103 	orrmi.w	r1, r1, #3
   12900:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12902:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   12906:	7913      	ldrb	r3, [r2, #4]
   12908:	bf1c      	itt	ne
   1290a:	f043 0303 	orrne.w	r3, r3, #3
   1290e:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   12910:	ea43 0201 	orr.w	r2, r3, r1
   12914:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   12918:	f040 827d 	bne.w	12e16 <hci_cmd_handle+0x992>
	if (!(cmd->tx_phys & 0x07) ||
   1291c:	074f      	lsls	r7, r1, #29
   1291e:	f000 8274 	beq.w	12e0a <hci_cmd_handle+0x986>
   12922:	075a      	lsls	r2, r3, #29
   12924:	f000 8271 	beq.w	12e0a <hci_cmd_handle+0x986>
	if (phy_opts & 0x03) {
   12928:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   1292c:	bf1c      	itt	ne
   1292e:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
   12932:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   12936:	4628      	mov	r0, r5
   12938:	f003 fc10 	bl	1615c <ll_phy_req_send>
   1293c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1293e:	8830      	ldrh	r0, [r6, #0]
   12940:	f012 fcdb 	bl	252fa <bt_hci_cmd_status_create>
   12944:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12946:	e5d3      	b.n	124f0 <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
   12948:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1294a:	781a      	ldrb	r2, [r3, #0]
   1294c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1294e:	bf4a      	itet	mi
   12950:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   12952:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   12954:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12956:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   12958:	bf4a      	itet	mi
   1295a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1295c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   1295e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   12960:	f003 fbf2 	bl	16148 <ll_phy_default_set>
   12964:	e7a3      	b.n	128ae <hci_cmd_handle+0x42a>
	handle = sys_le16_to_cpu(cmd->handle);
   12966:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12968:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   1296a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1296c:	f012 fcb3 	bl	252d6 <bt_hci_cmd_complete_create>
   12970:	2105      	movs	r1, #5
   12972:	4603      	mov	r3, r0
   12974:	3008      	adds	r0, #8
   12976:	9307      	str	r3, [sp, #28]
   12978:	f014 f9d8 	bl	26d2c <net_buf_simple_add>
   1297c:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1297e:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   12980:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   12982:	1ce1      	adds	r1, r4, #3
   12984:	f003 fbbe 	bl	16104 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   12988:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1298a:	7020      	strb	r0, [r4, #0]
   1298c:	2b00      	cmp	r3, #0
   1298e:	fa93 f2a3 	rbit	r2, r3
   12992:	7923      	ldrb	r3, [r4, #4]
   12994:	fab2 f282 	clz	r2, r2
   12998:	bf08      	it	eq
   1299a:	f04f 32ff 	moveq.w	r2, #4294967295
   1299e:	2b00      	cmp	r3, #0
   129a0:	fa93 f3a3 	rbit	r3, r3
   129a4:	fab3 f383 	clz	r3, r3
   129a8:	f102 0201 	add.w	r2, r2, #1
   129ac:	bf08      	it	eq
   129ae:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   129b2:	70e2      	strb	r2, [r4, #3]
   129b4:	3301      	adds	r3, #1
	return evt;
   129b6:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   129b8:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   129ba:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   129be:	e597      	b.n	124f0 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   129c0:	68ab      	ldr	r3, [r5, #8]
   129c2:	7818      	ldrb	r0, [r3, #0]
   129c4:	f007 fc76 	bl	1a2b4 <ll_rl_enable>
   129c8:	e771      	b.n	128ae <hci_cmd_handle+0x42a>
	memcpy(dst, src, sizeof(*dst));
   129ca:	2207      	movs	r2, #7
   129cc:	68a9      	ldr	r1, [r5, #8]
   129ce:	a808      	add	r0, sp, #32
   129d0:	f012 f93e 	bl	24c50 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   129d4:	2107      	movs	r1, #7
   129d6:	8830      	ldrh	r0, [r6, #0]
   129d8:	f012 fc7d 	bl	252d6 <bt_hci_cmd_complete_create>
   129dc:	2107      	movs	r1, #7
   129de:	4603      	mov	r3, r0
   129e0:	3008      	adds	r0, #8
   129e2:	9307      	str	r3, [sp, #28]
   129e4:	f014 f9a2 	bl	26d2c <net_buf_simple_add>
   129e8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   129ea:	1c41      	adds	r1, r0, #1
   129ec:	a808      	add	r0, sp, #32
   129ee:	f007 fc2f 	bl	1a250 <ll_rl_lrpa_get>
   129f2:	7020      	strb	r0, [r4, #0]
	return evt;
   129f4:	9d07      	ldr	r5, [sp, #28]
   129f6:	e57b      	b.n	124f0 <hci_cmd_handle+0x6c>
   129f8:	2207      	movs	r2, #7
   129fa:	68a9      	ldr	r1, [r5, #8]
   129fc:	a808      	add	r0, sp, #32
   129fe:	f012 f927 	bl	24c50 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a02:	2107      	movs	r1, #7
   12a04:	8830      	ldrh	r0, [r6, #0]
   12a06:	f012 fc66 	bl	252d6 <bt_hci_cmd_complete_create>
   12a0a:	2107      	movs	r1, #7
   12a0c:	4603      	mov	r3, r0
   12a0e:	3008      	adds	r0, #8
   12a10:	9307      	str	r3, [sp, #28]
   12a12:	f014 f98b 	bl	26d2c <net_buf_simple_add>
   12a16:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   12a18:	1c41      	adds	r1, r0, #1
   12a1a:	a808      	add	r0, sp, #32
   12a1c:	f007 fbde 	bl	1a1dc <ll_rl_crpa_get>
   12a20:	7020      	strb	r0, [r4, #0]
	return evt;
   12a22:	9d07      	ldr	r5, [sp, #28]
   12a24:	e564      	b.n	124f0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a26:	2102      	movs	r1, #2
   12a28:	f012 fc55 	bl	252d6 <bt_hci_cmd_complete_create>
   12a2c:	2102      	movs	r1, #2
   12a2e:	4603      	mov	r3, r0
   12a30:	3008      	adds	r0, #8
   12a32:	9307      	str	r3, [sp, #28]
   12a34:	f014 f97a 	bl	26d2c <net_buf_simple_add>
   12a38:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   12a3a:	f007 fa97 	bl	19f6c <ll_rl_size_get>
	rp->status = 0x00;
   12a3e:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   12a40:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   12a42:	7023      	strb	r3, [r4, #0]
	return evt;
   12a44:	9d07      	ldr	r5, [sp, #28]
   12a46:	e553      	b.n	124f0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a48:	2109      	movs	r1, #9
   12a4a:	f012 fc44 	bl	252d6 <bt_hci_cmd_complete_create>
   12a4e:	2109      	movs	r1, #9
   12a50:	4603      	mov	r3, r0
   12a52:	3008      	adds	r0, #8
   12a54:	9307      	str	r3, [sp, #28]
   12a56:	f014 f969 	bl	26d2c <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12a5a:	ab08      	add	r3, sp, #32
   12a5c:	4604      	mov	r4, r0
   12a5e:	f10d 021a 	add.w	r2, sp, #26
   12a62:	a906      	add	r1, sp, #24
   12a64:	f10d 0016 	add.w	r0, sp, #22
   12a68:	f003 fb40 	bl	160ec <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12a6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12a70:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   12a74:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12a78:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   12a7c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12a80:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   12a84:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12a86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   12a8a:	7022      	strb	r2, [r4, #0]
	return evt;
   12a8c:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12a8e:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   12a92:	e52d      	b.n	124f0 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   12a94:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   12a96:	8818      	ldrh	r0, [r3, #0]
   12a98:	f007 fc22 	bl	1a2e0 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12a9c:	8830      	ldrh	r0, [r6, #0]
   12a9e:	2101      	movs	r1, #1
   12aa0:	e62c      	b.n	126fc <hci_cmd_handle+0x278>
   12aa2:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   12aa4:	4bb8      	ldr	r3, [pc, #736]	; (12d88 <hci_cmd_handle+0x904>)
   12aa6:	6811      	ldr	r1, [r2, #0]
   12aa8:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12aaa:	6019      	str	r1, [r3, #0]
   12aac:	e624      	b.n	126f8 <hci_cmd_handle+0x274>
		le_set_adv_param(cmd, evt);
   12aae:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   12ab0:	7ba5      	ldrb	r5, [r4, #14]
   12ab2:	79a3      	ldrb	r3, [r4, #6]
   12ab4:	7962      	ldrb	r2, [r4, #5]
   12ab6:	7921      	ldrb	r1, [r4, #4]
   12ab8:	8820      	ldrh	r0, [r4, #0]
   12aba:	9502      	str	r5, [sp, #8]
   12abc:	7b65      	ldrb	r5, [r4, #13]
   12abe:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   12ac0:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   12ac2:	9400      	str	r4, [sp, #0]
   12ac4:	f002 f9e2 	bl	14e8c <ll_adv_params_set>
   12ac8:	e6f1      	b.n	128ae <hci_cmd_handle+0x42a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   12aca:	68a9      	ldr	r1, [r5, #8]
   12acc:	2001      	movs	r0, #1
   12ace:	f7ff fa1b 	bl	11f08 <ll_addr_set>
   12ad2:	e6ec      	b.n	128ae <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12ad4:	2109      	movs	r1, #9
   12ad6:	f012 fbfe 	bl	252d6 <bt_hci_cmd_complete_create>
   12ada:	2109      	movs	r1, #9
   12adc:	4603      	mov	r3, r0
   12ade:	3008      	adds	r0, #8
   12ae0:	9307      	str	r3, [sp, #28]
   12ae2:	f014 f923 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12ae6:	2100      	movs	r1, #0
   12ae8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12aea:	2208      	movs	r2, #8
	rp->status = 0x00;
   12aec:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12af0:	f012 f8d9 	bl	24ca6 <memset>
	dst[0] = val;
   12af4:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   12af6:	2241      	movs	r2, #65	; 0x41
	dst[2] = val >> 16;
   12af8:	2301      	movs	r3, #1
	dst[0] = val;
   12afa:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   12afc:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   12afe:	70e3      	strb	r3, [r4, #3]
	return evt;
   12b00:	9d07      	ldr	r5, [sp, #28]
   12b02:	e4f5      	b.n	124f0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b04:	2104      	movs	r1, #4
   12b06:	f012 fbe6 	bl	252d6 <bt_hci_cmd_complete_create>
   12b0a:	2104      	movs	r1, #4
   12b0c:	4603      	mov	r3, r0
   12b0e:	3008      	adds	r0, #8
   12b10:	9307      	str	r3, [sp, #28]
   12b12:	f014 f90b 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12b16:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12b18:	2103      	movs	r1, #3
	rp->status = 0x00;
   12b1a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   12b1c:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12b1e:	70c1      	strb	r1, [r0, #3]
	return evt;
   12b20:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   12b22:	7042      	strb	r2, [r0, #1]
   12b24:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12b26:	e4e3      	b.n	124f0 <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
   12b28:	68a8      	ldr	r0, [r5, #8]
   12b2a:	f007 f98d 	bl	19e48 <ll_wl_remove>
   12b2e:	e6be      	b.n	128ae <hci_cmd_handle+0x42a>
	status = ll_wl_add(&cmd->addr);
   12b30:	68a8      	ldr	r0, [r5, #8]
   12b32:	f007 f8e9 	bl	19d08 <ll_wl_add>
   12b36:	e6ba      	b.n	128ae <hci_cmd_handle+0x42a>
	status = ll_wl_clear();
   12b38:	f007 f8bc 	bl	19cb4 <ll_wl_clear>
   12b3c:	e6b7      	b.n	128ae <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b3e:	2102      	movs	r1, #2
   12b40:	f012 fbc9 	bl	252d6 <bt_hci_cmd_complete_create>
   12b44:	2102      	movs	r1, #2
   12b46:	4603      	mov	r3, r0
   12b48:	3008      	adds	r0, #8
   12b4a:	9307      	str	r3, [sp, #28]
   12b4c:	f014 f8ee 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12b50:	2300      	movs	r3, #0
   12b52:	7003      	strb	r3, [r0, #0]
   12b54:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   12b56:	f007 f8ab 	bl	19cb0 <ll_wl_size_get>
   12b5a:	7060      	strb	r0, [r4, #1]
	return evt;
   12b5c:	9d07      	ldr	r5, [sp, #28]
   12b5e:	e4c7      	b.n	124f0 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   12b60:	68ab      	ldr	r3, [r5, #8]
   12b62:	7818      	ldrb	r0, [r3, #0]
   12b64:	f7ee ff90 	bl	1a88 <ll_adv_enable>
   12b68:	e6a1      	b.n	128ae <hci_cmd_handle+0x42a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   12b6a:	68a9      	ldr	r1, [r5, #8]
   12b6c:	f811 0b01 	ldrb.w	r0, [r1], #1
   12b70:	f002 fb14 	bl	1519c <ll_adv_scan_rsp_set>
   12b74:	e69b      	b.n	128ae <hci_cmd_handle+0x42a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   12b76:	68a9      	ldr	r1, [r5, #8]
   12b78:	f811 0b01 	ldrb.w	r0, [r1], #1
   12b7c:	f002 fa28 	bl	14fd0 <ll_adv_data_set>
   12b80:	e695      	b.n	128ae <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b82:	2102      	movs	r1, #2
   12b84:	f012 fba7 	bl	252d6 <bt_hci_cmd_complete_create>
   12b88:	2102      	movs	r1, #2
   12b8a:	4603      	mov	r3, r0
   12b8c:	3008      	adds	r0, #8
   12b8e:	9307      	str	r3, [sp, #28]
   12b90:	f014 f8cc 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12b94:	2300      	movs	r3, #0
   12b96:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   12b98:	7043      	strb	r3, [r0, #1]
	return evt;
   12b9a:	9d07      	ldr	r5, [sp, #28]
   12b9c:	e4a8      	b.n	124f0 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   12b9e:	f007 f9e7 	bl	19f70 <ll_rl_clear>
   12ba2:	e684      	b.n	128ae <hci_cmd_handle+0x42a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   12ba4:	68a8      	ldr	r0, [r5, #8]
   12ba6:	f007 fa21 	bl	19fec <ll_rl_remove>
   12baa:	e680      	b.n	128ae <hci_cmd_handle+0x42a>
		le_add_dev_to_rl(cmd, evt);
   12bac:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   12bae:	f100 0217 	add.w	r2, r0, #23
   12bb2:	1dc1      	adds	r1, r0, #7
   12bb4:	f007 fdb2 	bl	1a71c <ll_rl_add>
   12bb8:	e679      	b.n	128ae <hci_cmd_handle+0x42a>
		le_write_default_data_len(cmd, evt);
   12bba:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   12bbc:	8859      	ldrh	r1, [r3, #2]
   12bbe:	8818      	ldrh	r0, [r3, #0]
   12bc0:	f003 fa8a 	bl	160d8 <ll_length_default_set>
   12bc4:	e673      	b.n	128ae <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12bc6:	2105      	movs	r1, #5
   12bc8:	f012 fb85 	bl	252d6 <bt_hci_cmd_complete_create>
   12bcc:	2105      	movs	r1, #5
   12bce:	4603      	mov	r3, r0
   12bd0:	3008      	adds	r0, #8
   12bd2:	9307      	str	r3, [sp, #28]
   12bd4:	f014 f8aa 	bl	26d2c <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12bd8:	a908      	add	r1, sp, #32
   12bda:	4604      	mov	r4, r0
   12bdc:	f10d 001a 	add.w	r0, sp, #26
   12be0:	f003 fa6e 	bl	160c0 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12be4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12be8:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   12bec:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12bee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   12bf2:	7022      	strb	r2, [r4, #0]
	return evt;
   12bf4:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12bf6:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   12bfa:	e479      	b.n	124f0 <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
   12bfc:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12bfe:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   12c00:	889a      	ldrh	r2, [r3, #4]
   12c02:	8859      	ldrh	r1, [r3, #2]
   12c04:	b2b8      	uxth	r0, r7
   12c06:	f003 fa05 	bl	16014 <ll_length_req_send>
   12c0a:	e58d      	b.n	12728 <hci_cmd_handle+0x2a4>
		le_conn_param_req_neg_reply(cmd, evt);
   12c0c:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12c0e:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   12c10:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12c12:	7892      	ldrb	r2, [r2, #2]
   12c14:	9300      	str	r3, [sp, #0]
   12c16:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12c1a:	2102      	movs	r1, #2
   12c1c:	b2a0      	uxth	r0, r4
   12c1e:	f003 f8ad 	bl	15d7c <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12c22:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12c24:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12c26:	8830      	ldrh	r0, [r6, #0]
   12c28:	f012 fb55 	bl	252d6 <bt_hci_cmd_complete_create>
   12c2c:	2103      	movs	r1, #3
   12c2e:	4603      	mov	r3, r0
   12c30:	3008      	adds	r0, #8
   12c32:	9307      	str	r3, [sp, #28]
   12c34:	f014 f87a 	bl	26d2c <net_buf_simple_add>
	rp->status = status;
   12c38:	7005      	strb	r5, [r0, #0]
	return evt;
   12c3a:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   12c3c:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   12c40:	e456      	b.n	124f0 <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
   12c42:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12c44:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12c46:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12c48:	8853      	ldrh	r3, [r2, #2]
   12c4a:	9102      	str	r1, [sp, #8]
   12c4c:	88d1      	ldrh	r1, [r2, #6]
   12c4e:	9101      	str	r1, [sp, #4]
   12c50:	8891      	ldrh	r1, [r2, #4]
   12c52:	9100      	str	r1, [sp, #0]
   12c54:	2200      	movs	r2, #0
   12c56:	e7e0      	b.n	12c1a <hci_cmd_handle+0x796>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12c58:	2109      	movs	r1, #9
   12c5a:	f012 fb3c 	bl	252d6 <bt_hci_cmd_complete_create>
   12c5e:	2109      	movs	r1, #9
   12c60:	4603      	mov	r3, r0
   12c62:	3008      	adds	r0, #8
   12c64:	9307      	str	r3, [sp, #28]
   12c66:	f014 f861 	bl	26d2c <net_buf_simple_add>
	dst[0] = val;
   12c6a:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   12c6c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   12c6e:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   12c70:	2230      	movs	r2, #48	; 0x30
   12c72:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   12c74:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   12c76:	70c2      	strb	r2, [r0, #3]
   12c78:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12c7a:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   12c7c:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   12c7e:	2201      	movs	r2, #1
	return evt;
   12c80:	9d07      	ldr	r5, [sp, #28]
   12c82:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   12c84:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   12c86:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   12c88:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   12c8a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   12c8c:	e430      	b.n	124f0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12c8e:	68ab      	ldr	r3, [r5, #8]
   12c90:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   12c92:	2200      	movs	r2, #0
   12c94:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12c96:	b2b8      	uxth	r0, r7
   12c98:	f006 fe96 	bl	199c8 <ll_start_enc_req_send>
   12c9c:	e544      	b.n	12728 <hci_cmd_handle+0x2a4>
	handle = sys_le16_to_cpu(cmd->handle);
   12c9e:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12ca0:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   12ca2:	f832 7b02 	ldrh.w	r7, [r2], #2
   12ca6:	e7f6      	b.n	12c96 <hci_cmd_handle+0x812>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12ca8:	2109      	movs	r1, #9
   12caa:	f012 fb14 	bl	252d6 <bt_hci_cmd_complete_create>
   12cae:	2109      	movs	r1, #9
   12cb0:	4603      	mov	r3, r0
   12cb2:	3008      	adds	r0, #8
   12cb4:	9307      	str	r3, [sp, #28]
   12cb6:	f014 f839 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12cba:	2300      	movs	r3, #0
   12cbc:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   12cc0:	2108      	movs	r1, #8
   12cc2:	f008 f97f 	bl	1afc4 <lll_csrand_get>
	return evt;
   12cc6:	9d07      	ldr	r5, [sp, #28]
   12cc8:	e412      	b.n	124f0 <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
   12cca:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   12ccc:	aa08      	add	r2, sp, #32
   12cce:	2300      	movs	r3, #0
   12cd0:	f100 0110 	add.w	r1, r0, #16
   12cd4:	f009 fe76 	bl	1c9c4 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12cd8:	2111      	movs	r1, #17
   12cda:	8830      	ldrh	r0, [r6, #0]
   12cdc:	f012 fafb 	bl	252d6 <bt_hci_cmd_complete_create>
   12ce0:	2111      	movs	r1, #17
   12ce2:	4603      	mov	r3, r0
   12ce4:	3008      	adds	r0, #8
   12ce6:	9307      	str	r3, [sp, #28]
   12ce8:	f014 f820 	bl	26d2c <net_buf_simple_add>
	rp->status = 0x00;
   12cec:	2300      	movs	r3, #0
   12cee:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   12cf2:	2210      	movs	r2, #16
   12cf4:	a908      	add	r1, sp, #32
   12cf6:	f011 ffab 	bl	24c50 <memcpy>
	return evt;
   12cfa:	9d07      	ldr	r5, [sp, #28]
   12cfc:	f7ff bbf8 	b.w	124f0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12d00:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   12d02:	8818      	ldrh	r0, [r3, #0]
   12d04:	f003 f936 	bl	15f74 <ll_feature_req_send>
   12d08:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12d0a:	8830      	ldrh	r0, [r6, #0]
   12d0c:	f012 faf5 	bl	252fa <bt_hci_cmd_status_create>
   12d10:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12d12:	f7ff bbed 	b.w	124f0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12d16:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12d18:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   12d1a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12d1c:	f012 fadb 	bl	252d6 <bt_hci_cmd_complete_create>
   12d20:	2108      	movs	r1, #8
   12d22:	4603      	mov	r3, r0
   12d24:	4408      	add	r0, r1
   12d26:	9307      	str	r3, [sp, #28]
   12d28:	f014 f800 	bl	26d2c <net_buf_simple_add>
   12d2c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   12d2e:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12d30:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   12d32:	f003 f8b7 	bl	15ea4 <ll_chm_get>
	rp->status = status;
   12d36:	7020      	strb	r0, [r4, #0]
	return evt;
   12d38:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   12d3a:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   12d3e:	f7ff bbd7 	b.w	124f0 <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
   12d42:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12d44:	890a      	ldrh	r2, [r1, #8]
   12d46:	884b      	ldrh	r3, [r1, #2]
   12d48:	8808      	ldrh	r0, [r1, #0]
   12d4a:	9202      	str	r2, [sp, #8]
   12d4c:	88ca      	ldrh	r2, [r1, #6]
   12d4e:	9201      	str	r2, [sp, #4]
   12d50:	8889      	ldrh	r1, [r1, #4]
   12d52:	9100      	str	r1, [sp, #0]
   12d54:	2200      	movs	r2, #0
   12d56:	4611      	mov	r1, r2
   12d58:	f003 f810 	bl	15d7c <ll_conn_update>
   12d5c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12d5e:	8830      	ldrh	r0, [r6, #0]
   12d60:	f012 facb 	bl	252fa <bt_hci_cmd_status_create>
   12d64:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12d66:	f7ff bbc3 	b.w	124f0 <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
   12d6a:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   12d6c:	7899      	ldrb	r1, [r3, #2]
   12d6e:	8818      	ldrh	r0, [r3, #0]
   12d70:	f003 f8bc 	bl	15eec <ll_terminate_ind_send>
   12d74:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12d76:	8830      	ldrh	r0, [r6, #0]
   12d78:	f012 fabf 	bl	252fa <bt_hci_cmd_status_create>
   12d7c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12d7e:	f7ff bbb7 	b.w	124f0 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12d82:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12d84:	4b01      	ldr	r3, [pc, #4]	; (12d8c <hci_cmd_handle+0x908>)
   12d86:	e68e      	b.n	12aa6 <hci_cmd_handle+0x622>
   12d88:	200001b0 	.word	0x200001b0
   12d8c:	2000afa0 	.word	0x2000afa0
	event_mask = DEFAULT_EVENT_MASK;
   12d90:	4b24      	ldr	r3, [pc, #144]	; (12e24 <hci_cmd_handle+0x9a0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12d92:	4a25      	ldr	r2, [pc, #148]	; (12e28 <hci_cmd_handle+0x9a4>)
	event_mask = DEFAULT_EVENT_MASK;
   12d94:	f04f 30ff 	mov.w	r0, #4294967295
   12d98:	f641 71ff 	movw	r1, #8191	; 0x1fff
   12d9c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12da0:	4b22      	ldr	r3, [pc, #136]	; (12e2c <hci_cmd_handle+0x9a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12da2:	2000      	movs	r0, #0
   12da4:	2100      	movs	r1, #0
   12da6:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12daa:	201f      	movs	r0, #31
   12dac:	2100      	movs	r1, #0
   12dae:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   12db2:	f001 f857 	bl	13e64 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12db6:	2101      	movs	r1, #1
   12db8:	8830      	ldrh	r0, [r6, #0]
   12dba:	f012 fa8c 	bl	252d6 <bt_hci_cmd_complete_create>
   12dbe:	2101      	movs	r1, #1
   12dc0:	4605      	mov	r5, r0
   12dc2:	3008      	adds	r0, #8
   12dc4:	f013 ffb2 	bl	26d2c <net_buf_simple_add>
	conn_count = 0U;
   12dc8:	4a19      	ldr	r2, [pc, #100]	; (12e30 <hci_cmd_handle+0x9ac>)
	ccst->status = status;
   12dca:	2300      	movs	r3, #0
   12dcc:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   12dce:	6013      	str	r3, [r2, #0]
}
   12dd0:	f7ff bb8e 	b.w	124f0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12dd4:	68ab      	ldr	r3, [r5, #8]
   12dd6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   12dd8:	a908      	add	r1, sp, #32
   12dda:	b2a8      	uxth	r0, r5
   12ddc:	f003 fa14 	bl	16208 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12de0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   12de2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12de4:	8830      	ldrh	r0, [r6, #0]
   12de6:	f012 fa76 	bl	252d6 <bt_hci_cmd_complete_create>
   12dea:	2105      	movs	r1, #5
   12dec:	4603      	mov	r3, r0
   12dee:	3008      	adds	r0, #8
   12df0:	9307      	str	r3, [sp, #28]
   12df2:	f013 ff9b 	bl	26d2c <net_buf_simple_add>
	rp->status = status;
   12df6:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12df8:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12dfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   12e00:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12e02:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   12e06:	f7ff bb73 	b.w	124f0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12e0a:	2112      	movs	r1, #18
   12e0c:	f012 fa75 	bl	252fa <bt_hci_cmd_status_create>
   12e10:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12e12:	f7ff bb6d 	b.w	124f0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12e16:	2111      	movs	r1, #17
   12e18:	f012 fa6f 	bl	252fa <bt_hci_cmd_status_create>
   12e1c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12e1e:	f7ff bb67 	b.w	124f0 <hci_cmd_handle+0x6c>
   12e22:	bf00      	nop
   12e24:	200001a8 	.word	0x200001a8
   12e28:	2000afa0 	.word	0x2000afa0
   12e2c:	200001b0 	.word	0x200001b0
   12e30:	2000defc 	.word	0x2000defc

00012e34 <hci_acl_handle>:
{
   12e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   12e38:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   12e3a:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   12e3c:	2b03      	cmp	r3, #3
	*evt = NULL;
   12e3e:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   12e40:	d944      	bls.n	12ecc <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
   12e42:	4605      	mov	r5, r0
   12e44:	460f      	mov	r7, r1
   12e46:	3008      	adds	r0, #8
   12e48:	2104      	movs	r1, #4
   12e4a:	f013 ff96 	bl	26d7a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   12e4e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   12e50:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   12e54:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   12e58:	4543      	cmp	r3, r8
   12e5a:	d344      	bcc.n	12ee6 <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   12e5c:	f002 ff32 	bl	15cc4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   12e60:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   12e64:	4604      	mov	r4, r0
   12e66:	2800      	cmp	r0, #0
   12e68:	d041      	beq.n	12eee <hci_acl_handle+0xba>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   12e6a:	08b3      	lsrs	r3, r6, #2
   12e6c:	d102      	bne.n	12e74 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   12e6e:	b33e      	cbz	r6, 12ec0 <hci_acl_handle+0x8c>
   12e70:	2e01      	cmp	r6, #1
   12e72:	d003      	beq.n	12e7c <hci_acl_handle+0x48>
		return -EINVAL;
   12e74:	f06f 0015 	mvn.w	r0, #21
}
   12e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12e7c:	7903      	ldrb	r3, [r0, #4]
   12e7e:	f366 0301 	bfi	r3, r6, #0, #2
   12e82:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   12e84:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   12e88:	68a9      	ldr	r1, [r5, #8]
   12e8a:	4642      	mov	r2, r8
   12e8c:	1de0      	adds	r0, r4, #7
   12e8e:	f011 fedf 	bl	24c50 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12e92:	4621      	mov	r1, r4
   12e94:	f3c9 000b 	ubfx	r0, r9, #0, #12
   12e98:	f002 ff20 	bl	15cdc <ll_tx_mem_enqueue>
   12e9c:	2800      	cmp	r0, #0
   12e9e:	d0eb      	beq.n	12e78 <hci_acl_handle+0x44>
   12ea0:	4b28      	ldr	r3, [pc, #160]	; (12f44 <hci_acl_handle+0x110>)
   12ea2:	4929      	ldr	r1, [pc, #164]	; (12f48 <hci_acl_handle+0x114>)
		BT_ERR("Invalid Tx Enqueue");
   12ea4:	4829      	ldr	r0, [pc, #164]	; (12f4c <hci_acl_handle+0x118>)
   12ea6:	1ac9      	subs	r1, r1, r3
   12ea8:	08c9      	lsrs	r1, r1, #3
   12eaa:	0189      	lsls	r1, r1, #6
   12eac:	f041 0101 	orr.w	r1, r1, #1
   12eb0:	f00f fea8 	bl	22c04 <log_0>
		ll_tx_mem_release(node_tx);
   12eb4:	4620      	mov	r0, r4
   12eb6:	f002 ff0b 	bl	15cd0 <ll_tx_mem_release>
		return -EINVAL;
   12eba:	f06f 0015 	mvn.w	r0, #21
   12ebe:	e7db      	b.n	12e78 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   12ec0:	7903      	ldrb	r3, [r0, #4]
   12ec2:	2202      	movs	r2, #2
   12ec4:	f362 0301 	bfi	r3, r2, #0, #2
   12ec8:	7103      	strb	r3, [r0, #4]
		break;
   12eca:	e7db      	b.n	12e84 <hci_acl_handle+0x50>
   12ecc:	491e      	ldr	r1, [pc, #120]	; (12f48 <hci_acl_handle+0x114>)
   12ece:	4b1d      	ldr	r3, [pc, #116]	; (12f44 <hci_acl_handle+0x110>)
		BT_ERR("No HCI ACL header");
   12ed0:	481f      	ldr	r0, [pc, #124]	; (12f50 <hci_acl_handle+0x11c>)
   12ed2:	1ac9      	subs	r1, r1, r3
   12ed4:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   12ed6:	0189      	lsls	r1, r1, #6
   12ed8:	f041 0101 	orr.w	r1, r1, #1
   12edc:	f00f fe92 	bl	22c04 <log_0>
		return -EINVAL;
   12ee0:	f06f 0015 	mvn.w	r0, #21
   12ee4:	e7c8      	b.n	12e78 <hci_acl_handle+0x44>
   12ee6:	4918      	ldr	r1, [pc, #96]	; (12f48 <hci_acl_handle+0x114>)
   12ee8:	4b16      	ldr	r3, [pc, #88]	; (12f44 <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
   12eea:	481a      	ldr	r0, [pc, #104]	; (12f54 <hci_acl_handle+0x120>)
   12eec:	e7f1      	b.n	12ed2 <hci_acl_handle+0x9e>
   12eee:	4b15      	ldr	r3, [pc, #84]	; (12f44 <hci_acl_handle+0x110>)
   12ef0:	4915      	ldr	r1, [pc, #84]	; (12f48 <hci_acl_handle+0x114>)
		BT_ERR("Tx Buffer Overflow");
   12ef2:	4819      	ldr	r0, [pc, #100]	; (12f58 <hci_acl_handle+0x124>)
   12ef4:	1ac9      	subs	r1, r1, r3
   12ef6:	08c9      	lsrs	r1, r1, #3
   12ef8:	0189      	lsls	r1, r1, #6
   12efa:	f041 0101 	orr.w	r1, r1, #1
   12efe:	f00f fe81 	bl	22c04 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   12f02:	4b16      	ldr	r3, [pc, #88]	; (12f5c <hci_acl_handle+0x128>)
   12f04:	681b      	ldr	r3, [r3, #0]
   12f06:	019b      	lsls	r3, r3, #6
   12f08:	d402      	bmi.n	12f10 <hci_acl_handle+0xdc>
		return -ENOBUFS;
   12f0a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12f0e:	e7b3      	b.n	12e78 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12f10:	f04f 33ff 	mov.w	r3, #4294967295
   12f14:	f04f 32ff 	mov.w	r2, #4294967295
   12f18:	2001      	movs	r0, #1
   12f1a:	f7f5 fc7f 	bl	881c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   12f1e:	2102      	movs	r1, #2
   12f20:	6038      	str	r0, [r7, #0]
   12f22:	3008      	adds	r0, #8
   12f24:	f013 ff02 	bl	26d2c <net_buf_simple_add>
	hdr->len = len;
   12f28:	2401      	movs	r4, #1
	hdr->evt = evt;
   12f2a:	221a      	movs	r2, #26
   12f2c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12f2e:	7044      	strb	r4, [r0, #1]
   12f30:	6838      	ldr	r0, [r7, #0]
   12f32:	4621      	mov	r1, r4
   12f34:	3008      	adds	r0, #8
   12f36:	f013 fef9 	bl	26d2c <net_buf_simple_add>
   12f3a:	4603      	mov	r3, r0
		return -ENOBUFS;
   12f3c:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   12f40:	701c      	strb	r4, [r3, #0]
   12f42:	e799      	b.n	12e78 <hci_acl_handle+0x44>
   12f44:	000281b4 	.word	0x000281b4
   12f48:	000281fc 	.word	0x000281fc
   12f4c:	00028f7c 	.word	0x00028f7c
   12f50:	00028f34 	.word	0x00028f34
   12f54:	00028f48 	.word	0x00028f48
   12f58:	00028f68 	.word	0x00028f68
   12f5c:	200001a8 	.word	0x200001a8

00012f60 <hci_disconn_complete_encode>:
{
   12f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12f62:	4b0e      	ldr	r3, [pc, #56]	; (12f9c <hci_disconn_complete_encode+0x3c>)
   12f64:	681b      	ldr	r3, [r3, #0]
   12f66:	06db      	lsls	r3, r3, #27
   12f68:	d400      	bmi.n	12f6c <hci_disconn_complete_encode+0xc>
}
   12f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f6c:	f102 0408 	add.w	r4, r2, #8
   12f70:	4605      	mov	r5, r0
   12f72:	460e      	mov	r6, r1
   12f74:	4620      	mov	r0, r4
   12f76:	2102      	movs	r1, #2
   12f78:	f013 fed8 	bl	26d2c <net_buf_simple_add>
   12f7c:	4603      	mov	r3, r0
	hdr->len = len;
   12f7e:	2104      	movs	r1, #4
	hdr->evt = evt;
   12f80:	2205      	movs	r2, #5
	hdr->len = len;
   12f82:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   12f84:	701a      	strb	r2, [r3, #0]
   12f86:	4620      	mov	r0, r4
   12f88:	f013 fed0 	bl	26d2c <net_buf_simple_add>
   12f8c:	2700      	movs	r7, #0
	ep->status = 0x00;
   12f8e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12f90:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12f94:	782b      	ldrb	r3, [r5, #0]
   12f96:	70c3      	strb	r3, [r0, #3]
}
   12f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f9a:	bf00      	nop
   12f9c:	200001a8 	.word	0x200001a8

00012fa0 <hci_disconn_complete_process>:
	conn_count--;
   12fa0:	4a02      	ldr	r2, [pc, #8]	; (12fac <hci_disconn_complete_process+0xc>)
   12fa2:	6813      	ldr	r3, [r2, #0]
   12fa4:	3b01      	subs	r3, #1
   12fa6:	6013      	str	r3, [r2, #0]
}
   12fa8:	4770      	bx	lr
   12faa:	bf00      	nop
   12fac:	2000defc 	.word	0x2000defc

00012fb0 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   12fb0:	7f03      	ldrb	r3, [r0, #28]
   12fb2:	f003 0303 	and.w	r3, r3, #3
   12fb6:	3b01      	subs	r3, #1
   12fb8:	2b01      	cmp	r3, #1
{
   12fba:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   12fbc:	d90d      	bls.n	12fda <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   12fbe:	4a16      	ldr	r2, [pc, #88]	; (13018 <hci_acl_encode+0x68>)
   12fc0:	4916      	ldr	r1, [pc, #88]	; (1301c <hci_acl_encode+0x6c>)
   12fc2:	4817      	ldr	r0, [pc, #92]	; (13020 <hci_acl_encode+0x70>)
   12fc4:	f241 737a 	movw	r3, #6010	; 0x177a
   12fc8:	f00f f986 	bl	222d8 <printk>
   12fcc:	4040      	eors	r0, r0
   12fce:	f380 8811 	msr	BASEPRI, r0
   12fd2:	f04f 0003 	mov.w	r0, #3
   12fd6:	df02      	svc	2
		break;
	}
}
   12fd8:	bd70      	pop	{r4, r5, r6, pc}
   12fda:	4604      	mov	r4, r0
   12fdc:	f101 0508 	add.w	r5, r1, #8
   12fe0:	4628      	mov	r0, r5
   12fe2:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   12fe4:	88e6      	ldrh	r6, [r4, #6]
   12fe6:	f013 fea1 	bl	26d2c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   12fea:	7f23      	ldrb	r3, [r4, #28]
   12fec:	f003 0303 	and.w	r3, r3, #3
   12ff0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   12ff2:	bf0c      	ite	eq
   12ff4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   12ff8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   12ffc:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   12ffe:	7f61      	ldrb	r1, [r4, #29]
   13000:	8041      	strh	r1, [r0, #2]
   13002:	4628      	mov	r0, r5
   13004:	f013 fe92 	bl	26d2c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   13008:	7f62      	ldrb	r2, [r4, #29]
   1300a:	f104 011f 	add.w	r1, r4, #31
}
   1300e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   13012:	f011 be1d 	b.w	24c50 <memcpy>
   13016:	bf00      	nop
   13018:	00028f90 	.word	0x00028f90
   1301c:	00028e78 	.word	0x00028e78
   13020:	00028de0 	.word	0x00028de0

00013024 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   13024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13028:	f890 c004 	ldrb.w	ip, [r0, #4]
   1302c:	f1bc 0f03 	cmp.w	ip, #3
{
   13030:	4604      	mov	r4, r0
   13032:	b088      	sub	sp, #32
   13034:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   13036:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1303a:	d00f      	beq.n	1305c <hci_evt_encode+0x38>
		encode_control(node_rx, pdu_data, buf);
   1303c:	f1ac 0c13 	sub.w	ip, ip, #19
   13040:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
   13042:	f1bc 0f06 	cmp.w	ip, #6
   13046:	f200 82be 	bhi.w	135c6 <hci_evt_encode+0x5a2>
   1304a:	e8df f01c 	tbh	[pc, ip, lsl #1]
   1304e:	0022      	.short	0x0022
   13050:	0083007c 	.word	0x0083007c
   13054:	00c200ac 	.word	0x00c200ac
   13058:	00f300d4 	.word	0x00f300d4
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
   1305c:	7fe3      	ldrb	r3, [r4, #31]
   1305e:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
   13060:	3b03      	subs	r3, #3
   13062:	2b12      	cmp	r3, #18
   13064:	f200 8116 	bhi.w	13294 <hci_evt_encode+0x270>
   13068:	e8df f013 	tbh	[pc, r3, lsl #1]
   1306c:	011401e8 	.word	0x011401e8
   13070:	02170114 	.word	0x02170114
   13074:	01140177 	.word	0x01140177
   13078:	01140189 	.word	0x01140189
   1307c:	01140114 	.word	0x01140114
   13080:	011401a8 	.word	0x011401a8
   13084:	011401c3 	.word	0x011401c3
   13088:	01140114 	.word	0x01140114
   1308c:	01220114 	.word	0x01220114
   13090:	0122      	.short	0x0122
	uint8_t status = cc->status;
   13092:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   13094:	2f00      	cmp	r7, #0
   13096:	f000 8219 	beq.w	134cc <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1309a:	4bbd      	ldr	r3, [pc, #756]	; (13390 <hci_evt_encode+0x36c>)
   1309c:	685b      	ldr	r3, [r3, #4]
   1309e:	009a      	lsls	r2, r3, #2
   130a0:	d54e      	bpl.n	13140 <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   130a2:	4bbc      	ldr	r3, [pc, #752]	; (13394 <hci_evt_encode+0x370>)
   130a4:	681b      	ldr	r3, [r3, #0]
   130a6:	f240 2201 	movw	r2, #513	; 0x201
   130aa:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   130ac:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   130b0:	d046      	beq.n	13140 <hci_evt_encode+0x11c>
	if (!status) {
   130b2:	2f00      	cmp	r7, #0
   130b4:	f040 821d 	bne.w	134f2 <hci_evt_encode+0x4ce>
		conn_count++;
   130b8:	4ab7      	ldr	r2, [pc, #732]	; (13398 <hci_evt_encode+0x374>)
   130ba:	6813      	ldr	r3, [r2, #0]
   130bc:	3301      	adds	r3, #1
   130be:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   130c0:	f1b8 0f00 	cmp.w	r8, #0
   130c4:	f000 8232 	beq.w	1352c <hci_evt_encode+0x508>
   130c8:	3508      	adds	r5, #8
   130ca:	2102      	movs	r1, #2
   130cc:	4628      	mov	r0, r5
   130ce:	f013 fe2d 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   130d2:	233e      	movs	r3, #62	; 0x3e
   130d4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   130d6:	231f      	movs	r3, #31
   130d8:	7043      	strb	r3, [r0, #1]
   130da:	2101      	movs	r1, #1
   130dc:	4628      	mov	r0, r5
   130de:	f013 fe25 	bl	26d2c <net_buf_simple_add>
   130e2:	4603      	mov	r3, r0
	me->subevent = subevt;
   130e4:	220a      	movs	r2, #10
   130e6:	701a      	strb	r2, [r3, #0]
   130e8:	4628      	mov	r0, r5
   130ea:	211e      	movs	r1, #30
   130ec:	f013 fe1e 	bl	26d2c <net_buf_simple_add>
		leecc->status = 0x00;
   130f0:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   130f2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   130f6:	7f63      	ldrb	r3, [r4, #29]
   130f8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   130fa:	7fa3      	ldrb	r3, [r4, #30]
   130fc:	7103      	strb	r3, [r0, #4]
   130fe:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   13100:	2206      	movs	r2, #6
   13102:	f104 011f 	add.w	r1, r4, #31
   13106:	3005      	adds	r0, #5
   13108:	f011 fda2 	bl	24c50 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   1310c:	2206      	movs	r2, #6
   1310e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   13112:	f105 000b 	add.w	r0, r5, #11
   13116:	f011 fd9b 	bl	24c50 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   1311a:	2206      	movs	r2, #6
   1311c:	f104 0125 	add.w	r1, r4, #37	; 0x25
   13120:	f105 0011 	add.w	r0, r5, #17
   13124:	f011 fd94 	bl	24c50 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13128:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1312a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   1312c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1312e:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   13132:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13136:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   1313a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1313e:	776b      	strb	r3, [r5, #29]
	}
}
   13140:	b008      	add	sp, #32
   13142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   13146:	460a      	mov	r2, r1
   13148:	4631      	mov	r1, r6
}
   1314a:	b008      	add	sp, #32
   1314c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   13150:	f7ff bf06 	b.w	12f60 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13154:	4b8e      	ldr	r3, [pc, #568]	; (13390 <hci_evt_encode+0x36c>)
   13156:	685b      	ldr	r3, [r3, #4]
   13158:	009b      	lsls	r3, r3, #2
   1315a:	d5f1      	bpl.n	13140 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1315c:	4b8d      	ldr	r3, [pc, #564]	; (13394 <hci_evt_encode+0x370>)
   1315e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13160:	075f      	lsls	r7, r3, #29
   13162:	d5ed      	bpl.n	13140 <hci_evt_encode+0x11c>
   13164:	3508      	adds	r5, #8
   13166:	2102      	movs	r1, #2
   13168:	4628      	mov	r0, r5
   1316a:	f013 fddf 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   1316e:	233e      	movs	r3, #62	; 0x3e
   13170:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13172:	230a      	movs	r3, #10
   13174:	7043      	strb	r3, [r0, #1]
   13176:	2101      	movs	r1, #1
   13178:	4628      	mov	r0, r5
   1317a:	f013 fdd7 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   1317e:	2303      	movs	r3, #3
   13180:	7003      	strb	r3, [r0, #0]
   13182:	2109      	movs	r1, #9
   13184:	4628      	mov	r0, r5
   13186:	f013 fdd1 	bl	26d2c <net_buf_simple_add>
	sep->status = cu->status;
   1318a:	7f23      	ldrb	r3, [r4, #28]
   1318c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1318e:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13190:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13192:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13194:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   13198:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1319c:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   131a0:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   131a4:	e7cc      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   131a6:	4b7a      	ldr	r3, [pc, #488]	; (13390 <hci_evt_encode+0x36c>)
   131a8:	685b      	ldr	r3, [r3, #4]
   131aa:	0418      	lsls	r0, r3, #16
   131ac:	f04f 0400 	mov.w	r4, #0
   131b0:	d5c6      	bpl.n	13140 <hci_evt_encode+0x11c>
   131b2:	3508      	adds	r5, #8
   131b4:	2102      	movs	r1, #2
   131b6:	4628      	mov	r0, r5
   131b8:	f013 fdb8 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   131bc:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   131be:	2103      	movs	r1, #3
	hdr->evt = evt;
   131c0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   131c2:	7041      	strb	r1, [r0, #1]
   131c4:	4628      	mov	r0, r5
   131c6:	f013 fdb1 	bl	26d2c <net_buf_simple_add>
	ep->status = 0x00;
   131ca:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   131cc:	f8a0 6001 	strh.w	r6, [r0, #1]
   131d0:	e7b6      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   131d2:	4b72      	ldr	r3, [pc, #456]	; (1339c <hci_evt_encode+0x378>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	0219      	lsls	r1, r3, #8
   131d8:	d5b2      	bpl.n	13140 <hci_evt_encode+0x11c>
   131da:	3508      	adds	r5, #8
   131dc:	2102      	movs	r1, #2
   131de:	4628      	mov	r0, r5
   131e0:	f013 fda4 	bl	26d2c <net_buf_simple_add>
	hdr->len = len;
   131e4:	2102      	movs	r1, #2
	hdr->evt = evt;
   131e6:	2357      	movs	r3, #87	; 0x57
   131e8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   131ea:	7041      	strb	r1, [r0, #1]
   131ec:	4628      	mov	r0, r5
   131ee:	f013 fd9d 	bl	26d2c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   131f2:	8006      	strh	r6, [r0, #0]
   131f4:	e7a4      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   131f6:	4b66      	ldr	r3, [pc, #408]	; (13390 <hci_evt_encode+0x36c>)
   131f8:	685b      	ldr	r3, [r3, #4]
   131fa:	009a      	lsls	r2, r3, #2
   131fc:	d5a0      	bpl.n	13140 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   131fe:	4b65      	ldr	r3, [pc, #404]	; (13394 <hci_evt_encode+0x370>)
   13200:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13202:	031b      	lsls	r3, r3, #12
   13204:	d59c      	bpl.n	13140 <hci_evt_encode+0x11c>
   13206:	3508      	adds	r5, #8
   13208:	2102      	movs	r1, #2
   1320a:	4628      	mov	r0, r5
   1320c:	f013 fd8e 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   13210:	233e      	movs	r3, #62	; 0x3e
   13212:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13214:	2304      	movs	r3, #4
   13216:	7043      	strb	r3, [r0, #1]
   13218:	2101      	movs	r1, #1
   1321a:	4628      	mov	r0, r5
   1321c:	f013 fd86 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   13220:	2314      	movs	r3, #20
   13222:	7003      	strb	r3, [r0, #0]
   13224:	2103      	movs	r1, #3
   13226:	4628      	mov	r0, r5
   13228:	f013 fd80 	bl	26d2c <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1322c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1322e:	7f23      	ldrb	r3, [r4, #28]
   13230:	7083      	strb	r3, [r0, #2]
   13232:	e785      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13234:	4b56      	ldr	r3, [pc, #344]	; (13390 <hci_evt_encode+0x36c>)
   13236:	685b      	ldr	r3, [r3, #4]
   13238:	009f      	lsls	r7, r3, #2
   1323a:	d503      	bpl.n	13244 <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1323c:	4b55      	ldr	r3, [pc, #340]	; (13394 <hci_evt_encode+0x370>)
   1323e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13240:	0518      	lsls	r0, r3, #20
   13242:	d45c      	bmi.n	132fe <hci_evt_encode+0x2da>
   13244:	7f62      	ldrb	r2, [r4, #29]
   13246:	7fa0      	ldrb	r0, [r4, #30]
   13248:	4955      	ldr	r1, [pc, #340]	; (133a0 <hci_evt_encode+0x37c>)
   1324a:	4b56      	ldr	r3, [pc, #344]	; (133a4 <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1324c:	7f24      	ldrb	r4, [r4, #28]
   1324e:	2a00      	cmp	r2, #0
   13250:	fa92 f2a2 	rbit	r2, r2
   13254:	fab2 f282 	clz	r2, r2
   13258:	eba3 0301 	sub.w	r3, r3, r1
   1325c:	bf08      	it	eq
   1325e:	f04f 32ff 	moveq.w	r2, #4294967295
   13262:	2800      	cmp	r0, #0
   13264:	fa90 f0a0 	rbit	r0, r0
   13268:	fab0 f080 	clz	r0, r0
   1326c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   13270:	bf08      	it	eq
   13272:	f04f 30ff 	moveq.w	r0, #4294967295
   13276:	1c51      	adds	r1, r2, #1
   13278:	3001      	adds	r0, #1
   1327a:	019b      	lsls	r3, r3, #6
   1327c:	9007      	str	r0, [sp, #28]
   1327e:	9106      	str	r1, [sp, #24]
   13280:	4849      	ldr	r0, [pc, #292]	; (133a8 <hci_evt_encode+0x384>)
   13282:	f043 0302 	orr.w	r3, r3, #2
   13286:	2204      	movs	r2, #4
   13288:	a904      	add	r1, sp, #16
   1328a:	e9cd 6404 	strd	r6, r4, [sp, #16]
   1328e:	f00f fd0f 	bl	22cb0 <log_n>
		return;
   13292:	e755      	b.n	13140 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   13294:	4a45      	ldr	r2, [pc, #276]	; (133ac <hci_evt_encode+0x388>)
   13296:	4946      	ldr	r1, [pc, #280]	; (133b0 <hci_evt_encode+0x38c>)
   13298:	4846      	ldr	r0, [pc, #280]	; (133b4 <hci_evt_encode+0x390>)
   1329a:	f241 734e 	movw	r3, #5966	; 0x174e
   1329e:	f00f f81b 	bl	222d8 <printk>
   132a2:	4040      	eors	r0, r0
   132a4:	f380 8811 	msr	BASEPRI, r0
   132a8:	f04f 0003 	mov.w	r0, #3
   132ac:	df02      	svc	2
}
   132ae:	e747      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   132b0:	4b37      	ldr	r3, [pc, #220]	; (13390 <hci_evt_encode+0x36c>)
   132b2:	685b      	ldr	r3, [r3, #4]
   132b4:	009a      	lsls	r2, r3, #2
   132b6:	f57f af43 	bpl.w	13140 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   132ba:	4b36      	ldr	r3, [pc, #216]	; (13394 <hci_evt_encode+0x370>)
   132bc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   132be:	065b      	lsls	r3, r3, #25
   132c0:	f57f af3e 	bpl.w	13140 <hci_evt_encode+0x11c>
   132c4:	3508      	adds	r5, #8
   132c6:	2102      	movs	r1, #2
   132c8:	4628      	mov	r0, r5
   132ca:	f013 fd2f 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   132ce:	233e      	movs	r3, #62	; 0x3e
   132d0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   132d2:	230b      	movs	r3, #11
   132d4:	7043      	strb	r3, [r0, #1]
   132d6:	2101      	movs	r1, #1
   132d8:	4628      	mov	r0, r5
   132da:	f013 fd27 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   132de:	2307      	movs	r3, #7
   132e0:	7003      	strb	r3, [r0, #0]
   132e2:	210a      	movs	r1, #10
   132e4:	4628      	mov	r0, r5
   132e6:	f013 fd21 	bl	26d2c <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   132ea:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   132ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   132ee:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   132f0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   132f2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   132f4:	8c23      	ldrh	r3, [r4, #32]
   132f6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   132f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   132fa:	8103      	strh	r3, [r0, #8]
   132fc:	e720      	b.n	13140 <hci_evt_encode+0x11c>
   132fe:	3508      	adds	r5, #8
   13300:	2102      	movs	r1, #2
   13302:	4628      	mov	r0, r5
   13304:	f013 fd12 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   13308:	233e      	movs	r3, #62	; 0x3e
   1330a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1330c:	2306      	movs	r3, #6
   1330e:	7043      	strb	r3, [r0, #1]
   13310:	2101      	movs	r1, #1
   13312:	4628      	mov	r0, r5
   13314:	f013 fd0a 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   13318:	230c      	movs	r3, #12
   1331a:	7003      	strb	r3, [r0, #0]
   1331c:	2105      	movs	r1, #5
   1331e:	4628      	mov	r0, r5
   13320:	f013 fd04 	bl	26d2c <net_buf_simple_add>
	sep->status = pu->status;
   13324:	7f23      	ldrb	r3, [r4, #28]
   13326:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   13328:	f8a0 6001 	strh.w	r6, [r0, #1]
   1332c:	7f62      	ldrb	r2, [r4, #29]
   1332e:	2a00      	cmp	r2, #0
   13330:	fa92 f3a2 	rbit	r3, r2
   13334:	fab3 f383 	clz	r3, r3
   13338:	bf08      	it	eq
   1333a:	f04f 33ff 	moveq.w	r3, #4294967295
   1333e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   13340:	70c3      	strb	r3, [r0, #3]
   13342:	7fa2      	ldrb	r2, [r4, #30]
   13344:	fa92 f3a2 	rbit	r3, r2
   13348:	2a00      	cmp	r2, #0
   1334a:	fab3 f383 	clz	r3, r3
   1334e:	bf08      	it	eq
   13350:	f04f 33ff 	moveq.w	r3, #4294967295
   13354:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   13356:	7103      	strb	r3, [r0, #4]
   13358:	e6f2      	b.n	13140 <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
   1335a:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1335e:	290e      	cmp	r1, #14
   13360:	f000 8115 	beq.w	1358e <hci_evt_encode+0x56a>
   13364:	4b0e      	ldr	r3, [pc, #56]	; (133a0 <hci_evt_encode+0x37c>)
   13366:	4a0f      	ldr	r2, [pc, #60]	; (133a4 <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13368:	4813      	ldr	r0, [pc, #76]	; (133b8 <hci_evt_encode+0x394>)
   1336a:	1ad2      	subs	r2, r2, r3
   1336c:	08d2      	lsrs	r2, r2, #3
   1336e:	0192      	lsls	r2, r2, #6
   13370:	f042 0202 	orr.w	r2, r2, #2
}
   13374:	b008      	add	sp, #32
   13376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1337a:	f00f bc50 	b.w	22c1e <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1337e:	460b      	mov	r3, r1
   13380:	4632      	mov	r2, r6
   13382:	4601      	mov	r1, r0
   13384:	2000      	movs	r0, #0
}
   13386:	b008      	add	sp, #32
   13388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1338c:	f7fe bf82 	b.w	12294 <le_remote_feat_complete>
   13390:	200001a8 	.word	0x200001a8
   13394:	200001b0 	.word	0x200001b0
   13398:	2000defc 	.word	0x2000defc
   1339c:	2000afa0 	.word	0x2000afa0
   133a0:	000281b4 	.word	0x000281b4
   133a4:	000281fc 	.word	0x000281fc
   133a8:	00028fcc 	.word	0x00028fcc
   133ac:	00028f90 	.word	0x00028f90
   133b0:	00028e78 	.word	0x00028e78
   133b4:	00028de0 	.word	0x00028de0
   133b8:	00028ff8 	.word	0x00028ff8
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   133bc:	4b89      	ldr	r3, [pc, #548]	; (135e4 <hci_evt_encode+0x5c0>)
   133be:	681b      	ldr	r3, [r3, #0]
   133c0:	061f      	lsls	r7, r3, #24
   133c2:	f57f aebd 	bpl.w	13140 <hci_evt_encode+0x11c>
   133c6:	3508      	adds	r5, #8
   133c8:	2102      	movs	r1, #2
   133ca:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   133cc:	f894 4020 	ldrb.w	r4, [r4, #32]
   133d0:	f013 fcac 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   133d4:	2308      	movs	r3, #8
	hdr->len = len;
   133d6:	2104      	movs	r1, #4
	hdr->evt = evt;
   133d8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   133da:	7041      	strb	r1, [r0, #1]
   133dc:	4628      	mov	r0, r5
   133de:	f013 fca5 	bl	26d2c <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   133e2:	fab4 f384 	clz	r3, r4
   133e6:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   133e8:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   133ea:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   133ee:	70c3      	strb	r3, [r0, #3]
   133f0:	e6a6      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   133f2:	4b7c      	ldr	r3, [pc, #496]	; (135e4 <hci_evt_encode+0x5c0>)
   133f4:	685b      	ldr	r3, [r3, #4]
   133f6:	0098      	lsls	r0, r3, #2
   133f8:	d571      	bpl.n	134de <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   133fa:	4b7b      	ldr	r3, [pc, #492]	; (135e8 <hci_evt_encode+0x5c4>)
   133fc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   133fe:	0699      	lsls	r1, r3, #26
   13400:	d56d      	bpl.n	134de <hci_evt_encode+0x4ba>
   13402:	3508      	adds	r5, #8
   13404:	2102      	movs	r1, #2
   13406:	4628      	mov	r0, r5
   13408:	f013 fc90 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   1340c:	233e      	movs	r3, #62	; 0x3e
   1340e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13410:	230b      	movs	r3, #11
   13412:	7043      	strb	r3, [r0, #1]
   13414:	2101      	movs	r1, #1
   13416:	4628      	mov	r0, r5
   13418:	f013 fc88 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   1341c:	2306      	movs	r3, #6
   1341e:	7003      	strb	r3, [r0, #0]
   13420:	210a      	movs	r1, #10
   13422:	4628      	mov	r0, r5
   13424:	f013 fc82 	bl	26d2c <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13428:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1342a:	8c23      	ldrh	r3, [r4, #32]
   1342c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1342e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13430:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   13432:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13434:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   13436:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13438:	8103      	strh	r3, [r0, #8]
   1343a:	e681      	b.n	13140 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1343c:	4b69      	ldr	r3, [pc, #420]	; (135e4 <hci_evt_encode+0x5c0>)
   1343e:	685b      	ldr	r3, [r3, #4]
   13440:	0099      	lsls	r1, r3, #2
   13442:	f57f ae7d 	bpl.w	13140 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   13446:	4b68      	ldr	r3, [pc, #416]	; (135e8 <hci_evt_encode+0x5c4>)
   13448:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1344a:	06da      	lsls	r2, r3, #27
   1344c:	f57f ae78 	bpl.w	13140 <hci_evt_encode+0x11c>
   13450:	3508      	adds	r5, #8
   13452:	2102      	movs	r1, #2
   13454:	4628      	mov	r0, r5
   13456:	f013 fc69 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   1345a:	233e      	movs	r3, #62	; 0x3e
   1345c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1345e:	230d      	movs	r3, #13
   13460:	7043      	strb	r3, [r0, #1]
   13462:	2101      	movs	r1, #1
   13464:	4628      	mov	r0, r5
   13466:	f013 fc61 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   1346a:	2305      	movs	r3, #5
   1346c:	7003      	strb	r3, [r0, #0]
   1346e:	210c      	movs	r1, #12
   13470:	4628      	mov	r0, r5
   13472:	f013 fc5b 	bl	26d2c <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   13476:	f104 0120 	add.w	r1, r4, #32
   1347a:	4605      	mov	r5, r0
   1347c:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   1347e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   13482:	f011 fbe5 	bl	24c50 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   13486:	2202      	movs	r2, #2
   13488:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1348c:	f105 000a 	add.w	r0, r5, #10
}
   13490:	b008      	add	sp, #32
   13492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   13496:	f011 bbdb 	b.w	24c50 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1349a:	4b52      	ldr	r3, [pc, #328]	; (135e4 <hci_evt_encode+0x5c0>)
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	061b      	lsls	r3, r3, #24
   134a0:	f04f 0400 	mov.w	r4, #0
   134a4:	f57f ae4c 	bpl.w	13140 <hci_evt_encode+0x11c>
   134a8:	3508      	adds	r5, #8
   134aa:	2102      	movs	r1, #2
   134ac:	4628      	mov	r0, r5
   134ae:	f013 fc3d 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   134b2:	2308      	movs	r3, #8
	hdr->len = len;
   134b4:	2104      	movs	r1, #4
	hdr->evt = evt;
   134b6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   134b8:	7041      	strb	r1, [r0, #1]
   134ba:	4628      	mov	r0, r5
   134bc:	f013 fc36 	bl	26d2c <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   134c0:	2301      	movs	r3, #1
	ep->status = err;
   134c2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   134c4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   134c8:	70c3      	strb	r3, [r0, #3]
   134ca:	e639      	b.n	13140 <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
   134cc:	7fa0      	ldrb	r0, [r4, #30]
   134ce:	f104 0325 	add.w	r3, r4, #37	; 0x25
   134d2:	22ff      	movs	r2, #255	; 0xff
   134d4:	f104 011f 	add.w	r1, r4, #31
   134d8:	f006 fe3a 	bl	1a150 <ll_rl_crpa_set>
   134dc:	e5dd      	b.n	1309a <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   134de:	2300      	movs	r3, #0
   134e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   134e4:	9300      	str	r3, [sp, #0]
   134e6:	221a      	movs	r2, #26
   134e8:	2102      	movs	r1, #2
   134ea:	4630      	mov	r0, r6
   134ec:	f002 fc46 	bl	15d7c <ll_conn_update>
		return;
   134f0:	e626      	b.n	13140 <hci_evt_encode+0x11c>
   134f2:	3508      	adds	r5, #8
   134f4:	2102      	movs	r1, #2
   134f6:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   134f8:	f1b8 0f00 	cmp.w	r8, #0
   134fc:	d14c      	bne.n	13598 <hci_evt_encode+0x574>
   134fe:	f013 fc15 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   13502:	233e      	movs	r3, #62	; 0x3e
   13504:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13506:	2313      	movs	r3, #19
   13508:	7043      	strb	r3, [r0, #1]
   1350a:	2101      	movs	r1, #1
   1350c:	4628      	mov	r0, r5
   1350e:	f013 fc0d 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   13512:	2301      	movs	r3, #1
   13514:	7003      	strb	r3, [r0, #0]
   13516:	2112      	movs	r1, #18
   13518:	4628      	mov	r0, r5
   1351a:	f013 fc07 	bl	26d2c <net_buf_simple_add>
   1351e:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   13520:	2212      	movs	r2, #18
   13522:	4641      	mov	r1, r8
   13524:	f011 fbbf 	bl	24ca6 <memset>
		lecc->status = status;
   13528:	7027      	strb	r7, [r4, #0]
		return;
   1352a:	e609      	b.n	13140 <hci_evt_encode+0x11c>
   1352c:	3508      	adds	r5, #8
   1352e:	2102      	movs	r1, #2
   13530:	4628      	mov	r0, r5
   13532:	f013 fbfb 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   13536:	233e      	movs	r3, #62	; 0x3e
   13538:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1353a:	2313      	movs	r3, #19
   1353c:	7043      	strb	r3, [r0, #1]
   1353e:	2101      	movs	r1, #1
   13540:	4628      	mov	r0, r5
   13542:	f013 fbf3 	bl	26d2c <net_buf_simple_add>
   13546:	4603      	mov	r3, r0
	me->subevent = subevt;
   13548:	2201      	movs	r2, #1
   1354a:	701a      	strb	r2, [r3, #0]
   1354c:	4628      	mov	r0, r5
   1354e:	2112      	movs	r1, #18
   13550:	f013 fbec 	bl	26d2c <net_buf_simple_add>
	lecc->status = 0x00;
   13554:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   13556:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   1355a:	7f63      	ldrb	r3, [r4, #29]
   1355c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1355e:	7fa3      	ldrb	r3, [r4, #30]
   13560:	f003 0301 	and.w	r3, r3, #1
   13564:	4605      	mov	r5, r0
   13566:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   13568:	2206      	movs	r2, #6
   1356a:	f104 011f 	add.w	r1, r4, #31
   1356e:	3005      	adds	r0, #5
   13570:	f011 fb6e 	bl	24c50 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13574:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   13576:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   13578:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1357a:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1357e:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13582:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   13586:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1358a:	746b      	strb	r3, [r5, #17]
   1358c:	e5d8      	b.n	13140 <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1358e:	462b      	mov	r3, r5
   13590:	4632      	mov	r2, r6
   13592:	2100      	movs	r1, #0
   13594:	201a      	movs	r0, #26
   13596:	e6f6      	b.n	13386 <hci_evt_encode+0x362>
   13598:	f013 fbc8 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   1359c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1359e:	231f      	movs	r3, #31
	hdr->evt = evt;
   135a0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   135a2:	7043      	strb	r3, [r0, #1]
   135a4:	2101      	movs	r1, #1
   135a6:	4628      	mov	r0, r5
   135a8:	f013 fbc0 	bl	26d2c <net_buf_simple_add>
	me->subevent = subevt;
   135ac:	230a      	movs	r3, #10
   135ae:	7003      	strb	r3, [r0, #0]
   135b0:	211e      	movs	r1, #30
   135b2:	4628      	mov	r0, r5
   135b4:	f013 fbba 	bl	26d2c <net_buf_simple_add>
   135b8:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   135ba:	221e      	movs	r2, #30
   135bc:	2100      	movs	r1, #0
   135be:	f011 fb72 	bl	24ca6 <memset>
			leecc->status = status;
   135c2:	7027      	strb	r7, [r4, #0]
			return;
   135c4:	e5bc      	b.n	13140 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   135c6:	4a09      	ldr	r2, [pc, #36]	; (135ec <hci_evt_encode+0x5c8>)
   135c8:	4909      	ldr	r1, [pc, #36]	; (135f0 <hci_evt_encode+0x5cc>)
   135ca:	480a      	ldr	r0, [pc, #40]	; (135f4 <hci_evt_encode+0x5d0>)
   135cc:	f241 6385 	movw	r3, #5765	; 0x1685
   135d0:	f00e fe82 	bl	222d8 <printk>
   135d4:	4040      	eors	r0, r0
   135d6:	f380 8811 	msr	BASEPRI, r0
   135da:	f04f 0003 	mov.w	r0, #3
   135de:	df02      	svc	2
		return;
   135e0:	e5ae      	b.n	13140 <hci_evt_encode+0x11c>
   135e2:	bf00      	nop
   135e4:	200001a8 	.word	0x200001a8
   135e8:	200001b0 	.word	0x200001b0
   135ec:	00028f90 	.word	0x00028f90
   135f0:	00028e78 	.word	0x00028e78
   135f4:	00028de0 	.word	0x00028de0

000135f8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   135f8:	b570      	push	{r4, r5, r6, lr}
   135fa:	f100 0408 	add.w	r4, r0, #8
   135fe:	460e      	mov	r6, r1
   13600:	4620      	mov	r0, r4
   13602:	2102      	movs	r1, #2
   13604:	4615      	mov	r5, r2
   13606:	f013 fb91 	bl	26d2c <net_buf_simple_add>
	hdr->evt = evt;
   1360a:	2313      	movs	r3, #19
	hdr->len = len;
   1360c:	2105      	movs	r1, #5
	hdr->evt = evt;
   1360e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13610:	7041      	strb	r1, [r0, #1]
   13612:	4620      	mov	r0, r4
   13614:	f013 fb8a 	bl	26d2c <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   13618:	2301      	movs	r3, #1
   1361a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1361c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   13620:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   13624:	bd70      	pop	{r4, r5, r6, pc}
   13626:	bf00      	nop

00013628 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13628:	7903      	ldrb	r3, [r0, #4]
   1362a:	2b03      	cmp	r3, #3
   1362c:	d009      	beq.n	13642 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1362e:	2b13      	cmp	r3, #19
   13630:	d005      	beq.n	1363e <hci_get_class+0x16>
   13632:	3b14      	subs	r3, #20
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   13634:	2b05      	cmp	r3, #5
   13636:	bf94      	ite	ls
   13638:	2003      	movls	r0, #3
   1363a:	2000      	movhi	r0, #0
   1363c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1363e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   13640:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   13642:	7f03      	ldrb	r3, [r0, #28]
   13644:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   13648:	2b03      	cmp	r3, #3
   1364a:	bf0c      	ite	eq
   1364c:	2004      	moveq	r0, #4
   1364e:	2005      	movne	r0, #5
   13650:	4770      	bx	lr
   13652:	bf00      	nop

00013654 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   13654:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   13656:	4b0b      	ldr	r3, [pc, #44]	; (13684 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13658:	490b      	ldr	r1, [pc, #44]	; (13688 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1365a:	4a0c      	ldr	r2, [pc, #48]	; (1368c <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   1365c:	f04f 34ff 	mov.w	r4, #4294967295
   13660:	f641 75ff 	movw	r5, #8191	; 0x1fff
   13664:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13668:	2400      	movs	r4, #0
   1366a:	2500      	movs	r5, #0
   1366c:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   13670:	4b07      	ldr	r3, [pc, #28]	; (13690 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   13672:	201f      	movs	r0, #31
   13674:	2100      	movs	r1, #0
   13676:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   1367a:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1367c:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   1367e:	601a      	str	r2, [r3, #0]
}
   13680:	4770      	bx	lr
   13682:	bf00      	nop
   13684:	200001a8 	.word	0x200001a8
   13688:	2000afa0 	.word	0x2000afa0
   1368c:	200001b0 	.word	0x200001b0
   13690:	2000defc 	.word	0x2000defc

00013694 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   13694:	f007 bc96 	b.w	1afc4 <lll_csrand_get>

00013698 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   13698:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1369a:	2300      	movs	r3, #0
   1369c:	f009 f992 	bl	1c9c4 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   136a0:	2000      	movs	r0, #0
   136a2:	bd08      	pop	{r3, pc}

000136a4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   136a4:	b510      	push	{r4, lr}
   136a6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   136a8:	f007 fcc2 	bl	1b030 <lll_reset>
	LL_ASSERT(!err);
   136ac:	b950      	cbnz	r0, 136c4 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   136ae:	f007 ffed 	bl	1b68c <lll_adv_reset>
	LL_ASSERT(!err);
   136b2:	b9c0      	cbnz	r0, 136e6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   136b4:	f008 fc80 	bl	1bfb8 <lll_conn_reset>
	LL_ASSERT(!err);
   136b8:	bb30      	cbnz	r0, 13708 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   136ba:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   136bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136c0:	f00d baaa 	b.w	20c18 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   136c4:	4a19      	ldr	r2, [pc, #100]	; (1372c <perform_lll_reset+0x88>)
   136c6:	491a      	ldr	r1, [pc, #104]	; (13730 <perform_lll_reset+0x8c>)
   136c8:	481a      	ldr	r0, [pc, #104]	; (13734 <perform_lll_reset+0x90>)
   136ca:	f240 637c 	movw	r3, #1660	; 0x67c
   136ce:	f00e fe03 	bl	222d8 <printk>
   136d2:	4040      	eors	r0, r0
   136d4:	f380 8811 	msr	BASEPRI, r0
   136d8:	f04f 0003 	mov.w	r0, #3
   136dc:	df02      	svc	2
	err = lll_adv_reset();
   136de:	f007 ffd5 	bl	1b68c <lll_adv_reset>
	LL_ASSERT(!err);
   136e2:	2800      	cmp	r0, #0
   136e4:	d0e6      	beq.n	136b4 <perform_lll_reset+0x10>
   136e6:	4a11      	ldr	r2, [pc, #68]	; (1372c <perform_lll_reset+0x88>)
   136e8:	4911      	ldr	r1, [pc, #68]	; (13730 <perform_lll_reset+0x8c>)
   136ea:	4812      	ldr	r0, [pc, #72]	; (13734 <perform_lll_reset+0x90>)
   136ec:	f240 6381 	movw	r3, #1665	; 0x681
   136f0:	f00e fdf2 	bl	222d8 <printk>
   136f4:	4040      	eors	r0, r0
   136f6:	f380 8811 	msr	BASEPRI, r0
   136fa:	f04f 0003 	mov.w	r0, #3
   136fe:	df02      	svc	2
	err = lll_conn_reset();
   13700:	f008 fc5a 	bl	1bfb8 <lll_conn_reset>
	LL_ASSERT(!err);
   13704:	2800      	cmp	r0, #0
   13706:	d0d8      	beq.n	136ba <perform_lll_reset+0x16>
   13708:	4a08      	ldr	r2, [pc, #32]	; (1372c <perform_lll_reset+0x88>)
   1370a:	4909      	ldr	r1, [pc, #36]	; (13730 <perform_lll_reset+0x8c>)
   1370c:	4809      	ldr	r0, [pc, #36]	; (13734 <perform_lll_reset+0x90>)
   1370e:	f240 638d 	movw	r3, #1677	; 0x68d
   13712:	f00e fde1 	bl	222d8 <printk>
   13716:	4040      	eors	r0, r0
   13718:	f380 8811 	msr	BASEPRI, r0
   1371c:	f04f 0003 	mov.w	r0, #3
   13720:	df02      	svc	2
   13722:	4620      	mov	r0, r4
}
   13724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13728:	f00d ba76 	b.w	20c18 <z_impl_k_sem_give>
   1372c:	00029024 	.word	0x00029024
   13730:	00029060 	.word	0x00029060
   13734:	00028de0 	.word	0x00028de0

00013738 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   13738:	6008      	str	r0, [r1, #0]
   1373a:	4801      	ldr	r0, [pc, #4]	; (13740 <ull_ticker_status_give+0x8>)
   1373c:	f00d ba6c 	b.w	20c18 <z_impl_k_sem_give>
   13740:	2000e2f4 	.word	0x2000e2f4

00013744 <disabled_cb>:
   13744:	f00d ba68 	b.w	20c18 <z_impl_k_sem_give>

00013748 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   13748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1374c:	4e2f      	ldr	r6, [pc, #188]	; (1380c <tx_cmplt_get+0xc4>)
{
   1374e:	460c      	mov	r4, r1
   13750:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   13752:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13754:	7872      	ldrb	r2, [r6, #1]
   13756:	7831      	ldrb	r1, [r6, #0]
   13758:	429a      	cmp	r2, r3
   1375a:	bf9c      	itt	ls
   1375c:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   1375e:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   13760:	4599      	cmp	r9, r3
{
   13762:	4682      	mov	sl, r0
   13764:	d049      	beq.n	137fa <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   13766:	fb13 f101 	smulbb	r1, r3, r1
   1376a:	4d29      	ldr	r5, [pc, #164]	; (13810 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   1376c:	3301      	adds	r3, #1
   1376e:	b2db      	uxtb	r3, r3
		i = 0U;
   13770:	429a      	cmp	r2, r3
   13772:	bf08      	it	eq
   13774:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   13776:	186a      	adds	r2, r5, r1

	*idx = i;
   13778:	7023      	strb	r3, [r4, #0]
   1377a:	d03e      	beq.n	137fa <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
   1377c:	5a6b      	ldrh	r3, [r5, r1]
   1377e:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   13780:	2700      	movs	r7, #0
   13782:	f04f 0802 	mov.w	r8, #2
   13786:	f04f 0b01 	mov.w	fp, #1
   1378a:	e022      	b.n	137d2 <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   1378c:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   1378e:	f030 0303 	bics.w	r3, r0, #3
   13792:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
   13796:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   13798:	d129      	bne.n	137ee <tx_cmplt_get+0xa6>
	if (*idx >= count) {
   1379a:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1379c:	7872      	ldrb	r2, [r6, #1]
   1379e:	7831      	ldrb	r1, [r6, #0]
   137a0:	429a      	cmp	r2, r3
   137a2:	bf9c      	itt	ls
   137a4:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   137a6:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   137a8:	454b      	cmp	r3, r9
   137aa:	d027      	beq.n	137fc <tx_cmplt_get+0xb4>
	i = *idx + 1;
   137ac:	f103 0c01 	add.w	ip, r3, #1
   137b0:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   137b4:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   137b8:	4562      	cmp	r2, ip
   137ba:	bf08      	it	eq
   137bc:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   137c0:	18ea      	adds	r2, r5, r3
	*idx = i;
   137c2:	f884 c000 	strb.w	ip, [r4]
   137c6:	d019      	beq.n	137fc <tx_cmplt_get+0xb4>
   137c8:	5ae9      	ldrh	r1, [r5, r3]
   137ca:	f8ba 3000 	ldrh.w	r3, [sl]
   137ce:	4299      	cmp	r1, r3
   137d0:	d114      	bne.n	137fc <tx_cmplt_get+0xb4>
		node_tx = tx->node;
   137d2:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   137d4:	2801      	cmp	r0, #1
   137d6:	d9d9      	bls.n	1378c <tx_cmplt_get+0x44>
   137d8:	f030 0303 	bics.w	r3, r0, #3
   137dc:	d00a      	beq.n	137f4 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   137de:	7903      	ldrb	r3, [r0, #4]
   137e0:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   137e4:	3b01      	subs	r3, #1
   137e6:	2b01      	cmp	r3, #1
   137e8:	d90b      	bls.n	13802 <tx_cmplt_get+0xba>
   137ea:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
   137ee:	f002 fa6f 	bl	15cd0 <ll_tx_mem_release>
   137f2:	e7d2      	b.n	1379a <tx_cmplt_get+0x52>
   137f4:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   137f8:	e7cf      	b.n	1379a <tx_cmplt_get+0x52>
		return 0;
   137fa:	2700      	movs	r7, #0

	return cmplt;
}
   137fc:	4638      	mov	r0, r7
   137fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   13802:	3701      	adds	r7, #1
   13804:	f8c2 b004 	str.w	fp, [r2, #4]
   13808:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   1380a:	e7f0      	b.n	137ee <tx_cmplt_get+0xa6>
   1380c:	20000580 	.word	0x20000580
   13810:	20000584 	.word	0x20000584

00013814 <rx_alloc>:
{
   13814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   13818:	4e37      	ldr	r6, [pc, #220]	; (138f8 <rx_alloc+0xe4>)
   1381a:	7833      	ldrb	r3, [r6, #0]
   1381c:	4298      	cmp	r0, r3
   1381e:	bf28      	it	cs
   13820:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13822:	b380      	cbz	r0, 13886 <rx_alloc+0x72>
   13824:	4d35      	ldr	r5, [pc, #212]	; (138fc <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   13826:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 13900 <rx_alloc+0xec>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1382a:	78ec      	ldrb	r4, [r5, #3]
   1382c:	f100 39ff 	add.w	r9, r0, #4294967295
   13830:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
   13834:	1d37      	adds	r7, r6, #4
	if (last == count) {
   13836:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13838:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1383a:	3401      	adds	r4, #1
   1383c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1383e:	42a2      	cmp	r2, r4
   13840:	bf08      	it	eq
   13842:	2400      	moveq	r4, #0
	if (last == first) {
   13844:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   13846:	4638      	mov	r0, r7
   13848:	d04b      	beq.n	138e2 <rx_alloc+0xce>
   1384a:	f7fd f825 	bl	10898 <mem_acquire>
   1384e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13850:	4640      	mov	r0, r8
		if (!link) {
   13852:	f1ba 0f00 	cmp.w	sl, #0
   13856:	d042      	beq.n	138de <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   13858:	f7fd f81e 	bl	10898 <mem_acquire>
		if (!rx) {
   1385c:	2800      	cmp	r0, #0
   1385e:	d045      	beq.n	138ec <rx_alloc+0xd8>
		rx->link = link;
   13860:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13864:	78ea      	ldrb	r2, [r5, #3]
   13866:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13868:	fb02 5303 	mla	r3, r2, r3, r5
   1386c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1386e:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13870:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13872:	f109 39ff 	add.w	r9, r9, #4294967295
	mem_link_rx.quota_pdu += delta;
   13876:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13878:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
   1387c:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1387e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   13882:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13884:	d1d7      	bne.n	13836 <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
   13886:	b353      	cbz	r3, 138de <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13888:	4d1e      	ldr	r5, [pc, #120]	; (13904 <rx_alloc+0xf0>)
		link = mem_acquire(&mem_link_rx.free);
   1388a:	4f1f      	ldr	r7, [pc, #124]	; (13908 <rx_alloc+0xf4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1388c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1388e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 13900 <rx_alloc+0xec>
		link->mem = NULL;
   13892:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   13896:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13898:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1389a:	3401      	adds	r4, #1
   1389c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1389e:	42a2      	cmp	r2, r4
   138a0:	bf08      	it	eq
   138a2:	2400      	moveq	r4, #0
	if (last == first) {
   138a4:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   138a6:	4638      	mov	r0, r7
   138a8:	d019      	beq.n	138de <rx_alloc+0xca>
   138aa:	f7fc fff5 	bl	10898 <mem_acquire>
   138ae:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   138b0:	4640      	mov	r0, r8
		if (!link) {
   138b2:	f1ba 0f00 	cmp.w	sl, #0
   138b6:	d012      	beq.n	138de <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   138b8:	f7fc ffee 	bl	10898 <mem_acquire>
		if (!rx) {
   138bc:	b1b0      	cbz	r0, 138ec <rx_alloc+0xd8>
		link->mem = NULL;
   138be:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   138c2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   138c6:	78ea      	ldrb	r2, [r5, #3]
   138c8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   138ca:	fb02 5303 	mla	r3, r2, r3, r5
   138ce:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   138d0:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   138d2:	70ec      	strb	r4, [r5, #3]
   138d4:	3b01      	subs	r3, #1
   138d6:	b2db      	uxtb	r3, r3
   138d8:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   138da:	2b00      	cmp	r3, #0
   138dc:	d1db      	bne.n	13896 <rx_alloc+0x82>
}
   138de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
   138e2:	f1b9 0f00 	cmp.w	r9, #0
   138e6:	d0fa      	beq.n	138de <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
   138e8:	7833      	ldrb	r3, [r6, #0]
   138ea:	e7cc      	b.n	13886 <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
   138ec:	4650      	mov	r0, sl
   138ee:	4906      	ldr	r1, [pc, #24]	; (13908 <rx_alloc+0xf4>)
}
   138f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   138f4:	f7fc bfea 	b.w	108cc <mem_release>
   138f8:	2000dfec 	.word	0x2000dfec
   138fc:	20000444 	.word	0x20000444
   13900:	2000e054 	.word	0x2000e054
   13904:	20000430 	.word	0x20000430
   13908:	2000dff0 	.word	0x2000dff0

0001390c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1390c:	4b3a      	ldr	r3, [pc, #232]	; (139f8 <init_reset+0xec>)
{
   1390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13912:	1d18      	adds	r0, r3, #4
   13914:	2203      	movs	r2, #3
   13916:	2134      	movs	r1, #52	; 0x34
   13918:	f7fc ff8e 	bl	10838 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1391c:	4b37      	ldr	r3, [pc, #220]	; (139fc <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1391e:	4d38      	ldr	r5, [pc, #224]	; (13a00 <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
   13920:	4f36      	ldr	r7, [pc, #216]	; (139fc <init_reset+0xf0>)
		rx = mem_acquire(&mem_done.free);
   13922:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 139f8 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   13926:	2203      	movs	r2, #3
   13928:	2108      	movs	r1, #8
   1392a:	1d18      	adds	r0, r3, #4
   1392c:	f7fc ff84 	bl	10838 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13930:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   13932:	786a      	ldrb	r2, [r5, #1]
   13934:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13936:	3401      	adds	r4, #1
   13938:	b2e4      	uxtb	r4, r4
		last = 0U;
   1393a:	42a2      	cmp	r2, r4
   1393c:	bf08      	it	eq
   1393e:	2400      	moveq	r4, #0
	if (last == first) {
   13940:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   13942:	4638      	mov	r0, r7
   13944:	d013      	beq.n	1396e <init_reset+0x62>
   13946:	f7fc ffa7 	bl	10898 <mem_acquire>
   1394a:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   1394c:	4640      	mov	r0, r8
		if (!link) {
   1394e:	b176      	cbz	r6, 1396e <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   13950:	f7fc ffa2 	bl	10898 <mem_acquire>
		if (!rx) {
   13954:	b138      	cbz	r0, 13966 <init_reset+0x5a>
		rx->link = link;
   13956:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13958:	78ea      	ldrb	r2, [r5, #3]
   1395a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1395c:	fb02 5303 	mla	r3, r2, r3, r5
   13960:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13962:	70ec      	strb	r4, [r5, #3]
}
   13964:	e7e5      	b.n	13932 <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   13966:	4925      	ldr	r1, [pc, #148]	; (139fc <init_reset+0xf0>)
   13968:	4630      	mov	r0, r6
   1396a:	f7fc ffaf 	bl	108cc <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1396e:	4b25      	ldr	r3, [pc, #148]	; (13a04 <init_reset+0xf8>)
   13970:	2209      	movs	r2, #9
   13972:	1d18      	adds	r0, r3, #4
   13974:	2148      	movs	r1, #72	; 0x48
   13976:	f7fc ff5f 	bl	10838 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1397a:	4b23      	ldr	r3, [pc, #140]	; (13a08 <init_reset+0xfc>)
   1397c:	220c      	movs	r2, #12
   1397e:	1d18      	adds	r0, r3, #4
   13980:	2108      	movs	r1, #8
   13982:	f7fc ff59 	bl	10838 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   13986:	4820      	ldr	r0, [pc, #128]	; (13a08 <init_reset+0xfc>)
   13988:	f7fc ff86 	bl	10898 <mem_acquire>
	LL_ASSERT(link);
   1398c:	4604      	mov	r4, r0
   1398e:	b1b8      	cbz	r0, 139c0 <init_reset+0xb4>
	MEMQ_INIT(ull_rx, link);
   13990:	4a1e      	ldr	r2, [pc, #120]	; (13a0c <init_reset+0x100>)
   13992:	4620      	mov	r0, r4
   13994:	1f11      	subs	r1, r2, #4
   13996:	f7fc ffd5 	bl	10944 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1399a:	481b      	ldr	r0, [pc, #108]	; (13a08 <init_reset+0xfc>)
   1399c:	f7fc ff7c 	bl	10898 <mem_acquire>
	LL_ASSERT(link);
   139a0:	4604      	mov	r4, r0
   139a2:	b1d8      	cbz	r0, 139dc <init_reset+0xd0>
	MEMQ_INIT(ll_rx, link);
   139a4:	4a1a      	ldr	r2, [pc, #104]	; (13a10 <init_reset+0x104>)
   139a6:	4620      	mov	r0, r4
   139a8:	1f11      	subs	r1, r2, #4
   139aa:	f7fc ffcb 	bl	10944 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   139ae:	4b19      	ldr	r3, [pc, #100]	; (13a14 <init_reset+0x108>)
   139b0:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   139b2:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   139b4:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   139b6:	f7ff ff2d 	bl	13814 <rx_alloc>
}
   139ba:	2000      	movs	r0, #0
   139bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
   139c0:	4a15      	ldr	r2, [pc, #84]	; (13a18 <init_reset+0x10c>)
   139c2:	4916      	ldr	r1, [pc, #88]	; (13a1c <init_reset+0x110>)
   139c4:	4816      	ldr	r0, [pc, #88]	; (13a20 <init_reset+0x114>)
   139c6:	f240 6363 	movw	r3, #1635	; 0x663
   139ca:	f00e fc85 	bl	222d8 <printk>
   139ce:	4040      	eors	r0, r0
   139d0:	f380 8811 	msr	BASEPRI, r0
   139d4:	f04f 0003 	mov.w	r0, #3
   139d8:	df02      	svc	2
   139da:	e7d9      	b.n	13990 <init_reset+0x84>
	LL_ASSERT(link);
   139dc:	4a0e      	ldr	r2, [pc, #56]	; (13a18 <init_reset+0x10c>)
   139de:	490f      	ldr	r1, [pc, #60]	; (13a1c <init_reset+0x110>)
   139e0:	480f      	ldr	r0, [pc, #60]	; (13a20 <init_reset+0x114>)
   139e2:	f240 636a 	movw	r3, #1642	; 0x66a
   139e6:	f00e fc77 	bl	222d8 <printk>
   139ea:	4040      	eors	r0, r0
   139ec:	f380 8811 	msr	BASEPRI, r0
   139f0:	f04f 0003 	mov.w	r0, #3
   139f4:	df02      	svc	2
   139f6:	e7d5      	b.n	139a4 <init_reset+0x98>
   139f8:	2000df30 	.word	0x2000df30
   139fc:	2000dfd0 	.word	0x2000dfd0
   13a00:	2000041c 	.word	0x2000041c
   13a04:	2000e054 	.word	0x2000e054
   13a08:	2000dff0 	.word	0x2000dff0
   13a0c:	2000e2ec 	.word	0x2000e2ec
   13a10:	2000e2e4 	.word	0x2000e2e4
   13a14:	2000dfec 	.word	0x2000dfec
   13a18:	00029024 	.word	0x00029024
   13a1c:	000292ec 	.word	0x000292ec
   13a20:	00028de0 	.word	0x00028de0

00013a24 <rx_demux>:
{
   13a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a28:	4c9e      	ldr	r4, [pc, #632]	; (13ca4 <rx_demux+0x280>)
	k_sem_give(sem_recv);
   13a2a:	4e9f      	ldr	r6, [pc, #636]	; (13ca8 <rx_demux+0x284>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   13a2c:	f8df b27c 	ldr.w	fp, [pc, #636]	; 13cac <rx_demux+0x288>
{
   13a30:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13a32:	e9d4 0100 	ldrd	r0, r1, [r4]
   13a36:	aa03      	add	r2, sp, #12
   13a38:	f7fc ff9c 	bl	10974 <memq_peek>
		if (link) {
   13a3c:	4607      	mov	r7, r0
   13a3e:	2800      	cmp	r0, #0
   13a40:	d036      	beq.n	13ab0 <rx_demux+0x8c>
			LL_ASSERT(rx);
   13a42:	9b03      	ldr	r3, [sp, #12]
   13a44:	2b00      	cmp	r3, #0
   13a46:	f000 811e 	beq.w	13c86 <rx_demux+0x262>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13a4a:	7818      	ldrb	r0, [r3, #0]
   13a4c:	aa04      	add	r2, sp, #16
   13a4e:	a902      	add	r1, sp, #8
   13a50:	f005 fd58 	bl	19504 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   13a54:	4605      	mov	r5, r0
   13a56:	2800      	cmp	r0, #0
   13a58:	d057      	beq.n	13b0a <rx_demux+0xe6>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   13a5a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   13a5e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   13a62:	f891 9000 	ldrb.w	r9, [r1]
   13a66:	f8ad 200a 	strh.w	r2, [sp, #10]
   13a6a:	f10d 0814 	add.w	r8, sp, #20
   13a6e:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13a70:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13a74:	f005 fd62 	bl	1953c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   13a78:	4629      	mov	r1, r5
   13a7a:	9a05      	ldr	r2, [sp, #20]
   13a7c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13a80:	f005 fda6 	bl	195d0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   13a84:	4628      	mov	r0, r5
   13a86:	f005 fd15 	bl	194b4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13a8a:	4642      	mov	r2, r8
   13a8c:	4639      	mov	r1, r7
   13a8e:	4648      	mov	r0, r9
   13a90:	f005 fd38 	bl	19504 <ull_conn_ack_by_last_peek>
	} while (link);
   13a94:	4605      	mov	r5, r0
   13a96:	2800      	cmp	r0, #0
   13a98:	d1ec      	bne.n	13a74 <rx_demux+0x50>
	k_sem_give(sem_recv);
   13a9a:	6830      	ldr	r0, [r6, #0]
   13a9c:	f00d f8bc 	bl	20c18 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13aa0:	e9d4 0100 	ldrd	r0, r1, [r4]
   13aa4:	aa03      	add	r2, sp, #12
   13aa6:	f7fc ff65 	bl	10974 <memq_peek>
		if (link) {
   13aaa:	4607      	mov	r7, r0
   13aac:	2800      	cmp	r0, #0
   13aae:	d1c8      	bne.n	13a42 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   13ab0:	aa04      	add	r2, sp, #16
   13ab2:	a902      	add	r1, sp, #8
   13ab4:	f10d 0007 	add.w	r0, sp, #7
   13ab8:	f005 fd08 	bl	194cc <ull_conn_ack_peek>
			if (link) {
   13abc:	4605      	mov	r5, r0
   13abe:	2800      	cmp	r0, #0
   13ac0:	f000 80de 	beq.w	13c80 <rx_demux+0x25c>
				rx_demux_conn_tx_ack(ack_last, handle,
   13ac4:	9b04      	ldr	r3, [sp, #16]
   13ac6:	9305      	str	r3, [sp, #20]
   13ac8:	f89d 9007 	ldrb.w	r9, [sp, #7]
   13acc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13ad0:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13ad4:	f10d 0814 	add.w	r8, sp, #20
   13ad8:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13adc:	f005 fd2e 	bl	1953c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   13ae0:	4629      	mov	r1, r5
   13ae2:	9a05      	ldr	r2, [sp, #20]
   13ae4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13ae8:	f005 fd72 	bl	195d0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   13aec:	4628      	mov	r0, r5
   13aee:	f005 fce1 	bl	194b4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13af2:	4642      	mov	r2, r8
   13af4:	4639      	mov	r1, r7
   13af6:	4648      	mov	r0, r9
   13af8:	f005 fd04 	bl	19504 <ull_conn_ack_by_last_peek>
	} while (link);
   13afc:	4605      	mov	r5, r0
   13afe:	2800      	cmp	r0, #0
   13b00:	d1ec      	bne.n	13adc <rx_demux+0xb8>
	k_sem_give(sem_recv);
   13b02:	6830      	ldr	r0, [r6, #0]
   13b04:	f00d f888 	bl	20c18 <z_impl_k_sem_give>
			if (nack) {
   13b08:	e7ca      	b.n	13aa0 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   13b0a:	9b03      	ldr	r3, [sp, #12]
   13b0c:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   13b0e:	791b      	ldrb	r3, [r3, #4]
   13b10:	3b01      	subs	r3, #1
   13b12:	2b13      	cmp	r3, #19
   13b14:	d80b      	bhi.n	13b2e <rx_demux+0x10a>
   13b16:	e8df f003 	tbb	[pc, r3]
   13b1a:	2918      	.short	0x2918
   13b1c:	0a0a0aad 	.word	0x0a0a0aad
   13b20:	0a0a0a0a 	.word	0x0a0a0a0a
   13b24:	0a0a0a0a 	.word	0x0a0a0a0a
   13b28:	0a0a0a0a 	.word	0x0a0a0a0a
   13b2c:	18a3      	.short	0x18a3
		LL_ASSERT(0);
   13b2e:	4a60      	ldr	r2, [pc, #384]	; (13cb0 <rx_demux+0x28c>)
   13b30:	4960      	ldr	r1, [pc, #384]	; (13cb4 <rx_demux+0x290>)
   13b32:	4861      	ldr	r0, [pc, #388]	; (13cb8 <rx_demux+0x294>)
   13b34:	f640 0334 	movw	r3, #2100	; 0x834
   13b38:	f00e fbce 	bl	222d8 <printk>
   13b3c:	4040      	eors	r0, r0
   13b3e:	f380 8811 	msr	BASEPRI, r0
   13b42:	f04f 0003 	mov.w	r0, #3
   13b46:	df02      	svc	2
			if (nack) {
   13b48:	e773      	b.n	13a32 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13b4a:	4956      	ldr	r1, [pc, #344]	; (13ca4 <rx_demux+0x280>)
   13b4c:	6860      	ldr	r0, [r4, #4]
   13b4e:	2200      	movs	r2, #0
   13b50:	f7fc ff18 	bl	10984 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13b54:	4b59      	ldr	r3, [pc, #356]	; (13cbc <rx_demux+0x298>)
		ll_rx_put(link, rx);
   13b56:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13b58:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13b5a:	4638      	mov	r0, r7
   13b5c:	4a58      	ldr	r2, [pc, #352]	; (13cc0 <rx_demux+0x29c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13b5e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13b60:	f7fc fefe 	bl	10960 <memq_enqueue>
	k_sem_give(sem_recv);
   13b64:	6830      	ldr	r0, [r6, #0]
   13b66:	f00d f857 	bl	20c18 <z_impl_k_sem_give>
			if (nack) {
   13b6a:	e799      	b.n	13aa0 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13b6c:	494d      	ldr	r1, [pc, #308]	; (13ca4 <rx_demux+0x280>)
   13b6e:	6860      	ldr	r0, [r4, #4]
   13b70:	2200      	movs	r2, #0
   13b72:	f7fc ff07 	bl	10984 <memq_dequeue>
		rx_demux_event_done(link, rx);
   13b76:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   13b78:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   13b7c:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   13b80:	b17b      	cbz	r3, 13ba2 <rx_demux+0x17e>
   13b82:	2b01      	cmp	r3, #1
   13b84:	f000 80c2 	beq.w	13d0c <rx_demux+0x2e8>
		LL_ASSERT(0);
   13b88:	4a49      	ldr	r2, [pc, #292]	; (13cb0 <rx_demux+0x28c>)
   13b8a:	494a      	ldr	r1, [pc, #296]	; (13cb4 <rx_demux+0x290>)
   13b8c:	484a      	ldr	r0, [pc, #296]	; (13cb8 <rx_demux+0x294>)
   13b8e:	f640 0374 	movw	r3, #2164	; 0x874
   13b92:	f00e fba1 	bl	222d8 <printk>
   13b96:	4040      	eors	r0, r0
   13b98:	f380 8811 	msr	BASEPRI, r0
   13b9c:	f04f 0003 	mov.w	r0, #3
   13ba0:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13ba2:	4a48      	ldr	r2, [pc, #288]	; (13cc4 <rx_demux+0x2a0>)
	done->extra.type = 0U;
   13ba4:	2300      	movs	r3, #0
   13ba6:	f885 3020 	strb.w	r3, [r5, #32]
	last = last + 1;
   13baa:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   13bac:	7851      	ldrb	r1, [r2, #1]
	last = last + 1;
   13bae:	3301      	adds	r3, #1
   13bb0:	b2db      	uxtb	r3, r3
		last = 0U;
   13bb2:	4299      	cmp	r1, r3
   13bb4:	bf08      	it	eq
   13bb6:	2300      	moveq	r3, #0
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13bb8:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   13bba:	4299      	cmp	r1, r3
   13bbc:	f000 80b7 	beq.w	13d2e <rx_demux+0x30a>
	done->hdr.link = link;
   13bc0:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13bc2:	78d0      	ldrb	r0, [r2, #3]
   13bc4:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13bc6:	fb00 2101 	mla	r1, r0, r1, r2
   13bca:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   13bcc:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   13bce:	4d3e      	ldr	r5, [pc, #248]	; (13cc8 <rx_demux+0x2a4>)
   13bd0:	78aa      	ldrb	r2, [r5, #2]
	if (first == last) {
   13bd2:	78e9      	ldrb	r1, [r5, #3]
   13bd4:	782b      	ldrb	r3, [r5, #0]
   13bd6:	4291      	cmp	r1, r2
   13bd8:	d025      	beq.n	13c26 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13bda:	f105 0a04 	add.w	sl, r5, #4
   13bde:	fb02 a303 	mla	r3, r2, r3, sl
	while (next) {
   13be2:	b303      	cbz	r3, 13c26 <rx_demux+0x202>
		uint8_t is_aborted = next->is_aborted;
   13be4:	f893 2020 	ldrb.w	r2, [r3, #32]
		if (!is_aborted) {
   13be8:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   13bea:	f3c2 0740 	ubfx	r7, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   13bee:	f002 0801 	and.w	r8, r2, #1
		if (!is_aborted) {
   13bf2:	d56d      	bpl.n	13cd0 <rx_demux+0x2ac>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   13bf4:	78e9      	ldrb	r1, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   13bf6:	78ab      	ldrb	r3, [r5, #2]
   13bf8:	782a      	ldrb	r2, [r5, #0]
   13bfa:	7868      	ldrb	r0, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   13bfc:	4299      	cmp	r1, r3
   13bfe:	d012      	beq.n	13c26 <rx_demux+0x202>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   13c00:	3301      	adds	r3, #1
   13c02:	b2db      	uxtb	r3, r3
	if (_first == count) {
   13c04:	4298      	cmp	r0, r3
   13c06:	d07b      	beq.n	13d00 <rx_demux+0x2dc>
	if (first == last) {
   13c08:	4299      	cmp	r1, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   13c0a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   13c0c:	d00b      	beq.n	13c26 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13c0e:	fb03 a302 	mla	r3, r3, r2, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   13c12:	b143      	cbz	r3, 13c26 <rx_demux+0x202>
   13c14:	2f00      	cmp	r7, #0
   13c16:	d1e5      	bne.n	13be4 <rx_demux+0x1c0>
   13c18:	f1b8 0f00 	cmp.w	r8, #0
   13c1c:	d003      	beq.n	13c26 <rx_demux+0x202>
   13c1e:	f893 2020 	ldrb.w	r2, [r3, #32]
   13c22:	07d2      	lsls	r2, r2, #31
   13c24:	d5de      	bpl.n	13be4 <rx_demux+0x1c0>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   13c26:	f1b9 0f00 	cmp.w	r9, #0
   13c2a:	f43f af02 	beq.w	13a32 <rx_demux+0xe>
	return hdr->ref;
   13c2e:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   13c32:	2b00      	cmp	r3, #0
   13c34:	f000 8089 	beq.w	13d4a <rx_demux+0x326>
	return hdr->ref--;
   13c38:	f899 3000 	ldrb.w	r3, [r9]
   13c3c:	3b01      	subs	r3, #1
   13c3e:	b2db      	uxtb	r3, r3
   13c40:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   13c44:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   13c48:	2b00      	cmp	r3, #0
   13c4a:	f47f aef2 	bne.w	13a32 <rx_demux+0xe>
   13c4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   13c52:	2b00      	cmp	r3, #0
   13c54:	f43f aeed 	beq.w	13a32 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   13c58:	f8d9 0008 	ldr.w	r0, [r9, #8]
   13c5c:	4798      	blx	r3
			if (nack) {
   13c5e:	e6e8      	b.n	13a32 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13c60:	4910      	ldr	r1, [pc, #64]	; (13ca4 <rx_demux+0x280>)
   13c62:	6860      	ldr	r0, [r4, #4]
   13c64:	2200      	movs	r2, #0
   13c66:	f7fc fe8d 	bl	10984 <memq_dequeue>
		ull_conn_setup(link, rx);
   13c6a:	9905      	ldr	r1, [sp, #20]
   13c6c:	4638      	mov	r0, r7
   13c6e:	f002 fb73 	bl	16358 <ull_conn_setup>
			if (nack) {
   13c72:	e6de      	b.n	13a32 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   13c74:	a905      	add	r1, sp, #20
   13c76:	4638      	mov	r0, r7
   13c78:	f002 fb8e 	bl	16398 <ull_conn_rx>
		if (nack) {
   13c7c:	2800      	cmp	r0, #0
   13c7e:	d049      	beq.n	13d14 <rx_demux+0x2f0>
}
   13c80:	b007      	add	sp, #28
   13c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   13c86:	4a0a      	ldr	r2, [pc, #40]	; (13cb0 <rx_demux+0x28c>)
   13c88:	4910      	ldr	r1, [pc, #64]	; (13ccc <rx_demux+0x2a8>)
   13c8a:	480b      	ldr	r0, [pc, #44]	; (13cb8 <rx_demux+0x294>)
   13c8c:	f240 7333 	movw	r3, #1843	; 0x733
   13c90:	f00e fb22 	bl	222d8 <printk>
   13c94:	4040      	eors	r0, r0
   13c96:	f380 8811 	msr	BASEPRI, r0
   13c9a:	f04f 0003 	mov.w	r0, #3
   13c9e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13ca0:	9b03      	ldr	r3, [sp, #12]
   13ca2:	e6d2      	b.n	13a4a <rx_demux+0x26>
   13ca4:	2000e2e8 	.word	0x2000e2e8
   13ca8:	2000e2f0 	.word	0x2000e2f0
   13cac:	200005a4 	.word	0x200005a4
   13cb0:	00029024 	.word	0x00029024
   13cb4:	00028e78 	.word	0x00028e78
   13cb8:	00028de0 	.word	0x00028de0
   13cbc:	20000580 	.word	0x20000580
   13cc0:	2000e2e4 	.word	0x2000e2e4
   13cc4:	2000041c 	.word	0x2000041c
   13cc8:	2000045c 	.word	0x2000045c
   13ccc:	00029068 	.word	0x00029068
			mfy.param = next;
   13cd0:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13cd4:	463a      	mov	r2, r7
   13cd6:	465b      	mov	r3, fp
   13cd8:	4639      	mov	r1, r7
   13cda:	2001      	movs	r0, #1
   13cdc:	f7fc feb4 	bl	10a48 <mayfly_enqueue>
			LL_ASSERT(!ret);
   13ce0:	2800      	cmp	r0, #0
   13ce2:	d087      	beq.n	13bf4 <rx_demux+0x1d0>
   13ce4:	4820      	ldr	r0, [pc, #128]	; (13d68 <rx_demux+0x344>)
   13ce6:	4a21      	ldr	r2, [pc, #132]	; (13d6c <rx_demux+0x348>)
   13ce8:	4921      	ldr	r1, [pc, #132]	; (13d70 <rx_demux+0x34c>)
   13cea:	f640 038c 	movw	r3, #2188	; 0x88c
   13cee:	f00e faf3 	bl	222d8 <printk>
   13cf2:	4040      	eors	r0, r0
   13cf4:	f380 8811 	msr	BASEPRI, r0
   13cf8:	f04f 0003 	mov.w	r0, #3
   13cfc:	df02      	svc	2
   13cfe:	e779      	b.n	13bf4 <rx_demux+0x1d0>
	*first = _first; /* Write back read-index */
   13d00:	2300      	movs	r3, #0
   13d02:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   13d04:	2900      	cmp	r1, #0
   13d06:	d08e      	beq.n	13c26 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13d08:	4b1a      	ldr	r3, [pc, #104]	; (13d74 <rx_demux+0x350>)
   13d0a:	e783      	b.n	13c14 <rx_demux+0x1f0>
		ull_conn_done(done);
   13d0c:	4628      	mov	r0, r5
   13d0e:	f005 f96b 	bl	18fe8 <ull_conn_done>
		break;
   13d12:	e746      	b.n	13ba2 <rx_demux+0x17e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13d14:	4918      	ldr	r1, [pc, #96]	; (13d78 <rx_demux+0x354>)
   13d16:	4602      	mov	r2, r0
   13d18:	6860      	ldr	r0, [r4, #4]
   13d1a:	f7fc fe33 	bl	10984 <memq_dequeue>
		if (rx) {
   13d1e:	9905      	ldr	r1, [sp, #20]
   13d20:	2900      	cmp	r1, #0
   13d22:	f43f ae86 	beq.w	13a32 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13d26:	4b15      	ldr	r3, [pc, #84]	; (13d7c <rx_demux+0x358>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13d28:	4638      	mov	r0, r7
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13d2a:	78db      	ldrb	r3, [r3, #3]
   13d2c:	e716      	b.n	13b5c <rx_demux+0x138>
	LL_ASSERT(release == done);
   13d2e:	4a0f      	ldr	r2, [pc, #60]	; (13d6c <rx_demux+0x348>)
   13d30:	4913      	ldr	r1, [pc, #76]	; (13d80 <rx_demux+0x35c>)
   13d32:	480d      	ldr	r0, [pc, #52]	; (13d68 <rx_demux+0x344>)
   13d34:	f640 037b 	movw	r3, #2171	; 0x87b
   13d38:	f00e face 	bl	222d8 <printk>
   13d3c:	4040      	eors	r0, r0
   13d3e:	f380 8811 	msr	BASEPRI, r0
   13d42:	f04f 0003 	mov.w	r0, #3
   13d46:	df02      	svc	2
   13d48:	e741      	b.n	13bce <rx_demux+0x1aa>
	LL_ASSERT(ull_ref_get(ull_hdr));
   13d4a:	4a08      	ldr	r2, [pc, #32]	; (13d6c <rx_demux+0x348>)
   13d4c:	490d      	ldr	r1, [pc, #52]	; (13d84 <rx_demux+0x360>)
   13d4e:	4806      	ldr	r0, [pc, #24]	; (13d68 <rx_demux+0x344>)
   13d50:	f640 039e 	movw	r3, #2206	; 0x89e
   13d54:	f00e fac0 	bl	222d8 <printk>
   13d58:	4040      	eors	r0, r0
   13d5a:	f380 8811 	msr	BASEPRI, r0
   13d5e:	f04f 0003 	mov.w	r0, #3
   13d62:	df02      	svc	2
   13d64:	e768      	b.n	13c38 <rx_demux+0x214>
   13d66:	bf00      	nop
   13d68:	00028de0 	.word	0x00028de0
   13d6c:	00029024 	.word	0x00029024
   13d70:	0002907c 	.word	0x0002907c
   13d74:	20000460 	.word	0x20000460
   13d78:	2000e2e8 	.word	0x2000e2e8
   13d7c:	20000580 	.word	0x20000580
   13d80:	0002906c 	.word	0x0002906c
   13d84:	00029084 	.word	0x00029084

00013d88 <ll_init>:
{
   13d88:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   13d8a:	4b2b      	ldr	r3, [pc, #172]	; (13e38 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13d8c:	4d2b      	ldr	r5, [pc, #172]	; (13e3c <ll_init+0xb4>)
	sem_recv = sem_rx;
   13d8e:	6018      	str	r0, [r3, #0]
{
   13d90:	b087      	sub	sp, #28
	cntr_init();
   13d92:	f008 fd9d 	bl	1c8d0 <cntr_init>
	mayfly_init();
   13d96:	f7fc fe05 	bl	109a4 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13d9a:	4a29      	ldr	r2, [pc, #164]	; (13e40 <ll_init+0xb8>)
   13d9c:	4c29      	ldr	r4, [pc, #164]	; (13e44 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13d9e:	492a      	ldr	r1, [pc, #168]	; (13e48 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13da0:	e9cd 2504 	strd	r2, r5, [sp, #16]
   13da4:	4a29      	ldr	r2, [pc, #164]	; (13e4c <ll_init+0xc4>)
   13da6:	e9cd 2402 	strd	r2, r4, [sp, #8]
   13daa:	240c      	movs	r4, #12
   13dac:	e9cd 1400 	strd	r1, r4, [sp]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13db0:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13db2:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   13db4:	2402      	movs	r4, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13db6:	7008      	strb	r0, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   13db8:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13dba:	720b      	strb	r3, [r1, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   13dbc:	740c      	strb	r4, [r1, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13dbe:	4a24      	ldr	r2, [pc, #144]	; (13e50 <ll_init+0xc8>)
   13dc0:	2107      	movs	r1, #7
   13dc2:	2000      	movs	r0, #0
   13dc4:	f7fd fef2 	bl	11bac <ticker_init>
	LL_ASSERT(!err);
   13dc8:	bb40      	cbnz	r0, 13e1c <ll_init+0x94>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13dca:	2201      	movs	r2, #1
   13dcc:	2100      	movs	r1, #0
   13dce:	4821      	ldr	r0, [pc, #132]	; (13e54 <ll_init+0xcc>)
   13dd0:	f013 fde5 	bl	2799e <z_impl_k_sem_init>
	err = lll_init();
   13dd4:	f007 f8c2 	bl	1af5c <lll_init>
	if (err) {
   13dd8:	4604      	mov	r4, r0
   13dda:	b110      	cbz	r0, 13de2 <ll_init+0x5a>
}
   13ddc:	4620      	mov	r0, r4
   13dde:	b007      	add	sp, #28
   13de0:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   13de2:	f7ff fd93 	bl	1390c <init_reset>
	if (err) {
   13de6:	4604      	mov	r4, r0
   13de8:	2800      	cmp	r0, #0
   13dea:	d1f7      	bne.n	13ddc <ll_init+0x54>
	err = lll_adv_init();
   13dec:	f007 fc36 	bl	1b65c <lll_adv_init>
	if (err) {
   13df0:	4604      	mov	r4, r0
   13df2:	2800      	cmp	r0, #0
   13df4:	d1f2      	bne.n	13ddc <ll_init+0x54>
	err = ull_adv_init();
   13df6:	f001 f931 	bl	1505c <ull_adv_init>
	if (err) {
   13dfa:	4604      	mov	r4, r0
   13dfc:	2800      	cmp	r0, #0
   13dfe:	d1ed      	bne.n	13ddc <ll_init+0x54>
	err = lll_conn_init();
   13e00:	f008 f8ce 	bl	1bfa0 <lll_conn_init>
	if (err) {
   13e04:	4604      	mov	r4, r0
   13e06:	2800      	cmp	r0, #0
   13e08:	d1e8      	bne.n	13ddc <ll_init+0x54>
	err = ull_conn_init();
   13e0a:	f002 fa49 	bl	162a0 <ull_conn_init>
	if (err) {
   13e0e:	4604      	mov	r4, r0
   13e10:	2800      	cmp	r0, #0
   13e12:	d1e3      	bne.n	13ddc <ll_init+0x54>
		ull_filter_reset(true);
   13e14:	2001      	movs	r0, #1
   13e16:	f006 fd5b 	bl	1a8d0 <ull_filter_reset>
	return  0;
   13e1a:	e7df      	b.n	13ddc <ll_init+0x54>
	LL_ASSERT(!err);
   13e1c:	4a0e      	ldr	r2, [pc, #56]	; (13e58 <ll_init+0xd0>)
   13e1e:	490f      	ldr	r1, [pc, #60]	; (13e5c <ll_init+0xd4>)
   13e20:	480f      	ldr	r0, [pc, #60]	; (13e60 <ll_init+0xd8>)
   13e22:	f44f 73b8 	mov.w	r3, #368	; 0x170
   13e26:	f00e fa57 	bl	222d8 <printk>
   13e2a:	4040      	eors	r0, r0
   13e2c:	f380 8811 	msr	BASEPRI, r0
   13e30:	f04f 0003 	mov.w	r0, #3
   13e34:	df02      	svc	2
   13e36:	e7c8      	b.n	13dca <ll_init+0x42>
   13e38:	2000e2f0 	.word	0x2000e2f0
   13e3c:	0001d579 	.word	0x0001d579
   13e40:	0001d429 	.word	0x0001d429
   13e44:	0001d3c5 	.word	0x0001d3c5
   13e48:	2000e6cc 	.word	0x2000e6cc
   13e4c:	2000e45c 	.word	0x2000e45c
   13e50:	2000e30c 	.word	0x2000e30c
   13e54:	2000e2f4 	.word	0x2000e2f4
   13e58:	00029024 	.word	0x00029024
   13e5c:	00029060 	.word	0x00029060
   13e60:	00028de0 	.word	0x00028de0

00013e64 <ll_reset>:
{
   13e64:	b510      	push	{r4, lr}
   13e66:	b086      	sub	sp, #24
	err = ull_adv_reset();
   13e68:	f001 f906 	bl	15078 <ull_adv_reset>
	LL_ASSERT(!err);
   13e6c:	2800      	cmp	r0, #0
   13e6e:	d130      	bne.n	13ed2 <ll_reset+0x6e>
	err = ull_conn_reset();
   13e70:	f002 fa18 	bl	162a4 <ull_conn_reset>
	LL_ASSERT(!err);
   13e74:	2800      	cmp	r0, #0
   13e76:	d13d      	bne.n	13ef4 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   13e78:	4b3b      	ldr	r3, [pc, #236]	; (13f68 <ll_reset+0x104>)
   13e7a:	2400      	movs	r4, #0
		ull_filter_reset(false);
   13e7c:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
   13e7e:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13e80:	f006 fd26 	bl	1a8d0 <ull_filter_reset>
	MFIFO_INIT(prep);
   13e84:	4839      	ldr	r0, [pc, #228]	; (13f6c <ll_reset+0x108>)
	MFIFO_INIT(done);
   13e86:	493a      	ldr	r1, [pc, #232]	; (13f70 <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   13e88:	4a3a      	ldr	r2, [pc, #232]	; (13f74 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   13e8a:	4b3b      	ldr	r3, [pc, #236]	; (13f78 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   13e8c:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
   13e8e:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   13e90:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13e92:	805c      	strh	r4, [r3, #2]
   13e94:	2201      	movs	r2, #1
   13e96:	4621      	mov	r1, r4
   13e98:	4668      	mov	r0, sp
   13e9a:	f013 fd80 	bl	2799e <z_impl_k_sem_init>
		mfy.param = &sem;
   13e9e:	4b37      	ldr	r3, [pc, #220]	; (13f7c <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13ea0:	4622      	mov	r2, r4
   13ea2:	4621      	mov	r1, r4
   13ea4:	2003      	movs	r0, #3
		mfy.param = &sem;
   13ea6:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13eaa:	f7fc fdcd 	bl	10a48 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13eae:	2800      	cmp	r0, #0
   13eb0:	d14b      	bne.n	13f4a <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   13eb2:	f04f 32ff 	mov.w	r2, #4294967295
   13eb6:	f04f 33ff 	mov.w	r3, #4294967295
   13eba:	4668      	mov	r0, sp
   13ebc:	f00c fed2 	bl	20c64 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   13ec0:	f001 f8e6 	bl	15090 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   13ec4:	2800      	cmp	r0, #0
   13ec6:	d132      	bne.n	13f2e <ll_reset+0xca>
	err = init_reset();
   13ec8:	f7ff fd20 	bl	1390c <init_reset>
	LL_ASSERT(!err);
   13ecc:	bb00      	cbnz	r0, 13f10 <ll_reset+0xac>
}
   13ece:	b006      	add	sp, #24
   13ed0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   13ed2:	4a2b      	ldr	r2, [pc, #172]	; (13f80 <ll_reset+0x11c>)
   13ed4:	492b      	ldr	r1, [pc, #172]	; (13f84 <ll_reset+0x120>)
   13ed6:	482c      	ldr	r0, [pc, #176]	; (13f88 <ll_reset+0x124>)
   13ed8:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   13edc:	f00e f9fc 	bl	222d8 <printk>
   13ee0:	4040      	eors	r0, r0
   13ee2:	f380 8811 	msr	BASEPRI, r0
   13ee6:	f04f 0003 	mov.w	r0, #3
   13eea:	df02      	svc	2
	err = ull_conn_reset();
   13eec:	f002 f9da 	bl	162a4 <ull_conn_reset>
	LL_ASSERT(!err);
   13ef0:	2800      	cmp	r0, #0
   13ef2:	d0c1      	beq.n	13e78 <ll_reset+0x14>
   13ef4:	4a22      	ldr	r2, [pc, #136]	; (13f80 <ll_reset+0x11c>)
   13ef6:	4923      	ldr	r1, [pc, #140]	; (13f84 <ll_reset+0x120>)
   13ef8:	4823      	ldr	r0, [pc, #140]	; (13f88 <ll_reset+0x124>)
   13efa:	f44f 730f 	mov.w	r3, #572	; 0x23c
   13efe:	f00e f9eb 	bl	222d8 <printk>
   13f02:	4040      	eors	r0, r0
   13f04:	f380 8811 	msr	BASEPRI, r0
   13f08:	f04f 0003 	mov.w	r0, #3
   13f0c:	df02      	svc	2
   13f0e:	e7b3      	b.n	13e78 <ll_reset+0x14>
	LL_ASSERT(!err);
   13f10:	4a1b      	ldr	r2, [pc, #108]	; (13f80 <ll_reset+0x11c>)
   13f12:	491c      	ldr	r1, [pc, #112]	; (13f84 <ll_reset+0x120>)
   13f14:	481c      	ldr	r0, [pc, #112]	; (13f88 <ll_reset+0x124>)
   13f16:	f44f 7320 	mov.w	r3, #640	; 0x280
   13f1a:	f00e f9dd 	bl	222d8 <printk>
   13f1e:	4040      	eors	r0, r0
   13f20:	f380 8811 	msr	BASEPRI, r0
   13f24:	f04f 0003 	mov.w	r0, #3
   13f28:	df02      	svc	2
}
   13f2a:	b006      	add	sp, #24
   13f2c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   13f2e:	4a14      	ldr	r2, [pc, #80]	; (13f80 <ll_reset+0x11c>)
   13f30:	4914      	ldr	r1, [pc, #80]	; (13f84 <ll_reset+0x120>)
   13f32:	4815      	ldr	r0, [pc, #84]	; (13f88 <ll_reset+0x124>)
   13f34:	f240 237b 	movw	r3, #635	; 0x27b
   13f38:	f00e f9ce 	bl	222d8 <printk>
   13f3c:	4040      	eors	r0, r0
   13f3e:	f380 8811 	msr	BASEPRI, r0
   13f42:	f04f 0003 	mov.w	r0, #3
   13f46:	df02      	svc	2
   13f48:	e7be      	b.n	13ec8 <ll_reset+0x64>
		LL_ASSERT(!retval);
   13f4a:	4a0d      	ldr	r2, [pc, #52]	; (13f80 <ll_reset+0x11c>)
   13f4c:	490f      	ldr	r1, [pc, #60]	; (13f8c <ll_reset+0x128>)
   13f4e:	480e      	ldr	r0, [pc, #56]	; (13f88 <ll_reset+0x124>)
   13f50:	f240 236e 	movw	r3, #622	; 0x26e
   13f54:	f00e f9c0 	bl	222d8 <printk>
   13f58:	4040      	eors	r0, r0
   13f5a:	f380 8811 	msr	BASEPRI, r0
   13f5e:	f04f 0003 	mov.w	r0, #3
   13f62:	df02      	svc	2
   13f64:	e7a5      	b.n	13eb2 <ll_reset+0x4e>
   13f66:	bf00      	nop
   13f68:	20000580 	.word	0x20000580
   13f6c:	2000045c 	.word	0x2000045c
   13f70:	2000041c 	.word	0x2000041c
   13f74:	20000444 	.word	0x20000444
   13f78:	20000430 	.word	0x20000430
   13f7c:	200005e4 	.word	0x200005e4
   13f80:	00029024 	.word	0x00029024
   13f84:	00029060 	.word	0x00029060
   13f88:	00028de0 	.word	0x00028de0
   13f8c:	0002909c 	.word	0x0002909c

00013f90 <ll_rx_get>:
{
   13f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f94:	b085      	sub	sp, #20
   13f96:	e9cd 0100 	strd	r0, r1, [sp]
   13f9a:	4c65      	ldr	r4, [pc, #404]	; (14130 <ll_rx_get+0x1a0>)
				mem_release(link, &mem_link_rx.free);
   13f9c:	4d65      	ldr	r5, [pc, #404]	; (14134 <ll_rx_get+0x1a4>)
   13f9e:	4e66      	ldr	r6, [pc, #408]	; (14138 <ll_rx_get+0x1a8>)
	*node_rx = NULL;
   13fa0:	9a00      	ldr	r2, [sp, #0]
   13fa2:	2300      	movs	r3, #0
   13fa4:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13fa6:	e9d6 0100 	ldrd	r0, r1, [r6]
   13faa:	aa03      	add	r2, sp, #12
   13fac:	f7fc fce2 	bl	10974 <memq_peek>
	if (link) {
   13fb0:	4680      	mov	r8, r0
   13fb2:	2800      	cmp	r0, #0
   13fb4:	f000 80a8 	beq.w	14108 <ll_rx_get+0x178>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13fb8:	9b03      	ldr	r3, [sp, #12]
   13fba:	4960      	ldr	r1, [pc, #384]	; (1413c <ll_rx_get+0x1ac>)
   13fbc:	781a      	ldrb	r2, [r3, #0]
   13fbe:	9801      	ldr	r0, [sp, #4]
   13fc0:	f7ff fbc2 	bl	13748 <tx_cmplt_get>
		if (!cmplt) {
   13fc4:	2800      	cmp	r0, #0
   13fc6:	f040 80a4 	bne.w	14112 <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   13fca:	78a3      	ldrb	r3, [r4, #2]
   13fcc:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13fd0:	78e2      	ldrb	r2, [r4, #3]
   13fd2:	4607      	mov	r7, r0
   13fd4:	f10d 0109 	add.w	r1, sp, #9
   13fd8:	f10d 000a 	add.w	r0, sp, #10
   13fdc:	f7ff fbb4 	bl	13748 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   13fe0:	ea47 0200 	orr.w	r2, r7, r0
   13fe4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   13fe8:	d1f2      	bne.n	13fd0 <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   13fea:	9b03      	ldr	r3, [sp, #12]
   13fec:	7919      	ldrb	r1, [r3, #4]
   13fee:	2901      	cmp	r1, #1
   13ff0:	f040 8097 	bne.w	14122 <ll_rx_get+0x192>
				(void)memq_dequeue(memq_ll_rx.tail,
   13ff4:	4950      	ldr	r1, [pc, #320]	; (14138 <ll_rx_get+0x1a8>)
   13ff6:	6870      	ldr	r0, [r6, #4]
   13ff8:	f7fc fcc4 	bl	10984 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13ffc:	4950      	ldr	r1, [pc, #320]	; (14140 <ll_rx_get+0x1b0>)
   13ffe:	4640      	mov	r0, r8
   14000:	f7fc fc64 	bl	108cc <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14004:	782b      	ldrb	r3, [r5, #0]
   14006:	2b06      	cmp	r3, #6
   14008:	d86f      	bhi.n	140ea <ll_rx_get+0x15a>
	mem_link_rx.quota_pdu += delta;
   1400a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   1400c:	494d      	ldr	r1, [pc, #308]	; (14144 <ll_rx_get+0x1b4>)
   1400e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   14010:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   14012:	f7fc fc5b 	bl	108cc <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14016:	782b      	ldrb	r3, [r5, #0]
   14018:	2b00      	cmp	r3, #0
   1401a:	d0c1      	beq.n	13fa0 <ll_rx_get+0x10>
   1401c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 14148 <ll_rx_get+0x1b8>
	last = last + 1;
   14020:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   14024:	f898 2001 	ldrb.w	r2, [r8, #1]
   14028:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1402c:	3701      	adds	r7, #1
   1402e:	b2ff      	uxtb	r7, r7
		last = 0U;
   14030:	42ba      	cmp	r2, r7
   14032:	bf08      	it	eq
   14034:	2700      	moveq	r7, #0
	if (last == first) {
   14036:	429f      	cmp	r7, r3
   14038:	d0b2      	beq.n	13fa0 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   1403a:	4841      	ldr	r0, [pc, #260]	; (14140 <ll_rx_get+0x1b0>)
   1403c:	f7fc fc2c 	bl	10898 <mem_acquire>
		if (!link) {
   14040:	4682      	mov	sl, r0
   14042:	2800      	cmp	r0, #0
   14044:	d0ac      	beq.n	13fa0 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   14046:	483f      	ldr	r0, [pc, #252]	; (14144 <ll_rx_get+0x1b4>)
   14048:	f7fc fc26 	bl	10898 <mem_acquire>
		if (!rx) {
   1404c:	2800      	cmp	r0, #0
   1404e:	d063      	beq.n	14118 <ll_rx_get+0x188>
		rx->link = link;
   14050:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14054:	f898 2003 	ldrb.w	r2, [r8, #3]
   14058:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1405c:	fb02 8303 	mla	r3, r2, r3, r8
   14060:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   14062:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14064:	f888 7003 	strb.w	r7, [r8, #3]
   14068:	3b01      	subs	r3, #1
   1406a:	b2db      	uxtb	r3, r3
   1406c:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   1406e:	2b00      	cmp	r3, #0
   14070:	d096      	beq.n	13fa0 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14072:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1414c <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
   14076:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 14140 <ll_rx_get+0x1b0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1407a:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1407e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 14144 <ll_rx_get+0x1b4>
   14082:	e014      	b.n	140ae <ll_rx_get+0x11e>
		link->mem = NULL;
   14084:	2300      	movs	r3, #0
   14086:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   1408a:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1408e:	f89a 2003 	ldrb.w	r2, [sl, #3]
   14092:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14096:	fb02 a303 	mla	r3, r2, r3, sl
   1409a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1409c:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1409e:	f88a 7003 	strb.w	r7, [sl, #3]
   140a2:	3b01      	subs	r3, #1
   140a4:	b2db      	uxtb	r3, r3
   140a6:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   140a8:	2b00      	cmp	r3, #0
   140aa:	f43f af79 	beq.w	13fa0 <ll_rx_get+0x10>
	if (last == count) {
   140ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   140b2:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   140b6:	3701      	adds	r7, #1
   140b8:	b2ff      	uxtb	r7, r7
		last = 0U;
   140ba:	42ba      	cmp	r2, r7
   140bc:	bf08      	it	eq
   140be:	2700      	moveq	r7, #0
	if (last == first) {
   140c0:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   140c2:	4640      	mov	r0, r8
   140c4:	f43f af6c 	beq.w	13fa0 <ll_rx_get+0x10>
   140c8:	f7fc fbe6 	bl	10898 <mem_acquire>
   140cc:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   140ce:	4658      	mov	r0, fp
		if (!link) {
   140d0:	f1b9 0f00 	cmp.w	r9, #0
   140d4:	f43f af64 	beq.w	13fa0 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   140d8:	f7fc fbde 	bl	10898 <mem_acquire>
		if (!rx) {
   140dc:	2800      	cmp	r0, #0
   140de:	d1d1      	bne.n	14084 <ll_rx_get+0xf4>
			mem_release(link, &mem_link_rx.free);
   140e0:	4917      	ldr	r1, [pc, #92]	; (14140 <ll_rx_get+0x1b0>)
   140e2:	4648      	mov	r0, r9
   140e4:	f7fc fbf2 	bl	108cc <mem_release>
			return;
   140e8:	e75a      	b.n	13fa0 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   140ea:	4a19      	ldr	r2, [pc, #100]	; (14150 <ll_rx_get+0x1c0>)
   140ec:	4919      	ldr	r1, [pc, #100]	; (14154 <ll_rx_get+0x1c4>)
   140ee:	481a      	ldr	r0, [pc, #104]	; (14158 <ll_rx_get+0x1c8>)
   140f0:	f240 43ac 	movw	r3, #1196	; 0x4ac
   140f4:	f00e f8f0 	bl	222d8 <printk>
   140f8:	4040      	eors	r0, r0
   140fa:	f380 8811 	msr	BASEPRI, r0
   140fe:	f04f 0003 	mov.w	r0, #3
   14102:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   14104:	782b      	ldrb	r3, [r5, #0]
   14106:	e780      	b.n	1400a <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   14108:	78e2      	ldrb	r2, [r4, #3]
   1410a:	490c      	ldr	r1, [pc, #48]	; (1413c <ll_rx_get+0x1ac>)
   1410c:	9801      	ldr	r0, [sp, #4]
   1410e:	f7ff fb1b 	bl	13748 <tx_cmplt_get>
}
   14112:	b005      	add	sp, #20
   14114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   14118:	4909      	ldr	r1, [pc, #36]	; (14140 <ll_rx_get+0x1b0>)
   1411a:	4650      	mov	r0, sl
   1411c:	f7fc fbd6 	bl	108cc <mem_release>
			return;
   14120:	e73e      	b.n	13fa0 <ll_rx_get+0x10>
			*node_rx = rx;
   14122:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   14124:	4610      	mov	r0, r2
			*node_rx = rx;
   14126:	600b      	str	r3, [r1, #0]
}
   14128:	b005      	add	sp, #20
   1412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412e:	bf00      	nop
   14130:	20000580 	.word	0x20000580
   14134:	2000dfec 	.word	0x2000dfec
   14138:	2000e2e0 	.word	0x2000e2e0
   1413c:	20000582 	.word	0x20000582
   14140:	2000dff0 	.word	0x2000dff0
   14144:	2000e054 	.word	0x2000e054
   14148:	20000444 	.word	0x20000444
   1414c:	20000430 	.word	0x20000430
   14150:	00029024 	.word	0x00029024
   14154:	000290a4 	.word	0x000290a4
   14158:	00028de0 	.word	0x00028de0

0001415c <ll_rx_dequeue>:
{
   1415c:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1415e:	495c      	ldr	r1, [pc, #368]	; (142d0 <ll_rx_dequeue+0x174>)
{
   14160:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   14162:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14164:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   14166:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14168:	aa01      	add	r2, sp, #4
   1416a:	f7fc fc0b 	bl	10984 <memq_dequeue>
	LL_ASSERT(link);
   1416e:	4604      	mov	r4, r0
   14170:	2800      	cmp	r0, #0
   14172:	d061      	beq.n	14238 <ll_rx_dequeue+0xdc>
	mem_release(link, &mem_link_rx.free);
   14174:	4957      	ldr	r1, [pc, #348]	; (142d4 <ll_rx_dequeue+0x178>)
   14176:	4620      	mov	r0, r4
   14178:	f7fc fba8 	bl	108cc <mem_release>
	switch (rx->type) {
   1417c:	9a01      	ldr	r2, [sp, #4]
   1417e:	7913      	ldrb	r3, [r2, #4]
   14180:	2b19      	cmp	r3, #25
   14182:	d80e      	bhi.n	141a2 <ll_rx_dequeue+0x46>
   14184:	e8df f003 	tbb	[pc, r3]
   14188:	1c0d0d1c 	.word	0x1c0d0d1c
   1418c:	0d0d0d0d 	.word	0x0d0d0d0d
   14190:	0d0d0d0d 	.word	0x0d0d0d0d
   14194:	0d0d0d0d 	.word	0x0d0d0d0d
   14198:	2d0d0d0d 	.word	0x2d0d0d0d
   1419c:	1c1c1c1c 	.word	0x1c1c1c1c
   141a0:	1c1c      	.short	0x1c1c
		LL_ASSERT(0);
   141a2:	4a4d      	ldr	r2, [pc, #308]	; (142d8 <ll_rx_dequeue+0x17c>)
   141a4:	494d      	ldr	r1, [pc, #308]	; (142dc <ll_rx_dequeue+0x180>)
   141a6:	484e      	ldr	r0, [pc, #312]	; (142e0 <ll_rx_dequeue+0x184>)
   141a8:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   141ac:	f00e f894 	bl	222d8 <printk>
   141b0:	4040      	eors	r0, r0
   141b2:	f380 8811 	msr	BASEPRI, r0
   141b6:	f04f 0003 	mov.w	r0, #3
   141ba:	df02      	svc	2
}
   141bc:	b002      	add	sp, #8
   141be:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   141c0:	2b00      	cmp	r3, #0
   141c2:	d1fb      	bne.n	141bc <ll_rx_dequeue+0x60>
   141c4:	4a44      	ldr	r2, [pc, #272]	; (142d8 <ll_rx_dequeue+0x17c>)
   141c6:	4947      	ldr	r1, [pc, #284]	; (142e4 <ll_rx_dequeue+0x188>)
   141c8:	4845      	ldr	r0, [pc, #276]	; (142e0 <ll_rx_dequeue+0x184>)
   141ca:	f44f 736e 	mov.w	r3, #952	; 0x3b8
   141ce:	f00e f883 	bl	222d8 <printk>
   141d2:	4040      	eors	r0, r0
   141d4:	f380 8811 	msr	BASEPRI, r0
   141d8:	f04f 0003 	mov.w	r0, #3
   141dc:	df02      	svc	2
}
   141de:	b002      	add	sp, #8
   141e0:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   141e2:	7f13      	ldrb	r3, [r2, #28]
   141e4:	2b3c      	cmp	r3, #60	; 0x3c
   141e6:	d035      	beq.n	14254 <ll_rx_dequeue+0xf8>
   141e8:	7f53      	ldrb	r3, [r2, #29]
   141ea:	b1bb      	cbz	r3, 1421c <ll_rx_dequeue+0xc0>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   141ec:	6893      	ldr	r3, [r2, #8]
   141ee:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   141f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   141f2:	b120      	cbz	r0, 141fe <ll_rx_dequeue+0xa2>
					adv->node_rx_cc_free = NULL;
   141f4:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   141f6:	493c      	ldr	r1, [pc, #240]	; (142e8 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   141f8:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   141fa:	f7fc fb67 	bl	108cc <mem_release>
			adv->is_enabled = 0U;
   141fe:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   14202:	f36f 0300 	bfc	r3, #0, #1
   14206:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
   1420a:	2000      	movs	r0, #0
   1420c:	f000 ff7e 	bl	1510c <ull_adv_is_enabled>
			if (!bm) {
   14210:	2800      	cmp	r0, #0
   14212:	d1d3      	bne.n	141bc <ll_rx_dequeue+0x60>
				ull_filter_adv_scan_state_cb(0);
   14214:	f006 f8b4 	bl	1a380 <ull_filter_adv_scan_state_cb>
}
   14218:	b002      	add	sp, #8
   1421a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1421c:	4a2e      	ldr	r2, [pc, #184]	; (142d8 <ll_rx_dequeue+0x17c>)
   1421e:	492f      	ldr	r1, [pc, #188]	; (142dc <ll_rx_dequeue+0x180>)
   14220:	482f      	ldr	r0, [pc, #188]	; (142e0 <ll_rx_dequeue+0x184>)
   14222:	f44f 7359 	mov.w	r3, #868	; 0x364
   14226:	f00e f857 	bl	222d8 <printk>
   1422a:	4040      	eors	r0, r0
   1422c:	f380 8811 	msr	BASEPRI, r0
   14230:	f04f 0003 	mov.w	r0, #3
   14234:	df02      	svc	2
   14236:	e7e8      	b.n	1420a <ll_rx_dequeue+0xae>
	LL_ASSERT(link);
   14238:	4a27      	ldr	r2, [pc, #156]	; (142d8 <ll_rx_dequeue+0x17c>)
   1423a:	492c      	ldr	r1, [pc, #176]	; (142ec <ll_rx_dequeue+0x190>)
   1423c:	4828      	ldr	r0, [pc, #160]	; (142e0 <ll_rx_dequeue+0x184>)
   1423e:	f240 23d2 	movw	r3, #722	; 0x2d2
   14242:	f00e f849 	bl	222d8 <printk>
   14246:	4040      	eors	r0, r0
   14248:	f380 8811 	msr	BASEPRI, r0
   1424c:	f04f 0003 	mov.w	r0, #3
   14250:	df02      	svc	2
   14252:	e78f      	b.n	14174 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   14254:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   14256:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   14258:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   1425a:	b1ed      	cbz	r5, 14298 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
   1425c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   1425e:	2200      	movs	r2, #0
   14260:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   14262:	b163      	cbz	r3, 1427e <ll_rx_dequeue+0x122>
   14264:	4a1c      	ldr	r2, [pc, #112]	; (142d8 <ll_rx_dequeue+0x17c>)
   14266:	4922      	ldr	r1, [pc, #136]	; (142f0 <ll_rx_dequeue+0x194>)
   14268:	481d      	ldr	r0, [pc, #116]	; (142e0 <ll_rx_dequeue+0x184>)
   1426a:	f44f 734f 	mov.w	r3, #828	; 0x33c
   1426e:	f00e f833 	bl	222d8 <printk>
   14272:	4040      	eors	r0, r0
   14274:	f380 8811 	msr	BASEPRI, r0
   14278:	f04f 0003 	mov.w	r0, #3
   1427c:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1427e:	f105 0150 	add.w	r1, r5, #80	; 0x50
   14282:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14286:	f7fc fb61 	bl	1094c <memq_deinit>
				LL_ASSERT(link);
   1428a:	4606      	mov	r6, r0
   1428c:	b190      	cbz	r0, 142b4 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
   1428e:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   14290:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   14292:	f001 fced 	bl	15c70 <ll_conn_release>
   14296:	e7b2      	b.n	141fe <ll_rx_dequeue+0xa2>
				LL_ASSERT(conn_lll);
   14298:	4a0f      	ldr	r2, [pc, #60]	; (142d8 <ll_rx_dequeue+0x17c>)
   1429a:	4916      	ldr	r1, [pc, #88]	; (142f4 <ll_rx_dequeue+0x198>)
   1429c:	4810      	ldr	r0, [pc, #64]	; (142e0 <ll_rx_dequeue+0x184>)
   1429e:	f240 3339 	movw	r3, #825	; 0x339
   142a2:	f00e f819 	bl	222d8 <printk>
   142a6:	4040      	eors	r0, r0
   142a8:	f380 8811 	msr	BASEPRI, r0
   142ac:	f04f 0003 	mov.w	r0, #3
   142b0:	df02      	svc	2
   142b2:	e7d3      	b.n	1425c <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
   142b4:	4a08      	ldr	r2, [pc, #32]	; (142d8 <ll_rx_dequeue+0x17c>)
   142b6:	490d      	ldr	r1, [pc, #52]	; (142ec <ll_rx_dequeue+0x190>)
   142b8:	4809      	ldr	r0, [pc, #36]	; (142e0 <ll_rx_dequeue+0x184>)
   142ba:	f240 333f 	movw	r3, #831	; 0x33f
   142be:	f00e f80b 	bl	222d8 <printk>
   142c2:	4040      	eors	r0, r0
   142c4:	f380 8811 	msr	BASEPRI, r0
   142c8:	f04f 0003 	mov.w	r0, #3
   142cc:	df02      	svc	2
   142ce:	e7de      	b.n	1428e <ll_rx_dequeue+0x132>
   142d0:	2000e2e0 	.word	0x2000e2e0
   142d4:	2000dff0 	.word	0x2000dff0
   142d8:	00029024 	.word	0x00029024
   142dc:	00028e78 	.word	0x00028e78
   142e0:	00028de0 	.word	0x00028de0
   142e4:	000290fc 	.word	0x000290fc
   142e8:	2000e054 	.word	0x2000e054
   142ec:	000292ec 	.word	0x000292ec
   142f0:	000290e4 	.word	0x000290e4
   142f4:	000290d8 	.word	0x000290d8

000142f8 <ll_rx_mem_release>:
{
   142f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   142fc:	6804      	ldr	r4, [r0, #0]
{
   142fe:	4680      	mov	r8, r0
	while (rx) {
   14300:	b334      	cbz	r4, 14350 <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
   14302:	4f54      	ldr	r7, [pc, #336]	; (14454 <ll_rx_mem_release+0x15c>)
   14304:	f8df 9150 	ldr.w	r9, [pc, #336]	; 14458 <ll_rx_mem_release+0x160>
   14308:	4e54      	ldr	r6, [pc, #336]	; (1445c <ll_rx_mem_release+0x164>)
		rx = rx->next;
   1430a:	4625      	mov	r5, r4
   1430c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1430e:	792b      	ldrb	r3, [r5, #4]
   14310:	2b19      	cmp	r3, #25
   14312:	d80e      	bhi.n	14332 <ll_rx_mem_release+0x3a>
   14314:	e8df f003 	tbb	[pc, r3]
   14318:	360d0d36 	.word	0x360d0d36
   1431c:	0d0d0d0d 	.word	0x0d0d0d0d
   14320:	0d0d0d0d 	.word	0x0d0d0d0d
   14324:	0d0d0d0d 	.word	0x0d0d0d0d
   14328:	240d0d0d 	.word	0x240d0d0d
   1432c:	36363654 	.word	0x36363654
   14330:	3636      	.short	0x3636
			LL_ASSERT(0);
   14332:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   14336:	463a      	mov	r2, r7
   14338:	4649      	mov	r1, r9
   1433a:	4630      	mov	r0, r6
   1433c:	f00d ffcc 	bl	222d8 <printk>
   14340:	4040      	eors	r0, r0
   14342:	f380 8811 	msr	BASEPRI, r0
   14346:	f04f 0003 	mov.w	r0, #3
   1434a:	df02      	svc	2
	while (rx) {
   1434c:	2c00      	cmp	r4, #0
   1434e:	d1dc      	bne.n	1430a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   14350:	2300      	movs	r3, #0
   14352:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   14356:	20ff      	movs	r0, #255	; 0xff
}
   14358:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1435c:	f7ff ba5a 	b.w	13814 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   14360:	7f2b      	ldrb	r3, [r5, #28]
   14362:	2b3c      	cmp	r3, #60	; 0x3c
   14364:	d05f      	beq.n	14426 <ll_rx_mem_release+0x12e>
				LL_ASSERT(!cc->status);
   14366:	b1db      	cbz	r3, 143a0 <ll_rx_mem_release+0xa8>
   14368:	493d      	ldr	r1, [pc, #244]	; (14460 <ll_rx_mem_release+0x168>)
   1436a:	f240 4326 	movw	r3, #1062	; 0x426
   1436e:	463a      	mov	r2, r7
   14370:	4630      	mov	r0, r6
   14372:	f00d ffb1 	bl	222d8 <printk>
   14376:	4040      	eors	r0, r0
   14378:	f380 8811 	msr	BASEPRI, r0
   1437c:	f04f 0003 	mov.w	r0, #3
   14380:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14382:	792b      	ldrb	r3, [r5, #4]
   14384:	b963      	cbnz	r3, 143a0 <ll_rx_mem_release+0xa8>
   14386:	4937      	ldr	r1, [pc, #220]	; (14464 <ll_rx_mem_release+0x16c>)
   14388:	f240 436c 	movw	r3, #1132	; 0x46c
   1438c:	463a      	mov	r2, r7
   1438e:	4630      	mov	r0, r6
   14390:	f00d ffa2 	bl	222d8 <printk>
   14394:	4040      	eors	r0, r0
   14396:	f380 8811 	msr	BASEPRI, r0
   1439a:	f04f 0003 	mov.w	r0, #3
   1439e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   143a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 14468 <ll_rx_mem_release+0x170>
   143a4:	f89a 3000 	ldrb.w	r3, [sl]
   143a8:	2b06      	cmp	r3, #6
   143aa:	d82c      	bhi.n	14406 <ll_rx_mem_release+0x10e>
	mem_link_rx.quota_pdu += delta;
   143ac:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   143ae:	492f      	ldr	r1, [pc, #188]	; (1446c <ll_rx_mem_release+0x174>)
	mem_link_rx.quota_pdu += delta;
   143b0:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   143b4:	4628      	mov	r0, r5
   143b6:	f7fc fa89 	bl	108cc <mem_release>
	while (rx) {
   143ba:	2c00      	cmp	r4, #0
   143bc:	d1a5      	bne.n	1430a <ll_rx_mem_release+0x12>
   143be:	e7c7      	b.n	14350 <ll_rx_mem_release+0x58>
			conn = ll_conn_get(rx_free->handle);
   143c0:	88e8      	ldrh	r0, [r5, #6]
   143c2:	f001 fc63 	bl	15c8c <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   143c6:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   143c8:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   143ca:	b163      	cbz	r3, 143e6 <ll_rx_mem_release+0xee>
   143cc:	4928      	ldr	r1, [pc, #160]	; (14470 <ll_rx_mem_release+0x178>)
   143ce:	f240 4393 	movw	r3, #1171	; 0x493
   143d2:	463a      	mov	r2, r7
   143d4:	4630      	mov	r0, r6
   143d6:	f00d ff7f 	bl	222d8 <printk>
   143da:	4040      	eors	r0, r0
   143dc:	f380 8811 	msr	BASEPRI, r0
   143e0:	f04f 0003 	mov.w	r0, #3
   143e4:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   143e6:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   143ea:	f105 0068 	add.w	r0, r5, #104	; 0x68
   143ee:	f7fc faad 	bl	1094c <memq_deinit>
			LL_ASSERT(link);
   143f2:	4682      	mov	sl, r0
   143f4:	b1f8      	cbz	r0, 14436 <ll_rx_mem_release+0x13e>
			conn->lll.link_tx_free = link;
   143f6:	f8c5 a078 	str.w	sl, [r5, #120]	; 0x78
			ll_conn_release(conn);
   143fa:	4628      	mov	r0, r5
   143fc:	f001 fc38 	bl	15c70 <ll_conn_release>
	while (rx) {
   14400:	2c00      	cmp	r4, #0
   14402:	d182      	bne.n	1430a <ll_rx_mem_release+0x12>
   14404:	e7a4      	b.n	14350 <ll_rx_mem_release+0x58>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14406:	491b      	ldr	r1, [pc, #108]	; (14474 <ll_rx_mem_release+0x17c>)
   14408:	f240 43ac 	movw	r3, #1196	; 0x4ac
   1440c:	463a      	mov	r2, r7
   1440e:	4630      	mov	r0, r6
   14410:	f00d ff62 	bl	222d8 <printk>
   14414:	4040      	eors	r0, r0
   14416:	f380 8811 	msr	BASEPRI, r0
   1441a:	f04f 0003 	mov.w	r0, #3
   1441e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   14420:	f89a 3000 	ldrb.w	r3, [sl]
   14424:	e7c2      	b.n	143ac <ll_rx_mem_release+0xb4>
				mem_release(rx_free, &mem_pdu_rx.free);
   14426:	4911      	ldr	r1, [pc, #68]	; (1446c <ll_rx_mem_release+0x174>)
   14428:	4628      	mov	r0, r5
   1442a:	f7fc fa4f 	bl	108cc <mem_release>
	while (rx) {
   1442e:	2c00      	cmp	r4, #0
   14430:	f47f af6b 	bne.w	1430a <ll_rx_mem_release+0x12>
   14434:	e78c      	b.n	14350 <ll_rx_mem_release+0x58>
			LL_ASSERT(link);
   14436:	4910      	ldr	r1, [pc, #64]	; (14478 <ll_rx_mem_release+0x180>)
   14438:	f240 4396 	movw	r3, #1174	; 0x496
   1443c:	463a      	mov	r2, r7
   1443e:	4630      	mov	r0, r6
   14440:	f00d ff4a 	bl	222d8 <printk>
   14444:	4040      	eors	r0, r0
   14446:	f380 8811 	msr	BASEPRI, r0
   1444a:	f04f 0003 	mov.w	r0, #3
   1444e:	df02      	svc	2
   14450:	e7d1      	b.n	143f6 <ll_rx_mem_release+0xfe>
   14452:	bf00      	nop
   14454:	00029024 	.word	0x00029024
   14458:	00028e78 	.word	0x00028e78
   1445c:	00028de0 	.word	0x00028de0
   14460:	0002911c 	.word	0x0002911c
   14464:	00029128 	.word	0x00029128
   14468:	2000dfec 	.word	0x2000dfec
   1446c:	2000e054 	.word	0x2000e054
   14470:	0002914c 	.word	0x0002914c
   14474:	000290a4 	.word	0x000290a4
   14478:	000292ec 	.word	0x000292ec

0001447c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1447c:	4801      	ldr	r0, [pc, #4]	; (14484 <ll_rx_link_alloc+0x8>)
   1447e:	f7fc ba0b 	b.w	10898 <mem_acquire>
   14482:	bf00      	nop
   14484:	2000dff0 	.word	0x2000dff0

00014488 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   14488:	4901      	ldr	r1, [pc, #4]	; (14490 <ll_rx_link_release+0x8>)
   1448a:	f7fc ba1f 	b.w	108cc <mem_release>
   1448e:	bf00      	nop
   14490:	2000dff0 	.word	0x2000dff0

00014494 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   14494:	4801      	ldr	r0, [pc, #4]	; (1449c <ll_rx_alloc+0x8>)
   14496:	f7fc b9ff 	b.w	10898 <mem_acquire>
   1449a:	bf00      	nop
   1449c:	2000e054 	.word	0x2000e054

000144a0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   144a0:	4901      	ldr	r1, [pc, #4]	; (144a8 <ll_rx_release+0x8>)
   144a2:	f7fc ba13 	b.w	108cc <mem_release>
   144a6:	bf00      	nop
   144a8:	2000e054 	.word	0x2000e054

000144ac <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   144ac:	4b02      	ldr	r3, [pc, #8]	; (144b8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   144ae:	4a03      	ldr	r2, [pc, #12]	; (144bc <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   144b0:	78db      	ldrb	r3, [r3, #3]
   144b2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   144b4:	f7fc ba54 	b.w	10960 <memq_enqueue>
   144b8:	20000580 	.word	0x20000580
   144bc:	2000e2e4 	.word	0x2000e2e4

000144c0 <ll_rx_sched>:
	k_sem_give(sem_recv);
   144c0:	4b01      	ldr	r3, [pc, #4]	; (144c8 <ll_rx_sched+0x8>)
   144c2:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   144c4:	f00c bba8 	b.w	20c18 <z_impl_k_sem_give>
   144c8:	2000e2f0 	.word	0x2000e2f0

000144cc <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   144cc:	4b0d      	ldr	r3, [pc, #52]	; (14504 <ll_pdu_rx_alloc_peek+0x38>)
   144ce:	789a      	ldrb	r2, [r3, #2]
   144d0:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   144d4:	4562      	cmp	r2, ip
   144d6:	d809      	bhi.n	144ec <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   144d8:	ebac 0102 	sub.w	r1, ip, r2
   144dc:	b2c9      	uxtb	r1, r1
   144de:	4288      	cmp	r0, r1
   144e0:	d802      	bhi.n	144e8 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   144e2:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   144e4:	7819      	ldrb	r1, [r3, #0]
   144e6:	d108      	bne.n	144fa <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   144e8:	2000      	movs	r0, #0
}
   144ea:	4770      	bx	lr
		return count - first + last;
   144ec:	7859      	ldrb	r1, [r3, #1]
   144ee:	1a89      	subs	r1, r1, r2
   144f0:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   144f2:	b2c9      	uxtb	r1, r1
   144f4:	4288      	cmp	r0, r1
   144f6:	d8f7      	bhi.n	144e8 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   144f8:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   144fa:	fb02 3301 	mla	r3, r2, r1, r3
   144fe:	6858      	ldr	r0, [r3, #4]
   14500:	4770      	bx	lr
   14502:	bf00      	nop
   14504:	20000430 	.word	0x20000430

00014508 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14508:	4b09      	ldr	r3, [pc, #36]	; (14530 <ll_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1450a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1450c:	78da      	ldrb	r2, [r3, #3]
   1450e:	7818      	ldrb	r0, [r3, #0]
   14510:	f893 c001 	ldrb.w	ip, [r3, #1]
   14514:	428a      	cmp	r2, r1
   14516:	d009      	beq.n	1452c <ll_pdu_rx_alloc+0x24>
	_first += 1U;
   14518:	1c4a      	adds	r2, r1, #1
   1451a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1451c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14520:	4594      	cmp	ip, r2
   14522:	bf08      	it	eq
   14524:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14526:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14528:	709a      	strb	r2, [r3, #2]

	return mem;
   1452a:	4770      	bx	lr
		return NULL;
   1452c:	2000      	movs	r0, #0
}
   1452e:	4770      	bx	lr
   14530:	20000430 	.word	0x20000430

00014534 <ll_tx_ack_put>:
{
   14534:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   14536:	4a15      	ldr	r2, [pc, #84]	; (1458c <ll_tx_ack_put+0x58>)
   14538:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1453a:	f892 e001 	ldrb.w	lr, [r2, #1]
   1453e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   14542:	1c63      	adds	r3, r4, #1
   14544:	b2db      	uxtb	r3, r3
		last = 0U;
   14546:	459e      	cmp	lr, r3
   14548:	bf08      	it	eq
   1454a:	2300      	moveq	r3, #0
	if (last == first) {
   1454c:	459c      	cmp	ip, r3
   1454e:	d00c      	beq.n	1456a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14550:	4696      	mov	lr, r2
   14552:	f81e cb04 	ldrb.w	ip, [lr], #4
   14556:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   1455a:	eb1e 040c 	adds.w	r4, lr, ip
   1455e:	d004      	beq.n	1456a <ll_tx_ack_put+0x36>
	tx->handle = handle;
   14560:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
   14564:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   14566:	70d3      	strb	r3, [r2, #3]
}
   14568:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   1456a:	4a09      	ldr	r2, [pc, #36]	; (14590 <ll_tx_ack_put+0x5c>)
   1456c:	4909      	ldr	r1, [pc, #36]	; (14594 <ll_tx_ack_put+0x60>)
   1456e:	480a      	ldr	r0, [pc, #40]	; (14598 <ll_tx_ack_put+0x64>)
   14570:	f240 43f4 	movw	r3, #1268	; 0x4f4
   14574:	f00d feb0 	bl	222d8 <printk>
   14578:	4040      	eors	r0, r0
   1457a:	f380 8811 	msr	BASEPRI, r0
   1457e:	f04f 0003 	mov.w	r0, #3
   14582:	df02      	svc	2
	tx->handle = handle;
   14584:	2300      	movs	r3, #0
   14586:	801b      	strh	r3, [r3, #0]
   14588:	deff      	udf	#255	; 0xff
   1458a:	bf00      	nop
   1458c:	20000580 	.word	0x20000580
   14590:	00029024 	.word	0x00029024
   14594:	000292e0 	.word	0x000292e0
   14598:	00028de0 	.word	0x00028de0

0001459c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1459c:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1459e:	2305      	movs	r3, #5
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   145a0:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   145a2:	700b      	strb	r3, [r1, #0]
}
   145a4:	4770      	bx	lr
   145a6:	bf00      	nop

000145a8 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   145a8:	2200      	movs	r2, #0
{
   145aa:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   145ac:	4611      	mov	r1, r2
   145ae:	4b0a      	ldr	r3, [pc, #40]	; (145d8 <ll_radio_state_abort+0x30>)
   145b0:	2001      	movs	r0, #1
   145b2:	f7fc fa49 	bl	10a48 <mayfly_enqueue>
	LL_ASSERT(!ret);
   145b6:	b900      	cbnz	r0, 145ba <ll_radio_state_abort+0x12>
}
   145b8:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   145ba:	4a08      	ldr	r2, [pc, #32]	; (145dc <ll_radio_state_abort+0x34>)
   145bc:	4908      	ldr	r1, [pc, #32]	; (145e0 <ll_radio_state_abort+0x38>)
   145be:	4809      	ldr	r0, [pc, #36]	; (145e4 <ll_radio_state_abort+0x3c>)
   145c0:	f240 530c 	movw	r3, #1292	; 0x50c
   145c4:	f00d fe88 	bl	222d8 <printk>
   145c8:	4040      	eors	r0, r0
   145ca:	f380 8811 	msr	BASEPRI, r0
   145ce:	f04f 0003 	mov.w	r0, #3
   145d2:	df02      	svc	2
}
   145d4:	bd08      	pop	{r3, pc}
   145d6:	bf00      	nop
   145d8:	200005d4 	.word	0x200005d4
   145dc:	00029024 	.word	0x00029024
   145e0:	0002907c 	.word	0x0002907c
   145e4:	00028de0 	.word	0x00028de0

000145e8 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   145e8:	f030 0302 	bics.w	r3, r0, #2
{
   145ec:	b510      	push	{r4, lr}
   145ee:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   145f0:	d002      	beq.n	145f8 <ull_ticker_status_take+0x10>
   145f2:	680b      	ldr	r3, [r1, #0]
   145f4:	2b02      	cmp	r3, #2
   145f6:	d008      	beq.n	1460a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   145f8:	f04f 32ff 	mov.w	r2, #4294967295
   145fc:	f04f 33ff 	mov.w	r3, #4294967295
   14600:	4809      	ldr	r0, [pc, #36]	; (14628 <ull_ticker_status_take+0x40>)
   14602:	f00c fb2f 	bl	20c64 <z_impl_k_sem_take>
	return *ret_cb;
   14606:	6820      	ldr	r0, [r4, #0]
}
   14608:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1460a:	4a08      	ldr	r2, [pc, #32]	; (1462c <ull_ticker_status_take+0x44>)
   1460c:	4908      	ldr	r1, [pc, #32]	; (14630 <ull_ticker_status_take+0x48>)
   1460e:	4809      	ldr	r0, [pc, #36]	; (14634 <ull_ticker_status_take+0x4c>)
   14610:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   14614:	f00d fe60 	bl	222d8 <printk>
   14618:	4040      	eors	r0, r0
   1461a:	f380 8811 	msr	BASEPRI, r0
   1461e:	f04f 0003 	mov.w	r0, #3
   14622:	df02      	svc	2
   14624:	e7e8      	b.n	145f8 <ull_ticker_status_take+0x10>
   14626:	bf00      	nop
   14628:	2000e2f4 	.word	0x2000e2f4
   1462c:	00029024 	.word	0x00029024
   14630:	00029164 	.word	0x00029164
   14634:	00028de0 	.word	0x00028de0

00014638 <ull_disable_mark>:
	if (!*m) {
   14638:	4a03      	ldr	r2, [pc, #12]	; (14648 <ull_disable_mark+0x10>)
{
   1463a:	4603      	mov	r3, r0
	if (!*m) {
   1463c:	6810      	ldr	r0, [r2, #0]
   1463e:	b100      	cbz	r0, 14642 <ull_disable_mark+0xa>
}
   14640:	4770      	bx	lr
		*m = param;
   14642:	6013      	str	r3, [r2, #0]
   14644:	4618      	mov	r0, r3
}
   14646:	4770      	bx	lr
   14648:	2000df28 	.word	0x2000df28

0001464c <ull_disable_unmark>:
	if (*m && *m == param) {
   1464c:	4a04      	ldr	r2, [pc, #16]	; (14660 <ull_disable_unmark+0x14>)
   1464e:	6813      	ldr	r3, [r2, #0]
   14650:	b123      	cbz	r3, 1465c <ull_disable_unmark+0x10>
   14652:	4298      	cmp	r0, r3
		*m = NULL;
   14654:	bf06      	itte	eq
   14656:	2100      	moveq	r1, #0
   14658:	6011      	streq	r1, [r2, #0]
	return NULL;
   1465a:	2300      	movne	r3, #0
}
   1465c:	4618      	mov	r0, r3
   1465e:	4770      	bx	lr
   14660:	2000df28 	.word	0x2000df28

00014664 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14664:	4b01      	ldr	r3, [pc, #4]	; (1466c <ull_disable_mark_get+0x8>)
}
   14666:	6818      	ldr	r0, [r3, #0]
   14668:	4770      	bx	lr
   1466a:	bf00      	nop
   1466c:	2000df28 	.word	0x2000df28

00014670 <ull_update_mark>:
	if (!*m) {
   14670:	4a03      	ldr	r2, [pc, #12]	; (14680 <ull_update_mark+0x10>)
{
   14672:	4603      	mov	r3, r0
	if (!*m) {
   14674:	6810      	ldr	r0, [r2, #0]
   14676:	b100      	cbz	r0, 1467a <ull_update_mark+0xa>
}
   14678:	4770      	bx	lr
		*m = param;
   1467a:	6013      	str	r3, [r2, #0]
   1467c:	4618      	mov	r0, r3
}
   1467e:	4770      	bx	lr
   14680:	2000df2c 	.word	0x2000df2c

00014684 <ull_update_unmark>:
	if (*m && *m == param) {
   14684:	4a04      	ldr	r2, [pc, #16]	; (14698 <ull_update_unmark+0x14>)
   14686:	6813      	ldr	r3, [r2, #0]
   14688:	b123      	cbz	r3, 14694 <ull_update_unmark+0x10>
   1468a:	4298      	cmp	r0, r3
		*m = NULL;
   1468c:	bf06      	itte	eq
   1468e:	2100      	moveq	r1, #0
   14690:	6011      	streq	r1, [r2, #0]
	return NULL;
   14692:	2300      	movne	r3, #0
}
   14694:	4618      	mov	r0, r3
   14696:	4770      	bx	lr
   14698:	2000df2c 	.word	0x2000df2c

0001469c <ull_update_mark_get>:
	return mark_get(mark_update);
   1469c:	4b01      	ldr	r3, [pc, #4]	; (146a4 <ull_update_mark_get+0x8>)
}
   1469e:	6818      	ldr	r0, [r3, #0]
   146a0:	4770      	bx	lr
   146a2:	bf00      	nop
   146a4:	2000df2c 	.word	0x2000df2c

000146a8 <ull_disable>:
{
   146a8:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   146aa:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   146ac:	f115 0f10 	cmn.w	r5, #16
{
   146b0:	b087      	sub	sp, #28
	if (!hdr) {
   146b2:	d00b      	beq.n	146cc <ull_disable+0x24>
	compiler_barrier();
   146b4:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   146b6:	2201      	movs	r2, #1
   146b8:	2100      	movs	r1, #0
   146ba:	4668      	mov	r0, sp
   146bc:	f013 f96f 	bl	2799e <z_impl_k_sem_init>
   146c0:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   146c2:	4a13      	ldr	r2, [pc, #76]	; (14710 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   146c4:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   146c8:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   146ca:	b913      	cbnz	r3, 146d2 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   146cc:	2000      	movs	r0, #0
}
   146ce:	b007      	add	sp, #28
   146d0:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   146d2:	4b10      	ldr	r3, [pc, #64]	; (14714 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   146d4:	2200      	movs	r2, #0
   146d6:	4611      	mov	r1, r2
   146d8:	2003      	movs	r0, #3
	mfy.param = lll;
   146da:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   146dc:	f7fc f9b4 	bl	10a48 <mayfly_enqueue>
	LL_ASSERT(!ret);
   146e0:	b940      	cbnz	r0, 146f4 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   146e2:	f04f 32ff 	mov.w	r2, #4294967295
   146e6:	f04f 33ff 	mov.w	r3, #4294967295
   146ea:	4668      	mov	r0, sp
   146ec:	f00c faba 	bl	20c64 <z_impl_k_sem_take>
}
   146f0:	b007      	add	sp, #28
   146f2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   146f4:	4a08      	ldr	r2, [pc, #32]	; (14718 <ull_disable+0x70>)
   146f6:	4909      	ldr	r1, [pc, #36]	; (1471c <ull_disable+0x74>)
   146f8:	4809      	ldr	r0, [pc, #36]	; (14720 <ull_disable+0x78>)
   146fa:	f240 539a 	movw	r3, #1434	; 0x59a
   146fe:	f00d fdeb 	bl	222d8 <printk>
   14702:	4040      	eors	r0, r0
   14704:	f380 8811 	msr	BASEPRI, r0
   14708:	f04f 0003 	mov.w	r0, #3
   1470c:	df02      	svc	2
   1470e:	e7e8      	b.n	146e2 <ull_disable+0x3a>
   14710:	00013745 	.word	0x00013745
   14714:	200005c4 	.word	0x200005c4
   14718:	00029024 	.word	0x00029024
   1471c:	0002907c 	.word	0x0002907c
   14720:	00028de0 	.word	0x00028de0

00014724 <ull_ticker_stop_with_mark>:
{
   14724:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   14726:	4d1d      	ldr	r5, [pc, #116]	; (1479c <ull_ticker_stop_with_mark+0x78>)
   14728:	682b      	ldr	r3, [r5, #0]
{
   1472a:	b085      	sub	sp, #20
   1472c:	460c      	mov	r4, r1
   1472e:	4616      	mov	r6, r2
	if (!*m) {
   14730:	b323      	cbz	r3, 1477c <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   14732:	4299      	cmp	r1, r3
   14734:	d112      	bne.n	1475c <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
   14736:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14738:	af03      	add	r7, sp, #12
   1473a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   1473c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1473e:	2103      	movs	r1, #3
   14740:	4b17      	ldr	r3, [pc, #92]	; (147a0 <ull_ticker_stop_with_mark+0x7c>)
   14742:	9700      	str	r7, [sp, #0]
   14744:	2000      	movs	r0, #0
   14746:	f7fd fb79 	bl	11e3c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1474a:	4639      	mov	r1, r7
   1474c:	f7ff ff4c 	bl	145e8 <ull_ticker_status_take>
	if (ret) {
   14750:	b140      	cbz	r0, 14764 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   14752:	682b      	ldr	r3, [r5, #0]
   14754:	b10b      	cbz	r3, 1475a <ull_ticker_stop_with_mark+0x36>
   14756:	429c      	cmp	r4, r3
   14758:	d012      	beq.n	14780 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   1475a:	b1cc      	cbz	r4, 14790 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   1475c:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   14760:	b005      	add	sp, #20
   14762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   14764:	4630      	mov	r0, r6
   14766:	f7ff ff9f 	bl	146a8 <ull_disable>
	if (ret) {
   1476a:	b9a0      	cbnz	r0, 14796 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   1476c:	682b      	ldr	r3, [r5, #0]
   1476e:	b10b      	cbz	r3, 14774 <ull_ticker_stop_with_mark+0x50>
   14770:	429c      	cmp	r4, r3
   14772:	d00b      	beq.n	1478c <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   14774:	2c00      	cmp	r4, #0
   14776:	d1f1      	bne.n	1475c <ull_ticker_stop_with_mark+0x38>
}
   14778:	b005      	add	sp, #20
   1477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   1477c:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   1477e:	e7da      	b.n	14736 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   14780:	2300      	movs	r3, #0
		return -EALREADY;
   14782:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   14786:	602b      	str	r3, [r5, #0]
}
   14788:	b005      	add	sp, #20
   1478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   1478c:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   1478e:	e7e7      	b.n	14760 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   14790:	f06f 0044 	mvn.w	r0, #68	; 0x44
   14794:	e7e4      	b.n	14760 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   14796:	f06f 000f 	mvn.w	r0, #15
   1479a:	e7e1      	b.n	14760 <ull_ticker_stop_with_mark+0x3c>
   1479c:	2000df28 	.word	0x2000df28
   147a0:	00013739 	.word	0x00013739

000147a4 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   147a4:	4b0d      	ldr	r3, [pc, #52]	; (147dc <ull_pdu_rx_alloc_peek+0x38>)
   147a6:	789a      	ldrb	r2, [r3, #2]
   147a8:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   147ac:	4562      	cmp	r2, ip
   147ae:	d809      	bhi.n	147c4 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   147b0:	ebac 0102 	sub.w	r1, ip, r2
   147b4:	b2c9      	uxtb	r1, r1
   147b6:	4288      	cmp	r0, r1
   147b8:	d802      	bhi.n	147c0 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   147ba:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   147bc:	7819      	ldrb	r1, [r3, #0]
   147be:	d108      	bne.n	147d2 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   147c0:	2000      	movs	r0, #0
}
   147c2:	4770      	bx	lr
		return count - first + last;
   147c4:	7859      	ldrb	r1, [r3, #1]
   147c6:	1a89      	subs	r1, r1, r2
   147c8:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   147ca:	b2c9      	uxtb	r1, r1
   147cc:	4288      	cmp	r0, r1
   147ce:	d8f7      	bhi.n	147c0 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   147d0:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   147d2:	fb02 3301 	mla	r3, r2, r1, r3
   147d6:	6858      	ldr	r0, [r3, #4]
   147d8:	4770      	bx	lr
   147da:	bf00      	nop
   147dc:	20000444 	.word	0x20000444

000147e0 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   147e0:	4b09      	ldr	r3, [pc, #36]	; (14808 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   147e2:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   147e4:	78da      	ldrb	r2, [r3, #3]
   147e6:	7818      	ldrb	r0, [r3, #0]
   147e8:	f893 c001 	ldrb.w	ip, [r3, #1]
   147ec:	428a      	cmp	r2, r1
   147ee:	d009      	beq.n	14804 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   147f0:	1c4a      	adds	r2, r1, #1
   147f2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   147f4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   147f8:	4594      	cmp	ip, r2
   147fa:	bf08      	it	eq
   147fc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   147fe:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14800:	709a      	strb	r2, [r3, #2]
	return mem;
   14802:	4770      	bx	lr
		return NULL;
   14804:	2000      	movs	r0, #0
}
   14806:	4770      	bx	lr
   14808:	20000444 	.word	0x20000444

0001480c <ull_rx_put>:
{
   1480c:	b538      	push	{r3, r4, r5, lr}
   1480e:	460c      	mov	r4, r1
   14810:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14812:	f004 fe55 	bl	194c0 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14816:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14818:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1481a:	4a03      	ldr	r2, [pc, #12]	; (14828 <ull_rx_put+0x1c>)
   1481c:	4628      	mov	r0, r5
}
   1481e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14822:	f7fc b89d 	b.w	10960 <memq_enqueue>
   14826:	bf00      	nop
   14828:	2000e2ec 	.word	0x2000e2ec

0001482c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1482c:	2201      	movs	r2, #1
   1482e:	4b02      	ldr	r3, [pc, #8]	; (14838 <ull_rx_sched+0xc>)
   14830:	4611      	mov	r1, r2
   14832:	2000      	movs	r0, #0
   14834:	f7fc b908 	b.w	10a48 <mayfly_enqueue>
   14838:	200005b4 	.word	0x200005b4

0001483c <ull_prepare_enqueue>:
{
   1483c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14840:	4e18      	ldr	r6, [pc, #96]	; (148a4 <ull_prepare_enqueue+0x68>)
{
   14842:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
   14846:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14848:	78f3      	ldrb	r3, [r6, #3]
{
   1484a:	4680      	mov	r8, r0
	last = last + 1;
   1484c:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   1484e:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
   14850:	b2ed      	uxtb	r5, r5
		last = 0U;
   14852:	42a8      	cmp	r0, r5
   14854:	bf08      	it	eq
   14856:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14858:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
   1485a:	42a8      	cmp	r0, r5
   1485c:	d01e      	beq.n	1489c <ull_prepare_enqueue+0x60>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1485e:	4634      	mov	r4, r6
   14860:	460f      	mov	r7, r1
   14862:	4611      	mov	r1, r2
   14864:	f814 2b04 	ldrb.w	r2, [r4], #4
   14868:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
   1486c:	b1b4      	cbz	r4, 1489c <ull_prepare_enqueue+0x60>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1486e:	2210      	movs	r2, #16
   14870:	4620      	mov	r0, r4
   14872:	f010 f9ed 	bl	24c50 <memcpy>
	e->is_resume = is_resume;
   14876:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->prio = prio;
   1487a:	9a08      	ldr	r2, [sp, #32]
	e->abort_cb = abort_cb;
   1487c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   1487e:	f00a 0a01 	and.w	sl, sl, #1
   14882:	f023 0303 	bic.w	r3, r3, #3
   14886:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   1488a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->prio = prio;
   1488e:	61e2      	str	r2, [r4, #28]
	e->is_resume = is_resume;
   14890:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   14894:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   14896:	70f5      	strb	r5, [r6, #3]
}
   14898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   1489c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   148a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   148a4:	2000045c 	.word	0x2000045c

000148a8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   148a8:	4b05      	ldr	r3, [pc, #20]	; (148c0 <ull_prepare_dequeue_get+0x18>)
   148aa:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   148ac:	78da      	ldrb	r2, [r3, #3]
   148ae:	7819      	ldrb	r1, [r3, #0]
   148b0:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   148b2:	bf1a      	itte	ne
   148b4:	3304      	addne	r3, #4
   148b6:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   148ba:	2000      	moveq	r0, #0
}
   148bc:	4770      	bx	lr
   148be:	bf00      	nop
   148c0:	2000045c 	.word	0x2000045c

000148c4 <ull_prepare_dequeue_iter>:
{
   148c4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   148c6:	4b0d      	ldr	r3, [pc, #52]	; (148fc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   148c8:	7802      	ldrb	r2, [r0, #0]
   148ca:	7859      	ldrb	r1, [r3, #1]
   148cc:	f893 c003 	ldrb.w	ip, [r3, #3]
   148d0:	f893 e000 	ldrb.w	lr, [r3]
   148d4:	4291      	cmp	r1, r2
   148d6:	bf9c      	itt	ls
   148d8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   148da:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   148dc:	4594      	cmp	ip, r2
   148de:	d00a      	beq.n	148f6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   148e0:	1c53      	adds	r3, r2, #1
   148e2:	b2db      	uxtb	r3, r3
		i = 0U;
   148e4:	4299      	cmp	r1, r3
   148e6:	bf08      	it	eq
   148e8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   148ea:	4905      	ldr	r1, [pc, #20]	; (14900 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   148ec:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   148ee:	fb02 100e 	mla	r0, r2, lr, r1
}
   148f2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   148f6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   148f8:	e7fb      	b.n	148f2 <ull_prepare_dequeue_iter+0x2e>
   148fa:	bf00      	nop
   148fc:	2000045c 	.word	0x2000045c
   14900:	20000460 	.word	0x20000460

00014904 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   14904:	4b06      	ldr	r3, [pc, #24]	; (14920 <ull_event_done_extra_get+0x1c>)
   14906:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   14908:	78d9      	ldrb	r1, [r3, #3]
   1490a:	7818      	ldrb	r0, [r3, #0]
   1490c:	4291      	cmp	r1, r2
   1490e:	d005      	beq.n	1491c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   14910:	fb02 3300 	mla	r3, r2, r0, r3
   14914:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   14916:	b110      	cbz	r0, 1491e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   14918:	3020      	adds	r0, #32
   1491a:	4770      	bx	lr
		return NULL;
   1491c:	2000      	movs	r0, #0
}
   1491e:	4770      	bx	lr
   14920:	2000041c 	.word	0x2000041c

00014924 <ull_event_done>:
{
   14924:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   14926:	4a14      	ldr	r2, [pc, #80]	; (14978 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   14928:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1492a:	78d4      	ldrb	r4, [r2, #3]
   1492c:	7811      	ldrb	r1, [r2, #0]
   1492e:	7855      	ldrb	r5, [r2, #1]
   14930:	429c      	cmp	r4, r3
   14932:	d01f      	beq.n	14974 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   14934:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   14938:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1493a:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1493c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1493e:	429d      	cmp	r5, r3
   14940:	bf08      	it	eq
   14942:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   14944:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   14946:	b19c      	cbz	r4, 14970 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   14948:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   1494a:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1494c:	6826      	ldr	r6, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1494e:	7123      	strb	r3, [r4, #4]
	evdone->hdr.link = NULL;
   14950:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   14952:	61e0      	str	r0, [r4, #28]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14954:	f004 fdb4 	bl	194c0 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14958:	4a08      	ldr	r2, [pc, #32]	; (1497c <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1495a:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1495c:	4621      	mov	r1, r4
   1495e:	4630      	mov	r0, r6
   14960:	f7fb fffe 	bl	10960 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   14964:	2201      	movs	r2, #1
   14966:	4b06      	ldr	r3, [pc, #24]	; (14980 <ull_event_done+0x5c>)
   14968:	4611      	mov	r1, r2
   1496a:	4628      	mov	r0, r5
   1496c:	f7fc f86c 	bl	10a48 <mayfly_enqueue>
}
   14970:	4620      	mov	r0, r4
   14972:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   14974:	2400      	movs	r4, #0
   14976:	e7fb      	b.n	14970 <ull_event_done+0x4c>
   14978:	2000041c 	.word	0x2000041c
   1497c:	2000e2ec 	.word	0x2000e2ec
   14980:	200005b4 	.word	0x200005b4

00014984 <ticker_stop_cb>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder,
			   uint16_t lazy, void *param)
{
   14984:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14986:	491a      	ldr	r1, [pc, #104]	; (149f0 <ticker_stop_cb+0x6c>)
   14988:	4a1a      	ldr	r2, [pc, #104]	; (149f4 <ticker_stop_cb+0x70>)
   1498a:	1a59      	subs	r1, r3, r1
{
   1498c:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1498e:	fba2 3101 	umull	r3, r1, r2, r1
	struct ll_adv_set *adv = param;
	uint8_t handle;
	uint32_t ret;

	handle = ull_adv_handle_get(adv);
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   14992:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
   14996:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14998:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1499c:	d119      	bne.n	149d2 <ticker_stop_cb+0x4e>

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			  TICKER_ID_ADV_BASE + handle,
   1499e:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   149a0:	4b15      	ldr	r3, [pc, #84]	; (149f8 <ticker_stop_cb+0x74>)
   149a2:	9400      	str	r4, [sp, #0]
   149a4:	b2d2      	uxtb	r2, r2
   149a6:	2101      	movs	r1, #1
   149a8:	2000      	movs	r0, #0
   149aa:	f7fd fa47 	bl	11e3c <ticker_stop>
			  ticker_op_stop_cb, adv);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   149ae:	f030 0302 	bics.w	r3, r0, #2
   149b2:	d00c      	beq.n	149ce <ticker_stop_cb+0x4a>
   149b4:	4a11      	ldr	r2, [pc, #68]	; (149fc <ticker_stop_cb+0x78>)
   149b6:	4912      	ldr	r1, [pc, #72]	; (14a00 <ticker_stop_cb+0x7c>)
   149b8:	4812      	ldr	r0, [pc, #72]	; (14a04 <ticker_stop_cb+0x80>)
   149ba:	f240 63de 	movw	r3, #1758	; 0x6de
   149be:	f00d fc8b 	bl	222d8 <printk>
   149c2:	4040      	eors	r0, r0
   149c4:	f380 8811 	msr	BASEPRI, r0
   149c8:	f04f 0003 	mov.w	r0, #3
   149cc:	df02      	svc	2
		  (ret == TICKER_STATUS_BUSY));
}
   149ce:	b003      	add	sp, #12
   149d0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   149d2:	4a0a      	ldr	r2, [pc, #40]	; (149fc <ticker_stop_cb+0x78>)
   149d4:	490c      	ldr	r1, [pc, #48]	; (14a08 <ticker_stop_cb+0x84>)
   149d6:	480b      	ldr	r0, [pc, #44]	; (14a04 <ticker_stop_cb+0x80>)
   149d8:	f240 63d9 	movw	r3, #1753	; 0x6d9
   149dc:	f00d fc7c 	bl	222d8 <printk>
   149e0:	4040      	eors	r0, r0
   149e2:	f380 8811 	msr	BASEPRI, r0
   149e6:	f04f 0003 	mov.w	r0, #3
   149ea:	df02      	svc	2
   149ec:	e7d7      	b.n	1499e <ticker_stop_cb+0x1a>
   149ee:	bf00      	nop
   149f0:	2000e6fc 	.word	0x2000e6fc
   149f4:	ba2e8ba3 	.word	0xba2e8ba3
   149f8:	00014bcd 	.word	0x00014bcd
   149fc:	00029190 	.word	0x00029190
   14a00:	000291dc 	.word	0x000291dc
   14a04:	00028de0 	.word	0x00028de0
   14a08:	000291d0 	.word	0x000291d0

00014a0c <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   14a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   14a0e:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   14a10:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
   14a12:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   14a14:	b1d7      	cbz	r7, 14a4c <disabled_cb+0x40>
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
   14a16:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
   14a18:	2300      	movs	r3, #0
   14a1a:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   14a1c:	b34c      	cbz	r4, 14a72 <disabled_cb+0x66>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
   14a1e:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14a20:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   14a22:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14a24:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   14a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14a2a:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   14a2c:	221e      	movs	r2, #30
   14a2e:	f104 001c 	add.w	r0, r4, #28
   14a32:	f010 f938 	bl	24ca6 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   14a36:	233c      	movs	r3, #60	; 0x3c
   14a38:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   14a3a:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   14a3c:	4621      	mov	r1, r4
   14a3e:	4638      	mov	r0, r7
   14a40:	f7ff fd34 	bl	144ac <ll_rx_put>
	ll_rx_sched();
}
   14a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   14a48:	f7ff bd3a 	b.w	144c0 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   14a4c:	4a10      	ldr	r2, [pc, #64]	; (14a90 <disabled_cb+0x84>)
   14a4e:	4911      	ldr	r1, [pc, #68]	; (14a94 <disabled_cb+0x88>)
   14a50:	4811      	ldr	r0, [pc, #68]	; (14a98 <disabled_cb+0x8c>)
   14a52:	f240 7315 	movw	r3, #1813	; 0x715
   14a56:	f00d fc3f 	bl	222d8 <printk>
   14a5a:	4040      	eors	r0, r0
   14a5c:	f380 8811 	msr	BASEPRI, r0
   14a60:	f04f 0003 	mov.w	r0, #3
   14a64:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   14a66:	6cac      	ldr	r4, [r5, #72]	; 0x48
	link = adv->link_cc_free;
   14a68:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   14a6a:	2300      	movs	r3, #0
   14a6c:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   14a6e:	2c00      	cmp	r4, #0
   14a70:	d1d5      	bne.n	14a1e <disabled_cb+0x12>
   14a72:	4a07      	ldr	r2, [pc, #28]	; (14a90 <disabled_cb+0x84>)
   14a74:	4909      	ldr	r1, [pc, #36]	; (14a9c <disabled_cb+0x90>)
   14a76:	4808      	ldr	r0, [pc, #32]	; (14a98 <disabled_cb+0x8c>)
   14a78:	f240 7319 	movw	r3, #1817	; 0x719
   14a7c:	f00d fc2c 	bl	222d8 <printk>
   14a80:	4040      	eors	r0, r0
   14a82:	f380 8811 	msr	BASEPRI, r0
   14a86:	f04f 0003 	mov.w	r0, #3
   14a8a:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   14a8c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   14a8e:	e7c6      	b.n	14a1e <disabled_cb+0x12>
   14a90:	00029190 	.word	0x00029190
   14a94:	000291f8 	.word	0x000291f8
   14a98:	00028de0 	.word	0x00028de0
   14a9c:	0002920c 	.word	0x0002920c

00014aa0 <ticker_cb>:
{
   14aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14aa4:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14aaa:	4295      	cmp	r5, r2
{
   14aac:	b08a      	sub	sp, #40	; 0x28
   14aae:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14ab0:	d017      	beq.n	14ae2 <ticker_cb+0x42>
	return ++hdr->ref;
   14ab2:	7c1b      	ldrb	r3, [r3, #16]
   14ab4:	3301      	adds	r3, #1
   14ab6:	b2db      	uxtb	r3, r3
   14ab8:	4680      	mov	r8, r0
   14aba:	460f      	mov	r7, r1
   14abc:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   14abe:	2b00      	cmp	r3, #0
   14ac0:	d060      	beq.n	14b84 <ticker_cb+0xe4>
		p.ticks_at_expire = ticks_at_expire;
   14ac2:	4e37      	ldr	r6, [pc, #220]	; (14ba0 <ticker_cb+0x100>)
		mfy.param = &p;
   14ac4:	4b37      	ldr	r3, [pc, #220]	; (14ba4 <ticker_cb+0x104>)
		p.ticks_at_expire = ticks_at_expire;
   14ac6:	f8c6 8000 	str.w	r8, [r6]
	lll = &adv->lll;
   14aca:	f104 021c 	add.w	r2, r4, #28
		p.param = lll;
   14ace:	60f2      	str	r2, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14ad0:	2200      	movs	r2, #0
   14ad2:	4611      	mov	r1, r2
   14ad4:	2001      	movs	r0, #1
		p.remainder = remainder;
   14ad6:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   14ad8:	8135      	strh	r5, [r6, #8]
		mfy.param = &p;
   14ada:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14adc:	f7fb ffb4 	bl	10a48 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14ae0:	b938      	cbnz	r0, 14af2 <ticker_cb+0x52>
	if (!lll->is_hdcd)
   14ae2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   14ae6:	f010 0501 	ands.w	r5, r0, #1
   14aea:	d014      	beq.n	14b16 <ticker_cb+0x76>
}
   14aec:	b00a      	add	sp, #40	; 0x28
   14aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   14af2:	4a2d      	ldr	r2, [pc, #180]	; (14ba8 <ticker_cb+0x108>)
   14af4:	492d      	ldr	r1, [pc, #180]	; (14bac <ticker_cb+0x10c>)
   14af6:	482e      	ldr	r0, [pc, #184]	; (14bb0 <ticker_cb+0x110>)
   14af8:	f240 6395 	movw	r3, #1685	; 0x695
   14afc:	f00d fbec 	bl	222d8 <printk>
   14b00:	4040      	eors	r0, r0
   14b02:	f380 8811 	msr	BASEPRI, r0
   14b06:	f04f 0003 	mov.w	r0, #3
   14b0a:	df02      	svc	2
	if (!lll->is_hdcd)
   14b0c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   14b10:	f010 0501 	ands.w	r5, r0, #1
   14b14:	d1ea      	bne.n	14aec <ticker_cb+0x4c>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   14b16:	2104      	movs	r1, #4
   14b18:	a809      	add	r0, sp, #36	; 0x24
   14b1a:	f006 fa75 	bl	1b008 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   14b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14b20:	4a24      	ldr	r2, [pc, #144]	; (14bb4 <ticker_cb+0x114>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14b22:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   14b24:	fba2 1203 	umull	r1, r2, r2, r3
   14b28:	1a99      	subs	r1, r3, r2
   14b2a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   14b2e:	0a12      	lsrs	r2, r2, #8
   14b30:	f240 1147 	movw	r1, #327	; 0x147
   14b34:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14b38:	4a1f      	ldr	r2, [pc, #124]	; (14bb8 <ticker_cb+0x118>)
   14b3a:	4920      	ldr	r1, [pc, #128]	; (14bbc <ticker_cb+0x11c>)
   14b3c:	1aa2      	subs	r2, r4, r2
   14b3e:	fba1 1202 	umull	r1, r2, r1, r2
   14b42:	0992      	lsrs	r2, r2, #6
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14b44:	491e      	ldr	r1, [pc, #120]	; (14bc0 <ticker_cb+0x120>)
				    (TICKER_ID_ADV_BASE +
   14b46:	3202      	adds	r2, #2
		random_delay += 1;
   14b48:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14b4a:	e9cd 5104 	strd	r5, r1, [sp, #16]
   14b4e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14b52:	e9cd 5500 	strd	r5, r5, [sp]
   14b56:	b2d2      	uxtb	r2, r2
   14b58:	2101      	movs	r1, #1
   14b5a:	4628      	mov	r0, r5
		random_delay += 1;
   14b5c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14b5e:	f7fd f955 	bl	11e0c <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14b62:	f030 0302 	bics.w	r3, r0, #2
   14b66:	d0c1      	beq.n	14aec <ticker_cb+0x4c>
   14b68:	4a0f      	ldr	r2, [pc, #60]	; (14ba8 <ticker_cb+0x108>)
   14b6a:	4916      	ldr	r1, [pc, #88]	; (14bc4 <ticker_cb+0x124>)
   14b6c:	4810      	ldr	r0, [pc, #64]	; (14bb0 <ticker_cb+0x110>)
   14b6e:	f240 63ab 	movw	r3, #1707	; 0x6ab
   14b72:	f00d fbb1 	bl	222d8 <printk>
   14b76:	4040      	eors	r0, r0
   14b78:	f380 8811 	msr	BASEPRI, r0
   14b7c:	f04f 0003 	mov.w	r0, #3
   14b80:	df02      	svc	2
}
   14b82:	e7b3      	b.n	14aec <ticker_cb+0x4c>
		LL_ASSERT(ref);
   14b84:	4a08      	ldr	r2, [pc, #32]	; (14ba8 <ticker_cb+0x108>)
   14b86:	4910      	ldr	r1, [pc, #64]	; (14bc8 <ticker_cb+0x128>)
   14b88:	4809      	ldr	r0, [pc, #36]	; (14bb0 <ticker_cb+0x110>)
   14b8a:	f240 6389 	movw	r3, #1673	; 0x689
   14b8e:	f00d fba3 	bl	222d8 <printk>
   14b92:	4040      	eors	r0, r0
   14b94:	f380 8811 	msr	BASEPRI, r0
   14b98:	f04f 0003 	mov.w	r0, #3
   14b9c:	df02      	svc	2
   14b9e:	e790      	b.n	14ac2 <ticker_cb+0x22>
   14ba0:	2000e760 	.word	0x2000e760
   14ba4:	200005f4 	.word	0x200005f4
   14ba8:	00029190 	.word	0x00029190
   14bac:	0002907c 	.word	0x0002907c
   14bb0:	00028de0 	.word	0x00028de0
   14bb4:	90d4f121 	.word	0x90d4f121
   14bb8:	2000e6fc 	.word	0x2000e6fc
   14bbc:	ba2e8ba3 	.word	0xba2e8ba3
   14bc0:	00014c89 	.word	0x00014c89
   14bc4:	000291dc 	.word	0x000291dc
   14bc8:	00029224 	.word	0x00029224

00014bcc <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   14bcc:	2800      	cmp	r0, #0
   14bce:	d13d      	bne.n	14c4c <ticker_op_stop_cb+0x80>
{
   14bd0:	b538      	push	{r3, r4, r5, lr}
   14bd2:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   14bd4:	4d25      	ldr	r5, [pc, #148]	; (14c6c <ticker_op_stop_cb+0xa0>)
	return hdr->ref;
   14bd6:	7c09      	ldrb	r1, [r1, #16]
   14bd8:	f104 031c 	add.w	r3, r4, #28
   14bdc:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   14bde:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   14be2:	b1e1      	cbz	r1, 14c1e <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   14be4:	6962      	ldr	r2, [r4, #20]
   14be6:	b16a      	cbz	r2, 14c04 <ticker_op_stop_cb+0x38>
   14be8:	4a21      	ldr	r2, [pc, #132]	; (14c70 <ticker_op_stop_cb+0xa4>)
   14bea:	4922      	ldr	r1, [pc, #136]	; (14c74 <ticker_op_stop_cb+0xa8>)
   14bec:	4822      	ldr	r0, [pc, #136]	; (14c78 <ticker_op_stop_cb+0xac>)
   14bee:	f240 63fc 	movw	r3, #1788	; 0x6fc
   14bf2:	f00d fb71 	bl	222d8 <printk>
   14bf6:	4040      	eors	r0, r0
   14bf8:	f380 8811 	msr	BASEPRI, r0
   14bfc:	f04f 0003 	mov.w	r0, #3
   14c00:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   14c02:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   14c04:	491d      	ldr	r1, [pc, #116]	; (14c7c <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
   14c06:	481e      	ldr	r0, [pc, #120]	; (14c80 <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
   14c08:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14c0a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   14c0c:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   14c0e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14c10:	4b16      	ldr	r3, [pc, #88]	; (14c6c <ticker_op_stop_cb+0xa0>)
   14c12:	4611      	mov	r1, r2
   14c14:	2002      	movs	r0, #2
   14c16:	f7fb ff17 	bl	10a48 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14c1a:	b9c0      	cbnz	r0, 14c4e <ticker_op_stop_cb+0x82>
}
   14c1c:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   14c1e:	4817      	ldr	r0, [pc, #92]	; (14c7c <ticker_op_stop_cb+0xb0>)
   14c20:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14c22:	462b      	mov	r3, r5
   14c24:	2101      	movs	r1, #1
   14c26:	2002      	movs	r0, #2
   14c28:	f7fb ff0e 	bl	10a48 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14c2c:	2800      	cmp	r0, #0
   14c2e:	d0f5      	beq.n	14c1c <ticker_op_stop_cb+0x50>
   14c30:	4a0f      	ldr	r2, [pc, #60]	; (14c70 <ticker_op_stop_cb+0xa4>)
   14c32:	4914      	ldr	r1, [pc, #80]	; (14c84 <ticker_op_stop_cb+0xb8>)
   14c34:	4810      	ldr	r0, [pc, #64]	; (14c78 <ticker_op_stop_cb+0xac>)
   14c36:	f44f 63e1 	mov.w	r3, #1800	; 0x708
   14c3a:	f00d fb4d 	bl	222d8 <printk>
   14c3e:	4040      	eors	r0, r0
   14c40:	f380 8811 	msr	BASEPRI, r0
   14c44:	f04f 0003 	mov.w	r0, #3
   14c48:	df02      	svc	2
}
   14c4a:	bd38      	pop	{r3, r4, r5, pc}
   14c4c:	4770      	bx	lr
		LL_ASSERT(!ret);
   14c4e:	4a08      	ldr	r2, [pc, #32]	; (14c70 <ticker_op_stop_cb+0xa4>)
   14c50:	490c      	ldr	r1, [pc, #48]	; (14c84 <ticker_op_stop_cb+0xb8>)
   14c52:	4809      	ldr	r0, [pc, #36]	; (14c78 <ticker_op_stop_cb+0xac>)
   14c54:	f240 7303 	movw	r3, #1795	; 0x703
   14c58:	f00d fb3e 	bl	222d8 <printk>
   14c5c:	4040      	eors	r0, r0
   14c5e:	f380 8811 	msr	BASEPRI, r0
   14c62:	f04f 0003 	mov.w	r0, #3
   14c66:	df02      	svc	2
}
   14c68:	bd38      	pop	{r3, r4, r5, pc}
   14c6a:	bf00      	nop
   14c6c:	20000604 	.word	0x20000604
   14c70:	00029190 	.word	0x00029190
   14c74:	00029228 	.word	0x00029228
   14c78:	00028de0 	.word	0x00028de0
   14c7c:	00014a0d 	.word	0x00014a0d
   14c80:	0001b099 	.word	0x0001b099
   14c84:	0002907c 	.word	0x0002907c

00014c88 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14c88:	b900      	cbnz	r0, 14c8c <ticker_op_update_cb+0x4>
   14c8a:	4770      	bx	lr
{
   14c8c:	b510      	push	{r4, lr}
   14c8e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14c90:	f7ff fce8 	bl	14664 <ull_disable_mark_get>
   14c94:	4284      	cmp	r4, r0
   14c96:	d00c      	beq.n	14cb2 <ticker_op_update_cb+0x2a>
   14c98:	4a06      	ldr	r2, [pc, #24]	; (14cb4 <ticker_op_update_cb+0x2c>)
   14c9a:	4907      	ldr	r1, [pc, #28]	; (14cb8 <ticker_op_update_cb+0x30>)
   14c9c:	4807      	ldr	r0, [pc, #28]	; (14cbc <ticker_op_update_cb+0x34>)
   14c9e:	f240 63cc 	movw	r3, #1740	; 0x6cc
   14ca2:	f00d fb19 	bl	222d8 <printk>
   14ca6:	4040      	eors	r0, r0
   14ca8:	f380 8811 	msr	BASEPRI, r0
   14cac:	f04f 0003 	mov.w	r0, #3
   14cb0:	df02      	svc	2
}
   14cb2:	bd10      	pop	{r4, pc}
   14cb4:	00029190 	.word	0x00029190
   14cb8:	0002923c 	.word	0x0002923c
   14cbc:	00028de0 	.word	0x00028de0

00014cc0 <conn_release.constprop.0>:

static void conn_release(struct ll_adv_set *adv)
   14cc0:	b570      	push	{r4, r5, r6, lr}
{
	struct lll_conn *lll = adv->lll.conn;
   14cc2:	4c1b      	ldr	r4, [pc, #108]	; (14d30 <conn_release.constprop.0+0x70>)
   14cc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   14cc6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   14cc8:	b163      	cbz	r3, 14ce4 <conn_release.constprop.0+0x24>
   14cca:	4a1a      	ldr	r2, [pc, #104]	; (14d34 <conn_release.constprop.0+0x74>)
   14ccc:	491a      	ldr	r1, [pc, #104]	; (14d38 <conn_release.constprop.0+0x78>)
   14cce:	481b      	ldr	r0, [pc, #108]	; (14d3c <conn_release.constprop.0+0x7c>)
   14cd0:	f240 7343 	movw	r3, #1859	; 0x743
   14cd4:	f00d fb00 	bl	222d8 <printk>
   14cd8:	4040      	eors	r0, r0
   14cda:	f380 8811 	msr	BASEPRI, r0
   14cde:	f04f 0003 	mov.w	r0, #3
   14ce2:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   14ce4:	f105 0150 	add.w	r1, r5, #80	; 0x50
   14ce8:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14cec:	f7fb fe2e 	bl	1094c <memq_deinit>
	LL_ASSERT(link);
   14cf0:	4606      	mov	r6, r0
   14cf2:	b170      	cbz	r0, 14d12 <conn_release.constprop.0+0x52>
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   14cf4:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   14cf6:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   14cf8:	f000 ffba 	bl	15c70 <ll_conn_release>
	adv->lll.conn = NULL;
   14cfc:	2500      	movs	r5, #0

	ll_rx_release(adv->node_rx_cc_free);
   14cfe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   14d00:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   14d02:	f7ff fbcd 	bl	144a0 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   14d06:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   14d08:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   14d0a:	f7ff fbbd 	bl	14488 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   14d0e:	6465      	str	r5, [r4, #68]	; 0x44
}
   14d10:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14d12:	4a08      	ldr	r2, [pc, #32]	; (14d34 <conn_release.constprop.0+0x74>)
   14d14:	490a      	ldr	r1, [pc, #40]	; (14d40 <conn_release.constprop.0+0x80>)
   14d16:	4809      	ldr	r0, [pc, #36]	; (14d3c <conn_release.constprop.0+0x7c>)
   14d18:	f240 7345 	movw	r3, #1861	; 0x745
   14d1c:	f00d fadc 	bl	222d8 <printk>
   14d20:	4040      	eors	r0, r0
   14d22:	f380 8811 	msr	BASEPRI, r0
   14d26:	f04f 0003 	mov.w	r0, #3
   14d2a:	df02      	svc	2
   14d2c:	e7e2      	b.n	14cf4 <conn_release.constprop.0+0x34>
   14d2e:	bf00      	nop
   14d30:	2000e6fc 	.word	0x2000e6fc
   14d34:	00029190 	.word	0x00029190
   14d38:	0002926c 	.word	0x0002926c
   14d3c:	00028de0 	.word	0x00028de0
   14d40:	000292ec 	.word	0x000292ec

00014d44 <disable.part.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   14d44:	b530      	push	{r4, r5, lr}
			return err;
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	mark = ull_disable_mark(adv);
   14d46:	4c4a      	ldr	r4, [pc, #296]	; (14e70 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   14d48:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   14d4a:	4620      	mov	r0, r4
   14d4c:	f7ff fc74 	bl	14638 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   14d50:	4284      	cmp	r4, r0
   14d52:	d00c      	beq.n	14d6e <disable.part.0+0x2a>
   14d54:	4a47      	ldr	r2, [pc, #284]	; (14e74 <disable.part.0+0x130>)
   14d56:	4948      	ldr	r1, [pc, #288]	; (14e78 <disable.part.0+0x134>)
   14d58:	4848      	ldr	r0, [pc, #288]	; (14e7c <disable.part.0+0x138>)
   14d5a:	f44f 63f3 	mov.w	r3, #1944	; 0x798
   14d5e:	f00d fabb 	bl	222d8 <printk>
   14d62:	4040      	eors	r0, r0
   14d64:	f380 8811 	msr	BASEPRI, r0
   14d68:	f04f 0003 	mov.w	r0, #3
   14d6c:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.is_hdcd) {
   14d6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   14d72:	07db      	lsls	r3, r3, #31
		ret_cb = TICKER_STATUS_BUSY;
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14d74:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   14d76:	d50d      	bpl.n	14d94 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   14d78:	2102      	movs	r1, #2
   14d7a:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14d7c:	4b40      	ldr	r3, [pc, #256]	; (14e80 <disable.part.0+0x13c>)
   14d7e:	9500      	str	r5, [sp, #0]
   14d80:	2103      	movs	r1, #3
   14d82:	2201      	movs	r2, #1
   14d84:	2000      	movs	r0, #0
   14d86:	f7fd f859 	bl	11e3c <ticker_stop>
				  TICKER_USER_ID_THREAD, TICKER_ID_ADV_STOP,
				  ull_ticker_status_give, (void *)&ret_cb);
		ret = ull_ticker_status_take(ret, &ret_cb);
   14d8a:	4629      	mov	r1, r5
   14d8c:	f7ff fc2c 	bl	145e8 <ull_ticker_status_take>
		if (ret) {
   14d90:	2800      	cmp	r0, #0
   14d92:	d157      	bne.n	14e44 <disable.part.0+0x100>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}
#endif

	ret_cb = TICKER_STATUS_BUSY;
   14d94:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14d96:	2103      	movs	r1, #3
   14d98:	4b39      	ldr	r3, [pc, #228]	; (14e80 <disable.part.0+0x13c>)
   14d9a:	9500      	str	r5, [sp, #0]
   14d9c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   14d9e:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14da0:	f7fd f84c 	bl	11e3c <ticker_stop>
			  TICKER_ID_ADV_BASE + handle,
			  ull_ticker_status_give, (void *)&ret_cb);
	ret = ull_ticker_status_take(ret, &ret_cb);
   14da4:	4629      	mov	r1, r5
   14da6:	f7ff fc1f 	bl	145e8 <ull_ticker_status_take>
	if (ret) {
   14daa:	2800      	cmp	r0, #0
   14dac:	d135      	bne.n	14e1a <disable.part.0+0xd6>
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	ret = ull_disable(&adv->lll);
   14dae:	4835      	ldr	r0, [pc, #212]	; (14e84 <disable.part.0+0x140>)
   14db0:	f7ff fc7a 	bl	146a8 <ull_disable>
	LL_ASSERT(!ret);
   14db4:	b9f0      	cbnz	r0, 14df4 <disable.part.0+0xb0>

	mark = ull_disable_unmark(adv);
   14db6:	482e      	ldr	r0, [pc, #184]	; (14e70 <disable.part.0+0x12c>)
   14db8:	f7ff fc48 	bl	1464c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14dbc:	4284      	cmp	r4, r0
   14dbe:	d00c      	beq.n	14dda <disable.part.0+0x96>
   14dc0:	4a2c      	ldr	r2, [pc, #176]	; (14e74 <disable.part.0+0x130>)
   14dc2:	492d      	ldr	r1, [pc, #180]	; (14e78 <disable.part.0+0x134>)
   14dc4:	482d      	ldr	r0, [pc, #180]	; (14e7c <disable.part.0+0x138>)
   14dc6:	f240 73ba 	movw	r3, #1978	; 0x7ba
   14dca:	f00d fa85 	bl	222d8 <printk>
   14dce:	4040      	eors	r0, r0
   14dd0:	f380 8811 	msr	BASEPRI, r0
   14dd4:	f04f 0003 	mov.w	r0, #3
   14dd8:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
   14dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ddc:	b10b      	cbz	r3, 14de2 <disable.part.0+0x9e>
		conn_release(adv);
   14dde:	f7ff ff6f 	bl	14cc0 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
   14de2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
   14de6:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   14de8:	f36f 0300 	bfc	r3, #0, #1
   14dec:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
   14df0:	b005      	add	sp, #20
   14df2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14df4:	4a1f      	ldr	r2, [pc, #124]	; (14e74 <disable.part.0+0x130>)
   14df6:	4924      	ldr	r1, [pc, #144]	; (14e88 <disable.part.0+0x144>)
   14df8:	4820      	ldr	r0, [pc, #128]	; (14e7c <disable.part.0+0x138>)
   14dfa:	f240 73b7 	movw	r3, #1975	; 0x7b7
   14dfe:	f00d fa6b 	bl	222d8 <printk>
   14e02:	4040      	eors	r0, r0
   14e04:	f380 8811 	msr	BASEPRI, r0
   14e08:	f04f 0003 	mov.w	r0, #3
   14e0c:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   14e0e:	4818      	ldr	r0, [pc, #96]	; (14e70 <disable.part.0+0x12c>)
   14e10:	f7ff fc1c 	bl	1464c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14e14:	4284      	cmp	r4, r0
   14e16:	d1d3      	bne.n	14dc0 <disable.part.0+0x7c>
   14e18:	e7df      	b.n	14dda <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
   14e1a:	4815      	ldr	r0, [pc, #84]	; (14e70 <disable.part.0+0x12c>)
   14e1c:	f7ff fc16 	bl	1464c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   14e20:	4284      	cmp	r4, r0
   14e22:	d021      	beq.n	14e68 <disable.part.0+0x124>
   14e24:	4a13      	ldr	r2, [pc, #76]	; (14e74 <disable.part.0+0x130>)
   14e26:	4914      	ldr	r1, [pc, #80]	; (14e78 <disable.part.0+0x134>)
   14e28:	4814      	ldr	r0, [pc, #80]	; (14e7c <disable.part.0+0x138>)
   14e2a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   14e2e:	f00d fa53 	bl	222d8 <printk>
   14e32:	4040      	eors	r0, r0
   14e34:	f380 8811 	msr	BASEPRI, r0
   14e38:	f04f 0003 	mov.w	r0, #3
   14e3c:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   14e3e:	200c      	movs	r0, #12
}
   14e40:	b005      	add	sp, #20
   14e42:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
   14e44:	480a      	ldr	r0, [pc, #40]	; (14e70 <disable.part.0+0x12c>)
   14e46:	f7ff fc01 	bl	1464c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   14e4a:	4284      	cmp	r4, r0
   14e4c:	d00c      	beq.n	14e68 <disable.part.0+0x124>
   14e4e:	4a09      	ldr	r2, [pc, #36]	; (14e74 <disable.part.0+0x130>)
   14e50:	4909      	ldr	r1, [pc, #36]	; (14e78 <disable.part.0+0x134>)
   14e52:	480a      	ldr	r0, [pc, #40]	; (14e7c <disable.part.0+0x138>)
   14e54:	f240 73a3 	movw	r3, #1955	; 0x7a3
   14e58:	f00d fa3e 	bl	222d8 <printk>
   14e5c:	4040      	eors	r0, r0
   14e5e:	f380 8811 	msr	BASEPRI, r0
   14e62:	f04f 0003 	mov.w	r0, #3
   14e66:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   14e68:	200c      	movs	r0, #12
}
   14e6a:	b005      	add	sp, #20
   14e6c:	bd30      	pop	{r4, r5, pc}
   14e6e:	bf00      	nop
   14e70:	2000e6fc 	.word	0x2000e6fc
   14e74:	00029190 	.word	0x00029190
   14e78:	00029280 	.word	0x00029280
   14e7c:	00028de0 	.word	0x00028de0
   14e80:	00013739 	.word	0x00013739
   14e84:	2000e718 	.word	0x2000e718
   14e88:	0002907c 	.word	0x0002907c

00014e8c <ll_adv_params_set>:
{
   14e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   14e90:	4c4d      	ldr	r4, [pc, #308]	; (14fc8 <ll_adv_params_set+0x13c>)
{
   14e92:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14e94:	4b4d      	ldr	r3, [pc, #308]	; (14fcc <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   14e96:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
{
   14e9a:	4680      	mov	r8, r0
   14e9c:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14e9e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   14ea2:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   14ea4:	f016 0601 	ands.w	r6, r6, #1
{
   14ea8:	4615      	mov	r5, r2
   14eaa:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   14eae:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14eb2:	9000      	str	r0, [sp, #0]
   14eb4:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   14eb8:	d170      	bne.n	14f9c <ll_adv_params_set+0x110>
	adv->lll.chan_map = chan_map;
   14eba:	f00c 0c07 	and.w	ip, ip, #7
   14ebe:	f002 0203 	and.w	r2, r2, #3
   14ec2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   14ec6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14eca:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
		adv->interval = 0;
   14ece:	f1be 0f01 	cmp.w	lr, #1
   14ed2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   14ed6:	bf08      	it	eq
   14ed8:	f04f 0800 	moveq.w	r8, #0
   14edc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
   14ee0:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	adv->lll.chan_map = chan_map;
   14ee4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	pdu->type = pdu_adv_type[adv_type];
   14ee6:	ab02      	add	r3, sp, #8
   14ee8:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
   14eea:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   14eee:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   14ef2:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   14ef6:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
   14efa:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
   14efe:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14f02:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   14f06:	f022 021f 	bic.w	r2, r2, #31
   14f0a:	f003 030f 	and.w	r3, r3, #15
   14f0e:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   14f12:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14f16:	bf0c      	ite	eq
   14f18:	2101      	moveq	r1, #1
   14f1a:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   14f1c:	f365 0242 	bfi	r2, r5, #1, #2
   14f20:	f361 1345 	bfi	r3, r1, #5, #1
   14f24:	f888 3000 	strb.w	r3, [r8]
   14f28:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   14f2c:	b2d3      	uxtb	r3, r2
   14f2e:	0752      	lsls	r2, r2, #29
   14f30:	d509      	bpl.n	14f46 <ll_adv_params_set+0xba>
		adv->id_addr_type = direct_addr_type;
   14f32:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14f36:	9908      	ldr	r1, [sp, #32]
		adv->id_addr_type = direct_addr_type;
   14f38:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14f3c:	2206      	movs	r2, #6
   14f3e:	f104 004f 	add.w	r0, r4, #79	; 0x4f
   14f42:	f00f fe85 	bl	24c50 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14f46:	f898 3000 	ldrb.w	r3, [r8]
   14f4a:	f003 020f 	and.w	r2, r3, #15
   14f4e:	2a01      	cmp	r2, #1
   14f50:	d029      	beq.n	14fa6 <ll_adv_params_set+0x11a>
	} else if (pdu->len == 0) {
   14f52:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   14f56:	f005 0501 	and.w	r5, r5, #1
   14f5a:	f365 1386 	bfi	r3, r5, #6, #1
	} else if (pdu->len == 0) {
   14f5e:	b1aa      	cbz	r2, 14f8c <ll_adv_params_set+0x100>
		pdu->rx_addr = 0;
   14f60:	f36f 13c7 	bfc	r3, #7, #1
   14f64:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14f68:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14f6c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14f70:	01ad      	lsls	r5, r5, #6
   14f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		if (pdu->len == 0) {
   14f74:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14f76:	f045 0504 	orr.w	r5, r5, #4
   14f7a:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   14f7c:	b912      	cbnz	r2, 14f84 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   14f7e:	2106      	movs	r1, #6
   14f80:	7059      	strb	r1, [r3, #1]
	return 0;
   14f82:	4616      	mov	r6, r2
}
   14f84:	4630      	mov	r0, r6
   14f86:	b002      	add	sp, #8
   14f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   14f8c:	f362 13c7 	bfi	r3, r2, #7, #1
   14f90:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   14f94:	2306      	movs	r3, #6
   14f96:	f888 3001 	strb.w	r3, [r8, #1]
   14f9a:	e7e5      	b.n	14f68 <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14f9c:	260c      	movs	r6, #12
}
   14f9e:	4630      	mov	r0, r6
   14fa0:	b002      	add	sp, #8
   14fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   14fa6:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   14faa:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   14fac:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   14fb0:	f367 13c7 	bfi	r3, r7, #7, #1
   14fb4:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   14fb8:	9908      	ldr	r1, [sp, #32]
   14fba:	2206      	movs	r2, #6
   14fbc:	f00f fe48 	bl	24c50 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   14fc0:	230c      	movs	r3, #12
   14fc2:	f888 3001 	strb.w	r3, [r8, #1]
   14fc6:	e7cf      	b.n	14f68 <ll_adv_params_set+0xdc>
   14fc8:	2000e6fc 	.word	0x2000e6fc
   14fcc:	000283c8 	.word	0x000283c8

00014fd0 <ll_adv_data_set>:
{
   14fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14fd2:	4e21      	ldr	r6, [pc, #132]	; (15058 <ll_adv_data_set+0x88>)
   14fd4:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   14fd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14fdc:	b083      	sub	sp, #12
   14fde:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   14fe0:	782b      	ldrb	r3, [r5, #0]
   14fe2:	f003 030f 	and.w	r3, r3, #15
   14fe6:	2b01      	cmp	r3, #1
   14fe8:	d032      	beq.n	15050 <ll_adv_data_set+0x80>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   14fea:	281f      	cmp	r0, #31
   14fec:	4604      	mov	r4, r0
   14fee:	d82c      	bhi.n	1504a <ll_adv_data_set+0x7a>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14ff0:	460f      	mov	r7, r1
   14ff2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   14ff6:	f10d 0107 	add.w	r1, sp, #7
   14ffa:	f006 fb75 	bl	1b6e8 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   14ffe:	4629      	mov	r1, r5
   15000:	4605      	mov	r5, r0
   15002:	f811 2b02 	ldrb.w	r2, [r1], #2
   15006:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   1500a:	f3c2 0303 	ubfx	r3, r2, #0, #4
   1500e:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   15012:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   15016:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1501a:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1501e:	4628      	mov	r0, r5
   15020:	4313      	orrs	r3, r2
   15022:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   15026:	2206      	movs	r2, #6
   15028:	f00f fe12 	bl	24c50 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1502c:	4622      	mov	r2, r4
   1502e:	4639      	mov	r1, r7
   15030:	f105 0008 	add.w	r0, r5, #8
   15034:	f00f fe0c 	bl	24c50 <memcpy>
	pdu->last = idx;
   15038:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   1503c:	3406      	adds	r4, #6
	return 0;
   1503e:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   15040:	706c      	strb	r4, [r5, #1]
   15042:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
}
   15046:	b003      	add	sp, #12
   15048:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1504a:	2012      	movs	r0, #18
}
   1504c:	b003      	add	sp, #12
   1504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   15050:	2000      	movs	r0, #0
}
   15052:	b003      	add	sp, #12
   15054:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15056:	bf00      	nop
   15058:	2000e6fc 	.word	0x2000e6fc

0001505c <ull_adv_init>:
{
   1505c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1505e:	4c05      	ldr	r4, [pc, #20]	; (15074 <ull_adv_init+0x18>)
   15060:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15064:	f006 fb2a 	bl	1b6bc <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   15068:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1506c:	f006 fb26 	bl	1b6bc <lll_adv_data_init>
}
   15070:	2000      	movs	r0, #0
   15072:	bd10      	pop	{r4, pc}
   15074:	2000e6fc 	.word	0x2000e6fc

00015078 <ull_adv_reset>:
{
   15078:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   1507a:	4b04      	ldr	r3, [pc, #16]	; (1508c <ull_adv_reset+0x14>)
   1507c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   15080:	07db      	lsls	r3, r3, #31
   15082:	d501      	bpl.n	15088 <ull_adv_reset+0x10>
   15084:	f7ff fe5e 	bl	14d44 <disable.part.0>
}
   15088:	2000      	movs	r0, #0
   1508a:	bd08      	pop	{r3, pc}
   1508c:	2000e6fc 	.word	0x2000e6fc

00015090 <ull_adv_reset_finalize>:
{
   15090:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   15092:	4c09      	ldr	r4, [pc, #36]	; (150b8 <ull_adv_reset_finalize+0x28>)
   15094:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   15098:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   1509a:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   1509c:	f006 fb1e 	bl	1b6dc <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   150a0:	4620      	mov	r0, r4
   150a2:	f006 fb1b 	bl	1b6dc <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   150a6:	4628      	mov	r0, r5
   150a8:	f006 fb08 	bl	1b6bc <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   150ac:	4620      	mov	r0, r4
   150ae:	f006 fb05 	bl	1b6bc <lll_adv_data_init>
}
   150b2:	2000      	movs	r0, #0
   150b4:	bd38      	pop	{r3, r4, r5, pc}
   150b6:	bf00      	nop
   150b8:	2000e6fc 	.word	0x2000e6fc

000150bc <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   150bc:	4a03      	ldr	r2, [pc, #12]	; (150cc <ull_adv_handle_get+0x10>)
   150be:	4b04      	ldr	r3, [pc, #16]	; (150d0 <ull_adv_handle_get+0x14>)
   150c0:	1a80      	subs	r0, r0, r2
   150c2:	fba3 3000 	umull	r3, r0, r3, r0
}
   150c6:	f3c0 108f 	ubfx	r0, r0, #6, #16
   150ca:	4770      	bx	lr
   150cc:	2000e6fc 	.word	0x2000e6fc
   150d0:	ba2e8ba3 	.word	0xba2e8ba3

000150d4 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   150d4:	4a04      	ldr	r2, [pc, #16]	; (150e8 <ull_adv_lll_handle_get+0x14>)
   150d6:	6800      	ldr	r0, [r0, #0]
   150d8:	4b04      	ldr	r3, [pc, #16]	; (150ec <ull_adv_lll_handle_get+0x18>)
   150da:	1a80      	subs	r0, r0, r2
   150dc:	fba3 3000 	umull	r3, r0, r3, r0
}
   150e0:	f3c0 108f 	ubfx	r0, r0, #6, #16
   150e4:	4770      	bx	lr
   150e6:	bf00      	nop
   150e8:	2000e6fc 	.word	0x2000e6fc
   150ec:	ba2e8ba3 	.word	0xba2e8ba3

000150f0 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   150f0:	b938      	cbnz	r0, 15102 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   150f2:	4805      	ldr	r0, [pc, #20]	; (15108 <ull_adv_is_enabled_get+0x18>)
   150f4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   150f8:	f013 0f01 	tst.w	r3, #1
   150fc:	bf08      	it	eq
   150fe:	2000      	moveq	r0, #0
   15100:	4770      	bx	lr
		return NULL;
   15102:	2000      	movs	r0, #0
}
   15104:	4770      	bx	lr
   15106:	bf00      	nop
   15108:	2000e6fc 	.word	0x2000e6fc

0001510c <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   1510c:	b928      	cbnz	r0, 1511a <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1510e:	4b04      	ldr	r3, [pc, #16]	; (15120 <ull_adv_is_enabled+0x14>)
   15110:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   15114:	f000 0001 	and.w	r0, r0, #1
   15118:	4770      	bx	lr
   1511a:	2000      	movs	r0, #0
}
   1511c:	4770      	bx	lr
   1511e:	bf00      	nop
   15120:	2000e6fc 	.word	0x2000e6fc

00015124 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   15124:	b950      	cbnz	r0, 1513c <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   15126:	4b06      	ldr	r3, [pc, #24]	; (15140 <ull_adv_filter_pol_get+0x1c>)
   15128:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   1512c:	f010 0001 	ands.w	r0, r0, #1
   15130:	d005      	beq.n	1513e <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   15132:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   15136:	f000 0003 	and.w	r0, r0, #3
   1513a:	4770      	bx	lr
		return 0;
   1513c:	2000      	movs	r0, #0
}
   1513e:	4770      	bx	lr
   15140:	2000e6fc 	.word	0x2000e6fc

00015144 <ull_scan_rsp_set>:
{
   15144:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15146:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1514a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1514e:	b083      	sub	sp, #12
   15150:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   15152:	460e      	mov	r6, r1
   15154:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   15156:	f10d 0107 	add.w	r1, sp, #7
   1515a:	3038      	adds	r0, #56	; 0x38
   1515c:	4617      	mov	r7, r2
   1515e:	f006 fac3 	bl	1b6e8 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   15162:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   15164:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   15166:	f811 3b02 	ldrb.w	r3, [r1], #2
   1516a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1516e:	019b      	lsls	r3, r3, #6
   15170:	f043 0304 	orr.w	r3, r3, #4
   15174:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   15176:	1db3      	adds	r3, r6, #6
   15178:	7043      	strb	r3, [r0, #1]
   1517a:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1517c:	3002      	adds	r0, #2
   1517e:	f00f fd67 	bl	24c50 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   15182:	4632      	mov	r2, r6
   15184:	4639      	mov	r1, r7
   15186:	f105 0008 	add.w	r0, r5, #8
   1518a:	f00f fd61 	bl	24c50 <memcpy>
	pdu->last = idx;
   1518e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15192:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   15196:	2000      	movs	r0, #0
   15198:	b003      	add	sp, #12
   1519a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001519c <ll_adv_scan_rsp_set>:
{
   1519c:	4603      	mov	r3, r0
   1519e:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   151a0:	4801      	ldr	r0, [pc, #4]	; (151a8 <ll_adv_scan_rsp_set+0xc>)
   151a2:	4619      	mov	r1, r3
   151a4:	f7ff bfce 	b.w	15144 <ull_scan_rsp_set>
   151a8:	2000e6fc 	.word	0x2000e6fc

000151ac <ull_adv_pdu_update_addrs>:
{
   151ac:	b570      	push	{r4, r5, r6, lr}
   151ae:	460c      	mov	r4, r1
   151b0:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
   151b2:	f005 fa2f 	bl	1a614 <ull_filter_adva_get>
#else
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
   151b6:	4601      	mov	r1, r0
   151b8:	b300      	cbz	r0, 151fc <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   151ba:	7823      	ldrb	r3, [r4, #0]
   151bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   151c0:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   151c2:	1ca6      	adds	r6, r4, #2
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   151c4:	2206      	movs	r2, #6
   151c6:	4630      	mov	r0, r6
   151c8:	f00f fd42 	bl	24c50 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   151cc:	7823      	ldrb	r3, [r4, #0]
   151ce:	f003 030f 	and.w	r3, r3, #15
   151d2:	2b01      	cmp	r3, #1
   151d4:	d001      	beq.n	151da <ull_adv_pdu_update_addrs+0x2e>
}
   151d6:	4630      	mov	r0, r6
   151d8:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
   151da:	4628      	mov	r0, r5
   151dc:	f005 fa48 	bl	1a670 <ull_filter_tgta_get>
	if (rx_addr) {
   151e0:	4601      	mov	r1, r0
   151e2:	2800      	cmp	r0, #0
   151e4:	d0f7      	beq.n	151d6 <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   151e6:	7823      	ldrb	r3, [r4, #0]
   151e8:	4620      	mov	r0, r4
   151ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   151ee:	f800 3b08 	strb.w	r3, [r0], #8

		/* TargetA always follows AdvA in all PDUs */
		tgt_addr = adv_pdu_adva_get(pdu) + BDADDR_SIZE;
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   151f2:	2206      	movs	r2, #6
   151f4:	f00f fd2c 	bl	24c50 <memcpy>
}
   151f8:	4630      	mov	r0, r6
   151fa:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   151fc:	7820      	ldrb	r0, [r4, #0]
   151fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15202:	f7fc fe63 	bl	11ecc <ll_addr_get>
   15206:	4601      	mov	r1, r0
   15208:	e7db      	b.n	151c2 <ull_adv_pdu_update_addrs+0x16>
   1520a:	bf00      	nop

0001520c <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1520c:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
{
   15210:	4603      	mov	r3, r0
   15212:	b410      	push	{r4}
   15214:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15216:	b172      	cbz	r2, 15236 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   15218:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   1521c:	428a      	cmp	r2, r1
   1521e:	d02b      	beq.n	15278 <tx_ull_dequeue+0x6c>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15220:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   15224:	4291      	cmp	r1, r2
   15226:	d01a      	beq.n	1525e <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
   15228:	6809      	ldr	r1, [r1, #0]
   1522a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		tx->next = NULL;
   1522e:	2200      	movs	r2, #0
}
   15230:	bc10      	pop	{r4}
		tx->next = NULL;
   15232:	6002      	str	r2, [r0, #0]
}
   15234:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15236:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   1523a:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
   1523e:	428a      	cmp	r2, r1
   15240:	d025      	beq.n	1528e <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15242:	7911      	ldrb	r1, [r2, #4]
   15244:	f001 0103 	and.w	r1, r1, #3
   15248:	2903      	cmp	r1, #3
   1524a:	d00e      	beq.n	1526a <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   1524c:	6812      	ldr	r2, [r2, #0]
   1524e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			conn->tx_ctrl = NULL;
   15252:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   15254:	e9c3 2270 	strd	r2, r2, [r3, #448]	; 0x1c0
}
   15258:	bc10      	pop	{r4}
		tx->next = tx;
   1525a:	6000      	str	r0, [r0, #0]
}
   1525c:	4770      	bx	lr
   1525e:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   15260:	6809      	ldr	r1, [r1, #0]
   15262:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
   15266:	4611      	mov	r1, r2
   15268:	e7de      	b.n	15228 <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
   1526a:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1526c:	2903      	cmp	r1, #3
   1526e:	d001      	beq.n	15274 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15270:	290a      	cmp	r1, #10
   15272:	d1eb      	bne.n	1524c <tx_ull_dequeue+0x40>
   15274:	4611      	mov	r1, r2
   15276:	e7d7      	b.n	15228 <tx_ull_dequeue+0x1c>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15278:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
		conn->tx_head = conn->tx_head->next;
   1527c:	6809      	ldr	r1, [r1, #0]
   1527e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15282:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
   15284:	bf18      	it	ne
   15286:	f8c3 11c0 	strne.w	r1, [r3, #448]	; 0x1c0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1528a:	d1e5      	bne.n	15258 <tx_ull_dequeue+0x4c>
   1528c:	e7e1      	b.n	15252 <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
   1528e:	2a00      	cmp	r2, #0
   15290:	d1e6      	bne.n	15260 <tx_ull_dequeue+0x54>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15292:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
	if (conn->tx_head == conn->tx_ctrl) {
   15296:	4611      	mov	r1, r2
   15298:	e7f0      	b.n	1527c <tx_ull_dequeue+0x70>
   1529a:	bf00      	nop

0001529c <init_reset>:
{
   1529c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1529e:	4b15      	ldr	r3, [pc, #84]	; (152f4 <init_reset+0x58>)
   152a0:	4815      	ldr	r0, [pc, #84]	; (152f8 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   152a2:	4c16      	ldr	r4, [pc, #88]	; (152fc <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   152a4:	2202      	movs	r2, #2
   152a6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   152aa:	f7fb fac5 	bl	10838 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   152ae:	4b14      	ldr	r3, [pc, #80]	; (15300 <init_reset+0x64>)
   152b0:	2203      	movs	r2, #3
   152b2:	1d18      	adds	r0, r3, #4
   152b4:	2124      	movs	r1, #36	; 0x24
   152b6:	f7fb fabf 	bl	10838 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   152ba:	4b12      	ldr	r3, [pc, #72]	; (15304 <init_reset+0x68>)
   152bc:	2208      	movs	r2, #8
   152be:	1d18      	adds	r0, r3, #4
   152c0:	2120      	movs	r1, #32
   152c2:	f7fb fab9 	bl	10838 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   152c6:	4b10      	ldr	r3, [pc, #64]	; (15308 <init_reset+0x6c>)
   152c8:	220b      	movs	r2, #11
   152ca:	1d18      	adds	r0, r3, #4
   152cc:	2108      	movs	r1, #8
   152ce:	f7fb fab3 	bl	10838 <mem_init>
	default_phy_tx |= PHY_2M;
   152d2:	490e      	ldr	r1, [pc, #56]	; (1530c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   152d4:	4a0e      	ldr	r2, [pc, #56]	; (15310 <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   152d6:	480f      	ldr	r0, [pc, #60]	; (15314 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   152d8:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   152da:	f04f 0c1b 	mov.w	ip, #27
   152de:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   152e2:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   152e4:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   152e8:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   152ea:	f8a0 c000 	strh.w	ip, [r0]
}
   152ee:	2000      	movs	r0, #0
   152f0:	bd10      	pop	{r4, pc}
   152f2:	bf00      	nop
   152f4:	2000e770 	.word	0x2000e770
   152f8:	2000e774 	.word	0x2000e774
   152fc:	2000f58a 	.word	0x2000f58a
   15300:	2000eb30 	.word	0x2000eb30
   15304:	2000eba0 	.word	0x2000eba0
   15308:	2000eca4 	.word	0x2000eca4
   1530c:	2000fb2b 	.word	0x2000fb2b
   15310:	2000fb2a 	.word	0x2000fb2a
   15314:	2000f58c 	.word	0x2000f58c

00015318 <tx_lll_flush>:
{
   15318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1531c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15320:	4934      	ldr	r1, [pc, #208]	; (153f4 <tx_lll_flush+0xdc>)
{
   15322:	b083      	sub	sp, #12
   15324:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15326:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   1532a:	4640      	mov	r0, r8
   1532c:	f7fb faea 	bl	10904 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15330:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   15334:	4629      	mov	r1, r5
   15336:	f006 fe41 	bl	1bfbc <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1533a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   1533c:	aa01      	add	r2, sp, #4
   1533e:	4631      	mov	r1, r6
   15340:	f7fb fb20 	bl	10984 <memq_dequeue>
	while (link) {
   15344:	b328      	cbz	r0, 15392 <tx_lll_flush+0x7a>
   15346:	4c2c      	ldr	r4, [pc, #176]	; (153f8 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   15348:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1534c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   15350:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   15352:	f894 c001 	ldrb.w	ip, [r4, #1]
   15356:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   15358:	1c4b      	adds	r3, r1, #1
   1535a:	b2db      	uxtb	r3, r3
		last = 0U;
   1535c:	459c      	cmp	ip, r3
   1535e:	bf08      	it	eq
   15360:	2300      	moveq	r3, #0
	if (last == first) {
   15362:	429a      	cmp	r2, r3
   15364:	d035      	beq.n	153d2 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15366:	7822      	ldrb	r2, [r4, #0]
   15368:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   1536c:	eb19 0c02 	adds.w	ip, r9, r2
   15370:	d02f      	beq.n	153d2 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   15372:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   15374:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   15378:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   1537a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1537e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   15380:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15382:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   15384:	70e3      	strb	r3, [r4, #3]
   15386:	aa01      	add	r2, sp, #4
   15388:	4631      	mov	r1, r6
   1538a:	f7fb fafb 	bl	10984 <memq_dequeue>
	while (link) {
   1538e:	2800      	cmp	r0, #0
   15390:	d1de      	bne.n	15350 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   15392:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
	rx = (void *)&conn->llcp_terminate.node_rx;
   15396:	f508 749e 	add.w	r4, r8, #316	; 0x13c
	LL_ASSERT(rx->hdr.link);
   1539a:	b150      	cbz	r0, 153b2 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1539c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1539e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   153a0:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
	ull_rx_put(link, rx);
   153a4:	f7ff fa32 	bl	1480c <ull_rx_put>
	ull_rx_sched();
   153a8:	f7ff fa40 	bl	1482c <ull_rx_sched>
}
   153ac:	b003      	add	sp, #12
   153ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   153b2:	4a12      	ldr	r2, [pc, #72]	; (153fc <tx_lll_flush+0xe4>)
   153b4:	4912      	ldr	r1, [pc, #72]	; (15400 <tx_lll_flush+0xe8>)
   153b6:	4813      	ldr	r0, [pc, #76]	; (15404 <tx_lll_flush+0xec>)
   153b8:	f240 7394 	movw	r3, #1940	; 0x794
   153bc:	f00c ff8c 	bl	222d8 <printk>
   153c0:	4040      	eors	r0, r0
   153c2:	f380 8811 	msr	BASEPRI, r0
   153c6:	f04f 0003 	mov.w	r0, #3
   153ca:	df02      	svc	2
	link = rx->hdr.link;
   153cc:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
   153d0:	e7e4      	b.n	1539c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   153d2:	4a0a      	ldr	r2, [pc, #40]	; (153fc <tx_lll_flush+0xe4>)
   153d4:	490c      	ldr	r1, [pc, #48]	; (15408 <tx_lll_flush+0xf0>)
   153d6:	480b      	ldr	r0, [pc, #44]	; (15404 <tx_lll_flush+0xec>)
   153d8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   153dc:	f00c ff7c 	bl	222d8 <printk>
   153e0:	4040      	eors	r0, r0
   153e2:	f380 8811 	msr	BASEPRI, r0
   153e6:	f04f 0003 	mov.w	r0, #3
   153ea:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   153ec:	2300      	movs	r3, #0
   153ee:	801b      	strh	r3, [r3, #0]
   153f0:	deff      	udf	#255	; 0xff
   153f2:	bf00      	nop
   153f4:	2000e774 	.word	0x2000e774
   153f8:	20000614 	.word	0x20000614
   153fc:	0002929c 	.word	0x0002929c
   15400:	000292e4 	.word	0x000292e4
   15404:	00028de0 	.word	0x00028de0
   15408:	000292dc 	.word	0x000292dc

0001540c <ticker_op_stop_cb>:
{
   1540c:	b510      	push	{r4, lr}
   1540e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15410:	b9b0      	cbnz	r0, 15440 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   15412:	4b12      	ldr	r3, [pc, #72]	; (1545c <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   15414:	2200      	movs	r2, #0
   15416:	4611      	mov	r1, r2
   15418:	2002      	movs	r0, #2
	mfy.param = param;
   1541a:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1541c:	f7fb fb14 	bl	10a48 <mayfly_enqueue>
	LL_ASSERT(!retval);
   15420:	b900      	cbnz	r0, 15424 <ticker_op_stop_cb+0x18>
}
   15422:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   15424:	4a0e      	ldr	r2, [pc, #56]	; (15460 <ticker_op_stop_cb+0x54>)
   15426:	490f      	ldr	r1, [pc, #60]	; (15464 <ticker_op_stop_cb+0x58>)
   15428:	480f      	ldr	r0, [pc, #60]	; (15468 <ticker_op_stop_cb+0x5c>)
   1542a:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
   1542e:	f00c ff53 	bl	222d8 <printk>
   15432:	4040      	eors	r0, r0
   15434:	f380 8811 	msr	BASEPRI, r0
   15438:	f04f 0003 	mov.w	r0, #3
   1543c:	df02      	svc	2
}
   1543e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15440:	4a07      	ldr	r2, [pc, #28]	; (15460 <ticker_op_stop_cb+0x54>)
   15442:	490a      	ldr	r1, [pc, #40]	; (1546c <ticker_op_stop_cb+0x60>)
   15444:	4808      	ldr	r0, [pc, #32]	; (15468 <ticker_op_stop_cb+0x5c>)
   15446:	f240 63e1 	movw	r3, #1761	; 0x6e1
   1544a:	f00c ff45 	bl	222d8 <printk>
   1544e:	4040      	eors	r0, r0
   15450:	f380 8811 	msr	BASEPRI, r0
   15454:	f04f 0003 	mov.w	r0, #3
   15458:	df02      	svc	2
   1545a:	e7da      	b.n	15412 <ticker_op_stop_cb+0x6>
   1545c:	2000069c 	.word	0x2000069c
   15460:	0002929c 	.word	0x0002929c
   15464:	0002909c 	.word	0x0002909c
   15468:	00028de0 	.word	0x00028de0
   1546c:	000292f4 	.word	0x000292f4

00015470 <ticker_start_conn_op_cb>:
{
   15470:	b510      	push	{r4, lr}
   15472:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15474:	b990      	cbnz	r0, 1549c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   15476:	4620      	mov	r0, r4
   15478:	f7ff f904 	bl	14684 <ull_update_unmark>
	LL_ASSERT(p == param);
   1547c:	4284      	cmp	r4, r0
   1547e:	d00c      	beq.n	1549a <ticker_start_conn_op_cb+0x2a>
   15480:	4a0d      	ldr	r2, [pc, #52]	; (154b8 <ticker_start_conn_op_cb+0x48>)
   15482:	490e      	ldr	r1, [pc, #56]	; (154bc <ticker_start_conn_op_cb+0x4c>)
   15484:	480e      	ldr	r0, [pc, #56]	; (154c0 <ticker_start_conn_op_cb+0x50>)
   15486:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   1548a:	f00c ff25 	bl	222d8 <printk>
   1548e:	4040      	eors	r0, r0
   15490:	f380 8811 	msr	BASEPRI, r0
   15494:	f04f 0003 	mov.w	r0, #3
   15498:	df02      	svc	2
}
   1549a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1549c:	4a06      	ldr	r2, [pc, #24]	; (154b8 <ticker_start_conn_op_cb+0x48>)
   1549e:	4909      	ldr	r1, [pc, #36]	; (154c4 <ticker_start_conn_op_cb+0x54>)
   154a0:	4807      	ldr	r0, [pc, #28]	; (154c0 <ticker_start_conn_op_cb+0x50>)
   154a2:	f240 63d5 	movw	r3, #1749	; 0x6d5
   154a6:	f00c ff17 	bl	222d8 <printk>
   154aa:	4040      	eors	r0, r0
   154ac:	f380 8811 	msr	BASEPRI, r0
   154b0:	f04f 0003 	mov.w	r0, #3
   154b4:	df02      	svc	2
   154b6:	e7de      	b.n	15476 <ticker_start_conn_op_cb+0x6>
   154b8:	0002929c 	.word	0x0002929c
   154bc:	00029300 	.word	0x00029300
   154c0:	00028de0 	.word	0x00028de0
   154c4:	000292f4 	.word	0x000292f4

000154c8 <ticker_stop_conn_op_cb>:
{
   154c8:	b510      	push	{r4, lr}
   154ca:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   154cc:	b990      	cbnz	r0, 154f4 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   154ce:	4620      	mov	r0, r4
   154d0:	f7ff f8ce 	bl	14670 <ull_update_mark>
	LL_ASSERT(p == param);
   154d4:	4284      	cmp	r4, r0
   154d6:	d00c      	beq.n	154f2 <ticker_stop_conn_op_cb+0x2a>
   154d8:	4a0d      	ldr	r2, [pc, #52]	; (15510 <ticker_stop_conn_op_cb+0x48>)
   154da:	490e      	ldr	r1, [pc, #56]	; (15514 <ticker_stop_conn_op_cb+0x4c>)
   154dc:	480e      	ldr	r0, [pc, #56]	; (15518 <ticker_stop_conn_op_cb+0x50>)
   154de:	f240 63ce 	movw	r3, #1742	; 0x6ce
   154e2:	f00c fef9 	bl	222d8 <printk>
   154e6:	4040      	eors	r0, r0
   154e8:	f380 8811 	msr	BASEPRI, r0
   154ec:	f04f 0003 	mov.w	r0, #3
   154f0:	df02      	svc	2
}
   154f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   154f4:	4a06      	ldr	r2, [pc, #24]	; (15510 <ticker_stop_conn_op_cb+0x48>)
   154f6:	4909      	ldr	r1, [pc, #36]	; (1551c <ticker_stop_conn_op_cb+0x54>)
   154f8:	4807      	ldr	r0, [pc, #28]	; (15518 <ticker_stop_conn_op_cb+0x50>)
   154fa:	f240 63cb 	movw	r3, #1739	; 0x6cb
   154fe:	f00c feeb 	bl	222d8 <printk>
   15502:	4040      	eors	r0, r0
   15504:	f380 8811 	msr	BASEPRI, r0
   15508:	f04f 0003 	mov.w	r0, #3
   1550c:	df02      	svc	2
   1550e:	e7de      	b.n	154ce <ticker_stop_conn_op_cb+0x6>
   15510:	0002929c 	.word	0x0002929c
   15514:	00029300 	.word	0x00029300
   15518:	00028de0 	.word	0x00028de0
   1551c:	000292f4 	.word	0x000292f4

00015520 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15520:	b900      	cbnz	r0, 15524 <ticker_update_conn_op_cb+0x4>
   15522:	4770      	bx	lr
{
   15524:	b510      	push	{r4, lr}
   15526:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15528:	f7ff f8b8 	bl	1469c <ull_update_mark_get>
   1552c:	4284      	cmp	r4, r0
   1552e:	d010      	beq.n	15552 <ticker_update_conn_op_cb+0x32>
   15530:	f7ff f898 	bl	14664 <ull_disable_mark_get>
   15534:	4284      	cmp	r4, r0
   15536:	d00c      	beq.n	15552 <ticker_update_conn_op_cb+0x32>
   15538:	4a06      	ldr	r2, [pc, #24]	; (15554 <ticker_update_conn_op_cb+0x34>)
   1553a:	4907      	ldr	r1, [pc, #28]	; (15558 <ticker_update_conn_op_cb+0x38>)
   1553c:	4807      	ldr	r0, [pc, #28]	; (1555c <ticker_update_conn_op_cb+0x3c>)
   1553e:	f240 63c2 	movw	r3, #1730	; 0x6c2
   15542:	f00c fec9 	bl	222d8 <printk>
   15546:	4040      	eors	r0, r0
   15548:	f380 8811 	msr	BASEPRI, r0
   1554c:	f04f 0003 	mov.w	r0, #3
   15550:	df02      	svc	2
}
   15552:	bd10      	pop	{r4, pc}
   15554:	0002929c 	.word	0x0002929c
   15558:	0002930c 	.word	0x0002930c
   1555c:	00028de0 	.word	0x00028de0

00015560 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   15560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15562:	4607      	mov	r7, r0
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15564:	4825      	ldr	r0, [pc, #148]	; (155fc <reject_ext_ind_send+0x9c>)
{
   15566:	460c      	mov	r4, r1
   15568:	4616      	mov	r6, r2
   1556a:	461d      	mov	r5, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1556c:	f7fb f994 	bl	10898 <mem_acquire>
	if (!tx) {
   15570:	2800      	cmp	r0, #0
   15572:	d040      	beq.n	155f6 <reject_ext_ind_send+0x96>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15574:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15576:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15578:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1557a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1557e:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15580:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   15582:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15584:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   15588:	7245      	strb	r5, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1558a:	7102      	strb	r2, [r0, #4]
	if (
   1558c:	b11b      	cbz	r3, 15596 <reject_ext_ind_send+0x36>
	    !conn->llcp_enc.pause_tx &&
   1558e:	f897 215e 	ldrb.w	r2, [r7, #350]	; 0x15e
	    conn->tx_head &&
   15592:	0791      	lsls	r1, r2, #30
   15594:	d50f      	bpl.n	155b6 <reject_ext_ind_send+0x56>
		if (!conn->tx_ctrl) {
   15596:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   1559a:	b332      	cbz	r2, 155ea <reject_ext_ind_send+0x8a>
	tx->next = conn->tx_ctrl_last->next;
   1559c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
   155a0:	681a      	ldr	r2, [r3, #0]
   155a2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   155a4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   155a6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   155a8:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	if (!tx->next) {
   155ac:	b1d3      	cbz	r3, 155e4 <reject_ext_ind_send+0x84>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   155ae:	2301      	movs	r3, #1
   155b0:	7123      	strb	r3, [r4, #4]

	return 0;
   155b2:	2000      	movs	r0, #0
}
   155b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !conn->llcp_phy.pause_tx &&
   155b6:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
   155ba:	07d2      	lsls	r2, r2, #31
   155bc:	d4eb      	bmi.n	15596 <reject_ext_ind_send+0x36>
		if (conn->tx_head == conn->tx_data) {
   155be:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   155c2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   155c4:	bf04      	itt	eq
   155c6:	681a      	ldreq	r2, [r3, #0]
   155c8:	f8c7 21c8 	streq.w	r2, [r7, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   155cc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   155d0:	2a00      	cmp	r2, #0
   155d2:	d1e3      	bne.n	1559c <reject_ext_ind_send+0x3c>
			tx->next = conn->tx_head->next;
   155d4:	681a      	ldr	r2, [r3, #0]
   155d6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   155d8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   155da:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   155dc:	e9c7 0070 	strd	r0, r0, [r7, #448]	; 0x1c0
	if (!tx->next) {
   155e0:	2b00      	cmp	r3, #0
   155e2:	d1e4      	bne.n	155ae <reject_ext_ind_send+0x4e>
		conn->tx_data_last = tx;
   155e4:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
   155e8:	e7e1      	b.n	155ae <reject_ext_ind_send+0x4e>
			tx->next = conn->tx_head;
   155ea:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   155ec:	e9c7 006f 	strd	r0, r0, [r7, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   155f0:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
   155f4:	e7da      	b.n	155ac <reject_ext_ind_send+0x4c>
		return -ENOBUFS;
   155f6:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   155fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155fc:	2000eba0 	.word	0x2000eba0

00015600 <ctrl_tx_sec_enqueue>:
{
   15600:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   15602:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   15606:	079a      	lsls	r2, r3, #30
{
   15608:	4604      	mov	r4, r0
   1560a:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   1560c:	d50c      	bpl.n	15628 <ctrl_tx_sec_enqueue+0x28>
		if (!conn->tx_ctrl) {
   1560e:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   15612:	2b00      	cmp	r3, #0
   15614:	d04e      	beq.n	156b4 <ctrl_tx_sec_enqueue+0xb4>
			tx->next = conn->tx_ctrl_last->next;
   15616:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1561a:	681a      	ldr	r2, [r3, #0]
   1561c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1561e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   15620:	682b      	ldr	r3, [r5, #0]
   15622:	2b00      	cmp	r3, #0
   15624:	d034      	beq.n	15690 <ctrl_tx_sec_enqueue+0x90>
}
   15626:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   15628:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
   1562c:	b342      	cbz	r2, 15680 <ctrl_tx_sec_enqueue+0x80>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1562e:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   15632:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   15636:	4299      	cmp	r1, r3
   15638:	d003      	beq.n	15642 <ctrl_tx_sec_enqueue+0x42>
   1563a:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   1563e:	2b03      	cmp	r3, #3
   15640:	d040      	beq.n	156c4 <ctrl_tx_sec_enqueue+0xc4>
	    !conn->llcp_phy.pause_tx &&
   15642:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   15646:	f013 0301 	ands.w	r3, r3, #1
   1564a:	d124      	bne.n	15696 <ctrl_tx_sec_enqueue+0x96>
		if (conn->tx_head == conn->tx_data) {
   1564c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   15650:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   15652:	bf04      	itt	eq
   15654:	6811      	ldreq	r1, [r2, #0]
   15656:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1565a:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1565e:	2900      	cmp	r1, #0
   15660:	d053      	beq.n	1570a <ctrl_tx_sec_enqueue+0x10a>
			LL_ASSERT(!pause);
   15662:	b1e3      	cbz	r3, 1569e <ctrl_tx_sec_enqueue+0x9e>
   15664:	4a32      	ldr	r2, [pc, #200]	; (15730 <ctrl_tx_sec_enqueue+0x130>)
   15666:	4933      	ldr	r1, [pc, #204]	; (15734 <ctrl_tx_sec_enqueue+0x134>)
   15668:	4833      	ldr	r0, [pc, #204]	; (15738 <ctrl_tx_sec_enqueue+0x138>)
   1566a:	f240 73ef 	movw	r3, #2031	; 0x7ef
   1566e:	f00c fe33 	bl	222d8 <printk>
   15672:	4040      	eors	r0, r0
   15674:	f380 8811 	msr	BASEPRI, r0
   15678:	f04f 0003 	mov.w	r0, #3
   1567c:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   1567e:	e00e      	b.n	1569e <ctrl_tx_sec_enqueue+0x9e>
		if (!conn->tx_ctrl) {
   15680:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   15684:	b95b      	cbnz	r3, 1569e <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   15686:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   15688:	e9c0 116f 	strd	r1, r1, [r0, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1568c:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
			conn->tx_data_last = tx;
   15690:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   15694:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   15696:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   1569a:	2b00      	cmp	r3, #0
   1569c:	d040      	beq.n	15720 <ctrl_tx_sec_enqueue+0x120>
	tx->next = conn->tx_ctrl_last->next;
   1569e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   156a2:	681a      	ldr	r2, [r3, #0]
   156a4:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   156a6:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   156a8:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   156aa:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
		if (!tx->next) {
   156ae:	2b00      	cmp	r3, #0
   156b0:	d1b9      	bne.n	15626 <ctrl_tx_sec_enqueue+0x26>
   156b2:	e7ed      	b.n	15690 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   156b4:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   156b8:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   156ba:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
		if (!tx->next) {
   156be:	2b00      	cmp	r3, #0
   156c0:	d1b1      	bne.n	15626 <ctrl_tx_sec_enqueue+0x26>
   156c2:	e7e5      	b.n	15690 <ctrl_tx_sec_enqueue+0x90>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   156c4:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   156c6:	f003 0303 	and.w	r3, r3, #3
   156ca:	2b03      	cmp	r3, #3
   156cc:	d1b9      	bne.n	15642 <ctrl_tx_sec_enqueue+0x42>
			    ((pdu_data_tx->llctrl.opcode ==
   156ce:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   156d0:	2b03      	cmp	r3, #3
   156d2:	d001      	beq.n	156d8 <ctrl_tx_sec_enqueue+0xd8>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   156d4:	2b0a      	cmp	r3, #10
   156d6:	d1b4      	bne.n	15642 <ctrl_tx_sec_enqueue+0x42>
	    !conn->llcp_phy.pause_tx &&
   156d8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   156dc:	07db      	lsls	r3, r3, #31
   156de:	d525      	bpl.n	1572c <ctrl_tx_sec_enqueue+0x12c>
		if (!conn->tx_ctrl) {
   156e0:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   156e4:	b16b      	cbz	r3, 15702 <ctrl_tx_sec_enqueue+0x102>
			LL_ASSERT(!pause);
   156e6:	4a12      	ldr	r2, [pc, #72]	; (15730 <ctrl_tx_sec_enqueue+0x130>)
   156e8:	4912      	ldr	r1, [pc, #72]	; (15734 <ctrl_tx_sec_enqueue+0x134>)
   156ea:	4813      	ldr	r0, [pc, #76]	; (15738 <ctrl_tx_sec_enqueue+0x138>)
   156ec:	f640 0301 	movw	r3, #2049	; 0x801
   156f0:	f00c fdf2 	bl	222d8 <printk>
   156f4:	4040      	eors	r0, r0
   156f6:	f380 8811 	msr	BASEPRI, r0
   156fa:	f04f 0003 	mov.w	r0, #3
   156fe:	df02      	svc	2
   15700:	e7cd      	b.n	1569e <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   15702:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   15704:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   15708:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   1570a:	6811      	ldr	r1, [r2, #0]
   1570c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1570e:	6015      	str	r5, [r2, #0]
			if (!pause) {
   15710:	2b00      	cmp	r3, #0
   15712:	d185      	bne.n	15620 <ctrl_tx_sec_enqueue+0x20>
	if (!tx->next) {
   15714:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   15716:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
		if (!tx->next) {
   1571a:	2b00      	cmp	r3, #0
   1571c:	d183      	bne.n	15626 <ctrl_tx_sec_enqueue+0x26>
   1571e:	e7b7      	b.n	15690 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   15720:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   15722:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   15726:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   1572a:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   1572c:	2301      	movs	r3, #1
   1572e:	e78d      	b.n	1564c <ctrl_tx_sec_enqueue+0x4c>
   15730:	0002929c 	.word	0x0002929c
   15734:	00029360 	.word	0x00029360
   15738:	00028de0 	.word	0x00028de0

0001573c <event_len_prep>:
{
   1573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   1573e:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   15742:	f003 0207 	and.w	r2, r3, #7
{
   15746:	4604      	mov	r4, r0
   15748:	2a06      	cmp	r2, #6
   1574a:	f200 80c6 	bhi.w	158da <event_len_prep+0x19e>
   1574e:	e8df f002 	tbb	[pc, r2]
   15752:	4804      	.short	0x4804
   15754:	49494848 	.word	0x49494848
   15758:	48          	.byte	0x48
   15759:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1575a:	4867      	ldr	r0, [pc, #412]	; (158f8 <event_len_prep+0x1bc>)
   1575c:	f7fb f89c 	bl	10898 <mem_acquire>
		if (!tx) {
   15760:	2800      	cmp	r0, #0
   15762:	d03e      	beq.n	157e2 <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15764:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15768:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   1576c:	f8b4 51ae 	ldrh.w	r5, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15770:	f8a4 20d6 	strh.w	r2, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15774:	2301      	movs	r3, #1
   15776:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   1577a:	f8a4 50d8 	strh.w	r5, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1577e:	f884 11a6 	strb.w	r1, [r4, #422]	; 0x1a6
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   15782:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   15784:	72c3      	strb	r3, [r0, #11]
   15786:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15788:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1578a:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1578c:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1578e:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   15790:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15792:	2214      	movs	r2, #20
	    conn->tx_head &&
   15794:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15798:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1579a:	221b      	movs	r2, #27
   1579c:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1579e:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   157a0:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   157a2:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   157a6:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   157a8:	7102      	strb	r2, [r0, #4]
	if (
   157aa:	b13b      	cbz	r3, 157bc <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   157ac:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   157b0:	0791      	lsls	r1, r2, #30
   157b2:	d403      	bmi.n	157bc <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   157b4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   157b8:	07d2      	lsls	r2, r2, #31
   157ba:	d576      	bpl.n	158aa <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   157bc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   157c0:	2a00      	cmp	r2, #0
   157c2:	f000 8084 	beq.w	158ce <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   157c6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   157ca:	681a      	ldr	r2, [r3, #0]
   157cc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   157ce:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   157d0:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   157d2:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   157d6:	2b00      	cmp	r3, #0
   157d8:	d056      	beq.n	15888 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   157da:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   157de:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   157e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   157e4:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   157e8:	f8b0 c1a8 	ldrh.w	ip, [r0, #424]	; 0x1a8
		lll->max_rx_time = conn->llcp_length.rx_time;
   157ec:	f8b0 11ac 	ldrh.w	r1, [r0, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   157f0:	f8b0 71aa 	ldrh.w	r7, [r0, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   157f4:	f8b0 61ae 	ldrh.w	r6, [r0, #430]	; 0x1ae
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   157f8:	f8a0 c05e 	strh.w	ip, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   157fc:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   157fe:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15802:	d024      	beq.n	1584e <event_len_prep+0x112>
			conn->llcp_length.state =
   15804:	2206      	movs	r2, #6
   15806:	f362 0302 	bfi	r3, r2, #0, #3
   1580a:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
		rx = conn->llcp_rx;
   1580e:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   15812:	b335      	cbz	r5, 15862 <event_len_prep+0x126>
   15814:	6828      	ldr	r0, [r5, #0]
   15816:	b320      	cbz	r0, 15862 <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15818:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   1581a:	6842      	ldr	r2, [r0, #4]
   1581c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15820:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   15824:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15826:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   15828:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   1582a:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   1582c:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1582e:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15830:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15832:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15834:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15838:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1583a:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1583c:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1583e:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15840:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   15842:	f7fe fe33 	bl	144ac <ll_rx_put>
}
   15846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   1584a:	f7fe be39 	b.w	144c0 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   1584e:	f8b0 21b0 	ldrh.w	r2, [r0, #432]	; 0x1b0
   15852:	b9e2      	cbnz	r2, 1588e <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   15854:	f890 31a4 	ldrb.w	r3, [r0, #420]	; 0x1a4
				conn->procedure_expire = 0U;
   15858:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
				conn->llcp_length.ack = conn->llcp_length.req;
   1585c:	f880 31a5 	strb.w	r3, [r0, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   15860:	e7d5      	b.n	1580e <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   15862:	4a26      	ldr	r2, [pc, #152]	; (158fc <event_len_prep+0x1c0>)
   15864:	4926      	ldr	r1, [pc, #152]	; (15900 <event_len_prep+0x1c4>)
   15866:	4827      	ldr	r0, [pc, #156]	; (15904 <event_len_prep+0x1c8>)
   15868:	f640 53f3 	movw	r3, #3571	; 0xdf3
   1586c:	f00c fd34 	bl	222d8 <printk>
   15870:	4040      	eors	r0, r0
   15872:	f380 8811 	msr	BASEPRI, r0
   15876:	f04f 0003 	mov.w	r0, #3
   1587a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1587c:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1587e:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15882:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   15886:	e7c7      	b.n	15818 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   15888:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1588c:	e7a5      	b.n	157da <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   1588e:	f8a0 21aa 	strh.w	r2, [r0, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   15892:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15894:	f362 0302 	bfi	r3, r2, #0, #3
   15898:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   1589c:	f8b0 31b2 	ldrh.w	r3, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   158a0:	f8a0 21b0 	strh.w	r2, [r0, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   158a4:	f8a0 31ae 	strh.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   158a8:	e7b1      	b.n	1580e <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   158aa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   158ae:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   158b0:	bf04      	itt	eq
   158b2:	681a      	ldreq	r2, [r3, #0]
   158b4:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   158b8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   158bc:	2a00      	cmp	r2, #0
   158be:	d182      	bne.n	157c6 <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   158c0:	681a      	ldr	r2, [r3, #0]
   158c2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   158c4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   158c6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   158c8:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   158cc:	e783      	b.n	157d6 <event_len_prep+0x9a>
			tx->next = conn->tx_head;
   158ce:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   158d0:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   158d4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   158d8:	e77d      	b.n	157d6 <event_len_prep+0x9a>
		LL_ASSERT(0);
   158da:	4a08      	ldr	r2, [pc, #32]	; (158fc <event_len_prep+0x1c0>)
   158dc:	490a      	ldr	r1, [pc, #40]	; (15908 <event_len_prep+0x1cc>)
   158de:	4809      	ldr	r0, [pc, #36]	; (15904 <event_len_prep+0x1c8>)
   158e0:	f640 631b 	movw	r3, #3611	; 0xe1b
   158e4:	f00c fcf8 	bl	222d8 <printk>
   158e8:	4040      	eors	r0, r0
   158ea:	f380 8811 	msr	BASEPRI, r0
   158ee:	f04f 0003 	mov.w	r0, #3
   158f2:	df02      	svc	2
}
   158f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158f6:	bf00      	nop
   158f8:	2000eba0 	.word	0x2000eba0
   158fc:	0002929c 	.word	0x0002929c
   15900:	00029368 	.word	0x00029368
   15904:	00028de0 	.word	0x00028de0
   15908:	00028e78 	.word	0x00028e78

0001590c <event_phy_upd_ind_prep>:
{
   1590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   15910:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   15914:	f013 0201 	ands.w	r2, r3, #1
{
   15918:	4604      	mov	r4, r0
   1591a:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1591c:	f040 808d 	bne.w	15a3a <event_phy_upd_ind_prep+0x12e>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   15920:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   15924:	1a71      	subs	r1, r6, r1
   15926:	0409      	lsls	r1, r1, #16
   15928:	f100 80d2 	bmi.w	15ad0 <event_phy_upd_ind_prep+0x1c4>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1592c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
   15930:	2900      	cmp	r1, #0
   15932:	469c      	mov	ip, r3
   15934:	f2c0 80f7 	blt.w	15b26 <event_phy_upd_ind_prep+0x21a>
			conn->llcp_ack = conn->llcp_req;
   15938:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1593c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		old_tx = lll->phy_tx;
   15940:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
   15944:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		uint16_t eff_rx_time = lll->max_rx_time;
   15948:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
   1594c:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   15950:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   15954:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15958:	f040 80bc 	bne.w	15ad4 <event_phy_upd_ind_prep+0x1c8>
		uint16_t eff_tx_time = lll->max_tx_time;
   1595c:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
   15960:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15964:	d008      	beq.n	15978 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   15966:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   1596a:	095b      	lsrs	r3, r3, #5
   1596c:	f363 0202 	bfi	r2, r3, #0, #3
   15970:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   15974:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   15978:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   1597c:	2d00      	cmp	r5, #0
   1597e:	f000 80b2 	beq.w	15ae6 <event_phy_upd_ind_prep+0x1da>
   15982:	6828      	ldr	r0, [r5, #0]
   15984:	2800      	cmp	r0, #0
   15986:	f000 80ae 	beq.w	15ae6 <event_phy_upd_ind_prep+0x1da>
		conn->llcp_rx = rx->hdr.link->mem;
   1598a:	6843      	ldr	r3, [r0, #4]
		    (lll->phy_rx == old_rx)) {
   1598c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
		conn->llcp_rx = rx->hdr.link->mem;
   15990:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15994:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   15998:	f01c 0f02 	tst.w	ip, #2
   1599c:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   159a0:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   159a4:	d102      	bne.n	159ac <event_phy_upd_ind_prep+0xa0>
   159a6:	4599      	cmp	r9, r3
   159a8:	f000 80c5 	beq.w	15b36 <event_phy_upd_ind_prep+0x22a>
		rx->hdr.handle = lll->handle;
   159ac:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		upd->tx = lll->phy_tx;
   159ae:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   159b0:	2319      	movs	r3, #25
   159b2:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   159b4:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   159b6:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   159b8:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   159ba:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   159bc:	4629      	mov	r1, r5
   159be:	f7fe fd75 	bl	144ac <ll_rx_put>
		rx = conn->llcp_rx;
   159c2:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   159c6:	2d00      	cmp	r5, #0
   159c8:	f000 809e 	beq.w	15b08 <event_phy_upd_ind_prep+0x1fc>
   159cc:	6828      	ldr	r0, [r5, #0]
   159ce:	2800      	cmp	r0, #0
   159d0:	f000 809a 	beq.w	15b08 <event_phy_upd_ind_prep+0x1fc>
		if ((eff_tx_time <= lll->max_tx_time) &&
   159d4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
   159d8:	6842      	ldr	r2, [r0, #4]
   159da:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((eff_tx_time <= lll->max_tx_time) &&
   159de:	42b3      	cmp	r3, r6
   159e0:	d30a      	bcc.n	159f8 <event_phy_upd_ind_prep+0xec>
   159e2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   159e6:	d807      	bhi.n	159f8 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   159e8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
   159ec:	42bb      	cmp	r3, r7
   159ee:	d303      	bcc.n	159f8 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   159f0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   159f4:	f240 8116 	bls.w	15c24 <event_phy_upd_ind_prep+0x318>
		lll->max_tx_time = eff_tx_time;
   159f8:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
   159fc:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15a00:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   15a02:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   15a04:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15a06:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15a0a:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15a0e:	2109      	movs	r1, #9
   15a10:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15a12:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15a16:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15a18:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   15a1c:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   15a1e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   15a22:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15a24:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15a26:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   15a28:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   15a2a:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15a2c:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   15a2e:	f7fe fd3d 	bl	144ac <ll_rx_put>
}
   15a32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   15a36:	f7fe bd43 	b.w	144c0 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   15a3a:	2002      	movs	r0, #2
   15a3c:	f7fe fd46 	bl	144cc <ll_pdu_rx_alloc_peek>
		if (!rx) {
   15a40:	4680      	mov	r8, r0
   15a42:	2800      	cmp	r0, #0
   15a44:	d044      	beq.n	15ad0 <event_phy_upd_ind_prep+0x1c4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15a46:	4883      	ldr	r0, [pc, #524]	; (15c54 <event_phy_upd_ind_prep+0x348>)
   15a48:	f7fa ff26 	bl	10898 <mem_acquire>
		if (!tx) {
   15a4c:	4605      	mov	r5, r0
   15a4e:	2800      	cmp	r0, #0
   15a50:	d03e      	beq.n	15ad0 <event_phy_upd_ind_prep+0x1c4>
		conn->llcp.phy_upd_ind.initiate = 0U;
   15a52:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15a56:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   15a5a:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   15a5e:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   15a62:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   15a66:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
   15a6a:	b2db      	uxtb	r3, r3
   15a6c:	d17e      	bne.n	15b6c <event_phy_upd_ind_prep+0x260>
			conn->llcp_ack = conn->llcp_req;
   15a6e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
   15a72:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
   15a76:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   15a78:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
   15a7c:	f100 80ad 	bmi.w	15bda <event_phy_upd_ind_prep+0x2ce>
   15a80:	463b      	mov	r3, r7
   15a82:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15a84:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   15a86:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15a88:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15a8a:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
   15a8c:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
   15a8e:	2218      	movs	r2, #24
	    conn->tx_head &&
   15a90:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode =
   15a94:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15a96:	792a      	ldrb	r2, [r5, #4]
   15a98:	f042 0203 	orr.w	r2, r2, #3
   15a9c:	712a      	strb	r2, [r5, #4]
	if (
   15a9e:	b13b      	cbz	r3, 15ab0 <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_enc.pause_tx &&
   15aa0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   15aa4:	0796      	lsls	r6, r2, #30
   15aa6:	d403      	bmi.n	15ab0 <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_phy.pause_tx &&
   15aa8:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   15aac:	07d0      	lsls	r0, r2, #31
   15aae:	d57b      	bpl.n	15ba8 <event_phy_upd_ind_prep+0x29c>
		if (!conn->tx_ctrl) {
   15ab0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15ab4:	2a00      	cmp	r2, #0
   15ab6:	f000 808a 	beq.w	15bce <event_phy_upd_ind_prep+0x2c2>
	tx->next = conn->tx_ctrl_last->next;
   15aba:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15abe:	681a      	ldr	r2, [r3, #0]
   15ac0:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15ac2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15ac4:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   15ac6:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   15aca:	b90b      	cbnz	r3, 15ad0 <event_phy_upd_ind_prep+0x1c4>
		conn->tx_data_last = tx;
   15acc:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   15ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   15ad4:	f3c3 0182 	ubfx	r1, r3, #2, #3
   15ad8:	f361 0202 	bfi	r2, r1, #0, #3
   15adc:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   15ae0:	f44f 76a4 	mov.w	r6, #328	; 0x148
   15ae4:	e73c      	b.n	15960 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   15ae6:	4a5c      	ldr	r2, [pc, #368]	; (15c58 <event_phy_upd_ind_prep+0x34c>)
   15ae8:	495c      	ldr	r1, [pc, #368]	; (15c5c <event_phy_upd_ind_prep+0x350>)
   15aea:	485d      	ldr	r0, [pc, #372]	; (15c60 <event_phy_upd_ind_prep+0x354>)
   15aec:	f640 732c 	movw	r3, #3884	; 0xf2c
   15af0:	f00c fbf2 	bl	222d8 <printk>
   15af4:	4040      	eors	r0, r0
   15af6:	f380 8811 	msr	BASEPRI, r0
   15afa:	f04f 0003 	mov.w	r0, #3
   15afe:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15b00:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15b02:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
   15b06:	e740      	b.n	1598a <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   15b08:	4a53      	ldr	r2, [pc, #332]	; (15c58 <event_phy_upd_ind_prep+0x34c>)
   15b0a:	4954      	ldr	r1, [pc, #336]	; (15c5c <event_phy_upd_ind_prep+0x350>)
   15b0c:	4854      	ldr	r0, [pc, #336]	; (15c60 <event_phy_upd_ind_prep+0x354>)
   15b0e:	f640 7358 	movw	r3, #3928	; 0xf58
   15b12:	f00c fbe1 	bl	222d8 <printk>
   15b16:	4040      	eors	r0, r0
   15b18:	f380 8811 	msr	BASEPRI, r0
   15b1c:	f04f 0003 	mov.w	r0, #3
   15b20:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15b22:	6828      	ldr	r0, [r5, #0]
   15b24:	e756      	b.n	159d4 <event_phy_upd_ind_prep+0xc8>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   15b26:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   15b2a:	2900      	cmp	r1, #0
   15b2c:	f43f af04 	beq.w	15938 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   15b30:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
   15b34:	e704      	b.n	15940 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15b36:	4590      	cmp	r8, r2
   15b38:	f47f af38 	bne.w	159ac <event_phy_upd_ind_prep+0xa0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15b3c:	2301      	movs	r3, #1
   15b3e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   15b40:	4629      	mov	r1, r5
   15b42:	f7fe fcb3 	bl	144ac <ll_rx_put>
				rx = conn->llcp_rx;
   15b46:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
				LL_ASSERT(rx && rx->hdr.link);
   15b4a:	2d00      	cmp	r5, #0
   15b4c:	d073      	beq.n	15c36 <event_phy_upd_ind_prep+0x32a>
   15b4e:	6828      	ldr	r0, [r5, #0]
   15b50:	2800      	cmp	r0, #0
   15b52:	d070      	beq.n	15c36 <event_phy_upd_ind_prep+0x32a>
				conn->llcp_rx = rx->hdr.link->mem;
   15b54:	6842      	ldr	r2, [r0, #4]
   15b56:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15b5a:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   15b5c:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15b5e:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   15b60:	f7fe fca4 	bl	144ac <ll_rx_put>
}
   15b64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   15b68:	f7fe bcaa 	b.w	144c0 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   15b6c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   15b6e:	4431      	add	r1, r6
							 lll->latency +
   15b70:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   15b72:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
   15b76:	f7fe fcc7 	bl	14508 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   15b7a:	f8d8 3000 	ldr.w	r3, [r8]
   15b7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15b82:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   15b84:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
			rx = ll_pdu_rx_alloc();
   15b88:	f7fe fcbe 	bl	14508 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   15b8c:	6803      	ldr	r3, [r0, #0]
   15b8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15b92:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15b94:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15b98:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
			conn->llcp_rx = rx;
   15b9c:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15ba0:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15ba4:	095b      	lsrs	r3, r3, #5
   15ba6:	e76d      	b.n	15a84 <event_phy_upd_ind_prep+0x178>
		if (conn->tx_head == conn->tx_data) {
   15ba8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15bac:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15bae:	bf04      	itt	eq
   15bb0:	681a      	ldreq	r2, [r3, #0]
   15bb2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15bb6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15bba:	2a00      	cmp	r2, #0
   15bbc:	f47f af7d 	bne.w	15aba <event_phy_upd_ind_prep+0x1ae>
			tx->next = conn->tx_head->next;
   15bc0:	681a      	ldr	r2, [r3, #0]
   15bc2:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   15bc4:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15bc6:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   15bc8:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   15bcc:	e77d      	b.n	15aca <event_phy_upd_ind_prep+0x1be>
			tx->next = conn->tx_head;
   15bce:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   15bd0:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   15bd4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   15bd8:	e777      	b.n	15aca <event_phy_upd_ind_prep+0x1be>
				(void)ll_pdu_rx_alloc();
   15bda:	f7fe fc95 	bl	14508 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   15bde:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   15be0:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15be4:	2319      	movs	r3, #25
				upd->status = 0U;
   15be6:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15bea:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   15bee:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
   15bf2:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   15bf6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15bfa:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   15bfe:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   15c02:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15c06:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   15c0a:	4641      	mov	r1, r8
   15c0c:	f7fe fc4e 	bl	144ac <ll_rx_put>
				ll_rx_sched();
   15c10:	f7fe fc56 	bl	144c0 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15c14:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15c18:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15c1c:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15c20:	095b      	lsrs	r3, r3, #5
   15c22:	e72f      	b.n	15a84 <event_phy_upd_ind_prep+0x178>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15c24:	2301      	movs	r3, #1
   15c26:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   15c28:	4629      	mov	r1, r5
   15c2a:	f7fe fc3f 	bl	144ac <ll_rx_put>
}
   15c2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   15c32:	f7fe bc45 	b.w	144c0 <ll_rx_sched>
				LL_ASSERT(rx && rx->hdr.link);
   15c36:	4a08      	ldr	r2, [pc, #32]	; (15c58 <event_phy_upd_ind_prep+0x34c>)
   15c38:	4908      	ldr	r1, [pc, #32]	; (15c5c <event_phy_upd_ind_prep+0x350>)
   15c3a:	4809      	ldr	r0, [pc, #36]	; (15c60 <event_phy_upd_ind_prep+0x354>)
   15c3c:	f640 733b 	movw	r3, #3899	; 0xf3b
   15c40:	f00c fb4a 	bl	222d8 <printk>
   15c44:	4040      	eors	r0, r0
   15c46:	f380 8811 	msr	BASEPRI, r0
   15c4a:	f04f 0003 	mov.w	r0, #3
   15c4e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   15c50:	6828      	ldr	r0, [r5, #0]
   15c52:	e77f      	b.n	15b54 <event_phy_upd_ind_prep+0x248>
   15c54:	2000eba0 	.word	0x2000eba0
   15c58:	0002929c 	.word	0x0002929c
   15c5c:	00029368 	.word	0x00029368
   15c60:	00028de0 	.word	0x00028de0

00015c64 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   15c64:	4801      	ldr	r0, [pc, #4]	; (15c6c <ll_conn_acquire+0x8>)
   15c66:	f7fa be17 	b.w	10898 <mem_acquire>
   15c6a:	bf00      	nop
   15c6c:	2000e770 	.word	0x2000e770

00015c70 <ll_conn_release>:
	mem_release(conn, &conn_free);
   15c70:	4901      	ldr	r1, [pc, #4]	; (15c78 <ll_conn_release+0x8>)
   15c72:	f7fa be2b 	b.w	108cc <mem_release>
   15c76:	bf00      	nop
   15c78:	2000e770 	.word	0x2000e770

00015c7c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15c7c:	4902      	ldr	r1, [pc, #8]	; (15c88 <ll_conn_handle_get+0xc>)
   15c7e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   15c82:	f7fa be3f 	b.w	10904 <mem_index_get>
   15c86:	bf00      	nop
   15c88:	2000e774 	.word	0x2000e774

00015c8c <ll_conn_get>:
{
   15c8c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15c8e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15c92:	4801      	ldr	r0, [pc, #4]	; (15c98 <ll_conn_get+0xc>)
   15c94:	f7fa be32 	b.w	108fc <mem_get>
   15c98:	2000e774 	.word	0x2000e774

00015c9c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15c9c:	2801      	cmp	r0, #1
   15c9e:	d80c      	bhi.n	15cba <ll_connected_get+0x1e>
{
   15ca0:	b510      	push	{r4, lr}
   15ca2:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ca4:	4622      	mov	r2, r4
   15ca6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15caa:	4805      	ldr	r0, [pc, #20]	; (15cc0 <ll_connected_get+0x24>)
   15cac:	f7fa fe26 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15cb0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15cb2:	42a3      	cmp	r3, r4
		return NULL;
   15cb4:	bf18      	it	ne
   15cb6:	2000      	movne	r0, #0
}
   15cb8:	bd10      	pop	{r4, pc}
		return NULL;
   15cba:	2000      	movs	r0, #0
}
   15cbc:	4770      	bx	lr
   15cbe:	bf00      	nop
   15cc0:	2000e774 	.word	0x2000e774

00015cc4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   15cc4:	4801      	ldr	r0, [pc, #4]	; (15ccc <ll_tx_mem_acquire+0x8>)
   15cc6:	f7fa bde7 	b.w	10898 <mem_acquire>
   15cca:	bf00      	nop
   15ccc:	2000eb30 	.word	0x2000eb30

00015cd0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   15cd0:	4901      	ldr	r1, [pc, #4]	; (15cd8 <ll_tx_mem_release+0x8>)
   15cd2:	f7fa bdfb 	b.w	108cc <mem_release>
   15cd6:	bf00      	nop
   15cd8:	2000eb30 	.word	0x2000eb30

00015cdc <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15cdc:	2801      	cmp	r0, #1
   15cde:	d82f      	bhi.n	15d40 <ll_tx_mem_enqueue+0x64>
{
   15ce0:	b570      	push	{r4, r5, r6, lr}
   15ce2:	4604      	mov	r4, r0
   15ce4:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ce6:	4822      	ldr	r0, [pc, #136]	; (15d70 <ll_tx_mem_enqueue+0x94>)
   15ce8:	4622      	mov	r2, r4
   15cea:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15cee:	f7fa fe05 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15cf2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15cf4:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15cf6:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   15cf8:	d11f      	bne.n	15d3a <ll_tx_mem_enqueue+0x5e>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   15cfa:	4a1e      	ldr	r2, [pc, #120]	; (15d74 <ll_tx_mem_enqueue+0x98>)
   15cfc:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   15cfe:	f892 c001 	ldrb.w	ip, [r2, #1]
   15d02:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   15d04:	1c4b      	adds	r3, r1, #1
   15d06:	b2db      	uxtb	r3, r3
		last = 0U;
   15d08:	459c      	cmp	ip, r3
   15d0a:	bf08      	it	eq
   15d0c:	2300      	moveq	r3, #0
	if (last == first) {
   15d0e:	4298      	cmp	r0, r3
   15d10:	d019      	beq.n	15d46 <ll_tx_mem_enqueue+0x6a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15d12:	4694      	mov	ip, r2
   15d14:	f81c 0b04 	ldrb.w	r0, [ip], #4
   15d18:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   15d1c:	eb1c 0100 	adds.w	r1, ip, r0
   15d20:	d011      	beq.n	15d46 <ll_tx_mem_enqueue+0x6a>
	lll_tx->handle = handle;
   15d22:	f82c 4000 	strh.w	r4, [ip, r0]
	lll_tx->node = tx;
   15d26:	604e      	str	r6, [r1, #4]
   15d28:	7c29      	ldrb	r1, [r5, #16]
	*last = idx; /* Commit: Update write index */
   15d2a:	70d3      	strb	r3, [r2, #3]
	if (ull_ref_get(&conn->ull)) {
   15d2c:	b971      	cbnz	r1, 15d4c <ll_tx_mem_enqueue+0x70>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15d2e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15d32:	2b00      	cmp	r3, #0
   15d34:	db15      	blt.n	15d62 <ll_tx_mem_enqueue+0x86>
	return 0;
   15d36:	2000      	movs	r0, #0
}
   15d38:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15d3a:	f06f 0015 	mvn.w	r0, #21
}
   15d3e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15d40:	f06f 0015 	mvn.w	r0, #21
}
   15d44:	4770      	bx	lr
		return -ENOBUFS;
   15d46:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15d4a:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   15d4c:	4b0a      	ldr	r3, [pc, #40]	; (15d78 <ll_tx_mem_enqueue+0x9c>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15d4e:	2200      	movs	r2, #0
   15d50:	2101      	movs	r1, #1
   15d52:	2003      	movs	r0, #3
		mfy.param = conn;
   15d54:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15d56:	f7fa fe77 	bl	10a48 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15d5a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15d5e:	2b00      	cmp	r3, #0
   15d60:	dae9      	bge.n	15d36 <ll_tx_mem_enqueue+0x5a>
		ull_slave_latency_cancel(conn, handle);
   15d62:	4628      	mov	r0, r5
   15d64:	4621      	mov	r1, r4
   15d66:	f003 fdf7 	bl	19958 <ull_slave_latency_cancel>
	return 0;
   15d6a:	2000      	movs	r0, #0
}
   15d6c:	bd70      	pop	{r4, r5, r6, pc}
   15d6e:	bf00      	nop
   15d70:	2000e774 	.word	0x2000e774
   15d74:	20000678 	.word	0x20000678
   15d78:	200006ac 	.word	0x200006ac

00015d7c <ll_conn_update>:
{
   15d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15d80:	2801      	cmp	r0, #1
{
   15d82:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   15d86:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   15d8a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15d8e:	d82b      	bhi.n	15de8 <ll_conn_update+0x6c>
   15d90:	4682      	mov	sl, r0
   15d92:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15d94:	4842      	ldr	r0, [pc, #264]	; (15ea0 <ll_conn_update+0x124>)
   15d96:	4615      	mov	r5, r2
   15d98:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15d9c:	4652      	mov	r2, sl
   15d9e:	461e      	mov	r6, r3
   15da0:	f7fa fdac 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15da4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15da6:	4553      	cmp	r3, sl
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15da8:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   15daa:	d11d      	bne.n	15de8 <ll_conn_update+0x6c>
	if (!cmd) {
   15dac:	b1fc      	cbz	r4, 15dee <ll_conn_update+0x72>
		cmd--;
   15dae:	3c01      	subs	r4, #1
		if (cmd) {
   15db0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15db4:	d04a      	beq.n	15e4c <ll_conn_update+0xd0>
			if ((conn->llcp_conn_param.req ==
   15db6:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
   15dba:	f890 317d 	ldrb.w	r3, [r0, #381]	; 0x17d
   15dbe:	429a      	cmp	r2, r3
   15dc0:	d063      	beq.n	15e8a <ll_conn_update+0x10e>
			    (conn->llcp_conn_param.state !=
   15dc2:	f890 317e 	ldrb.w	r3, [r0, #382]	; 0x17e
			     conn->llcp_conn_param.ack) ||
   15dc6:	f003 0207 	and.w	r2, r3, #7
   15dca:	2a03      	cmp	r2, #3
   15dcc:	d15d      	bne.n	15e8a <ll_conn_update+0x10e>
			conn->llcp_conn_param.state = cmd;
   15dce:	f004 0407 	and.w	r4, r4, #7
   15dd2:	f044 0408 	orr.w	r4, r4, #8
   15dd6:	f023 030f 	bic.w	r3, r3, #15
   15dda:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   15ddc:	f880 517f 	strb.w	r5, [r0, #383]	; 0x17f
			conn->llcp_conn_param.state = cmd;
   15de0:	f880 417e 	strb.w	r4, [r0, #382]	; 0x17e
	return 0;
   15de4:	2000      	movs	r0, #0
   15de6:	e000      	b.n	15dea <ll_conn_update+0x6e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15de8:	2002      	movs	r0, #2
}
   15dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->llcp_conn_param.disabled &&
   15dee:	f890 317e 	ldrb.w	r3, [r0, #382]	; 0x17e
   15df2:	06d9      	lsls	r1, r3, #27
   15df4:	d522      	bpl.n	15e3c <ll_conn_update+0xc0>
		} else if (conn->lll.role) {
   15df6:	f99c 303d 	ldrsb.w	r3, [ip, #61]	; 0x3d
   15dfa:	2b00      	cmp	r3, #0
   15dfc:	db48      	blt.n	15e90 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15dfe:	f89c 2110 	ldrb.w	r2, [ip, #272]	; 0x110
   15e02:	f89c 3111 	ldrb.w	r3, [ip, #273]	; 0x111
   15e06:	4293      	cmp	r3, r2
   15e08:	d13f      	bne.n	15e8a <ll_conn_update+0x10e>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15e0a:	f89c 2112 	ldrb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.interval = interval_max;
   15e0e:	f8ac 9114 	strh.w	r9, [ip, #276]	; 0x114
		conn->llcp_cu.req++;
   15e12:	3301      	adds	r3, #1
   15e14:	f88c 3110 	strb.w	r3, [ip, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15e18:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   15e1c:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15e1e:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   15e22:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   15e24:	f88c 3120 	strb.w	r3, [ip, #288]	; 0x120
		conn->llcp_cu.latency = latency;
   15e28:	f8ac 8116 	strh.w	r8, [ip, #278]	; 0x116
		conn->llcp_cu.timeout = timeout;
   15e2c:	f8ac 7118 	strh.w	r7, [ip, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15e30:	f88c 2112 	strb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   15e34:	f8cc 011c 	str.w	r0, [ip, #284]	; 0x11c
}
   15e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    (!conn->common.fex_valid ||
   15e3c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   15e40:	07da      	lsls	r2, r3, #31
   15e42:	d503      	bpl.n	15e4c <ll_conn_update+0xd0>
		     (conn->llcp_feature.features_conn &
   15e44:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
		    (!conn->common.fex_valid ||
   15e48:	079b      	lsls	r3, r3, #30
   15e4a:	d5d4      	bpl.n	15df6 <ll_conn_update+0x7a>
			if (conn->llcp_conn_param.req !=
   15e4c:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   15e50:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   15e54:	4293      	cmp	r3, r2
   15e56:	d118      	bne.n	15e8a <ll_conn_update+0x10e>
			conn->llcp_conn_param.state = cmd;
   15e58:	f8bc 217e 	ldrh.w	r2, [ip, #382]	; 0x17e
			conn->llcp_conn_param.interval_min = interval_min;
   15e5c:	f8ac 6180 	strh.w	r6, [ip, #384]	; 0x180
			conn->llcp_conn_param.state = cmd;
   15e60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   15e64:	f042 0208 	orr.w	r2, r2, #8
   15e68:	f8ac 217e 	strh.w	r2, [ip, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e6c:	f99c 203d 	ldrsb.w	r2, [ip, #61]	; 0x3d
			conn->llcp_conn_param.interval_max = interval_max;
   15e70:	f8ac 9182 	strh.w	r9, [ip, #386]	; 0x182
			conn->llcp_conn_param.req++;
   15e74:	3301      	adds	r3, #1
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e76:	2a00      	cmp	r2, #0
			conn->llcp_conn_param.latency = latency;
   15e78:	f8ac 8184 	strh.w	r8, [ip, #388]	; 0x184
			conn->llcp_conn_param.timeout = timeout;
   15e7c:	f8ac 7186 	strh.w	r7, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   15e80:	f88c 317c 	strb.w	r3, [ip, #380]	; 0x17c
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e84:	db06      	blt.n	15e94 <ll_conn_update+0x118>
	return 0;
   15e86:	2000      	movs	r0, #0
   15e88:	e7af      	b.n	15dea <ll_conn_update+0x6e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   15e8a:	200c      	movs	r0, #12
}
   15e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15e90:	201a      	movs	r0, #26
   15e92:	e7aa      	b.n	15dea <ll_conn_update+0x6e>
				ull_slave_latency_cancel(conn, handle);
   15e94:	4660      	mov	r0, ip
   15e96:	4651      	mov	r1, sl
   15e98:	f003 fd5e 	bl	19958 <ull_slave_latency_cancel>
	return 0;
   15e9c:	2000      	movs	r0, #0
   15e9e:	e7a4      	b.n	15dea <ll_conn_update+0x6e>
   15ea0:	2000e774 	.word	0x2000e774

00015ea4 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15ea4:	2801      	cmp	r0, #1
   15ea6:	d81d      	bhi.n	15ee4 <ll_chm_get+0x40>
{
   15ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eaa:	4606      	mov	r6, r0
   15eac:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15eae:	480e      	ldr	r0, [pc, #56]	; (15ee8 <ll_chm_get+0x44>)
   15eb0:	4632      	mov	r2, r6
   15eb2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15eb6:	f7fa fd21 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15eba:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15ebc:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ebe:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15ec0:	d10e      	bne.n	15ee0 <ll_chm_get+0x3c>
		memcpy(chm, conn->lll.data_chan_map,
   15ec2:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   15ec6:	2600      	movs	r6, #0
   15ec8:	f884 61d0 	strb.w	r6, [r4, #464]	; 0x1d0
		memcpy(chm, conn->lll.data_chan_map,
   15ecc:	2205      	movs	r2, #5
   15ece:	4639      	mov	r1, r7
   15ed0:	4628      	mov	r0, r5
   15ed2:	f00e febd 	bl	24c50 <memcpy>
	} while (conn->chm_updated);
   15ed6:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
   15eda:	2800      	cmp	r0, #0
   15edc:	d1f4      	bne.n	15ec8 <ll_chm_get+0x24>
}
   15ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15ee0:	2002      	movs	r0, #2
}
   15ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15ee4:	2002      	movs	r0, #2
}
   15ee6:	4770      	bx	lr
   15ee8:	2000e774 	.word	0x2000e774

00015eec <ll_terminate_ind_send>:
	switch (reason) {
   15eec:	2929      	cmp	r1, #41	; 0x29
{
   15eee:	b538      	push	{r3, r4, r5, lr}
   15ef0:	460c      	mov	r4, r1
   15ef2:	4605      	mov	r5, r0
	switch (reason) {
   15ef4:	d819      	bhi.n	15f2a <ll_terminate_ind_send+0x3e>
   15ef6:	2904      	cmp	r1, #4
   15ef8:	d919      	bls.n	15f2e <ll_terminate_ind_send+0x42>
   15efa:	1f4b      	subs	r3, r1, #5
   15efc:	2b24      	cmp	r3, #36	; 0x24
   15efe:	d816      	bhi.n	15f2e <ll_terminate_ind_send+0x42>
   15f00:	e8df f003 	tbb	[pc, r3]
   15f04:	15151517 	.word	0x15151517
   15f08:	15151515 	.word	0x15151515
   15f0c:	15151515 	.word	0x15151515
   15f10:	17171515 	.word	0x17171515
   15f14:	15151517 	.word	0x15151517
   15f18:	15151715 	.word	0x15151715
   15f1c:	15151515 	.word	0x15151515
   15f20:	15151515 	.word	0x15151515
   15f24:	15151515 	.word	0x15151515
   15f28:	17          	.byte	0x17
   15f29:	00          	.byte	0x00
   15f2a:	293b      	cmp	r1, #59	; 0x3b
   15f2c:	d001      	beq.n	15f32 <ll_terminate_ind_send+0x46>
   15f2e:	2012      	movs	r0, #18
}
   15f30:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15f32:	2d01      	cmp	r5, #1
   15f34:	d815      	bhi.n	15f62 <ll_terminate_ind_send+0x76>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f36:	462a      	mov	r2, r5
   15f38:	480d      	ldr	r0, [pc, #52]	; (15f70 <ll_terminate_ind_send+0x84>)
   15f3a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15f3e:	f7fa fcdd 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15f42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   15f44:	42aa      	cmp	r2, r5
   15f46:	d10c      	bne.n	15f62 <ll_terminate_ind_send+0x76>
	conn->llcp_terminate.req++;
   15f48:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15f4c:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   15f50:	f880 413a 	strb.w	r4, [r0, #314]	; 0x13a
	conn->llcp_terminate.req++;
   15f54:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15f56:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   15f58:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15f5c:	db03      	blt.n	15f66 <ll_terminate_ind_send+0x7a>
	return 0;
   15f5e:	2000      	movs	r0, #0
}
   15f60:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f62:	2002      	movs	r0, #2
}
   15f64:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   15f66:	4629      	mov	r1, r5
   15f68:	f003 fcf6 	bl	19958 <ull_slave_latency_cancel>
	return 0;
   15f6c:	2000      	movs	r0, #0
}
   15f6e:	bd38      	pop	{r3, r4, r5, pc}
   15f70:	2000e774 	.word	0x2000e774

00015f74 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15f74:	2801      	cmp	r0, #1
   15f76:	d81b      	bhi.n	15fb0 <ll_feature_req_send+0x3c>
{
   15f78:	b510      	push	{r4, lr}
   15f7a:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f7c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15f80:	480f      	ldr	r0, [pc, #60]	; (15fc0 <ll_feature_req_send+0x4c>)
   15f82:	4622      	mov	r2, r4
   15f84:	f7fa fcba 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15f88:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
   15f8a:	42a1      	cmp	r1, r4
   15f8c:	d10e      	bne.n	15fac <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   15f8e:	f890 4124 	ldrb.w	r4, [r0, #292]	; 0x124
   15f92:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   15f96:	42a2      	cmp	r2, r4
   15f98:	d10c      	bne.n	15fb4 <ll_feature_req_send+0x40>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15f9a:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   15f9e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15fa0:	2c00      	cmp	r4, #0
	conn->llcp_feature.req++;
   15fa2:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15fa6:	db07      	blt.n	15fb8 <ll_feature_req_send+0x44>
	return 0;
   15fa8:	2000      	movs	r0, #0
}
   15faa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15fac:	2002      	movs	r0, #2
}
   15fae:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15fb0:	2002      	movs	r0, #2
}
   15fb2:	4770      	bx	lr
		return BT_HCI_ERR_CMD_DISALLOWED;
   15fb4:	200c      	movs	r0, #12
}
   15fb6:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   15fb8:	f003 fcce 	bl	19958 <ull_slave_latency_cancel>
	return 0;
   15fbc:	2000      	movs	r0, #0
}
   15fbe:	bd10      	pop	{r4, pc}
   15fc0:	2000e774 	.word	0x2000e774

00015fc4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15fc4:	2801      	cmp	r0, #1
   15fc6:	d81b      	bhi.n	16000 <ll_version_ind_send+0x3c>
{
   15fc8:	b510      	push	{r4, lr}
   15fca:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15fcc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15fd0:	480f      	ldr	r0, [pc, #60]	; (16010 <ll_version_ind_send+0x4c>)
   15fd2:	4622      	mov	r2, r4
   15fd4:	f7fa fc92 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   15fd8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
   15fda:	42a1      	cmp	r1, r4
   15fdc:	d10e      	bne.n	15ffc <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   15fde:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
   15fe2:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   15fe6:	42a2      	cmp	r2, r4
   15fe8:	d10c      	bne.n	16004 <ll_version_ind_send+0x40>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15fea:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   15fee:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ff0:	2c00      	cmp	r4, #0
	conn->llcp_version.req++;
   15ff2:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ff6:	db07      	blt.n	16008 <ll_version_ind_send+0x44>
	return 0;
   15ff8:	2000      	movs	r0, #0
}
   15ffa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15ffc:	2002      	movs	r0, #2
}
   15ffe:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16000:	2002      	movs	r0, #2
}
   16002:	4770      	bx	lr
		return BT_HCI_ERR_CMD_DISALLOWED;
   16004:	200c      	movs	r0, #12
}
   16006:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   16008:	f003 fca6 	bl	19958 <ull_slave_latency_cancel>
	return 0;
   1600c:	2000      	movs	r0, #0
}
   1600e:	bd10      	pop	{r4, pc}
   16010:	2000e774 	.word	0x2000e774

00016014 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16014:	2801      	cmp	r0, #1
   16016:	d832      	bhi.n	1607e <ll_length_req_send+0x6a>
{
   16018:	b570      	push	{r4, r5, r6, lr}
   1601a:	4606      	mov	r6, r0
   1601c:	460d      	mov	r5, r1
   1601e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16020:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   16024:	4602      	mov	r2, r0
   16026:	4825      	ldr	r0, [pc, #148]	; (160bc <ll_length_req_send+0xa8>)
   16028:	f7fa fc68 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   1602c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1602e:	42b3      	cmp	r3, r6
   16030:	d123      	bne.n	1607a <ll_length_req_send+0x66>
	if (conn->llcp_length.disabled ||
   16032:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   16036:	071a      	lsls	r2, r3, #28
   16038:	d423      	bmi.n	16082 <ll_length_req_send+0x6e>
	    (conn->common.fex_valid &&
   1603a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   1603e:	07d1      	lsls	r1, r2, #31
   16040:	d503      	bpl.n	1604a <ll_length_req_send+0x36>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   16042:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   16046:	0692      	lsls	r2, r2, #26
   16048:	d51b      	bpl.n	16082 <ll_length_req_send+0x6e>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1604a:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   1604e:	f890 21a5 	ldrb.w	r2, [r0, #421]	; 0x1a5
   16052:	428a      	cmp	r2, r1
   16054:	d019      	beq.n	1608a <ll_length_req_send+0x76>
		switch (conn->llcp_length.state) {
   16056:	f003 0307 	and.w	r3, r3, #7
   1605a:	2b03      	cmp	r3, #3
   1605c:	d004      	beq.n	16068 <ll_length_req_send+0x54>
   1605e:	3303      	adds	r3, #3
   16060:	f003 0307 	and.w	r3, r3, #7
   16064:	2b01      	cmp	r3, #1
   16066:	d80e      	bhi.n	16086 <ll_length_req_send+0x72>
			if (!conn->llcp_length.cache.tx_octets) {
   16068:	f8b0 31b0 	ldrh.w	r3, [r0, #432]	; 0x1b0
   1606c:	b95b      	cbnz	r3, 16086 <ll_length_req_send+0x72>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1606e:	f8a0 51b0 	strh.w	r5, [r0, #432]	; 0x1b0
				conn->llcp_length.cache.tx_time = tx_time;
   16072:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
				return 0;
   16076:	4618      	mov	r0, r3
}
   16078:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1607a:	2002      	movs	r0, #2
}
   1607c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1607e:	2002      	movs	r0, #2
}
   16080:	4770      	bx	lr
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16082:	201a      	movs	r0, #26
}
   16084:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   16086:	200c      	movs	r0, #12
}
   16088:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1608a:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1608e:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   16092:	f8a0 51aa 	strh.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_length.req++;
   16096:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16098:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1609c:	2900      	cmp	r1, #0
	conn->llcp_length.tx_time = tx_time;
   1609e:	f8a0 41ae 	strh.w	r4, [r0, #430]	; 0x1ae
	conn->llcp_length.req++;
   160a2:	f880 21a4 	strb.w	r2, [r0, #420]	; 0x1a4
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   160a6:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   160aa:	db01      	blt.n	160b0 <ll_length_req_send+0x9c>
	return 0;
   160ac:	2000      	movs	r0, #0
}
   160ae:	bd70      	pop	{r4, r5, r6, pc}
		ull_slave_latency_cancel(conn, handle);
   160b0:	4631      	mov	r1, r6
   160b2:	f003 fc51 	bl	19958 <ull_slave_latency_cancel>
	return 0;
   160b6:	2000      	movs	r0, #0
}
   160b8:	bd70      	pop	{r4, r5, r6, pc}
   160ba:	bf00      	nop
   160bc:	2000e774 	.word	0x2000e774

000160c0 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   160c0:	4a03      	ldr	r2, [pc, #12]	; (160d0 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   160c2:	4b04      	ldr	r3, [pc, #16]	; (160d4 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   160c4:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   160c6:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   160c8:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   160ca:	800b      	strh	r3, [r1, #0]
}
   160cc:	4770      	bx	lr
   160ce:	bf00      	nop
   160d0:	2000f58a 	.word	0x2000f58a
   160d4:	2000f58c 	.word	0x2000f58c

000160d8 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   160d8:	4a02      	ldr	r2, [pc, #8]	; (160e4 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   160da:	4b03      	ldr	r3, [pc, #12]	; (160e8 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   160dc:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   160de:	8019      	strh	r1, [r3, #0]
}
   160e0:	2000      	movs	r0, #0
   160e2:	4770      	bx	lr
   160e4:	2000f58a 	.word	0x2000f58a
   160e8:	2000f58c 	.word	0x2000f58c

000160ec <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   160ec:	f04f 0c1b 	mov.w	ip, #27
   160f0:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   160f4:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   160f8:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   160fc:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   160fe:	8018      	strh	r0, [r3, #0]
}
   16100:	4770      	bx	lr
   16102:	bf00      	nop

00016104 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16104:	2801      	cmp	r0, #1
   16106:	d81b      	bhi.n	16140 <ll_phy_get+0x3c>
{
   16108:	b570      	push	{r4, r5, r6, lr}
   1610a:	4604      	mov	r4, r0
   1610c:	460e      	mov	r6, r1
   1610e:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16110:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   16114:	4602      	mov	r2, r0
   16116:	480b      	ldr	r0, [pc, #44]	; (16144 <ll_phy_get+0x40>)
   16118:	f7fa fbf0 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   1611c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1611e:	42a2      	cmp	r2, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16120:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   16122:	d10b      	bne.n	1613c <ll_phy_get+0x38>
	*tx = conn->lll.phy_tx;
   16124:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   16128:	f3c4 0402 	ubfx	r4, r4, #0, #3
   1612c:	7034      	strb	r4, [r6, #0]
	*rx = conn->lll.phy_rx;
   1612e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   16132:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16136:	702b      	strb	r3, [r5, #0]
	return 0;
   16138:	2000      	movs	r0, #0
}
   1613a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1613c:	2002      	movs	r0, #2
}
   1613e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16140:	2002      	movs	r0, #2
}
   16142:	4770      	bx	lr
   16144:	2000e774 	.word	0x2000e774

00016148 <ll_phy_default_set>:
	default_phy_tx = tx;
   16148:	4a02      	ldr	r2, [pc, #8]	; (16154 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1614a:	4b03      	ldr	r3, [pc, #12]	; (16158 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1614c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1614e:	7019      	strb	r1, [r3, #0]
}
   16150:	2000      	movs	r0, #0
   16152:	4770      	bx	lr
   16154:	2000fb2b 	.word	0x2000fb2b
   16158:	2000fb2a 	.word	0x2000fb2a

0001615c <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1615c:	2801      	cmp	r0, #1
{
   1615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   16162:	d842      	bhi.n	161ea <ll_phy_req_send+0x8e>
   16164:	4604      	mov	r4, r0
   16166:	460d      	mov	r5, r1
   16168:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1616a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1616e:	4602      	mov	r2, r0
   16170:	4824      	ldr	r0, [pc, #144]	; (16204 <ll_phy_req_send+0xa8>)
   16172:	4698      	mov	r8, r3
   16174:	f7fa fbc2 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   16178:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1617a:	42a3      	cmp	r3, r4
   1617c:	d135      	bne.n	161ea <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   1617e:	f890 61b7 	ldrb.w	r6, [r0, #439]	; 0x1b7
   16182:	f016 0608 	ands.w	r6, r6, #8
   16186:	d134      	bne.n	161f2 <ll_phy_req_send+0x96>
	    (conn->common.fex_valid &&
   16188:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   1618c:	07db      	lsls	r3, r3, #31
   1618e:	d504      	bpl.n	1619a <ll_phy_req_send+0x3e>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   16190:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   16194:	f413 6f10 	tst.w	r3, #2304	; 0x900
   16198:	d02b      	beq.n	161f2 <ll_phy_req_send+0x96>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1619a:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
   1619e:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
   161a2:	4299      	cmp	r1, r3
   161a4:	d129      	bne.n	161fa <ll_phy_req_send+0x9e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   161a6:	f005 0c07 	and.w	ip, r5, #7
   161aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   161ae:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
   161b2:	f008 0307 	and.w	r3, r8, #7
   161b6:	f007 0201 	and.w	r2, r7, #1
   161ba:	ea4c 1343 	orr.w	r3, ip, r3, lsl #5
   161be:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   161c2:	f8b0 21b6 	ldrh.w	r2, [r0, #438]	; 0x1b6
	conn->llcp_phy.req++;
   161c6:	3101      	adds	r1, #1
   161c8:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   161cc:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   161d0:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   161d4:	f022 0207 	bic.w	r2, r2, #7
   161d8:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   161da:	2900      	cmp	r1, #0
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   161dc:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   161e0:	da04      	bge.n	161ec <ll_phy_req_send+0x90>
		ull_slave_latency_cancel(conn, handle);
   161e2:	4621      	mov	r1, r4
   161e4:	f003 fbb8 	bl	19958 <ull_slave_latency_cancel>
   161e8:	e000      	b.n	161ec <ll_phy_req_send+0x90>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   161ea:	2602      	movs	r6, #2
}
   161ec:	4630      	mov	r0, r6
   161ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   161f2:	261a      	movs	r6, #26
}
   161f4:	4630      	mov	r0, r6
   161f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   161fa:	260c      	movs	r6, #12
}
   161fc:	4630      	mov	r0, r6
   161fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16202:	bf00      	nop
   16204:	2000e774 	.word	0x2000e774

00016208 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16208:	2801      	cmp	r0, #1
   1620a:	d81d      	bhi.n	16248 <ll_apto_get+0x40>
{
   1620c:	b538      	push	{r3, r4, r5, lr}
   1620e:	4604      	mov	r4, r0
   16210:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16212:	480e      	ldr	r0, [pc, #56]	; (1624c <ll_apto_get+0x44>)
   16214:	4622      	mov	r2, r4
   16216:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1621a:	f7fa fb6f 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   1621e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   16220:	42a3      	cmp	r3, r4
   16222:	d10f      	bne.n	16244 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   16224:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   16226:	f8b0 30d2 	ldrh.w	r3, [r0, #210]	; 0xd2
   1622a:	4a09      	ldr	r2, [pc, #36]	; (16250 <ll_apto_get+0x48>)
   1622c:	fb01 f303 	mul.w	r3, r1, r3
   16230:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   16234:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16238:	fba2 2303 	umull	r2, r3, r2, r3
   1623c:	099b      	lsrs	r3, r3, #6
   1623e:	802b      	strh	r3, [r5, #0]
	return 0;
   16240:	2000      	movs	r0, #0
}
   16242:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16244:	2002      	movs	r0, #2
}
   16246:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16248:	2002      	movs	r0, #2
}
   1624a:	4770      	bx	lr
   1624c:	2000e774 	.word	0x2000e774
   16250:	10624dd3 	.word	0x10624dd3

00016254 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16254:	2801      	cmp	r0, #1
   16256:	d81e      	bhi.n	16296 <ll_apto_set+0x42>
{
   16258:	b538      	push	{r3, r4, r5, lr}
   1625a:	4605      	mov	r5, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1625c:	462a      	mov	r2, r5
   1625e:	480f      	ldr	r0, [pc, #60]	; (1629c <ll_apto_set+0x48>)
   16260:	460c      	mov	r4, r1
   16262:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   16266:	f7fa fb49 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   1626a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1626c:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1626e:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   16270:	d10f      	bne.n	16292 <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   16272:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   16274:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16278:	fb01 f202 	mul.w	r2, r1, r2
   1627c:	f242 7110 	movw	r1, #10000	; 0x2710
   16280:	fb01 2104 	mla	r1, r1, r4, r2
   16284:	3901      	subs	r1, #1
	return 0;
   16286:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   16288:	fbb1 f1f2 	udiv	r1, r1, r2
   1628c:	f8a3 10d2 	strh.w	r1, [r3, #210]	; 0xd2
}
   16290:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16292:	2002      	movs	r0, #2
}
   16294:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16296:	2002      	movs	r0, #2
}
   16298:	4770      	bx	lr
   1629a:	bf00      	nop
   1629c:	2000e774 	.word	0x2000e774

000162a0 <ull_conn_init>:
	err = init_reset();
   162a0:	f7fe bffc 	b.w	1529c <init_reset>

000162a4 <ull_conn_reset>:
{
   162a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   162a8:	4e18      	ldr	r6, [pc, #96]	; (1630c <ull_conn_reset+0x68>)
	LL_ASSERT(err == 0 || err == -EALREADY);
   162aa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 16310 <ull_conn_reset+0x6c>
   162ae:	4f19      	ldr	r7, [pc, #100]	; (16314 <ull_conn_reset+0x70>)
{
   162b0:	2500      	movs	r5, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   162b2:	462a      	mov	r2, r5
   162b4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   162b8:	4630      	mov	r0, r6
   162ba:	f7fa fb1f 	bl	108fc <mem_get>
   162be:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   162c0:	f100 021c 	add.w	r2, r0, #28
   162c4:	4601      	mov	r1, r0
   162c6:	1ce8      	adds	r0, r5, #3
   162c8:	f7fe fa2c 	bl	14724 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   162cc:	b170      	cbz	r0, 162ec <ull_conn_reset+0x48>
   162ce:	3045      	adds	r0, #69	; 0x45
   162d0:	d00c      	beq.n	162ec <ull_conn_reset+0x48>
   162d2:	4811      	ldr	r0, [pc, #68]	; (16318 <ull_conn_reset+0x74>)
   162d4:	f240 63f4 	movw	r3, #1780	; 0x6f4
   162d8:	4642      	mov	r2, r8
   162da:	4639      	mov	r1, r7
   162dc:	f00b fffc 	bl	222d8 <printk>
   162e0:	4040      	eors	r0, r0
   162e2:	f380 8811 	msr	BASEPRI, r0
   162e6:	f04f 0003 	mov.w	r0, #3
   162ea:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   162ec:	2300      	movs	r3, #0
   162ee:	67a3      	str	r3, [r4, #120]	; 0x78
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   162f0:	b14d      	cbz	r5, 16306 <ull_conn_reset+0x62>
	MFIFO_INIT(conn_tx);
   162f2:	480a      	ldr	r0, [pc, #40]	; (1631c <ull_conn_reset+0x78>)
	MFIFO_INIT(conn_ack);
   162f4:	490a      	ldr	r1, [pc, #40]	; (16320 <ull_conn_reset+0x7c>)
	conn_upd_curr = NULL;
   162f6:	4a0b      	ldr	r2, [pc, #44]	; (16324 <ull_conn_reset+0x80>)
	MFIFO_INIT(conn_tx);
   162f8:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   162fa:	804b      	strh	r3, [r1, #2]
}
   162fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_upd_curr = NULL;
   16300:	6013      	str	r3, [r2, #0]
	err = init_reset();
   16302:	f7fe bfcb 	b.w	1529c <init_reset>
   16306:	2501      	movs	r5, #1
   16308:	e7d3      	b.n	162b2 <ull_conn_reset+0xe>
   1630a:	bf00      	nop
   1630c:	2000e774 	.word	0x2000e774
   16310:	0002929c 	.word	0x0002929c
   16314:	000293ac 	.word	0x000293ac
   16318:	00028de0 	.word	0x00028de0
   1631c:	20000678 	.word	0x20000678
   16320:	20000614 	.word	0x20000614
   16324:	2000eb1c 	.word	0x2000eb1c

00016328 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   16328:	4b01      	ldr	r3, [pc, #4]	; (16330 <ull_conn_default_tx_octets_get+0x8>)
}
   1632a:	8818      	ldrh	r0, [r3, #0]
   1632c:	4770      	bx	lr
   1632e:	bf00      	nop
   16330:	2000f58a 	.word	0x2000f58a

00016334 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   16334:	4b01      	ldr	r3, [pc, #4]	; (1633c <ull_conn_default_tx_time_get+0x8>)
}
   16336:	8818      	ldrh	r0, [r3, #0]
   16338:	4770      	bx	lr
   1633a:	bf00      	nop
   1633c:	2000f58c 	.word	0x2000f58c

00016340 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   16340:	4b01      	ldr	r3, [pc, #4]	; (16348 <ull_conn_default_phy_tx_get+0x8>)
}
   16342:	7818      	ldrb	r0, [r3, #0]
   16344:	4770      	bx	lr
   16346:	bf00      	nop
   16348:	2000fb2b 	.word	0x2000fb2b

0001634c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1634c:	4b01      	ldr	r3, [pc, #4]	; (16354 <ull_conn_default_phy_rx_get+0x8>)
}
   1634e:	7818      	ldrb	r0, [r3, #0]
   16350:	4770      	bx	lr
   16352:	bf00      	nop
   16354:	2000fb2a 	.word	0x2000fb2a

00016358 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   16358:	688b      	ldr	r3, [r1, #8]
   1635a:	689b      	ldr	r3, [r3, #8]
	switch (lll->role) {
   1635c:	f893 c021 	ldrb.w	ip, [r3, #33]	; 0x21
   16360:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
   16364:	d10e      	bne.n	16384 <ull_conn_setup+0x2c>
{
   16366:	b510      	push	{r4, lr}
		LL_ASSERT(0);
   16368:	4a08      	ldr	r2, [pc, #32]	; (1638c <ull_conn_setup+0x34>)
   1636a:	4909      	ldr	r1, [pc, #36]	; (16390 <ull_conn_setup+0x38>)
   1636c:	4809      	ldr	r0, [pc, #36]	; (16394 <ull_conn_setup+0x3c>)
   1636e:	f240 331d 	movw	r3, #797	; 0x31d
   16372:	f00b ffb1 	bl	222d8 <printk>
   16376:	4040      	eors	r0, r0
   16378:	f380 8811 	msr	BASEPRI, r0
   1637c:	f04f 0003 	mov.w	r0, #3
   16380:	df02      	svc	2
}
   16382:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   16384:	460a      	mov	r2, r1
   16386:	3208      	adds	r2, #8
   16388:	f7ec b86a 	b.w	2460 <ull_slave_setup>
   1638c:	0002929c 	.word	0x0002929c
   16390:	00028e78 	.word	0x00028e78
   16394:	00028de0 	.word	0x00028de0

00016398 <ull_conn_rx>:
{
   16398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   1639c:	680b      	ldr	r3, [r1, #0]
   1639e:	88df      	ldrh	r7, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   163a0:	2f01      	cmp	r7, #1
{
   163a2:	b083      	sub	sp, #12
	if (handle >= CONFIG_BT_MAX_CONN) {
   163a4:	d866      	bhi.n	16474 <ull_conn_rx+0xdc>
   163a6:	460c      	mov	r4, r1
   163a8:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163aa:	463a      	mov	r2, r7
   163ac:	48b3      	ldr	r0, [pc, #716]	; (1667c <ull_conn_rx+0x2e4>)
   163ae:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   163b2:	f7fa faa3 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   163b6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   163b8:	42bb      	cmp	r3, r7
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163ba:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   163bc:	d159      	bne.n	16472 <ull_conn_rx+0xda>
	pdu_rx = (void *)(*rx)->pdu;
   163be:	6827      	ldr	r7, [r4, #0]
	switch (pdu_rx->ll_id) {
   163c0:	7f3b      	ldrb	r3, [r7, #28]
   163c2:	f003 0303 	and.w	r3, r3, #3
   163c6:	2b03      	cmp	r3, #3
   163c8:	d145      	bne.n	16456 <ull_conn_rx+0xbe>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   163ca:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
	opcode = pdu_rx->llctrl.opcode;
   163ce:	f897 801f 	ldrb.w	r8, [r7, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   163d2:	07d1      	lsls	r1, r2, #31
   163d4:	d561      	bpl.n	1649a <ull_conn_rx+0x102>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   163d6:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   163da:	2b00      	cmp	r3, #0
   163dc:	f2c0 80dc 	blt.w	16598 <ull_conn_rx+0x200>
	return (!conn->lll.role &&
   163e0:	0753      	lsls	r3, r2, #29
   163e2:	f140 830d 	bpl.w	16a00 <ull_conn_rx+0x668>
		 (conn->llcp_enc.refresh &&
   163e6:	f1b8 0f02 	cmp.w	r8, #2
   163ea:	f000 830d 	beq.w	16a08 <ull_conn_rx+0x670>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   163ee:	f1b8 0f0b 	cmp.w	r8, #11
   163f2:	f000 8510 	beq.w	16e16 <ull_conn_rx+0xa7e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   163f6:	f1b8 0f04 	cmp.w	r8, #4
   163fa:	f000 808b 	beq.w	16514 <ull_conn_rx+0x17c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   163fe:	f1b8 0f05 	cmp.w	r8, #5
   16402:	f000 8087 	beq.w	16514 <ull_conn_rx+0x17c>
   16406:	f1b8 0f06 	cmp.w	r8, #6
   1640a:	d07f      	beq.n	1650c <ull_conn_rx+0x174>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1640c:	f1b8 0f0d 	cmp.w	r8, #13
   16410:	f000 828d 	beq.w	1692e <ull_conn_rx+0x596>
   16414:	f1b8 0f11 	cmp.w	r8, #17
   16418:	d136      	bne.n	16488 <ull_conn_rx+0xf0>
		break;
#endif /* CONFIG_BT_CENTRAL */
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1641a:	7f7b      	ldrb	r3, [r7, #29]
   1641c:	2b03      	cmp	r3, #3
   1641e:	d179      	bne.n	16514 <ull_conn_rx+0x17c>
	switch (rej_ext_ind->reject_opcode) {
   16420:	f897 3020 	ldrb.w	r3, [r7, #32]
   16424:	3b03      	subs	r3, #3
   16426:	2b13      	cmp	r3, #19
   16428:	d81d      	bhi.n	16466 <ull_conn_rx+0xce>
   1642a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1642e:	04c1      	.short	0x04c1
   16430:	001c001c 	.word	0x001c001c
   16434:	001c001c 	.word	0x001c001c
   16438:	001c001c 	.word	0x001c001c
   1643c:	001c001c 	.word	0x001c001c
   16440:	001c001c 	.word	0x001c001c
   16444:	048e001c 	.word	0x048e001c
   16448:	001c001c 	.word	0x001c001c
   1644c:	001c001c 	.word	0x001c001c
   16450:	001c0462 	.word	0x001c0462
   16454:	0481      	.short	0x0481
	switch (pdu_rx->ll_id) {
   16456:	b99b      	cbnz	r3, 16480 <ull_conn_rx+0xe8>
		if (conn->llcp_enc.pause_rx) {
   16458:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   1645c:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_peer =
   1645e:	bf44      	itt	mi
   16460:	233d      	movmi	r3, #61	; 0x3d
   16462:	f880 313b 	strbmi.w	r3, [r0, #315]	; 0x13b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16466:	2301      	movs	r3, #1
   16468:	713b      	strb	r3, [r7, #4]
	return 0;
   1646a:	2000      	movs	r0, #0
}
   1646c:	b003      	add	sp, #12
   1646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16472:	6823      	ldr	r3, [r4, #0]
   16474:	2201      	movs	r2, #1
   16476:	711a      	strb	r2, [r3, #4]
		return 0;
   16478:	2000      	movs	r0, #0
}
   1647a:	b003      	add	sp, #12
   1647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   16480:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   16484:	07da      	lsls	r2, r3, #31
   16486:	d5f0      	bpl.n	1646a <ull_conn_rx+0xd2>
		conn->llcp_terminate.reason_peer =
   16488:	223d      	movs	r2, #61	; 0x3d
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1648a:	2301      	movs	r3, #1
		return 0;
   1648c:	2000      	movs	r0, #0
		conn->llcp_terminate.reason_peer =
   1648e:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16492:	713b      	strb	r3, [r7, #4]
}
   16494:	b003      	add	sp, #12
   16496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (opcode) {
   1649a:	f1b8 0f18 	cmp.w	r8, #24
   1649e:	d839      	bhi.n	16514 <ull_conn_rx+0x17c>
   164a0:	a301      	add	r3, pc, #4	; (adr r3, 164a8 <ull_conn_rx+0x110>)
   164a2:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
   164a6:	bf00      	nop
   164a8:	00016761 	.word	0x00016761
   164ac:	00016a21 	.word	0x00016a21
   164b0:	00016a09 	.word	0x00016a09
   164b4:	00016bf9 	.word	0x00016bf9
   164b8:	00016515 	.word	0x00016515
   164bc:	00016515 	.word	0x00016515
   164c0:	00016cd3 	.word	0x00016cd3
   164c4:	000169b5 	.word	0x000169b5
   164c8:	0001683b 	.word	0x0001683b
   164cc:	00016b8f 	.word	0x00016b8f
   164d0:	00016af9 	.word	0x00016af9
   164d4:	00016c95 	.word	0x00016c95
   164d8:	00016a89 	.word	0x00016a89
   164dc:	0001692f 	.word	0x0001692f
   164e0:	00016515 	.word	0x00016515
   164e4:	00016911 	.word	0x00016911
   164e8:	00016515 	.word	0x00016515
   164ec:	0001641b 	.word	0x0001641b
   164f0:	000168e1 	.word	0x000168e1
   164f4:	00016667 	.word	0x00016667
   164f8:	00016601 	.word	0x00016601
   164fc:	00016601 	.word	0x00016601
   16500:	000166ff 	.word	0x000166ff
   16504:	00016515 	.word	0x00016515
   16508:	00016685 	.word	0x00016685
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1650c:	7f7b      	ldrb	r3, [r7, #29]
   1650e:	2b01      	cmp	r3, #1
   16510:	f000 83e8 	beq.w	16ce4 <ull_conn_rx+0x94c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16514:	485a      	ldr	r0, [pc, #360]	; (16680 <ull_conn_rx+0x2e8>)
   16516:	f7fa f9bf 	bl	10898 <mem_acquire>
	if (!tx) {
   1651a:	2800      	cmp	r0, #0
   1651c:	f000 8589 	beq.w	17032 <ull_conn_rx+0xc9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16520:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   16522:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16526:	f043 0303 	orr.w	r3, r3, #3
   1652a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1652c:	2302      	movs	r3, #2
   1652e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   16530:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16534:	2207      	movs	r2, #7
   16536:	71c2      	strb	r2, [r0, #7]
	if (
   16538:	b1eb      	cbz	r3, 16576 <ull_conn_rx+0x1de>
	    !conn->llcp_enc.pause_tx &&
   1653a:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	    conn->tx_head &&
   1653e:	0794      	lsls	r4, r2, #30
   16540:	d419      	bmi.n	16576 <ull_conn_rx+0x1de>
	    !conn->llcp_phy.pause_tx &&
   16542:	f895 21b7 	ldrb.w	r2, [r5, #439]	; 0x1b7
   16546:	07d1      	lsls	r1, r2, #31
   16548:	d415      	bmi.n	16576 <ull_conn_rx+0x1de>
		if (conn->tx_head == conn->tx_data) {
   1654a:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
   1654e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16550:	bf04      	itt	eq
   16552:	681a      	ldreq	r2, [r3, #0]
   16554:	f8c5 21c8 	streq.w	r2, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16558:	f8d5 21c0 	ldr.w	r2, [r5, #448]	; 0x1c0
   1655c:	b982      	cbnz	r2, 16580 <ull_conn_rx+0x1e8>
			tx->next = conn->tx_head->next;
   1655e:	681a      	ldr	r2, [r3, #0]
   16560:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16562:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16564:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   16566:	e9c5 0070 	strd	r0, r0, [r5, #448]	; 0x1c0
	if (!tx->next) {
   1656a:	2b00      	cmp	r3, #0
   1656c:	f47f af7b 	bne.w	16466 <ull_conn_rx+0xce>
		conn->tx_data_last = tx;
   16570:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16574:	e777      	b.n	16466 <ull_conn_rx+0xce>
		if (!conn->tx_ctrl) {
   16576:	f8d5 21c0 	ldr.w	r2, [r5, #448]	; 0x1c0
   1657a:	2a00      	cmp	r2, #0
   1657c:	f000 8438 	beq.w	16df0 <ull_conn_rx+0xa58>
	tx->next = conn->tx_ctrl_last->next;
   16580:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   16584:	681a      	ldr	r2, [r3, #0]
   16586:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16588:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1658a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1658c:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   16590:	2b00      	cmp	r3, #0
   16592:	f47f af68 	bne.w	16466 <ull_conn_rx+0xce>
   16596:	e7eb      	b.n	16570 <ull_conn_rx+0x1d8>
	       (conn->lll.role &&
   16598:	0756      	lsls	r6, r2, #29
   1659a:	f140 8433 	bpl.w	16e04 <ull_conn_rx+0xa6c>
		 (conn->llcp_enc.refresh &&
   1659e:	f1b8 0f02 	cmp.w	r8, #2
   165a2:	f000 8231 	beq.w	16a08 <ull_conn_rx+0x670>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   165a6:	f1b8 0f0b 	cmp.w	r8, #11
   165aa:	f000 8439 	beq.w	16e20 <ull_conn_rx+0xa88>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   165ae:	f1b8 0f03 	cmp.w	r8, #3
   165b2:	f000 8326 	beq.w	16c02 <ull_conn_rx+0x86a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   165b6:	f1b8 0f06 	cmp.w	r8, #6
   165ba:	f47f af27 	bne.w	1640c <ull_conn_rx+0x74>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   165be:	7f7b      	ldrb	r3, [r7, #29]
   165c0:	2b01      	cmp	r3, #1
   165c2:	d1a7      	bne.n	16514 <ull_conn_rx+0x17c>
			if ((conn->llcp_req != conn->llcp_ack) &&
   165c4:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   165c8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   165cc:	4283      	cmp	r3, r0
   165ce:	f000 87e7 	beq.w	175a0 <ull_conn_rx+0x1208>
   165d2:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   165d6:	2b03      	cmp	r3, #3
   165d8:	d19c      	bne.n	16514 <ull_conn_rx+0x17c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   165da:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   165de:	f36f 0301 	bfc	r3, #0, #2
   165e2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (conn->llcp_enc.refresh) {
   165e6:	0753      	lsls	r3, r2, #29
   165e8:	d505      	bpl.n	165f6 <ull_conn_rx+0x25e>
			conn->llcp_enc.refresh = 0U;
   165ea:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   165ee:	2316      	movs	r3, #22
			conn->llcp_enc.refresh = 0U;
   165f0:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   165f4:	713b      	strb	r3, [r7, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   165f6:	2300      	movs	r3, #0
   165f8:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   165fc:	4618      	mov	r0, r3
		break;
   165fe:	e73c      	b.n	1647a <ull_conn_rx+0xe2>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   16600:	7f7b      	ldrb	r3, [r7, #29]
   16602:	2b09      	cmp	r3, #9
   16604:	d186      	bne.n	16514 <ull_conn_rx+0x17c>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   16606:	f1b8 0f14 	cmp.w	r8, #20
   1660a:	f000 8451 	beq.w	16eb0 <ull_conn_rx+0xb18>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1660e:	f890 21a4 	ldrb.w	r2, [r0, #420]	; 0x1a4
	if (/* Local idle, and Peer request then complete the Peer procedure
   16612:	f890 31a5 	ldrb.w	r3, [r0, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   16616:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   1661a:	f8b0 905c 	ldrh.w	r9, [r0, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   1661e:	f8b0 a062 	ldrh.w	sl, [r0, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   16622:	f8b0 b060 	ldrh.w	fp, [r0, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   16626:	4293      	cmp	r3, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   16628:	468e      	mov	lr, r1
	if (/* Local idle, and Peer request then complete the Peer procedure
   1662a:	f001 80b6 	beq.w	1779a <ull_conn_rx+0x1402>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1662e:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
	struct node_tx *tx = NULL;
   16632:	2300      	movs	r3, #0
	       tx) ||
   16634:	f001 0107 	and.w	r1, r1, #7
   16638:	2902      	cmp	r1, #2
   1663a:	f000 8450 	beq.w	16ede <ull_conn_rx+0xb46>
   1663e:	f897 801f 	ldrb.w	r8, [r7, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   16642:	f1b8 0f15 	cmp.w	r8, #21
   16646:	f43f af10 	beq.w	1646a <ull_conn_rx+0xd2>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1664a:	4618      	mov	r0, r3
   1664c:	490c      	ldr	r1, [pc, #48]	; (16680 <ull_conn_rx+0x2e8>)
   1664e:	f7fa f93d 	bl	108cc <mem_release>
			if (conn->llcp_length.state ==
   16652:	f895 31a6 	ldrb.w	r3, [r5, #422]	; 0x1a6
   16656:	f003 0307 	and.w	r3, r3, #7
   1665a:	2b04      	cmp	r3, #4
   1665c:	f47f af05 	bne.w	1646a <ull_conn_rx+0xd2>
				return -EBUSY;
   16660:	f06f 000f 	mvn.w	r0, #15
   16664:	e709      	b.n	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   16666:	7f7a      	ldrb	r2, [r7, #29]
   16668:	2a01      	cmp	r2, #1
   1666a:	f47f af53 	bne.w	16514 <ull_conn_rx+0x17c>
		conn->procedure_expire = 0U;
   1666e:	2300      	movs	r3, #0
   16670:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
	int nack = 0;
   16674:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16676:	713a      	strb	r2, [r7, #4]
		break;
   16678:	e6ff      	b.n	1647a <ull_conn_rx+0xe2>
   1667a:	bf00      	nop
   1667c:	2000e774 	.word	0x2000e774
   16680:	2000eba0 	.word	0x2000eba0
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   16684:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16688:	2b00      	cmp	r3, #0
   1668a:	f6bf af43 	bge.w	16514 <ull_conn_rx+0x17c>
   1668e:	7f7b      	ldrb	r3, [r7, #29]
   16690:	2b05      	cmp	r3, #5
   16692:	f47f af3f 	bne.w	16514 <ull_conn_rx+0x17c>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   16696:	f897 1020 	ldrb.w	r1, [r7, #32]
   1669a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   1669e:	ea41 0003 	orr.w	r0, r1, r3
   166a2:	f010 0007 	ands.w	r0, r0, #7
   166a6:	f040 8655 	bne.w	17354 <ull_conn_rx+0xfbc>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   166aa:	f895 21b4 	ldrb.w	r2, [r5, #436]	; 0x1b4
   166ae:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   166b2:	4293      	cmp	r3, r2
   166b4:	f43f aed7 	beq.w	16466 <ull_conn_rx+0xce>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   166b8:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   166bc:	f003 0303 	and.w	r3, r3, #3
   166c0:	2b02      	cmp	r3, #2
   166c2:	f47f aed0 	bne.w	16466 <ull_conn_rx+0xce>
		conn->llcp_phy.pause_tx = 0U;
   166c6:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   166ca:	f885 21b5 	strb.w	r2, [r5, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   166ce:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->procedure_expire = 0U;
   166d2:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->llcp_phy.pause_tx = 0U;
   166d6:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   166da:	4611      	mov	r1, r2
   166dc:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   166e0:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
		if (!conn->llcp_phy.cmd) {
   166e4:	f013 0304 	ands.w	r3, r3, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   166e8:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   166ec:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   166f0:	f041 8098 	bne.w	17824 <ull_conn_rx+0x148c>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   166f4:	6822      	ldr	r2, [r4, #0]
   166f6:	2101      	movs	r1, #1
   166f8:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   166fa:	4618      	mov	r0, r3
   166fc:	e6bd      	b.n	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   166fe:	7f7b      	ldrb	r3, [r7, #29]
   16700:	2b03      	cmp	r3, #3
   16702:	f47f af07 	bne.w	16514 <ull_conn_rx+0x17c>
		if (!conn->lll.role) {
   16706:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1670a:	2b00      	cmp	r3, #0
   1670c:	f2c0 8495 	blt.w	1703a <ull_conn_rx+0xca2>
			if ((conn->llcp_phy.ack !=
   16710:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
			     conn->llcp_phy.req) &&
   16714:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
			if ((conn->llcp_phy.ack !=
   16718:	4288      	cmp	r0, r1
   1671a:	d007      	beq.n	1672c <ull_conn_rx+0x394>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1671c:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
   16720:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   16724:	3a01      	subs	r2, #1
   16726:	2a02      	cmp	r2, #2
   16728:	f240 868c 	bls.w	17444 <ull_conn_rx+0x10ac>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1672c:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   16730:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   16734:	1a9b      	subs	r3, r3, r2
   16736:	f003 0303 	and.w	r3, r3, #3
   1673a:	2b02      	cmp	r3, #2
   1673c:	f000 8603 	beq.w	17346 <ull_conn_rx+0xfae>
				     LLCP_ENCRYPTION)) ||
   16740:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   16744:	f895 317d 	ldrb.w	r3, [r5, #381]	; 0x17d
   16748:	429a      	cmp	r2, r3
   1674a:	f000 869c 	beq.w	17486 <ull_conn_rx+0x10ee>
				nack = reject_ext_ind_send(conn, *rx,
   1674e:	232a      	movs	r3, #42	; 0x2a
   16750:	2216      	movs	r2, #22
   16752:	4639      	mov	r1, r7
   16754:	4628      	mov	r0, r5
}
   16756:	b003      	add	sp, #12
   16758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1675c:	f7fe bf00 	b.w	15560 <reject_ext_ind_send>
		if (!conn->lll.role ||
   16760:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16764:	2b00      	cmp	r3, #0
   16766:	f6bf aed5 	bge.w	16514 <ull_conn_rx+0x17c>
   1676a:	7f7b      	ldrb	r3, [r7, #29]
   1676c:	2b0c      	cmp	r3, #12
   1676e:	f47f aed1 	bne.w	16514 <ull_conn_rx+0x17c>
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   16772:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   16774:	f8b7 1029 	ldrh.w	r1, [r7, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   16778:	1acb      	subs	r3, r1, r3
   1677a:	0418      	lsls	r0, r3, #16
   1677c:	f100 867f 	bmi.w	1747e <ull_conn_rx+0x10e6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16780:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   16784:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   16788:	1a9b      	subs	r3, r3, r2
   1678a:	f003 0303 	and.w	r3, r3, #3
   1678e:	2b02      	cmp	r3, #2
   16790:	f000 866d 	beq.w	1746e <ull_conn_rx+0x10d6>
	if (!conn_upd_curr) {
   16794:	4bd4      	ldr	r3, [pc, #848]	; (16ae8 <ull_conn_rx+0x750>)
   16796:	681a      	ldr	r2, [r3, #0]
   16798:	2a00      	cmp	r2, #0
   1679a:	f000 8743 	beq.w	17624 <ull_conn_rx+0x128c>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1679e:	f897 3020 	ldrb.w	r3, [r7, #32]
   167a2:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   167a6:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
   167aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
   167ae:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   167b2:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   167b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   167ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   167be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   167c2:	f8a5 3114 	strh.w	r3, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   167c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   167ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   167ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   167d2:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   167d6:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   167da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   167de:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   167e2:	f8a5 10ec 	strh.w	r1, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   167e6:	f023 030f 	bic.w	r3, r3, #15
   167ea:	f043 0308 	orr.w	r3, r3, #8
   167ee:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
	conn->llcp_cu.ack--;
   167f2:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   167f6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   167fa:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
	conn->llcp_cu.ack--;
   167fe:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   16800:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
	conn->llcp_cu.ack--;
   16804:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
	link->mem = conn->llcp_rx;
   16808:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   1680a:	6822      	ldr	r2, [r4, #0]
   1680c:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   1680e:	6822      	ldr	r2, [r4, #0]
   16810:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
	*rx = NULL;
   16814:	2300      	movs	r3, #0
   16816:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16818:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   1681c:	f895 317d 	ldrb.w	r3, [r5, #381]	; 0x17d
   16820:	4293      	cmp	r3, r2
   16822:	f43f aee8 	beq.w	165f6 <ull_conn_rx+0x25e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   16826:	f895 317e 	ldrb.w	r3, [r5, #382]	; 0x17e
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1682a:	f003 0307 	and.w	r3, r3, #7
   1682e:	2b04      	cmp	r3, #4
   16830:	f47f aee1 	bne.w	165f6 <ull_conn_rx+0x25e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16834:	f885 217d 	strb.w	r2, [r5, #381]	; 0x17d
		if (err) {
   16838:	e6dd      	b.n	165f6 <ull_conn_rx+0x25e>
		if (!conn->lll.role ||
   1683a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1683e:	2b00      	cmp	r3, #0
   16840:	f6bf ae68 	bge.w	16514 <ull_conn_rx+0x17c>
   16844:	7f7e      	ldrb	r6, [r7, #29]
   16846:	2e09      	cmp	r6, #9
   16848:	f47f ae64 	bne.w	16514 <ull_conn_rx+0x17c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1684c:	48a7      	ldr	r0, [pc, #668]	; (16aec <ull_conn_rx+0x754>)
   1684e:	f7fa f823 	bl	10898 <mem_acquire>
	if (!tx) {
   16852:	4604      	mov	r4, r0
   16854:	2800      	cmp	r0, #0
   16856:	f000 83ec 	beq.w	17032 <ull_conn_rx+0xc9a>
	       (features[1] << 8) | (features[2] << 16);
   1685a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   1685e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16862:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16866:	041b      	lsls	r3, r3, #16
   16868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1686c:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16870:	4313      	orrs	r3, r2
   16872:	4a9f      	ldr	r2, [pc, #636]	; (16af0 <ull_conn_rx+0x758>)
   16874:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16876:	400b      	ands	r3, r1
   16878:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1687c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16880:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16884:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
   16888:	041b      	lsls	r3, r3, #16
   1688a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1688e:	f897 1020 	ldrb.w	r1, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16892:	430b      	orrs	r3, r1
   16894:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   16896:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1689a:	4996      	ldr	r1, [pc, #600]	; (16af4 <ull_conn_rx+0x75c>)
	conn->common.fex_valid = 1U;
   1689c:	f042 0201 	orr.w	r2, r2, #1
   168a0:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168a4:	7902      	ldrb	r2, [r0, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   168a6:	4019      	ands	r1, r3
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168a8:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp_feature.features_peer =
   168ac:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168b0:	7102      	strb	r2, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   168b2:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   168b4:	7146      	strb	r6, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   168b6:	71c6      	strb	r6, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   168b8:	2100      	movs	r1, #0
   168ba:	4410      	add	r0, r2
   168bc:	f00e f9f3 	bl	24ca6 <memset>
	feat_result &= 0xFF;
   168c0:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
	dst[2] = val >> 16;
   168c4:	2601      	movs	r6, #1
   168c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   168ca:	2241      	movs	r2, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
   168cc:	4628      	mov	r0, r5
   168ce:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   168d0:	7223      	strb	r3, [r4, #8]
	dst[2] = val >> 16;
   168d2:	72a6      	strb	r6, [r4, #10]
   168d4:	4621      	mov	r1, r4
   168d6:	f7fe fe93 	bl	15600 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   168da:	713e      	strb	r6, [r7, #4]
	return 0;
   168dc:	2000      	movs	r0, #0
   168de:	e5cc      	b.n	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   168e0:	7f7c      	ldrb	r4, [r7, #29]
   168e2:	2c01      	cmp	r4, #1
   168e4:	f47f ae16 	bne.w	16514 <ull_conn_rx+0x17c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   168e8:	4880      	ldr	r0, [pc, #512]	; (16aec <ull_conn_rx+0x754>)
   168ea:	f7f9 ffd5 	bl	10898 <mem_acquire>
	if (!tx) {
   168ee:	4601      	mov	r1, r0
   168f0:	2800      	cmp	r0, #0
   168f2:	f000 839e 	beq.w	17032 <ull_conn_rx+0xc9a>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168f6:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   168f8:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168fa:	f043 0303 	orr.w	r3, r3, #3
   168fe:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16900:	2313      	movs	r3, #19
   16902:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16904:	4628      	mov	r0, r5
   16906:	f7fe fe7b 	bl	15600 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1690a:	713c      	strb	r4, [r7, #4]
	return 0;
   1690c:	2000      	movs	r0, #0
   1690e:	e5b4      	b.n	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16910:	7f7b      	ldrb	r3, [r7, #29]
   16912:	2b18      	cmp	r3, #24
   16914:	f47f adfe 	bne.w	16514 <ull_conn_rx+0x17c>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   16918:	4e73      	ldr	r6, [pc, #460]	; (16ae8 <ull_conn_rx+0x750>)
   1691a:	6833      	ldr	r3, [r6, #0]
   1691c:	2b00      	cmp	r3, #0
   1691e:	f000 8291 	beq.w	16e44 <ull_conn_rx+0xaac>
   16922:	4298      	cmp	r0, r3
   16924:	f000 828e 	beq.w	16e44 <ull_conn_rx+0xaac>
			nack = reject_ext_ind_send(conn, *rx,
   16928:	2320      	movs	r3, #32
   1692a:	220f      	movs	r2, #15
   1692c:	e711      	b.n	16752 <ull_conn_rx+0x3ba>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   1692e:	7f7b      	ldrb	r3, [r7, #29]
   16930:	2b02      	cmp	r3, #2
   16932:	f47f adef 	bne.w	16514 <ull_conn_rx+0x17c>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   16936:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   1693a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1693e:	4293      	cmp	r3, r2
   16940:	d004      	beq.n	1694c <ull_conn_rx+0x5b4>
   16942:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   16946:	2b03      	cmp	r3, #3
   16948:	f000 8583 	beq.w	17452 <ull_conn_rx+0x10ba>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1694c:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   16950:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   16954:	428b      	cmp	r3, r1
   16956:	f000 8336 	beq.w	16fc6 <ull_conn_rx+0xc2e>
		rej_ext_ind->error_code = rej_ind->error_code;
   1695a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1695e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16962:	2a23      	cmp	r2, #35	; 0x23
   16964:	d012      	beq.n	1698c <ull_conn_rx+0x5f4>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16966:	f885 11b5 	strb.w	r1, [r5, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   1696a:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1696e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16972:	f36f 0100 	bfc	r1, #0, #1
   16976:	f885 11b7 	strb.w	r1, [r5, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   1697a:	2100      	movs	r1, #0
   1697c:	f8a5 10cc 	strh.w	r1, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16980:	f3c3 0102 	ubfx	r1, r3, #0, #3
   16984:	f361 1306 	bfi	r3, r1, #4, #3
   16988:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   1698c:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   16990:	075e      	lsls	r6, r3, #29
   16992:	f57f ad68 	bpl.w	16466 <ull_conn_rx+0xce>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16996:	2319      	movs	r3, #25
   16998:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   1699a:	773a      	strb	r2, [r7, #28]
	p->tx = conn->lll.phy_tx;
   1699c:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   169a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   169a4:	777b      	strb	r3, [r7, #29]
	p->rx = conn->lll.phy_rx;
   169a6:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   169aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   169ae:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   169b0:	77bb      	strb	r3, [r7, #30]
	if (err) {
   169b2:	e562      	b.n	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   169b4:	7f7b      	ldrb	r3, [r7, #29]
   169b6:	2b02      	cmp	r3, #2
   169b8:	f47f adac 	bne.w	16514 <ull_conn_rx+0x17c>
		} else if ((conn->llcp_conn_param.ack !=
   169bc:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   169c0:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   169c4:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   169c6:	f897 2020 	ldrb.w	r2, [r7, #32]
		} else if ((conn->llcp_conn_param.ack !=
   169ca:	d002      	beq.n	169d2 <ull_conn_rx+0x63a>
			    conn->llcp_conn_param.req) &&
   169cc:	2a0f      	cmp	r2, #15
   169ce:	f000 8465 	beq.w	1729c <ull_conn_rx+0xf04>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   169d2:	f895 31a4 	ldrb.w	r3, [r5, #420]	; 0x1a4
   169d6:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
   169da:	4299      	cmp	r1, r3
   169dc:	d002      	beq.n	169e4 <ull_conn_rx+0x64c>
   169de:	2a14      	cmp	r2, #20
   169e0:	f000 8524 	beq.w	1742c <ull_conn_rx+0x1094>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   169e4:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   169e8:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   169ec:	428b      	cmp	r3, r1
   169ee:	d002      	beq.n	169f6 <ull_conn_rx+0x65e>
   169f0:	2a16      	cmp	r2, #22
   169f2:	f000 858b 	beq.w	1750c <ull_conn_rx+0x1174>
			switch (llctrl->unknown_rsp.type) {
   169f6:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   169f8:	bf04      	itt	eq
   169fa:	2301      	moveq	r3, #1
   169fc:	713b      	strbeq	r3, [r7, #4]
				break;
   169fe:	e5fa      	b.n	165f6 <ull_conn_rx+0x25e>
		((!conn->llcp_enc.refresh &&
   16a00:	f1b8 0f02 	cmp.w	r8, #2
   16a04:	f47f acfb 	bne.w	163fe <ull_conn_rx+0x66>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   16a08:	7f7b      	ldrb	r3, [r7, #29]
   16a0a:	2b02      	cmp	r3, #2
   16a0c:	f47f ad82 	bne.w	16514 <ull_conn_rx+0x17c>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   16a10:	f897 2020 	ldrb.w	r2, [r7, #32]
   16a14:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a18:	2301      	movs	r3, #1
	int nack = 0;
   16a1a:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a1c:	713b      	strb	r3, [r7, #4]
}
   16a1e:	e52c      	b.n	1647a <ull_conn_rx+0xe2>
		if (!conn->lll.role ||
   16a20:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16a24:	2b00      	cmp	r3, #0
   16a26:	f6bf ad75 	bge.w	16514 <ull_conn_rx+0x17c>
   16a2a:	7f7b      	ldrb	r3, [r7, #29]
   16a2c:	2b08      	cmp	r3, #8
   16a2e:	f47f ad71 	bne.w	16514 <ull_conn_rx+0x17c>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   16a32:	f8b7 4025 	ldrh.w	r4, [r7, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16a36:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   16a38:	1ae3      	subs	r3, r4, r3
   16a3a:	041a      	lsls	r2, r3, #16
   16a3c:	f100 851f 	bmi.w	1747e <ull_conn_rx+0x10e6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16a40:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   16a44:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
   16a48:	1a9b      	subs	r3, r3, r2
   16a4a:	f003 0303 	and.w	r3, r3, #3
   16a4e:	2b02      	cmp	r3, #2
   16a50:	f000 850d 	beq.w	1746e <ull_conn_rx+0x10d6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   16a54:	2205      	movs	r2, #5
   16a56:	f107 0120 	add.w	r1, r7, #32
   16a5a:	30ed      	adds	r0, #237	; 0xed
   16a5c:	f00e f8f8 	bl	24c50 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   16a60:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   16a64:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   16a68:	f8a5 40f2 	strh.w	r4, [r5, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   16a6c:	f36f 0200 	bfc	r2, #0, #1
   16a70:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   16a74:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   16a76:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a78:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   16a7a:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	conn->llcp_ack -= 2U;
   16a7e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	int nack = 0;
   16a82:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a84:	713a      	strb	r2, [r7, #4]
		if (err) {
   16a86:	e4f8      	b.n	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   16a88:	7f7c      	ldrb	r4, [r7, #29]
   16a8a:	2c06      	cmp	r4, #6
   16a8c:	f47f ad42 	bne.w	16514 <ull_conn_rx+0x17c>
	if (!conn->llcp_version.tx) {
   16a90:	f890 3132 	ldrb.w	r3, [r0, #306]	; 0x132
   16a94:	07d9      	lsls	r1, r3, #31
   16a96:	f140 8347 	bpl.w	17128 <ull_conn_rx+0xd90>
	} else if (!conn->llcp_version.rx) {
   16a9a:	f013 0302 	ands.w	r3, r3, #2
   16a9e:	f47f ace2 	bne.w	16466 <ull_conn_rx+0xce>
		conn->llcp_version.ack = conn->llcp_version.req;
   16aa2:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
   16aa6:	f880 2131 	strb.w	r2, [r0, #305]	; 0x131
		conn->procedure_expire = 0U;
   16aaa:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
	conn->llcp_version.version_number = v->version_number;
   16aae:	f897 3020 	ldrb.w	r3, [r7, #32]
   16ab2:	f885 3133 	strb.w	r3, [r5, #307]	; 0x133
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16ab6:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
   16aba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   16abe:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16ac2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16ac6:	f8a5 2134 	strh.w	r2, [r5, #308]	; 0x134
		sys_le16_to_cpu(v->sub_version_number);
   16aca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   16ace:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   16ad2:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   16ad6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   16ada:	f8a5 2136 	strh.w	r2, [r5, #310]	; 0x136
	conn->llcp_version.rx = 1U;
   16ade:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	return 0;
   16ae2:	2000      	movs	r0, #0
   16ae4:	e4c9      	b.n	1647a <ull_conn_rx+0xe2>
   16ae6:	bf00      	nop
   16ae8:	2000eb1c 	.word	0x2000eb1c
   16aec:	2000eba0 	.word	0x2000eba0
   16af0:	fffe30d0 	.word	0xfffe30d0
   16af4:	0001ff7f 	.word	0x0001ff7f
		if (!conn->lll.role ||
   16af8:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16afc:	2b00      	cmp	r3, #0
   16afe:	f6bf ad09 	bge.w	16514 <ull_conn_rx+0x17c>
   16b02:	7f7c      	ldrb	r4, [r7, #29]
   16b04:	2c01      	cmp	r4, #1
   16b06:	f47f ad05 	bne.w	16514 <ull_conn_rx+0x17c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16b0a:	48cb      	ldr	r0, [pc, #812]	; (16e38 <ull_conn_rx+0xaa0>)
   16b0c:	f7f9 fec4 	bl	10898 <mem_acquire>
		if (!tx) {
   16b10:	2800      	cmp	r0, #0
   16b12:	f000 828e 	beq.w	17032 <ull_conn_rx+0xc9a>
	conn->llcp_enc.pause_rx = 1U;
   16b16:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
   16b1a:	f022 0205 	bic.w	r2, r2, #5
   16b1e:	f042 0205 	orr.w	r2, r2, #5
   16b22:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   16b26:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
   16b2a:	f36f 02c3 	bfc	r2, #3, #1
   16b2e:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16b32:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16b34:	7144      	strb	r4, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16b36:	f042 0203 	orr.w	r2, r2, #3
   16b3a:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   16b3c:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16b40:	210b      	movs	r1, #11
   16b42:	71c1      	strb	r1, [r0, #7]
	if (
   16b44:	2a00      	cmp	r2, #0
   16b46:	f000 81a8 	beq.w	16e9a <ull_conn_rx+0xb02>
	    !conn->llcp_enc.pause_tx &&
   16b4a:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
	    conn->tx_head &&
   16b4e:	078e      	lsls	r6, r1, #30
   16b50:	f100 81a3 	bmi.w	16e9a <ull_conn_rx+0xb02>
	    !conn->llcp_phy.pause_tx &&
   16b54:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
   16b58:	07cc      	lsls	r4, r1, #31
   16b5a:	f100 819e 	bmi.w	16e9a <ull_conn_rx+0xb02>
		if (conn->tx_head == conn->tx_data) {
   16b5e:	f8d5 11c8 	ldr.w	r1, [r5, #456]	; 0x1c8
   16b62:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   16b64:	bf04      	itt	eq
   16b66:	6811      	ldreq	r1, [r2, #0]
   16b68:	f8c5 11c8 	streq.w	r1, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16b6c:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   16b70:	2900      	cmp	r1, #0
   16b72:	f000 8650 	beq.w	17816 <ull_conn_rx+0x147e>
	tx->next = conn->tx_ctrl_last->next;
   16b76:	f8d5 21c4 	ldr.w	r2, [r5, #452]	; 0x1c4
   16b7a:	6811      	ldr	r1, [r2, #0]
   16b7c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16b7e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   16b80:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   16b84:	6802      	ldr	r2, [r0, #0]
   16b86:	2a00      	cmp	r2, #0
   16b88:	f47f ac6d 	bne.w	16466 <ull_conn_rx+0xce>
   16b8c:	e4f0      	b.n	16570 <ull_conn_rx+0x1d8>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   16b8e:	7f7b      	ldrb	r3, [r7, #29]
   16b90:	2b09      	cmp	r3, #9
   16b92:	f47f acbf 	bne.w	16514 <ull_conn_rx+0x17c>
	       (features[1] << 8) | (features[2] << 16);
   16b96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16b9a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16b9e:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16ba2:	48a6      	ldr	r0, [pc, #664]	; (16e3c <ull_conn_rx+0xaa4>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16ba4:	4ca6      	ldr	r4, [pc, #664]	; (16e40 <ull_conn_rx+0xaa8>)
	       (features[1] << 8) | (features[2] << 16);
   16ba6:	041b      	lsls	r3, r3, #16
   16ba8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16bac:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16bae:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16bb2:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16bb4:	4013      	ands	r3, r2
   16bb6:	f3c3 0310 	ubfx	r3, r3, #0, #17
   16bba:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16bbe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   16bc2:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16bca:	0412      	lsls	r2, r2, #16
   16bcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16bd0:	431a      	orrs	r2, r3
	conn->common.fex_valid = 1U;
   16bd2:	f895 10dc 	ldrb.w	r1, [r5, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   16bd6:	4302      	orrs	r2, r0
	conn->procedure_expire = 0U;
   16bd8:	2300      	movs	r3, #0
	conn->llcp_feature.ack = conn->llcp_feature.req;
   16bda:	f895 0124 	ldrb.w	r0, [r5, #292]	; 0x124
   16bde:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16be2:	4014      	ands	r4, r2
	conn->common.fex_valid = 1U;
   16be4:	f041 0201 	orr.w	r2, r1, #1
	conn->llcp_feature.features_peer =
   16be8:	f8c5 412c 	str.w	r4, [r5, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   16bec:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	conn->procedure_expire = 0U;
   16bf0:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   16bf4:	4618      	mov	r0, r3
}
   16bf6:	e440      	b.n	1647a <ull_conn_rx+0xe2>
		if (!conn->lll.role ||
   16bf8:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16bfc:	2b00      	cmp	r3, #0
   16bfe:	f6bf ac89 	bge.w	16514 <ull_conn_rx+0x17c>
   16c02:	7f7b      	ldrb	r3, [r7, #29]
   16c04:	2b17      	cmp	r3, #23
   16c06:	f47f ac85 	bne.w	16514 <ull_conn_rx+0x17c>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   16c0a:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   16c0e:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   16c12:	1a9b      	subs	r3, r3, r2
   16c14:	f003 0303 	and.w	r3, r3, #3
   16c18:	2b02      	cmp	r3, #2
   16c1a:	f000 85c5 	beq.w	177a8 <ull_conn_rx+0x1410>
		memcpy(&conn->llcp_enc.rand[0],
   16c1e:	2208      	movs	r2, #8
   16c20:	f107 0120 	add.w	r1, r7, #32
   16c24:	f205 1061 	addw	r0, r5, #353	; 0x161
   16c28:	f00e f812 	bl	24c50 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   16c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16c30:	f885 315f 	strb.w	r3, [r5, #351]	; 0x15f
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   16c34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16c38:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   16c3c:	f885 3160 	strb.w	r3, [r5, #352]	; 0x160
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c40:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16c42:	2301      	movs	r3, #1
   16c44:	f363 0201 	bfi	r2, r3, #0, #2
   16c48:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c4c:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   16c4e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   16c52:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   16c54:	3b02      	subs	r3, #2
   16c56:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   16c5a:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   16c5c:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
		memcpy(&conn->llcp.encryption.skd[0],
   16c60:	f105 00fa 	add.w	r0, r5, #250	; 0xfa
   16c64:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   16c68:	f00d fff2 	bl	24c50 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   16c6c:	2204      	movs	r2, #4
   16c6e:	f107 0132 	add.w	r1, r7, #50	; 0x32
   16c72:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16c76:	f00d ffeb 	bl	24c50 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   16c7a:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   16c7e:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
   16c82:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   16c86:	f043 0301 	orr.w	r3, r3, #1
   16c8a:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
	int nack = 0;
   16c8e:	2000      	movs	r0, #0
		break;
   16c90:	f7ff bbf3 	b.w	1647a <ull_conn_rx+0xe2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16c94:	7f7b      	ldrb	r3, [r7, #29]
   16c96:	2b01      	cmp	r3, #1
   16c98:	f47f ac3c 	bne.w	16514 <ull_conn_rx+0x17c>
	} else if (!conn->lll.role) {
   16c9c:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16ca0:	2b00      	cmp	r3, #0
   16ca2:	f2c0 80c1 	blt.w	16e28 <ull_conn_rx+0xa90>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16ca6:	4864      	ldr	r0, [pc, #400]	; (16e38 <ull_conn_rx+0xaa0>)
   16ca8:	f7f9 fdf6 	bl	10898 <mem_acquire>
		if (!tx) {
   16cac:	2800      	cmp	r0, #0
   16cae:	f000 81c0 	beq.w	17032 <ull_conn_rx+0xc9a>
	conn->llcp_enc.pause_rx = 1U;
   16cb2:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   16cb6:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   16cba:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   16cbe:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   16cc2:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16cc6:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   16cc8:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ccc:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16cce:	7141      	strb	r1, [r0, #5]
   16cd0:	e731      	b.n	16b36 <ull_conn_rx+0x79e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16cd2:	7f7b      	ldrb	r3, [r7, #29]
   16cd4:	2b01      	cmp	r3, #1
   16cd6:	f47f ac1d 	bne.w	16514 <ull_conn_rx+0x17c>
		if (conn->lll.role) {
   16cda:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16cde:	2b00      	cmp	r3, #0
   16ce0:	f6ff ac70 	blt.w	165c4 <ull_conn_rx+0x22c>
			conn->llcp_enc.pause_rx = 0U;
   16ce4:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
   16ce8:	f022 0203 	bic.w	r2, r2, #3
   16cec:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
   16cf0:	e479      	b.n	165e6 <ull_conn_rx+0x24e>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   16cf2:	f895 21a4 	ldrb.w	r2, [r5, #420]	; 0x1a4
   16cf6:	f895 31a5 	ldrb.w	r3, [r5, #421]	; 0x1a5
   16cfa:	4293      	cmp	r3, r2
   16cfc:	f43f abb3 	beq.w	16466 <ull_conn_rx+0xce>
	conn->procedure_expire = 0U;
   16d00:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16d02:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   16d04:	f885 21a5 	strb.w	r2, [r5, #421]	; 0x1a5
	conn->procedure_expire = 0U;
   16d08:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16d0c:	7779      	strb	r1, [r7, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16d0e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16d12:	f8b5 005c 	ldrh.w	r0, [r5, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16d16:	843a      	strh	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16d18:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16d1a:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16d1e:	77f9      	strb	r1, [r7, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16d20:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
   16d24:	8479      	strh	r1, [r7, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16d26:	84b8      	strh	r0, [r7, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16d28:	84fa      	strh	r2, [r7, #38]	; 0x26
	int nack = 0;
   16d2a:	4618      	mov	r0, r3
   16d2c:	f7ff bba5 	b.w	1647a <ull_conn_rx+0xe2>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16d30:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   16d34:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   16d38:	428b      	cmp	r3, r1
   16d3a:	f43f ab94 	beq.w	16466 <ull_conn_rx+0xce>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16d3e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16d42:	2a23      	cmp	r2, #35	; 0x23
   16d44:	f47f ae0f 	bne.w	16966 <ull_conn_rx+0x5ce>
   16d48:	e620      	b.n	1698c <ull_conn_rx+0x5f4>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16d4a:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   16d4e:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   16d52:	429a      	cmp	r2, r3
   16d54:	f43f ab87 	beq.w	16466 <ull_conn_rx+0xce>
	if (!lll->role && (rej_ext_ind->error_code ==
   16d58:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   16d5c:	2a00      	cmp	r2, #0
   16d5e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16d62:	f2c0 8579 	blt.w	17858 <ull_conn_rx+0x14c0>
   16d66:	2a1a      	cmp	r2, #26
   16d68:	f000 85af 	beq.w	178ca <ull_conn_rx+0x1532>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16d6c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   16d70:	f002 0107 	and.w	r1, r2, #7
   16d74:	2904      	cmp	r1, #4
   16d76:	f000 8523 	beq.w	177c0 <ull_conn_rx+0x1428>
	if (!conn->llcp_conn_param.cmd) {
   16d7a:	0714      	lsls	r4, r2, #28
   16d7c:	f57f ab73 	bpl.w	16466 <ull_conn_rx+0xce>
	cu->status = rej_ext_ind->error_code;
   16d80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16d84:	773b      	strb	r3, [r7, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16d86:	2215      	movs	r2, #21
   16d88:	713a      	strb	r2, [r7, #4]
	cu->interval = lll->interval;
   16d8a:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   16d8c:	f8b5 30c6 	ldrh.w	r3, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
   16d90:	8e29      	ldrh	r1, [r5, #48]	; 0x30
   16d92:	8439      	strh	r1, [r7, #32]
		      lll->interval * 125U / 1000;
   16d94:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   16d96:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   16d9a:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   16d9e:	83fa      	strh	r2, [r7, #30]
		      lll->interval * 125U / 1000;
   16da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16da4:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   16da8:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   16daa:	847b      	strh	r3, [r7, #34]	; 0x22
	if (err) {
   16dac:	f7ff bb65 	b.w	1647a <ull_conn_rx+0xe2>
		if ((conn->llcp_ack != conn->llcp_req) &&
   16db0:	f895 10e8 	ldrb.w	r1, [r5, #232]	; 0xe8
   16db4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16db8:	428b      	cmp	r3, r1
   16dba:	f43f ab54 	beq.w	16466 <ull_conn_rx+0xce>
   16dbe:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   16dc2:	2b03      	cmp	r3, #3
   16dc4:	f47f ab4f 	bne.w	16466 <ull_conn_rx+0xce>
	conn->llcp_enc.pause_rx = 0U;
   16dc8:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   16dcc:	f885 10e9 	strb.w	r1, [r5, #233]	; 0xe9
	conn->procedure_expire = 0U;
   16dd0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16dd2:	f022 0203 	bic.w	r2, r2, #3
   16dd6:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	conn->procedure_expire = 0U;
   16dda:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   16dde:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16de2:	f887 2020 	strb.w	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16de6:	210d      	movs	r1, #13
   16de8:	77f9      	strb	r1, [r7, #31]
	int nack = 0;
   16dea:	4618      	mov	r0, r3
   16dec:	f7ff bb45 	b.w	1647a <ull_conn_rx+0xe2>
			tx->next = conn->tx_head;
   16df0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16df2:	e9c5 006f 	strd	r0, r0, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16df6:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   16dfa:	2b00      	cmp	r3, #0
   16dfc:	f47f ab33 	bne.w	16466 <ull_conn_rx+0xce>
   16e00:	f7ff bbb6 	b.w	16570 <ull_conn_rx+0x1d8>
		((!conn->llcp_enc.refresh &&
   16e04:	f1b8 0f07 	cmp.w	r8, #7
   16e08:	f43f add4 	beq.w	169b4 <ull_conn_rx+0x61c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16e0c:	f1b8 0f02 	cmp.w	r8, #2
   16e10:	f47f abd1 	bne.w	165b6 <ull_conn_rx+0x21e>
   16e14:	e5f8      	b.n	16a08 <ull_conn_rx+0x670>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16e16:	7f7b      	ldrb	r3, [r7, #29]
   16e18:	2b01      	cmp	r3, #1
   16e1a:	f47f ab7b 	bne.w	16514 <ull_conn_rx+0x17c>
   16e1e:	e742      	b.n	16ca6 <ull_conn_rx+0x90e>
   16e20:	7f7b      	ldrb	r3, [r7, #29]
   16e22:	2b01      	cmp	r3, #1
   16e24:	f47f ab76 	bne.w	16514 <ull_conn_rx+0x17c>
		conn->lll.enc_tx = 0;
   16e28:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   16e2c:	f36f 1304 	bfc	r3, #4, #1
   16e30:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   16e34:	f7ff bb17 	b.w	16466 <ull_conn_rx+0xce>
   16e38:	2000eba0 	.word	0x2000eba0
   16e3c:	fffe30d0 	.word	0xfffe30d0
   16e40:	0001ff7f 	.word	0x0001ff7f
		if (!conn->lll.role) {
   16e44:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   16e48:	2900      	cmp	r1, #0
   16e4a:	f2c0 80a0 	blt.w	16f8e <ull_conn_rx+0xbf6>
					conn->llcp_conn_param.ack) &&
   16e4e:	f895 117d 	ldrb.w	r1, [r5, #381]	; 0x17d
   16e52:	9101      	str	r1, [sp, #4]
   16e54:	4608      	mov	r0, r1
			if ((conn->llcp_conn_param.req !=
   16e56:	f895 117c 	ldrb.w	r1, [r5, #380]	; 0x17c
   16e5a:	4281      	cmp	r1, r0
   16e5c:	d009      	beq.n	16e72 <ull_conn_rx+0xada>
			    ((conn->llcp_conn_param.state ==
   16e5e:	f895 117e 	ldrb.w	r1, [r5, #382]	; 0x17e
					conn->llcp_conn_param.ack) &&
   16e62:	f011 0107 	ands.w	r1, r1, #7
   16e66:	f000 82f0 	beq.w	1744a <ull_conn_rx+0x10b2>
			      LLCP_CPR_STATE_REQ) ||
   16e6a:	3904      	subs	r1, #4
   16e6c:	2901      	cmp	r1, #1
   16e6e:	f240 82ec 	bls.w	1744a <ull_conn_rx+0x10b2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   16e72:	f895 10e8 	ldrb.w	r1, [r5, #232]	; 0xe8
   16e76:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   16e7a:	1a09      	subs	r1, r1, r0
   16e7c:	f001 0103 	and.w	r1, r1, #3
   16e80:	2902      	cmp	r1, #2
   16e82:	f000 847b 	beq.w	1777c <ull_conn_rx+0x13e4>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   16e86:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
   16e8a:	f895 11b5 	ldrb.w	r1, [r5, #437]	; 0x1b5
   16e8e:	4288      	cmp	r0, r1
   16e90:	f000 83e2 	beq.w	17658 <ull_conn_rx+0x12c0>
				nack = reject_ext_ind_send(conn, *rx,
   16e94:	232a      	movs	r3, #42	; 0x2a
   16e96:	220f      	movs	r2, #15
   16e98:	e45b      	b.n	16752 <ull_conn_rx+0x3ba>
		if (!conn->tx_ctrl) {
   16e9a:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   16e9e:	2900      	cmp	r1, #0
   16ea0:	f47f ae69 	bne.w	16b76 <ull_conn_rx+0x7de>
			tx->next = conn->tx_head;
   16ea4:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   16ea6:	e9c5 006f 	strd	r0, r0, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16eaa:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
   16eae:	e669      	b.n	16b84 <ull_conn_rx+0x7ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16eb0:	48b0      	ldr	r0, [pc, #704]	; (17174 <ull_conn_rx+0xddc>)
   16eb2:	f7f9 fcf1 	bl	10898 <mem_acquire>
		if (!tx) {
   16eb6:	4603      	mov	r3, r0
   16eb8:	2800      	cmp	r0, #0
   16eba:	f000 80ba 	beq.w	17032 <ull_conn_rx+0xc9a>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16ebe:	f895 21a4 	ldrb.w	r2, [r5, #420]	; 0x1a4
   16ec2:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   16ec6:	f8b5 005e 	ldrh.w	r0, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   16eca:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   16ece:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   16ed2:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   16ed6:	428a      	cmp	r2, r1
	eff_rx_octets = conn->lll.max_rx_octets;
   16ed8:	4686      	mov	lr, r0
	if (/* Local idle, and Peer request then complete the Peer procedure
   16eda:	f040 8560 	bne.w	1799e <ull_conn_rx+0x1606>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   16ede:	8c39      	ldrh	r1, [r7, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16ee0:	291a      	cmp	r1, #26
   16ee2:	f240 82ad 	bls.w	17440 <ull_conn_rx+0x10a8>
			eff_tx_octets = MIN(max_rx_octets,
   16ee6:	f8b5 00d6 	ldrh.w	r0, [r5, #214]	; 0xd6
   16eea:	4281      	cmp	r1, r0
   16eec:	bf28      	it	cs
   16eee:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16ef0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   16ef2:	f8b7 c026 	ldrh.w	ip, [r7, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   16ef6:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   16ef8:	8c78      	ldrh	r0, [r7, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   16efa:	46f0      	mov	r8, lr
   16efc:	bf28      	it	cs
   16efe:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   16f02:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   16f06:	bf34      	ite	cc
   16f08:	4658      	movcc	r0, fp
   16f0a:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   16f0e:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   16f12:	bf34      	ite	cc
   16f14:	46d4      	movcc	ip, sl
   16f16:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   16f1a:	45c6      	cmp	lr, r8
   16f1c:	f000 831a 	beq.w	17554 <ull_conn_rx+0x11bc>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   16f20:	3a01      	subs	r2, #1
   16f22:	f885 21a5 	strb.w	r2, [r5, #421]	; 0x1a5
			conn->llcp_length.rx_octets = eff_rx_octets;
   16f26:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
			conn->llcp_length.tx_octets = eff_tx_octets;
   16f2a:	f8a5 11aa 	strh.w	r1, [r5, #426]	; 0x1aa
			conn->llcp_length.rx_time = eff_rx_time;
   16f2e:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
			conn->llcp_length.tx_time = eff_tx_time;
   16f32:	f8a5 01ae 	strh.w	r0, [r5, #430]	; 0x1ae
			if (tx) {
   16f36:	2b00      	cmp	r3, #0
   16f38:	f000 8382 	beq.w	17640 <ull_conn_rx+0x12a8>
				conn->llcp_length.state =
   16f3c:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
   16f40:	2705      	movs	r7, #5
   16f42:	f367 0202 	bfi	r2, r7, #0, #3
   16f46:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
			link->mem = conn->llcp_rx;
   16f4a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   16f4e:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   16f50:	6822      	ldr	r2, [r4, #0]
   16f52:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   16f54:	6822      	ldr	r2, [r4, #0]
   16f56:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
			*rx = NULL;
   16f5a:	2200      	movs	r2, #0
   16f5c:	6022      	str	r2, [r4, #0]
	if (tx) {
   16f5e:	2b00      	cmp	r3, #0
   16f60:	f43f aa83 	beq.w	1646a <ull_conn_rx+0xd2>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f64:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   16f66:	8199      	strh	r1, [r3, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f68:	f042 0203 	orr.w	r2, r2, #3
   16f6c:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16f6e:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16f70:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16f72:	81d8      	strh	r0, [r3, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   16f74:	f8a3 e008 	strh.w	lr, [r3, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   16f78:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16f7a:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   16f7e:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16f80:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16f82:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16f84:	f7fe fb3c 	bl	15600 <ctrl_tx_sec_enqueue>
	return 0;
   16f88:	2000      	movs	r0, #0
}
   16f8a:	f7ff ba76 	b.w	1647a <ull_conn_rx+0xe2>
			    conn->llcp_conn_param.ack) ||
   16f8e:	f895 017d 	ldrb.w	r0, [r5, #381]	; 0x17d
		} else if ((conn->llcp_conn_param.req ==
   16f92:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   16f96:	4282      	cmp	r2, r0
   16f98:	f000 80f8 	beq.w	1718c <ull_conn_rx+0xdf4>
			    conn->llcp_conn_param.ack) ||
   16f9c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   16fa0:	0792      	lsls	r2, r2, #30
   16fa2:	f000 80f3 	beq.w	1718c <ull_conn_rx+0xdf4>
			LL_ASSERT(0);
   16fa6:	4a74      	ldr	r2, [pc, #464]	; (17178 <ull_conn_rx+0xde0>)
   16fa8:	4974      	ldr	r1, [pc, #464]	; (1717c <ull_conn_rx+0xde4>)
   16faa:	4875      	ldr	r0, [pc, #468]	; (17180 <ull_conn_rx+0xde8>)
   16fac:	f241 73de 	movw	r3, #6110	; 0x17de
   16fb0:	f00b f992 	bl	222d8 <printk>
   16fb4:	4040      	eors	r0, r0
   16fb6:	f380 8811 	msr	BASEPRI, r0
   16fba:	f04f 0003 	mov.w	r0, #3
   16fbe:	df02      	svc	2
	int nack = 0;
   16fc0:	2000      	movs	r0, #0
   16fc2:	f7ff ba5a 	b.w	1647a <ull_conn_rx+0xe2>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16fc6:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   16fca:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   16fce:	429a      	cmp	r2, r3
   16fd0:	f43f ae8f 	beq.w	16cf2 <ull_conn_rx+0x95a>
		rej_ext_ind->error_code = rej_ind->error_code;
   16fd4:	f897 3020 	ldrb.w	r3, [r7, #32]
   16fd8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   16fdc:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   16fe0:	2a00      	cmp	r2, #0
   16fe2:	f2c0 83d2 	blt.w	1778a <ull_conn_rx+0x13f2>
   16fe6:	2b1a      	cmp	r3, #26
   16fe8:	f000 846f 	beq.w	178ca <ull_conn_rx+0x1532>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16fec:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   16ff0:	f002 0307 	and.w	r3, r2, #7
   16ff4:	2b04      	cmp	r3, #4
   16ff6:	f47f aec0 	bne.w	16d7a <ull_conn_rx+0x9e2>
		LL_ASSERT(conn_upd_curr == conn);
   16ffa:	4e62      	ldr	r6, [pc, #392]	; (17184 <ull_conn_rx+0xdec>)
   16ffc:	6833      	ldr	r3, [r6, #0]
   16ffe:	429d      	cmp	r5, r3
   17000:	d00e      	beq.n	17020 <ull_conn_rx+0xc88>
   17002:	4a5d      	ldr	r2, [pc, #372]	; (17178 <ull_conn_rx+0xde0>)
   17004:	4960      	ldr	r1, [pc, #384]	; (17188 <ull_conn_rx+0xdf0>)
   17006:	485e      	ldr	r0, [pc, #376]	; (17180 <ull_conn_rx+0xde8>)
   17008:	f241 13ba 	movw	r3, #4538	; 0x11ba
   1700c:	f00b f964 	bl	222d8 <printk>
   17010:	4040      	eors	r0, r0
   17012:	f380 8811 	msr	BASEPRI, r0
   17016:	f04f 0003 	mov.w	r0, #3
   1701a:	df02      	svc	2
   1701c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17020:	f895 117c 	ldrb.w	r1, [r5, #380]	; 0x17c
   17024:	f885 117d 	strb.w	r1, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   17028:	2300      	movs	r3, #0
   1702a:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   1702c:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   17030:	e6a3      	b.n	16d7a <ull_conn_rx+0x9e2>
		return -ENOBUFS;
   17032:	f06f 0036 	mvn.w	r0, #54	; 0x36
   17036:	f7ff ba20 	b.w	1647a <ull_conn_rx+0xe2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1703a:	484e      	ldr	r0, [pc, #312]	; (17174 <ull_conn_rx+0xddc>)
   1703c:	f7f9 fc2c 	bl	10898 <mem_acquire>
	if (!tx) {
   17040:	4602      	mov	r2, r0
   17042:	2800      	cmp	r0, #0
   17044:	d0f5      	beq.n	17032 <ull_conn_rx+0xc9a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17046:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   1704a:	2102      	movs	r1, #2
   1704c:	f361 0301 	bfi	r3, r1, #0, #2
   17050:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   17054:	f895 11b5 	ldrb.w	r1, [r5, #437]	; 0x1b5
   17058:	f895 31b4 	ldrb.w	r3, [r5, #436]	; 0x1b4
   1705c:	428b      	cmp	r3, r1
   1705e:	d115      	bne.n	1708c <ull_conn_rx+0xcf4>
		conn->llcp_phy.ack--;
   17060:	3b01      	subs	r3, #1
   17062:	f885 31b5 	strb.w	r3, [r5, #437]	; 0x1b5
		conn->llcp_phy.tx =
   17066:	f8b5 31b6 	ldrh.w	r3, [r5, #438]	; 0x1b6
			conn->phy_pref_rx;
   1706a:	f895 01b8 	ldrb.w	r0, [r5, #440]	; 0x1b8
		conn->llcp_phy.tx =
   1706e:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   17072:	f240 43fc 	movw	r3, #1276	; 0x4fc
   17076:	f021 0104 	bic.w	r1, r1, #4
   1707a:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1707e:	430b      	orrs	r3, r1
		conn->procedure_expire =
   17080:	f8b5 10ca 	ldrh.w	r1, [r5, #202]	; 0xca
		conn->llcp_phy.tx =
   17084:	f8a5 31b6 	strh.w	r3, [r5, #438]	; 0x1b6
		conn->procedure_expire =
   17088:	f8a5 10cc 	strh.w	r1, [r5, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
   1708c:	f895 11b6 	ldrb.w	r1, [r5, #438]	; 0x1b6
   17090:	f897 3020 	ldrb.w	r3, [r7, #32]
   17094:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   17098:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   1709c:	f3c1 0482 	ubfx	r4, r1, #2, #3
   170a0:	4023      	ands	r3, r4
   170a2:	009b      	lsls	r3, r3, #2
   170a4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   170a8:	f001 0103 	and.w	r1, r1, #3
   170ac:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   170ae:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   170b0:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   170b4:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   170b6:	f895 01b8 	ldrb.w	r0, [r5, #440]	; 0x1b8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   170ba:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   170bc:	4603      	mov	r3, r0
   170be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   170c2:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   170c4:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   170c8:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   170cc:	2417      	movs	r4, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   170ce:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   170d2:	71d4      	strb	r4, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   170d4:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   170d6:	7111      	strb	r1, [r2, #4]
	if (
   170d8:	2b00      	cmp	r3, #0
   170da:	f000 8129 	beq.w	17330 <ull_conn_rx+0xf98>
	    !conn->llcp_enc.pause_tx &&
   170de:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
	    conn->tx_head &&
   170e2:	0788      	lsls	r0, r1, #30
   170e4:	f100 8124 	bmi.w	17330 <ull_conn_rx+0xf98>
	    !conn->llcp_phy.pause_tx &&
   170e8:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
   170ec:	07c9      	lsls	r1, r1, #31
   170ee:	f100 811f 	bmi.w	17330 <ull_conn_rx+0xf98>
		if (conn->tx_head == conn->tx_data) {
   170f2:	f8d5 11c8 	ldr.w	r1, [r5, #456]	; 0x1c8
   170f6:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   170f8:	bf04      	itt	eq
   170fa:	6819      	ldreq	r1, [r3, #0]
   170fc:	f8c5 11c8 	streq.w	r1, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17100:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   17104:	2900      	cmp	r1, #0
   17106:	f000 8443 	beq.w	17990 <ull_conn_rx+0x15f8>
	tx->next = conn->tx_ctrl_last->next;
   1710a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   1710e:	6819      	ldr	r1, [r3, #0]
   17110:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   17112:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   17114:	f8c5 21c4 	str.w	r2, [r5, #452]	; 0x1c4
	if (!tx->next) {
   17118:	6813      	ldr	r3, [r2, #0]
   1711a:	2b00      	cmp	r3, #0
   1711c:	f47f a9a3 	bne.w	16466 <ull_conn_rx+0xce>
		conn->tx_data_last = tx;
   17120:	f8c5 21cc 	str.w	r2, [r5, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17124:	f7ff b99f 	b.w	16466 <ull_conn_rx+0xce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17128:	4812      	ldr	r0, [pc, #72]	; (17174 <ull_conn_rx+0xddc>)
   1712a:	f7f9 fbb5 	bl	10898 <mem_acquire>
		if (!tx) {
   1712e:	4601      	mov	r1, r0
   17130:	2800      	cmp	r0, #0
   17132:	f43f af7e 	beq.w	17032 <ull_conn_rx+0xc9a>
		conn->llcp_version.tx = 1U;
   17136:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
   1713a:	f043 0301 	orr.w	r3, r3, #1
   1713e:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17142:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17144:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17146:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   17148:	220b      	movs	r2, #11
   1714a:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1714c:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17150:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17154:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17156:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   17158:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1715c:	2205      	movs	r2, #5
		v->sub_version_number =
   1715e:	72c3      	strb	r3, [r0, #11]
   17160:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   17162:	7144      	strb	r4, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17164:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   17166:	4628      	mov	r0, r5
   17168:	f7fe fa4a 	bl	15600 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1716c:	2301      	movs	r3, #1
   1716e:	713b      	strb	r3, [r7, #4]
   17170:	e49d      	b.n	16aae <ull_conn_rx+0x716>
   17172:	bf00      	nop
   17174:	2000eba0 	.word	0x2000eba0
   17178:	0002929c 	.word	0x0002929c
   1717c:	00028e78 	.word	0x00028e78
   17180:	00028de0 	.word	0x00028de0
   17184:	2000eb1c 	.word	0x2000eb1c
   17188:	00029410 	.word	0x00029410
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1718c:	f8b7 a020 	ldrh.w	sl, [r7, #32]
   17190:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17194:	2a05      	cmp	r2, #5
   17196:	d97d      	bls.n	17294 <ull_conn_rx+0xefc>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17198:	f8b7 9022 	ldrh.w	r9, [r7, #34]	; 0x22
   1719c:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   171a0:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   171a4:	d876      	bhi.n	17294 <ull_conn_rx+0xefc>
			    (interval_max > 3200) ||
   171a6:	428a      	cmp	r2, r1
   171a8:	d874      	bhi.n	17294 <ull_conn_rx+0xefc>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   171aa:	f8b7 8024 	ldrh.w	r8, [r7, #36]	; 0x24
   171ae:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   171b2:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   171b6:	d26d      	bcs.n	17294 <ull_conn_rx+0xefc>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   171b8:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
   171bc:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   171c0:	f1a2 040a 	sub.w	r4, r2, #10
   171c4:	f640 4b76 	movw	fp, #3190	; 0xc76
   171c8:	b2a4      	uxth	r4, r4
   171ca:	455c      	cmp	r4, fp
   171cc:	d862      	bhi.n	17294 <ull_conn_rx+0xefc>
			     ((latency + 1) * interval_max)) ||
   171ce:	f10c 0401 	add.w	r4, ip, #1
   171d2:	b2a4      	uxth	r4, r4
   171d4:	fb01 f404 	mul.w	r4, r1, r4
			    (timeout < 10) || (timeout > 3200) ||
   171d8:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
   171dc:	d25a      	bcs.n	17294 <ull_conn_rx+0xefc>
			     ((latency + 1) * interval_max)) ||
   171de:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   171e2:	4559      	cmp	r1, fp
   171e4:	d356      	bcc.n	17294 <ull_conn_rx+0xefc>
			conn->llcp_conn_param.interval_min = interval_min;
   171e6:	f8a5 a180 	strh.w	sl, [r5, #384]	; 0x180
			conn->llcp_conn_param.interval_max = interval_max;
   171ea:	f8a5 9182 	strh.w	r9, [r5, #386]	; 0x182
			conn->llcp_conn_param.latency =	latency;
   171ee:	f8a5 8184 	strh.w	r8, [r5, #388]	; 0x184
			conn->llcp_conn_param.timeout =	timeout;
   171f2:	f8a5 e186 	strh.w	lr, [r5, #390]	; 0x186
			conn->llcp_conn_param.preferred_periodicity =
   171f6:	f885 b188 	strb.w	fp, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   171fa:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
   171fe:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
   17202:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   17206:	f8a5 418a 	strh.w	r4, [r5, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset0);
   1720a:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
   1720e:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
   17212:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   17216:	f8a5 418c 	strh.w	r4, [r5, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset1);
   1721a:	f897 e02e 	ldrb.w	lr, [r7, #46]	; 0x2e
   1721e:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
   17222:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   17226:	f8a5 418e 	strh.w	r4, [r5, #398]	; 0x18e
				sys_le16_to_cpu(cpr->offset2);
   1722a:	f897 e030 	ldrb.w	lr, [r7, #48]	; 0x30
   1722e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
   17232:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   17236:	f8a5 4190 	strh.w	r4, [r5, #400]	; 0x190
				sys_le16_to_cpu(cpr->offset3);
   1723a:	f897 e032 	ldrb.w	lr, [r7, #50]	; 0x32
   1723e:	f897 4031 	ldrb.w	r4, [r7, #49]	; 0x31
   17242:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   17246:	f8a5 4192 	strh.w	r4, [r5, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset4);
   1724a:	f897 e034 	ldrb.w	lr, [r7, #52]	; 0x34
   1724e:	f897 4033 	ldrb.w	r4, [r7, #51]	; 0x33
   17252:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   17256:	f8a5 4194 	strh.w	r4, [r5, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset5);
   1725a:	f897 4035 	ldrb.w	r4, [r7, #53]	; 0x35
   1725e:	f897 e036 	ldrb.w	lr, [r7, #54]	; 0x36
   17262:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   17266:	f8a5 4196 	strh.w	r4, [r5, #406]	; 0x196
			     lll->interval) ||
   1726a:	8dec      	ldrh	r4, [r5, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1726c:	42a1      	cmp	r1, r4
   1726e:	f000 830c 	beq.w	1788a <ull_conn_rx+0x14f2>
				conn->llcp_conn_param.state =
   17272:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   17276:	2103      	movs	r1, #3
   17278:	f361 0202 	bfi	r2, r1, #0, #3
   1727c:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
			conn->llcp_conn_param.ack--;
   17280:	3801      	subs	r0, #1
   17282:	f885 017d 	strb.w	r0, [r5, #381]	; 0x17d
			if (!conn_upd_curr) {
   17286:	2b00      	cmp	r3, #0
   17288:	f47f a8ef 	bne.w	1646a <ull_conn_rx+0xd2>
				conn_upd_curr = conn;
   1728c:	6035      	str	r5, [r6, #0]
	int nack = 0;
   1728e:	4618      	mov	r0, r3
   17290:	f7ff b8f3 	b.w	1647a <ull_conn_rx+0xe2>
				nack = reject_ext_ind_send(conn, *rx,
   17294:	231e      	movs	r3, #30
   17296:	220f      	movs	r2, #15
   17298:	f7ff ba5b 	b.w	16752 <ull_conn_rx+0x3ba>
			conn->llcp_conn_param.disabled = 1U;
   1729c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   172a0:	f042 0210 	orr.w	r2, r2, #16
   172a4:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
			if (!conn->lll.role) {
   172a8:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   172ac:	2a00      	cmp	r2, #0
   172ae:	f2c0 8185 	blt.w	175bc <ull_conn_rx+0x1224>
				LL_ASSERT(conn->llcp_cu.req ==
   172b2:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
   172b6:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
   172ba:	429a      	cmp	r2, r3
   172bc:	d00e      	beq.n	172dc <ull_conn_rx+0xf44>
   172be:	4adb      	ldr	r2, [pc, #876]	; (1762c <ull_conn_rx+0x1294>)
   172c0:	49db      	ldr	r1, [pc, #876]	; (17630 <ull_conn_rx+0x1298>)
   172c2:	48dc      	ldr	r0, [pc, #880]	; (17634 <ull_conn_rx+0x129c>)
   172c4:	f641 0364 	movw	r3, #6244	; 0x1864
   172c8:	f00b f806 	bl	222d8 <printk>
   172cc:	4040      	eors	r0, r0
   172ce:	f380 8811 	msr	BASEPRI, r0
   172d2:	f04f 0003 	mov.w	r0, #3
   172d6:	df02      	svc	2
   172d8:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
				conn->llcp_conn_param.state =
   172dc:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   172e0:	2105      	movs	r1, #5
   172e2:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   172e6:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   172e8:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   172ea:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
				conn->llcp_cu.win_size = 1U;
   172ee:	f885 1120 	strb.w	r1, [r5, #288]	; 0x120
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   172f2:	6824      	ldr	r4, [r4, #0]
				conn->llcp_conn_param.state =
   172f4:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   172f8:	f002 0308 	and.w	r3, r2, #8
   172fc:	f895 2112 	ldrb.w	r2, [r5, #274]	; 0x112
   17300:	430b      	orrs	r3, r1
   17302:	f022 020f 	bic.w	r2, r2, #15
   17306:	4313      	orrs	r3, r2
   17308:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
				conn->llcp_cu.latency =
   1730c:	f8b5 3184 	ldrh.w	r3, [r5, #388]	; 0x184
				conn->llcp_cu.interval =
   17310:	f8b5 2182 	ldrh.w	r2, [r5, #386]	; 0x182
				conn->llcp_cu.latency =
   17314:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
				conn->llcp_cu.win_offset_us = 0U;
   17318:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   1731a:	f8b5 3186 	ldrh.w	r3, [r5, #390]	; 0x186
				conn->llcp_cu.interval =
   1731e:	f8a5 2114 	strh.w	r2, [r5, #276]	; 0x114
				conn->llcp_cu.timeout =
   17322:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
				conn->llcp_cu.win_offset_us = 0U;
   17326:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1732a:	7121      	strb	r1, [r4, #4]
				break;
   1732c:	f7ff b8a5 	b.w	1647a <ull_conn_rx+0xe2>
		if (!conn->tx_ctrl) {
   17330:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   17334:	2900      	cmp	r1, #0
   17336:	f47f aee8 	bne.w	1710a <ull_conn_rx+0xd72>
			tx->next = conn->tx_head;
   1733a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1733c:	e9c5 226f 	strd	r2, r2, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17340:	f8c5 21c4 	str.w	r2, [r5, #452]	; 0x1c4
   17344:	e6e8      	b.n	17118 <ull_conn_rx+0xd80>
				      0x03) == 0x02) &&
   17346:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   1734a:	2b03      	cmp	r3, #3
   1734c:	f47f a9ff 	bne.w	1674e <ull_conn_rx+0x3b6>
   17350:	f7ff b9f6 	b.w	16740 <ull_conn_rx+0x3a8>
	instant = sys_le16_to_cpu(ind->instant);
   17354:	8c78      	ldrh	r0, [r7, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   17356:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   17358:	1a82      	subs	r2, r0, r2
   1735a:	0412      	lsls	r2, r2, #16
   1735c:	f100 808f 	bmi.w	1747e <ull_conn_rx+0x10e6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17360:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   17364:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
   17368:	eba2 020c 	sub.w	r2, r2, ip
   1736c:	f002 0203 	and.w	r2, r2, #3
   17370:	2a02      	cmp	r2, #2
   17372:	d07c      	beq.n	1746e <ull_conn_rx+0x10d6>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17374:	f895 71b4 	ldrb.w	r7, [r5, #436]	; 0x1b4
   17378:	f895 21b5 	ldrb.w	r2, [r5, #437]	; 0x1b5
   1737c:	42ba      	cmp	r2, r7
   1737e:	d018      	beq.n	173b2 <ull_conn_rx+0x101a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   17380:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17384:	f002 0203 	and.w	r2, r2, #3
   17388:	2a02      	cmp	r2, #2
   1738a:	d112      	bne.n	173b2 <ull_conn_rx+0x101a>
		conn->llcp_phy.pause_tx = 0U;
   1738c:	f895 21b7 	ldrb.w	r2, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17390:	f885 71b5 	strb.w	r7, [r5, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   17394:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17398:	f895 70ec 	ldrb.w	r7, [r5, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
   1739c:	f885 21b7 	strb.w	r2, [r5, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   173a0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   173a4:	f362 0741 	bfi	r7, r2, #1, #1
		conn->procedure_expire = 0U;
   173a8:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   173aa:	f885 70ec 	strb.w	r7, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
   173ae:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   173b2:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   173b6:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   173ba:	009b      	lsls	r3, r3, #2
   173bc:	f003 031c 	and.w	r3, r3, #28
   173c0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   173c4:	f002 0202 	and.w	r2, r2, #2
   173c8:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   173ca:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
	conn->llcp.phy_upd_ind.initiate = 0U;
   173ce:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
   173d2:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   173d4:	6822      	ldr	r2, [r4, #0]
   173d6:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   173d8:	6822      	ldr	r2, [r4, #0]
   173da:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
	*rx = NULL;
   173de:	2300      	movs	r3, #0
   173e0:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   173e2:	f7fd f891 	bl	14508 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   173e6:	4604      	mov	r4, r0
   173e8:	2800      	cmp	r0, #0
   173ea:	f000 8227 	beq.w	1783c <ull_conn_rx+0x14a4>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   173ee:	6823      	ldr	r3, [r4, #0]
   173f0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   173f4:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   173f6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   173fa:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   173fe:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
	conn->llcp_type = LLCP_PHY_UPD;
   17402:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   17404:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   17406:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   1740a:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	conn->llcp_ack -= 2U;
   1740e:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   17412:	f43f a82a 	beq.w	1646a <ull_conn_rx+0xd2>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17416:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
   1741a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1741e:	f363 1206 	bfi	r2, r3, #4, #3
   17422:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
   17426:	2000      	movs	r0, #0
   17428:	f7ff b827 	b.w	1647a <ull_conn_rx+0xe2>
			conn->llcp_length.disabled = 1U;
   1742c:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   17430:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->llcp_length.disabled = 1U;
   17434:	f042 0308 	orr.w	r3, r2, #8
   17438:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   1743c:	f7ff b8db 	b.w	165f6 <ull_conn_rx+0x25e>
   17440:	4649      	mov	r1, r9
   17442:	e555      	b.n	16ef0 <ull_conn_rx+0xb58>
				nack = reject_ext_ind_send(conn, *rx,
   17444:	2323      	movs	r3, #35	; 0x23
   17446:	f7ff b983 	b.w	16750 <ull_conn_rx+0x3b8>
				nack = reject_ext_ind_send(conn, *rx,
   1744a:	2323      	movs	r3, #35	; 0x23
   1744c:	220f      	movs	r2, #15
   1744e:	f7ff b980 	b.w	16752 <ull_conn_rx+0x3ba>
	conn->llcp_enc.pause_rx = 0U;
   17452:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   17456:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->procedure_expire = 0U;
   1745a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1745c:	f021 0103 	bic.w	r1, r1, #3
   17460:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
	conn->procedure_expire = 0U;
   17464:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   17468:	4618      	mov	r0, r3
   1746a:	f7ff b806 	b.w	1647a <ull_conn_rx+0xe2>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1746e:	2301      	movs	r3, #1
   17470:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   17472:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   17474:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
	int nack = 0;
   17478:	2000      	movs	r0, #0
   1747a:	f7fe bffe 	b.w	1647a <ull_conn_rx+0xe2>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1747e:	2301      	movs	r3, #1
   17480:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   17482:	2328      	movs	r3, #40	; 0x28
   17484:	e7f6      	b.n	17474 <ull_conn_rx+0x10dc>
				conn->llcp_phy.state =
   17486:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   1748a:	4288      	cmp	r0, r1
				conn->llcp_phy.state =
   1748c:	f043 0303 	orr.w	r3, r3, #3
   17490:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   17494:	d111      	bne.n	174ba <ull_conn_rx+0x1122>
					conn->llcp_phy.tx =
   17496:	f8b5 21b6 	ldrh.w	r2, [r5, #438]	; 0x1b6
						conn->phy_pref_rx;
   1749a:	f895 11b8 	ldrb.w	r1, [r5, #440]	; 0x1b8
					conn->llcp_phy.ack--;
   1749e:	1e43      	subs	r3, r0, #1
					conn->llcp_phy.tx =
   174a0:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   174a4:	f885 31b5 	strb.w	r3, [r5, #437]	; 0x1b5
					conn->llcp_phy.tx =
   174a8:	f240 43fc 	movw	r3, #1276	; 0x4fc
   174ac:	f022 0204 	bic.w	r2, r2, #4
   174b0:	ea03 0381 	and.w	r3, r3, r1, lsl #2
   174b4:	4313      	orrs	r3, r2
   174b6:	f8a5 31b6 	strh.w	r3, [r5, #438]	; 0x1b6
				conn->llcp_phy.rx &= p->tx_phys;
   174ba:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   174be:	f897 1020 	ldrb.w	r1, [r7, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   174c2:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   174c6:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   174ca:	f003 0203 	and.w	r2, r3, #3
   174ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   174d2:	4003      	ands	r3, r0
   174d4:	009b      	lsls	r3, r3, #2
   174d6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   174da:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   174dc:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   174e0:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   174e4:	d002      	beq.n	174ec <ull_conn_rx+0x1154>
   174e6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   174ea:	d105      	bne.n	174f8 <ull_conn_rx+0x1160>
					conn->llcp_phy.tx = 0;
   174ec:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   174f0:	f003 0303 	and.w	r3, r3, #3
   174f4:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				conn->llcp_phy.pause_tx = 1U;
   174f8:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   174fc:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   174fe:	4313      	orrs	r3, r2
   17500:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
	int nack = 0;
   17504:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17506:	713a      	strb	r2, [r7, #4]
   17508:	f7fe bfb7 	b.w	1647a <ull_conn_rx+0xe2>
			lll->phy_tx_time = lll->phy_tx;
   1750c:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   17510:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
			conn->llcp_phy.ack = conn->llcp_phy.req;
   17514:	f885 11b5 	strb.w	r1, [r5, #437]	; 0x1b5
			conn->llcp_phy.pause_tx = 0U;
   17518:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1751c:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   1751e:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   17522:	f362 1106 	bfi	r1, r2, #4, #3
   17526:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
   1752a:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   1752e:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   17532:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17536:	6823      	ldr	r3, [r4, #0]
			if (conn->llcp_phy.cmd) {
   17538:	f000 8132 	beq.w	177a0 <ull_conn_rx+0x1408>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1753c:	2119      	movs	r1, #25
   1753e:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   17540:	2300      	movs	r3, #0
   17542:	773b      	strb	r3, [r7, #28]
				p->tx = lll->phy_tx;
   17544:	777a      	strb	r2, [r7, #29]
				p->rx = lll->phy_rx;
   17546:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   1754a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1754e:	77bb      	strb	r3, [r7, #30]
   17550:	f7ff b851 	b.w	165f6 <ull_conn_rx+0x25e>
			conn->procedure_expire = 0U;
   17554:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17556:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   17558:	f885 21a5 	strb.w	r2, [r5, #421]	; 0x1a5
			conn->procedure_expire = 0U;
   1755c:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17560:	f000 8188 	beq.w	17874 <ull_conn_rx+0x14dc>
			conn->lll.max_rx_time = eff_rx_time;
   17564:	f8a5 c062 	strh.w	ip, [r5, #98]	; 0x62
			if (tx) {
   17568:	2b00      	cmp	r3, #0
   1756a:	f000 817e 	beq.w	1786a <ull_conn_rx+0x14d2>
					(conn->llcp_length.req - 1);
   1756e:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   17570:	f885 21a5 	strb.w	r2, [r5, #421]	; 0x1a5
				conn->llcp_length.state =
   17574:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
				conn->llcp_length.rx_octets = eff_rx_octets;
   17578:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
				conn->llcp_length.state =
   1757c:	2403      	movs	r4, #3
   1757e:	f364 0202 	bfi	r2, r4, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   17582:	f8a5 11aa 	strh.w	r1, [r5, #426]	; 0x1aa
				conn->llcp_length.rx_time = eff_rx_time;
   17586:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
				conn->llcp_length.tx_time = eff_tx_time;
   1758a:	f8a5 01ae 	strh.w	r0, [r5, #430]	; 0x1ae
				conn->llcp_length.state =
   1758e:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   17592:	f8a7 e020 	strh.w	lr, [r7, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   17596:	84b9      	strh	r1, [r7, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17598:	f8a7 c022 	strh.w	ip, [r7, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1759c:	84f8      	strh	r0, [r7, #38]	; 0x26
   1759e:	e4de      	b.n	16f5e <ull_conn_rx+0xbc6>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   175a0:	f895 10f8 	ldrb.w	r1, [r5, #248]	; 0xf8
   175a4:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_ack -= 2U;
   175a8:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   175aa:	f885 10f8 	strb.w	r1, [r5, #248]	; 0xf8
				conn->llcp_type = LLCP_ENCRYPTION;
   175ae:	2103      	movs	r1, #3
   175b0:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
				conn->llcp_ack -= 2U;
   175b4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
   175b8:	f7ff b815 	b.w	165e6 <ull_conn_rx+0x24e>
			LL_ASSERT(conn_upd_curr == conn);
   175bc:	4e1e      	ldr	r6, [pc, #120]	; (17638 <ull_conn_rx+0x12a0>)
   175be:	6832      	ldr	r2, [r6, #0]
   175c0:	4295      	cmp	r5, r2
   175c2:	d00e      	beq.n	175e2 <ull_conn_rx+0x124a>
   175c4:	4a19      	ldr	r2, [pc, #100]	; (1762c <ull_conn_rx+0x1294>)
   175c6:	491d      	ldr	r1, [pc, #116]	; (1763c <ull_conn_rx+0x12a4>)
   175c8:	481a      	ldr	r0, [pc, #104]	; (17634 <ull_conn_rx+0x129c>)
   175ca:	f641 037c 	movw	r3, #6268	; 0x187c
   175ce:	f00a fe83 	bl	222d8 <printk>
   175d2:	4040      	eors	r0, r0
   175d4:	f380 8811 	msr	BASEPRI, r0
   175d8:	f04f 0003 	mov.w	r0, #3
   175dc:	df02      	svc	2
   175de:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   175e2:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
			if (!conn->llcp_conn_param.cmd) {
   175e6:	f895 317e 	ldrb.w	r3, [r5, #382]	; 0x17e
	conn_upd_curr = NULL;
   175ea:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   175ec:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   175f0:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   175f2:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
   175f4:	f43f a87f 	beq.w	166f6 <ull_conn_rx+0x35e>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   175f8:	2115      	movs	r1, #21
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   175fa:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   175fc:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   175fe:	773b      	strb	r3, [r7, #28]
			cu->interval = lll->interval;
   17600:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   17602:	f8b5 30c6 	ldrh.w	r3, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
   17606:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
   17608:	83fa      	strh	r2, [r7, #30]
			cu->timeout = conn->supervision_reload *
   1760a:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   1760e:	227d      	movs	r2, #125	; 0x7d
   17610:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   17614:	8439      	strh	r1, [r7, #32]
				      lll->interval * 125U / 1000;
   17616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1761a:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1761e:	847b      	strh	r3, [r7, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   17620:	f7fe bfe9 	b.w	165f6 <ull_conn_rx+0x25e>
		conn_upd_curr = conn;
   17624:	601d      	str	r5, [r3, #0]
   17626:	f7ff b8ba 	b.w	1679e <ull_conn_rx+0x406>
   1762a:	bf00      	nop
   1762c:	0002929c 	.word	0x0002929c
   17630:	000293e8 	.word	0x000293e8
   17634:	00028de0 	.word	0x00028de0
   17638:	2000eb1c 	.word	0x2000eb1c
   1763c:	00029410 	.word	0x00029410
				conn->llcp_length.state =
   17640:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
				conn->lll.max_tx_octets = eff_tx_octets;
   17644:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
				conn->llcp_length.state =
   17648:	2704      	movs	r7, #4
   1764a:	f367 0202 	bfi	r2, r7, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1764e:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
				conn->llcp_length.state =
   17652:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
   17656:	e478      	b.n	16f4a <ull_conn_rx+0xbb2>
				uint16_t interval_min =
   17658:	f8b7 9020 	ldrh.w	r9, [r7, #32]
   1765c:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17660:	2905      	cmp	r1, #5
   17662:	f67f ae17 	bls.w	17294 <ull_conn_rx+0xefc>
				uint16_t interval_max =
   17666:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
   1766a:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1766e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   17672:	f63f ae0f 	bhi.w	17294 <ull_conn_rx+0xefc>
				    (interval_max > 3200) ||
   17676:	4281      	cmp	r1, r0
   17678:	f63f ae0c 	bhi.w	17294 <ull_conn_rx+0xefc>
				uint16_t latency =
   1767c:	f8b7 e024 	ldrh.w	lr, [r7, #36]	; 0x24
   17680:	fa1f f48e 	uxth.w	r4, lr
				    (interval_min > interval_max) ||
   17684:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   17688:	f4bf ae04 	bcs.w	17294 <ull_conn_rx+0xefc>
				uint16_t timeout =
   1768c:	f8b7 c026 	ldrh.w	ip, [r7, #38]	; 0x26
   17690:	fa1f f18c 	uxth.w	r1, ip
				    (latency > 499) ||
   17694:	f1a1 0a0a 	sub.w	sl, r1, #10
   17698:	f640 4b76 	movw	fp, #3190	; 0xc76
   1769c:	fa1f fa8a 	uxth.w	sl, sl
   176a0:	45da      	cmp	sl, fp
   176a2:	f63f adf7 	bhi.w	17294 <ull_conn_rx+0xefc>
				     ((latency + 1) * interval_max)) ||
   176a6:	f104 0a01 	add.w	sl, r4, #1
   176aa:	fa1f fa8a 	uxth.w	sl, sl
   176ae:	fb00 fa0a 	mul.w	sl, r0, sl
				    (timeout > 3200) ||
   176b2:	ebba 0f81 	cmp.w	sl, r1, lsl #2
   176b6:	f4bf aded 	bcs.w	17294 <ull_conn_rx+0xefc>
				     ((latency + 1) * interval_max)) ||
   176ba:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   176be:	4558      	cmp	r0, fp
   176c0:	f4ff ade8 	bcc.w	17294 <ull_conn_rx+0xefc>
				conn->llcp_conn_param.interval_min =
   176c4:	f8a5 9180 	strh.w	r9, [r5, #384]	; 0x180
				conn->llcp_conn_param.interval_max =
   176c8:	f8a5 8182 	strh.w	r8, [r5, #386]	; 0x182
				conn->llcp_conn_param.latency =	latency;
   176cc:	f8a5 e184 	strh.w	lr, [r5, #388]	; 0x184
				conn->llcp_conn_param.timeout =	timeout;
   176d0:	f8a5 c186 	strh.w	ip, [r5, #390]	; 0x186
				conn->llcp_conn_param.preferred_periodicity =
   176d4:	f885 b188 	strb.w	fp, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   176d8:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
   176dc:	f897 c029 	ldrb.w	ip, [r7, #41]	; 0x29
   176e0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   176e4:	f8a5 c18a 	strh.w	ip, [r5, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset0);
   176e8:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
   176ec:	f897 c02b 	ldrb.w	ip, [r7, #43]	; 0x2b
   176f0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   176f4:	f8a5 c18c 	strh.w	ip, [r5, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset1);
   176f8:	f897 e02e 	ldrb.w	lr, [r7, #46]	; 0x2e
   176fc:	f897 c02d 	ldrb.w	ip, [r7, #45]	; 0x2d
   17700:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   17704:	f8a5 c18e 	strh.w	ip, [r5, #398]	; 0x18e
					sys_le16_to_cpu(cpr->offset2);
   17708:	f897 e030 	ldrb.w	lr, [r7, #48]	; 0x30
   1770c:	f897 c02f 	ldrb.w	ip, [r7, #47]	; 0x2f
   17710:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   17714:	f8a5 c190 	strh.w	ip, [r5, #400]	; 0x190
					sys_le16_to_cpu(cpr->offset3);
   17718:	f897 e032 	ldrb.w	lr, [r7, #50]	; 0x32
   1771c:	f897 c031 	ldrb.w	ip, [r7, #49]	; 0x31
   17720:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   17724:	f8a5 c192 	strh.w	ip, [r5, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset4);
   17728:	f897 e034 	ldrb.w	lr, [r7, #52]	; 0x34
   1772c:	f897 c033 	ldrb.w	ip, [r7, #51]	; 0x33
   17730:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   17734:	f8a5 c194 	strh.w	ip, [r5, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset5);
   17738:	f897 c035 	ldrb.w	ip, [r7, #53]	; 0x35
   1773c:	f897 e036 	ldrb.w	lr, [r7, #54]	; 0x36
   17740:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset5 =
   17744:	f8a5 c196 	strh.w	ip, [r5, #406]	; 0x196
				     lll->interval) ||
   17748:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1774c:	4560      	cmp	r0, ip
   1774e:	f000 80ff 	beq.w	17950 <ull_conn_rx+0x15b8>
					if (conn->llcp_enc.pause_tx) {
   17752:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   17756:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
					if (conn->llcp_enc.pause_tx) {
   1775a:	f000 80f3 	beq.w	17944 <ull_conn_rx+0x15ac>
						conn->llcp_conn_param.state =
   1775e:	2102      	movs	r1, #2
   17760:	f361 0202 	bfi	r2, r1, #0, #3
   17764:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
						(*rx)->hdr.type =
   17768:	2201      	movs	r2, #1
   1776a:	713a      	strb	r2, [r7, #4]
				conn->llcp_conn_param.ack--;
   1776c:	9a01      	ldr	r2, [sp, #4]
   1776e:	3a01      	subs	r2, #1
   17770:	f885 217d 	strb.w	r2, [r5, #381]	; 0x17d
				if (!conn_upd_curr) {
   17774:	2b00      	cmp	r3, #0
   17776:	f47e ae78 	bne.w	1646a <ull_conn_rx+0xd2>
   1777a:	e587      	b.n	1728c <ull_conn_rx+0xef4>
				      0x03) == 0x02) &&
   1777c:	f895 10ea 	ldrb.w	r1, [r5, #234]	; 0xea
   17780:	2903      	cmp	r1, #3
   17782:	f47f ab87 	bne.w	16e94 <ull_conn_rx+0xafc>
   17786:	f7ff bb7e 	b.w	16e86 <ull_conn_rx+0xaee>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1778a:	2b23      	cmp	r3, #35	; 0x23
   1778c:	f43f ac2e 	beq.w	16fec <ull_conn_rx+0xc54>
			conn->slave.ticks_to_offset =
   17790:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
   17794:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
   17798:	e428      	b.n	16fec <ull_conn_rx+0xc54>
	struct node_tx *tx = NULL;
   1779a:	2300      	movs	r3, #0
   1779c:	f7fe bf51 	b.w	16642 <ull_conn_rx+0x2aa>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177a0:	2201      	movs	r2, #1
   177a2:	711a      	strb	r2, [r3, #4]
   177a4:	f7fe bf27 	b.w	165f6 <ull_conn_rx+0x25e>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   177a8:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_ack += 2U;
   177ac:	3202      	adds	r2, #2
   177ae:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   177b2:	bb13      	cbnz	r3, 177fa <ull_conn_rx+0x1462>
			conn->slave.llcp_type = conn->llcp_type;
   177b4:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   177b8:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   177bc:	f7ff ba2f 	b.w	16c1e <ull_conn_rx+0x886>
		LL_ASSERT(conn_upd_curr == conn);
   177c0:	4e7b      	ldr	r6, [pc, #492]	; (179b0 <ull_conn_rx+0x1618>)
   177c2:	6831      	ldr	r1, [r6, #0]
   177c4:	428d      	cmp	r5, r1
   177c6:	d010      	beq.n	177ea <ull_conn_rx+0x1452>
   177c8:	4a7a      	ldr	r2, [pc, #488]	; (179b4 <ull_conn_rx+0x161c>)
   177ca:	497b      	ldr	r1, [pc, #492]	; (179b8 <ull_conn_rx+0x1620>)
   177cc:	487b      	ldr	r0, [pc, #492]	; (179bc <ull_conn_rx+0x1624>)
   177ce:	f241 13ba 	movw	r3, #4538	; 0x11ba
   177d2:	f00a fd81 	bl	222d8 <printk>
   177d6:	4040      	eors	r0, r0
   177d8:	f380 8811 	msr	BASEPRI, r0
   177dc:	f04f 0003 	mov.w	r0, #3
   177e0:	df02      	svc	2
   177e2:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   177e6:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   177ea:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   177ee:	2300      	movs	r3, #0
   177f0:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   177f2:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   177f6:	f7ff bac0 	b.w	16d7a <ull_conn_rx+0x9e2>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   177fa:	4a6e      	ldr	r2, [pc, #440]	; (179b4 <ull_conn_rx+0x161c>)
   177fc:	4970      	ldr	r1, [pc, #448]	; (179c0 <ull_conn_rx+0x1628>)
   177fe:	486f      	ldr	r0, [pc, #444]	; (179bc <ull_conn_rx+0x1624>)
   17800:	f241 6309 	movw	r3, #5641	; 0x1609
   17804:	f00a fd68 	bl	222d8 <printk>
   17808:	4040      	eors	r0, r0
   1780a:	f380 8811 	msr	BASEPRI, r0
   1780e:	f04f 0003 	mov.w	r0, #3
   17812:	df02      	svc	2
   17814:	e7ce      	b.n	177b4 <ull_conn_rx+0x141c>
			tx->next = conn->tx_head->next;
   17816:	6811      	ldr	r1, [r2, #0]
   17818:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1781a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1781c:	e9c5 0070 	strd	r0, r0, [r5, #448]	; 0x1c0
   17820:	f7ff b9b0 	b.w	16b84 <ull_conn_rx+0x7ec>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17824:	6823      	ldr	r3, [r4, #0]
   17826:	2119      	movs	r1, #25
   17828:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   1782a:	7738      	strb	r0, [r7, #28]
		p->tx = conn->lll.phy_tx;
   1782c:	777a      	strb	r2, [r7, #29]
		p->rx = conn->lll.phy_rx;
   1782e:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   17832:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17836:	77bb      	strb	r3, [r7, #30]
		if (err) {
   17838:	f7fe be1f 	b.w	1647a <ull_conn_rx+0xe2>
	LL_ASSERT(rx_dle);
   1783c:	4a5d      	ldr	r2, [pc, #372]	; (179b4 <ull_conn_rx+0x161c>)
   1783e:	4961      	ldr	r1, [pc, #388]	; (179c4 <ull_conn_rx+0x162c>)
   17840:	485e      	ldr	r0, [pc, #376]	; (179bc <ull_conn_rx+0x1624>)
   17842:	f241 4372 	movw	r3, #5234	; 0x1472
   17846:	f00a fd47 	bl	222d8 <printk>
   1784a:	4040      	eors	r0, r0
   1784c:	f380 8811 	msr	BASEPRI, r0
   17850:	f04f 0003 	mov.w	r0, #3
   17854:	df02      	svc	2
   17856:	e5ca      	b.n	173ee <ull_conn_rx+0x1056>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   17858:	2a23      	cmp	r2, #35	; 0x23
   1785a:	f43f aa87 	beq.w	16d6c <ull_conn_rx+0x9d4>
			conn->slave.ticks_to_offset =
   1785e:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
   17862:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
   17866:	f7ff ba81 	b.w	16d6c <ull_conn_rx+0x9d4>
				conn->lll.max_tx_octets = eff_tx_octets;
   1786a:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   1786e:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   17872:	e68e      	b.n	17592 <ull_conn_rx+0x11fa>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17874:	4558      	cmp	r0, fp
   17876:	f47f ae75 	bne.w	17564 <ull_conn_rx+0x11cc>
			    eff_rx_time == conn->lll.max_rx_time &&
   1787a:	45d4      	cmp	ip, sl
   1787c:	f47f ae72 	bne.w	17564 <ull_conn_rx+0x11cc>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17880:	6822      	ldr	r2, [r4, #0]
   17882:	2401      	movs	r4, #1
   17884:	7114      	strb	r4, [r2, #4]
				goto send_length_resp;
   17886:	f7ff bb6a 	b.w	16f5e <ull_conn_rx+0xbc6>
			     lll->interval) ||
   1788a:	8e2c      	ldrh	r4, [r5, #48]	; 0x30
   1788c:	4564      	cmp	r4, ip
   1788e:	f47f acf0 	bne.w	17272 <ull_conn_rx+0xeda>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17892:	f240 44e2 	movw	r4, #1250	; 0x4e2
   17896:	fb04 f101 	mul.w	r1, r4, r1
   1789a:	f242 7410 	movw	r4, #10000	; 0x2710
   1789e:	fb04 1202 	mla	r2, r4, r2, r1
   178a2:	3a01      	subs	r2, #1
   178a4:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   178a8:	f8b5 10c6 	ldrh.w	r1, [r5, #198]	; 0xc6
   178ac:	b292      	uxth	r2, r2
   178ae:	4291      	cmp	r1, r2
   178b0:	f47f acdf 	bne.w	17272 <ull_conn_rx+0xeda>
				conn->llcp_conn_param.state =
   178b4:	f8b5 217e 	ldrh.w	r2, [r5, #382]	; 0x17e
   178b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   178bc:	f042 0201 	orr.w	r2, r2, #1
   178c0:	f8a5 217e 	strh.w	r2, [r5, #382]	; 0x17e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   178c4:	2201      	movs	r2, #1
   178c6:	713a      	strb	r2, [r7, #4]
   178c8:	e4da      	b.n	17280 <ull_conn_rx+0xee8>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   178ca:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
   178ce:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
   178d2:	429a      	cmp	r2, r3
   178d4:	d00e      	beq.n	178f4 <ull_conn_rx+0x155c>
   178d6:	4a37      	ldr	r2, [pc, #220]	; (179b4 <ull_conn_rx+0x161c>)
   178d8:	493b      	ldr	r1, [pc, #236]	; (179c8 <ull_conn_rx+0x1630>)
   178da:	4838      	ldr	r0, [pc, #224]	; (179bc <ull_conn_rx+0x1624>)
   178dc:	f241 139f 	movw	r3, #4511	; 0x119f
   178e0:	f00a fcfa 	bl	222d8 <printk>
   178e4:	4040      	eors	r0, r0
   178e6:	f380 8811 	msr	BASEPRI, r0
   178ea:	f04f 0003 	mov.w	r0, #3
   178ee:	df02      	svc	2
   178f0:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   178f4:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   178f8:	2105      	movs	r1, #5
   178fa:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   178fe:	3b01      	subs	r3, #1
   17900:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17904:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17908:	f002 0308 	and.w	r3, r2, #8
   1790c:	f895 2112 	ldrb.w	r2, [r5, #274]	; 0x112
		conn->llcp_cu.win_size = 1U;
   17910:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17912:	430b      	orrs	r3, r1
   17914:	f022 020f 	bic.w	r2, r2, #15
   17918:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1791a:	f885 1120 	strb.w	r1, [r5, #288]	; 0x120
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1791e:	f8b5 2184 	ldrh.w	r2, [r5, #388]	; 0x184
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17922:	f8b5 1182 	ldrh.w	r1, [r5, #386]	; 0x182
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17926:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   1792a:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1792c:	f8b5 3186 	ldrh.w	r3, [r5, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   17930:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17934:	f8a5 1114 	strh.w	r1, [r5, #276]	; 0x114
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17938:	f8a5 2116 	strh.w	r2, [r5, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1793c:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
	if (err) {
   17940:	f7fe bd91 	b.w	16466 <ull_conn_rx+0xce>
						conn->llcp_conn_param.state =
   17944:	2103      	movs	r1, #3
   17946:	f361 0202 	bfi	r2, r1, #0, #3
   1794a:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
   1794e:	e70d      	b.n	1776c <ull_conn_rx+0x13d4>
				     lll->interval) ||
   17950:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   17952:	42a0      	cmp	r0, r4
   17954:	f47f aefd 	bne.w	17752 <ull_conn_rx+0x13ba>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17958:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1795c:	fb00 f00c 	mul.w	r0, r0, ip
   17960:	f242 7410 	movw	r4, #10000	; 0x2710
   17964:	fb04 0101 	mla	r1, r4, r1, r0
   17968:	3901      	subs	r1, #1
   1796a:	fbb1 f1f0 	udiv	r1, r1, r0
				     lll->latency) ||
   1796e:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
   17972:	b289      	uxth	r1, r1
   17974:	4288      	cmp	r0, r1
   17976:	f47f aeec 	bne.w	17752 <ull_conn_rx+0x13ba>
					conn->llcp_conn_param.state =
   1797a:	f8b5 217e 	ldrh.w	r2, [r5, #382]	; 0x17e
   1797e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   17982:	f042 0201 	orr.w	r2, r2, #1
   17986:	f8a5 217e 	strh.w	r2, [r5, #382]	; 0x17e
					(*rx)->hdr.type =
   1798a:	2201      	movs	r2, #1
   1798c:	713a      	strb	r2, [r7, #4]
   1798e:	e6ed      	b.n	1776c <ull_conn_rx+0x13d4>
			tx->next = conn->tx_head->next;
   17990:	6819      	ldr	r1, [r3, #0]
   17992:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   17994:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   17996:	e9c5 2270 	strd	r2, r2, [r5, #448]	; 0x1c0
   1799a:	f7ff bbbd 	b.w	17118 <ull_conn_rx+0xd80>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1799e:	f895 11a6 	ldrb.w	r1, [r5, #422]	; 0x1a6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   179a2:	f011 0f06 	tst.w	r1, #6
   179a6:	f43f aa9a 	beq.w	16ede <ull_conn_rx+0xb46>
   179aa:	f7fe be43 	b.w	16634 <ull_conn_rx+0x29c>
   179ae:	bf00      	nop
   179b0:	2000eb1c 	.word	0x2000eb1c
   179b4:	0002929c 	.word	0x0002929c
   179b8:	00029410 	.word	0x00029410
   179bc:	00028de0 	.word	0x00028de0
   179c0:	000293c4 	.word	0x000293c4
   179c4:	00029428 	.word	0x00029428
   179c8:	000293e8 	.word	0x000293e8

000179cc <ull_conn_llcp>:
{
   179cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179d0:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   179d2:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   179d6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   179da:	4298      	cmp	r0, r3
{
   179dc:	460d      	mov	r5, r1
   179de:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   179e0:	d076      	beq.n	17ad0 <ull_conn_llcp+0x104>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   179e2:	1a1b      	subs	r3, r3, r0
   179e4:	f003 0303 	and.w	r3, r3, #3
   179e8:	2b02      	cmp	r3, #2
   179ea:	d049      	beq.n	17a80 <ull_conn_llcp+0xb4>
   179ec:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   179f0:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   179f2:	f1bc 0f00 	cmp.w	ip, #0
   179f6:	f2c0 8094 	blt.w	17b22 <ull_conn_llcp+0x156>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   179fa:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   179fe:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   17a02:	429a      	cmp	r2, r3
   17a04:	d039      	beq.n	17a7a <ull_conn_llcp+0xae>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17a06:	4887      	ldr	r0, [pc, #540]	; (17c24 <ull_conn_llcp+0x258>)
   17a08:	f7f8 ff46 	bl	10898 <mem_acquire>
		if (tx) {
   17a0c:	b360      	cbz	r0, 17a68 <ull_conn_llcp+0x9c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   17a0e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   17a12:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a16:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   17a18:	2202      	movs	r2, #2
   17a1a:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a1c:	f043 0303 	orr.w	r3, r3, #3
   17a20:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   17a22:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   17a24:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_tx->llctrl.terminate_ind.error_code =
   17a28:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   17a2c:	7202      	strb	r2, [r0, #8]
	if (
   17a2e:	2b00      	cmp	r3, #0
   17a30:	d041      	beq.n	17ab6 <ull_conn_llcp+0xea>
	    !conn->llcp_enc.pause_tx &&
   17a32:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17a36:	0791      	lsls	r1, r2, #30
   17a38:	d43d      	bmi.n	17ab6 <ull_conn_llcp+0xea>
	    !conn->llcp_phy.pause_tx &&
   17a3a:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17a3e:	07d2      	lsls	r2, r2, #31
   17a40:	d439      	bmi.n	17ab6 <ull_conn_llcp+0xea>
		if (conn->tx_head == conn->tx_data) {
   17a42:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17a46:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17a48:	bf04      	itt	eq
   17a4a:	681a      	ldreq	r2, [r3, #0]
   17a4c:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17a50:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17a54:	bb9a      	cbnz	r2, 17abe <ull_conn_llcp+0xf2>
			tx->next = conn->tx_head->next;
   17a56:	681a      	ldr	r2, [r3, #0]
   17a58:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17a5a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17a5c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17a5e:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   17a62:	b90b      	cbnz	r3, 17a68 <ull_conn_llcp+0x9c>
		conn->tx_data_last = tx;
   17a64:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		if (!conn->procedure_expire) {
   17a68:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
   17a6c:	b928      	cbnz	r0, 17a7a <ull_conn_llcp+0xae>
			conn->procedure_expire = conn->supervision_reload;
   17a6e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
   17a72:	2b01      	cmp	r3, #1
   17a74:	d96f      	bls.n	17b56 <ull_conn_llcp+0x18a>
			conn->procedure_expire = conn->supervision_reload;
   17a76:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   17a7a:	2000      	movs	r0, #0
}
   17a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17a80:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
   17a84:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   17a88:	429a      	cmp	r2, r3
   17a8a:	d006      	beq.n	17a9a <ull_conn_llcp+0xce>
			     LLCP_LENGTH_STATE_RESIZE) ||
   17a8c:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
			if ((conn->llcp_length.state ==
   17a90:	f003 0306 	and.w	r3, r3, #6
   17a94:	2b04      	cmp	r3, #4
   17a96:	f000 81c8 	beq.w	17e2a <ull_conn_llcp+0x45e>
		switch (conn->llcp_type) {
   17a9a:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
   17a9e:	1e7b      	subs	r3, r7, #1
   17aa0:	2b05      	cmp	r3, #5
   17aa2:	f200 81ac 	bhi.w	17dfe <ull_conn_llcp+0x432>
   17aa6:	e8df f013 	tbh	[pc, r3, lsl #1]
   17aaa:	0031      	.short	0x0031
   17aac:	00c50151 	.word	0x00c50151
   17ab0:	007e01aa 	.word	0x007e01aa
   17ab4:	0073      	.short	0x0073
		if (!conn->tx_ctrl) {
   17ab6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17aba:	2a00      	cmp	r2, #0
   17abc:	d062      	beq.n	17b84 <ull_conn_llcp+0x1b8>
	tx->next = conn->tx_ctrl_last->next;
   17abe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17ac2:	681a      	ldr	r2, [r3, #0]
   17ac4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17ac6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17ac8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   17aca:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
}
   17ace:	e7c8      	b.n	17a62 <ull_conn_llcp+0x96>
   17ad0:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
	if ((conn->llcp_ack == conn->llcp_req) &&
   17ad4:	2a00      	cmp	r2, #0
   17ad6:	4694      	mov	ip, r2
   17ad8:	f2c0 81a1 	blt.w	17e1e <ull_conn_llcp+0x452>
	    !conn->llcp_enc.pause_rx) {
   17adc:	f894 e15e 	ldrb.w	lr, [r4, #350]	; 0x15e
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   17ae0:	f01e 0801 	ands.w	r8, lr, #1
   17ae4:	d185      	bne.n	179f2 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   17ae6:	f894 9111 	ldrb.w	r9, [r4, #273]	; 0x111
   17aea:	f894 7110 	ldrb.w	r7, [r4, #272]	; 0x110
   17aee:	454f      	cmp	r7, r9
   17af0:	f000 82a7 	beq.w	18042 <ull_conn_llcp+0x676>
			conn->llcp_type = LLCP_CONN_UPD;
   17af4:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   17af6:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   17af8:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   17afc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17b00:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   17b04:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   17b08:	429a      	cmp	r2, r3
   17b0a:	d1bf      	bne.n	17a8c <ull_conn_llcp+0xc0>
			if (event_conn_upd_prep(conn, lazy,
   17b0c:	462a      	mov	r2, r5
   17b0e:	4631      	mov	r1, r6
   17b10:	4620      	mov	r0, r4
   17b12:	f7ea fa05 	bl	1f20 <event_conn_upd_prep>
   17b16:	2800      	cmp	r0, #0
   17b18:	f040 817e 	bne.w	17e18 <ull_conn_llcp+0x44c>
				return -ECANCELED;
   17b1c:	f06f 0047 	mvn.w	r0, #71	; 0x47
   17b20:	e7ac      	b.n	17a7c <ull_conn_llcp+0xb0>
   17b22:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17b26:	2900      	cmp	r1, #0
   17b28:	f43f af67 	beq.w	179fa <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   17b2c:	2902      	cmp	r1, #2
   17b2e:	f000 813d 	beq.w	17dac <ull_conn_llcp+0x3e0>
   17b32:	2906      	cmp	r1, #6
   17b34:	d01d      	beq.n	17b72 <ull_conn_llcp+0x1a6>
   17b36:	2901      	cmp	r1, #1
   17b38:	d012      	beq.n	17b60 <ull_conn_llcp+0x194>
			LL_ASSERT(0);
   17b3a:	4a3b      	ldr	r2, [pc, #236]	; (17c28 <ull_conn_llcp+0x25c>)
   17b3c:	493b      	ldr	r1, [pc, #236]	; (17c2c <ull_conn_llcp+0x260>)
   17b3e:	483c      	ldr	r0, [pc, #240]	; (17c30 <ull_conn_llcp+0x264>)
   17b40:	f240 4316 	movw	r3, #1046	; 0x416
   17b44:	f00a fbc8 	bl	222d8 <printk>
   17b48:	4040      	eors	r0, r0
   17b4a:	f380 8811 	msr	BASEPRI, r0
   17b4e:	f04f 0003 	mov.w	r0, #3
   17b52:	df02      	svc	2
			break;
   17b54:	e751      	b.n	179fa <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   17b56:	3301      	adds	r3, #1
   17b58:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   17b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (event_conn_upd_prep(conn, lazy,
   17b60:	462a      	mov	r2, r5
   17b62:	4631      	mov	r1, r6
   17b64:	4620      	mov	r0, r4
   17b66:	f7ea f9db 	bl	1f20 <event_conn_upd_prep>
   17b6a:	2800      	cmp	r0, #0
   17b6c:	f47f af45 	bne.w	179fa <ull_conn_llcp+0x2e>
   17b70:	e7d4      	b.n	17b1c <ull_conn_llcp+0x150>
			event_counter = lll->event_counter +
   17b72:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   17b74:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17b76:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   17b78:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   17b7a:	4620      	mov	r0, r4
   17b7c:	b291      	uxth	r1, r2
   17b7e:	f7fd fec5 	bl	1590c <event_phy_upd_ind_prep>
		break;
   17b82:	e73a      	b.n	179fa <ull_conn_llcp+0x2e>
			tx->next = conn->tx_head;
   17b84:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17b86:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17b8a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   17b8e:	e768      	b.n	17a62 <ull_conn_llcp+0x96>
			event_counter = lll->event_counter +
   17b90:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   17b92:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   17b94:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   17b96:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   17b98:	b289      	uxth	r1, r1
   17b9a:	4620      	mov	r0, r4
   17b9c:	f7fd feb6 	bl	1590c <event_phy_upd_ind_prep>
		break;
   17ba0:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17ba4:	e725      	b.n	179f2 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17ba6:	481f      	ldr	r0, [pc, #124]	; (17c24 <ull_conn_llcp+0x258>)
   17ba8:	f7f8 fe76 	bl	10898 <mem_acquire>
	if (tx) {
   17bac:	2800      	cmp	r0, #0
   17bae:	f000 8133 	beq.w	17e18 <ull_conn_llcp+0x44c>
		conn->llcp_ack = conn->llcp_req;
   17bb2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17bb6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17bba:	7903      	ldrb	r3, [r0, #4]
   17bbc:	f043 0303 	orr.w	r3, r3, #3
   17bc0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   17bc2:	2301      	movs	r3, #1
   17bc4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   17bc6:	2312      	movs	r3, #18
   17bc8:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   17bca:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17bce:	2b00      	cmp	r3, #0
   17bd0:	f000 8275 	beq.w	180be <ull_conn_llcp+0x6f2>
	    !conn->llcp_enc.pause_tx &&
   17bd4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17bd8:	0791      	lsls	r1, r2, #30
   17bda:	f100 8270 	bmi.w	180be <ull_conn_llcp+0x6f2>
	    !conn->llcp_phy.pause_tx &&
   17bde:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17be2:	07d2      	lsls	r2, r2, #31
   17be4:	f100 826b 	bmi.w	180be <ull_conn_llcp+0x6f2>
		if (conn->tx_head == conn->tx_data) {
   17be8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17bec:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17bee:	bf04      	itt	eq
   17bf0:	681a      	ldreq	r2, [r3, #0]
   17bf2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17bf6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17bfa:	2a00      	cmp	r2, #0
   17bfc:	f000 8687 	beq.w	1890e <ull_conn_llcp+0xf42>
	tx->next = conn->tx_ctrl_last->next;
   17c00:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17c04:	681a      	ldr	r2, [r3, #0]
   17c06:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17c08:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17c0a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   17c0c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17c10:	2b00      	cmp	r3, #0
   17c12:	f000 8399 	beq.w	18348 <ull_conn_llcp+0x97c>
		conn->procedure_expire = conn->procedure_reload;
   17c16:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   17c1a:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17c1e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   17c22:	e6e6      	b.n	179f2 <ull_conn_llcp+0x26>
   17c24:	2000eba0 	.word	0x2000eba0
   17c28:	0002929c 	.word	0x0002929c
   17c2c:	00028e78 	.word	0x00028e78
   17c30:	00028de0 	.word	0x00028de0
	if (conn->llcp.encryption.state) {
   17c34:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17c38:	f013 0803 	ands.w	r8, r3, #3
   17c3c:	f000 814a 	beq.w	17ed4 <ull_conn_llcp+0x508>
		if (lll->role &&
   17c40:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17c44:	2b00      	cmp	r3, #0
   17c46:	f6bf aed8 	bge.w	179fa <ull_conn_llcp+0x2e>
   17c4a:	f1b8 0f01 	cmp.w	r8, #1
   17c4e:	f47f af68 	bne.w	17b22 <ull_conn_llcp+0x156>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17c52:	48d1      	ldr	r0, [pc, #836]	; (17f98 <ull_conn_llcp+0x5cc>)
   17c54:	f7f8 fe20 	bl	10898 <mem_acquire>
	if (!tx) {
   17c58:	4680      	mov	r8, r0
   17c5a:	2800      	cmp	r0, #0
   17c5c:	f000 80dc 	beq.w	17e18 <ull_conn_llcp+0x44c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c60:	7903      	ldrb	r3, [r0, #4]
   17c62:	f043 0303 	orr.w	r3, r3, #3
   17c66:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17c68:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17c6c:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   17c6e:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17c72:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17c74:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   17c78:	210c      	movs	r1, #12
   17c7a:	4638      	mov	r0, r7
   17c7c:	f003 f9b0 	bl	1afe0 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   17c80:	4639      	mov	r1, r7
   17c82:	2208      	movs	r2, #8
   17c84:	f504 7081 	add.w	r0, r4, #258	; 0x102
   17c88:	f00c ffe2 	bl	24c50 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   17c8c:	464a      	mov	r2, r9
   17c8e:	f108 0110 	add.w	r1, r8, #16
   17c92:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   17c96:	f00c ffdb 	bl	24c50 <memcpy>
	    conn->tx_head &&
   17c9a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	f000 8450 	beq.w	18544 <ull_conn_llcp+0xb78>
	    !conn->llcp_enc.pause_tx &&
   17ca4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17ca8:	0791      	lsls	r1, r2, #30
   17caa:	f100 844b 	bmi.w	18544 <ull_conn_llcp+0xb78>
	    !conn->llcp_phy.pause_tx &&
   17cae:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17cb2:	07d2      	lsls	r2, r2, #31
   17cb4:	f100 8446 	bmi.w	18544 <ull_conn_llcp+0xb78>
		if (conn->tx_head == conn->tx_data) {
   17cb8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17cbc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17cbe:	bf04      	itt	eq
   17cc0:	681a      	ldreq	r2, [r3, #0]
   17cc2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17cc6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17cca:	2a00      	cmp	r2, #0
   17ccc:	f000 8704 	beq.w	18ad8 <ull_conn_llcp+0x110c>
	tx->next = conn->tx_ctrl_last->next;
   17cd0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17cd4:	681a      	ldr	r2, [r3, #0]
   17cd6:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   17cda:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17cde:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17ce2:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17ce6:	2b00      	cmp	r3, #0
   17ce8:	f000 85f3 	beq.w	188d2 <ull_conn_llcp+0xf06>
			rx = ll_pdu_rx_alloc();
   17cec:	f7fc fc0c 	bl	14508 <ll_pdu_rx_alloc>
			if (!rx) {
   17cf0:	4607      	mov	r7, r0
   17cf2:	2800      	cmp	r0, #0
   17cf4:	f000 8090 	beq.w	17e18 <ull_conn_llcp+0x44c>
			rx->hdr.handle = conn->lll.handle;
   17cf8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   17cfa:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17cfc:	2303      	movs	r3, #3
   17cfe:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17d00:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   17d02:	7f3b      	ldrb	r3, [r7, #28]
   17d04:	f043 0303 	orr.w	r3, r3, #3
   17d08:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17d0a:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   17d0c:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17d0e:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   17d10:	f204 1161 	addw	r1, r4, #353	; 0x161
   17d14:	f107 0020 	add.w	r0, r7, #32
   17d18:	f00c ff9a 	bl	24c50 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   17d1c:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
   17d20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17d24:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   17d28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   17d2c:	6838      	ldr	r0, [r7, #0]
   17d2e:	4639      	mov	r1, r7
   17d30:	f7fc fbbc 	bl	144ac <ll_rx_put>
			ll_rx_sched();
   17d34:	f7fc fbc4 	bl	144c0 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   17d38:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17d3c:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17d40:	2202      	movs	r2, #2
   17d42:	f362 0301 	bfi	r3, r2, #0, #2
   17d46:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   17d4a:	e652      	b.n	179f2 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17d4c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   17d4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   17d50:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   17d52:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
					lll->latency_prepare + lazy;
   17d56:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   17d58:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   17d5c:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   17d5e:	d168      	bne.n	17e32 <ull_conn_llcp+0x466>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17d60:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17d64:	1afb      	subs	r3, r7, r3
   17d66:	0418      	lsls	r0, r3, #16
   17d68:	d456      	bmi.n	17e18 <ull_conn_llcp+0x44c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17d6a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17d6e:	2b00      	cmp	r3, #0
   17d70:	f2c0 82e2 	blt.w	18338 <ull_conn_llcp+0x96c>
			conn->llcp_ack = conn->llcp_req;
   17d74:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17d78:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
   17d7c:	f104 0738 	add.w	r7, r4, #56	; 0x38
   17d80:	2205      	movs	r2, #5
   17d82:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17d86:	4638      	mov	r0, r7
   17d88:	f00c ff62 	bl	24c50 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17d8c:	2105      	movs	r1, #5
   17d8e:	4638      	mov	r0, r7
   17d90:	f7f8 ff52 	bl	10c38 <util_ones_count_get>
		lll->data_chan_count =
   17d94:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17d98:	2301      	movs	r3, #1
		lll->data_chan_count =
   17d9a:	f360 0c05 	bfi	ip, r0, #0, #6
   17d9e:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17da2:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
   17da6:	fa4f fc8c 	sxtb.w	ip, ip
   17daa:	e622      	b.n	179f2 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17dac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17dae:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   17db0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   17db4:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   17db6:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   17db8:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   17dbc:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   17dbe:	f040 80f3 	bne.w	17fa8 <ull_conn_llcp+0x5dc>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17dc2:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   17dc6:	1ab6      	subs	r6, r6, r2
   17dc8:	0430      	lsls	r0, r6, #16
   17dca:	f53f ae16 	bmi.w	179fa <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   17dce:	f104 0538 	add.w	r5, r4, #56	; 0x38
   17dd2:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   17dd4:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		memcpy(&lll->data_chan_map[0],
   17dd8:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17ddc:	4628      	mov	r0, r5
   17dde:	f00c ff37 	bl	24c50 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17de2:	2105      	movs	r1, #5
   17de4:	4628      	mov	r0, r5
   17de6:	f7f8 ff27 	bl	10c38 <util_ones_count_get>
		lll->data_chan_count =
   17dea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17dee:	2201      	movs	r2, #1
		lll->data_chan_count =
   17df0:	f360 0305 	bfi	r3, r0, #0, #6
   17df4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17df8:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
   17dfc:	e5fd      	b.n	179fa <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   17dfe:	4a67      	ldr	r2, [pc, #412]	; (17f9c <ull_conn_llcp+0x5d0>)
   17e00:	4967      	ldr	r1, [pc, #412]	; (17fa0 <ull_conn_llcp+0x5d4>)
   17e02:	4868      	ldr	r0, [pc, #416]	; (17fa4 <ull_conn_llcp+0x5d8>)
   17e04:	f240 33e5 	movw	r3, #997	; 0x3e5
   17e08:	f00a fa66 	bl	222d8 <printk>
   17e0c:	4040      	eors	r0, r0
   17e0e:	f380 8811 	msr	BASEPRI, r0
   17e12:	f04f 0003 	mov.w	r0, #3
   17e16:	df02      	svc	2
			break;
   17e18:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17e1c:	e5e9      	b.n	179f2 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   17e1e:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
   17e22:	2900      	cmp	r1, #0
   17e24:	f47f ae82 	bne.w	17b2c <ull_conn_llcp+0x160>
   17e28:	e658      	b.n	17adc <ull_conn_llcp+0x110>
				event_len_prep(conn);
   17e2a:	4620      	mov	r0, r4
   17e2c:	f7fd fc86 	bl	1573c <event_len_prep>
   17e30:	e633      	b.n	17a9a <ull_conn_llcp+0xce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17e32:	4859      	ldr	r0, [pc, #356]	; (17f98 <ull_conn_llcp+0x5cc>)
   17e34:	f7f8 fd30 	bl	10898 <mem_acquire>
		if (tx) {
   17e38:	4680      	mov	r8, r0
   17e3a:	2800      	cmp	r0, #0
   17e3c:	d0ec      	beq.n	17e18 <ull_conn_llcp+0x44c>
			conn->llcp.chan_map.instant = event_counter +
   17e3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   17e40:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   17e44:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   17e46:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   17e48:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17e4c:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   17e4e:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17e52:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   17e56:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17e5a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17e5c:	2308      	movs	r3, #8
   17e5e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17e60:	2301      	movs	r3, #1
   17e62:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17e64:	2205      	movs	r2, #5
   17e66:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17e6a:	3008      	adds	r0, #8
   17e6c:	f00c fef0 	bl	24c50 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17e70:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17e74:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   17e78:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17e7c:	2b00      	cmp	r3, #0
   17e7e:	f000 8266 	beq.w	1834e <ull_conn_llcp+0x982>
	    !conn->llcp_enc.pause_tx &&
   17e82:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17e86:	0792      	lsls	r2, r2, #30
   17e88:	f100 8261 	bmi.w	1834e <ull_conn_llcp+0x982>
	    !conn->llcp_phy.pause_tx &&
   17e8c:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17e90:	07d7      	lsls	r7, r2, #31
   17e92:	f100 825c 	bmi.w	1834e <ull_conn_llcp+0x982>
		if (conn->tx_head == conn->tx_data) {
   17e96:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17e9a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17e9c:	bf04      	itt	eq
   17e9e:	681a      	ldreq	r2, [r3, #0]
   17ea0:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17ea4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17ea8:	2a00      	cmp	r2, #0
   17eaa:	f000 8602 	beq.w	18ab2 <ull_conn_llcp+0x10e6>
	tx->next = conn->tx_ctrl_last->next;
   17eae:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17eb2:	681a      	ldr	r2, [r3, #0]
   17eb4:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   17eb8:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17ebc:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17ec0:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17ec4:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17ec8:	2b00      	cmp	r3, #0
   17eca:	f47f ad92 	bne.w	179f2 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   17ece:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   17ed2:	e58e      	b.n	179f2 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17ed4:	4830      	ldr	r0, [pc, #192]	; (17f98 <ull_conn_llcp+0x5cc>)
   17ed6:	f7f8 fcdf 	bl	10898 <mem_acquire>
	if (!tx) {
   17eda:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17ede:	4681      	mov	r9, r0
   17ee0:	2800      	cmp	r0, #0
   17ee2:	f43f ad86 	beq.w	179f2 <ull_conn_llcp+0x26>
	if (!lll->role) {
   17ee6:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   17eea:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   17eee:	f280 82a5 	bge.w	1843c <ull_conn_llcp+0xa70>
	else if (!lll->enc_rx) {
   17ef2:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   17ef6:	0719      	lsls	r1, r3, #28
   17ef8:	f100 842b 	bmi.w	18752 <ull_conn_llcp+0xd86>
		if (conn->llcp.encryption.error_code) {
   17efc:	f894 80f9 	ldrb.w	r8, [r4, #249]	; 0xf9
   17f00:	f1b8 0f00 	cmp.w	r8, #0
   17f04:	f000 83b5 	beq.w	18672 <ull_conn_llcp+0xca6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17f08:	7903      	ldrb	r3, [r0, #4]
   17f0a:	f043 0303 	orr.w	r3, r3, #3
   17f0e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   17f10:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17f14:	07da      	lsls	r2, r3, #31
   17f16:	f140 84d4 	bpl.w	188c2 <ull_conn_llcp+0xef6>
	    (conn->llcp_feature.features_conn &
   17f1a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   17f1e:	075b      	lsls	r3, r3, #29
   17f20:	f140 84cf 	bpl.w	188c2 <ull_conn_llcp+0xef6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   17f24:	2311      	movs	r3, #17
   17f26:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17f28:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   17f2a:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17f2e:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   17f30:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   17f34:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	conn->llcp.encryption.error_code = 0U;
   17f38:	2200      	movs	r2, #0
   17f3a:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	if (
   17f3e:	2b00      	cmp	r3, #0
   17f40:	f000 8454 	beq.w	187ec <ull_conn_llcp+0xe20>
	    !conn->llcp_enc.pause_tx &&
   17f44:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17f48:	0790      	lsls	r0, r2, #30
   17f4a:	f100 844f 	bmi.w	187ec <ull_conn_llcp+0xe20>
	    !conn->llcp_phy.pause_tx &&
   17f4e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17f52:	07d1      	lsls	r1, r2, #31
   17f54:	f100 844a 	bmi.w	187ec <ull_conn_llcp+0xe20>
		if (conn->tx_head == conn->tx_data) {
   17f58:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17f5c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17f5e:	bf04      	itt	eq
   17f60:	681a      	ldreq	r2, [r3, #0]
   17f62:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17f66:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17f6a:	2a00      	cmp	r2, #0
   17f6c:	f000 85e6 	beq.w	18b3c <ull_conn_llcp+0x1170>
	tx->next = conn->tx_ctrl_last->next;
   17f70:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17f74:	681a      	ldr	r2, [r3, #0]
   17f76:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   17f7a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   17f7e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17f82:	f8d9 3000 	ldr.w	r3, [r9]
   17f86:	2b00      	cmp	r3, #0
   17f88:	f000 82cf 	beq.w	1852a <ull_conn_llcp+0xb5e>
	conn->llcp_ack = conn->llcp_req;
   17f8c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17f90:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   17f94:	e52d      	b.n	179f2 <ull_conn_llcp+0x26>
   17f96:	bf00      	nop
   17f98:	2000eba0 	.word	0x2000eba0
   17f9c:	0002929c 	.word	0x0002929c
   17fa0:	00028e78 	.word	0x00028e78
   17fa4:	00028de0 	.word	0x00028de0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17fa8:	48ab      	ldr	r0, [pc, #684]	; (18258 <ull_conn_llcp+0x88c>)
   17faa:	f7f8 fc75 	bl	10898 <mem_acquire>
		if (tx) {
   17fae:	4605      	mov	r5, r0
   17fb0:	2800      	cmp	r0, #0
   17fb2:	f43f ad22 	beq.w	179fa <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   17fb6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   17fb8:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17fbc:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   17fbe:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   17fc0:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   17fc4:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   17fc6:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   17fca:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17fce:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   17fd2:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17fd4:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17fd6:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17fd8:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17fda:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17fdc:	2205      	movs	r2, #5
   17fde:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17fe2:	3008      	adds	r0, #8
   17fe4:	f00c fe34 	bl	24c50 <memcpy>
	    conn->tx_head &&
   17fe8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17fec:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   17ff0:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   17ff4:	2b00      	cmp	r3, #0
   17ff6:	f000 81b6 	beq.w	18366 <ull_conn_llcp+0x99a>
	    !conn->llcp_enc.pause_tx &&
   17ffa:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17ffe:	0797      	lsls	r7, r2, #30
   18000:	f100 81b1 	bmi.w	18366 <ull_conn_llcp+0x99a>
	    !conn->llcp_phy.pause_tx &&
   18004:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   18008:	07d6      	lsls	r6, r2, #31
   1800a:	f100 81ac 	bmi.w	18366 <ull_conn_llcp+0x99a>
		if (conn->tx_head == conn->tx_data) {
   1800e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   18012:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   18014:	bf04      	itt	eq
   18016:	681a      	ldreq	r2, [r3, #0]
   18018:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1801c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18020:	2a00      	cmp	r2, #0
   18022:	f000 8551 	beq.w	18ac8 <ull_conn_llcp+0x10fc>
	tx->next = conn->tx_ctrl_last->next;
   18026:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1802a:	681a      	ldr	r2, [r3, #0]
   1802c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1802e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   18030:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   18032:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18036:	2b00      	cmp	r3, #0
   18038:	f47f acdf 	bne.w	179fa <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   1803c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   18040:	e4db      	b.n	179fa <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   18042:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
   18046:	f894 7124 	ldrb.w	r7, [r4, #292]	; 0x124
   1804a:	42b9      	cmp	r1, r7
   1804c:	d042      	beq.n	180d4 <ull_conn_llcp+0x708>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   1804e:	1bc9      	subs	r1, r1, r7
   18050:	07c9      	lsls	r1, r1, #31
   18052:	f57f acce 	bpl.w	179f2 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   18056:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1805a:	f013 0701 	ands.w	r7, r3, #1
   1805e:	f000 818d 	beq.w	1837c <ull_conn_llcp+0x9b0>
		rx = ll_pdu_rx_alloc();
   18062:	f7fc fa51 	bl	14508 <ll_pdu_rx_alloc>
		if (!rx) {
   18066:	4607      	mov	r7, r0
   18068:	b320      	cbz	r0, 180b4 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   1806a:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   1806e:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18072:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   18074:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   18076:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18078:	f043 0303 	orr.w	r3, r3, #3
   1807c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1807e:	2309      	movs	r3, #9
   18080:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   18082:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18084:	2303      	movs	r3, #3
   18086:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   18088:	4641      	mov	r1, r8
   1808a:	2208      	movs	r2, #8
   1808c:	3020      	adds	r0, #32
   1808e:	f00c fe0a 	bl	24ca6 <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
   18092:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	dst[0] = val;
   18096:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
   1809a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   1809e:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   180a0:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
   180a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
   180a8:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   180aa:	6808      	ldr	r0, [r1, #0]
   180ac:	f7fc f9fe 	bl	144ac <ll_rx_put>
		ll_rx_sched();
   180b0:	f7fc fa06 	bl	144c0 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   180b4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   180b8:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
}
   180bc:	e491      	b.n	179e2 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   180be:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   180c2:	2a00      	cmp	r2, #0
   180c4:	f47f ad9c 	bne.w	17c00 <ull_conn_llcp+0x234>
			tx->next = conn->tx_head;
   180c8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   180ca:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   180ce:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   180d2:	e59d      	b.n	17c10 <ull_conn_llcp+0x244>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   180d4:	f894 1131 	ldrb.w	r1, [r4, #305]	; 0x131
   180d8:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
   180dc:	42b9      	cmp	r1, r7
   180de:	d02d      	beq.n	1813c <ull_conn_llcp+0x770>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   180e0:	1bc9      	subs	r1, r1, r7
   180e2:	07c8      	lsls	r0, r1, #31
   180e4:	f57f ac85 	bpl.w	179f2 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   180e8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   180ec:	07d9      	lsls	r1, r3, #31
   180ee:	f140 8398 	bpl.w	18822 <ull_conn_llcp+0xe56>
	} else if (conn->llcp_version.rx) {
   180f2:	0799      	lsls	r1, r3, #30
   180f4:	f140 8387 	bpl.w	18806 <ull_conn_llcp+0xe3a>
		rx = ll_pdu_rx_alloc();
   180f8:	f7fc fa06 	bl	14508 <ll_pdu_rx_alloc>
		if (!rx) {
   180fc:	4601      	mov	r1, r0
   180fe:	2800      	cmp	r0, #0
   18100:	d0d8      	beq.n	180b4 <ull_conn_llcp+0x6e8>
		conn->llcp_version.ack = conn->llcp_version.req;
   18102:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   18106:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		rx->hdr.handle = conn->lll.handle;
   1810a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1810c:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1810e:	2303      	movs	r3, #3
   18110:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18112:	7f03      	ldrb	r3, [r0, #28]
   18114:	f043 0303 	orr.w	r3, r3, #3
   18118:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   1811a:	2306      	movs	r3, #6
   1811c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1811e:	230c      	movs	r3, #12
   18120:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   18122:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
   18126:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   1812a:	f8b4 3134 	ldrh.w	r3, [r4, #308]	; 0x134
   1812e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   18132:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   18136:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   1813a:	e7b6      	b.n	180aa <ull_conn_llcp+0x6de>
		} else if (conn->llcp_conn_param.ack !=
   1813c:	f894 717d 	ldrb.w	r7, [r4, #381]	; 0x17d
   18140:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   18144:	428f      	cmp	r7, r1
   18146:	f000 81f3 	beq.w	18530 <ull_conn_llcp+0xb64>
	conn_upd = conn_upd_curr;
   1814a:	4f44      	ldr	r7, [pc, #272]	; (1825c <ull_conn_llcp+0x890>)
   1814c:	6839      	ldr	r1, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
   1814e:	2900      	cmp	r1, #0
   18150:	f000 83c3 	beq.w	188da <ull_conn_llcp+0xf0e>
   18154:	428c      	cmp	r4, r1
   18156:	f47f ac4c 	bne.w	179f2 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   1815a:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
   1815e:	f001 0107 	and.w	r1, r1, #7
   18162:	2905      	cmp	r1, #5
   18164:	f200 8659 	bhi.w	18e1a <ull_conn_llcp+0x144e>
   18168:	f20f 0804 	addw	r8, pc, #4
   1816c:	f858 f021 	ldr.w	pc, [r8, r1, lsl #2]
   18170:	00018261 	.word	0x00018261
   18174:	000181d9 	.word	0x000181d9
   18178:	00018189 	.word	0x00018189
   1817c:	000179e3 	.word	0x000179e3
   18180:	000179e3 	.word	0x000179e3
   18184:	000179e3 	.word	0x000179e3
	if (conn->llcp_enc.pause_tx) {
   18188:	f01e 0f02 	tst.w	lr, #2
   1818c:	f47f ac31 	bne.w	179f2 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   18190:	f7fc f9ba 	bl	14508 <ll_pdu_rx_alloc>
	if (!rx) {
   18194:	4601      	mov	r1, r0
   18196:	2800      	cmp	r0, #0
   18198:	d08c      	beq.n	180b4 <ull_conn_llcp+0x6e8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1819a:	f894 017e 	ldrb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1819e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   181a0:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   181a2:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   181a6:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   181aa:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   181ac:	f884 017e 	strb.w	r0, [r4, #382]	; 0x17e
	rx->hdr.handle = conn->lll.handle;
   181b0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   181b2:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   181b4:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   181b6:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   181b8:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   181bc:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   181be:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   181c2:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   181c4:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
   181c8:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   181ca:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   181ce:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   181d0:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   181d2:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   181d4:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   181d6:	e768      	b.n	180aa <ull_conn_llcp+0x6de>
	if (conn->llcp_conn_param.status) {
   181d8:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   181dc:	2b00      	cmp	r3, #0
   181de:	f040 8515 	bne.w	18c0c <ull_conn_llcp+0x1240>
	if (!conn->lll.role) {
   181e2:	2a00      	cmp	r2, #0
   181e4:	f2c0 8559 	blt.w	18c9a <ull_conn_llcp+0x12ce>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   181e8:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_offset_us = 0U;
   181ec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   181f0:	2205      	movs	r2, #5
   181f2:	f362 0102 	bfi	r1, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   181f6:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   181fa:	f884 117e 	strb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_size = 1U;
   181fe:	2001      	movs	r0, #1
   18200:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
		if (conn->llcp_conn_param.preferred_periodicity) {
   18204:	2a00      	cmp	r2, #0
   18206:	f000 85c0 	beq.w	18d8a <ull_conn_llcp+0x13be>
				((conn->llcp_conn_param.interval_min /
   1820a:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   1820e:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   18212:	4403      	add	r3, r0
			conn->llcp_cu.interval =
   18214:	fb13 f302 	smulbb	r3, r3, r2
   18218:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1821a:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1821e:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18222:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
   18226:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1822a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1822e:	00d2      	lsls	r2, r2, #3
   18230:	f021 010f 	bic.w	r1, r1, #15
   18234:	f042 0202 	orr.w	r2, r2, #2
   18238:	430a      	orrs	r2, r1
		conn->llcp_cu.ack--;
   1823a:	f109 39ff 	add.w	r9, r9, #4294967295
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1823e:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
   18242:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
   18246:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1824a:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.ack--;
   1824e:	f884 9111 	strb.w	r9, [r4, #273]	; 0x111
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   18252:	f7ff bbd2 	b.w	179fa <ull_conn_llcp+0x2e>
   18256:	bf00      	nop
   18258:	2000eba0 	.word	0x2000eba0
   1825c:	2000eb1c 	.word	0x2000eb1c
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18260:	48cd      	ldr	r0, [pc, #820]	; (18598 <ull_conn_llcp+0xbcc>)
			event_counter = lll->event_counter +
   18262:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
   18266:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1826a:	f7f8 fb15 	bl	10898 <mem_acquire>
	if (!tx) {
   1826e:	2800      	cmp	r0, #0
   18270:	f43f af20 	beq.w	180b4 <ull_conn_llcp+0x6e8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18274:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   18276:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18278:	f043 0303 	orr.w	r3, r3, #3
   1827c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1827e:	2318      	movs	r3, #24
   18280:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   18282:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
   18286:	8101      	strh	r1, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   18288:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
   1828c:	8141      	strh	r1, [r0, #10]
	p->preferred_periodicity = 0U;
   1828e:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   18290:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   18294:	8181      	strh	r1, [r0, #12]
			event_counter = lll->event_counter +
   18296:	44c8      	add	r8, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   18298:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
	p->preferred_periodicity = 0U;
   1829c:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   1829e:	74c3      	strb	r3, [r0, #19]
   182a0:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   182a2:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   182a6:	81c1      	strh	r1, [r0, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   182a8:	7543      	strb	r3, [r0, #21]
   182aa:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   182ac:	75c3      	strb	r3, [r0, #23]
   182ae:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   182b0:	7643      	strb	r3, [r0, #25]
   182b2:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   182b4:	76c3      	strb	r3, [r0, #27]
   182b6:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   182b8:	7743      	strb	r3, [r0, #29]
   182ba:	7783      	strb	r3, [r0, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   182bc:	210f      	movs	r1, #15
	conn->procedure_expire = conn->procedure_reload;
   182be:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   182c2:	71c1      	strb	r1, [r0, #7]
					lll->latency_prepare + lazy;
   182c4:	44b0      	add	r8, r6
	conn->procedure_expire = conn->procedure_reload;
   182c6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   182ca:	f8a0 8011 	strh.w	r8, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   182ce:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   182d2:	2104      	movs	r1, #4
   182d4:	f361 0302 	bfi	r3, r1, #0, #3
   182d8:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
	    conn->tx_head &&
   182dc:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   182e0:	2b00      	cmp	r3, #0
   182e2:	f000 840c 	beq.w	18afe <ull_conn_llcp+0x1132>
	    !conn->llcp_enc.pause_tx &&
   182e6:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   182ea:	078a      	lsls	r2, r1, #30
   182ec:	f100 8407 	bmi.w	18afe <ull_conn_llcp+0x1132>
	    !conn->llcp_phy.pause_tx &&
   182f0:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   182f4:	07cf      	lsls	r7, r1, #31
   182f6:	f100 8402 	bmi.w	18afe <ull_conn_llcp+0x1132>
		if (conn->tx_head == conn->tx_data) {
   182fa:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   182fe:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   18300:	bf04      	itt	eq
   18302:	6819      	ldreq	r1, [r3, #0]
   18304:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18308:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1830c:	2900      	cmp	r1, #0
   1830e:	f000 8574 	beq.w	18dfa <ull_conn_llcp+0x142e>
	tx->next = conn->tx_ctrl_last->next;
   18312:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18316:	6819      	ldr	r1, [r3, #0]
   18318:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1831a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1831c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18320:	6803      	ldr	r3, [r0, #0]
   18322:	2b00      	cmp	r3, #0
   18324:	f47f aec6 	bne.w	180b4 <ull_conn_llcp+0x6e8>
		conn->tx_data_last = tx;
   18328:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1832c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18330:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   18334:	f7ff bb55 	b.w	179e2 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   18338:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1833c:	2b00      	cmp	r3, #0
   1833e:	f43f ad19 	beq.w	17d74 <ull_conn_llcp+0x3a8>
			conn->slave.llcp_type = LLCP_NONE;
   18342:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
   18346:	e519      	b.n	17d7c <ull_conn_llcp+0x3b0>
		conn->tx_data_last = tx;
   18348:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1834c:	e463      	b.n	17c16 <ull_conn_llcp+0x24a>
		if (!conn->tx_ctrl) {
   1834e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18352:	2a00      	cmp	r2, #0
   18354:	f47f adab 	bne.w	17eae <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   18358:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1835c:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18360:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   18364:	e5ae      	b.n	17ec4 <ull_conn_llcp+0x4f8>
		if (!conn->tx_ctrl) {
   18366:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1836a:	2a00      	cmp	r2, #0
   1836c:	f47f ae5b 	bne.w	18026 <ull_conn_llcp+0x65a>
			tx->next = conn->tx_head;
   18370:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   18372:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18376:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   1837a:	e65c      	b.n	18036 <ull_conn_llcp+0x66a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1837c:	4886      	ldr	r0, [pc, #536]	; (18598 <ull_conn_llcp+0xbcc>)
   1837e:	f7f8 fa8b 	bl	10898 <mem_acquire>
	if (tx) {
   18382:	4680      	mov	r8, r0
   18384:	2800      	cmp	r0, #0
   18386:	f43f ae95 	beq.w	180b4 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack--;
   1838a:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
   1838e:	3b01      	subs	r3, #1
   18390:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		conn->llcp_feature.features_conn = LL_FEAT;
   18394:	4b81      	ldr	r3, [pc, #516]	; (1859c <ull_conn_llcp+0xbd0>)
   18396:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   1839a:	2309      	movs	r3, #9
   1839c:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   1839e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   183a2:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   183a4:	7903      	ldrb	r3, [r0, #4]
   183a6:	f043 0303 	orr.w	r3, r3, #3
   183aa:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   183ac:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   183b0:	bfac      	ite	ge
   183b2:	2308      	movge	r3, #8
   183b4:	230e      	movlt	r3, #14
   183b6:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   183b8:	4639      	mov	r1, r7
   183ba:	4410      	add	r0, r2
   183bc:	f00c fc73 	bl	24ca6 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
   183c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   183c4:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
   183c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   183cc:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   183ce:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
   183d2:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
   183d6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   183da:	2b00      	cmp	r3, #0
   183dc:	f000 80cf 	beq.w	1857e <ull_conn_llcp+0xbb2>
	    !conn->llcp_enc.pause_tx &&
   183e0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   183e4:	0792      	lsls	r2, r2, #30
   183e6:	f100 80ca 	bmi.w	1857e <ull_conn_llcp+0xbb2>
	    !conn->llcp_phy.pause_tx &&
   183ea:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   183ee:	07d7      	lsls	r7, r2, #31
   183f0:	f100 80c5 	bmi.w	1857e <ull_conn_llcp+0xbb2>
		if (conn->tx_head == conn->tx_data) {
   183f4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   183f8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   183fa:	bf04      	itt	eq
   183fc:	681a      	ldreq	r2, [r3, #0]
   183fe:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18402:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18406:	2a00      	cmp	r2, #0
   18408:	f000 8384 	beq.w	18b14 <ull_conn_llcp+0x1148>
	tx->next = conn->tx_ctrl_last->next;
   1840c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18410:	681a      	ldr	r2, [r3, #0]
   18412:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   18416:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1841a:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1841e:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18422:	2b00      	cmp	r3, #0
   18424:	f000 8270 	beq.w	18908 <ull_conn_llcp+0xf3c>
		conn->procedure_expire = conn->procedure_reload;
   18428:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1842c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18430:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
		conn->procedure_expire = conn->procedure_reload;
   18434:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	break;
   18438:	f7ff bad3 	b.w	179e2 <ull_conn_llcp+0x16>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   1843c:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   18440:	463b      	mov	r3, r7
   18442:	4642      	mov	r2, r8
   18444:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   18448:	f204 1069 	addw	r0, r4, #361	; 0x169
   1844c:	f004 faba 	bl	1c9c4 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   18450:	4639      	mov	r1, r7
   18452:	2210      	movs	r2, #16
   18454:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   18458:	f00c fbfa 	bl	24c50 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   1845c:	2208      	movs	r2, #8
   1845e:	f104 0198 	add.w	r1, r4, #152	; 0x98
   18462:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   18466:	f00c fbf3 	bl	24c50 <memcpy>
		lll->ccm_rx.direction = 0;
   1846a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
   1846e:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
   18472:	f368 0300 	bfi	r3, r8, #0, #1
   18476:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
   1847a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
   1847e:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
   18482:	f043 0301 	orr.w	r3, r3, #1
   18486:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
   1848a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
   1848e:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
		lll->enc_rx = 1;
   18492:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   18496:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
		lll->ccm_rx.counter = 0;
   1849a:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   1849e:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   184a2:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   184a6:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   184aa:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
		lll->enc_rx = 1;
   184ae:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	if (!pdu_ctrl_tx) {
   184b2:	f1ba 0f00 	cmp.w	sl, #0
   184b6:	f000 8242 	beq.w	1893e <ull_conn_llcp+0xf72>
	conn->lll.enc_tx = 1;
   184ba:	b2db      	uxtb	r3, r3
   184bc:	f043 0310 	orr.w	r3, r3, #16
   184c0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   184c4:	f899 3004 	ldrb.w	r3, [r9, #4]
   184c8:	f043 0303 	orr.w	r3, r3, #3
   184cc:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   184d0:	2301      	movs	r3, #1
   184d2:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   184d6:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   184da:	2306      	movs	r3, #6
   184dc:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   184e0:	2800      	cmp	r0, #0
   184e2:	d03c      	beq.n	1855e <ull_conn_llcp+0xb92>
	    !conn->llcp_enc.pause_tx &&
   184e4:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   184e8:	079b      	lsls	r3, r3, #30
   184ea:	d438      	bmi.n	1855e <ull_conn_llcp+0xb92>
	    !conn->llcp_phy.pause_tx &&
   184ec:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   184f0:	07df      	lsls	r7, r3, #31
   184f2:	d434      	bmi.n	1855e <ull_conn_llcp+0xb92>
		if (conn->tx_head == conn->tx_data) {
   184f4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   184f8:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
   184fa:	bf04      	itt	eq
   184fc:	6803      	ldreq	r3, [r0, #0]
   184fe:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18502:	f1be 0f00 	cmp.w	lr, #0
   18506:	f000 830f 	beq.w	18b28 <ull_conn_llcp+0x115c>
	tx->next = conn->tx_ctrl_last->next;
   1850a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1850e:	681a      	ldr	r2, [r3, #0]
   18510:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   18514:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   18518:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   1851c:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18520:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   18524:	2800      	cmp	r0, #0
   18526:	f47f ad31 	bne.w	17f8c <ull_conn_llcp+0x5c0>
		conn->tx_data_last = tx;
   1852a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1852e:	e52d      	b.n	17f8c <ull_conn_llcp+0x5c0>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18530:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   18534:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   18538:	4299      	cmp	r1, r3
   1853a:	d031      	beq.n	185a0 <ull_conn_llcp+0xbd4>
			event_len_prep(conn);
   1853c:	4620      	mov	r0, r4
   1853e:	f7fd f8fd 	bl	1573c <event_len_prep>
   18542:	e5b7      	b.n	180b4 <ull_conn_llcp+0x6e8>
		if (!conn->tx_ctrl) {
   18544:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18548:	2a00      	cmp	r2, #0
   1854a:	f47f abc1 	bne.w	17cd0 <ull_conn_llcp+0x304>
			tx->next = conn->tx_head;
   1854e:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   18552:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18556:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   1855a:	f7ff bbc4 	b.w	17ce6 <ull_conn_llcp+0x31a>
		if (!conn->tx_ctrl) {
   1855e:	f1be 0f00 	cmp.w	lr, #0
   18562:	f000 81e5 	beq.w	18930 <ull_conn_llcp+0xf64>
   18566:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	tx->next = conn->tx_ctrl_last->next;
   1856a:	680b      	ldr	r3, [r1, #0]
   1856c:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   18570:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   18574:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   18578:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
}
   1857c:	e7d0      	b.n	18520 <ull_conn_llcp+0xb54>
		if (!conn->tx_ctrl) {
   1857e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18582:	2a00      	cmp	r2, #0
   18584:	f47f af42 	bne.w	1840c <ull_conn_llcp+0xa40>
			tx->next = conn->tx_head;
   18588:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1858c:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18590:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   18594:	e745      	b.n	18422 <ull_conn_llcp+0xa56>
   18596:	bf00      	nop
   18598:	2000eba0 	.word	0x2000eba0
   1859c:	0001417f 	.word	0x0001417f
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   185a0:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   185a4:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   185a8:	428b      	cmp	r3, r1
   185aa:	f43f aa22 	beq.w	179f2 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   185ae:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   185b2:	f003 0703 	and.w	r7, r3, #3
   185b6:	2f03      	cmp	r7, #3
   185b8:	f000 82d4 	beq.w	18b64 <ull_conn_llcp+0x1198>
   185bc:	2f00      	cmp	r7, #0
   185be:	f47f aa17 	bne.w	179f0 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   185c2:	48d7      	ldr	r0, [pc, #860]	; (18920 <ull_conn_llcp+0xf54>)
   185c4:	f7f8 f968 	bl	10898 <mem_acquire>
		if (!tx) {
   185c8:	2800      	cmp	r0, #0
   185ca:	f43f ad73 	beq.w	180b4 <ull_conn_llcp+0x6e8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   185ce:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   185d2:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   185d6:	2201      	movs	r2, #1
   185d8:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   185dc:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   185e0:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   185e4:	f3c3 0782 	ubfx	r7, r3, #2, #3
   185e8:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   185ec:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
   185f0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   185f4:	f361 07c3 	bfi	r7, r1, #3, #1
		conn->phy_pref_rx = conn->llcp_phy.rx;
   185f8:	f3c3 1142 	ubfx	r1, r3, #5, #3
   185fc:	f361 02c5 	bfi	r2, r1, #3, #3
   18600:	f884 21b8 	strb.w	r2, [r4, #440]	; 0x1b8
		conn->phy_pref_tx = conn->llcp_phy.tx;
   18604:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   18608:	2303      	movs	r3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1860a:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
		pdu_ctrl_tx->len =
   1860e:	7143      	strb	r3, [r0, #5]
		pr->tx_phys = conn->llcp_phy.tx;
   18610:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   18612:	2316      	movs	r3, #22
		pr->rx_phys = conn->llcp_phy.rx;
   18614:	7241      	strb	r1, [r0, #9]
	    conn->tx_head &&
   18616:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1861a:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1861c:	7903      	ldrb	r3, [r0, #4]
   1861e:	f043 0303 	orr.w	r3, r3, #3
   18622:	7103      	strb	r3, [r0, #4]
	if (
   18624:	2a00      	cmp	r2, #0
   18626:	f000 8292 	beq.w	18b4e <ull_conn_llcp+0x1182>
	    !conn->llcp_enc.pause_tx &&
   1862a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1862e:	0799      	lsls	r1, r3, #30
   18630:	f100 828d 	bmi.w	18b4e <ull_conn_llcp+0x1182>
	    !conn->llcp_phy.pause_tx &&
   18634:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   18638:	07db      	lsls	r3, r3, #31
   1863a:	f100 8288 	bmi.w	18b4e <ull_conn_llcp+0x1182>
		if (conn->tx_head == conn->tx_data) {
   1863e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   18642:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   18644:	bf04      	itt	eq
   18646:	6813      	ldreq	r3, [r2, #0]
   18648:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1864c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18650:	2b00      	cmp	r3, #0
   18652:	f000 83cc 	beq.w	18dee <ull_conn_llcp+0x1422>
	tx->next = conn->tx_ctrl_last->next;
   18656:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1865a:	681a      	ldr	r2, [r3, #0]
   1865c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1865e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18660:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18664:	6803      	ldr	r3, [r0, #0]
   18666:	2b00      	cmp	r3, #0
   18668:	f47f aede 	bne.w	18428 <ull_conn_llcp+0xa5c>
		conn->tx_data_last = tx;
   1866c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18670:	e6da      	b.n	18428 <ull_conn_llcp+0xa5c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   18672:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   18676:	463b      	mov	r3, r7
   18678:	4642      	mov	r2, r8
   1867a:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   1867e:	f204 1069 	addw	r0, r4, #361	; 0x169
   18682:	f004 f99f 	bl	1c9c4 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   18686:	4639      	mov	r1, r7
   18688:	2210      	movs	r2, #16
   1868a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1868e:	f00c fadf 	bl	24c50 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   18692:	2208      	movs	r2, #8
   18694:	f104 0198 	add.w	r1, r4, #152	; 0x98
   18698:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   1869c:	f00c fad8 	bl	24c50 <memcpy>
			lll->ccm_rx.direction = 1U;
   186a0:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
			lll->ccm_rx.counter = 0U;
   186a4:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
   186a8:	f043 0301 	orr.w	r3, r3, #1
   186ac:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
   186b0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
   186b4:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
			lll->ccm_tx.direction = 0U;
   186b8:	f368 0300 	bfi	r3, r8, #0, #1
   186bc:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
   186c0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
   186c4:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
			lll->enc_rx = 1U;
   186c8:	f043 0308 	orr.w	r3, r3, #8
   186cc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   186d0:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   186d4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   186d8:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   186dc:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
			lll->ccm_rx.counter = 0U;
   186e0:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   186e4:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   186e8:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   186ec:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   186f0:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   186f4:	2301      	movs	r3, #1
   186f6:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   186fa:	2305      	movs	r3, #5
   186fc:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   18700:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   18704:	2b00      	cmp	r3, #0
   18706:	d066      	beq.n	187d6 <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   18708:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1870c:	0792      	lsls	r2, r2, #30
   1870e:	d462      	bmi.n	187d6 <ull_conn_llcp+0xe0a>
	    !conn->llcp_phy.pause_tx &&
   18710:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   18714:	07d7      	lsls	r7, r2, #31
   18716:	d45e      	bmi.n	187d6 <ull_conn_llcp+0xe0a>
		if (conn->tx_head == conn->tx_data) {
   18718:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1871c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1871e:	bf04      	itt	eq
   18720:	681a      	ldreq	r2, [r3, #0]
   18722:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18726:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1872a:	2a00      	cmp	r2, #0
   1872c:	f000 825c 	beq.w	18be8 <ull_conn_llcp+0x121c>
	tx->next = conn->tx_ctrl_last->next;
   18730:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18734:	681a      	ldr	r2, [r3, #0]
   18736:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1873a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1873e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18742:	f8d9 3000 	ldr.w	r3, [r9]
   18746:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   1874a:	2b00      	cmp	r3, #0
   1874c:	f47f ac1e 	bne.w	17f8c <ull_conn_llcp+0x5c0>
   18750:	e6eb      	b.n	1852a <ull_conn_llcp+0xb5e>
	if (!pdu_ctrl_tx) {
   18752:	f1ba 0f00 	cmp.w	sl, #0
   18756:	f000 8160 	beq.w	18a1a <ull_conn_llcp+0x104e>
	conn->lll.enc_tx = 1;
   1875a:	f043 0310 	orr.w	r3, r3, #16
   1875e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18762:	7903      	ldrb	r3, [r0, #4]
   18764:	f043 0303 	orr.w	r3, r3, #3
   18768:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1876a:	2301      	movs	r3, #1
   1876c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1876e:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   18772:	2306      	movs	r3, #6
   18774:	71c3      	strb	r3, [r0, #7]
	if (
   18776:	2a00      	cmp	r2, #0
   18778:	f000 8098 	beq.w	188ac <ull_conn_llcp+0xee0>
	    !conn->llcp_enc.pause_tx &&
   1877c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18780:	079f      	lsls	r7, r3, #30
   18782:	f100 8093 	bmi.w	188ac <ull_conn_llcp+0xee0>
	    !conn->llcp_phy.pause_tx &&
   18786:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1878a:	07d8      	lsls	r0, r3, #31
   1878c:	f100 808e 	bmi.w	188ac <ull_conn_llcp+0xee0>
		if (conn->tx_head == conn->tx_data) {
   18790:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   18794:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   18796:	bf04      	itt	eq
   18798:	6813      	ldreq	r3, [r2, #0]
   1879a:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1879e:	f1bc 0f00 	cmp.w	ip, #0
   187a2:	f000 8229 	beq.w	18bf8 <ull_conn_llcp+0x122c>
	tx->next = conn->tx_ctrl_last->next;
   187a6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   187aa:	681a      	ldr	r2, [r3, #0]
   187ac:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   187b0:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   187b4:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   187b8:	f8d9 3000 	ldr.w	r3, [r9]
   187bc:	2b00      	cmp	r3, #0
   187be:	f000 8121 	beq.w	18a04 <ull_conn_llcp+0x1038>
		conn->llcp_enc.pause_rx = 0U;
   187c2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   187c6:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   187ca:	f023 0303 	bic.w	r3, r3, #3
   187ce:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
   187d2:	f7ff bbdb 	b.w	17f8c <ull_conn_llcp+0x5c0>
		if (!conn->tx_ctrl) {
   187d6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   187da:	2a00      	cmp	r2, #0
   187dc:	d1a8      	bne.n	18730 <ull_conn_llcp+0xd64>
			tx->next = conn->tx_head;
   187de:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   187e2:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   187e6:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   187ea:	e7aa      	b.n	18742 <ull_conn_llcp+0xd76>
		if (!conn->tx_ctrl) {
   187ec:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   187f0:	2a00      	cmp	r2, #0
   187f2:	f47f abbd 	bne.w	17f70 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   187f6:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   187fa:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   187fe:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   18802:	f7ff bbbe 	b.w	17f82 <ull_conn_llcp+0x5b6>
		LL_ASSERT(0);
   18806:	4a47      	ldr	r2, [pc, #284]	; (18924 <ull_conn_llcp+0xf58>)
   18808:	4947      	ldr	r1, [pc, #284]	; (18928 <ull_conn_llcp+0xf5c>)
   1880a:	f640 33f4 	movw	r3, #3060	; 0xbf4
		LL_ASSERT(0);
   1880e:	4847      	ldr	r0, [pc, #284]	; (1892c <ull_conn_llcp+0xf60>)
   18810:	f009 fd62 	bl	222d8 <printk>
   18814:	4040      	eors	r0, r0
   18816:	f380 8811 	msr	BASEPRI, r0
   1881a:	f04f 0003 	mov.w	r0, #3
   1881e:	df02      	svc	2
		break;
   18820:	e448      	b.n	180b4 <ull_conn_llcp+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18822:	483f      	ldr	r0, [pc, #252]	; (18920 <ull_conn_llcp+0xf54>)
   18824:	f7f8 f838 	bl	10898 <mem_acquire>
		if (tx) {
   18828:	2800      	cmp	r0, #0
   1882a:	f43f ac43 	beq.w	180b4 <ull_conn_llcp+0x6e8>
			conn->llcp_version.ack--;
   1882e:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   18832:	3b01      	subs	r3, #1
   18834:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
			conn->llcp_version.tx = 1U;
   18838:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1883c:	f043 0301 	orr.w	r3, r3, #1
   18840:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   18844:	7903      	ldrb	r3, [r0, #4]
   18846:	f043 0303 	orr.w	r3, r3, #3
   1884a:	7103      	strb	r3, [r0, #4]
			pdu->len =
   1884c:	2306      	movs	r3, #6
   1884e:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   18850:	230c      	movs	r3, #12
   18852:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   18854:	230b      	movs	r3, #11
   18856:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   18858:	f06f 030e 	mvn.w	r3, #14
   1885c:	7243      	strb	r3, [r0, #9]
   1885e:	2305      	movs	r3, #5
   18860:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   18862:	f04f 33ff 	mov.w	r3, #4294967295
   18866:	72c3      	strb	r3, [r0, #11]
   18868:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   1886a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   1886e:	2b00      	cmp	r3, #0
   18870:	f000 80b8 	beq.w	189e4 <ull_conn_llcp+0x1018>
	    !conn->llcp_enc.pause_tx &&
   18874:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18878:	0792      	lsls	r2, r2, #30
   1887a:	f100 80b3 	bmi.w	189e4 <ull_conn_llcp+0x1018>
	    !conn->llcp_phy.pause_tx &&
   1887e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   18882:	07d7      	lsls	r7, r2, #31
   18884:	f100 80ae 	bmi.w	189e4 <ull_conn_llcp+0x1018>
		if (conn->tx_head == conn->tx_data) {
   18888:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1888c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1888e:	bf04      	itt	eq
   18890:	681a      	ldreq	r2, [r3, #0]
   18892:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18896:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1889a:	2a00      	cmp	r2, #0
   1889c:	f47f aedb 	bne.w	18656 <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head->next;
   188a0:	681a      	ldr	r2, [r3, #0]
   188a2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   188a4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   188a6:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   188aa:	e6db      	b.n	18664 <ull_conn_llcp+0xc98>
		if (!conn->tx_ctrl) {
   188ac:	f1bc 0f00 	cmp.w	ip, #0
   188b0:	f47f af79 	bne.w	187a6 <ull_conn_llcp+0xdda>
			tx->next = conn->tx_head;
   188b4:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   188b8:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   188bc:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   188c0:	e77a      	b.n	187b8 <ull_conn_llcp+0xdec>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   188c2:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   188c4:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   188c8:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   188cc:	2702      	movs	r7, #2
   188ce:	f7ff bb2f 	b.w	17f30 <ull_conn_llcp+0x564>
		conn->tx_data_last = tx;
   188d2:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   188d6:	f7ff ba09 	b.w	17cec <ull_conn_llcp+0x320>
	switch (conn->llcp_conn_param.state) {
   188da:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   188de:	f003 0307 	and.w	r3, r3, #7
   188e2:	2b05      	cmp	r3, #5
   188e4:	f200 8299 	bhi.w	18e1a <ull_conn_llcp+0x144e>
   188e8:	a101      	add	r1, pc, #4	; (adr r1, 188f0 <ull_conn_llcp+0xf24>)
   188ea:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   188ee:	bf00      	nop
   188f0:	00018261 	.word	0x00018261
   188f4:	000181d9 	.word	0x000181d9
   188f8:	00018189 	.word	0x00018189
   188fc:	000179f3 	.word	0x000179f3
   18900:	000179f3 	.word	0x000179f3
   18904:	000179f3 	.word	0x000179f3
		conn->tx_data_last = tx;
   18908:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
		conn->procedure_expire = conn->procedure_reload;
   1890c:	e58c      	b.n	18428 <ull_conn_llcp+0xa5c>
			tx->next = conn->tx_head->next;
   1890e:	681a      	ldr	r2, [r3, #0]
   18910:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   18912:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18914:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   18916:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   1891a:	f7ff b979 	b.w	17c10 <ull_conn_llcp+0x244>
   1891e:	bf00      	nop
   18920:	2000eba0 	.word	0x2000eba0
   18924:	0002929c 	.word	0x0002929c
   18928:	00028e78 	.word	0x00028e78
   1892c:	00028de0 	.word	0x00028de0
			tx->next = conn->tx_head;
   18930:	f8c9 0000 	str.w	r0, [r9]
				conn->tx_ctrl = tx;
   18934:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18938:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1893c:	e5f0      	b.n	18520 <ull_conn_llcp+0xb54>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1893e:	48b2      	ldr	r0, [pc, #712]	; (18c08 <ull_conn_llcp+0x123c>)
   18940:	f7f7 ffaa 	bl	10898 <mem_acquire>
		if (!tx) {
   18944:	4603      	mov	r3, r0
   18946:	2800      	cmp	r0, #0
   18948:	f000 8241 	beq.w	18dce <ull_conn_llcp+0x1402>
	conn->lll.enc_tx = 1;
   1894c:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
   18950:	f042 0210 	orr.w	r2, r2, #16
   18954:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18958:	2201      	movs	r2, #1
   1895a:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1895c:	7902      	ldrb	r2, [r0, #4]
   1895e:	f042 0203 	orr.w	r2, r2, #3
   18962:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   18964:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18968:	2106      	movs	r1, #6
   1896a:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   1896c:	4610      	mov	r0, r2
	if (
   1896e:	b302      	cbz	r2, 189b2 <ull_conn_llcp+0xfe6>
	    !conn->llcp_enc.pause_tx &&
   18970:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18974:	078f      	lsls	r7, r1, #30
   18976:	d41c      	bmi.n	189b2 <ull_conn_llcp+0xfe6>
	    !conn->llcp_phy.pause_tx &&
   18978:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   1897c:	07c9      	lsls	r1, r1, #31
   1897e:	d418      	bmi.n	189b2 <ull_conn_llcp+0xfe6>
		if (conn->tx_head == conn->tx_data) {
   18980:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18984:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   18988:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1898a:	bf04      	itt	eq
   1898c:	6811      	ldreq	r1, [r2, #0]
   1898e:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18992:	f1bc 0f00 	cmp.w	ip, #0
   18996:	f000 8179 	beq.w	18c8c <ull_conn_llcp+0x12c0>
	tx->next = conn->tx_ctrl_last->next;
   1899a:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   1899e:	6808      	ldr	r0, [r1, #0]
   189a0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   189a2:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   189a4:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
	if (!tx->next) {
   189a8:	6819      	ldr	r1, [r3, #0]
   189aa:	b331      	cbz	r1, 189fa <ull_conn_llcp+0x102e>
	    conn->tx_head &&
   189ac:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   189ae:	46e6      	mov	lr, ip
   189b0:	e598      	b.n	184e4 <ull_conn_llcp+0xb18>
		if (!conn->tx_ctrl) {
   189b2:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   189b6:	46e6      	mov	lr, ip
   189b8:	f1bc 0f00 	cmp.w	ip, #0
   189bc:	d025      	beq.n	18a0a <ull_conn_llcp+0x103e>
	tx->next = conn->tx_ctrl_last->next;
   189be:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   189c2:	680f      	ldr	r7, [r1, #0]
   189c4:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   189c6:	600b      	str	r3, [r1, #0]
	if (!tx->next) {
   189c8:	681f      	ldr	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   189ca:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   189ce:	4619      	mov	r1, r3
	if (!tx->next) {
   189d0:	b19f      	cbz	r7, 189fa <ull_conn_llcp+0x102e>
	if (
   189d2:	2a00      	cmp	r2, #0
   189d4:	f43f adc9 	beq.w	1856a <ull_conn_llcp+0xb9e>
	    !conn->llcp_enc.pause_tx &&
   189d8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   189dc:	079b      	lsls	r3, r3, #30
   189de:	f57f ad85 	bpl.w	184ec <ull_conn_llcp+0xb20>
   189e2:	e5c2      	b.n	1856a <ull_conn_llcp+0xb9e>
		if (!conn->tx_ctrl) {
   189e4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   189e8:	2a00      	cmp	r2, #0
   189ea:	f47f ae34 	bne.w	18656 <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   189ee:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   189f0:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   189f4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   189f8:	e634      	b.n	18664 <ull_conn_llcp+0xc98>
		conn->tx_data_last = tx;
   189fa:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	    conn->tx_head &&
   189fe:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   18a00:	46e6      	mov	lr, ip
   18a02:	e56d      	b.n	184e0 <ull_conn_llcp+0xb14>
		conn->tx_data_last = tx;
   18a04:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   18a08:	e6db      	b.n	187c2 <ull_conn_llcp+0xdf6>
			tx->next = conn->tx_head;
   18a0a:	601a      	str	r2, [r3, #0]
			conn->tx_head = tx;
   18a0c:	469c      	mov	ip, r3
				conn->tx_ctrl = tx;
   18a0e:	e9c4 336f 	strd	r3, r3, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18a12:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   18a16:	461a      	mov	r2, r3
   18a18:	e7c6      	b.n	189a8 <ull_conn_llcp+0xfdc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18a1a:	487b      	ldr	r0, [pc, #492]	; (18c08 <ull_conn_llcp+0x123c>)
   18a1c:	f7f7 ff3c 	bl	10898 <mem_acquire>
		if (!tx) {
   18a20:	4601      	mov	r1, r0
   18a22:	2800      	cmp	r0, #0
   18a24:	f000 81e0 	beq.w	18de8 <ull_conn_llcp+0x141c>
	conn->lll.enc_tx = 1;
   18a28:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   18a2c:	f043 0310 	orr.w	r3, r3, #16
   18a30:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18a34:	2301      	movs	r3, #1
   18a36:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a38:	7903      	ldrb	r3, [r0, #4]
	    conn->tx_head &&
   18a3a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a3e:	f043 0303 	orr.w	r3, r3, #3
   18a42:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18a44:	2306      	movs	r3, #6
   18a46:	71c3      	strb	r3, [r0, #7]
	if (
   18a48:	b312      	cbz	r2, 18a90 <ull_conn_llcp+0x10c4>
	    !conn->llcp_enc.pause_tx &&
   18a4a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18a4e:	0798      	lsls	r0, r3, #30
   18a50:	d41e      	bmi.n	18a90 <ull_conn_llcp+0x10c4>
	    !conn->llcp_phy.pause_tx &&
   18a52:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   18a56:	07db      	lsls	r3, r3, #31
   18a58:	d41a      	bmi.n	18a90 <ull_conn_llcp+0x10c4>
		if (conn->tx_head == conn->tx_data) {
   18a5a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18a5e:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   18a62:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   18a64:	bf04      	itt	eq
   18a66:	681b      	ldreq	r3, [r3, #0]
   18a68:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18a6c:	f1bc 0f00 	cmp.w	ip, #0
   18a70:	f000 8184 	beq.w	18d7c <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   18a74:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   18a78:	6803      	ldr	r3, [r0, #0]
   18a7a:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   18a7c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   18a7e:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18a82:	680b      	ldr	r3, [r1, #0]
   18a84:	2b00      	cmp	r3, #0
   18a86:	f47f ae79 	bne.w	1877c <ull_conn_llcp+0xdb0>
		conn->tx_data_last = tx;
   18a8a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   18a8e:	e672      	b.n	18776 <ull_conn_llcp+0xdaa>
		if (!conn->tx_ctrl) {
   18a90:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   18a94:	f1bc 0f00 	cmp.w	ip, #0
   18a98:	d029      	beq.n	18aee <ull_conn_llcp+0x1122>
	tx->next = conn->tx_ctrl_last->next;
   18a9a:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   18a9e:	6803      	ldr	r3, [r0, #0]
   18aa0:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   18aa2:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   18aa4:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   18aa6:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18aaa:	2b00      	cmp	r3, #0
   18aac:	f47f ae63 	bne.w	18776 <ull_conn_llcp+0xdaa>
   18ab0:	e7eb      	b.n	18a8a <ull_conn_llcp+0x10be>
			tx->next = conn->tx_head->next;
   18ab2:	681a      	ldr	r2, [r3, #0]
   18ab4:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   18ab8:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18abc:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18ac0:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   18ac4:	f7ff b9fe 	b.w	17ec4 <ull_conn_llcp+0x4f8>
			tx->next = conn->tx_head->next;
   18ac8:	681a      	ldr	r2, [r3, #0]
   18aca:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   18acc:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   18ace:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   18ad0:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   18ad4:	f7ff baaf 	b.w	18036 <ull_conn_llcp+0x66a>
			tx->next = conn->tx_head->next;
   18ad8:	681a      	ldr	r2, [r3, #0]
   18ada:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   18ade:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18ae2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18ae6:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   18aea:	f7ff b8fc 	b.w	17ce6 <ull_conn_llcp+0x31a>
			tx->next = conn->tx_head;
   18aee:	600a      	str	r2, [r1, #0]
			conn->tx_head = tx;
   18af0:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   18af2:	e9c4 116f 	strd	r1, r1, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18af6:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
   18afa:	460a      	mov	r2, r1
   18afc:	e7c1      	b.n	18a82 <ull_conn_llcp+0x10b6>
		if (!conn->tx_ctrl) {
   18afe:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18b02:	2900      	cmp	r1, #0
   18b04:	f47f ac05 	bne.w	18312 <ull_conn_llcp+0x946>
			tx->next = conn->tx_head;
   18b08:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18b0a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18b0e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18b12:	e405      	b.n	18320 <ull_conn_llcp+0x954>
			tx->next = conn->tx_head->next;
   18b14:	681a      	ldr	r2, [r3, #0]
   18b16:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   18b1a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18b1e:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18b22:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   18b26:	e47c      	b.n	18422 <ull_conn_llcp+0xa56>
			tx->next = conn->tx_head->next;
   18b28:	6803      	ldr	r3, [r0, #0]
   18b2a:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   18b2e:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   18b32:	f8d9 0000 	ldr.w	r0, [r9]
				conn->tx_ctrl_last = tx;
   18b36:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   18b3a:	e4f1      	b.n	18520 <ull_conn_llcp+0xb54>
			tx->next = conn->tx_head->next;
   18b3c:	681a      	ldr	r2, [r3, #0]
   18b3e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   18b42:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   18b46:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   18b4a:	f7ff ba1a 	b.w	17f82 <ull_conn_llcp+0x5b6>
		if (!conn->tx_ctrl) {
   18b4e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18b52:	2b00      	cmp	r3, #0
   18b54:	f47f ad7f 	bne.w	18656 <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   18b58:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18b5a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18b5e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18b62:	e57f      	b.n	18664 <ull_conn_llcp+0xc98>
		if (conn->llcp_phy.tx & PHY_2M) {
   18b64:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   18b66:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		if (conn->llcp_phy.tx & PHY_2M) {
   18b6a:	f3c3 0282 	ubfx	r2, r3, #2, #3
   18b6e:	f140 8118 	bpl.w	18da2 <ull_conn_llcp+0x13d6>
			conn->llcp_phy.tx = PHY_2M;
   18b72:	2202      	movs	r2, #2
   18b74:	f362 0384 	bfi	r3, r2, #2, #3
   18b78:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.rx & PHY_2M) {
   18b7c:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   18b80:	065f      	lsls	r7, r3, #25
   18b82:	ea4f 1253 	mov.w	r2, r3, lsr #5
   18b86:	f140 8104 	bpl.w	18d92 <ull_conn_llcp+0x13c6>
			conn->llcp_phy.rx = PHY_2M;
   18b8a:	2202      	movs	r2, #2
   18b8c:	f362 1347 	bfi	r3, r2, #5, #3
   18b90:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->llcp_ack -= 2U;
   18b94:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   18b96:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   18b9a:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18b9e:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp_ack -= 2U;
   18ba2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18ba6:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   18baa:	f3c2 0182 	ubfx	r1, r2, #2, #3
   18bae:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18bb2:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18bb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   18bba:	428f      	cmp	r7, r1
   18bbc:	bf08      	it	eq
   18bbe:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   18bc0:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   18bc2:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   18bc6:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18bca:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   18bce:	bf08      	it	eq
   18bd0:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   18bd2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   18bd6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   18bda:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   18bdc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
   18be0:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18be4:	f7fe bf59 	b.w	17a9a <ull_conn_llcp+0xce>
			tx->next = conn->tx_head->next;
   18be8:	681a      	ldr	r2, [r3, #0]
   18bea:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   18bee:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   18bf2:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   18bf6:	e5a4      	b.n	18742 <ull_conn_llcp+0xd76>
			tx->next = conn->tx_head->next;
   18bf8:	6813      	ldr	r3, [r2, #0]
   18bfa:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   18bfe:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl_last = tx;
   18c02:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   18c06:	e5d7      	b.n	187b8 <ull_conn_llcp+0xdec>
   18c08:	2000eba0 	.word	0x2000eba0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18c0c:	4885      	ldr	r0, [pc, #532]	; (18e24 <ull_conn_llcp+0x1458>)
   18c0e:	f7f7 fe43 	bl	10898 <mem_acquire>
		if (!tx) {
   18c12:	2800      	cmp	r0, #0
   18c14:	f43f aa4e 	beq.w	180b4 <ull_conn_llcp+0x6e8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18c18:	7903      	ldrb	r3, [r0, #4]
   18c1a:	f043 0303 	orr.w	r3, r3, #3
   18c1e:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   18c20:	2311      	movs	r3, #17
   18c22:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   18c24:	2303      	movs	r3, #3
   18c26:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18c28:	230f      	movs	r3, #15
   18c2a:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   18c2c:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   18c30:	7243      	strb	r3, [r0, #9]
	    conn->tx_head &&
   18c32:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   18c36:	2b00      	cmp	r3, #0
   18c38:	f000 8095 	beq.w	18d66 <ull_conn_llcp+0x139a>
	    !conn->llcp_enc.pause_tx &&
   18c3c:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18c40:	0789      	lsls	r1, r1, #30
   18c42:	f100 8090 	bmi.w	18d66 <ull_conn_llcp+0x139a>
	    !conn->llcp_phy.pause_tx &&
   18c46:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   18c4a:	07ca      	lsls	r2, r1, #31
   18c4c:	f100 808b 	bmi.w	18d66 <ull_conn_llcp+0x139a>
		if (conn->tx_head == conn->tx_data) {
   18c50:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18c54:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   18c56:	bf04      	itt	eq
   18c58:	6819      	ldreq	r1, [r3, #0]
   18c5a:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18c5e:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18c62:	2900      	cmp	r1, #0
   18c64:	f000 80a7 	beq.w	18db6 <ull_conn_llcp+0x13ea>
	tx->next = conn->tx_ctrl_last->next;
   18c68:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18c6c:	6819      	ldr	r1, [r3, #0]
   18c6e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18c70:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18c72:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18c76:	6803      	ldr	r3, [r0, #0]
   18c78:	2b00      	cmp	r3, #0
   18c7a:	d067      	beq.n	18d4c <ull_conn_llcp+0x1380>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18c7c:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   18c80:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   18c84:	2300      	movs	r3, #0
   18c86:	603b      	str	r3, [r7, #0]
   18c88:	f7ff ba14 	b.w	180b4 <ull_conn_llcp+0x6e8>
			tx->next = conn->tx_head->next;
   18c8c:	6811      	ldr	r1, [r2, #0]
   18c8e:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   18c90:	469c      	mov	ip, r3
   18c92:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   18c94:	e9c4 3370 	strd	r3, r3, [r4, #448]	; 0x1c0
   18c98:	e686      	b.n	189a8 <ull_conn_llcp+0xfdc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18c9a:	4862      	ldr	r0, [pc, #392]	; (18e24 <ull_conn_llcp+0x1458>)
   18c9c:	f7f7 fdfc 	bl	10898 <mem_acquire>
	if (!tx) {
   18ca0:	2800      	cmp	r0, #0
   18ca2:	f43f aa07 	beq.w	180b4 <ull_conn_llcp+0x6e8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18ca6:	7902      	ldrb	r2, [r0, #4]
   18ca8:	f042 0203 	orr.w	r2, r2, #3
   18cac:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   18cae:	2218      	movs	r2, #24
   18cb0:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   18cb2:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
   18cb6:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   18cb8:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   18cbc:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   18cbe:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
   18cc2:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   18cc4:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   18cc8:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   18cca:	2210      	movs	r2, #16
   18ccc:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
   18cce:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
   18cd2:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   18cd4:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
	    conn->tx_head &&
   18cd8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	rsp->reference_conn_event_count =
   18cdc:	f8a0 1011 	strh.w	r1, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   18ce0:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   18ce4:	f8a0 1013 	strh.w	r1, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   18ce8:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
   18cec:	f8a0 1015 	strh.w	r1, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   18cf0:	f8b4 1190 	ldrh.w	r1, [r4, #400]	; 0x190
   18cf4:	f8a0 1017 	strh.w	r1, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   18cf8:	f8b4 1192 	ldrh.w	r1, [r4, #402]	; 0x192
   18cfc:	f8a0 1019 	strh.w	r1, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   18d00:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
   18d04:	f8a0 101b 	strh.w	r1, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   18d08:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   18d0c:	f8a0 101d 	strh.w	r1, [r0, #29]
	if (
   18d10:	b1fa      	cbz	r2, 18d52 <ull_conn_llcp+0x1386>
	    !conn->llcp_enc.pause_tx &&
   18d12:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18d16:	0789      	lsls	r1, r1, #30
   18d18:	d41b      	bmi.n	18d52 <ull_conn_llcp+0x1386>
	    !conn->llcp_phy.pause_tx &&
   18d1a:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   18d1e:	07cb      	lsls	r3, r1, #31
   18d20:	d417      	bmi.n	18d52 <ull_conn_llcp+0x1386>
		if (conn->tx_head == conn->tx_data) {
   18d22:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18d26:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   18d28:	bf04      	itt	eq
   18d2a:	6811      	ldreq	r1, [r2, #0]
   18d2c:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18d30:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18d34:	2900      	cmp	r1, #0
   18d36:	d044      	beq.n	18dc2 <ull_conn_llcp+0x13f6>
	tx->next = conn->tx_ctrl_last->next;
   18d38:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   18d3c:	6811      	ldr	r1, [r2, #0]
   18d3e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18d40:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   18d42:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18d46:	6802      	ldr	r2, [r0, #0]
   18d48:	2a00      	cmp	r2, #0
   18d4a:	d197      	bne.n	18c7c <ull_conn_llcp+0x12b0>
		conn->tx_data_last = tx;
   18d4c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18d50:	e794      	b.n	18c7c <ull_conn_llcp+0x12b0>
		if (!conn->tx_ctrl) {
   18d52:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18d56:	2900      	cmp	r1, #0
   18d58:	d1ee      	bne.n	18d38 <ull_conn_llcp+0x136c>
			tx->next = conn->tx_head;
   18d5a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18d5c:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18d60:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18d64:	e7ef      	b.n	18d46 <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18d66:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18d6a:	2900      	cmp	r1, #0
   18d6c:	f47f af7c 	bne.w	18c68 <ull_conn_llcp+0x129c>
			tx->next = conn->tx_head;
   18d70:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18d72:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18d76:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18d7a:	e77c      	b.n	18c76 <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18d7c:	6813      	ldr	r3, [r2, #0]
   18d7e:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
   18d80:	468c      	mov	ip, r1
   18d82:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl_last = tx;
   18d84:	e9c4 1170 	strd	r1, r1, [r4, #448]	; 0x1c0
   18d88:	e67b      	b.n	18a82 <ull_conn_llcp+0x10b6>
				conn->llcp_conn_param.interval_max;
   18d8a:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   18d8e:	f7ff ba44 	b.w	1821a <ull_conn_llcp+0x84e>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   18d92:	07d1      	lsls	r1, r2, #31
   18d94:	d51f      	bpl.n	18dd6 <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   18d96:	2201      	movs	r2, #1
   18d98:	f362 1347 	bfi	r3, r2, #5, #3
   18d9c:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18da0:	e6f8      	b.n	18b94 <ull_conn_llcp+0x11c8>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18da2:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   18da4:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18da8:	d52e      	bpl.n	18e08 <ull_conn_llcp+0x143c>
			conn->llcp_phy.tx = PHY_1M;
   18daa:	2201      	movs	r2, #1
   18dac:	f362 0384 	bfi	r3, r2, #2, #3
   18db0:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18db4:	e6e2      	b.n	18b7c <ull_conn_llcp+0x11b0>
			tx->next = conn->tx_head->next;
   18db6:	6819      	ldr	r1, [r3, #0]
   18db8:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18dba:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18dbc:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18dc0:	e759      	b.n	18c76 <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18dc2:	6811      	ldr	r1, [r2, #0]
   18dc4:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18dc6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18dc8:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18dcc:	e7bb      	b.n	18d46 <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18dce:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
   18dd2:	f7ff bb85 	b.w	184e0 <ull_conn_llcp+0xb14>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   18dd6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   18dda:	bf18      	it	ne
   18ddc:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   18dde:	f362 1347 	bfi	r3, r2, #5, #3
   18de2:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18de6:	e6d5      	b.n	18b94 <ull_conn_llcp+0x11c8>
   18de8:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   18dec:	e4c3      	b.n	18776 <ull_conn_llcp+0xdaa>
			tx->next = conn->tx_head->next;
   18dee:	6813      	ldr	r3, [r2, #0]
   18df0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   18df2:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18df4:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18df8:	e434      	b.n	18664 <ull_conn_llcp+0xc98>
			tx->next = conn->tx_head->next;
   18dfa:	6819      	ldr	r1, [r3, #0]
   18dfc:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18dfe:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18e00:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18e04:	f7ff ba8c 	b.w	18320 <ull_conn_llcp+0x954>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   18e08:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   18e0c:	bf18      	it	ne
   18e0e:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   18e10:	f362 0384 	bfi	r3, r2, #2, #3
   18e14:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18e18:	e6b0      	b.n	18b7c <ull_conn_llcp+0x11b0>
		LL_ASSERT(0);
   18e1a:	4a03      	ldr	r2, [pc, #12]	; (18e28 <ull_conn_llcp+0x145c>)
   18e1c:	4903      	ldr	r1, [pc, #12]	; (18e2c <ull_conn_llcp+0x1460>)
   18e1e:	f640 531f 	movw	r3, #3359	; 0xd1f
   18e22:	e4f4      	b.n	1880e <ull_conn_llcp+0xe42>
   18e24:	2000eba0 	.word	0x2000eba0
   18e28:	0002929c 	.word	0x0002929c
   18e2c:	00028e78 	.word	0x00028e78

00018e30 <ull_conn_tx_demux>:
{
   18e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18e34:	4f27      	ldr	r7, [pc, #156]	; (18ed4 <ull_conn_tx_demux+0xa4>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18e36:	4e28      	ldr	r6, [pc, #160]	; (18ed8 <ull_conn_tx_demux+0xa8>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18e38:	78fa      	ldrb	r2, [r7, #3]
{
   18e3a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   18e3c:	1d3d      	adds	r5, r7, #4
   18e3e:	e024      	b.n	18e8a <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18e40:	4642      	mov	r2, r8
   18e42:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   18e46:	4630      	mov	r0, r6
   18e48:	f7f7 fd58 	bl	108fc <mem_get>
	if (conn->lll.handle != handle) {
   18e4c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18e4e:	4543      	cmp	r3, r8
   18e50:	d129      	bne.n	18ea6 <ull_conn_tx_demux+0x76>
			struct node_tx *tx = lll_tx->node;
   18e52:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   18e56:	f8d0 21c8 	ldr.w	r2, [r0, #456]	; 0x1c8
			tx->next = NULL;
   18e5a:	2100      	movs	r1, #0
   18e5c:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   18e5e:	b37a      	cbz	r2, 18ec0 <ull_conn_tx_demux+0x90>
			if (conn->tx_data_last) {
   18e60:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
   18e64:	b102      	cbz	r2, 18e68 <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   18e66:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   18e68:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
		MFIFO_DEQUEUE(conn_tx);
   18e6c:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   18e6e:	78bb      	ldrb	r3, [r7, #2]
   18e70:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   18e72:	429a      	cmp	r2, r3
   18e74:	d005      	beq.n	18e82 <ull_conn_tx_demux+0x52>
	_first += 1U;
   18e76:	3301      	adds	r3, #1
   18e78:	b2db      	uxtb	r3, r3
		_first = 0U;
   18e7a:	4299      	cmp	r1, r3
   18e7c:	bf08      	it	eq
   18e7e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18e80:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   18e82:	3c01      	subs	r4, #1
   18e84:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18e88:	d018      	beq.n	18ebc <ull_conn_tx_demux+0x8c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18e8a:	78bb      	ldrb	r3, [r7, #2]
   18e8c:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   18e8e:	4293      	cmp	r3, r2
   18e90:	d014      	beq.n	18ebc <ull_conn_tx_demux+0x8c>
	return (void *)(fifo + first * size);
   18e92:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   18e96:	eb15 0903 	adds.w	r9, r5, r3
   18e9a:	d00f      	beq.n	18ebc <ull_conn_tx_demux+0x8c>
		conn = ll_connected_get(lll_tx->handle);
   18e9c:	f835 8003 	ldrh.w	r8, [r5, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   18ea0:	f1b8 0f01 	cmp.w	r8, #1
   18ea4:	d9cc      	bls.n	18e40 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   18ea6:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   18eaa:	790b      	ldrb	r3, [r1, #4]
   18eac:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   18eb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   18eb4:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   18eb6:	f7fb fb3d 	bl	14534 <ll_tx_ack_put>
   18eba:	e7d7      	b.n	18e6c <ull_conn_tx_demux+0x3c>
}
   18ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (!conn->tx_head) {
   18ec0:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
				conn->tx_data = tx;
   18ec4:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
				if (!conn->tx_head) {
   18ec8:	2a00      	cmp	r2, #0
   18eca:	d1c9      	bne.n	18e60 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   18ecc:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			if (conn->tx_data_last) {
   18ed0:	e7ca      	b.n	18e68 <ull_conn_tx_demux+0x38>
   18ed2:	bf00      	nop
   18ed4:	20000678 	.word	0x20000678
   18ed8:	2000e774 	.word	0x2000e774

00018edc <conn_cleanup>:
	if (conn == conn_upd_curr) {
   18edc:	4b3b      	ldr	r3, [pc, #236]	; (18fcc <conn_cleanup+0xf0>)
   18ede:	681a      	ldr	r2, [r3, #0]
{
   18ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   18ee4:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   18ee6:	bf04      	itt	eq
   18ee8:	2200      	moveq	r2, #0
   18eea:	601a      	streq	r2, [r3, #0]
	rx = conn->llcp_rx;
   18eec:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
	rx->hdr.handle = conn->lll.handle;
   18ef0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18ef2:	f8a0 3142 	strh.w	r3, [r0, #322]	; 0x142
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18ef6:	2314      	movs	r3, #20
{
   18ef8:	b083      	sub	sp, #12
   18efa:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   18efc:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18f00:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	*((uint8_t *)rx->pdu) = reason;
   18f04:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	while (rx) {
   18f08:	b144      	cbz	r4, 18f1c <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   18f0a:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   18f0c:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   18f0e:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   18f10:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   18f12:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   18f14:	f7fb faca 	bl	144ac <ll_rx_put>
	while (rx) {
   18f18:	2c00      	cmp	r4, #0
   18f1a:	d1f7      	bne.n	18f0c <conn_cleanup+0x30>
	while (conn->tx_head) {
   18f1c:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18f20:	b381      	cbz	r1, 18f84 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   18f22:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18fd0 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   18f26:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 18fd4 <conn_cleanup+0xf8>
   18f2a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 18fd8 <conn_cleanup+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18f2e:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   18f32:	e007      	b.n	18f44 <conn_cleanup+0x68>
   18f34:	4629      	mov	r1, r5
   18f36:	463a      	mov	r2, r7
   18f38:	4620      	mov	r0, r4
   18f3a:	f7f7 fd11 	bl	10960 <memq_enqueue>
	while (conn->tx_head) {
   18f3e:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18f42:	b1f9      	cbz	r1, 18f84 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   18f44:	4630      	mov	r0, r6
   18f46:	f7fc f961 	bl	1520c <tx_ull_dequeue>
   18f4a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   18f4c:	4640      	mov	r0, r8
   18f4e:	f7f7 fca3 	bl	10898 <mem_acquire>
		LL_ASSERT(link);
   18f52:	4604      	mov	r4, r0
   18f54:	2800      	cmp	r0, #0
   18f56:	d1ed      	bne.n	18f34 <conn_cleanup+0x58>
   18f58:	4820      	ldr	r0, [pc, #128]	; (18fdc <conn_cleanup+0x100>)
   18f5a:	f44f 63ed 	mov.w	r3, #1896	; 0x768
   18f5e:	4652      	mov	r2, sl
   18f60:	4649      	mov	r1, r9
   18f62:	f009 f9b9 	bl	222d8 <printk>
   18f66:	4040      	eors	r0, r0
   18f68:	f380 8811 	msr	BASEPRI, r0
   18f6c:	f04f 0003 	mov.w	r0, #3
   18f70:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18f72:	4629      	mov	r1, r5
   18f74:	463a      	mov	r2, r7
   18f76:	4620      	mov	r0, r4
   18f78:	f7f7 fcf2 	bl	10960 <memq_enqueue>
	while (conn->tx_head) {
   18f7c:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18f80:	2900      	cmp	r1, #0
   18f82:	d1df      	bne.n	18f44 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   18f84:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18f86:	4b16      	ldr	r3, [pc, #88]	; (18fe0 <conn_cleanup+0x104>)
   18f88:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   18f8c:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18f8e:	b2d2      	uxtb	r2, r2
   18f90:	2101      	movs	r1, #1
   18f92:	2000      	movs	r0, #0
   18f94:	f7f8 ff52 	bl	11e3c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18f98:	f030 0302 	bics.w	r3, r0, #2
   18f9c:	d00c      	beq.n	18fb8 <conn_cleanup+0xdc>
   18f9e:	4a0d      	ldr	r2, [pc, #52]	; (18fd4 <conn_cleanup+0xf8>)
   18fa0:	4910      	ldr	r1, [pc, #64]	; (18fe4 <conn_cleanup+0x108>)
   18fa2:	480e      	ldr	r0, [pc, #56]	; (18fdc <conn_cleanup+0x100>)
   18fa4:	f240 7327 	movw	r3, #1831	; 0x727
   18fa8:	f009 f996 	bl	222d8 <printk>
   18fac:	4040      	eors	r0, r0
   18fae:	f380 8811 	msr	BASEPRI, r0
   18fb2:	f04f 0003 	mov.w	r0, #3
   18fb6:	df02      	svc	2
	lll->handle = 0xFFFF;
   18fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   18fbc:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   18fbe:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   18fc0:	b003      	add	sp, #12
   18fc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   18fc6:	f7ff bf33 	b.w	18e30 <ull_conn_tx_demux>
   18fca:	bf00      	nop
   18fcc:	2000eb1c 	.word	0x2000eb1c
   18fd0:	2000eca4 	.word	0x2000eca4
   18fd4:	0002929c 	.word	0x0002929c
   18fd8:	000292ec 	.word	0x000292ec
   18fdc:	00028de0 	.word	0x00028de0
   18fe0:	0001540d 	.word	0x0001540d
   18fe4:	0002937c 	.word	0x0002937c

00018fe8 <ull_conn_done>:
{
   18fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   18fec:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   18fee:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   18ff0:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   18ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18ff6:	429a      	cmp	r2, r3
{
   18ff8:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   18ffa:	d05e      	beq.n	190ba <ull_conn_done+0xd2>
	switch (done->extra.mic_state) {
   18ffc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   19000:	2b01      	cmp	r3, #1
   19002:	4606      	mov	r6, r0
   19004:	f000 80ea 	beq.w	191dc <ull_conn_done+0x1f4>
   19008:	2b02      	cmp	r3, #2
   1900a:	f000 80dd 	beq.w	191c8 <ull_conn_done+0x1e0>
   1900e:	2b00      	cmp	r3, #0
   19010:	f000 80c0 	beq.w	19194 <ull_conn_done+0x1ac>
	reason_peer = conn->llcp_terminate.reason_peer;
   19014:	f894 713b 	ldrb.w	r7, [r4, #315]	; 0x13b
	if (reason_peer && (
   19018:	2f00      	cmp	r7, #0
   1901a:	f040 80d8 	bne.w	191ce <ull_conn_done+0x1e6>
	latency_event = lll->latency_event;
   1901e:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   19022:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	elapsed_event = latency_event + 1;
   19024:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   19028:	e9cd 7708 	strd	r7, r7, [sp, #32]
	elapsed_event = latency_event + 1;
   1902c:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   19030:	2b00      	cmp	r3, #0
   19032:	d045      	beq.n	190c0 <ull_conn_done+0xd8>
		} else if (lll->role) {
   19034:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   19038:	2b00      	cmp	r3, #0
   1903a:	f2c0 8118 	blt.w	1926e <ull_conn_done+0x286>
	if (done->extra.crc_valid) {
   1903e:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   19042:	2200      	movs	r2, #0
   19044:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   19048:	2b00      	cmp	r3, #0
   1904a:	f000 80cd 	beq.w	191e8 <ull_conn_done+0x200>
		conn->supervision_expire = 0U;
   1904e:	2300      	movs	r3, #0
   19050:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   19054:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   19058:	b133      	cbz	r3, 19068 <ull_conn_done+0x80>
		if (conn->procedure_expire > elapsed_event) {
   1905a:	4543      	cmp	r3, r8
   1905c:	f240 8118 	bls.w	19290 <ull_conn_done+0x2a8>
			conn->procedure_expire -= elapsed_event;
   19060:	eba3 0308 	sub.w	r3, r3, r8
   19064:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   19068:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1906c:	b133      	cbz	r3, 1907c <ull_conn_done+0x94>
		if (conn->apto_expire > elapsed_event) {
   1906e:	4543      	cmp	r3, r8
   19070:	f240 80ea 	bls.w	19248 <ull_conn_done+0x260>
			conn->apto_expire -= elapsed_event;
   19074:	eba3 0308 	sub.w	r3, r3, r8
   19078:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   1907c:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   19080:	2b00      	cmp	r3, #0
   19082:	d046      	beq.n	19112 <ull_conn_done+0x12a>
		if (conn->appto_expire > elapsed_event) {
   19084:	4543      	cmp	r3, r8
   19086:	f200 80be 	bhi.w	19206 <ull_conn_done+0x21e>
			conn->appto_expire = 0U;
   1908a:	2300      	movs	r3, #0
   1908c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   19090:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   19094:	2b00      	cmp	r3, #0
   19096:	d13c      	bne.n	19112 <ull_conn_done+0x12a>
			    (conn->llcp_req == conn->llcp_ack)) {
   19098:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1909c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
   190a0:	4293      	cmp	r3, r2
   190a2:	d13a      	bne.n	1911a <ull_conn_done+0x132>
				conn->llcp_ack -= 2U;
   190a4:	3b02      	subs	r3, #2
   190a6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   190aa:	2305      	movs	r3, #5
   190ac:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   190b0:	e038      	b.n	19124 <ull_conn_done+0x13c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   190b2:	2108      	movs	r1, #8
   190b4:	4620      	mov	r0, r4
   190b6:	f7ff ff11 	bl	18edc <conn_cleanup>
}
   190ba:	b00b      	add	sp, #44	; 0x2c
   190bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   190c0:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   190c4:	2b00      	cmp	r3, #0
   190c6:	d1c2      	bne.n	1904e <ull_conn_done+0x66>
	else if (conn->connect_expire) {
   190c8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   190cc:	2b00      	cmp	r3, #0
   190ce:	f000 808b 	beq.w	191e8 <ull_conn_done+0x200>
		if (conn->connect_expire > elapsed_event) {
   190d2:	4543      	cmp	r3, r8
   190d4:	f240 80f3 	bls.w	192be <ull_conn_done+0x2d6>
			conn->connect_expire -= elapsed_event;
   190d8:	eba3 0308 	sub.w	r3, r3, r8
   190dc:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   190e0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   190e4:	2b00      	cmp	r3, #0
   190e6:	d0b5      	beq.n	19054 <ull_conn_done+0x6c>
		if (conn->supervision_expire > elapsed_event) {
   190e8:	4598      	cmp	r8, r3
   190ea:	d2e2      	bcs.n	190b2 <ull_conn_done+0xca>
			conn->supervision_expire -= elapsed_event;
   190ec:	eba3 0308 	sub.w	r3, r3, r8
   190f0:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   190f2:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   190f4:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   190f6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   190fa:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   190fc:	d907      	bls.n	1910e <ull_conn_done+0x126>
			else if (lll->role) {
   190fe:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   19102:	4293      	cmp	r3, r2
   19104:	daa6      	bge.n	19054 <ull_conn_done+0x6c>
				if (latency_event) {
   19106:	f1b9 0f00 	cmp.w	r9, #0
   1910a:	f000 80ca 	beq.w	192a2 <ull_conn_done+0x2ba>
				force = 1U;
   1910e:	2701      	movs	r7, #1
   19110:	e7a0      	b.n	19054 <ull_conn_done+0x6c>
			    (conn->llcp_req == conn->llcp_ack)) {
   19112:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   19116:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1911a:	1a9b      	subs	r3, r3, r2
   1911c:	f003 0303 	and.w	r3, r3, #3
   19120:	2b02      	cmp	r3, #2
   19122:	d07d      	beq.n	19220 <ull_conn_done+0x238>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   19124:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   19128:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   1912c:	429a      	cmp	r2, r3
   1912e:	f000 809c 	beq.w	1926a <ull_conn_done+0x282>
		lll->latency_event = 0U;
   19132:	2200      	movs	r2, #0
   19134:	84aa      	strh	r2, [r5, #36]	; 0x24
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19136:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   19138:	b90f      	cbnz	r7, 1913e <ull_conn_done+0x156>
   1913a:	4591      	cmp	r9, r2
   1913c:	d07d      	beq.n	1923a <ull_conn_done+0x252>
		lazy = lll->latency_event + 1U;
   1913e:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19140:	9c08      	ldr	r4, [sp, #32]
		lazy = lll->latency_event + 1U;
   19142:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19144:	b90b      	cbnz	r3, 1914a <ull_conn_done+0x162>
   19146:	2c00      	cmp	r4, #0
   19148:	d058      	beq.n	191fc <ull_conn_done+0x214>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1914a:	8baa      	ldrh	r2, [r5, #28]
		struct ll_conn *conn = lll->hdr.parent;
   1914c:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1914e:	9400      	str	r4, [sp, #0]
   19150:	2000      	movs	r0, #0
   19152:	4c68      	ldr	r4, [pc, #416]	; (192f4 <ull_conn_done+0x30c>)
   19154:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19156:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19158:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1915c:	9704      	str	r7, [sp, #16]
   1915e:	9506      	str	r5, [sp, #24]
   19160:	b2d2      	uxtb	r2, r2
   19162:	2101      	movs	r1, #1
   19164:	9405      	str	r4, [sp, #20]
   19166:	f7f8 fe51 	bl	11e0c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1916a:	f030 0302 	bics.w	r3, r0, #2
   1916e:	d0a4      	beq.n	190ba <ull_conn_done+0xd2>
   19170:	f7fb fa78 	bl	14664 <ull_disable_mark_get>
   19174:	4285      	cmp	r5, r0
   19176:	d0a0      	beq.n	190ba <ull_conn_done+0xd2>
   19178:	4a5f      	ldr	r2, [pc, #380]	; (192f8 <ull_conn_done+0x310>)
   1917a:	4960      	ldr	r1, [pc, #384]	; (192fc <ull_conn_done+0x314>)
   1917c:	4860      	ldr	r0, [pc, #384]	; (19300 <ull_conn_done+0x318>)
   1917e:	f240 5376 	movw	r3, #1398	; 0x576
   19182:	f009 f8a9 	bl	222d8 <printk>
   19186:	4040      	eors	r0, r0
   19188:	f380 8811 	msr	BASEPRI, r0
   1918c:	f04f 0003 	mov.w	r0, #3
   19190:	df02      	svc	2
   19192:	e792      	b.n	190ba <ull_conn_done+0xd2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   19194:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   19198:	0719      	lsls	r1, r3, #28
   1919a:	d548      	bpl.n	1922e <ull_conn_done+0x246>
					    (lll->latency + 6)) ?
   1919c:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   1919e:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   191a2:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   191a4:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   191a6:	bfc4      	itt	gt
   191a8:	1ad3      	subgt	r3, r2, r3
   191aa:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   191ac:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   191b0:	bfcc      	ite	gt
   191b2:	b29b      	uxthgt	r3, r3
   191b4:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   191b6:	4299      	cmp	r1, r3
   191b8:	d064      	beq.n	19284 <ull_conn_done+0x29c>
				conn->appto_reload = appto_reload_new;
   191ba:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   191be:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   191c2:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   191c6:	e725      	b.n	19014 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_peer =
   191c8:	273d      	movs	r7, #61	; 0x3d
   191ca:	f884 713b 	strb.w	r7, [r4, #315]	; 0x13b
		conn_cleanup(conn, reason_peer);
   191ce:	4639      	mov	r1, r7
   191d0:	4620      	mov	r0, r4
}
   191d2:	b00b      	add	sp, #44	; 0x2c
   191d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_peer);
   191d8:	f7ff be80 	b.w	18edc <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   191dc:	2300      	movs	r3, #0
   191de:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   191e2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   191e6:	e715      	b.n	19014 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   191e8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   191ec:	2b00      	cmp	r3, #0
   191ee:	f47f af7b 	bne.w	190e8 <ull_conn_done+0x100>
			conn->supervision_expire = conn->supervision_reload;
   191f2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   191f6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   191fa:	e773      	b.n	190e4 <ull_conn_done+0xfc>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   191fc:	2900      	cmp	r1, #0
   191fe:	d1a4      	bne.n	1914a <ull_conn_done+0x162>
   19200:	2f00      	cmp	r7, #0
   19202:	d1a2      	bne.n	1914a <ull_conn_done+0x162>
   19204:	e759      	b.n	190ba <ull_conn_done+0xd2>
			conn->appto_expire -= elapsed_event;
   19206:	eba3 0308 	sub.w	r3, r3, r8
			    (conn->llcp_req == conn->llcp_ack)) {
   1920a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->appto_expire -= elapsed_event;
   1920e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			    (conn->llcp_req == conn->llcp_ack)) {
   19212:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19216:	1a9b      	subs	r3, r3, r2
   19218:	f003 0303 	and.w	r3, r3, #3
   1921c:	2b02      	cmp	r3, #2
   1921e:	d181      	bne.n	19124 <ull_conn_done+0x13c>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   19220:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19224:	3b01      	subs	r3, #1
   19226:	2b01      	cmp	r3, #1
   19228:	f63f af7c 	bhi.w	19124 <ull_conn_done+0x13c>
   1922c:	e781      	b.n	19132 <ull_conn_done+0x14a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1922e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   19232:	07da      	lsls	r2, r3, #31
   19234:	f57f aeee 	bpl.w	19014 <ull_conn_done+0x2c>
   19238:	e7b0      	b.n	1919c <ull_conn_done+0x1b4>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1923a:	9c08      	ldr	r4, [sp, #32]
   1923c:	b913      	cbnz	r3, 19244 <ull_conn_done+0x25c>
   1923e:	2c00      	cmp	r4, #0
   19240:	f43f af3b 	beq.w	190ba <ull_conn_done+0xd2>
	lazy = 0U;
   19244:	4639      	mov	r1, r7
   19246:	e780      	b.n	1914a <ull_conn_done+0x162>
			rx = ll_pdu_rx_alloc();
   19248:	f7fb f95e 	bl	14508 <ll_pdu_rx_alloc>
			if (rx) {
   1924c:	4601      	mov	r1, r0
   1924e:	b320      	cbz	r0, 1929a <ull_conn_done+0x2b2>
				rx->handle = lll->handle;
   19250:	8bab      	ldrh	r3, [r5, #28]
				conn->apto_expire = 0U;
   19252:	2200      	movs	r2, #0
   19254:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
   19258:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1925a:	2317      	movs	r3, #23
   1925c:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1925e:	6800      	ldr	r0, [r0, #0]
   19260:	f7fb f924 	bl	144ac <ll_rx_put>
				ll_rx_sched();
   19264:	f7fb f92c 	bl	144c0 <ll_rx_sched>
   19268:	e708      	b.n	1907c <ull_conn_done+0x94>
	if ((force) || (latency_event != lll->latency_event)) {
   1926a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   1926c:	e763      	b.n	19136 <ull_conn_done+0x14e>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1926e:	aa08      	add	r2, sp, #32
   19270:	a909      	add	r1, sp, #36	; 0x24
   19272:	4630      	mov	r0, r6
   19274:	f7e8 fbc0 	bl	19f8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   19278:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   1927c:	b323      	cbz	r3, 192c8 <ull_conn_done+0x2e0>
				lll->latency_event = 0;
   1927e:	2300      	movs	r3, #0
   19280:	84ab      	strh	r3, [r5, #36]	; 0x24
   19282:	e6dc      	b.n	1903e <ull_conn_done+0x56>
			if (conn->apto_expire == 0U) {
   19284:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   19288:	2900      	cmp	r1, #0
   1928a:	f47f aec3 	bne.w	19014 <ull_conn_done+0x2c>
   1928e:	e796      	b.n	191be <ull_conn_done+0x1d6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   19290:	2122      	movs	r1, #34	; 0x22
   19292:	4620      	mov	r0, r4
   19294:	f7ff fe22 	bl	18edc <conn_cleanup>
			return;
   19298:	e70f      	b.n	190ba <ull_conn_done+0xd2>
				conn->apto_expire = 1U;
   1929a:	2301      	movs	r3, #1
   1929c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   192a0:	e6ec      	b.n	1907c <ull_conn_done+0x94>
					force = conn->slave.force & 0x01;
   192a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   192a6:	085a      	lsrs	r2, r3, #1
					if (force) {
   192a8:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   192ac:	bf17      	itett	ne
   192ae:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   192b2:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   192b6:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   192ba:	461f      	movne	r7, r3
   192bc:	e6ca      	b.n	19054 <ull_conn_done+0x6c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   192be:	213e      	movs	r1, #62	; 0x3e
   192c0:	4620      	mov	r0, r4
   192c2:	f7ff fe0b 	bl	18edc <conn_cleanup>
			return;
   192c6:	e6f8      	b.n	190ba <ull_conn_done+0xd2>
				ull_conn_tx_demux(UINT8_MAX);
   192c8:	20ff      	movs	r0, #255	; 0xff
   192ca:	f7ff fdb1 	bl	18e30 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   192ce:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   192d2:	2b00      	cmp	r3, #0
   192d4:	d1d3      	bne.n	1927e <ull_conn_done+0x296>
   192d6:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   192da:	463a      	mov	r2, r7
   192dc:	f7f7 fb4a 	bl	10974 <memq_peek>
   192e0:	2800      	cmp	r0, #0
   192e2:	d1cc      	bne.n	1927e <ull_conn_done+0x296>
			} else if (lll->slave.latency_enabled) {
   192e4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   192e8:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   192ea:	bf44      	itt	mi
   192ec:	8c2b      	ldrhmi	r3, [r5, #32]
   192ee:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   192f0:	e6a5      	b.n	1903e <ull_conn_done+0x56>
   192f2:	bf00      	nop
   192f4:	00015521 	.word	0x00015521
   192f8:	0002929c 	.word	0x0002929c
   192fc:	00029430 	.word	0x00029430
   19300:	00028de0 	.word	0x00028de0

00019304 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   19304:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   19308:	2b00      	cmp	r3, #0
   1930a:	f000 80be 	beq.w	1948a <ull_conn_tx_lll_enqueue+0x186>
   1930e:	3901      	subs	r1, #1
{
   19310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   19314:	f8df 8174 	ldr.w	r8, [pc, #372]	; 1948c <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   19318:	f8df a174 	ldr.w	sl, [pc, #372]	; 19490 <ull_conn_tx_lll_enqueue+0x18c>
   1931c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 19494 <ull_conn_tx_lll_enqueue+0x190>
   19320:	4604      	mov	r4, r0
   19322:	b2cd      	uxtb	r5, r1
   19324:	e010      	b.n	19348 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   19326:	4640      	mov	r0, r8
   19328:	f7f7 fab6 	bl	10898 <mem_acquire>
		LL_ASSERT(link);
   1932c:	4607      	mov	r7, r0
   1932e:	b3b0      	cbz	r0, 1939e <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   19330:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   19334:	4631      	mov	r1, r6
   19336:	4638      	mov	r0, r7
   19338:	f7f7 fb12 	bl	10960 <memq_enqueue>
	while (conn->tx_head &&
   1933c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   19340:	3d01      	subs	r5, #1
   19342:	b2ed      	uxtb	r5, r5
   19344:	2b00      	cmp	r3, #0
   19346:	d05c      	beq.n	19402 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   19348:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
	while (conn->tx_head &&
   1934c:	07d1      	lsls	r1, r2, #31
   1934e:	d403      	bmi.n	19358 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   19350:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		 !conn->llcp_phy.pause_tx &&
   19354:	0792      	lsls	r2, r2, #30
   19356:	d53a      	bpl.n	193ce <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   19358:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1935c:	4293      	cmp	r3, r2
   1935e:	d150      	bne.n	19402 <ull_conn_tx_lll_enqueue+0xfe>
   19360:	2dff      	cmp	r5, #255	; 0xff
   19362:	d04e      	beq.n	19402 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19364:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   19368:	4620      	mov	r0, r4
   1936a:	f7fb ff4f 	bl	1520c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1936e:	7903      	ldrb	r3, [r0, #4]
   19370:	f003 0303 	and.w	r3, r3, #3
   19374:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19376:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19378:	d1d5      	bne.n	19326 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   1937a:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   1937c:	2b0b      	cmp	r3, #11
   1937e:	d042      	beq.n	19406 <ull_conn_tx_lll_enqueue+0x102>
   19380:	d81b      	bhi.n	193ba <ull_conn_tx_lll_enqueue+0xb6>
   19382:	2b04      	cmp	r3, #4
   19384:	d1cf      	bne.n	19326 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   19386:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1938a:	f043 0302 	orr.w	r3, r3, #2
   1938e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		link = mem_acquire(&mem_link_tx.free);
   19392:	4640      	mov	r0, r8
   19394:	f7f7 fa80 	bl	10898 <mem_acquire>
		LL_ASSERT(link);
   19398:	4607      	mov	r7, r0
   1939a:	2800      	cmp	r0, #0
   1939c:	d1c8      	bne.n	19330 <ull_conn_tx_lll_enqueue+0x2c>
   1939e:	483e      	ldr	r0, [pc, #248]	; (19498 <ull_conn_tx_lll_enqueue+0x194>)
   193a0:	f240 53ca 	movw	r3, #1482	; 0x5ca
   193a4:	4652      	mov	r2, sl
   193a6:	4649      	mov	r1, r9
   193a8:	f008 ff96 	bl	222d8 <printk>
   193ac:	4040      	eors	r0, r0
   193ae:	f380 8811 	msr	BASEPRI, r0
   193b2:	f04f 0003 	mov.w	r0, #3
   193b6:	df02      	svc	2
   193b8:	e7ba      	b.n	19330 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   193ba:	3b16      	subs	r3, #22
   193bc:	2b01      	cmp	r3, #1
   193be:	d8b2      	bhi.n	19326 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   193c0:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   193c4:	f043 0301 	orr.w	r3, r3, #1
   193c8:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
		break;
   193cc:	e7ab      	b.n	19326 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   193ce:	791a      	ldrb	r2, [r3, #4]
   193d0:	f002 0203 	and.w	r2, r2, #3
   193d4:	2a03      	cmp	r2, #3
   193d6:	d1c3      	bne.n	19360 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   193d8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   193da:	2a03      	cmp	r2, #3
   193dc:	d001      	beq.n	193e2 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   193de:	2a0a      	cmp	r2, #10
   193e0:	d1be      	bne.n	19360 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   193e2:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   193e6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   193ea:	428a      	cmp	r2, r1
   193ec:	d010      	beq.n	19410 <ull_conn_tx_lll_enqueue+0x10c>
   193ee:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   193f2:	2a03      	cmp	r2, #3
   193f4:	d0b4      	beq.n	19360 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   193f6:	681a      	ldr	r2, [r3, #0]
   193f8:	b11a      	cbz	r2, 19402 <ull_conn_tx_lll_enqueue+0xfe>
   193fa:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   193fe:	428a      	cmp	r2, r1
   19400:	d032      	beq.n	19468 <ull_conn_tx_lll_enqueue+0x164>
}
   19402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   19406:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1940a:	2b00      	cmp	r3, #0
   1940c:	da8b      	bge.n	19326 <ull_conn_tx_lll_enqueue+0x22>
   1940e:	e7ba      	b.n	19386 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   19410:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   19414:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   19418:	4288      	cmp	r0, r1
   1941a:	d1ec      	bne.n	193f6 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1941c:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   19420:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   19424:	4288      	cmp	r0, r1
   19426:	d1e6      	bne.n	193f6 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   19428:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
   1942c:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   19430:	4288      	cmp	r0, r1
   19432:	d1e0      	bne.n	193f6 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   19434:	f894 01a5 	ldrb.w	r0, [r4, #421]	; 0x1a5
   19438:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
   1943c:	4288      	cmp	r0, r1
   1943e:	d1da      	bne.n	193f6 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   19440:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   19444:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   19448:	4288      	cmp	r0, r1
   1944a:	d1d4      	bne.n	193f6 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1944c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_ack -= 2U;
   19450:	3a02      	subs	r2, #2
   19452:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19456:	2201      	movs	r2, #1
   19458:	f362 0301 	bfi	r3, r2, #0, #2
   1945c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_type = LLCP_ENCRYPTION;
   19460:	2303      	movs	r3, #3
   19462:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   19466:	e77b      	b.n	19360 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   19468:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
				tx->next = conn->tx_ctrl_last->next;
   1946c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
				if (!conn->tx_data_last) {
   19470:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				tx->next = conn->tx_ctrl_last->next;
   19474:	6810      	ldr	r0, [r2, #0]
   19476:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   19478:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1947a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				if (!conn->tx_data_last) {
   1947e:	2900      	cmp	r1, #0
   19480:	f47f af6e 	bne.w	19360 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   19484:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   19488:	e76a      	b.n	19360 <ull_conn_tx_lll_enqueue+0x5c>
   1948a:	4770      	bx	lr
   1948c:	2000eca4 	.word	0x2000eca4
   19490:	0002929c 	.word	0x0002929c
   19494:	000292ec 	.word	0x000292ec
   19498:	00028de0 	.word	0x00028de0

0001949c <tx_demux>:
{
   1949c:	b510      	push	{r4, lr}
   1949e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   194a0:	2001      	movs	r0, #1
   194a2:	f7ff fcc5 	bl	18e30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   194a6:	4620      	mov	r0, r4
   194a8:	2101      	movs	r1, #1
}
   194aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   194ae:	f7ff bf29 	b.w	19304 <ull_conn_tx_lll_enqueue>
   194b2:	bf00      	nop

000194b4 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   194b4:	4901      	ldr	r1, [pc, #4]	; (194bc <ull_conn_link_tx_release+0x8>)
   194b6:	f7f7 ba09 	b.w	108cc <mem_release>
   194ba:	bf00      	nop
   194bc:	2000eca4 	.word	0x2000eca4

000194c0 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   194c0:	4b01      	ldr	r3, [pc, #4]	; (194c8 <ull_conn_ack_last_idx_get+0x8>)
}
   194c2:	78d8      	ldrb	r0, [r3, #3]
   194c4:	4770      	bx	lr
   194c6:	bf00      	nop
   194c8:	20000614 	.word	0x20000614

000194cc <ull_conn_ack_peek>:
{
   194cc:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   194ce:	4b0c      	ldr	r3, [pc, #48]	; (19500 <ull_conn_ack_peek+0x34>)
   194d0:	f893 c002 	ldrb.w	ip, [r3, #2]
   194d4:	78dc      	ldrb	r4, [r3, #3]
   194d6:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   194d8:	45a4      	cmp	ip, r4
   194da:	d00f      	beq.n	194fc <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   194dc:	fb1c fc05 	smulbb	ip, ip, r5
   194e0:	3304      	adds	r3, #4
	if (!lll_tx) {
   194e2:	4686      	mov	lr, r0
   194e4:	eb13 000c 	adds.w	r0, r3, ip
   194e8:	d007      	beq.n	194fa <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   194ea:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   194ee:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   194f2:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   194f4:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   194f6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   194f8:	6818      	ldr	r0, [r3, #0]
}
   194fa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   194fc:	2000      	movs	r0, #0
}
   194fe:	bd30      	pop	{r4, r5, pc}
   19500:	20000614 	.word	0x20000614

00019504 <ull_conn_ack_by_last_peek>:
{
   19504:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   19506:	4b0c      	ldr	r3, [pc, #48]	; (19538 <ull_conn_ack_by_last_peek+0x34>)
   19508:	f893 c002 	ldrb.w	ip, [r3, #2]
   1950c:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   19510:	4584      	cmp	ip, r0
   19512:	d00e      	beq.n	19532 <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   19514:	3304      	adds	r3, #4
   19516:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   1951a:	eb13 000c 	adds.w	r0, r3, ip
   1951e:	d006      	beq.n	1952e <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   19520:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   19524:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   19526:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   1952a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1952c:	6818      	ldr	r0, [r3, #0]
}
   1952e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   19532:	2000      	movs	r0, #0
   19534:	e7fb      	b.n	1952e <ull_conn_ack_by_last_peek+0x2a>
   19536:	bf00      	nop
   19538:	20000614 	.word	0x20000614

0001953c <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   1953c:	4b09      	ldr	r3, [pc, #36]	; (19564 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1953e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   19540:	78da      	ldrb	r2, [r3, #3]
   19542:	7818      	ldrb	r0, [r3, #0]
   19544:	f893 c001 	ldrb.w	ip, [r3, #1]
   19548:	428a      	cmp	r2, r1
   1954a:	d009      	beq.n	19560 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   1954c:	1c4a      	adds	r2, r1, #1
   1954e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   19550:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   19554:	4594      	cmp	ip, r2
   19556:	bf08      	it	eq
   19558:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1955a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1955c:	709a      	strb	r2, [r3, #2]
	return mem;
   1955e:	4770      	bx	lr
		return NULL;
   19560:	2000      	movs	r0, #0
}
   19562:	4770      	bx	lr
   19564:	20000614 	.word	0x20000614

00019568 <ull_conn_lll_ack_enqueue>:
{
   19568:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1956a:	4a15      	ldr	r2, [pc, #84]	; (195c0 <ull_conn_lll_ack_enqueue+0x58>)
   1956c:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1956e:	f892 e001 	ldrb.w	lr, [r2, #1]
   19572:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   19576:	1c63      	adds	r3, r4, #1
   19578:	b2db      	uxtb	r3, r3
		last = 0U;
   1957a:	459e      	cmp	lr, r3
   1957c:	bf08      	it	eq
   1957e:	2300      	moveq	r3, #0
	if (last == first) {
   19580:	459c      	cmp	ip, r3
   19582:	d00c      	beq.n	1959e <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19584:	4696      	mov	lr, r2
   19586:	f81e cb04 	ldrb.w	ip, [lr], #4
   1958a:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   1958e:	eb1e 040c 	adds.w	r4, lr, ip
   19592:	d004      	beq.n	1959e <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   19594:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   19598:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   1959a:	70d3      	strb	r3, [r2, #3]
}
   1959c:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   1959e:	4a09      	ldr	r2, [pc, #36]	; (195c4 <ull_conn_lll_ack_enqueue+0x5c>)
   195a0:	4909      	ldr	r1, [pc, #36]	; (195c8 <ull_conn_lll_ack_enqueue+0x60>)
   195a2:	480a      	ldr	r0, [pc, #40]	; (195cc <ull_conn_lll_ack_enqueue+0x64>)
   195a4:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   195a8:	f008 fe96 	bl	222d8 <printk>
   195ac:	4040      	eors	r0, r0
   195ae:	f380 8811 	msr	BASEPRI, r0
   195b2:	f04f 0003 	mov.w	r0, #3
   195b6:	df02      	svc	2
	lll_tx->handle = handle;
   195b8:	2300      	movs	r3, #0
   195ba:	801b      	strh	r3, [r3, #0]
   195bc:	deff      	udf	#255	; 0xff
   195be:	bf00      	nop
   195c0:	20000614 	.word	0x20000614
   195c4:	0002929c 	.word	0x0002929c
   195c8:	000292dc 	.word	0x000292dc
   195cc:	00028de0 	.word	0x00028de0

000195d0 <ull_conn_tx_ack>:
{
   195d0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   195d2:	7953      	ldrb	r3, [r2, #5]
{
   195d4:	b082      	sub	sp, #8
   195d6:	4614      	mov	r4, r2
   195d8:	4605      	mov	r5, r0
   195da:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   195dc:	b37b      	cbz	r3, 1963e <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   195de:	7923      	ldrb	r3, [r4, #4]
   195e0:	f003 0203 	and.w	r2, r3, #3
   195e4:	2a03      	cmp	r2, #3
   195e6:	d00d      	beq.n	19604 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   195e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   195ec:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   195ee:	bf04      	itt	eq
   195f0:	f36f 0301 	bfceq	r3, #0, #2
   195f4:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   195f6:	4621      	mov	r1, r4
   195f8:	4628      	mov	r0, r5
}
   195fa:	b002      	add	sp, #8
   195fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   19600:	f7fa bf98 	b.w	14534 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   19604:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19608:	429d      	cmp	r5, r3
   1960a:	d126      	bne.n	1965a <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   1960c:	6833      	ldr	r3, [r6, #0]
   1960e:	429c      	cmp	r4, r3
   19610:	d03e      	beq.n	19690 <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   19612:	2b00      	cmp	r3, #0
   19614:	d0ef      	beq.n	195f6 <ull_conn_tx_ack+0x26>
   19616:	4a64      	ldr	r2, [pc, #400]	; (197a8 <ull_conn_tx_ack+0x1d8>)
   19618:	4964      	ldr	r1, [pc, #400]	; (197ac <ull_conn_tx_ack+0x1dc>)
   1961a:	4865      	ldr	r0, [pc, #404]	; (197b0 <ull_conn_tx_ack+0x1e0>)
   1961c:	f44f 63c5 	mov.w	r3, #1576	; 0x628
   19620:	f008 fe5a 	bl	222d8 <printk>
   19624:	4040      	eors	r0, r0
   19626:	f380 8811 	msr	BASEPRI, r0
   1962a:	f04f 0003 	mov.w	r0, #3
   1962e:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   19630:	4621      	mov	r1, r4
   19632:	4628      	mov	r0, r5
}
   19634:	b002      	add	sp, #8
   19636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1963a:	f7fa bf7b 	b.w	14534 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1963e:	4a5a      	ldr	r2, [pc, #360]	; (197a8 <ull_conn_tx_ack+0x1d8>)
   19640:	495c      	ldr	r1, [pc, #368]	; (197b4 <ull_conn_tx_ack+0x1e4>)
   19642:	485b      	ldr	r0, [pc, #364]	; (197b0 <ull_conn_tx_ack+0x1e0>)
   19644:	f240 6315 	movw	r3, #1557	; 0x615
   19648:	f008 fe46 	bl	222d8 <printk>
   1964c:	4040      	eors	r0, r0
   1964e:	f380 8811 	msr	BASEPRI, r0
   19652:	f04f 0003 	mov.w	r0, #3
   19656:	df02      	svc	2
   19658:	e7c1      	b.n	195de <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1965a:	462a      	mov	r2, r5
   1965c:	4856      	ldr	r0, [pc, #344]	; (197b8 <ull_conn_tx_ack+0x1e8>)
   1965e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   19662:	f7f7 f94b 	bl	108fc <mem_get>
   19666:	79e2      	ldrb	r2, [r4, #7]
   19668:	3a02      	subs	r2, #2
   1966a:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   1966c:	2a15      	cmp	r2, #21
   1966e:	d80c      	bhi.n	1968a <ull_conn_tx_ack+0xba>
   19670:	e8df f002 	tbb	[pc, r2]
   19674:	0b150b51 	.word	0x0b150b51
   19678:	0b0b0b0b 	.word	0x0b0b0b0b
   1967c:	470b150b 	.word	0x470b150b
   19680:	440b0b0b 	.word	0x440b0b0b
   19684:	587e0b0b 	.word	0x587e0b0b
   19688:	231c      	.short	0x231c
		if (link->next == (void *)tx) {
   1968a:	6833      	ldr	r3, [r6, #0]
   1968c:	42a3      	cmp	r3, r4
   1968e:	d1c0      	bne.n	19612 <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   19690:	494a      	ldr	r1, [pc, #296]	; (197bc <ull_conn_tx_ack+0x1ec>)
   19692:	4620      	mov	r0, r4
}
   19694:	b002      	add	sp, #8
   19696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1969a:	f7f7 b917 	b.w	108cc <mem_release>
			conn->llcp_enc.pause_tx = 1U;
   1969e:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
   196a2:	f042 0202 	orr.w	r2, r2, #2
   196a6:	f880 215e 	strb.w	r2, [r0, #350]	; 0x15e
		break;
   196aa:	e7af      	b.n	1960c <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   196ac:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   196b0:	2102      	movs	r1, #2
   196b2:	f361 0201 	bfi	r2, r1, #0, #2
   196b6:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
		if (conn->lll.role) {
   196ba:	f993 203d 	ldrsb.w	r2, [r3, #61]	; 0x3d
   196be:	2a00      	cmp	r2, #0
   196c0:	da15      	bge.n	196ee <ull_conn_tx_ack+0x11e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   196c2:	4a3f      	ldr	r2, [pc, #252]	; (197c0 <ull_conn_tx_ack+0x1f0>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   196c4:	f893 c064 	ldrb.w	ip, [r3, #100]	; 0x64
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   196c8:	e892 0003 	ldmia.w	r2, {r0, r1}
   196cc:	aa02      	add	r2, sp, #8
   196ce:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   196d2:	f893 21b6 	ldrb.w	r2, [r3, #438]	; 0x1b6
   196d6:	ea4c 0292 	orr.w	r2, ip, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   196da:	f002 0207 	and.w	r2, r2, #7
   196de:	a902      	add	r1, sp, #8
   196e0:	440a      	add	r2, r1
   196e2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   196e6:	f362 1c06 	bfi	ip, r2, #4, #3
   196ea:	f883 c064 	strb.w	ip, [r3, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   196ee:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
   196f2:	f36f 0200 	bfc	r2, #0, #1
   196f6:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
		break;
   196fa:	e787      	b.n	1960c <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   196fc:	7a22      	ldrb	r2, [r4, #8]
   196fe:	2a03      	cmp	r2, #3
   19700:	d184      	bne.n	1960c <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   19702:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
   19706:	f022 0203 	bic.w	r2, r2, #3
   1970a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   1970e:	2200      	movs	r2, #0
   19710:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		break;
   19714:	e77a      	b.n	1960c <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   19716:	7a21      	ldrb	r1, [r4, #8]
   19718:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1971a:	bf08      	it	eq
   1971c:	2116      	moveq	r1, #22
   1971e:	f7ff fbdd 	bl	18edc <conn_cleanup>
	break;
   19722:	e773      	b.n	1960c <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   19724:	f890 01a4 	ldrb.w	r0, [r0, #420]	; 0x1a4
   19728:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
   1972c:	4282      	cmp	r2, r0
   1972e:	f43f af6d 	beq.w	1960c <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   19732:	f893 11a6 	ldrb.w	r1, [r3, #422]	; 0x1a6
   19736:	f001 0207 	and.w	r2, r1, #7
   1973a:	2a03      	cmp	r2, #3
   1973c:	d004      	beq.n	19748 <ull_conn_tx_ack+0x178>
   1973e:	3203      	adds	r2, #3
   19740:	f002 0207 	and.w	r2, r2, #7
   19744:	2a01      	cmp	r2, #1
   19746:	d8a0      	bhi.n	1968a <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   19748:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
   1974c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				conn->lll.max_tx_time =
   19750:	f8b3 21ae 	ldrh.w	r2, [r3, #430]	; 0x1ae
   19754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				if (conn->llcp_length.state ==
   19758:	f001 0207 	and.w	r2, r1, #7
   1975c:	2a05      	cmp	r2, #5
   1975e:	d00f      	beq.n	19780 <ull_conn_tx_ack+0x1b0>
				if (!conn->llcp_length.cache.tx_octets) {
   19760:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
   19764:	b992      	cbnz	r2, 1978c <ull_conn_tx_ack+0x1bc>
					conn->llcp_length.ack =
   19766:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
					conn->procedure_expire = 0U;
   1976a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					break;
   1976e:	e74d      	b.n	1960c <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   19770:	f890 21a6 	ldrb.w	r2, [r0, #422]	; 0x1a6
   19774:	2102      	movs	r1, #2
   19776:	f361 0202 	bfi	r2, r1, #0, #3
   1977a:	f880 21a6 	strb.w	r2, [r0, #422]	; 0x1a6
		break;
   1977e:	e745      	b.n	1960c <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   19780:	2204      	movs	r2, #4
   19782:	f362 0102 	bfi	r1, r2, #0, #3
   19786:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
					break;
   1978a:	e73f      	b.n	1960c <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   1978c:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   19790:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19792:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   19796:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   1979a:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1979e:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   197a2:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
				break;
   197a6:	e731      	b.n	1960c <ull_conn_tx_ack+0x3c>
   197a8:	0002929c 	.word	0x0002929c
   197ac:	00029498 	.word	0x00029498
   197b0:	00028de0 	.word	0x00028de0
   197b4:	0002948c 	.word	0x0002948c
   197b8:	2000e774 	.word	0x2000e774
   197bc:	2000eba0 	.word	0x2000eba0
   197c0:	000294a4 	.word	0x000294a4

000197c4 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   197c4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	if (lll->enc_tx) {
   197c8:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	switch (lll->phy_tx_time) {
   197cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
   197d0:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   197d2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	return max_tx_octets;
   197d6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   197da:	bf15      	itete	ne
   197dc:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   197de:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   197e0:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   197e2:	3b0b      	subeq	r3, #11
   197e4:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   197e6:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   197e8:	bf44      	itt	mi
   197ea:	3b04      	submi	r3, #4
   197ec:	b29b      	uxthmi	r3, r3
}
   197ee:	4298      	cmp	r0, r3
   197f0:	bf28      	it	cs
   197f2:	4618      	movcs	r0, r3
   197f4:	4770      	bx	lr
   197f6:	bf00      	nop

000197f8 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   197f8:	b510      	push	{r4, lr}
   197fa:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   197fc:	b930      	cbnz	r0, 1980c <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   197fe:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19802:	f36f 0341 	bfc	r3, #1, #1
   19806:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1980a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1980c:	4a09      	ldr	r2, [pc, #36]	; (19834 <ticker_update_latency_cancel_op_cb+0x3c>)
   1980e:	490a      	ldr	r1, [pc, #40]	; (19838 <ticker_update_latency_cancel_op_cb+0x40>)
   19810:	480a      	ldr	r0, [pc, #40]	; (1983c <ticker_update_latency_cancel_op_cb+0x44>)
   19812:	f240 230d 	movw	r3, #525	; 0x20d
   19816:	f008 fd5f 	bl	222d8 <printk>
   1981a:	4040      	eors	r0, r0
   1981c:	f380 8811 	msr	BASEPRI, r0
   19820:	f04f 0003 	mov.w	r0, #3
   19824:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   19826:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1982a:	f36f 0341 	bfc	r3, #1, #1
   1982e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   19832:	bd10      	pop	{r4, pc}
   19834:	000294c4 	.word	0x000294c4
   19838:	00029508 	.word	0x00029508
   1983c:	00028de0 	.word	0x00028de0

00019840 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19840:	b900      	cbnz	r0, 19844 <ticker_op_cb+0x4>
   19842:	4770      	bx	lr
{
   19844:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19846:	4a07      	ldr	r2, [pc, #28]	; (19864 <ticker_op_cb+0x24>)
   19848:	4907      	ldr	r1, [pc, #28]	; (19868 <ticker_op_cb+0x28>)
   1984a:	4808      	ldr	r0, [pc, #32]	; (1986c <ticker_op_cb+0x2c>)
   1984c:	f240 2305 	movw	r3, #517	; 0x205
   19850:	f008 fd42 	bl	222d8 <printk>
   19854:	4040      	eors	r0, r0
   19856:	f380 8811 	msr	BASEPRI, r0
   1985a:	f04f 0003 	mov.w	r0, #3
   1985e:	df02      	svc	2
}
   19860:	bd08      	pop	{r3, pc}
   19862:	bf00      	nop
   19864:	000294c4 	.word	0x000294c4
   19868:	000292f4 	.word	0x000292f4
   1986c:	00028de0 	.word	0x00028de0

00019870 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   19870:	2801      	cmp	r0, #1
   19872:	d000      	beq.n	19876 <ticker_op_stop_adv_cb+0x6>
   19874:	4770      	bx	lr
{
   19876:	b510      	push	{r4, lr}
   19878:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1987a:	f7fa fef3 	bl	14664 <ull_disable_mark_get>
   1987e:	4284      	cmp	r4, r0
   19880:	d00c      	beq.n	1989c <ticker_op_stop_adv_cb+0x2c>
   19882:	4a07      	ldr	r2, [pc, #28]	; (198a0 <ticker_op_stop_adv_cb+0x30>)
   19884:	4907      	ldr	r1, [pc, #28]	; (198a4 <ticker_op_stop_adv_cb+0x34>)
   19886:	4808      	ldr	r0, [pc, #32]	; (198a8 <ticker_op_stop_adv_cb+0x38>)
   19888:	f240 13fd 	movw	r3, #509	; 0x1fd
   1988c:	f008 fd24 	bl	222d8 <printk>
   19890:	4040      	eors	r0, r0
   19892:	f380 8811 	msr	BASEPRI, r0
   19896:	f04f 0003 	mov.w	r0, #3
   1989a:	df02      	svc	2
}
   1989c:	bd10      	pop	{r4, pc}
   1989e:	bf00      	nop
   198a0:	000294c4 	.word	0x000294c4
   198a4:	0002951c 	.word	0x0002951c
   198a8:	00028de0 	.word	0x00028de0

000198ac <ull_slave_ticker_cb>:
{
   198ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198ae:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   198b0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   198b2:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   198b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   198b8:	4299      	cmp	r1, r3
   198ba:	d023      	beq.n	19904 <ull_slave_ticker_cb+0x58>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   198bc:	4605      	mov	r5, r0
   198be:	4601      	mov	r1, r0
   198c0:	4620      	mov	r0, r4
   198c2:	4616      	mov	r6, r2
   198c4:	f7fe f882 	bl	179cc <ull_conn_llcp>
		if (ret) {
   198c8:	b9e0      	cbnz	r0, 19904 <ull_slave_ticker_cb+0x58>
	return ++hdr->ref;
   198ca:	7c23      	ldrb	r3, [r4, #16]
   198cc:	3301      	adds	r3, #1
   198ce:	b2db      	uxtb	r3, r3
   198d0:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   198d2:	b333      	cbz	r3, 19922 <ull_slave_ticker_cb+0x76>
	p.ticks_at_expire = ticks_at_expire;
   198d4:	491a      	ldr	r1, [pc, #104]	; (19940 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   198d6:	4b1b      	ldr	r3, [pc, #108]	; (19944 <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   198d8:	600d      	str	r5, [r1, #0]
	p.param = &conn->lll;
   198da:	f104 021c 	add.w	r2, r4, #28
   198de:	60ca      	str	r2, [r1, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   198e0:	2200      	movs	r2, #0
	p.remainder = remainder;
   198e2:	604f      	str	r7, [r1, #4]
	p.lazy = lazy;
   198e4:	810e      	strh	r6, [r1, #8]
	mfy.param = &p;
   198e6:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   198e8:	2001      	movs	r0, #1
   198ea:	4611      	mov	r1, r2
   198ec:	f7f7 f8ac 	bl	10a48 <mayfly_enqueue>
	LL_ASSERT(!err);
   198f0:	b948      	cbnz	r0, 19906 <ull_slave_ticker_cb+0x5a>
	ull_conn_tx_demux(UINT8_MAX);
   198f2:	20ff      	movs	r0, #255	; 0xff
   198f4:	f7ff fa9c 	bl	18e30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   198f8:	4620      	mov	r0, r4
   198fa:	21ff      	movs	r1, #255	; 0xff
}
   198fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19900:	f7ff bd00 	b.w	19304 <ull_conn_tx_lll_enqueue>
}
   19904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   19906:	4a10      	ldr	r2, [pc, #64]	; (19948 <ull_slave_ticker_cb+0x9c>)
   19908:	4910      	ldr	r1, [pc, #64]	; (1994c <ull_slave_ticker_cb+0xa0>)
   1990a:	4811      	ldr	r0, [pc, #68]	; (19950 <ull_slave_ticker_cb+0xa4>)
   1990c:	f240 13c1 	movw	r3, #449	; 0x1c1
   19910:	f008 fce2 	bl	222d8 <printk>
   19914:	4040      	eors	r0, r0
   19916:	f380 8811 	msr	BASEPRI, r0
   1991a:	f04f 0003 	mov.w	r0, #3
   1991e:	df02      	svc	2
   19920:	e7e7      	b.n	198f2 <ull_slave_ticker_cb+0x46>
	LL_ASSERT(ref);
   19922:	4a09      	ldr	r2, [pc, #36]	; (19948 <ull_slave_ticker_cb+0x9c>)
   19924:	490b      	ldr	r1, [pc, #44]	; (19954 <ull_slave_ticker_cb+0xa8>)
   19926:	480a      	ldr	r0, [pc, #40]	; (19950 <ull_slave_ticker_cb+0xa4>)
   19928:	f240 13b5 	movw	r3, #437	; 0x1b5
   1992c:	f008 fcd4 	bl	222d8 <printk>
   19930:	4040      	eors	r0, r0
   19932:	f380 8811 	msr	BASEPRI, r0
   19936:	f04f 0003 	mov.w	r0, #3
   1993a:	df02      	svc	2
   1993c:	e7ca      	b.n	198d4 <ull_slave_ticker_cb+0x28>
   1993e:	bf00      	nop
   19940:	2000ed08 	.word	0x2000ed08
   19944:	200006bc 	.word	0x200006bc
   19948:	000294c4 	.word	0x000294c4
   1994c:	00029060 	.word	0x00029060
   19950:	00028de0 	.word	0x00028de0
   19954:	00029224 	.word	0x00029224

00019958 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   19958:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1995a:	b123      	cbz	r3, 19966 <ull_slave_latency_cancel+0xe>
   1995c:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   19960:	f012 0302 	ands.w	r3, r2, #2
   19964:	d000      	beq.n	19968 <ull_slave_latency_cancel+0x10>
   19966:	4770      	bx	lr
{
   19968:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   1996a:	f042 0202 	orr.w	r2, r2, #2
{
   1996e:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   19970:	4c11      	ldr	r4, [pc, #68]	; (199b8 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   19972:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
				      (TICKER_ID_CONN_BASE + handle),
   19976:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   19978:	2201      	movs	r2, #1
   1997a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1997e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   19982:	e9cd 3300 	strd	r3, r3, [sp]
   19986:	9006      	str	r0, [sp, #24]
   19988:	b2ca      	uxtb	r2, r1
   1998a:	4618      	mov	r0, r3
   1998c:	2103      	movs	r1, #3
   1998e:	f7f8 fa3d 	bl	11e0c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19992:	f030 0302 	bics.w	r3, r0, #2
   19996:	d00c      	beq.n	199b2 <ull_slave_latency_cancel+0x5a>
   19998:	4a08      	ldr	r2, [pc, #32]	; (199bc <ull_slave_latency_cancel+0x64>)
   1999a:	4909      	ldr	r1, [pc, #36]	; (199c0 <ull_slave_latency_cancel+0x68>)
   1999c:	4809      	ldr	r0, [pc, #36]	; (199c4 <ull_slave_latency_cancel+0x6c>)
   1999e:	f240 1387 	movw	r3, #391	; 0x187
   199a2:	f008 fc99 	bl	222d8 <printk>
   199a6:	4040      	eors	r0, r0
   199a8:	f380 8811 	msr	BASEPRI, r0
   199ac:	f04f 0003 	mov.w	r0, #3
   199b0:	df02      	svc	2
}
   199b2:	b008      	add	sp, #32
   199b4:	bd10      	pop	{r4, pc}
   199b6:	bf00      	nop
   199b8:	000197f9 	.word	0x000197f9
   199bc:	000294c4 	.word	0x000294c4
   199c0:	0002937c 	.word	0x0002937c
   199c4:	00028de0 	.word	0x00028de0

000199c8 <ll_start_enc_req_send>:
{
   199c8:	b570      	push	{r4, r5, r6, lr}
   199ca:	460e      	mov	r6, r1
   199cc:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   199ce:	f7fc f965 	bl	15c9c <ll_connected_get>
	if (!conn) {
   199d2:	2800      	cmp	r0, #0
   199d4:	d040      	beq.n	19a58 <ll_start_enc_req_send+0x90>
	if (error_code) {
   199d6:	4604      	mov	r4, r0
   199d8:	b95e      	cbnz	r6, 199f2 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   199da:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   199de:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   199e2:	429a      	cmp	r2, r3
   199e4:	d003      	beq.n	199ee <ll_start_enc_req_send+0x26>
   199e6:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   199ea:	2b03      	cmp	r3, #3
   199ec:	d026      	beq.n	19a3c <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   199ee:	200c      	movs	r0, #12
}
   199f0:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   199f2:	f890 015e 	ldrb.w	r0, [r0, #350]	; 0x15e
   199f6:	f010 0004 	ands.w	r0, r0, #4
   199fa:	d112      	bne.n	19a22 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   199fc:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19a00:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19a04:	429a      	cmp	r2, r3
   19a06:	d0f2      	beq.n	199ee <ll_start_enc_req_send+0x26>
   19a08:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   19a0c:	2b03      	cmp	r3, #3
   19a0e:	d1ee      	bne.n	199ee <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19a10:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp.encryption.error_code = error_code;
   19a14:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19a18:	f360 0301 	bfi	r3, r0, #0, #2
   19a1c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   19a20:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   19a22:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
			if (conn->llcp_terminate.ack !=
   19a26:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   19a2a:	4293      	cmp	r3, r2
   19a2c:	d1df      	bne.n	199ee <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   19a2e:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   19a30:	f884 613a 	strb.w	r6, [r4, #314]	; 0x13a
			conn->llcp_terminate.req++;
   19a34:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
	return 0;
   19a38:	2000      	movs	r0, #0
}
   19a3a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   19a3c:	2210      	movs	r2, #16
   19a3e:	4629      	mov	r1, r5
   19a40:	f200 1069 	addw	r0, r0, #361	; 0x169
   19a44:	f00b f904 	bl	24c50 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19a48:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   19a4c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   19a50:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	return 0;
   19a54:	4630      	mov	r0, r6
}
   19a56:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19a58:	2002      	movs	r0, #2
}
   19a5a:	bd70      	pop	{r4, r5, r6, pc}

00019a5c <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   19a5c:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19a5e:	fb02 1c01 	mla	ip, r2, r1, r1
   19a62:	7802      	ldrb	r2, [r0, #0]
   19a64:	491c      	ldr	r1, [pc, #112]	; (19ad8 <lll_chan_sel_1+0x7c>)
{
   19a66:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19a6a:	4494      	add	ip, r2
   19a6c:	fb81 210c 	smull	r2, r1, r1, ip
   19a70:	4461      	add	r1, ip
   19a72:	1149      	asrs	r1, r1, #5
   19a74:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   19a78:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   19a7c:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19a7e:	ebac 0101 	sub.w	r1, ip, r1
   19a82:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   19a84:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19a86:	08c4      	lsrs	r4, r0, #3
   19a88:	f001 0107 	and.w	r1, r1, #7
   19a8c:	f813 c004 	ldrb.w	ip, [r3, r4]
   19a90:	fa4c f101 	asr.w	r1, ip, r1
   19a94:	f011 0101 	ands.w	r1, r1, #1
   19a98:	d11d      	bne.n	19ad6 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   19a9a:	fbb0 f2f5 	udiv	r2, r0, r5
   19a9e:	fb05 0212 	mls	r2, r5, r2, r0
   19aa2:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   19aa4:	f103 3eff 	add.w	lr, r3, #4294967295
   19aa8:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   19aaa:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   19aac:	f100 0c08 	add.w	ip, r0, #8
   19ab0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   19ab4:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   19ab8:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   19abc:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   19ac0:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   19ac4:	d002      	beq.n	19acc <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   19ac6:	b132      	cbz	r2, 19ad6 <lll_chan_sel_1+0x7a>
				chan_index--;
   19ac8:	3a01      	subs	r2, #1
   19aca:	b2d2      	uxtb	r2, r2
			chan_next++;
   19acc:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   19ace:	4584      	cmp	ip, r0
   19ad0:	d1f2      	bne.n	19ab8 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   19ad2:	45a6      	cmp	lr, r4
   19ad4:	d1ea      	bne.n	19aac <lll_chan_sel_1+0x50>
}
   19ad6:	bd30      	pop	{r4, r5, pc}
   19ad8:	dd67c8a7 	.word	0xdd67c8a7

00019adc <lll_chan_sel_2>:
{
   19adc:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19ade:	4d2f      	ldr	r5, [pc, #188]	; (19b9c <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19ae0:	4c2f      	ldr	r4, [pc, #188]	; (19ba0 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   19ae2:	4048      	eors	r0, r1
   19ae4:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19ae8:	0a07      	lsrs	r7, r0, #8
   19aea:	b2c0      	uxtb	r0, r0
   19aec:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   19af0:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   19af4:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   19af8:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19afc:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   19b00:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19b04:	433e      	orrs	r6, r7
   19b06:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19b0a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   19b0e:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   19b12:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   19b16:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   19b1a:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   19b1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
   19b20:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19b24:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   19b28:	f10c 3cff 	add.w	ip, ip, #4294967295
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19b2c:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   19b2e:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19b32:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   19b34:	d1d8      	bne.n	19ae8 <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   19b36:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   19b38:	481a      	ldr	r0, [pc, #104]	; (19ba4 <lll_chan_sel_2+0xc8>)
   19b3a:	fba0 4001 	umull	r4, r0, r0, r1
   19b3e:	1a0c      	subs	r4, r1, r0
   19b40:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   19b44:	0940      	lsrs	r0, r0, #5
   19b46:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   19b4a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   19b4e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19b50:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   19b54:	f000 0507 	and.w	r5, r0, #7
   19b58:	5d14      	ldrb	r4, [r2, r4]
   19b5a:	412c      	asrs	r4, r5
   19b5c:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   19b5e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19b60:	d41a      	bmi.n	19b98 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   19b62:	fb01 f303 	mul.w	r3, r1, r3
   19b66:	1e56      	subs	r6, r2, #1
   19b68:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   19b6c:	3204      	adds	r2, #4
	chan_next = 0U;
   19b6e:	4660      	mov	r0, ip
		bite = *chan_map;
   19b70:	f100 0508 	add.w	r5, r0, #8
   19b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   19b78:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   19b7a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   19b7e:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   19b82:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   19b86:	d002      	beq.n	19b8e <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   19b88:	b133      	cbz	r3, 19b98 <lll_chan_sel_2+0xbc>
				chan_index--;
   19b8a:	3b01      	subs	r3, #1
   19b8c:	b2db      	uxtb	r3, r3
			chan_next++;
   19b8e:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   19b90:	42a8      	cmp	r0, r5
   19b92:	d1f2      	bne.n	19b7a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   19b94:	42b2      	cmp	r2, r6
   19b96:	d1eb      	bne.n	19b70 <lll_chan_sel_2+0x94>
}
   19b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b9a:	bf00      	nop
   19b9c:	00022110 	.word	0x00022110
   19ba0:	00088440 	.word	0x00088440
   19ba4:	bacf914d 	.word	0xbacf914d

00019ba8 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   19ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19bac:	4d18      	ldr	r5, [pc, #96]	; (19c10 <rl_update+0x68>)
   19bae:	4e19      	ldr	r6, [pc, #100]	; (19c14 <rl_update+0x6c>)
   19bb0:	2400      	movs	r4, #0
   19bb2:	f106 39ff 	add.w	r9, r6, #4294967295
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   19bb6:	1eaf      	subs	r7, r5, #2
   19bb8:	f04f 0801 	mov.w	r8, #1
   19bbc:	e006      	b.n	19bcc <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bbe:	3401      	adds	r4, #1
   19bc0:	2c08      	cmp	r4, #8
   19bc2:	f105 0506 	add.w	r5, r5, #6
   19bc6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19bca:	d01e      	beq.n	19c0a <rl_update+0x62>
		if (rl[i].taken) {
   19bcc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19bd0:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   19bd4:	07da      	lsls	r2, r3, #31
   19bd6:	d5f2      	bpl.n	19bbe <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   19bd8:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19bda:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19bdc:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   19be0:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19be4:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   19be6:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19bea:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19bec:	4631      	mov	r1, r6
   19bee:	4628      	mov	r0, r5
   19bf0:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bf2:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   19bf4:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19bf8:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19bfa:	f00b f829 	bl	24c50 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bfe:	2c08      	cmp	r4, #8
   19c00:	f105 0506 	add.w	r5, r5, #6
   19c04:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19c08:	d1e0      	bne.n	19bcc <rl_update+0x24>
}
   19c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19c0e:	bf00      	nop
   19c10:	2000ef12 	.word	0x2000ef12
   19c14:	2000edd1 	.word	0x2000edd1

00019c18 <wl_update>:
{
   19c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c1c:	4e20      	ldr	r6, [pc, #128]	; (19ca0 <wl_update+0x88>)
   19c1e:	4d21      	ldr	r5, [pc, #132]	; (19ca4 <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19c20:	f8df 8084 	ldr.w	r8, [pc, #132]	; 19ca8 <wl_update+0x90>
   19c24:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19cac <wl_update+0x94>
{
   19c28:	2400      	movs	r4, #0
   19c2a:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   19c2e:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   19c30:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19c34:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   19c38:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19c3c:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   19c3e:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19c42:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   19c44:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19c48:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   19c4c:	d021      	beq.n	19c92 <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19c4e:	f898 3000 	ldrb.w	r3, [r8]
   19c52:	b163      	cbz	r3, 19c6e <wl_update+0x56>
		j = wl[i].rl_idx;
   19c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19c58:	2b07      	cmp	r3, #7
   19c5a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   19c5e:	d806      	bhi.n	19c6e <wl_update+0x56>
   19c60:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   19c64:	f013 0f04 	tst.w	r3, #4
   19c68:	d001      	beq.n	19c6e <wl_update+0x56>
   19c6a:	06db      	lsls	r3, r3, #27
   19c6c:	d511      	bpl.n	19c92 <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19c6e:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19c72:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19c76:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   19c7a:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19c7e:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   19c82:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19c86:	40a3      	lsls	r3, r4
   19c88:	ea4e 0303 	orr.w	r3, lr, r3
   19c8c:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19c8e:	f00a ffdf 	bl	24c50 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   19c92:	3401      	adds	r4, #1
   19c94:	2c08      	cmp	r4, #8
   19c96:	f105 0508 	add.w	r5, r5, #8
   19c9a:	d1c9      	bne.n	19c30 <wl_update+0x18>
}
   19c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ca0:	2000ef8a 	.word	0x2000ef8a
   19ca4:	2000ef4a 	.word	0x2000ef4a
   19ca8:	2000fb2d 	.word	0x2000fb2d
   19cac:	2000edd0 	.word	0x2000edd0

00019cb0 <ll_wl_size_get>:
}
   19cb0:	2008      	movs	r0, #8
   19cb2:	4770      	bx	lr

00019cb4 <ll_wl_clear>:
{
   19cb4:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   19cb6:	2000      	movs	r0, #0
   19cb8:	f7fb fa34 	bl	15124 <ull_adv_filter_pol_get>
   19cbc:	b9d8      	cbnz	r0, 19cf6 <ll_wl_clear+0x42>
   19cbe:	4a0f      	ldr	r2, [pc, #60]	; (19cfc <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   19cc0:	4c0f      	ldr	r4, [pc, #60]	; (19d00 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   19cc2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   19cc6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19cc8:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   19cca:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19cce:	d805      	bhi.n	19cdc <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   19cd0:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   19cd4:	f36f 1345 	bfc	r3, #5, #1
   19cd8:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   19cdc:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19ce0:	f36f 0300 	bfc	r3, #0, #1
   19ce4:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19ce8:	3001      	adds	r0, #1
   19cea:	2808      	cmp	r0, #8
   19cec:	d1e9      	bne.n	19cc2 <ll_wl_clear+0xe>
	wl_anon = 0U;
   19cee:	4b05      	ldr	r3, [pc, #20]	; (19d04 <ll_wl_clear+0x50>)
   19cf0:	2000      	movs	r0, #0
   19cf2:	7018      	strb	r0, [r3, #0]
}
   19cf4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19cf6:	200c      	movs	r0, #12
}
   19cf8:	bd10      	pop	{r4, pc}
   19cfa:	bf00      	nop
   19cfc:	2000ef48 	.word	0x2000ef48
   19d00:	2000edd0 	.word	0x2000edd0
   19d04:	2000fb2e 	.word	0x2000fb2e

00019d08 <ll_wl_add>:
{
   19d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d0c:	4681      	mov	r9, r0
   19d0e:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   19d10:	2000      	movs	r0, #0
   19d12:	f7fb fa07 	bl	15124 <ull_adv_filter_pol_get>
   19d16:	2800      	cmp	r0, #0
   19d18:	d173      	bne.n	19e02 <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   19d1a:	f899 a000 	ldrb.w	sl, [r9]
   19d1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   19d22:	4605      	mov	r5, r0
   19d24:	d067      	beq.n	19df6 <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19d26:	4e45      	ldr	r6, [pc, #276]	; (19e3c <ll_wl_add+0x134>)
   19d28:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19d2c:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   19d30:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19d34:	4604      	mov	r4, r0
   19d36:	1eb7      	subs	r7, r6, #2
   19d38:	e009      	b.n	19d4e <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19d3a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   19d3e:	d101      	bne.n	19d44 <ll_wl_add+0x3c>
			*free = i;
   19d40:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   19d44:	3401      	adds	r4, #1
   19d46:	2c08      	cmp	r4, #8
   19d48:	f106 0608 	add.w	r6, r6, #8
   19d4c:	d017      	beq.n	19d7e <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19d4e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19d52:	07d8      	lsls	r0, r3, #31
   19d54:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19d58:	d5ef      	bpl.n	19d3a <ll_wl_add+0x32>
   19d5a:	4552      	cmp	r2, sl
   19d5c:	d1f2      	bne.n	19d44 <ll_wl_add+0x3c>
   19d5e:	2206      	movs	r2, #6
   19d60:	4630      	mov	r0, r6
   19d62:	4659      	mov	r1, fp
   19d64:	f00a ff63 	bl	24c2e <memcmp>
   19d68:	2800      	cmp	r0, #0
   19d6a:	d041      	beq.n	19df0 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19d6c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19d70:	07d9      	lsls	r1, r3, #31
   19d72:	d5e2      	bpl.n	19d3a <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   19d74:	3401      	adds	r4, #1
   19d76:	2c08      	cmp	r4, #8
   19d78:	f106 0608 	add.w	r6, r6, #8
   19d7c:	d1e7      	bne.n	19d4e <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   19d7e:	f1b8 0f07 	cmp.w	r8, #7
   19d82:	d856      	bhi.n	19e32 <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19d84:	f899 2000 	ldrb.w	r2, [r9]
   19d88:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19d8c:	4e2c      	ldr	r6, [pc, #176]	; (19e40 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19d8e:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   19d90:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19d94:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   19d98:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   19d9c:	4438      	add	r0, r7
   19d9e:	2206      	movs	r2, #6
   19da0:	4659      	mov	r1, fp
   19da2:	f00a ff55 	bl	24c50 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19da6:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19daa:	f106 39ff 	add.w	r9, r6, #4294967295
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19dae:	f003 0301 	and.w	r3, r3, #1
   19db2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   19db6:	fa5f fa85 	uxtb.w	sl, r5
   19dba:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   19dbe:	f3c2 1180 	ubfx	r1, r2, #6, #1
   19dc2:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19dc4:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19dc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   19dcc:	d501      	bpl.n	19dd2 <ll_wl_add+0xca>
   19dce:	4299      	cmp	r1, r3
   19dd0:	d01b      	beq.n	19e0a <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19dd2:	2d08      	cmp	r5, #8
   19dd4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19dd8:	d1eb      	bne.n	19db2 <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19dda:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19dde:	22ff      	movs	r2, #255	; 0xff
   19de0:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   19de2:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19de6:	f043 0301 	orr.w	r3, r3, #1
   19dea:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   19dee:	2000      	movs	r0, #0
}
   19df0:	b003      	add	sp, #12
   19df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   19df6:	4b13      	ldr	r3, [pc, #76]	; (19e44 <ll_wl_add+0x13c>)
   19df8:	2201      	movs	r2, #1
   19dfa:	701a      	strb	r2, [r3, #0]
}
   19dfc:	b003      	add	sp, #12
   19dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e02:	200c      	movs	r0, #12
}
   19e04:	b003      	add	sp, #12
   19e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19e0a:	4630      	mov	r0, r6
   19e0c:	2206      	movs	r2, #6
   19e0e:	4659      	mov	r1, fp
   19e10:	9301      	str	r3, [sp, #4]
   19e12:	f00a ff0c 	bl	24c2e <memcmp>
   19e16:	9b01      	ldr	r3, [sp, #4]
   19e18:	2800      	cmp	r0, #0
   19e1a:	d1da      	bne.n	19dd2 <ll_wl_add+0xca>
		rl[j].wl = 1U;
   19e1c:	f819 3004 	ldrb.w	r3, [r9, r4]
   19e20:	f043 0320 	orr.w	r3, r3, #32
   19e24:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   19e28:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19e2c:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   19e30:	e7d7      	b.n	19de2 <ll_wl_add+0xda>
   19e32:	2007      	movs	r0, #7
}
   19e34:	b003      	add	sp, #12
   19e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e3a:	bf00      	nop
   19e3c:	2000ef4a 	.word	0x2000ef4a
   19e40:	2000edd1 	.word	0x2000edd1
   19e44:	2000fb2e 	.word	0x2000fb2e

00019e48 <ll_wl_remove>:
{
   19e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e4c:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   19e4e:	2000      	movs	r0, #0
   19e50:	f7fb f968 	bl	15124 <ull_adv_filter_pol_get>
   19e54:	2800      	cmp	r0, #0
   19e56:	d13b      	bne.n	19ed0 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   19e58:	783e      	ldrb	r6, [r7, #0]
   19e5a:	2eff      	cmp	r6, #255	; 0xff
   19e5c:	4604      	mov	r4, r0
   19e5e:	d033      	beq.n	19ec8 <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19e60:	4d1d      	ldr	r5, [pc, #116]	; (19ed8 <ll_wl_remove+0x90>)
   19e62:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   19e64:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19e68:	f006 0601 	and.w	r6, r6, #1
   19e6c:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19e70:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19e74:	07db      	lsls	r3, r3, #31
   19e76:	d501      	bpl.n	19e7c <ll_wl_remove+0x34>
   19e78:	42b2      	cmp	r2, r6
   19e7a:	d007      	beq.n	19e8c <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   19e7c:	3401      	adds	r4, #1
   19e7e:	2c08      	cmp	r4, #8
   19e80:	f105 0508 	add.w	r5, r5, #8
   19e84:	d1f2      	bne.n	19e6c <ll_wl_remove+0x24>
   19e86:	2002      	movs	r0, #2
}
   19e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19e8c:	2206      	movs	r2, #6
   19e8e:	4628      	mov	r0, r5
   19e90:	4639      	mov	r1, r7
   19e92:	f00a fecc 	bl	24c2e <memcmp>
   19e96:	2800      	cmp	r0, #0
   19e98:	d1f0      	bne.n	19e7c <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   19e9a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   19e9e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19ea0:	2b07      	cmp	r3, #7
   19ea2:	d808      	bhi.n	19eb6 <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   19ea4:	4a0d      	ldr	r2, [pc, #52]	; (19edc <ll_wl_remove+0x94>)
   19ea6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19eaa:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   19eae:	f360 1145 	bfi	r1, r0, #5, #1
   19eb2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   19eb6:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19eba:	f36f 0300 	bfc	r3, #0, #1
   19ebe:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   19ec2:	2000      	movs	r0, #0
}
   19ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   19ec8:	4b05      	ldr	r3, [pc, #20]	; (19ee0 <ll_wl_remove+0x98>)
   19eca:	7018      	strb	r0, [r3, #0]
}
   19ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ed0:	200c      	movs	r0, #12
}
   19ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ed6:	bf00      	nop
   19ed8:	2000ef4a 	.word	0x2000ef4a
   19edc:	2000edd0 	.word	0x2000edd0
   19ee0:	2000fb2e 	.word	0x2000fb2e

00019ee4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19ee4:	2807      	cmp	r0, #7
{
   19ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19eea:	4604      	mov	r4, r0
   19eec:	460e      	mov	r6, r1
   19eee:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19ef0:	d817      	bhi.n	19f22 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   19ef2:	4d19      	ldr	r5, [pc, #100]	; (19f58 <ll_rl_id_addr_get+0x74>)
   19ef4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19ef8:	00a7      	lsls	r7, r4, #2
   19efa:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19efe:	07db      	lsls	r3, r3, #31
   19f00:	d51c      	bpl.n	19f3c <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   19f02:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19f04:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   19f06:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   19f0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19f0e:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   19f12:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19f14:	4640      	mov	r0, r8
   19f16:	2206      	movs	r2, #6
}
   19f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19f1c:	3101      	adds	r1, #1
   19f1e:	f00a be97 	b.w	24c50 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19f22:	4a0e      	ldr	r2, [pc, #56]	; (19f5c <ll_rl_id_addr_get+0x78>)
   19f24:	490e      	ldr	r1, [pc, #56]	; (19f60 <ll_rl_id_addr_get+0x7c>)
   19f26:	480f      	ldr	r0, [pc, #60]	; (19f64 <ll_rl_id_addr_get+0x80>)
   19f28:	23e9      	movs	r3, #233	; 0xe9
   19f2a:	f008 f9d5 	bl	222d8 <printk>
   19f2e:	4040      	eors	r0, r0
   19f30:	f380 8811 	msr	BASEPRI, r0
   19f34:	f04f 0003 	mov.w	r0, #3
   19f38:	df02      	svc	2
   19f3a:	e7da      	b.n	19ef2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   19f3c:	4a07      	ldr	r2, [pc, #28]	; (19f5c <ll_rl_id_addr_get+0x78>)
   19f3e:	490a      	ldr	r1, [pc, #40]	; (19f68 <ll_rl_id_addr_get+0x84>)
   19f40:	4808      	ldr	r0, [pc, #32]	; (19f64 <ll_rl_id_addr_get+0x80>)
   19f42:	23ea      	movs	r3, #234	; 0xea
   19f44:	f008 f9c8 	bl	222d8 <printk>
   19f48:	4040      	eors	r0, r0
   19f4a:	f380 8811 	msr	BASEPRI, r0
   19f4e:	f04f 0003 	mov.w	r0, #3
   19f52:	df02      	svc	2
   19f54:	e7d5      	b.n	19f02 <ll_rl_id_addr_get+0x1e>
   19f56:	bf00      	nop
   19f58:	2000edd0 	.word	0x2000edd0
   19f5c:	00029574 	.word	0x00029574
   19f60:	000295b8 	.word	0x000295b8
   19f64:	00028de0 	.word	0x00028de0
   19f68:	000295c4 	.word	0x000295c4

00019f6c <ll_rl_size_get>:
   19f6c:	2008      	movs	r0, #8
   19f6e:	4770      	bx	lr

00019f70 <ll_rl_clear>:
{
   19f70:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19f72:	2000      	movs	r0, #0
   19f74:	f7fb f8ca 	bl	1510c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19f78:	bb88      	cbnz	r0, 19fde <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   19f7a:	4b1a      	ldr	r3, [pc, #104]	; (19fe4 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   19f7c:	4c1a      	ldr	r4, [pc, #104]	; (19fe8 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   19f7e:	7819      	ldrb	r1, [r3, #0]
   19f80:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   19f84:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   19f86:	f360 0100 	bfi	r1, r0, #0, #1
   19f8a:	f360 0200 	bfi	r2, r0, #0, #1
   19f8e:	7019      	strb	r1, [r3, #0]
   19f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   19f94:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   19f98:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   19f9c:	f360 0100 	bfi	r1, r0, #0, #1
   19fa0:	f360 0200 	bfi	r2, r0, #0, #1
   19fa4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   19fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   19fac:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   19fb0:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   19fb4:	f360 0100 	bfi	r1, r0, #0, #1
   19fb8:	f360 0200 	bfi	r2, r0, #0, #1
   19fbc:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   19fc0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   19fc4:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   19fc8:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   19fcc:	f360 0100 	bfi	r1, r0, #0, #1
   19fd0:	f360 0200 	bfi	r2, r0, #0, #1
   19fd4:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   19fd8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   19fdc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19fde:	200c      	movs	r0, #12
}
   19fe0:	bd10      	pop	{r4, pc}
   19fe2:	bf00      	nop
   19fe4:	2000edd0 	.word	0x2000edd0
   19fe8:	2000fb2c 	.word	0x2000fb2c

00019fec <ll_rl_remove>:
{
   19fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ff0:	4681      	mov	r9, r0
   19ff2:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19ff4:	2000      	movs	r0, #0
   19ff6:	f7fb f889 	bl	1510c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19ffa:	2800      	cmp	r0, #0
   19ffc:	d149      	bne.n	1a092 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19ffe:	46ca      	mov	sl, r9
   1a000:	4e4d      	ldr	r6, [pc, #308]	; (1a138 <ll_rl_remove+0x14c>)
   1a002:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a006:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a008:	f008 0801 	and.w	r8, r8, #1
   1a00c:	1e75      	subs	r5, r6, #1
   1a00e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a012:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   1a016:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1a01a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1a01e:	07d2      	lsls	r2, r2, #31
   1a020:	ea4f 0784 	mov.w	r7, r4, lsl #2
   1a024:	d501      	bpl.n	1a02a <ll_rl_remove+0x3e>
   1a026:	4543      	cmp	r3, r8
   1a028:	d008      	beq.n	1a03c <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a02a:	3401      	adds	r4, #1
   1a02c:	2c08      	cmp	r4, #8
   1a02e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a032:	d1ec      	bne.n	1a00e <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a034:	2002      	movs	r0, #2
}
   1a036:	b003      	add	sp, #12
   1a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a03c:	4630      	mov	r0, r6
   1a03e:	2206      	movs	r2, #6
   1a040:	4651      	mov	r1, sl
   1a042:	f00a fdf4 	bl	24c2e <memcmp>
   1a046:	4603      	mov	r3, r0
   1a048:	2800      	cmp	r0, #0
   1a04a:	d1ee      	bne.n	1a02a <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   1a04c:	f89b 2000 	ldrb.w	r2, [fp]
   1a050:	0752      	lsls	r2, r2, #29
   1a052:	d430      	bmi.n	1a0b6 <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a054:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   1a058:	4e38      	ldr	r6, [pc, #224]	; (1a13c <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a05a:	f009 0901 	and.w	r9, r9, #1
   1a05e:	f1a6 0802 	sub.w	r8, r6, #2
   1a062:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1a066:	07d0      	lsls	r0, r2, #31
   1a068:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a06c:	d501      	bpl.n	1a072 <ll_rl_remove+0x86>
   1a06e:	4549      	cmp	r1, r9
   1a070:	d013      	beq.n	1a09a <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   1a072:	3301      	adds	r3, #1
   1a074:	2b08      	cmp	r3, #8
   1a076:	f106 0608 	add.w	r6, r6, #8
   1a07a:	d1f2      	bne.n	1a062 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   1a07c:	443c      	add	r4, r7
		return 0;
   1a07e:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1a080:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1a084:	f36f 0300 	bfc	r3, #0, #1
   1a088:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   1a08c:	b003      	add	sp, #12
   1a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a092:	200c      	movs	r0, #12
}
   1a094:	b003      	add	sp, #12
   1a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a09a:	2206      	movs	r2, #6
   1a09c:	4630      	mov	r0, r6
   1a09e:	4651      	mov	r1, sl
   1a0a0:	9301      	str	r3, [sp, #4]
   1a0a2:	f00a fdc4 	bl	24c2e <memcmp>
   1a0a6:	9b01      	ldr	r3, [sp, #4]
   1a0a8:	2800      	cmp	r0, #0
   1a0aa:	d1e2      	bne.n	1a072 <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a0ac:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1a0b0:	22ff      	movs	r2, #255	; 0xff
   1a0b2:	705a      	strb	r2, [r3, #1]
   1a0b4:	e7e2      	b.n	1a07c <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a0b6:	4e22      	ldr	r6, [pc, #136]	; (1a140 <ll_rl_remove+0x154>)
   1a0b8:	7832      	ldrb	r2, [r6, #0]
   1a0ba:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   1a0bc:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   1a0c0:	d005      	beq.n	1a0ce <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a0c2:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   1a0c6:	45c3      	cmp	fp, r8
   1a0c8:	d104      	bne.n	1a0d4 <ll_rl_remove+0xe8>
			peer_irk_count--;
   1a0ca:	7032      	strb	r2, [r6, #0]
   1a0cc:	e7c2      	b.n	1a054 <ll_rl_remove+0x68>
   1a0ce:	461a      	mov	r2, r3
   1a0d0:	7032      	strb	r2, [r6, #0]
   1a0d2:	e7bf      	b.n	1a054 <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1a0d4:	481b      	ldr	r0, [pc, #108]	; (1a144 <ll_rl_remove+0x158>)
   1a0d6:	9301      	str	r3, [sp, #4]
   1a0d8:	2210      	movs	r2, #16
   1a0da:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1a0de:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   1a0e2:	f00a fdb5 	bl	24c50 <memcpy>
   1a0e6:	9b01      	ldr	r3, [sp, #4]
   1a0e8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 1a148 <ll_rl_remove+0x15c>
   1a0ec:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   1a0ee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a0f2:	fa5f fe82 	uxtb.w	lr, r2
   1a0f6:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   1a0fa:	f010 0f01 	tst.w	r0, #1
   1a0fe:	f102 0201 	add.w	r2, r2, #1
   1a102:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   1a106:	d005      	beq.n	1a114 <ll_rl_remove+0x128>
   1a108:	0740      	lsls	r0, r0, #29
   1a10a:	d503      	bpl.n	1a114 <ll_rl_remove+0x128>
   1a10c:	f89c 0017 	ldrb.w	r0, [ip, #23]
   1a110:	4540      	cmp	r0, r8
   1a112:	d007      	beq.n	1a124 <ll_rl_remove+0x138>
				for (k = 0U;
   1a114:	2a08      	cmp	r2, #8
   1a116:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1a11a:	d1e8      	bne.n	1a0ee <ll_rl_remove+0x102>
			peer_irk_count--;
   1a11c:	7832      	ldrb	r2, [r6, #0]
   1a11e:	3a01      	subs	r2, #1
   1a120:	7032      	strb	r2, [r6, #0]
   1a122:	e797      	b.n	1a054 <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   1a124:	4a09      	ldr	r2, [pc, #36]	; (1a14c <ll_rl_remove+0x160>)
						rl[k].pirk_idx = pi;
   1a126:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   1a12a:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   1a12e:	7832      	ldrb	r2, [r6, #0]
   1a130:	3a01      	subs	r2, #1
   1a132:	7032      	strb	r2, [r6, #0]
   1a134:	e78e      	b.n	1a054 <ll_rl_remove+0x68>
   1a136:	bf00      	nop
   1a138:	2000edd1 	.word	0x2000edd1
   1a13c:	2000ef4a 	.word	0x2000ef4a
   1a140:	2000fb2c 	.word	0x2000fb2c
   1a144:	2000ed50 	.word	0x2000ed50
   1a148:	2000edd0 	.word	0x2000edd0
   1a14c:	2000ed48 	.word	0x2000ed48

0001a150 <ll_rl_crpa_set>:
{
   1a150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1a154:	795c      	ldrb	r4, [r3, #5]
   1a156:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1a15a:	2c40      	cmp	r4, #64	; 0x40
   1a15c:	d001      	beq.n	1a162 <ll_rl_crpa_set+0x12>
}
   1a15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1a162:	461e      	mov	r6, r3
   1a164:	460f      	mov	r7, r1
   1a166:	b301      	cbz	r1, 1a1aa <ll_rl_crpa_set+0x5a>
   1a168:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1a1d4 <ll_rl_crpa_set+0x84>
   1a16c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a16e:	f000 0a01 	and.w	sl, r0, #1
   1a172:	f109 38ff 	add.w	r8, r9, #4294967295
   1a176:	e003      	b.n	1a180 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a178:	2c08      	cmp	r4, #8
   1a17a:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1a17e:	d0ee      	beq.n	1a15e <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a180:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a184:	4625      	mov	r5, r4
   1a186:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1a18a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1a18e:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a190:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a194:	d5f0      	bpl.n	1a178 <ll_rl_crpa_set+0x28>
   1a196:	4553      	cmp	r3, sl
   1a198:	d1ee      	bne.n	1a178 <ll_rl_crpa_set+0x28>
   1a19a:	4648      	mov	r0, r9
   1a19c:	2206      	movs	r2, #6
   1a19e:	4639      	mov	r1, r7
   1a1a0:	f00a fd45 	bl	24c2e <memcmp>
   1a1a4:	2800      	cmp	r0, #0
   1a1a6:	d1e7      	bne.n	1a178 <ll_rl_crpa_set+0x28>
   1a1a8:	e004      	b.n	1a1b4 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a1aa:	2a07      	cmp	r2, #7
   1a1ac:	d8d7      	bhi.n	1a15e <ll_rl_crpa_set+0xe>
   1a1ae:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1a1d8 <ll_rl_crpa_set+0x88>
   1a1b2:	4615      	mov	r5, r2
   1a1b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a1b8:	00e8      	lsls	r0, r5, #3
   1a1ba:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1a1be:	07db      	lsls	r3, r3, #31
   1a1c0:	d5cd      	bpl.n	1a15e <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a1c2:	3018      	adds	r0, #24
   1a1c4:	4631      	mov	r1, r6
   1a1c6:	4440      	add	r0, r8
   1a1c8:	2206      	movs	r2, #6
}
   1a1ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a1ce:	f00a bd3f 	b.w	24c50 <memcpy>
   1a1d2:	bf00      	nop
   1a1d4:	2000edd1 	.word	0x2000edd1
   1a1d8:	2000edd0 	.word	0x2000edd0

0001a1dc <ll_rl_crpa_get>:
{
   1a1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a1e0:	4682      	mov	sl, r0
   1a1e2:	4e1a      	ldr	r6, [pc, #104]	; (1a24c <ll_rl_crpa_get+0x70>)
   1a1e4:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1a1e8:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a1ea:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a1ec:	f008 0801 	and.w	r8, r8, #1
   1a1f0:	1e77      	subs	r7, r6, #1
   1a1f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a1f6:	00d5      	lsls	r5, r2, #3
   1a1f8:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1a1fc:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a200:	07db      	lsls	r3, r3, #31
   1a202:	f104 0401 	add.w	r4, r4, #1
   1a206:	d501      	bpl.n	1a20c <ll_rl_crpa_get+0x30>
   1a208:	4542      	cmp	r2, r8
   1a20a:	d006      	beq.n	1a21a <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a20c:	2c08      	cmp	r4, #8
   1a20e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a212:	d1ee      	bne.n	1a1f2 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a214:	2002      	movs	r0, #2
}
   1a216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a21a:	4630      	mov	r0, r6
   1a21c:	2206      	movs	r2, #6
   1a21e:	4651      	mov	r1, sl
   1a220:	f00a fd05 	bl	24c2e <memcmp>
   1a224:	4683      	mov	fp, r0
   1a226:	2800      	cmp	r0, #0
   1a228:	d1f0      	bne.n	1a20c <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a22a:	f105 0218 	add.w	r2, r5, #24
   1a22e:	4417      	add	r7, r2
   1a230:	2106      	movs	r1, #6
   1a232:	4638      	mov	r0, r7
   1a234:	f7f6 fb7a 	bl	1092c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a238:	2800      	cmp	r0, #0
   1a23a:	d0eb      	beq.n	1a214 <ll_rl_crpa_get+0x38>
   1a23c:	2206      	movs	r2, #6
   1a23e:	4639      	mov	r1, r7
   1a240:	4648      	mov	r0, r9
   1a242:	f00a fd05 	bl	24c50 <memcpy>
		return 0;
   1a246:	4658      	mov	r0, fp
}
   1a248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a24c:	2000edd1 	.word	0x2000edd1

0001a250 <ll_rl_lrpa_get>:
{
   1a250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a254:	4681      	mov	r9, r0
   1a256:	4e16      	ldr	r6, [pc, #88]	; (1a2b0 <ll_rl_lrpa_get+0x60>)
   1a258:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1a25c:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a25e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a260:	f008 0801 	and.w	r8, r8, #1
   1a264:	1e77      	subs	r7, r6, #1
   1a266:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a26a:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1a26e:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1a272:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a276:	07db      	lsls	r3, r3, #31
   1a278:	f104 0401 	add.w	r4, r4, #1
   1a27c:	d501      	bpl.n	1a282 <ll_rl_lrpa_get+0x32>
   1a27e:	4542      	cmp	r2, r8
   1a280:	d006      	beq.n	1a290 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a282:	2c08      	cmp	r4, #8
   1a284:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a288:	d1ed      	bne.n	1a266 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a28a:	2002      	movs	r0, #2
}
   1a28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a290:	4630      	mov	r0, r6
   1a292:	2206      	movs	r2, #6
   1a294:	4649      	mov	r1, r9
   1a296:	f00a fcca 	bl	24c2e <memcmp>
   1a29a:	4683      	mov	fp, r0
   1a29c:	2800      	cmp	r0, #0
   1a29e:	d1f0      	bne.n	1a282 <ll_rl_lrpa_get+0x32>
   1a2a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a2a2:	2206      	movs	r2, #6
   1a2a4:	4650      	mov	r0, sl
   1a2a6:	f00a fcd3 	bl	24c50 <memcpy>
		return 0;
   1a2aa:	4658      	mov	r0, fp
}
   1a2ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2b0:	2000edd1 	.word	0x2000edd1

0001a2b4 <ll_rl_enable>:
{
   1a2b4:	b510      	push	{r4, lr}
   1a2b6:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a2b8:	2000      	movs	r0, #0
   1a2ba:	f7fa ff27 	bl	1510c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a2be:	b958      	cbnz	r0, 1a2d8 <ll_rl_enable+0x24>
	switch (enable) {
   1a2c0:	b134      	cbz	r4, 1a2d0 <ll_rl_enable+0x1c>
   1a2c2:	2c01      	cmp	r4, #1
   1a2c4:	d001      	beq.n	1a2ca <ll_rl_enable+0x16>
   1a2c6:	2012      	movs	r0, #18
}
   1a2c8:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1a2ca:	4b04      	ldr	r3, [pc, #16]	; (1a2dc <ll_rl_enable+0x28>)
   1a2cc:	701c      	strb	r4, [r3, #0]
}
   1a2ce:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1a2d0:	4b02      	ldr	r3, [pc, #8]	; (1a2dc <ll_rl_enable+0x28>)
   1a2d2:	701c      	strb	r4, [r3, #0]
	return 0;
   1a2d4:	4620      	mov	r0, r4
}
   1a2d6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a2d8:	200c      	movs	r0, #12
}
   1a2da:	bd10      	pop	{r4, pc}
   1a2dc:	2000fb2d 	.word	0x2000fb2d

0001a2e0 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1a2e0:	4b03      	ldr	r3, [pc, #12]	; (1a2f0 <ll_rl_timeout_set+0x10>)
   1a2e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a2e6:	fb02 f000 	mul.w	r0, r2, r0
   1a2ea:	6018      	str	r0, [r3, #0]
}
   1a2ec:	4770      	bx	lr
   1a2ee:	bf00      	nop
   1a2f0:	2000ef44 	.word	0x2000ef44

0001a2f4 <ll_priv_mode_set>:
{
   1a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a2f8:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a2fa:	2000      	movs	r0, #0
{
   1a2fc:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a2fe:	f7fa ff05 	bl	1510c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a302:	bb68      	cbnz	r0, 1a360 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a304:	4e1d      	ldr	r6, [pc, #116]	; (1a37c <ll_priv_mode_set+0x88>)
   1a306:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a30a:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a30c:	f009 0901 	and.w	r9, r9, #1
   1a310:	1e77      	subs	r7, r6, #1
   1a312:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a316:	00d5      	lsls	r5, r2, #3
   1a318:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1a31c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a320:	07db      	lsls	r3, r3, #31
   1a322:	f104 0401 	add.w	r4, r4, #1
   1a326:	d501      	bpl.n	1a32c <ll_priv_mode_set+0x38>
   1a328:	454a      	cmp	r2, r9
   1a32a:	d006      	beq.n	1a33a <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a32c:	2c08      	cmp	r4, #8
   1a32e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a332:	d1ee      	bne.n	1a312 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a334:	2002      	movs	r0, #2
}
   1a336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a33a:	4630      	mov	r0, r6
   1a33c:	2206      	movs	r2, #6
   1a33e:	4651      	mov	r1, sl
   1a340:	f00a fc75 	bl	24c2e <memcmp>
   1a344:	2800      	cmp	r0, #0
   1a346:	d1f1      	bne.n	1a32c <ll_priv_mode_set+0x38>
		switch (mode) {
   1a348:	f1b8 0f00 	cmp.w	r8, #0
   1a34c:	d00e      	beq.n	1a36c <ll_priv_mode_set+0x78>
   1a34e:	f1b8 0f01 	cmp.w	r8, #1
   1a352:	d108      	bne.n	1a366 <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   1a354:	5d7b      	ldrb	r3, [r7, r5]
   1a356:	f043 0310 	orr.w	r3, r3, #16
   1a35a:	557b      	strb	r3, [r7, r5]
}
   1a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a360:	200c      	movs	r0, #12
}
   1a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1a366:	2012      	movs	r0, #18
}
   1a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1a36c:	5d7b      	ldrb	r3, [r7, r5]
   1a36e:	f368 1304 	bfi	r3, r8, #4, #1
   1a372:	557b      	strb	r3, [r7, r5]
	return 0;
   1a374:	4640      	mov	r0, r8
}
   1a376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a37a:	bf00      	nop
   1a37c:	2000edd1 	.word	0x2000edd1

0001a380 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1a380:	b1b0      	cbz	r0, 1a3b0 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a382:	4a0d      	ldr	r2, [pc, #52]	; (1a3b8 <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1a384:	6812      	ldr	r2, [r2, #0]
{
   1a386:	b510      	push	{r4, lr}
   1a388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a38c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a390:	2100      	movs	r1, #0
   1a392:	fbe2 0103 	umlal	r0, r1, r2, r3
   1a396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a39a:	2300      	movs	r3, #0
   1a39c:	f7e6 fdc4 	bl	f28 <__aeabi_uldivmod>
}
   1a3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a3a4:	4602      	mov	r2, r0
   1a3a6:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a3a8:	4804      	ldr	r0, [pc, #16]	; (1a3bc <ull_filter_adv_scan_state_cb+0x3c>)
   1a3aa:	4905      	ldr	r1, [pc, #20]	; (1a3c0 <ull_filter_adv_scan_state_cb+0x40>)
   1a3ac:	f006 bd8e 	b.w	20ecc <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   1a3b0:	4803      	ldr	r0, [pc, #12]	; (1a3c0 <ull_filter_adv_scan_state_cb+0x40>)
   1a3b2:	f00d bb76 	b.w	27aa2 <k_delayed_work_cancel>
   1a3b6:	bf00      	nop
   1a3b8:	2000ef44 	.word	0x2000ef44
   1a3bc:	2000b0f0 	.word	0x2000b0f0
   1a3c0:	2000afb0 	.word	0x2000afb0

0001a3c4 <ull_filter_adv_update>:
{
   1a3c4:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1a3c6:	4b09      	ldr	r3, [pc, #36]	; (1a3ec <ull_filter_adv_update+0x28>)
   1a3c8:	2200      	movs	r2, #0
   1a3ca:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   1a3cc:	b930      	cbnz	r0, 1a3dc <ull_filter_adv_update+0x18>
	if (rl_enable &&
   1a3ce:	4b08      	ldr	r3, [pc, #32]	; (1a3f0 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   1a3d0:	4a08      	ldr	r2, [pc, #32]	; (1a3f4 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1a3d2:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1a3d4:	2100      	movs	r1, #0
   1a3d6:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1a3d8:	b91b      	cbnz	r3, 1a3e2 <ull_filter_adv_update+0x1e>
}
   1a3da:	bd08      	pop	{r3, pc}
		wl_update();
   1a3dc:	f7ff fc1c 	bl	19c18 <wl_update>
   1a3e0:	e7f5      	b.n	1a3ce <ull_filter_adv_update+0xa>
}
   1a3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1a3e6:	f7ff bbdf 	b.w	19ba8 <rl_update>
   1a3ea:	bf00      	nop
   1a3ec:	2000ef88 	.word	0x2000ef88
   1a3f0:	2000fb2d 	.word	0x2000fb2d
   1a3f4:	2000ef10 	.word	0x2000ef10

0001a3f8 <ull_filter_rpa_update>:
{
   1a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3fc:	4683      	mov	fp, r0
   1a3fe:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1a400:	f00d fba8 	bl	27b54 <z_impl_k_uptime_ticks>
   1a404:	014b      	lsls	r3, r1, #5
   1a406:	0142      	lsls	r2, r0, #5
   1a408:	1a12      	subs	r2, r2, r0
   1a40a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1a40e:	eb63 0301 	sbc.w	r3, r3, r1
   1a412:	009b      	lsls	r3, r3, #2
   1a414:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1a418:	eb19 0900 	adds.w	r9, r9, r0
   1a41c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1a420:	eb41 0103 	adc.w	r1, r1, r3
   1a424:	00cb      	lsls	r3, r1, #3
   1a426:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1a42a:	0bd9      	lsrs	r1, r3, #15
   1a42c:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1a430:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1a434:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a436:	f1bb 0f00 	cmp.w	fp, #0
   1a43a:	d117      	bne.n	1a46c <ull_filter_rpa_update+0x74>
   1a43c:	4a5d      	ldr	r2, [pc, #372]	; (1a5b4 <ull_filter_rpa_update+0x1bc>)
   1a43e:	e9d2 3200 	ldrd	r3, r2, [r2]
   1a442:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a446:	bf08      	it	eq
   1a448:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   1a44c:	d00e      	beq.n	1a46c <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a44e:	ebb9 0303 	subs.w	r3, r9, r3
   1a452:	eb61 0202 	sbc.w	r2, r1, r2
   1a456:	4958      	ldr	r1, [pc, #352]	; (1a5b8 <ull_filter_rpa_update+0x1c0>)
   1a458:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a45a:	428b      	cmp	r3, r1
   1a45c:	f172 0300 	sbcs.w	r3, r2, #0
   1a460:	bfac      	ite	ge
   1a462:	f04f 0a01 	movge.w	sl, #1
   1a466:	f04f 0a00 	movlt.w	sl, #0
   1a46a:	e001      	b.n	1a470 <ull_filter_rpa_update+0x78>
   1a46c:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a470:	4e52      	ldr	r6, [pc, #328]	; (1a5bc <ull_filter_rpa_update+0x1c4>)
   1a472:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1a5c0 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1a476:	2400      	movs	r4, #0
   1a478:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a47c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a480:	00a5      	lsls	r5, r4, #2
   1a482:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a486:	07da      	lsls	r2, r3, #31
   1a488:	d515      	bpl.n	1a4b6 <ull_filter_rpa_update+0xbe>
   1a48a:	f1ba 0f00 	cmp.w	sl, #0
   1a48e:	d101      	bne.n	1a494 <ull_filter_rpa_update+0x9c>
   1a490:	0798      	lsls	r0, r3, #30
   1a492:	d410      	bmi.n	1a4b6 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1a494:	192b      	adds	r3, r5, r4
   1a496:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a49a:	0759      	lsls	r1, r3, #29
   1a49c:	d432      	bmi.n	1a504 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   1a49e:	192b      	adds	r3, r5, r4
   1a4a0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a4a4:	071a      	lsls	r2, r3, #28
   1a4a6:	d41b      	bmi.n	1a4e0 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   1a4a8:	4425      	add	r5, r4
   1a4aa:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1a4ae:	f043 0302 	orr.w	r3, r3, #2
   1a4b2:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a4b6:	3401      	adds	r4, #1
   1a4b8:	2c08      	cmp	r4, #8
   1a4ba:	f108 0806 	add.w	r8, r8, #6
   1a4be:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a4c2:	d1db      	bne.n	1a47c <ull_filter_rpa_update+0x84>
	if (all) {
   1a4c4:	f1ba 0f00 	cmp.w	sl, #0
   1a4c8:	d004      	beq.n	1a4d4 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1a4ca:	4b3a      	ldr	r3, [pc, #232]	; (1a5b4 <ull_filter_rpa_update+0x1bc>)
   1a4cc:	9a01      	ldr	r2, [sp, #4]
   1a4ce:	f8c3 9000 	str.w	r9, [r3]
   1a4d2:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1a4d4:	f1bb 0f00 	cmp.w	fp, #0
   1a4d8:	d138      	bne.n	1a54c <ull_filter_rpa_update+0x154>
}
   1a4da:	b007      	add	sp, #28
   1a4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a4e0:	a902      	add	r1, sp, #8
   1a4e2:	f1a6 0017 	sub.w	r0, r6, #23
   1a4e6:	f00a fc63 	bl	24db0 <bt_rpa_create>
				LL_ASSERT(!err);
   1a4ea:	2800      	cmp	r0, #0
   1a4ec:	d154      	bne.n	1a598 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   1a4ee:	ab02      	add	r3, sp, #8
   1a4f0:	f8c6 3006 	str.w	r3, [r6, #6]
   1a4f4:	4619      	mov	r1, r3
   1a4f6:	2206      	movs	r2, #6
   1a4f8:	4640      	mov	r0, r8
   1a4fa:	f00a fba9 	bl	24c50 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a4fe:	f8c6 8006 	str.w	r8, [r6, #6]
   1a502:	e7d1      	b.n	1a4a8 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1a504:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1a508:	4a2e      	ldr	r2, [pc, #184]	; (1a5c4 <ull_filter_rpa_update+0x1cc>)
   1a50a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a50e:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1a510:	f10d 0307 	add.w	r3, sp, #7
   1a514:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1a518:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a51c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1a520:	4283      	cmp	r3, r0
   1a522:	d1f9      	bne.n	1a518 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a524:	4631      	mov	r1, r6
   1a526:	a802      	add	r0, sp, #8
   1a528:	f00a fc42 	bl	24db0 <bt_rpa_create>
				LL_ASSERT(!err);
   1a52c:	2800      	cmp	r0, #0
   1a52e:	d0b6      	beq.n	1a49e <ull_filter_rpa_update+0xa6>
   1a530:	4a25      	ldr	r2, [pc, #148]	; (1a5c8 <ull_filter_rpa_update+0x1d0>)
   1a532:	4926      	ldr	r1, [pc, #152]	; (1a5cc <ull_filter_rpa_update+0x1d4>)
   1a534:	4826      	ldr	r0, [pc, #152]	; (1a5d0 <ull_filter_rpa_update+0x1d8>)
   1a536:	f240 2316 	movw	r3, #534	; 0x216
   1a53a:	f007 fecd 	bl	222d8 <printk>
   1a53e:	4040      	eors	r0, r0
   1a540:	f380 8811 	msr	BASEPRI, r0
   1a544:	f04f 0003 	mov.w	r0, #3
   1a548:	df02      	svc	2
   1a54a:	e7a8      	b.n	1a49e <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1a54c:	2000      	movs	r0, #0
   1a54e:	f7fa fdcf 	bl	150f0 <ull_adv_is_enabled_get>
		if (adv) {
   1a552:	4604      	mov	r4, r0
   1a554:	2800      	cmp	r0, #0
   1a556:	d0c0      	beq.n	1a4da <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1a558:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a55c:	075b      	lsls	r3, r3, #29
   1a55e:	d5bc      	bpl.n	1a4da <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1a560:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1a564:	2b07      	cmp	r3, #7
   1a566:	d8b8      	bhi.n	1a4da <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a568:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1a56c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1a570:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a572:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1a574:	302c      	adds	r0, #44	; 0x2c
   1a576:	f001 f8b7 	bl	1b6e8 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   1a57a:	7872      	ldrb	r2, [r6, #1]
   1a57c:	4605      	mov	r5, r0
   1a57e:	3202      	adds	r2, #2
   1a580:	4631      	mov	r1, r6
   1a582:	f00a fb65 	bl	24c50 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1a586:	4629      	mov	r1, r5
   1a588:	4620      	mov	r0, r4
   1a58a:	f7fa fe0f 	bl	151ac <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1a58e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1a592:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   1a596:	e7a0      	b.n	1a4da <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   1a598:	4a0b      	ldr	r2, [pc, #44]	; (1a5c8 <ull_filter_rpa_update+0x1d0>)
   1a59a:	490c      	ldr	r1, [pc, #48]	; (1a5cc <ull_filter_rpa_update+0x1d4>)
   1a59c:	480c      	ldr	r0, [pc, #48]	; (1a5d0 <ull_filter_rpa_update+0x1d8>)
   1a59e:	f240 2323 	movw	r3, #547	; 0x223
   1a5a2:	f007 fe99 	bl	222d8 <printk>
   1a5a6:	4040      	eors	r0, r0
   1a5a8:	f380 8811 	msr	BASEPRI, r0
   1a5ac:	f04f 0003 	mov.w	r0, #3
   1a5b0:	df02      	svc	2
   1a5b2:	e79c      	b.n	1a4ee <ull_filter_rpa_update+0xf6>
   1a5b4:	2000afa8 	.word	0x2000afa8
   1a5b8:	2000ef44 	.word	0x2000ef44
   1a5bc:	2000edee 	.word	0x2000edee
   1a5c0:	2000ed18 	.word	0x2000ed18
   1a5c4:	2000ed50 	.word	0x2000ed50
   1a5c8:	00029574 	.word	0x00029574
   1a5cc:	00029060 	.word	0x00029060
   1a5d0:	00028de0 	.word	0x00028de0

0001a5d4 <rpa_timeout>:
{
   1a5d4:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1a5d6:	2001      	movs	r0, #1
   1a5d8:	f7ff ff0e 	bl	1a3f8 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a5dc:	4a0a      	ldr	r2, [pc, #40]	; (1a608 <rpa_timeout+0x34>)
   1a5de:	6812      	ldr	r2, [r2, #0]
   1a5e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a5e4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a5e8:	2100      	movs	r1, #0
   1a5ea:	fbe2 0103 	umlal	r0, r1, r2, r3
   1a5ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a5f2:	2300      	movs	r3, #0
   1a5f4:	f7e6 fc98 	bl	f28 <__aeabi_uldivmod>
}
   1a5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a5fc:	4602      	mov	r2, r0
   1a5fe:	460b      	mov	r3, r1
   1a600:	4802      	ldr	r0, [pc, #8]	; (1a60c <rpa_timeout+0x38>)
   1a602:	4903      	ldr	r1, [pc, #12]	; (1a610 <rpa_timeout+0x3c>)
   1a604:	f006 bc62 	b.w	20ecc <k_delayed_work_submit_to_queue>
   1a608:	2000ef44 	.word	0x2000ef44
   1a60c:	2000b0f0 	.word	0x2000b0f0
   1a610:	2000afb0 	.word	0x2000afb0

0001a614 <ull_filter_adva_get>:
{
   1a614:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   1a616:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1a61a:	2c07      	cmp	r4, #7
   1a61c:	d810      	bhi.n	1a640 <ull_filter_adva_get+0x2c>
   1a61e:	4d10      	ldr	r5, [pc, #64]	; (1a660 <ull_filter_adva_get+0x4c>)
   1a620:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a624:	00a6      	lsls	r6, r4, #2
   1a626:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a62a:	071a      	lsls	r2, r3, #28
   1a62c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1a630:	d505      	bpl.n	1a63e <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   1a632:	079b      	lsls	r3, r3, #30
   1a634:	d506      	bpl.n	1a644 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   1a636:	4434      	add	r4, r6
   1a638:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1a63c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1a63e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a640:	2000      	movs	r0, #0
}
   1a642:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   1a644:	4a07      	ldr	r2, [pc, #28]	; (1a664 <ull_filter_adva_get+0x50>)
   1a646:	4908      	ldr	r1, [pc, #32]	; (1a668 <ull_filter_adva_get+0x54>)
   1a648:	4808      	ldr	r0, [pc, #32]	; (1a66c <ull_filter_adva_get+0x58>)
   1a64a:	f240 2349 	movw	r3, #585	; 0x249
   1a64e:	f007 fe43 	bl	222d8 <printk>
   1a652:	4040      	eors	r0, r0
   1a654:	f380 8811 	msr	BASEPRI, r0
   1a658:	f04f 0003 	mov.w	r0, #3
   1a65c:	df02      	svc	2
   1a65e:	e7ea      	b.n	1a636 <ull_filter_adva_get+0x22>
   1a660:	2000edd0 	.word	0x2000edd0
   1a664:	00029574 	.word	0x00029574
   1a668:	000295d8 	.word	0x000295d8
   1a66c:	00028de0 	.word	0x00028de0

0001a670 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   1a670:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1a674:	2b07      	cmp	r3, #7
   1a676:	d80d      	bhi.n	1a694 <ull_filter_tgta_get+0x24>
   1a678:	4a07      	ldr	r2, [pc, #28]	; (1a698 <ull_filter_tgta_get+0x28>)
   1a67a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a67e:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   1a682:	f3c1 0080 	ubfx	r0, r1, #2, #1
   1a686:	0749      	lsls	r1, r1, #29
   1a688:	d505      	bpl.n	1a696 <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   1a68a:	2028      	movs	r0, #40	; 0x28
   1a68c:	fb00 2003 	mla	r0, r0, r3, r2
   1a690:	301e      	adds	r0, #30
   1a692:	4770      	bx	lr
	return NULL;
   1a694:	2000      	movs	r0, #0
}
   1a696:	4770      	bx	lr
   1a698:	2000edd0 	.word	0x2000edd0

0001a69c <ull_filter_rl_find>:
{
   1a69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6a0:	468b      	mov	fp, r1
	if (free) {
   1a6a2:	4617      	mov	r7, r2
   1a6a4:	b10a      	cbz	r2, 1a6aa <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1a6a6:	23ff      	movs	r3, #255	; 0xff
   1a6a8:	7013      	strb	r3, [r2, #0]
   1a6aa:	4d1b      	ldr	r5, [pc, #108]	; (1a718 <ull_filter_rl_find+0x7c>)
{
   1a6ac:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a6ae:	f000 0a01 	and.w	sl, r0, #1
   1a6b2:	f105 39ff 	add.w	r9, r5, #4294967295
   1a6b6:	e006      	b.n	1a6c6 <ull_filter_rl_find+0x2a>
   1a6b8:	4552      	cmp	r2, sl
   1a6ba:	d01f      	beq.n	1a6fc <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a6bc:	3401      	adds	r4, #1
   1a6be:	2c08      	cmp	r4, #8
   1a6c0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1a6c4:	d015      	beq.n	1a6f2 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a6c6:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1a6ca:	fa5f f884 	uxtb.w	r8, r4
   1a6ce:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1a6d2:	07d9      	lsls	r1, r3, #31
   1a6d4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a6d8:	d4ee      	bmi.n	1a6b8 <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a6da:	2f00      	cmp	r7, #0
   1a6dc:	d0ee      	beq.n	1a6bc <ull_filter_rl_find+0x20>
   1a6de:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a6e0:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a6e2:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1a6e4:	bf08      	it	eq
   1a6e6:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a6ea:	2c08      	cmp	r4, #8
   1a6ec:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1a6f0:	d1e9      	bne.n	1a6c6 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1a6f2:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1a6f6:	4640      	mov	r0, r8
   1a6f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a6fc:	4628      	mov	r0, r5
   1a6fe:	2206      	movs	r2, #6
   1a700:	4659      	mov	r1, fp
   1a702:	f00a fa94 	bl	24c2e <memcmp>
   1a706:	2800      	cmp	r0, #0
   1a708:	d0f5      	beq.n	1a6f6 <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a70a:	2f00      	cmp	r7, #0
   1a70c:	d0d6      	beq.n	1a6bc <ull_filter_rl_find+0x20>
   1a70e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1a712:	07db      	lsls	r3, r3, #31
   1a714:	d4d2      	bmi.n	1a6bc <ull_filter_rl_find+0x20>
   1a716:	e7e2      	b.n	1a6de <ull_filter_rl_find+0x42>
   1a718:	2000edd1 	.word	0x2000edd1

0001a71c <ll_rl_add>:
{
   1a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a720:	4680      	mov	r8, r0
   1a722:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a724:	2000      	movs	r0, #0
{
   1a726:	460e      	mov	r6, r1
   1a728:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a72a:	f7fa fcef 	bl	1510c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a72e:	2800      	cmp	r0, #0
   1a730:	d17d      	bne.n	1a82e <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1a732:	46c2      	mov	sl, r8
   1a734:	4604      	mov	r4, r0
   1a736:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1a73a:	f10d 020f 	add.w	r2, sp, #15
   1a73e:	4651      	mov	r1, sl
   1a740:	f7ff ffac 	bl	1a69c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a744:	2807      	cmp	r0, #7
   1a746:	f240 80b5 	bls.w	1a8b4 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a74a:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1a74e:	2f07      	cmp	r7, #7
   1a750:	f200 8084 	bhi.w	1a85c <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a754:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1a758:	4d58      	ldr	r5, [pc, #352]	; (1a8bc <ll_rl_add+0x1a0>)
   1a75a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1a75e:	1c58      	adds	r0, r3, #1
   1a760:	2206      	movs	r2, #6
   1a762:	4651      	mov	r1, sl
   1a764:	4428      	add	r0, r5
   1a766:	9300      	str	r3, [sp, #0]
   1a768:	f00a fa72 	bl	24c50 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a76c:	f898 3000 	ldrb.w	r3, [r8]
   1a770:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1a774:	465a      	mov	r2, fp
   1a776:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   1a77a:	f363 1186 	bfi	r1, r3, #6, #1
   1a77e:	f805 100b 	strb.w	r1, [r5, fp]
   1a782:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a786:	2110      	movs	r1, #16
   1a788:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a78a:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a78c:	f7f6 f8ce 	bl	1092c <mem_nz>
   1a790:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a794:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a796:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a79a:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a79c:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a7a0:	f7f6 f8c4 	bl	1092c <mem_nz>
   1a7a4:	f815 200b 	ldrb.w	r2, [r5, fp]
   1a7a8:	f000 0001 	and.w	r0, r0, #1
   1a7ac:	f360 02c3 	bfi	r2, r0, #3, #1
   1a7b0:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   1a7b4:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a7b6:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   1a7ba:	d453      	bmi.n	1a864 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   1a7bc:	2800      	cmp	r0, #0
   1a7be:	d16b      	bne.n	1a898 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a7c0:	9800      	ldr	r0, [sp, #0]
   1a7c2:	4e3f      	ldr	r6, [pc, #252]	; (1a8c0 <ll_rl_add+0x1a4>)
   1a7c4:	3018      	adds	r0, #24
   1a7c6:	2206      	movs	r2, #6
   1a7c8:	2100      	movs	r1, #0
   1a7ca:	4428      	add	r0, r5
   1a7cc:	f00a fa6b 	bl	24ca6 <memset>
	rl[i].dev = 0U;
   1a7d0:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   1a7d4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1a7d8:	f021 0112 	bic.w	r1, r1, #18
   1a7dc:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a7e0:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   1a7e4:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a7e8:	f009 0901 	and.w	r9, r9, #1
   1a7ec:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1a7f0:	07d3      	lsls	r3, r2, #31
   1a7f2:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a7f6:	d501      	bpl.n	1a7fc <ll_rl_add+0xe0>
   1a7f8:	4549      	cmp	r1, r9
   1a7fa:	d01c      	beq.n	1a836 <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   1a7fc:	3401      	adds	r4, #1
   1a7fe:	2c08      	cmp	r4, #8
   1a800:	f106 0608 	add.w	r6, r6, #8
   1a804:	d1f2      	bne.n	1a7ec <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   1a806:	eb0b 0207 	add.w	r2, fp, r7
   1a80a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1a80e:	f36f 1145 	bfc	r1, #5, #1
   1a812:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1a816:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1a81a:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1a81c:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1a820:	f042 0201 	orr.w	r2, r2, #1
   1a824:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1a828:	b005      	add	sp, #20
   1a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a82e:	200c      	movs	r0, #12
}
   1a830:	b005      	add	sp, #20
   1a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a836:	2206      	movs	r2, #6
   1a838:	4630      	mov	r0, r6
   1a83a:	4651      	mov	r1, sl
   1a83c:	f00a f9f7 	bl	24c2e <memcmp>
   1a840:	2800      	cmp	r0, #0
   1a842:	d1db      	bne.n	1a7fc <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   1a844:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   1a848:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   1a84c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   1a850:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   1a852:	f041 0120 	orr.w	r1, r1, #32
   1a856:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1a85a:	e7dc      	b.n	1a816 <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a85c:	2007      	movs	r0, #7
}
   1a85e:	b005      	add	sp, #20
   1a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1a864:	4b17      	ldr	r3, [pc, #92]	; (1a8c4 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1a866:	4a18      	ldr	r2, [pc, #96]	; (1a8c8 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   1a868:	7819      	ldrb	r1, [r3, #0]
   1a86a:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a86e:	5457      	strb	r7, [r2, r1]
   1a870:	4a16      	ldr	r2, [pc, #88]	; (1a8cc <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   1a872:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1a876:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1a87a:	3101      	adds	r1, #1
	psrc += length - 1;
   1a87c:	f106 020f 	add.w	r2, r6, #15
   1a880:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a882:	f10c 3cff 	add.w	ip, ip, #4294967295
   1a886:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1a888:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a88c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1a890:	42b2      	cmp	r2, r6
   1a892:	d1f9      	bne.n	1a888 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   1a894:	2800      	cmp	r0, #0
   1a896:	d093      	beq.n	1a7c0 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1a898:	9b00      	ldr	r3, [sp, #0]
   1a89a:	1dd8      	adds	r0, r3, #7
   1a89c:	4649      	mov	r1, r9
   1a89e:	2210      	movs	r2, #16
   1a8a0:	4428      	add	r0, r5
   1a8a2:	f00a f9d5 	bl	24c50 <memcpy>
		rl[i].local_rpa = NULL;
   1a8a6:	eb0b 0207 	add.w	r2, fp, r7
   1a8aa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1a8ae:	2100      	movs	r1, #0
   1a8b0:	6251      	str	r1, [r2, #36]	; 0x24
   1a8b2:	e785      	b.n	1a7c0 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   1a8b4:	2012      	movs	r0, #18
}
   1a8b6:	b005      	add	sp, #20
   1a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8bc:	2000edd0 	.word	0x2000edd0
   1a8c0:	2000ef4a 	.word	0x2000ef4a
   1a8c4:	2000fb2c 	.word	0x2000fb2c
   1a8c8:	2000ed48 	.word	0x2000ed48
   1a8cc:	2000ed50 	.word	0x2000ed50

0001a8d0 <ull_filter_reset>:
	wl_anon = 0U;
   1a8d0:	4a33      	ldr	r2, [pc, #204]	; (1a9a0 <ull_filter_reset+0xd0>)
   1a8d2:	4934      	ldr	r1, [pc, #208]	; (1a9a4 <ull_filter_reset+0xd4>)
{
   1a8d4:	b538      	push	{r3, r4, r5, lr}
	wl_anon = 0U;
   1a8d6:	2300      	movs	r3, #0
   1a8d8:	4c33      	ldr	r4, [pc, #204]	; (1a9a8 <ull_filter_reset+0xd8>)
   1a8da:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1a8dc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1a8e0:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1a8e2:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1a8e4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1a8e8:	d805      	bhi.n	1a8f6 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1a8ea:	f814 203c 	ldrb.w	r2, [r4, ip, lsl #3]
   1a8ee:	f36f 1245 	bfc	r2, #5, #1
   1a8f2:	f804 203c 	strb.w	r2, [r4, ip, lsl #3]
		wl[i].taken = 0U;
   1a8f6:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1a8fa:	f36f 0200 	bfc	r2, #0, #1
   1a8fe:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1a902:	3301      	adds	r3, #1
   1a904:	2b08      	cmp	r3, #8
   1a906:	d1e9      	bne.n	1a8dc <ull_filter_reset+0xc>
	rl_enable = 0U;
   1a908:	4b28      	ldr	r3, [pc, #160]	; (1a9ac <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a90a:	4a29      	ldr	r2, [pc, #164]	; (1a9b0 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   1a90c:	2100      	movs	r1, #0
   1a90e:	7019      	strb	r1, [r3, #0]
		rl[i].taken = 0U;
   1a910:	7823      	ldrb	r3, [r4, #0]
   1a912:	f361 0300 	bfi	r3, r1, #0, #1
   1a916:	7023      	strb	r3, [r4, #0]
   1a918:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a91c:	f361 0300 	bfi	r3, r1, #0, #1
   1a920:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   1a924:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1a928:	f361 0300 	bfi	r3, r1, #0, #1
   1a92c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   1a930:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1a934:	f361 0300 	bfi	r3, r1, #0, #1
   1a938:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1a93c:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   1a940:	f361 0300 	bfi	r3, r1, #0, #1
   1a944:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
   1a948:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1a94c:	f361 0300 	bfi	r3, r1, #0, #1
   1a950:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   1a954:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   1a958:	f361 0300 	bfi	r3, r1, #0, #1
   1a95c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
   1a960:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1a964:	f361 0300 	bfi	r3, r1, #0, #1
   1a968:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   1a96c:	4b11      	ldr	r3, [pc, #68]	; (1a9b4 <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a96e:	4c12      	ldr	r4, [pc, #72]	; (1a9b8 <ull_filter_reset+0xe8>)
	peer_irk_count = 0U;
   1a970:	7019      	strb	r1, [r3, #0]
	rpa_last_ms = -1;
   1a972:	4b12      	ldr	r3, [pc, #72]	; (1a9bc <ull_filter_reset+0xec>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a974:	6014      	str	r4, [r2, #0]
	rpa_last_ms = -1;
   1a976:	f04f 35ff 	mov.w	r5, #4294967295
   1a97a:	f04f 34ff 	mov.w	r4, #4294967295
   1a97e:	e9c3 4500 	strd	r4, r5, [r3]
	if (init) {
   1a982:	b138      	cbz	r0, 1a994 <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1a984:	4b0e      	ldr	r3, [pc, #56]	; (1a9c0 <ull_filter_reset+0xf0>)
   1a986:	2230      	movs	r2, #48	; 0x30
   1a988:	4618      	mov	r0, r3
   1a98a:	f00a f98c 	bl	24ca6 <memset>
   1a98e:	4a0d      	ldr	r2, [pc, #52]	; (1a9c4 <ull_filter_reset+0xf4>)
   1a990:	6042      	str	r2, [r0, #4]
}
   1a992:	bd38      	pop	{r3, r4, r5, pc}
   1a994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_cancel(&rpa_work);
   1a998:	4809      	ldr	r0, [pc, #36]	; (1a9c0 <ull_filter_reset+0xf0>)
   1a99a:	f00d b882 	b.w	27aa2 <k_delayed_work_cancel>
   1a99e:	bf00      	nop
   1a9a0:	2000fb2e 	.word	0x2000fb2e
   1a9a4:	2000ef48 	.word	0x2000ef48
   1a9a8:	2000edd0 	.word	0x2000edd0
   1a9ac:	2000fb2d 	.word	0x2000fb2d
   1a9b0:	2000ef44 	.word	0x2000ef44
   1a9b4:	2000fb2c 	.word	0x2000fb2c
   1a9b8:	000dbba0 	.word	0x000dbba0
   1a9bc:	2000afa8 	.word	0x2000afa8
   1a9c0:	2000afb0 	.word	0x2000afb0
   1a9c4:	0001a5d5 	.word	0x0001a5d5

0001a9c8 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1a9c8:	2807      	cmp	r0, #7
   1a9ca:	d807      	bhi.n	1a9dc <ull_filter_lll_lrpa_used+0x14>
   1a9cc:	4b04      	ldr	r3, [pc, #16]	; (1a9e0 <ull_filter_lll_lrpa_used+0x18>)
   1a9ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a9d2:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1a9d6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1a9da:	4770      	bx	lr
   1a9dc:	2000      	movs	r0, #0
}
   1a9de:	4770      	bx	lr
   1a9e0:	2000edd0 	.word	0x2000edd0

0001a9e4 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1a9e4:	4b02      	ldr	r3, [pc, #8]	; (1a9f0 <ull_filter_lll_irks_get+0xc>)
   1a9e6:	781b      	ldrb	r3, [r3, #0]
   1a9e8:	7003      	strb	r3, [r0, #0]
}
   1a9ea:	4802      	ldr	r0, [pc, #8]	; (1a9f4 <ull_filter_lll_irks_get+0x10>)
   1a9ec:	4770      	bx	lr
   1a9ee:	bf00      	nop
   1a9f0:	2000fb2c 	.word	0x2000fb2c
   1a9f4:	2000ed50 	.word	0x2000ed50

0001a9f8 <ull_filter_lll_rl_irk_idx>:
{
   1a9f8:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a9fa:	4b20      	ldr	r3, [pc, #128]	; (1aa7c <ull_filter_lll_rl_irk_idx+0x84>)
   1a9fc:	781b      	ldrb	r3, [r3, #0]
   1a9fe:	4283      	cmp	r3, r0
{
   1aa00:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1aa02:	d90c      	bls.n	1aa1e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1aa04:	4b1e      	ldr	r3, [pc, #120]	; (1aa80 <ull_filter_lll_rl_irk_idx+0x88>)
   1aa06:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1aa08:	2c07      	cmp	r4, #7
   1aa0a:	d819      	bhi.n	1aa40 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1aa0c:	4b1d      	ldr	r3, [pc, #116]	; (1aa84 <ull_filter_lll_rl_irk_idx+0x8c>)
   1aa0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1aa12:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1aa16:	07db      	lsls	r3, r3, #31
   1aa18:	d520      	bpl.n	1aa5c <ull_filter_lll_rl_irk_idx+0x64>
}
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1aa1e:	4a1a      	ldr	r2, [pc, #104]	; (1aa88 <ull_filter_lll_rl_irk_idx+0x90>)
   1aa20:	491a      	ldr	r1, [pc, #104]	; (1aa8c <ull_filter_lll_rl_irk_idx+0x94>)
   1aa22:	481b      	ldr	r0, [pc, #108]	; (1aa90 <ull_filter_lll_rl_irk_idx+0x98>)
   1aa24:	f240 23b9 	movw	r3, #697	; 0x2b9
   1aa28:	f007 fc56 	bl	222d8 <printk>
   1aa2c:	4040      	eors	r0, r0
   1aa2e:	f380 8811 	msr	BASEPRI, r0
   1aa32:	f04f 0003 	mov.w	r0, #3
   1aa36:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1aa38:	4b11      	ldr	r3, [pc, #68]	; (1aa80 <ull_filter_lll_rl_irk_idx+0x88>)
   1aa3a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1aa3c:	2c07      	cmp	r4, #7
   1aa3e:	d9e5      	bls.n	1aa0c <ull_filter_lll_rl_irk_idx+0x14>
   1aa40:	4a11      	ldr	r2, [pc, #68]	; (1aa88 <ull_filter_lll_rl_irk_idx+0x90>)
   1aa42:	4914      	ldr	r1, [pc, #80]	; (1aa94 <ull_filter_lll_rl_irk_idx+0x9c>)
   1aa44:	4812      	ldr	r0, [pc, #72]	; (1aa90 <ull_filter_lll_rl_irk_idx+0x98>)
   1aa46:	f240 23bb 	movw	r3, #699	; 0x2bb
   1aa4a:	f007 fc45 	bl	222d8 <printk>
   1aa4e:	4040      	eors	r0, r0
   1aa50:	f380 8811 	msr	BASEPRI, r0
   1aa54:	f04f 0003 	mov.w	r0, #3
   1aa58:	df02      	svc	2
   1aa5a:	e7d7      	b.n	1aa0c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1aa5c:	4a0a      	ldr	r2, [pc, #40]	; (1aa88 <ull_filter_lll_rl_irk_idx+0x90>)
   1aa5e:	490e      	ldr	r1, [pc, #56]	; (1aa98 <ull_filter_lll_rl_irk_idx+0xa0>)
   1aa60:	480b      	ldr	r0, [pc, #44]	; (1aa90 <ull_filter_lll_rl_irk_idx+0x98>)
   1aa62:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1aa66:	f007 fc37 	bl	222d8 <printk>
   1aa6a:	4040      	eors	r0, r0
   1aa6c:	f380 8811 	msr	BASEPRI, r0
   1aa70:	f04f 0003 	mov.w	r0, #3
   1aa74:	df02      	svc	2
}
   1aa76:	4620      	mov	r0, r4
   1aa78:	bd10      	pop	{r4, pc}
   1aa7a:	bf00      	nop
   1aa7c:	2000fb2c 	.word	0x2000fb2c
   1aa80:	2000ed48 	.word	0x2000ed48
   1aa84:	2000edd0 	.word	0x2000edd0
   1aa88:	00029574 	.word	0x00029574
   1aa8c:	00029758 	.word	0x00029758
   1aa90:	00028de0 	.word	0x00028de0
   1aa94:	00029778 	.word	0x00029778
   1aa98:	0002974c 	.word	0x0002974c

0001aa9c <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1aa9c:	2807      	cmp	r0, #7
   1aa9e:	d823      	bhi.n	1aae8 <ull_filter_lll_irk_whitelisted+0x4c>
{
   1aaa0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1aaa2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1aaa6:	4e11      	ldr	r6, [pc, #68]	; (1aaec <ull_filter_lll_irk_whitelisted+0x50>)
   1aaa8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1aaac:	07db      	lsls	r3, r3, #31
   1aaae:	4604      	mov	r4, r0
   1aab0:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1aab4:	d505      	bpl.n	1aac2 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1aab6:	442c      	add	r4, r5
   1aab8:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1aabc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1aac0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1aac2:	4a0b      	ldr	r2, [pc, #44]	; (1aaf0 <ull_filter_lll_irk_whitelisted+0x54>)
   1aac4:	490b      	ldr	r1, [pc, #44]	; (1aaf4 <ull_filter_lll_irk_whitelisted+0x58>)
   1aac6:	480c      	ldr	r0, [pc, #48]	; (1aaf8 <ull_filter_lll_irk_whitelisted+0x5c>)
   1aac8:	f240 23c7 	movw	r3, #711	; 0x2c7
   1aacc:	f007 fc04 	bl	222d8 <printk>
   1aad0:	4040      	eors	r0, r0
   1aad2:	f380 8811 	msr	BASEPRI, r0
   1aad6:	f04f 0003 	mov.w	r0, #3
   1aada:	df02      	svc	2
	return rl[rl_idx].wl;
   1aadc:	442c      	add	r4, r5
   1aade:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1aae2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1aae6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1aae8:	2000      	movs	r0, #0
}
   1aaea:	4770      	bx	lr
   1aaec:	2000edd0 	.word	0x2000edd0
   1aaf0:	00029574 	.word	0x00029574
   1aaf4:	000295c4 	.word	0x000295c4
   1aaf8:	00028de0 	.word	0x00028de0

0001aafc <ull_filter_lll_get>:
		return &wl_filter;
   1aafc:	4a03      	ldr	r2, [pc, #12]	; (1ab0c <ull_filter_lll_get+0x10>)
   1aafe:	4b04      	ldr	r3, [pc, #16]	; (1ab10 <ull_filter_lll_get+0x14>)
}
   1ab00:	2800      	cmp	r0, #0
   1ab02:	bf0c      	ite	eq
   1ab04:	4610      	moveq	r0, r2
   1ab06:	4618      	movne	r0, r3
   1ab08:	4770      	bx	lr
   1ab0a:	bf00      	nop
   1ab0c:	2000ef10 	.word	0x2000ef10
   1ab10:	2000ef88 	.word	0x2000ef88

0001ab14 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1ab14:	4b1c      	ldr	r3, [pc, #112]	; (1ab88 <ull_filter_lll_rl_addr_allowed+0x74>)
   1ab16:	781b      	ldrb	r3, [r3, #0]
   1ab18:	b1f3      	cbz	r3, 1ab58 <ull_filter_lll_rl_addr_allowed+0x44>
   1ab1a:	7813      	ldrb	r3, [r2, #0]
   1ab1c:	2bff      	cmp	r3, #255	; 0xff
   1ab1e:	d11b      	bne.n	1ab58 <ull_filter_lll_rl_addr_allowed+0x44>
{
   1ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab24:	4d19      	ldr	r5, [pc, #100]	; (1ab8c <ull_filter_lll_rl_addr_allowed+0x78>)
   1ab26:	4604      	mov	r4, r0
   1ab28:	46ae      	mov	lr, r5
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1ab2a:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1ab2c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1ab30:	b2df      	uxtb	r7, r3
   1ab32:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1ab36:	f01c 0001 	ands.w	r0, ip, #1
   1ab3a:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1ab3e:	d003      	beq.n	1ab48 <ull_filter_lll_rl_addr_allowed+0x34>
   1ab40:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1ab44:	45a4      	cmp	ip, r4
   1ab46:	d009      	beq.n	1ab5c <ull_filter_lll_rl_addr_allowed+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ab48:	3301      	adds	r3, #1
   1ab4a:	2b08      	cmp	r3, #8
   1ab4c:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1ab50:	d1ec      	bne.n	1ab2c <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1ab52:	2001      	movs	r0, #1
}
   1ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1ab58:	2001      	movs	r0, #1
}
   1ab5a:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1ab5c:	f101 38ff 	add.w	r8, r1, #4294967295
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1ab60:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1ab62:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1ab66:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1ab6a:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1ab6e:	45ca      	cmp	sl, r9
   1ab70:	d1ea      	bne.n	1ab48 <ull_filter_lll_rl_addr_allowed+0x34>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1ab72:	45dc      	cmp	ip, fp
   1ab74:	d1f7      	bne.n	1ab66 <ull_filter_lll_rl_addr_allowed+0x52>
				return !rl[i].pirk || rl[i].dev;
   1ab76:	4433      	add	r3, r6
				*rl_idx = i;
   1ab78:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1ab7a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1ab7e:	075a      	lsls	r2, r3, #29
   1ab80:	d5e8      	bpl.n	1ab54 <ull_filter_lll_rl_addr_allowed+0x40>
   1ab82:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1ab86:	e7e5      	b.n	1ab54 <ull_filter_lll_rl_addr_allowed+0x40>
   1ab88:	2000fb2d 	.word	0x2000fb2d
   1ab8c:	2000edd0 	.word	0x2000edd0

0001ab90 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1ab90:	4b02      	ldr	r3, [pc, #8]	; (1ab9c <ull_filter_lll_rl_enabled+0xc>)
   1ab92:	7818      	ldrb	r0, [r3, #0]
}
   1ab94:	3800      	subs	r0, #0
   1ab96:	bf18      	it	ne
   1ab98:	2001      	movne	r0, #1
   1ab9a:	4770      	bx	lr
   1ab9c:	2000fb2d 	.word	0x2000fb2d

0001aba0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1aba0:	4668      	mov	r0, sp
   1aba2:	f020 0107 	bic.w	r1, r0, #7
   1aba6:	468d      	mov	sp, r1
   1aba8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1abaa:	f001 ff2d 	bl	1ca08 <isr_radio>

	ISR_DIRECT_PM();
   1abae:	f7ec fdd3 	bl	7758 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1abb2:	f7ed f907 	bl	7dc4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1abb6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1abba:	4685      	mov	sp, r0
   1abbc:	4770      	bx	lr
   1abbe:	bf00      	nop

0001abc0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1abc0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1abc2:	4b09      	ldr	r3, [pc, #36]	; (1abe8 <rtc0_nrf5_isr+0x28>)
   1abc4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1abc8:	b93a      	cbnz	r2, 1abda <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1abca:	2001      	movs	r0, #1
   1abcc:	f7f5 ff90 	bl	10af0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1abd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1abd4:	2002      	movs	r0, #2
   1abd6:	f7f5 bf8b 	b.w	10af0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1abda:	2000      	movs	r0, #0
   1abdc:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1abe0:	f7f7 f834 	bl	11c4c <ticker_trigger>
   1abe4:	e7f1      	b.n	1abca <rtc0_nrf5_isr+0xa>
   1abe6:	bf00      	nop
   1abe8:	4000b000 	.word	0x4000b000

0001abec <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1abec:	2000      	movs	r0, #0
   1abee:	f7f5 bf7f 	b.w	10af0 <mayfly_run>
   1abf2:	bf00      	nop

0001abf4 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1abf4:	f002 b822 	b.w	1cc3c <radio_status_reset>

0001abf8 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1abf8:	2801      	cmp	r0, #1
   1abfa:	d800      	bhi.n	1abfe <ticker_stop_op_cb+0x6>
   1abfc:	4770      	bx	lr
{
   1abfe:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac00:	4a06      	ldr	r2, [pc, #24]	; (1ac1c <ticker_stop_op_cb+0x24>)
   1ac02:	4907      	ldr	r1, [pc, #28]	; (1ac20 <ticker_stop_op_cb+0x28>)
   1ac04:	4807      	ldr	r0, [pc, #28]	; (1ac24 <ticker_stop_op_cb+0x2c>)
   1ac06:	f240 23a3 	movw	r3, #675	; 0x2a3
   1ac0a:	f007 fb65 	bl	222d8 <printk>
   1ac0e:	4040      	eors	r0, r0
   1ac10:	f380 8811 	msr	BASEPRI, r0
   1ac14:	f04f 0003 	mov.w	r0, #3
   1ac18:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1ac1a:	bd08      	pop	{r3, pc}
   1ac1c:	00029794 	.word	0x00029794
   1ac20:	000297dc 	.word	0x000297dc
   1ac24:	00028de0 	.word	0x00028de0

0001ac28 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac28:	2801      	cmp	r0, #1
   1ac2a:	d800      	bhi.n	1ac2e <ticker_start_op_cb+0x6>
   1ac2c:	4770      	bx	lr
{
   1ac2e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac30:	4a06      	ldr	r2, [pc, #24]	; (1ac4c <ticker_start_op_cb+0x24>)
   1ac32:	4907      	ldr	r1, [pc, #28]	; (1ac50 <ticker_start_op_cb+0x28>)
   1ac34:	4807      	ldr	r0, [pc, #28]	; (1ac54 <ticker_start_op_cb+0x2c>)
   1ac36:	f240 23ae 	movw	r3, #686	; 0x2ae
   1ac3a:	f007 fb4d 	bl	222d8 <printk>
   1ac3e:	4040      	eors	r0, r0
   1ac40:	f380 8811 	msr	BASEPRI, r0
   1ac44:	f04f 0003 	mov.w	r0, #3
   1ac48:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1ac4a:	bd08      	pop	{r3, pc}
   1ac4c:	00029794 	.word	0x00029794
   1ac50:	000297dc 	.word	0x000297dc
   1ac54:	00028de0 	.word	0x00028de0

0001ac58 <preempt_ticker_cb>:
{
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1ac58:	2200      	movs	r2, #0
{
   1ac5a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1ac5c:	4611      	mov	r1, r2
   1ac5e:	4b0a      	ldr	r3, [pc, #40]	; (1ac88 <preempt_ticker_cb+0x30>)
   1ac60:	2001      	movs	r0, #1
   1ac62:	f7f5 fef1 	bl	10a48 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1ac66:	b900      	cbnz	r0, 1ac6a <preempt_ticker_cb+0x12>
}
   1ac68:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1ac6a:	4a08      	ldr	r2, [pc, #32]	; (1ac8c <preempt_ticker_cb+0x34>)
   1ac6c:	4908      	ldr	r1, [pc, #32]	; (1ac90 <preempt_ticker_cb+0x38>)
   1ac6e:	4809      	ldr	r0, [pc, #36]	; (1ac94 <preempt_ticker_cb+0x3c>)
   1ac70:	f240 23da 	movw	r3, #730	; 0x2da
   1ac74:	f007 fb30 	bl	222d8 <printk>
   1ac78:	4040      	eors	r0, r0
   1ac7a:	f380 8811 	msr	BASEPRI, r0
   1ac7e:	f04f 0003 	mov.w	r0, #3
   1ac82:	df02      	svc	2
}
   1ac84:	bd08      	pop	{r3, pc}
   1ac86:	bf00      	nop
   1ac88:	200006cc 	.word	0x200006cc
   1ac8c:	00029794 	.word	0x00029794
   1ac90:	0002907c 	.word	0x0002907c
   1ac94:	00028de0 	.word	0x00028de0

0001ac98 <preempt_ticker_start.isra.0>:
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1ac98:	b530      	push	{r4, r5, lr}
	evt = HDR_LLL2EVT(prepare_param->param);
   1ac9a:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ac9c:	4c16      	ldr	r4, [pc, #88]	; (1acf8 <preempt_ticker_start.isra.0+0x60>)
   1ac9e:	4917      	ldr	r1, [pc, #92]	; (1acfc <preempt_ticker_start.isra.0+0x64>)
   1aca0:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1aca2:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1aca4:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1aca8:	e9cd 1205 	strd	r1, r2, [sp, #20]
   1acac:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1acb0:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1acb4:	e9d3 5400 	ldrd	r5, r4, [r3]
   1acb8:	6899      	ldr	r1, [r3, #8]
   1acba:	42a5      	cmp	r5, r4
   1acbc:	bf2c      	ite	cs
   1acbe:	ebc1 0105 	rsbcs	r1, r1, r5
   1acc2:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1acc6:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1acc8:	9100      	str	r1, [sp, #0]
   1acca:	4610      	mov	r0, r2
   1accc:	4611      	mov	r1, r2
   1acce:	f7f7 f82b 	bl	11d28 <ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1acd2:	2802      	cmp	r0, #2
   1acd4:	d801      	bhi.n	1acda <preempt_ticker_start.isra.0+0x42>
}
   1acd6:	b00b      	add	sp, #44	; 0x2c
   1acd8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1acda:	4a09      	ldr	r2, [pc, #36]	; (1ad00 <preempt_ticker_start.isra.0+0x68>)
   1acdc:	4909      	ldr	r1, [pc, #36]	; (1ad04 <preempt_ticker_start.isra.0+0x6c>)
   1acde:	480a      	ldr	r0, [pc, #40]	; (1ad08 <preempt_ticker_start.isra.0+0x70>)
   1ace0:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1ace4:	f007 faf8 	bl	222d8 <printk>
   1ace8:	4040      	eors	r0, r0
   1acea:	f380 8811 	msr	BASEPRI, r0
   1acee:	f04f 0003 	mov.w	r0, #3
   1acf2:	df02      	svc	2
}
   1acf4:	b00b      	add	sp, #44	; 0x2c
   1acf6:	bd30      	pop	{r4, r5, pc}
   1acf8:	0001ac29 	.word	0x0001ac29
   1acfc:	0001ac59 	.word	0x0001ac59
   1ad00:	00029794 	.word	0x00029794
   1ad04:	000297fc 	.word	0x000297fc
   1ad08:	00028de0 	.word	0x00028de0

0001ad0c <preempt>:

static void preempt(void *param)
{
   1ad0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1ad0e:	4e4b      	ldr	r6, [pc, #300]	; (1ae3c <preempt+0x130>)
   1ad10:	68b3      	ldr	r3, [r6, #8]
{
   1ad12:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1ad14:	b1b3      	cbz	r3, 1ad44 <preempt+0x38>
   1ad16:	6833      	ldr	r3, [r6, #0]
   1ad18:	b1a3      	cbz	r3, 1ad44 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   1ad1a:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1ad1c:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   1ad20:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   1ad24:	f7f9 fdce 	bl	148c4 <ull_prepare_dequeue_iter>
	if (!next) {
   1ad28:	4604      	mov	r4, r0
   1ad2a:	b158      	cbz	r0, 1ad44 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1ad2c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ad30:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1ad34:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1ad38:	d006      	beq.n	1ad48 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1ad3a:	f7f9 fdc3 	bl	148c4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1ad3e:	4604      	mov	r4, r0
   1ad40:	2800      	cmp	r0, #0
   1ad42:	d1f3      	bne.n	1ad2c <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1ad44:	b00b      	add	sp, #44	; 0x2c
   1ad46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1ad48:	ab05      	add	r3, sp, #20
   1ad4a:	e9d6 2700 	ldrd	r2, r7, [r6]
   1ad4e:	69e1      	ldr	r1, [r4, #28]
   1ad50:	68e0      	ldr	r0, [r4, #12]
   1ad52:	9300      	str	r3, [sp, #0]
   1ad54:	ab04      	add	r3, sp, #16
   1ad56:	47b8      	blx	r7
	if (!ret) {
   1ad58:	4607      	mov	r7, r0
   1ad5a:	2800      	cmp	r0, #0
   1ad5c:	d062      	beq.n	1ae24 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   1ad5e:	68b3      	ldr	r3, [r6, #8]
   1ad60:	6831      	ldr	r1, [r6, #0]
   1ad62:	4628      	mov	r0, r5
   1ad64:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1ad66:	f117 0f0b 	cmn.w	r7, #11
   1ad6a:	d01a      	beq.n	1ada2 <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   1ad6c:	3748      	adds	r7, #72	; 0x48
   1ad6e:	d011      	beq.n	1ad94 <preempt+0x88>
   1ad70:	4a33      	ldr	r2, [pc, #204]	; (1ae40 <preempt+0x134>)
   1ad72:	4934      	ldr	r1, [pc, #208]	; (1ae44 <preempt+0x138>)
   1ad74:	4834      	ldr	r0, [pc, #208]	; (1ae48 <preempt+0x13c>)
   1ad76:	f44f 7346 	mov.w	r3, #792	; 0x318
   1ad7a:	f007 faad 	bl	222d8 <printk>
   1ad7e:	4040      	eors	r0, r0
   1ad80:	f380 8811 	msr	BASEPRI, r0
   1ad84:	f04f 0003 	mov.w	r0, #3
   1ad88:	df02      	svc	2
   1ad8a:	e003      	b.n	1ad94 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   1ad8c:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ad90:	079b      	lsls	r3, r3, #30
   1ad92:	d041      	beq.n	1ae18 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   1ad94:	f10d 000e 	add.w	r0, sp, #14
   1ad98:	f7f9 fd94 	bl	148c4 <ull_prepare_dequeue_iter>
		if (!next) {
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	d1f5      	bne.n	1ad8c <preempt+0x80>
   1ada0:	e7d0      	b.n	1ad44 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1ada2:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1ada4:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   1ada8:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1adac:	f7f9 fd8a 	bl	148c4 <ull_prepare_dequeue_iter>
		while (iter) {
   1adb0:	bb48      	cbnz	r0, 1ae06 <preempt+0xfa>
	prepare_param.param = event.curr.param;
   1adb2:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1adb4:	9905      	ldr	r1, [sp, #20]
	prepare_param.param = event.curr.param;
   1adb6:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1adb8:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1adba:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1adbc:	9301      	str	r3, [sp, #4]
   1adbe:	9100      	str	r1, [sp, #0]
	event.curr.param = NULL;
   1adc0:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1adc2:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1adc6:	9b04      	ldr	r3, [sp, #16]
   1adc8:	aa06      	add	r2, sp, #24
   1adca:	f7f9 fd37 	bl	1483c <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1adce:	2800      	cmp	r0, #0
   1add0:	d0e0      	beq.n	1ad94 <preempt+0x88>
   1add2:	4a1b      	ldr	r2, [pc, #108]	; (1ae40 <preempt+0x134>)
   1add4:	491d      	ldr	r1, [pc, #116]	; (1ae4c <preempt+0x140>)
   1add6:	481c      	ldr	r0, [pc, #112]	; (1ae48 <preempt+0x13c>)
   1add8:	f240 3316 	movw	r3, #790	; 0x316
   1addc:	f007 fa7c 	bl	222d8 <printk>
   1ade0:	4040      	eors	r0, r0
   1ade2:	f380 8811 	msr	BASEPRI, r0
   1ade6:	f04f 0003 	mov.w	r0, #3
   1adea:	df02      	svc	2
   1adec:	e7d2      	b.n	1ad94 <preempt+0x88>
				iter->is_aborted = 1;
   1adee:	f043 0302 	orr.w	r3, r3, #2
				iter->abort_cb(&iter->prepare_param,
   1adf2:	6982      	ldr	r2, [r0, #24]
				iter->is_aborted = 1;
   1adf4:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1adf8:	4790      	blx	r2
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1adfa:	f10d 000f 	add.w	r0, sp, #15
   1adfe:	f7f9 fd61 	bl	148c4 <ull_prepare_dequeue_iter>
		while (iter) {
   1ae02:	2800      	cmp	r0, #0
   1ae04:	d0d5      	beq.n	1adb2 <preempt+0xa6>
			if (!iter->is_aborted &&
   1ae06:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ae0a:	079a      	lsls	r2, r3, #30
   1ae0c:	d4f5      	bmi.n	1adfa <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   1ae0e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1ae10:	6831      	ldr	r1, [r6, #0]
   1ae12:	4291      	cmp	r1, r2
   1ae14:	d1f1      	bne.n	1adfa <preempt+0xee>
   1ae16:	e7ea      	b.n	1adee <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   1ae18:	68c1      	ldr	r1, [r0, #12]
   1ae1a:	6800      	ldr	r0, [r0, #0]
   1ae1c:	f7ff ff3c 	bl	1ac98 <preempt_ticker_start.isra.0>
}
   1ae20:	b00b      	add	sp, #44	; 0x2c
   1ae22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1ae24:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1ae28:	69a2      	ldr	r2, [r4, #24]
   1ae2a:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1ae2c:	f043 0302 	orr.w	r3, r3, #2
   1ae30:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1ae34:	4620      	mov	r0, r4
   1ae36:	4790      	blx	r2
		goto preempt_next;
   1ae38:	e7ac      	b.n	1ad94 <preempt+0x88>
   1ae3a:	bf00      	nop
   1ae3c:	2000efc0 	.word	0x2000efc0
   1ae40:	00029794 	.word	0x00029794
   1ae44:	00029824 	.word	0x00029824
   1ae48:	00028de0 	.word	0x00028de0
   1ae4c:	0002907c 	.word	0x0002907c

0001ae50 <prepare>:
{
   1ae50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ae54:	b085      	sub	sp, #20
   1ae56:	4604      	mov	r4, r0
   1ae58:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1ae5a:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1ae5e:	23ff      	movs	r3, #255	; 0xff
{
   1ae60:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1ae64:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1ae68:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1ae6c:	460d      	mov	r5, r1
   1ae6e:	4616      	mov	r6, r2
	p = ull_prepare_dequeue_iter(&idx);
   1ae70:	f7f9 fd28 	bl	148c4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ae74:	b918      	cbnz	r0, 1ae7e <prepare+0x2e>
   1ae76:	e01e      	b.n	1aeb6 <prepare+0x66>
		p = ull_prepare_dequeue_iter(&idx);
   1ae78:	f7f9 fd24 	bl	148c4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ae7c:	b1d8      	cbz	r0, 1aeb6 <prepare+0x66>
   1ae7e:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ae82:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1ae84:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1ae88:	d1f6      	bne.n	1ae78 <prepare+0x28>
	if (event.curr.abort_cb || (p && is_resume)) {
   1ae8a:	4b2e      	ldr	r3, [pc, #184]	; (1af44 <prepare+0xf4>)
   1ae8c:	689a      	ldr	r2, [r3, #8]
   1ae8e:	b9aa      	cbnz	r2, 1aebc <prepare+0x6c>
   1ae90:	f1b9 0f00 	cmp.w	r9, #0
   1ae94:	d036      	beq.n	1af04 <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ae96:	2201      	movs	r2, #1
   1ae98:	9201      	str	r2, [sp, #4]
   1ae9a:	9700      	str	r7, [sp, #0]
   1ae9c:	4633      	mov	r3, r6
   1ae9e:	4629      	mov	r1, r5
   1aea0:	4620      	mov	r0, r4
   1aea2:	4642      	mov	r2, r8
   1aea4:	f7f9 fcca 	bl	1483c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1aea8:	b9d8      	cbnz	r0, 1aee2 <prepare+0x92>
		return -EINPROGRESS;
   1aeaa:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1aeae:	4620      	mov	r0, r4
   1aeb0:	b005      	add	sp, #20
   1aeb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1aeb6:	4b23      	ldr	r3, [pc, #140]	; (1af44 <prepare+0xf4>)
   1aeb8:	689a      	ldr	r2, [r3, #8]
   1aeba:	b31a      	cbz	r2, 1af04 <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1aebc:	e9cd 7900 	strd	r7, r9, [sp]
   1aec0:	4633      	mov	r3, r6
   1aec2:	4629      	mov	r1, r5
   1aec4:	4620      	mov	r0, r4
   1aec6:	4642      	mov	r2, r8
   1aec8:	f7f9 fcb8 	bl	1483c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1aecc:	b948      	cbnz	r0, 1aee2 <prepare+0x92>
		if (is_resume) {
   1aece:	f1b9 0f00 	cmp.w	r9, #0
   1aed2:	d1ea      	bne.n	1aeaa <prepare+0x5a>
		preempt_ticker_start(prepare_param);
   1aed4:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1aed8:	f8d8 0000 	ldr.w	r0, [r8]
   1aedc:	f7ff fedc 	bl	1ac98 <preempt_ticker_start.isra.0>
   1aee0:	e7e3      	b.n	1aeaa <prepare+0x5a>
		LL_ASSERT(!err);
   1aee2:	4a19      	ldr	r2, [pc, #100]	; (1af48 <prepare+0xf8>)
   1aee4:	4919      	ldr	r1, [pc, #100]	; (1af4c <prepare+0xfc>)
   1aee6:	481a      	ldr	r0, [pc, #104]	; (1af50 <prepare+0x100>)
   1aee8:	f44f 7312 	mov.w	r3, #584	; 0x248
   1aeec:	f007 f9f4 	bl	222d8 <printk>
   1aef0:	4040      	eors	r0, r0
   1aef2:	f380 8811 	msr	BASEPRI, r0
   1aef6:	f04f 0003 	mov.w	r0, #3
   1aefa:	df02      	svc	2
		if (is_resume) {
   1aefc:	f1b9 0f00 	cmp.w	r9, #0
   1af00:	d1d3      	bne.n	1aeaa <prepare+0x5a>
   1af02:	e7e7      	b.n	1aed4 <prepare+0x84>
	event.curr.param = prepare_param->param;
   1af04:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1af08:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1af0a:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1af0e:	4640      	mov	r0, r8
   1af10:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1af12:	2200      	movs	r2, #0
   1af14:	4b0f      	ldr	r3, [pc, #60]	; (1af54 <prepare+0x104>)
   1af16:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1af18:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1af1a:	4611      	mov	r1, r2
   1af1c:	4610      	mov	r0, r2
   1af1e:	f7f6 ff8d 	bl	11e3c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1af22:	2802      	cmp	r0, #2
   1af24:	d9c3      	bls.n	1aeae <prepare+0x5e>
   1af26:	4a08      	ldr	r2, [pc, #32]	; (1af48 <prepare+0xf8>)
   1af28:	490b      	ldr	r1, [pc, #44]	; (1af58 <prepare+0x108>)
   1af2a:	4809      	ldr	r0, [pc, #36]	; (1af50 <prepare+0x100>)
   1af2c:	f240 2382 	movw	r3, #642	; 0x282
   1af30:	f007 f9d2 	bl	222d8 <printk>
   1af34:	4040      	eors	r0, r0
   1af36:	f380 8811 	msr	BASEPRI, r0
   1af3a:	f04f 0003 	mov.w	r0, #3
   1af3e:	df02      	svc	2
   1af40:	e7b5      	b.n	1aeae <prepare+0x5e>
   1af42:	bf00      	nop
   1af44:	2000efc0 	.word	0x2000efc0
   1af48:	00029794 	.word	0x00029794
   1af4c:	00029060 	.word	0x00029060
   1af50:	00028de0 	.word	0x00028de0
   1af54:	0001abf9 	.word	0x0001abf9
   1af58:	000297fc 	.word	0x000297fc

0001af5c <lll_init>:
{
   1af5c:	b510      	push	{r4, lr}
   1af5e:	4816      	ldr	r0, [pc, #88]	; (1afb8 <lll_init+0x5c>)
   1af60:	f004 ffc4 	bl	1feec <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1af64:	4b15      	ldr	r3, [pc, #84]	; (1afbc <lll_init+0x60>)
   1af66:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1af68:	b310      	cbz	r0, 1afb0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1af6a:	4b15      	ldr	r3, [pc, #84]	; (1afc0 <lll_init+0x64>)
   1af6c:	2400      	movs	r4, #0
   1af6e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1af70:	f000 fa3c 	bl	1b3ec <lll_clock_init>
	if (err < 0) {
   1af74:	2800      	cmp	r0, #0
   1af76:	db1a      	blt.n	1afae <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1af78:	4621      	mov	r1, r4
   1af7a:	2001      	movs	r0, #1
   1af7c:	4622      	mov	r2, r4
   1af7e:	f7ec fbd3 	bl	7728 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1af82:	4622      	mov	r2, r4
   1af84:	200b      	movs	r0, #11
   1af86:	2101      	movs	r1, #1
   1af88:	f7ec fbce 	bl	7728 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1af8c:	4622      	mov	r2, r4
   1af8e:	4621      	mov	r1, r4
   1af90:	2018      	movs	r0, #24
   1af92:	f7ec fbc9 	bl	7728 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1af96:	2001      	movs	r0, #1
   1af98:	f7ec fb94 	bl	76c4 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1af9c:	200b      	movs	r0, #11
   1af9e:	f7ec fb91 	bl	76c4 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1afa2:	2018      	movs	r0, #24
   1afa4:	f7ec fb8e 	bl	76c4 <arch_irq_enable>
	radio_setup();
   1afa8:	f001 fd5e 	bl	1ca68 <radio_setup>
	return 0;
   1afac:	4620      	mov	r0, r4
}
   1afae:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1afb0:	f06f 0012 	mvn.w	r0, #18
}
   1afb4:	bd10      	pop	{r4, pc}
   1afb6:	bf00      	nop
   1afb8:	00029830 	.word	0x00029830
   1afbc:	2000efbc 	.word	0x2000efbc
   1afc0:	2000efc0 	.word	0x2000efc0

0001afc4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1afc4:	4a05      	ldr	r2, [pc, #20]	; (1afdc <lll_csrand_get+0x18>)
{
   1afc6:	b410      	push	{r4}
   1afc8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1afca:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1afcc:	6884      	ldr	r4, [r0, #8]
   1afce:	6824      	ldr	r4, [r4, #0]
   1afd0:	b28a      	uxth	r2, r1
   1afd2:	4619      	mov	r1, r3
   1afd4:	4623      	mov	r3, r4
}
   1afd6:	bc10      	pop	{r4}
   1afd8:	4718      	bx	r3
   1afda:	bf00      	nop
   1afdc:	2000efbc 	.word	0x2000efbc

0001afe0 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1afe0:	4b08      	ldr	r3, [pc, #32]	; (1b004 <lll_csrand_isr_get+0x24>)
{
   1afe2:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1afe4:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1afe6:	68ab      	ldr	r3, [r5, #8]
   1afe8:	685c      	ldr	r4, [r3, #4]
   1afea:	b13c      	cbz	r4, 1affc <lll_csrand_isr_get+0x1c>
   1afec:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1afee:	46a4      	mov	ip, r4
   1aff0:	4601      	mov	r1, r0
   1aff2:	b292      	uxth	r2, r2
   1aff4:	4628      	mov	r0, r5
   1aff6:	2300      	movs	r3, #0
}
   1aff8:	bc30      	pop	{r4, r5}
   1affa:	4760      	bx	ip
   1affc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b000:	bc30      	pop	{r4, r5}
   1b002:	4770      	bx	lr
   1b004:	2000efbc 	.word	0x2000efbc

0001b008 <lll_rand_isr_get>:
   1b008:	4b08      	ldr	r3, [pc, #32]	; (1b02c <lll_rand_isr_get+0x24>)
   1b00a:	b430      	push	{r4, r5}
   1b00c:	681d      	ldr	r5, [r3, #0]
   1b00e:	68ab      	ldr	r3, [r5, #8]
   1b010:	685c      	ldr	r4, [r3, #4]
   1b012:	b13c      	cbz	r4, 1b024 <lll_rand_isr_get+0x1c>
   1b014:	460a      	mov	r2, r1
   1b016:	46a4      	mov	ip, r4
   1b018:	4601      	mov	r1, r0
   1b01a:	b292      	uxth	r2, r2
   1b01c:	4628      	mov	r0, r5
   1b01e:	2300      	movs	r3, #0
   1b020:	bc30      	pop	{r4, r5}
   1b022:	4760      	bx	ip
   1b024:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b028:	bc30      	pop	{r4, r5}
   1b02a:	4770      	bx	lr
   1b02c:	2000efbc 	.word	0x2000efbc

0001b030 <lll_reset>:
}
   1b030:	2000      	movs	r0, #0
   1b032:	4770      	bx	lr

0001b034 <lll_prepare>:
{
   1b034:	b510      	push	{r4, lr}
   1b036:	b082      	sub	sp, #8
   1b038:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1b03a:	9400      	str	r4, [sp, #0]
   1b03c:	2400      	movs	r4, #0
   1b03e:	9401      	str	r4, [sp, #4]
   1b040:	f7ff ff06 	bl	1ae50 <prepare>
}
   1b044:	b002      	add	sp, #8
   1b046:	bd10      	pop	{r4, pc}

0001b048 <lll_resume>:
{
   1b048:	b510      	push	{r4, lr}
   1b04a:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1b04c:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1b04e:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1b052:	69c3      	ldr	r3, [r0, #28]
   1b054:	6902      	ldr	r2, [r0, #16]
   1b056:	f004 0401 	and.w	r4, r4, #1
   1b05a:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1b05e:	9401      	str	r4, [sp, #4]
   1b060:	f7ff fef6 	bl	1ae50 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1b064:	b108      	cbz	r0, 1b06a <lll_resume+0x22>
   1b066:	3044      	adds	r0, #68	; 0x44
   1b068:	d101      	bne.n	1b06e <lll_resume+0x26>
}
   1b06a:	b002      	add	sp, #8
   1b06c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1b06e:	4a07      	ldr	r2, [pc, #28]	; (1b08c <lll_resume+0x44>)
   1b070:	4907      	ldr	r1, [pc, #28]	; (1b090 <lll_resume+0x48>)
   1b072:	4808      	ldr	r0, [pc, #32]	; (1b094 <lll_resume+0x4c>)
   1b074:	23fe      	movs	r3, #254	; 0xfe
   1b076:	f007 f92f 	bl	222d8 <printk>
   1b07a:	4040      	eors	r0, r0
   1b07c:	f380 8811 	msr	BASEPRI, r0
   1b080:	f04f 0003 	mov.w	r0, #3
   1b084:	df02      	svc	2
}
   1b086:	b002      	add	sp, #8
   1b088:	bd10      	pop	{r4, pc}
   1b08a:	bf00      	nop
   1b08c:	00029794 	.word	0x00029794
   1b090:	00029834 	.word	0x00029834
   1b094:	00028de0 	.word	0x00028de0

0001b098 <lll_disable>:
{
   1b098:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   1b09a:	4604      	mov	r4, r0
{
   1b09c:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   1b09e:	2800      	cmp	r0, #0
   1b0a0:	d033      	beq.n	1b10a <lll_disable+0x72>
   1b0a2:	4b26      	ldr	r3, [pc, #152]	; (1b13c <lll_disable+0xa4>)
   1b0a4:	681a      	ldr	r2, [r3, #0]
   1b0a6:	4282      	cmp	r2, r0
   1b0a8:	d029      	beq.n	1b0fe <lll_disable+0x66>
		idx = UINT8_MAX;
   1b0aa:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1b0ac:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1b0b0:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1b0b4:	f7f9 fc06 	bl	148c4 <ull_prepare_dequeue_iter>
		while (next) {
   1b0b8:	b940      	cbnz	r0, 1b0cc <lll_disable+0x34>
   1b0ba:	e01c      	b.n	1b0f6 <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   1b0bc:	68c3      	ldr	r3, [r0, #12]
   1b0be:	42a3      	cmp	r3, r4
   1b0c0:	d01b      	beq.n	1b0fa <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   1b0c2:	f10d 0007 	add.w	r0, sp, #7
   1b0c6:	f7f9 fbfd 	bl	148c4 <ull_prepare_dequeue_iter>
		while (next) {
   1b0ca:	b1a0      	cbz	r0, 1b0f6 <lll_disable+0x5e>
			if (!next->is_aborted &&
   1b0cc:	f890 3020 	ldrb.w	r3, [r0, #32]
   1b0d0:	079b      	lsls	r3, r3, #30
   1b0d2:	d4f6      	bmi.n	1b0c2 <lll_disable+0x2a>
   1b0d4:	2c00      	cmp	r4, #0
   1b0d6:	d1f1      	bne.n	1b0bc <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   1b0d8:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1b0da:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1b0de:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1b0e0:	f043 0302 	orr.w	r3, r3, #2
   1b0e4:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1b0e8:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1b0ea:	f10d 0007 	add.w	r0, sp, #7
   1b0ee:	f7f9 fbe9 	bl	148c4 <ull_prepare_dequeue_iter>
		while (next) {
   1b0f2:	2800      	cmp	r0, #0
   1b0f4:	d1ea      	bne.n	1b0cc <lll_disable+0x34>
}
   1b0f6:	b002      	add	sp, #8
   1b0f8:	bd10      	pop	{r4, pc}
   1b0fa:	4621      	mov	r1, r4
   1b0fc:	e7ed      	b.n	1b0da <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   1b0fe:	689b      	ldr	r3, [r3, #8]
   1b100:	b16b      	cbz	r3, 1b11e <lll_disable+0x86>
   1b102:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1b104:	2000      	movs	r0, #0
   1b106:	4798      	blx	r3
   1b108:	e7cf      	b.n	1b0aa <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1b10a:	4a0c      	ldr	r2, [pc, #48]	; (1b13c <lll_disable+0xa4>)
   1b10c:	6893      	ldr	r3, [r2, #8]
   1b10e:	2b00      	cmp	r3, #0
   1b110:	d0cb      	beq.n	1b0aa <lll_disable+0x12>
   1b112:	6811      	ldr	r1, [r2, #0]
   1b114:	2900      	cmp	r1, #0
   1b116:	d0c8      	beq.n	1b0aa <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1b118:	2000      	movs	r0, #0
   1b11a:	4798      	blx	r3
   1b11c:	e7c5      	b.n	1b0aa <lll_disable+0x12>
			LL_ASSERT(!param);
   1b11e:	4a08      	ldr	r2, [pc, #32]	; (1b140 <lll_disable+0xa8>)
   1b120:	4908      	ldr	r1, [pc, #32]	; (1b144 <lll_disable+0xac>)
   1b122:	4809      	ldr	r0, [pc, #36]	; (1b148 <lll_disable+0xb0>)
   1b124:	f44f 7384 	mov.w	r3, #264	; 0x108
   1b128:	f007 f8d6 	bl	222d8 <printk>
   1b12c:	4040      	eors	r0, r0
   1b12e:	f380 8811 	msr	BASEPRI, r0
   1b132:	f04f 0003 	mov.w	r0, #3
   1b136:	df02      	svc	2
   1b138:	e7b7      	b.n	1b0aa <lll_disable+0x12>
   1b13a:	bf00      	nop
   1b13c:	2000efc0 	.word	0x2000efc0
   1b140:	00029794 	.word	0x00029794
   1b144:	00029848 	.word	0x00029848
   1b148:	00028de0 	.word	0x00028de0

0001b14c <lll_prepare_done>:
}
   1b14c:	2000      	movs	r0, #0
   1b14e:	4770      	bx	lr

0001b150 <lll_done>:
{
   1b150:	b510      	push	{r4, lr}
   1b152:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1b154:	f7f9 fba8 	bl	148a8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1b158:	b13c      	cbz	r4, 1b16a <lll_done+0x1a>
   1b15a:	b320      	cbz	r0, 1b1a6 <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1b15c:	6820      	ldr	r0, [r4, #0]
   1b15e:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1b160:	f7f9 fbe0 	bl	14924 <ull_event_done>
	LL_ASSERT(evdone);
   1b164:	b180      	cbz	r0, 1b188 <lll_done+0x38>
}
   1b166:	2000      	movs	r0, #0
   1b168:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1b16a:	4c1d      	ldr	r4, [pc, #116]	; (1b1e0 <lll_done+0x90>)
   1b16c:	68a3      	ldr	r3, [r4, #8]
   1b16e:	b343      	cbz	r3, 1b1c2 <lll_done+0x72>
		param = event.curr.param;
   1b170:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1b172:	2300      	movs	r3, #0
   1b174:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1b176:	6023      	str	r3, [r4, #0]
		if (param) {
   1b178:	2800      	cmp	r0, #0
   1b17a:	d0f1      	beq.n	1b160 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1b17c:	6800      	ldr	r0, [r0, #0]
   1b17e:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1b180:	f7f9 fbd0 	bl	14924 <ull_event_done>
	LL_ASSERT(evdone);
   1b184:	2800      	cmp	r0, #0
   1b186:	d1ee      	bne.n	1b166 <lll_done+0x16>
   1b188:	4a16      	ldr	r2, [pc, #88]	; (1b1e4 <lll_done+0x94>)
   1b18a:	4917      	ldr	r1, [pc, #92]	; (1b1e8 <lll_done+0x98>)
   1b18c:	4817      	ldr	r0, [pc, #92]	; (1b1ec <lll_done+0x9c>)
   1b18e:	f240 1359 	movw	r3, #345	; 0x159
   1b192:	f007 f8a1 	bl	222d8 <printk>
   1b196:	4040      	eors	r0, r0
   1b198:	f380 8811 	msr	BASEPRI, r0
   1b19c:	f04f 0003 	mov.w	r0, #3
   1b1a0:	df02      	svc	2
}
   1b1a2:	2000      	movs	r0, #0
   1b1a4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1b1a6:	4a0f      	ldr	r2, [pc, #60]	; (1b1e4 <lll_done+0x94>)
   1b1a8:	4911      	ldr	r1, [pc, #68]	; (1b1f0 <lll_done+0xa0>)
   1b1aa:	4810      	ldr	r0, [pc, #64]	; (1b1ec <lll_done+0x9c>)
   1b1ac:	f240 133b 	movw	r3, #315	; 0x13b
   1b1b0:	f007 f892 	bl	222d8 <printk>
   1b1b4:	4040      	eors	r0, r0
   1b1b6:	f380 8811 	msr	BASEPRI, r0
   1b1ba:	f04f 0003 	mov.w	r0, #3
   1b1be:	df02      	svc	2
   1b1c0:	e7cc      	b.n	1b15c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1b1c2:	4a08      	ldr	r2, [pc, #32]	; (1b1e4 <lll_done+0x94>)
   1b1c4:	490b      	ldr	r1, [pc, #44]	; (1b1f4 <lll_done+0xa4>)
   1b1c6:	4809      	ldr	r0, [pc, #36]	; (1b1ec <lll_done+0x9c>)
   1b1c8:	f240 1341 	movw	r3, #321	; 0x141
   1b1cc:	f007 f884 	bl	222d8 <printk>
   1b1d0:	4040      	eors	r0, r0
   1b1d2:	f380 8811 	msr	BASEPRI, r0
   1b1d6:	f04f 0003 	mov.w	r0, #3
   1b1da:	df02      	svc	2
   1b1dc:	e7c8      	b.n	1b170 <lll_done+0x20>
   1b1de:	bf00      	nop
   1b1e0:	2000efc0 	.word	0x2000efc0
   1b1e4:	00029794 	.word	0x00029794
   1b1e8:	00029874 	.word	0x00029874
   1b1ec:	00028de0 	.word	0x00028de0
   1b1f0:	00029850 	.word	0x00029850
   1b1f4:	00029860 	.word	0x00029860

0001b1f8 <lll_is_abort_cb>:
}
   1b1f8:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1b1fc:	4770      	bx	lr
   1b1fe:	bf00      	nop

0001b200 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1b200:	6803      	ldr	r3, [r0, #0]
   1b202:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   1b204:	bfb4      	ite	lt
   1b206:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1b20a:	6840      	ldrge	r0, [r0, #4]
   1b20c:	4298      	cmp	r0, r3
   1b20e:	bf38      	it	cc
   1b210:	4618      	movcc	r0, r3
}
   1b212:	4770      	bx	lr

0001b214 <lll_preempt_calc>:
{
   1b214:	b510      	push	{r4, lr}
   1b216:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1b218:	f7f6 fe52 	bl	11ec0 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1b21c:	4621      	mov	r1, r4
   1b21e:	f7f6 fe51 	bl	11ec4 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1b222:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1b224:	0203      	lsls	r3, r0, #8
   1b226:	d404      	bmi.n	1b232 <lll_preempt_calc+0x1e>
   1b228:	2809      	cmp	r0, #9
   1b22a:	bf94      	ite	ls
   1b22c:	2000      	movls	r0, #0
   1b22e:	2001      	movhi	r0, #1
}
   1b230:	bd10      	pop	{r4, pc}
	return 0;
   1b232:	2000      	movs	r0, #0
}
   1b234:	bd10      	pop	{r4, pc}
   1b236:	bf00      	nop

0001b238 <lll_chan_set>:
	switch (chan) {
   1b238:	2826      	cmp	r0, #38	; 0x26
{
   1b23a:	b510      	push	{r4, lr}
   1b23c:	4604      	mov	r4, r0
	switch (chan) {
   1b23e:	d01c      	beq.n	1b27a <lll_chan_set+0x42>
   1b240:	2827      	cmp	r0, #39	; 0x27
   1b242:	d012      	beq.n	1b26a <lll_chan_set+0x32>
   1b244:	2825      	cmp	r0, #37	; 0x25
   1b246:	d008      	beq.n	1b25a <lll_chan_set+0x22>
		if (chan < 11) {
   1b248:	280a      	cmp	r0, #10
   1b24a:	d91e      	bls.n	1b28a <lll_chan_set+0x52>
		} else if (chan < 40) {
   1b24c:	2827      	cmp	r0, #39	; 0x27
   1b24e:	d821      	bhi.n	1b294 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1b250:	3003      	adds	r0, #3
   1b252:	0040      	lsls	r0, r0, #1
   1b254:	f001 fc64 	bl	1cb20 <radio_freq_chan_set>
   1b258:	e002      	b.n	1b260 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1b25a:	2002      	movs	r0, #2
   1b25c:	f001 fc60 	bl	1cb20 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b260:	4620      	mov	r0, r4
}
   1b262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b266:	f001 bc61 	b.w	1cb2c <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1b26a:	2050      	movs	r0, #80	; 0x50
   1b26c:	f001 fc58 	bl	1cb20 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b270:	4620      	mov	r0, r4
}
   1b272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b276:	f001 bc59 	b.w	1cb2c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1b27a:	201a      	movs	r0, #26
   1b27c:	f001 fc50 	bl	1cb20 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b280:	4620      	mov	r0, r4
}
   1b282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b286:	f001 bc51 	b.w	1cb2c <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1b28a:	3002      	adds	r0, #2
   1b28c:	0040      	lsls	r0, r0, #1
   1b28e:	f001 fc47 	bl	1cb20 <radio_freq_chan_set>
   1b292:	e7e5      	b.n	1b260 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1b294:	4a06      	ldr	r2, [pc, #24]	; (1b2b0 <lll_chan_set+0x78>)
   1b296:	4907      	ldr	r1, [pc, #28]	; (1b2b4 <lll_chan_set+0x7c>)
   1b298:	4807      	ldr	r0, [pc, #28]	; (1b2b8 <lll_chan_set+0x80>)
   1b29a:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1b29e:	f007 f81b 	bl	222d8 <printk>
   1b2a2:	4040      	eors	r0, r0
   1b2a4:	f380 8811 	msr	BASEPRI, r0
   1b2a8:	f04f 0003 	mov.w	r0, #3
   1b2ac:	df02      	svc	2
   1b2ae:	e7d7      	b.n	1b260 <lll_chan_set+0x28>
   1b2b0:	00029794 	.word	0x00029794
   1b2b4:	00028e78 	.word	0x00028e78
   1b2b8:	00028de0 	.word	0x00028de0

0001b2bc <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1b2bc:	f001 bc9c 	b.w	1cbf8 <radio_rx_ready_delay_get>

0001b2c0 <lll_isr_tx_status_reset>:
{
   1b2c0:	b508      	push	{r3, lr}
	radio_status_reset();
   1b2c2:	f001 fcbb 	bl	1cc3c <radio_status_reset>
}
   1b2c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1b2ca:	f001 be09 	b.w	1cee0 <radio_tmr_status_reset>
   1b2ce:	bf00      	nop

0001b2d0 <lll_isr_rx_status_reset>:
{
   1b2d0:	b508      	push	{r3, lr}
	radio_status_reset();
   1b2d2:	f001 fcb3 	bl	1cc3c <radio_status_reset>
	radio_tmr_status_reset();
   1b2d6:	f001 fe03 	bl	1cee0 <radio_tmr_status_reset>
}
   1b2da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1b2de:	f001 bdab 	b.w	1ce38 <radio_rssi_status_reset>
   1b2e2:	bf00      	nop

0001b2e4 <lll_isr_status_reset>:
{
   1b2e4:	b508      	push	{r3, lr}
	radio_status_reset();
   1b2e6:	f001 fca9 	bl	1cc3c <radio_status_reset>
	radio_tmr_status_reset();
   1b2ea:	f001 fdf9 	bl	1cee0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1b2ee:	f001 fddf 	bl	1ceb0 <radio_filter_status_reset>
	radio_ar_status_reset();
   1b2f2:	f001 ffbf 	bl	1d274 <radio_ar_status_reset>
}
   1b2f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1b2fa:	f001 bd9d 	b.w	1ce38 <radio_rssi_status_reset>
   1b2fe:	bf00      	nop

0001b300 <lll_isr_cleanup>:
{
   1b300:	b508      	push	{r3, lr}
   1b302:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1b304:	4815      	ldr	r0, [pc, #84]	; (1b35c <lll_isr_cleanup+0x5c>)
   1b306:	f001 fb8f 	bl	1ca28 <radio_isr_set>
	if (!radio_is_idle()) {
   1b30a:	f001 fcb7 	bl	1cc7c <radio_is_idle>
   1b30e:	b150      	cbz	r0, 1b326 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1b310:	f001 fe8a 	bl	1d028 <radio_tmr_stop>
	err = lll_hfclock_off();
   1b314:	f000 f8ae 	bl	1b474 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b318:	2800      	cmp	r0, #0
   1b31a:	db0c      	blt.n	1b336 <lll_isr_cleanup+0x36>
}
   1b31c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b320:	2000      	movs	r0, #0
   1b322:	f7ff bf15 	b.w	1b150 <lll_done>
		radio_disable();
   1b326:	f001 fc75 	bl	1cc14 <radio_disable>
	radio_tmr_stop();
   1b32a:	f001 fe7d 	bl	1d028 <radio_tmr_stop>
	err = lll_hfclock_off();
   1b32e:	f000 f8a1 	bl	1b474 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b332:	2800      	cmp	r0, #0
   1b334:	daf2      	bge.n	1b31c <lll_isr_cleanup+0x1c>
   1b336:	4a0a      	ldr	r2, [pc, #40]	; (1b360 <lll_isr_cleanup+0x60>)
   1b338:	490a      	ldr	r1, [pc, #40]	; (1b364 <lll_isr_cleanup+0x64>)
   1b33a:	480b      	ldr	r0, [pc, #44]	; (1b368 <lll_isr_cleanup+0x68>)
   1b33c:	f240 231f 	movw	r3, #543	; 0x21f
   1b340:	f006 ffca 	bl	222d8 <printk>
   1b344:	4040      	eors	r0, r0
   1b346:	f380 8811 	msr	BASEPRI, r0
   1b34a:	f04f 0003 	mov.w	r0, #3
   1b34e:	df02      	svc	2
	lll_done(NULL);
   1b350:	2000      	movs	r0, #0
}
   1b352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b356:	f7ff befb 	b.w	1b150 <lll_done>
   1b35a:	bf00      	nop
   1b35c:	0001abf5 	.word	0x0001abf5
   1b360:	00029794 	.word	0x00029794
   1b364:	0002987c 	.word	0x0002987c
   1b368:	00028de0 	.word	0x00028de0

0001b36c <lll_isr_abort>:
{
   1b36c:	b510      	push	{r4, lr}
   1b36e:	4604      	mov	r4, r0
	radio_status_reset();
   1b370:	f001 fc64 	bl	1cc3c <radio_status_reset>
	radio_tmr_status_reset();
   1b374:	f001 fdb4 	bl	1cee0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1b378:	f001 fd9a 	bl	1ceb0 <radio_filter_status_reset>
	radio_ar_status_reset();
   1b37c:	f001 ff7a 	bl	1d274 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1b380:	f001 fd5a 	bl	1ce38 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1b384:	4620      	mov	r0, r4
}
   1b386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b38a:	f7ff bfb9 	b.w	1b300 <lll_isr_cleanup>
   1b38e:	bf00      	nop

0001b390 <clock_ready>:
	z_impl_k_sem_give(sem);
   1b390:	f101 0010 	add.w	r0, r1, #16
   1b394:	f005 bc40 	b.w	20c18 <z_impl_k_sem_give>

0001b398 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1b398:	b570      	push	{r4, r5, r6, lr}
   1b39a:	4605      	mov	r5, r0
   1b39c:	b08a      	sub	sp, #40	; 0x28
   1b39e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b3a0:	2201      	movs	r2, #1
   1b3a2:	2100      	movs	r1, #0
   1b3a4:	a804      	add	r0, sp, #16
   1b3a6:	f00c fafa 	bl	2799e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1b3aa:	4b0f      	ldr	r3, [pc, #60]	; (1b3e8 <blocking_on+0x50>)
   1b3ac:	9301      	str	r3, [sp, #4]
   1b3ae:	2600      	movs	r6, #0
   1b3b0:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1b3b2:	4669      	mov	r1, sp
   1b3b4:	4628      	mov	r0, r5
   1b3b6:	9603      	str	r6, [sp, #12]
   1b3b8:	9302      	str	r3, [sp, #8]
   1b3ba:	f007 f809 	bl	223d0 <onoff_request>
	if (err < 0) {
   1b3be:	2800      	cmp	r0, #0
   1b3c0:	db10      	blt.n	1b3e4 <blocking_on+0x4c>
   1b3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1b3c6:	4631      	mov	r1, r6
   1b3c8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b3cc:	fbe4 0103 	umlal	r0, r1, r4, r3
   1b3d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b3d4:	2300      	movs	r3, #0
   1b3d6:	f7e5 fda7 	bl	f28 <__aeabi_uldivmod>
   1b3da:	4602      	mov	r2, r0
   1b3dc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b3de:	a804      	add	r0, sp, #16
   1b3e0:	f005 fc40 	bl	20c64 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1b3e4:	b00a      	add	sp, #40	; 0x28
   1b3e6:	bd70      	pop	{r4, r5, r6, pc}
   1b3e8:	0001b391 	.word	0x0001b391

0001b3ec <lll_clock_init>:

int lll_clock_init(void)
{
   1b3ec:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b3ee:	2001      	movs	r0, #1
   1b3f0:	f7eb fda6 	bl	6f40 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1b3f4:	4904      	ldr	r1, [pc, #16]	; (1b408 <lll_clock_init+0x1c>)
   1b3f6:	2300      	movs	r3, #0
   1b3f8:	2401      	movs	r4, #1
   1b3fa:	608c      	str	r4, [r1, #8]
   1b3fc:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1b3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b402:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1b404:	f006 bfe4 	b.w	223d0 <onoff_request>
   1b408:	2000efd8 	.word	0x2000efd8

0001b40c <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1b40c:	4b0c      	ldr	r3, [pc, #48]	; (1b440 <lll_clock_wait+0x34>)
   1b40e:	781a      	ldrb	r2, [r3, #0]
   1b410:	b10a      	cbz	r2, 1b416 <lll_clock_wait+0xa>
		return 0;
   1b412:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1b414:	4770      	bx	lr
{
   1b416:	b510      	push	{r4, lr}
	done = true;
   1b418:	2001      	movs	r0, #1
   1b41a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b41c:	f7eb fd90 	bl	6f40 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b420:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b424:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b426:	f7ff ffb7 	bl	1b398 <blocking_on>
	if (err) {
   1b42a:	b938      	cbnz	r0, 1b43c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1b42c:	4620      	mov	r0, r4
   1b42e:	f007 f818 	bl	22462 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1b432:	2802      	cmp	r0, #2
		return 0;
   1b434:	bf0c      	ite	eq
   1b436:	2000      	moveq	r0, #0
		return -EIO;
   1b438:	f06f 0004 	mvnne.w	r0, #4
}
   1b43c:	bd10      	pop	{r4, pc}
   1b43e:	bf00      	nop
   1b440:	2000fb2f 	.word	0x2000fb2f

0001b444 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1b444:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b446:	4b0a      	ldr	r3, [pc, #40]	; (1b470 <lll_hfclock_on+0x2c>)
   1b448:	f3bf 8f5b 	dmb	ish
   1b44c:	e853 2f00 	ldrex	r2, [r3]
   1b450:	1c51      	adds	r1, r2, #1
   1b452:	e843 1000 	strex	r0, r1, [r3]
   1b456:	2800      	cmp	r0, #0
   1b458:	d1f8      	bne.n	1b44c <lll_hfclock_on+0x8>
   1b45a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1b45e:	2a00      	cmp	r2, #0
   1b460:	dd01      	ble.n	1b466 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1b462:	2000      	movs	r0, #0
   1b464:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1b466:	f7eb fd73 	bl	6f50 <z_nrf_clock_bt_ctlr_hf_request>
}
   1b46a:	2000      	movs	r0, #0
   1b46c:	bd08      	pop	{r3, pc}
   1b46e:	bf00      	nop
   1b470:	2000efd4 	.word	0x2000efd4

0001b474 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1b474:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1b476:	4b0d      	ldr	r3, [pc, #52]	; (1b4ac <lll_hfclock_off+0x38>)
   1b478:	681a      	ldr	r2, [r3, #0]
   1b47a:	2a00      	cmp	r2, #0
   1b47c:	dd12      	ble.n	1b4a4 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b47e:	f3bf 8f5b 	dmb	ish
   1b482:	e853 2f00 	ldrex	r2, [r3]
   1b486:	1e51      	subs	r1, r2, #1
   1b488:	e843 1000 	strex	r0, r1, [r3]
   1b48c:	2800      	cmp	r0, #0
   1b48e:	d1f8      	bne.n	1b482 <lll_hfclock_off+0xe>
   1b490:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1b494:	2a01      	cmp	r2, #1
   1b496:	dd01      	ble.n	1b49c <lll_hfclock_off+0x28>
		return 0;
   1b498:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1b49a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1b49c:	f7eb fd6e 	bl	6f7c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1b4a0:	2000      	movs	r0, #0
}
   1b4a2:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1b4a4:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1b4a8:	bd08      	pop	{r3, pc}
   1b4aa:	bf00      	nop
   1b4ac:	2000efd4 	.word	0x2000efd4

0001b4b0 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1b4b0:	2014      	movs	r0, #20
   1b4b2:	4770      	bx	lr

0001b4b4 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1b4b4:	4b01      	ldr	r3, [pc, #4]	; (1b4bc <lll_clock_ppm_get+0x8>)
}
   1b4b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1b4ba:	4770      	bx	lr
   1b4bc:	000298a8 	.word	0x000298a8

0001b4c0 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1b4c0:	b510      	push	{r4, lr}
   1b4c2:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1b4c4:	f7ff ff0e 	bl	1b2e4 <lll_isr_status_reset>

	radio_filter_disable();
   1b4c8:	f001 fce8 	bl	1ce9c <radio_filter_disable>

	lll_isr_cleanup(param);
   1b4cc:	4620      	mov	r0, r4
}
   1b4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b4d2:	f7ff bf15 	b.w	1b300 <lll_isr_cleanup>
   1b4d6:	bf00      	nop

0001b4d8 <isr_tx>:
{
   1b4d8:	b530      	push	{r4, r5, lr}
   1b4da:	b083      	sub	sp, #12
   1b4dc:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b4de:	f7ff feef 	bl	1b2c0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b4e2:	2096      	movs	r0, #150	; 0x96
   1b4e4:	f001 fd0c 	bl	1cf00 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1b4e8:	2300      	movs	r3, #0
   1b4ea:	461a      	mov	r2, r3
   1b4ec:	4619      	mov	r1, r3
   1b4ee:	4618      	mov	r0, r3
   1b4f0:	f001 fc34 	bl	1cd5c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1b4f4:	f001 fbe6 	bl	1ccc4 <radio_pkt_scratch_get>
   1b4f8:	f001 fb70 	bl	1cbdc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b4fc:	f001 fbaa 	bl	1cc54 <radio_is_ready>
   1b500:	b9e0      	cbnz	r0, 1b53c <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   1b502:	481e      	ldr	r0, [pc, #120]	; (1b57c <isr_tx+0xa4>)
   1b504:	4621      	mov	r1, r4
   1b506:	f001 fa8f 	bl	1ca28 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b50a:	f7ff fb41 	bl	1ab90 <ull_filter_lll_rl_enabled>
   1b50e:	bb50      	cbnz	r0, 1b566 <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b510:	f001 fdde 	bl	1d0d0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b514:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b516:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b518:	4608      	mov	r0, r1
   1b51a:	f001 fb6f 	bl	1cbfc <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b51e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b520:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b522:	4608      	mov	r0, r1
   1b524:	f001 fb66 	bl	1cbf4 <radio_tx_chain_delay_get>
   1b528:	442c      	add	r4, r5
   1b52a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b52c:	1a20      	subs	r0, r4, r0
   1b52e:	f001 fd87 	bl	1d040 <radio_tmr_hcto_configure>
}
   1b532:	b003      	add	sp, #12
   1b534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1b538:	f001 bdbc 	b.w	1d0b4 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1b53c:	4a10      	ldr	r2, [pc, #64]	; (1b580 <isr_tx+0xa8>)
   1b53e:	4911      	ldr	r1, [pc, #68]	; (1b584 <isr_tx+0xac>)
   1b540:	4811      	ldr	r0, [pc, #68]	; (1b588 <isr_tx+0xb0>)
   1b542:	f240 238e 	movw	r3, #654	; 0x28e
   1b546:	f006 fec7 	bl	222d8 <printk>
   1b54a:	4040      	eors	r0, r0
   1b54c:	f380 8811 	msr	BASEPRI, r0
   1b550:	f04f 0003 	mov.w	r0, #3
   1b554:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1b556:	4809      	ldr	r0, [pc, #36]	; (1b57c <isr_tx+0xa4>)
   1b558:	4621      	mov	r1, r4
   1b55a:	f001 fa65 	bl	1ca28 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b55e:	f7ff fb17 	bl	1ab90 <ull_filter_lll_rl_enabled>
   1b562:	2800      	cmp	r0, #0
   1b564:	d0d4      	beq.n	1b510 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b566:	f10d 0007 	add.w	r0, sp, #7
   1b56a:	f7ff fa3b 	bl	1a9e4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1b56e:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b570:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1b572:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b576:	f001 fe43 	bl	1d200 <radio_ar_configure>
   1b57a:	e7c9      	b.n	1b510 <isr_tx+0x38>
   1b57c:	0001bcdd 	.word	0x0001bcdd
   1b580:	000298b8 	.word	0x000298b8
   1b584:	00029904 	.word	0x00029904
   1b588:	00028de0 	.word	0x00028de0

0001b58c <is_abort_cb>:
	if (next != curr) {
   1b58c:	4282      	cmp	r2, r0
{
   1b58e:	b508      	push	{r3, lr}
	if (next != curr) {
   1b590:	d011      	beq.n	1b5b6 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1b592:	7b12      	ldrb	r2, [r2, #12]
   1b594:	07d2      	lsls	r2, r2, #31
   1b596:	d402      	bmi.n	1b59e <is_abort_cb+0x12>
			return -ECANCELED;
   1b598:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1b59c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1b59e:	4914      	ldr	r1, [pc, #80]	; (1b5f0 <is_abort_cb+0x64>)
   1b5a0:	6019      	str	r1, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b5a2:	9b02      	ldr	r3, [sp, #8]
   1b5a4:	2200      	movs	r2, #0
   1b5a6:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1b5a8:	f7ff ff4c 	bl	1b444 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1b5ac:	2800      	cmp	r0, #0
   1b5ae:	db0f      	blt.n	1b5d0 <is_abort_cb+0x44>
   1b5b0:	f06f 000a 	mvn.w	r0, #10
}
   1b5b4:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b5b6:	7c13      	ldrb	r3, [r2, #16]
   1b5b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b5bc:	6953      	ldr	r3, [r2, #20]
   1b5be:	781b      	ldrb	r3, [r3, #0]
   1b5c0:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1b5c4:	2b01      	cmp	r3, #1
   1b5c6:	bf14      	ite	ne
   1b5c8:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1b5cc:	2000      	moveq	r0, #0
}
   1b5ce:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1b5d0:	4a08      	ldr	r2, [pc, #32]	; (1b5f4 <is_abort_cb+0x68>)
   1b5d2:	4909      	ldr	r1, [pc, #36]	; (1b5f8 <is_abort_cb+0x6c>)
   1b5d4:	4809      	ldr	r0, [pc, #36]	; (1b5fc <is_abort_cb+0x70>)
   1b5d6:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1b5da:	f006 fe7d 	bl	222d8 <printk>
   1b5de:	4040      	eors	r0, r0
   1b5e0:	f380 8811 	msr	BASEPRI, r0
   1b5e4:	f04f 0003 	mov.w	r0, #3
   1b5e8:	df02      	svc	2
   1b5ea:	f06f 000a 	mvn.w	r0, #10
}
   1b5ee:	bd08      	pop	{r3, pc}
   1b5f0:	0001baf9 	.word	0x0001baf9
   1b5f4:	000298b8 	.word	0x000298b8
   1b5f8:	0002987c 	.word	0x0002987c
   1b5fc:	00028de0 	.word	0x00028de0

0001b600 <abort_cb>:
{
   1b600:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b602:	b1d8      	cbz	r0, 1b63c <abort_cb+0x3c>
	err = lll_hfclock_off();
   1b604:	460c      	mov	r4, r1
   1b606:	f7ff ff35 	bl	1b474 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b60a:	2800      	cmp	r0, #0
   1b60c:	db04      	blt.n	1b618 <abort_cb+0x18>
	lll_done(param);
   1b60e:	4620      	mov	r0, r4
}
   1b610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b614:	f7ff bd9c 	b.w	1b150 <lll_done>
	LL_ASSERT(err >= 0);
   1b618:	4a0c      	ldr	r2, [pc, #48]	; (1b64c <abort_cb+0x4c>)
   1b61a:	490d      	ldr	r1, [pc, #52]	; (1b650 <abort_cb+0x50>)
   1b61c:	480d      	ldr	r0, [pc, #52]	; (1b654 <abort_cb+0x54>)
   1b61e:	f240 2372 	movw	r3, #626	; 0x272
   1b622:	f006 fe59 	bl	222d8 <printk>
   1b626:	4040      	eors	r0, r0
   1b628:	f380 8811 	msr	BASEPRI, r0
   1b62c:	f04f 0003 	mov.w	r0, #3
   1b630:	df02      	svc	2
	lll_done(param);
   1b632:	4620      	mov	r0, r4
}
   1b634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b638:	f7ff bd8a 	b.w	1b150 <lll_done>
		radio_isr_set(isr_abort, param);
   1b63c:	4806      	ldr	r0, [pc, #24]	; (1b658 <abort_cb+0x58>)
   1b63e:	f001 f9f3 	bl	1ca28 <radio_isr_set>
}
   1b642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b646:	f001 bae5 	b.w	1cc14 <radio_disable>
   1b64a:	bf00      	nop
   1b64c:	000298b8 	.word	0x000298b8
   1b650:	0002987c 	.word	0x0002987c
   1b654:	00028de0 	.word	0x00028de0
   1b658:	0001b4c1 	.word	0x0001b4c1

0001b65c <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b65c:	4b08      	ldr	r3, [pc, #32]	; (1b680 <lll_adv_init+0x24>)
{
   1b65e:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b660:	1d18      	adds	r0, r3, #4
   1b662:	2205      	movs	r2, #5
   1b664:	2128      	movs	r1, #40	; 0x28
   1b666:	f7f5 f8e7 	bl	10838 <mem_init>
	MFIFO_INIT(pdu_free);
   1b66a:	4b06      	ldr	r3, [pc, #24]	; (1b684 <lll_adv_init+0x28>)
   1b66c:	2400      	movs	r4, #0
   1b66e:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b670:	2203      	movs	r2, #3
   1b672:	4621      	mov	r1, r4
   1b674:	4804      	ldr	r0, [pc, #16]	; (1b688 <lll_adv_init+0x2c>)
   1b676:	f00c f992 	bl	2799e <z_impl_k_sem_init>
}
   1b67a:	4620      	mov	r0, r4
   1b67c:	bd10      	pop	{r4, pc}
   1b67e:	bf00      	nop
   1b680:	2000efe8 	.word	0x2000efe8
   1b684:	200006dc 	.word	0x200006dc
   1b688:	2000f0b4 	.word	0x2000f0b4

0001b68c <lll_adv_reset>:
   1b68c:	4b08      	ldr	r3, [pc, #32]	; (1b6b0 <lll_adv_reset+0x24>)
   1b68e:	b510      	push	{r4, lr}
   1b690:	1d18      	adds	r0, r3, #4
   1b692:	2205      	movs	r2, #5
   1b694:	2128      	movs	r1, #40	; 0x28
   1b696:	f7f5 f8cf 	bl	10838 <mem_init>
   1b69a:	4b06      	ldr	r3, [pc, #24]	; (1b6b4 <lll_adv_reset+0x28>)
   1b69c:	2400      	movs	r4, #0
   1b69e:	805c      	strh	r4, [r3, #2]
   1b6a0:	2203      	movs	r2, #3
   1b6a2:	4621      	mov	r1, r4
   1b6a4:	4804      	ldr	r0, [pc, #16]	; (1b6b8 <lll_adv_reset+0x2c>)
   1b6a6:	f00c f97a 	bl	2799e <z_impl_k_sem_init>
   1b6aa:	4620      	mov	r0, r4
   1b6ac:	bd10      	pop	{r4, pc}
   1b6ae:	bf00      	nop
   1b6b0:	2000efe8 	.word	0x2000efe8
   1b6b4:	200006dc 	.word	0x200006dc
   1b6b8:	2000f0b4 	.word	0x2000f0b4

0001b6bc <lll_adv_data_init>:
{
   1b6bc:	b510      	push	{r4, lr}
   1b6be:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1b6c0:	4805      	ldr	r0, [pc, #20]	; (1b6d8 <lll_adv_data_init+0x1c>)
   1b6c2:	f7f5 f8e9 	bl	10898 <mem_acquire>
	if (!p) {
   1b6c6:	b120      	cbz	r0, 1b6d2 <lll_adv_data_init+0x16>
   1b6c8:	4603      	mov	r3, r0
	p->len = 0U;
   1b6ca:	2000      	movs	r0, #0
   1b6cc:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1b6ce:	6063      	str	r3, [r4, #4]
}
   1b6d0:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1b6d2:	f06f 000b 	mvn.w	r0, #11
}
   1b6d6:	bd10      	pop	{r4, pc}
   1b6d8:	2000efe8 	.word	0x2000efe8

0001b6dc <lll_adv_data_reset>:
{
   1b6dc:	4603      	mov	r3, r0
	pdu->first = 0U;
   1b6de:	2000      	movs	r0, #0
   1b6e0:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1b6e2:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1b6e4:	6098      	str	r0, [r3, #8]
}
   1b6e6:	4770      	bx	lr

0001b6e8 <lll_adv_pdu_alloc>:
{
   1b6e8:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1b6ea:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1b6ec:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1b6ee:	429a      	cmp	r2, r3
   1b6f0:	d004      	beq.n	1b6fc <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   1b6f2:	b2d4      	uxtb	r4, r2
   1b6f4:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1b6f6:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1b6f8:	4294      	cmp	r4, r2
   1b6fa:	d003      	beq.n	1b704 <lll_adv_pdu_alloc+0x1c>
		last++;
   1b6fc:	3301      	adds	r3, #1
   1b6fe:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1b700:	2b02      	cmp	r3, #2
   1b702:	d007      	beq.n	1b714 <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   1b704:	461c      	mov	r4, r3
   1b706:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   1b70a:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b70c:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1b70e:	b14d      	cbz	r5, 1b724 <lll_adv_pdu_alloc+0x3c>
}
   1b710:	4628      	mov	r0, r5
   1b712:	bd70      	pop	{r4, r5, r6, pc}
{
   1b714:	2400      	movs	r4, #0
			last = 0U;
   1b716:	4623      	mov	r3, r4
	*idx = last;
   1b718:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1b71c:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b71e:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1b720:	2d00      	cmp	r5, #0
   1b722:	d1f5      	bne.n	1b710 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1b724:	4e34      	ldr	r6, [pc, #208]	; (1b7f8 <lll_adv_pdu_alloc+0x110>)
   1b726:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   1b728:	78f1      	ldrb	r1, [r6, #3]
   1b72a:	7833      	ldrb	r3, [r6, #0]
   1b72c:	4291      	cmp	r1, r2
   1b72e:	d003      	beq.n	1b738 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   1b730:	fb02 6303 	mla	r3, r2, r3, r6
   1b734:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1b736:	b93d      	cbnz	r5, 1b748 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   1b738:	4830      	ldr	r0, [pc, #192]	; (1b7fc <lll_adv_pdu_alloc+0x114>)
   1b73a:	f7f5 f8ad 	bl	10898 <mem_acquire>
	if (p) {
   1b73e:	4605      	mov	r5, r0
   1b740:	b1a8      	cbz	r0, 1b76e <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1b742:	6065      	str	r5, [r4, #4]
}
   1b744:	4628      	mov	r0, r5
   1b746:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1b748:	482d      	ldr	r0, [pc, #180]	; (1b800 <lll_adv_pdu_alloc+0x118>)
   1b74a:	2200      	movs	r2, #0
   1b74c:	2300      	movs	r3, #0
   1b74e:	f005 fa89 	bl	20c64 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1b752:	2800      	cmp	r0, #0
   1b754:	d134      	bne.n	1b7c0 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   1b756:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b758:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   1b75a:	7871      	ldrb	r1, [r6, #1]
   1b75c:	429a      	cmp	r2, r3
   1b75e:	d0f0      	beq.n	1b742 <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   1b760:	3301      	adds	r3, #1
   1b762:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b764:	4299      	cmp	r1, r3
   1b766:	bf08      	it	eq
   1b768:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b76a:	70b3      	strb	r3, [r6, #2]
	return mem;
   1b76c:	e7e9      	b.n	1b742 <lll_adv_pdu_alloc+0x5a>
   1b76e:	4824      	ldr	r0, [pc, #144]	; (1b800 <lll_adv_pdu_alloc+0x118>)
   1b770:	f04f 32ff 	mov.w	r2, #4294967295
   1b774:	f04f 33ff 	mov.w	r3, #4294967295
   1b778:	f005 fa74 	bl	20c64 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1b77c:	2800      	cmp	r0, #0
   1b77e:	d12c      	bne.n	1b7da <lll_adv_pdu_alloc+0xf2>
	uint8_t _first = *first; /* Copy read-index */
   1b780:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b782:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1b784:	7832      	ldrb	r2, [r6, #0]
   1b786:	7870      	ldrb	r0, [r6, #1]
   1b788:	4299      	cmp	r1, r3
   1b78a:	d00a      	beq.n	1b7a2 <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   1b78c:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1b790:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1b792:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1b794:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b796:	4298      	cmp	r0, r3
   1b798:	bf08      	it	eq
   1b79a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b79c:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1b79e:	2d00      	cmp	r5, #0
   1b7a0:	d1cf      	bne.n	1b742 <lll_adv_pdu_alloc+0x5a>
   1b7a2:	4a18      	ldr	r2, [pc, #96]	; (1b804 <lll_adv_pdu_alloc+0x11c>)
   1b7a4:	4918      	ldr	r1, [pc, #96]	; (1b808 <lll_adv_pdu_alloc+0x120>)
   1b7a6:	4819      	ldr	r0, [pc, #100]	; (1b80c <lll_adv_pdu_alloc+0x124>)
   1b7a8:	f44f 7385 	mov.w	r3, #266	; 0x10a
   1b7ac:	f006 fd94 	bl	222d8 <printk>
   1b7b0:	4040      	eors	r0, r0
   1b7b2:	f380 8811 	msr	BASEPRI, r0
   1b7b6:	f04f 0003 	mov.w	r0, #3
   1b7ba:	df02      	svc	2
   1b7bc:	2500      	movs	r5, #0
   1b7be:	e7c0      	b.n	1b742 <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   1b7c0:	4a10      	ldr	r2, [pc, #64]	; (1b804 <lll_adv_pdu_alloc+0x11c>)
   1b7c2:	4913      	ldr	r1, [pc, #76]	; (1b810 <lll_adv_pdu_alloc+0x128>)
   1b7c4:	4811      	ldr	r0, [pc, #68]	; (1b80c <lll_adv_pdu_alloc+0x124>)
   1b7c6:	23f7      	movs	r3, #247	; 0xf7
   1b7c8:	f006 fd86 	bl	222d8 <printk>
   1b7cc:	4040      	eors	r0, r0
   1b7ce:	f380 8811 	msr	BASEPRI, r0
   1b7d2:	f04f 0003 	mov.w	r0, #3
   1b7d6:	df02      	svc	2
   1b7d8:	e7bd      	b.n	1b756 <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   1b7da:	4a0a      	ldr	r2, [pc, #40]	; (1b804 <lll_adv_pdu_alloc+0x11c>)
   1b7dc:	490c      	ldr	r1, [pc, #48]	; (1b810 <lll_adv_pdu_alloc+0x128>)
   1b7de:	480b      	ldr	r0, [pc, #44]	; (1b80c <lll_adv_pdu_alloc+0x124>)
   1b7e0:	f240 1307 	movw	r3, #263	; 0x107
   1b7e4:	f006 fd78 	bl	222d8 <printk>
   1b7e8:	4040      	eors	r0, r0
   1b7ea:	f380 8811 	msr	BASEPRI, r0
   1b7ee:	f04f 0003 	mov.w	r0, #3
   1b7f2:	df02      	svc	2
   1b7f4:	e7c4      	b.n	1b780 <lll_adv_pdu_alloc+0x98>
   1b7f6:	bf00      	nop
   1b7f8:	200006dc 	.word	0x200006dc
   1b7fc:	2000efe8 	.word	0x2000efe8
   1b800:	2000f0b4 	.word	0x2000f0b4
   1b804:	000298b8 	.word	0x000298b8
   1b808:	00029918 	.word	0x00029918
   1b80c:	00028de0 	.word	0x00028de0
   1b810:	00029060 	.word	0x00029060

0001b814 <lll_adv_pdu_latest_get>:
{
   1b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b816:	4604      	mov	r4, r0
	first = pdu->first;
   1b818:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1b81a:	7840      	ldrb	r0, [r0, #1]
   1b81c:	4298      	cmp	r0, r3
   1b81e:	d028      	beq.n	1b872 <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1b820:	4d1c      	ldr	r5, [pc, #112]	; (1b894 <lll_adv_pdu_latest_get+0x80>)
   1b822:	b2da      	uxtb	r2, r3
	last = last + 1;
   1b824:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1b826:	786e      	ldrb	r6, [r5, #1]
   1b828:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1b82a:	3301      	adds	r3, #1
   1b82c:	b2db      	uxtb	r3, r3
		last = 0U;
   1b82e:	429e      	cmp	r6, r3
   1b830:	bf08      	it	eq
   1b832:	2300      	moveq	r3, #0
	if (last == first) {
   1b834:	4298      	cmp	r0, r3
   1b836:	d01e      	beq.n	1b876 <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   1b838:	1c50      	adds	r0, r2, #1
   1b83a:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   1b83c:	2802      	cmp	r0, #2
   1b83e:	bf04      	itt	eq
   1b840:	2600      	moveq	r6, #0
			first = 0U;
   1b842:	4630      	moveq	r0, r6
		pdu->first = first;
   1b844:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   1b846:	bf18      	it	ne
   1b848:	4606      	movne	r6, r0
		*is_modified = 1U;
   1b84a:	2001      	movs	r0, #1
   1b84c:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b84e:	78e8      	ldrb	r0, [r5, #3]
   1b850:	7829      	ldrb	r1, [r5, #0]
   1b852:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b856:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   1b85a:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   1b85c:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1b85e:	6057      	str	r7, [r2, #4]
   1b860:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1b862:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1b864:	480c      	ldr	r0, [pc, #48]	; (1b898 <lll_adv_pdu_latest_get+0x84>)
   1b866:	f005 f9d7 	bl	20c18 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   1b86a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1b86e:	6860      	ldr	r0, [r4, #4]
}
   1b870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   1b872:	4606      	mov	r6, r0
   1b874:	e7f9      	b.n	1b86a <lll_adv_pdu_latest_get+0x56>
			LL_ASSERT(false);
   1b876:	4a09      	ldr	r2, [pc, #36]	; (1b89c <lll_adv_pdu_latest_get+0x88>)
   1b878:	4909      	ldr	r1, [pc, #36]	; (1b8a0 <lll_adv_pdu_latest_get+0x8c>)
   1b87a:	480a      	ldr	r0, [pc, #40]	; (1b8a4 <lll_adv_pdu_latest_get+0x90>)
   1b87c:	f240 131d 	movw	r3, #285	; 0x11d
   1b880:	f006 fd2a 	bl	222d8 <printk>
   1b884:	4040      	eors	r0, r0
   1b886:	f380 8811 	msr	BASEPRI, r0
   1b88a:	f04f 0003 	mov.w	r0, #3
   1b88e:	df02      	svc	2
			return NULL;
   1b890:	2000      	movs	r0, #0
}
   1b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b894:	200006dc 	.word	0x200006dc
   1b898:	2000f0b4 	.word	0x2000f0b4
   1b89c:	000298b8 	.word	0x000298b8
   1b8a0:	00028e78 	.word	0x00028e78
   1b8a4:	00028de0 	.word	0x00028de0

0001b8a8 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1b8a8:	7b03      	ldrb	r3, [r0, #12]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b8aa:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1b8ac:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b8b0:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b8b2:	4604      	mov	r4, r0
   1b8b4:	fa93 f0a3 	rbit	r0, r3
   1b8b8:	fab0 f080 	clz	r0, r0
   1b8bc:	bf08      	it	eq
   1b8be:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1b8c2:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b8c4:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   1b8c6:	d03d      	beq.n	1b944 <chan_prepare.isra.0+0x9c>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b8c8:	7b22      	ldrb	r2, [r4, #12]
   1b8ca:	1e59      	subs	r1, r3, #1
   1b8cc:	400b      	ands	r3, r1
   1b8ce:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1b8d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b8d6:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   1b8d8:	f7ff fcae 	bl	1b238 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1b8dc:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1b8de:	f10d 0107 	add.w	r1, sp, #7
   1b8e2:	f104 0010 	add.w	r0, r4, #16
   1b8e6:	f88d 3007 	strb.w	r3, [sp, #7]
   1b8ea:	f7ff ff93 	bl	1b814 <lll_adv_pdu_latest_get>
   1b8ee:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1b8f0:	f001 f97a 	bl	1cbe8 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1b8f4:	782b      	ldrb	r3, [r5, #0]
   1b8f6:	f003 030f 	and.w	r3, r3, #15
   1b8fa:	2b02      	cmp	r3, #2
   1b8fc:	d01a      	beq.n	1b934 <chan_prepare.isra.0+0x8c>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1b8fe:	f10d 0107 	add.w	r1, sp, #7
   1b902:	f104 001c 	add.w	r0, r4, #28
   1b906:	f7ff ff85 	bl	1b814 <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1b90a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b90e:	b95b      	cbnz	r3, 1b928 <chan_prepare.isra.0+0x80>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1b910:	4621      	mov	r1, r4
   1b912:	4815      	ldr	r0, [pc, #84]	; (1b968 <chan_prepare.isra.0+0xc0>)
   1b914:	f001 f888 	bl	1ca28 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b918:	2096      	movs	r0, #150	; 0x96
   1b91a:	f001 faf1 	bl	1cf00 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b91e:	2000      	movs	r0, #0
   1b920:	f001 f9d4 	bl	1cccc <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1b924:	b003      	add	sp, #12
   1b926:	bd30      	pop	{r4, r5, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1b928:	2206      	movs	r2, #6
   1b92a:	1ca9      	adds	r1, r5, #2
   1b92c:	3002      	adds	r0, #2
   1b92e:	f009 f98f 	bl	24c50 <memcpy>
   1b932:	e7ed      	b.n	1b910 <chan_prepare.isra.0+0x68>
		radio_isr_set(isr_done, lll);
   1b934:	480d      	ldr	r0, [pc, #52]	; (1b96c <chan_prepare.isra.0+0xc4>)
   1b936:	4621      	mov	r1, r4
   1b938:	f001 f876 	bl	1ca28 <radio_isr_set>
		radio_switch_complete_and_disable();
   1b93c:	f001 fa6e 	bl	1ce1c <radio_switch_complete_and_disable>
}
   1b940:	b003      	add	sp, #12
   1b942:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   1b944:	4a0a      	ldr	r2, [pc, #40]	; (1b970 <chan_prepare.isra.0+0xc8>)
   1b946:	490b      	ldr	r1, [pc, #44]	; (1b974 <chan_prepare.isra.0+0xcc>)
   1b948:	480b      	ldr	r0, [pc, #44]	; (1b978 <chan_prepare.isra.0+0xd0>)
   1b94a:	f240 3387 	movw	r3, #903	; 0x387
   1b94e:	f006 fcc3 	bl	222d8 <printk>
   1b952:	4040      	eors	r0, r0
   1b954:	f380 8811 	msr	BASEPRI, r0
   1b958:	f04f 0003 	mov.w	r0, #3
   1b95c:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b95e:	7b23      	ldrb	r3, [r4, #12]
   1b960:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b964:	e7b0      	b.n	1b8c8 <chan_prepare.isra.0+0x20>
   1b966:	bf00      	nop
   1b968:	0001b4d9 	.word	0x0001b4d9
   1b96c:	0001b97d 	.word	0x0001b97d
   1b970:	000298b8 	.word	0x000298b8
   1b974:	0002956c 	.word	0x0002956c
   1b978:	00028de0 	.word	0x00028de0

0001b97c <isr_done>:
{
   1b97c:	b510      	push	{r4, lr}
   1b97e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1b980:	f7ff fcb0 	bl	1b2e4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1b984:	7b23      	ldrb	r3, [r4, #12]
   1b986:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1b98a:	2a01      	cmp	r2, #1
   1b98c:	d105      	bne.n	1b99a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1b98e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b992:	f362 1306 	bfi	r3, r2, #4, #3
   1b996:	7323      	strb	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1b998:	b2db      	uxtb	r3, r3
   1b99a:	f013 0f70 	tst.w	r3, #112	; 0x70
   1b99e:	d106      	bne.n	1b9ae <isr_done+0x32>
	radio_filter_disable();
   1b9a0:	f001 fa7c 	bl	1ce9c <radio_filter_disable>
	lll_isr_cleanup(param);
   1b9a4:	4620      	mov	r0, r4
}
   1b9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b9aa:	f7ff bca9 	b.w	1b300 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1b9ae:	4620      	mov	r0, r4
   1b9b0:	f7ff ff7a 	bl	1b8a8 <chan_prepare.isra.0>
		radio_tx_enable();
   1b9b4:	f001 f928 	bl	1cc08 <radio_tx_enable>
}
   1b9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1b9bc:	f001 bb7a 	b.w	1d0b4 <radio_tmr_end_capture>

0001b9c0 <prepare_cb>:
{
   1b9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1b9c2:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1b9c4:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1b9c6:	f015 0501 	ands.w	r5, r5, #1
{
   1b9ca:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   1b9cc:	d16e      	bne.n	1baac <prepare_cb+0xec>
	radio_reset();
   1b9ce:	4606      	mov	r6, r0
   1b9d0:	f001 f86c 	bl	1caac <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b9d4:	4628      	mov	r0, r5
   1b9d6:	f001 f89d 	bl	1cb14 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1b9da:	4629      	mov	r1, r5
   1b9dc:	4628      	mov	r0, r5
   1b9de:	f001 f889 	bl	1caf4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1b9e2:	462a      	mov	r2, r5
   1b9e4:	2125      	movs	r1, #37	; 0x25
   1b9e6:	2008      	movs	r0, #8
   1b9e8:	f001 f8ca 	bl	1cb80 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b9ec:	4b3b      	ldr	r3, [pc, #236]	; (1badc <prepare_cb+0x11c>)
   1b9ee:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1b9f0:	a801      	add	r0, sp, #4
   1b9f2:	f001 f8ad 	bl	1cb50 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b9f6:	493a      	ldr	r1, [pc, #232]	; (1bae0 <prepare_cb+0x120>)
   1b9f8:	f240 605b 	movw	r0, #1627	; 0x65b
   1b9fc:	f001 f948 	bl	1cc90 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1ba00:	7b23      	ldrb	r3, [r4, #12]
   1ba02:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1ba06:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1ba0a:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1ba0c:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1ba0e:	f7ff ff4b 	bl	1b8a8 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1ba12:	f7ff f8bd 	bl	1ab90 <ull_filter_lll_rl_enabled>
   1ba16:	bb50      	cbnz	r0, 1ba6e <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1ba18:	7b63      	ldrb	r3, [r4, #13]
   1ba1a:	079b      	lsls	r3, r3, #30
   1ba1c:	d134      	bne.n	1ba88 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1ba1e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1ba20:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1ba22:	4638      	mov	r0, r7
   1ba24:	f7ff fbec 	bl	1b200 <lll_evt_offset_get>
   1ba28:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1ba2a:	6872      	ldr	r2, [r6, #4]
   1ba2c:	f105 0109 	add.w	r1, r5, #9
   1ba30:	2001      	movs	r0, #1
   1ba32:	f001 fa71 	bl	1cf18 <radio_tmr_start>
	radio_tmr_end_capture();
   1ba36:	f001 fb3d 	bl	1d0b4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1ba3a:	4620      	mov	r0, r4
   1ba3c:	f7f9 fb4a 	bl	150d4 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1ba40:	1c81      	adds	r1, r0, #2
   1ba42:	462a      	mov	r2, r5
   1ba44:	b2c9      	uxtb	r1, r1
   1ba46:	4638      	mov	r0, r7
   1ba48:	f7ff fbe4 	bl	1b214 <lll_preempt_calc>
   1ba4c:	b930      	cbnz	r0, 1ba5c <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1ba4e:	4620      	mov	r0, r4
   1ba50:	f7ff fb7c 	bl	1b14c <lll_prepare_done>
		LL_ASSERT(!ret);
   1ba54:	b9d0      	cbnz	r0, 1ba8c <prepare_cb+0xcc>
}
   1ba56:	2000      	movs	r0, #0
   1ba58:	b003      	add	sp, #12
   1ba5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1ba5c:	4821      	ldr	r0, [pc, #132]	; (1bae4 <prepare_cb+0x124>)
   1ba5e:	4621      	mov	r1, r4
   1ba60:	f000 ffe2 	bl	1ca28 <radio_isr_set>
		radio_disable();
   1ba64:	f001 f8d6 	bl	1cc14 <radio_disable>
}
   1ba68:	2000      	movs	r0, #0
   1ba6a:	b003      	add	sp, #12
   1ba6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1ba6e:	7b60      	ldrb	r0, [r4, #13]
   1ba70:	f010 0003 	ands.w	r0, r0, #3
   1ba74:	bf18      	it	ne
   1ba76:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1ba78:	f7ff f840 	bl	1aafc <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1ba7c:	7841      	ldrb	r1, [r0, #1]
   1ba7e:	1c82      	adds	r2, r0, #2
   1ba80:	7800      	ldrb	r0, [r0, #0]
   1ba82:	f001 f9eb 	bl	1ce5c <radio_filter_configure>
   1ba86:	e7ca      	b.n	1ba1e <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1ba88:	2001      	movs	r0, #1
   1ba8a:	e7f5      	b.n	1ba78 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   1ba8c:	4a16      	ldr	r2, [pc, #88]	; (1bae8 <prepare_cb+0x128>)
   1ba8e:	4917      	ldr	r1, [pc, #92]	; (1baec <prepare_cb+0x12c>)
   1ba90:	4817      	ldr	r0, [pc, #92]	; (1baf0 <prepare_cb+0x130>)
   1ba92:	f240 2321 	movw	r3, #545	; 0x221
   1ba96:	f006 fc1f 	bl	222d8 <printk>
   1ba9a:	4040      	eors	r0, r0
   1ba9c:	f380 8811 	msr	BASEPRI, r0
   1baa0:	f04f 0003 	mov.w	r0, #3
   1baa4:	df02      	svc	2
}
   1baa6:	2000      	movs	r0, #0
   1baa8:	b003      	add	sp, #12
   1baaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1baac:	f7ff fce2 	bl	1b474 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1bab0:	2800      	cmp	r0, #0
   1bab2:	db05      	blt.n	1bac0 <prepare_cb+0x100>
		lll_done(NULL);
   1bab4:	2000      	movs	r0, #0
   1bab6:	f7ff fb4b 	bl	1b150 <lll_done>
}
   1baba:	2000      	movs	r0, #0
   1babc:	b003      	add	sp, #12
   1babe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1bac0:	4a09      	ldr	r2, [pc, #36]	; (1bae8 <prepare_cb+0x128>)
   1bac2:	490c      	ldr	r1, [pc, #48]	; (1baf4 <prepare_cb+0x134>)
   1bac4:	480a      	ldr	r0, [pc, #40]	; (1baf0 <prepare_cb+0x130>)
   1bac6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1baca:	f006 fc05 	bl	222d8 <printk>
   1bace:	4040      	eors	r0, r0
   1bad0:	f380 8811 	msr	BASEPRI, r0
   1bad4:	f04f 0003 	mov.w	r0, #3
   1bad8:	df02      	svc	2
   1bada:	e7eb      	b.n	1bab4 <prepare_cb+0xf4>
   1badc:	8e89bed6 	.word	0x8e89bed6
   1bae0:	00555555 	.word	0x00555555
   1bae4:	0001b4c1 	.word	0x0001b4c1
   1bae8:	000298b8 	.word	0x000298b8
   1baec:	0002907c 	.word	0x0002907c
   1baf0:	00028de0 	.word	0x00028de0
   1baf4:	0002987c 	.word	0x0002987c

0001baf8 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1baf8:	68c3      	ldr	r3, [r0, #12]
{
   1bafa:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1bafc:	681e      	ldr	r6, [r3, #0]
{
   1bafe:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1bb00:	f7f6 f9de 	bl	11ec0 <ticker_ticks_now_get>
   1bb04:	4605      	mov	r5, r0
   1bb06:	4630      	mov	r0, r6
   1bb08:	f7ff fb7a 	bl	1b200 <lll_evt_offset_get>
	p->remainder = 0;
   1bb0c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1bb0e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1bb10:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1bb14:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1bb16:	4620      	mov	r0, r4
}
   1bb18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1bb1c:	f7ff bf50 	b.w	1b9c0 <prepare_cb>

0001bb20 <lll_adv_prepare>:
{
   1bb20:	b510      	push	{r4, lr}
   1bb22:	b082      	sub	sp, #8
   1bb24:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bb26:	f7ff fc8d 	bl	1b444 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1bb2a:	2800      	cmp	r0, #0
   1bb2c:	db1a      	blt.n	1bb64 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1bb2e:	4a14      	ldr	r2, [pc, #80]	; (1bb80 <lll_adv_prepare+0x60>)
   1bb30:	4914      	ldr	r1, [pc, #80]	; (1bb84 <lll_adv_prepare+0x64>)
   1bb32:	4815      	ldr	r0, [pc, #84]	; (1bb88 <lll_adv_prepare+0x68>)
   1bb34:	9400      	str	r4, [sp, #0]
   1bb36:	2300      	movs	r3, #0
   1bb38:	f7ff fa7c 	bl	1b034 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bb3c:	b108      	cbz	r0, 1bb42 <lll_adv_prepare+0x22>
   1bb3e:	3044      	adds	r0, #68	; 0x44
   1bb40:	d101      	bne.n	1bb46 <lll_adv_prepare+0x26>
}
   1bb42:	b002      	add	sp, #8
   1bb44:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bb46:	4a11      	ldr	r2, [pc, #68]	; (1bb8c <lll_adv_prepare+0x6c>)
   1bb48:	4911      	ldr	r1, [pc, #68]	; (1bb90 <lll_adv_prepare+0x70>)
   1bb4a:	4812      	ldr	r0, [pc, #72]	; (1bb94 <lll_adv_prepare+0x74>)
   1bb4c:	f240 133d 	movw	r3, #317	; 0x13d
   1bb50:	f006 fbc2 	bl	222d8 <printk>
   1bb54:	4040      	eors	r0, r0
   1bb56:	f380 8811 	msr	BASEPRI, r0
   1bb5a:	f04f 0003 	mov.w	r0, #3
   1bb5e:	df02      	svc	2
}
   1bb60:	b002      	add	sp, #8
   1bb62:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1bb64:	4a09      	ldr	r2, [pc, #36]	; (1bb8c <lll_adv_prepare+0x6c>)
   1bb66:	490c      	ldr	r1, [pc, #48]	; (1bb98 <lll_adv_prepare+0x78>)
   1bb68:	480a      	ldr	r0, [pc, #40]	; (1bb94 <lll_adv_prepare+0x74>)
   1bb6a:	f44f 739d 	mov.w	r3, #314	; 0x13a
   1bb6e:	f006 fbb3 	bl	222d8 <printk>
   1bb72:	4040      	eors	r0, r0
   1bb74:	f380 8811 	msr	BASEPRI, r0
   1bb78:	f04f 0003 	mov.w	r0, #3
   1bb7c:	df02      	svc	2
   1bb7e:	e7d6      	b.n	1bb2e <lll_adv_prepare+0xe>
   1bb80:	0001b9c1 	.word	0x0001b9c1
   1bb84:	0001b601 	.word	0x0001b601
   1bb88:	0001b58d 	.word	0x0001b58d
   1bb8c:	000298b8 	.word	0x000298b8
   1bb90:	0002991c 	.word	0x0002991c
   1bb94:	00028de0 	.word	0x00028de0
   1bb98:	0002987c 	.word	0x0002987c

0001bb9c <lll_adv_scan_req_check>:
{
   1bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1bba0:	f890 c00d 	ldrb.w	ip, [r0, #13]
{
   1bba4:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bba8:	f01c 0f01 	tst.w	ip, #1
{
   1bbac:	460f      	mov	r7, r1
   1bbae:	4616      	mov	r6, r2
   1bbb0:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bbb2:	d009      	beq.n	1bbc8 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   1bbb4:	f1b8 0f00 	cmp.w	r8, #0
   1bbb8:	d016      	beq.n	1bbe8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1bbba:	783b      	ldrb	r3, [r7, #0]
   1bbbc:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1bbc0:	d019      	beq.n	1bbf6 <lll_adv_scan_req_check+0x5a>
{
   1bbc2:	2000      	movs	r0, #0
}
   1bbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbc8:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1bbca:	f811 0b02 	ldrb.w	r0, [r1], #2
   1bbce:	9a07      	ldr	r2, [sp, #28]
   1bbd0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1bbd4:	f7fe ff9e 	bl	1ab14 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1bbd8:	2800      	cmp	r0, #0
   1bbda:	d1ee      	bne.n	1bbba <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   1bbdc:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1bbde:	07db      	lsls	r3, r3, #31
   1bbe0:	d5ef      	bpl.n	1bbc2 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   1bbe2:	f1b8 0f00 	cmp.w	r8, #0
   1bbe6:	d1e8      	bne.n	1bbba <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bbe8:	9b07      	ldr	r3, [sp, #28]
   1bbea:	7818      	ldrb	r0, [r3, #0]
   1bbec:	f7fe ff56 	bl	1aa9c <ull_filter_lll_irk_whitelisted>
   1bbf0:	2800      	cmp	r0, #0
   1bbf2:	d1e2      	bne.n	1bbba <lll_adv_scan_req_check+0x1e>
   1bbf4:	e7e5      	b.n	1bbc2 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1bbf6:	2206      	movs	r2, #6
   1bbf8:	f107 0108 	add.w	r1, r7, #8
   1bbfc:	4628      	mov	r0, r5
   1bbfe:	f009 f816 	bl	24c2e <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1bc02:	fab0 f080 	clz	r0, r0
   1bc06:	0940      	lsrs	r0, r0, #5
}
   1bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bc0c <lll_adv_connect_ind_check>:
{
   1bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc10:	461f      	mov	r7, r3
	if (tgt_addr) {
   1bc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1bc14:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1bc18:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1bc1c:	4605      	mov	r5, r0
   1bc1e:	460c      	mov	r4, r1
   1bc20:	4690      	mov	r8, r2
	if (tgt_addr) {
   1bc22:	b9fb      	cbnz	r3, 1bc64 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1bc24:	7b43      	ldrb	r3, [r0, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bc26:	079a      	lsls	r2, r3, #30
   1bc28:	d507      	bpl.n	1bc3a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1bc2a:	b1a6      	cbz	r6, 1bc56 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1bc2c:	7823      	ldrb	r3, [r4, #0]
   1bc2e:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1bc32:	d03a      	beq.n	1bcaa <lll_adv_connect_ind_check+0x9e>
   1bc34:	2000      	movs	r0, #0
}
   1bc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1bc3a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1bc3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bc40:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1bc44:	f7fe ff66 	bl	1ab14 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1bc48:	2800      	cmp	r0, #0
   1bc4a:	d1ef      	bne.n	1bc2c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   1bc4c:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   1bc4e:	079b      	lsls	r3, r3, #30
   1bc50:	d5f0      	bpl.n	1bc34 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1bc52:	2e00      	cmp	r6, #0
   1bc54:	d1ea      	bne.n	1bc2c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bc56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bc58:	7818      	ldrb	r0, [r3, #0]
   1bc5a:	f7fe ff1f 	bl	1aa9c <ull_filter_lll_irk_whitelisted>
   1bc5e:	2800      	cmp	r0, #0
   1bc60:	d1e4      	bne.n	1bc2c <lll_adv_connect_ind_check+0x20>
   1bc62:	e7e7      	b.n	1bc34 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1bc64:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1bc66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bc68:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1bc6c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1bc70:	4651      	mov	r1, sl
   1bc72:	f7fe ff4f 	bl	1ab14 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1bc76:	2800      	cmp	r0, #0
   1bc78:	d0dc      	beq.n	1bc34 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1bc7a:	7823      	ldrb	r3, [r4, #0]
   1bc7c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1bc80:	d1d8      	bne.n	1bc34 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1bc82:	4638      	mov	r0, r7
   1bc84:	2206      	movs	r2, #6
   1bc86:	f104 0108 	add.w	r1, r4, #8
   1bc8a:	f008 ffd0 	bl	24c2e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1bc8e:	2800      	cmp	r0, #0
   1bc90:	d1d0      	bne.n	1bc34 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1bc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bc94:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1bc96:	28ff      	cmp	r0, #255	; 0xff
   1bc98:	d011      	beq.n	1bcbe <lll_adv_connect_ind_check+0xb2>
   1bc9a:	7bab      	ldrb	r3, [r5, #14]
   1bc9c:	2bff      	cmp	r3, #255	; 0xff
   1bc9e:	d00e      	beq.n	1bcbe <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1bca0:	1ac0      	subs	r0, r0, r3
   1bca2:	fab0 f080 	clz	r0, r0
   1bca6:	0940      	lsrs	r0, r0, #5
   1bca8:	e7c5      	b.n	1bc36 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1bcaa:	2206      	movs	r2, #6
   1bcac:	f104 0108 	add.w	r1, r4, #8
   1bcb0:	4638      	mov	r0, r7
   1bcb2:	f008 ffbc 	bl	24c2e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1bcb6:	fab0 f080 	clz	r0, r0
   1bcba:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bcbc:	e7bb      	b.n	1bc36 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1bcbe:	7823      	ldrb	r3, [r4, #0]
   1bcc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1bcc4:	454b      	cmp	r3, r9
   1bcc6:	d1b5      	bne.n	1bc34 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1bcc8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bcca:	2206      	movs	r2, #6
   1bccc:	4651      	mov	r1, sl
   1bcce:	f008 ffae 	bl	24c2e <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1bcd2:	fab0 f080 	clz	r0, r0
   1bcd6:	0940      	lsrs	r0, r0, #5
   1bcd8:	e7ad      	b.n	1bc36 <lll_adv_connect_ind_check+0x2a>
   1bcda:	bf00      	nop

0001bcdc <isr_rx>:
{
   1bcdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bce0:	b089      	sub	sp, #36	; 0x24
   1bce2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1bce4:	f000 ffc0 	bl	1cc68 <radio_is_done>
	if (trx_done) {
   1bce8:	b2c0      	uxtb	r0, r0
   1bcea:	b950      	cbnz	r0, 1bd02 <isr_rx+0x26>
	lll_isr_status_reset();
   1bcec:	f7ff fafa 	bl	1b2e4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1bcf0:	4879      	ldr	r0, [pc, #484]	; (1bed8 <isr_rx+0x1fc>)
   1bcf2:	4621      	mov	r1, r4
   1bcf4:	f000 fe98 	bl	1ca28 <radio_isr_set>
}
   1bcf8:	b009      	add	sp, #36	; 0x24
   1bcfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1bcfe:	f000 bf89 	b.w	1cc14 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1bd02:	f000 ffd1 	bl	1cca8 <radio_crc_is_valid>
   1bd06:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1bd08:	f001 f8da 	bl	1cec0 <radio_filter_has_match>
   1bd0c:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1bd0e:	f001 f8e1 	bl	1ced4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1bd12:	f001 fac5 	bl	1d2a0 <radio_ar_has_match>
   1bd16:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1bd18:	f001 faa6 	bl	1d268 <radio_ar_match_get>
	if (crc_ok) {
   1bd1c:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1bd1e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1bd20:	f001 f892 	bl	1ce48 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1bd24:	f7ff fade 	bl	1b2e4 <lll_isr_status_reset>
	if (crc_ok) {
   1bd28:	2d00      	cmp	r5, #0
   1bd2a:	d0e1      	beq.n	1bcf0 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1bd2c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1bd30:	d175      	bne.n	1be1e <isr_rx+0x142>
   1bd32:	20ff      	movs	r0, #255	; 0xff
   1bd34:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1bd38:	f000 ffc4 	bl	1ccc4 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1bd3c:	7c23      	ldrb	r3, [r4, #16]
   1bd3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1bd42:	4680      	mov	r8, r0
   1bd44:	6959      	ldr	r1, [r3, #20]
	addr = pdu_adv->adv_ind.addr;
   1bd46:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1bd48:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   1bd4a:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bd4e:	f005 000f 	and.w	r0, r5, #15
   1bd52:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1bd54:	bf08      	it	eq
   1bd56:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bd5a:	f898 1000 	ldrb.w	r1, [r8]
   1bd5e:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   1bd62:	bf18      	it	ne
   1bd64:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bd68:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   1bd6a:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1bd6e:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bd72:	d05b      	beq.n	1be2c <isr_rx+0x150>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1bd74:	2905      	cmp	r1, #5
   1bd76:	d1bb      	bne.n	1bcf0 <isr_rx+0x14>
   1bd78:	f898 1001 	ldrb.w	r1, [r8, #1]
   1bd7c:	2922      	cmp	r1, #34	; 0x22
   1bd7e:	d1b7      	bne.n	1bcf0 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1bd80:	f10d 011f 	add.w	r1, sp, #31
   1bd84:	9103      	str	r1, [sp, #12]
   1bd86:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1bd8a:	9500      	str	r5, [sp, #0]
   1bd8c:	4641      	mov	r1, r8
   1bd8e:	4620      	mov	r0, r4
   1bd90:	f7ff ff3c 	bl	1bc0c <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1bd94:	2800      	cmp	r0, #0
   1bd96:	d0ab      	beq.n	1bcf0 <isr_rx+0x14>
					     devmatch_ok, &rl_idx) &&
   1bd98:	68a3      	ldr	r3, [r4, #8]
   1bd9a:	2b00      	cmp	r3, #0
   1bd9c:	d0a8      	beq.n	1bcf0 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1bd9e:	2004      	movs	r0, #4
   1bda0:	f7f8 fd00 	bl	147a4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1bda4:	2800      	cmp	r0, #0
   1bda6:	d0a3      	beq.n	1bcf0 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1bda8:	484c      	ldr	r0, [pc, #304]	; (1bedc <isr_rx+0x200>)
   1bdaa:	4621      	mov	r1, r4
   1bdac:	f000 fe3c 	bl	1ca28 <radio_isr_set>
		radio_disable();
   1bdb0:	f000 ff30 	bl	1cc14 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1bdb4:	f000 ff4e 	bl	1cc54 <radio_is_ready>
   1bdb8:	2800      	cmp	r0, #0
   1bdba:	d160      	bne.n	1be7e <isr_rx+0x1a2>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1bdbc:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1bdbe:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1bdc2:	07db      	lsls	r3, r3, #31
   1bdc4:	7122      	strb	r2, [r4, #4]
   1bdc6:	d44c      	bmi.n	1be62 <isr_rx+0x186>
		rx = ull_pdu_rx_alloc();
   1bdc8:	f7f8 fd0a 	bl	147e0 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1bdcc:	2313      	movs	r3, #19
		rx = ull_pdu_rx_alloc();
   1bdce:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1bdd0:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1bdd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bdd6:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1bdd8:	4641      	mov	r1, r8
   1bdda:	2224      	movs	r2, #36	; 0x24
   1bddc:	301c      	adds	r0, #28
   1bdde:	f008 ff37 	bl	24c50 <memcpy>
		ftr->param = lll;
   1bde2:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1bde4:	f001 f91a 	bl	1d01c <radio_tmr_start_get>
   1bde8:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1bdea:	f001 f96b 	bl	1d0c4 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1bdee:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1bdf0:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1bdf2:	4608      	mov	r0, r1
   1bdf4:	f000 fefe 	bl	1cbf4 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1bdf8:	1a24      	subs	r4, r4, r0
   1bdfa:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1bdfc:	b1a6      	cbz	r6, 1be28 <isr_rx+0x14c>
   1bdfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1be02:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1be04:	f7f8 fcec 	bl	147e0 <ull_pdu_rx_alloc>
   1be08:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1be0a:	4629      	mov	r1, r5
   1be0c:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1be0e:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1be10:	f7f8 fcfc 	bl	1480c <ull_rx_put>
		ull_rx_sched();
   1be14:	f7f8 fd0a 	bl	1482c <ull_rx_sched>
}
   1be18:	b009      	add	sp, #36	; 0x24
   1be1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1be1e:	fa5f f088 	uxtb.w	r0, r8
   1be22:	f7fe fde9 	bl	1a9f8 <ull_filter_lll_rl_irk_idx>
   1be26:	e785      	b.n	1bd34 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1be28:	23ff      	movs	r3, #255	; 0xff
   1be2a:	e7ea      	b.n	1be02 <isr_rx+0x126>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1be2c:	f898 1001 	ldrb.w	r1, [r8, #1]
   1be30:	290c      	cmp	r1, #12
   1be32:	f47f af5d 	bne.w	1bcf0 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1be36:	f1b9 0f00 	cmp.w	r9, #0
   1be3a:	f47f af59 	bne.w	1bcf0 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1be3e:	f10d 011f 	add.w	r1, sp, #31
   1be42:	9101      	str	r1, [sp, #4]
   1be44:	9700      	str	r7, [sp, #0]
   1be46:	4641      	mov	r1, r8
   1be48:	4620      	mov	r0, r4
   1be4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1be4e:	f7ff fea5 	bl	1bb9c <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1be52:	bb10      	cbnz	r0, 1be9a <isr_rx+0x1be>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1be54:	f898 1000 	ldrb.w	r1, [r8]
   1be58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1be5c:	f001 010f 	and.w	r1, r1, #15
   1be60:	e788      	b.n	1bd74 <isr_rx+0x98>
		LL_ASSERT(!ret);
   1be62:	4a1f      	ldr	r2, [pc, #124]	; (1bee0 <isr_rx+0x204>)
   1be64:	491f      	ldr	r1, [pc, #124]	; (1bee4 <isr_rx+0x208>)
   1be66:	4820      	ldr	r0, [pc, #128]	; (1bee8 <isr_rx+0x20c>)
   1be68:	f240 4329 	movw	r3, #1065	; 0x429
   1be6c:	f006 fa34 	bl	222d8 <printk>
   1be70:	4040      	eors	r0, r0
   1be72:	f380 8811 	msr	BASEPRI, r0
   1be76:	f04f 0003 	mov.w	r0, #3
   1be7a:	df02      	svc	2
   1be7c:	e7a4      	b.n	1bdc8 <isr_rx+0xec>
		LL_ASSERT(!radio_is_ready());
   1be7e:	4a18      	ldr	r2, [pc, #96]	; (1bee0 <isr_rx+0x204>)
   1be80:	491a      	ldr	r1, [pc, #104]	; (1beec <isr_rx+0x210>)
   1be82:	4819      	ldr	r0, [pc, #100]	; (1bee8 <isr_rx+0x20c>)
   1be84:	f240 431b 	movw	r3, #1051	; 0x41b
   1be88:	f006 fa26 	bl	222d8 <printk>
   1be8c:	4040      	eors	r0, r0
   1be8e:	f380 8811 	msr	BASEPRI, r0
   1be92:	f04f 0003 	mov.w	r0, #3
   1be96:	df02      	svc	2
   1be98:	e790      	b.n	1bdbc <isr_rx+0xe0>
		radio_isr_set(isr_done, lll);
   1be9a:	4621      	mov	r1, r4
   1be9c:	480e      	ldr	r0, [pc, #56]	; (1bed8 <isr_rx+0x1fc>)
   1be9e:	f000 fdc3 	bl	1ca28 <radio_isr_set>
		radio_switch_complete_and_disable();
   1bea2:	f000 ffbb 	bl	1ce1c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1bea6:	7f23      	ldrb	r3, [r4, #28]
   1bea8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1beac:	6a20      	ldr	r0, [r4, #32]
   1beae:	f000 fe9b 	bl	1cbe8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1beb2:	f000 fecf 	bl	1cc54 <radio_is_ready>
   1beb6:	2800      	cmp	r0, #0
   1beb8:	d0ae      	beq.n	1be18 <isr_rx+0x13c>
   1beba:	4a09      	ldr	r2, [pc, #36]	; (1bee0 <isr_rx+0x204>)
   1bebc:	490b      	ldr	r1, [pc, #44]	; (1beec <isr_rx+0x210>)
   1bebe:	480a      	ldr	r0, [pc, #40]	; (1bee8 <isr_rx+0x20c>)
   1bec0:	f240 33dd 	movw	r3, #989	; 0x3dd
   1bec4:	f006 fa08 	bl	222d8 <printk>
   1bec8:	4040      	eors	r0, r0
   1beca:	f380 8811 	msr	BASEPRI, r0
   1bece:	f04f 0003 	mov.w	r0, #3
   1bed2:	df02      	svc	2
		if (!err) {
   1bed4:	e7a0      	b.n	1be18 <isr_rx+0x13c>
   1bed6:	bf00      	nop
   1bed8:	0001b97d 	.word	0x0001b97d
   1bedc:	0001b4c1 	.word	0x0001b4c1
   1bee0:	000298b8 	.word	0x000298b8
   1bee4:	0002907c 	.word	0x0002907c
   1bee8:	00028de0 	.word	0x00028de0
   1beec:	00029904 	.word	0x00029904

0001bef0 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bef2:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1bef4:	f7ff f9f6 	bl	1b2e4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1bef8:	f7f8 fd04 	bl	14904 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1befc:	4604      	mov	r4, r0
   1befe:	2800      	cmp	r0, #0
   1bf00:	d033      	beq.n	1bf6a <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1bf02:	4b21      	ldr	r3, [pc, #132]	; (1bf88 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1bf04:	4921      	ldr	r1, [pc, #132]	; (1bf8c <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1bf06:	4a22      	ldr	r2, [pc, #136]	; (1bf90 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1bf08:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1bf0a:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1bf0c:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   1bf0e:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1bf10:	2001      	movs	r0, #1
   1bf12:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   1bf14:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1bf16:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1bf18:	b11b      	cbz	r3, 1bf22 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1bf1a:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1bf1e:	2b00      	cmp	r3, #0
   1bf20:	db04      	blt.n	1bf2c <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1bf22:	4628      	mov	r0, r5
}
   1bf24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bf28:	f7ff b9ea 	b.w	1b300 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1bf2c:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1bf30:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1bf34:	2b02      	cmp	r3, #2
   1bf36:	d016      	beq.n	1bf66 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1bf38:	2b04      	cmp	r3, #4
   1bf3a:	bf14      	ite	ne
   1bf3c:	2728      	movne	r7, #40	; 0x28
   1bf3e:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bf42:	f001 f8ab 	bl	1d09c <radio_tmr_aa_restore>
   1bf46:	4606      	mov	r6, r0
   1bf48:	f001 f8ae 	bl	1d0a8 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1bf4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1bf4e:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bf50:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1bf52:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1bf56:	2300      	movs	r3, #0
   1bf58:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1bf5a:	63eb      	str	r3, [r5, #60]	; 0x3c
	lll_isr_cleanup(param);
   1bf5c:	4628      	mov	r0, r5
}
   1bf5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bf62:	f7ff b9cd 	b.w	1b300 <lll_isr_cleanup>
	switch (phy) {
   1bf66:	2718      	movs	r7, #24
   1bf68:	e7eb      	b.n	1bf42 <isr_done+0x52>
	LL_ASSERT(e);
   1bf6a:	4a0a      	ldr	r2, [pc, #40]	; (1bf94 <isr_done+0xa4>)
   1bf6c:	490a      	ldr	r1, [pc, #40]	; (1bf98 <isr_done+0xa8>)
   1bf6e:	480b      	ldr	r0, [pc, #44]	; (1bf9c <isr_done+0xac>)
   1bf70:	f240 236e 	movw	r3, #622	; 0x26e
   1bf74:	f006 f9b0 	bl	222d8 <printk>
   1bf78:	4040      	eors	r0, r0
   1bf7a:	f380 8811 	msr	BASEPRI, r0
   1bf7e:	f04f 0003 	mov.w	r0, #3
   1bf82:	df02      	svc	2
   1bf84:	e7bd      	b.n	1bf02 <isr_done+0x12>
   1bf86:	bf00      	nop
   1bf88:	2000f58e 	.word	0x2000f58e
   1bf8c:	2000fb31 	.word	0x2000fb31
   1bf90:	2000fb32 	.word	0x2000fb32
   1bf94:	00029940 	.word	0x00029940
   1bf98:	00029208 	.word	0x00029208
   1bf9c:	00028de0 	.word	0x00028de0

0001bfa0 <lll_conn_init>:
{
   1bfa0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1bfa2:	f000 fe8b 	bl	1ccbc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bfa6:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1bfa8:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bfaa:	2101      	movs	r1, #1
   1bfac:	f361 0201 	bfi	r2, r1, #0, #2
}
   1bfb0:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bfb2:	701a      	strb	r2, [r3, #0]
}
   1bfb4:	bd08      	pop	{r3, pc}
   1bfb6:	bf00      	nop

0001bfb8 <lll_conn_reset>:
}
   1bfb8:	2000      	movs	r0, #0
   1bfba:	4770      	bx	lr

0001bfbc <lll_conn_flush>:
}
   1bfbc:	4770      	bx	lr
   1bfbe:	bf00      	nop

0001bfc0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1bfc0:	4805      	ldr	r0, [pc, #20]	; (1bfd8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1bfc2:	4906      	ldr	r1, [pc, #24]	; (1bfdc <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1bfc4:	4a06      	ldr	r2, [pc, #24]	; (1bfe0 <lll_conn_prepare_reset+0x20>)
{
   1bfc6:	b410      	push	{r4}
	trx_cnt = 0U;
   1bfc8:	2300      	movs	r3, #0
   1bfca:	4c06      	ldr	r4, [pc, #24]	; (1bfe4 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1bfcc:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1bfce:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1bfd0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1bfd2:	8023      	strh	r3, [r4, #0]
}
   1bfd4:	bc10      	pop	{r4}
   1bfd6:	4770      	bx	lr
   1bfd8:	2000fb31 	.word	0x2000fb31
   1bfdc:	2000fb30 	.word	0x2000fb30
   1bfe0:	2000fb32 	.word	0x2000fb32
   1bfe4:	2000f58e 	.word	0x2000f58e

0001bfe8 <lll_conn_abort_cb>:
{
   1bfe8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1bfea:	b1d0      	cbz	r0, 1c022 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1bfec:	460c      	mov	r4, r1
   1bfee:	f7ff fa41 	bl	1b474 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1bff2:	2800      	cmp	r0, #0
   1bff4:	db04      	blt.n	1c000 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1bff6:	4620      	mov	r0, r4
}
   1bff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bffc:	f7ff b8a8 	b.w	1b150 <lll_done>
	LL_ASSERT(err >= 0);
   1c000:	4a0b      	ldr	r2, [pc, #44]	; (1c030 <lll_conn_abort_cb+0x48>)
   1c002:	490c      	ldr	r1, [pc, #48]	; (1c034 <lll_conn_abort_cb+0x4c>)
   1c004:	480c      	ldr	r0, [pc, #48]	; (1c038 <lll_conn_abort_cb+0x50>)
   1c006:	239c      	movs	r3, #156	; 0x9c
   1c008:	f006 f966 	bl	222d8 <printk>
   1c00c:	4040      	eors	r0, r0
   1c00e:	f380 8811 	msr	BASEPRI, r0
   1c012:	f04f 0003 	mov.w	r0, #3
   1c016:	df02      	svc	2
	lll_done(param);
   1c018:	4620      	mov	r0, r4
}
   1c01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1c01e:	f7ff b897 	b.w	1b150 <lll_done>
		radio_isr_set(isr_done, param);
   1c022:	4806      	ldr	r0, [pc, #24]	; (1c03c <lll_conn_abort_cb+0x54>)
   1c024:	f000 fd00 	bl	1ca28 <radio_isr_set>
}
   1c028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1c02c:	f000 bdf2 	b.w	1cc14 <radio_disable>
   1c030:	00029940 	.word	0x00029940
   1c034:	0002987c 	.word	0x0002987c
   1c038:	00028de0 	.word	0x00028de0
   1c03c:	0001bef1 	.word	0x0001bef1

0001c040 <lll_conn_rx_pkt_set>:
{
   1c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c042:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c044:	2001      	movs	r0, #1
   1c046:	f7f8 fbad 	bl	147a4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c04a:	4606      	mov	r6, r0
   1c04c:	b368      	cbz	r0, 1c0aa <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   1c04e:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1c052:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1c056:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1c05a:	2100      	movs	r1, #0
   1c05c:	4620      	mov	r0, r4
   1c05e:	f000 fd49 	bl	1caf4 <radio_phy_set>
	} else if (lll->enc_rx) {
   1c062:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1c066:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1c068:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   1c06c:	d511      	bpl.n	1c092 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1c06e:	1d39      	adds	r1, r7, #4
   1c070:	f042 0201 	orr.w	r2, r2, #1
   1c074:	b2c9      	uxtb	r1, r1
   1c076:	2008      	movs	r0, #8
   1c078:	f000 fd82 	bl	1cb80 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1c07c:	f106 021c 	add.w	r2, r6, #28
   1c080:	4621      	mov	r1, r4
   1c082:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1c086:	f001 f829 	bl	1d0dc <radio_ccm_rx_pkt_set>
}
   1c08a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1c08e:	f000 bda5 	b.w	1cbdc <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1c092:	2008      	movs	r0, #8
   1c094:	b2f9      	uxtb	r1, r7
   1c096:	f042 0201 	orr.w	r2, r2, #1
   1c09a:	f000 fd71 	bl	1cb80 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1c09e:	f106 001c 	add.w	r0, r6, #28
}
   1c0a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1c0a6:	f000 bd99 	b.w	1cbdc <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1c0aa:	4a07      	ldr	r2, [pc, #28]	; (1c0c8 <lll_conn_rx_pkt_set+0x88>)
   1c0ac:	4907      	ldr	r1, [pc, #28]	; (1c0cc <lll_conn_rx_pkt_set+0x8c>)
   1c0ae:	4808      	ldr	r0, [pc, #32]	; (1c0d0 <lll_conn_rx_pkt_set+0x90>)
   1c0b0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   1c0b4:	f006 f910 	bl	222d8 <printk>
   1c0b8:	4040      	eors	r0, r0
   1c0ba:	f380 8811 	msr	BASEPRI, r0
   1c0be:	f04f 0003 	mov.w	r0, #3
   1c0c2:	df02      	svc	2
   1c0c4:	e7c3      	b.n	1c04e <lll_conn_rx_pkt_set+0xe>
   1c0c6:	bf00      	nop
   1c0c8:	00029940 	.word	0x00029940
   1c0cc:	0002998c 	.word	0x0002998c
   1c0d0:	00028de0 	.word	0x00028de0

0001c0d4 <lll_conn_isr_tx>:
{
   1c0d4:	b538      	push	{r3, r4, r5, lr}
   1c0d6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1c0d8:	f7ff f8f2 	bl	1b2c0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c0dc:	2096      	movs	r0, #150	; 0x96
   1c0de:	f000 ff0f 	bl	1cf00 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1c0e2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1c0e6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c0ea:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1c0ee:	f000 0007 	and.w	r0, r0, #7
   1c0f2:	f002 0207 	and.w	r2, r2, #7
   1c0f6:	2100      	movs	r1, #0
   1c0f8:	f000 fe30 	bl	1cd5c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1c0fc:	4620      	mov	r0, r4
   1c0fe:	f7ff ff9f 	bl	1c040 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c102:	f000 fda7 	bl	1cc54 <radio_is_ready>
   1c106:	bb58      	cbnz	r0, 1c160 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1c108:	f000 ffe2 	bl	1d0d0 <radio_tmr_tifs_base_get>
   1c10c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c10e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c112:	2101      	movs	r1, #1
   1c114:	f000 0007 	and.w	r0, r0, #7
   1c118:	f000 fd70 	bl	1cbfc <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1c11c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1c120:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c124:	4405      	add	r5, r0
   1c126:	2b02      	cmp	r3, #2
   1c128:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1c12c:	d016      	beq.n	1c15c <lll_conn_isr_tx+0x88>
		return 376;
   1c12e:	2b04      	cmp	r3, #4
   1c130:	bf14      	ite	ne
   1c132:	2328      	movne	r3, #40	; 0x28
   1c134:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1c138:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1c13c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1c140:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1c144:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1c146:	f000 fd55 	bl	1cbf4 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1c14a:	1a28      	subs	r0, r5, r0
   1c14c:	f000 ff78 	bl	1d040 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1c150:	4621      	mov	r1, r4
   1c152:	480a      	ldr	r0, [pc, #40]	; (1c17c <lll_conn_isr_tx+0xa8>)
}
   1c154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1c158:	f000 bc66 	b.w	1ca28 <radio_isr_set>
	switch (phy) {
   1c15c:	2318      	movs	r3, #24
   1c15e:	e7eb      	b.n	1c138 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1c160:	4a07      	ldr	r2, [pc, #28]	; (1c180 <lll_conn_isr_tx+0xac>)
   1c162:	4908      	ldr	r1, [pc, #32]	; (1c184 <lll_conn_isr_tx+0xb0>)
   1c164:	4808      	ldr	r0, [pc, #32]	; (1c188 <lll_conn_isr_tx+0xb4>)
   1c166:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   1c16a:	f006 f8b5 	bl	222d8 <printk>
   1c16e:	4040      	eors	r0, r0
   1c170:	f380 8811 	msr	BASEPRI, r0
   1c174:	f04f 0003 	mov.w	r0, #3
   1c178:	df02      	svc	2
   1c17a:	e7c5      	b.n	1c108 <lll_conn_isr_tx+0x34>
   1c17c:	0001c2cd 	.word	0x0001c2cd
   1c180:	00029940 	.word	0x00029940
   1c184:	00029904 	.word	0x00029904
   1c188:	00028de0 	.word	0x00028de0

0001c18c <lll_conn_tx_pkt_set>:
{
   1c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c18e:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1c190:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1c194:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1c198:	f001 0507 	and.w	r5, r1, #7
{
   1c19c:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   1c19e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1c1a2:	4628      	mov	r0, r5
   1c1a4:	f000 fca6 	bl	1caf4 <radio_phy_set>
	} else if (lll->enc_tx) {
   1c1a8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c1ac:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   1c1ae:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   1c1b2:	d50f      	bpl.n	1c1d4 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1c1b4:	1d39      	adds	r1, r7, #4
   1c1b6:	f042 0201 	orr.w	r2, r2, #1
   1c1ba:	b2c9      	uxtb	r1, r1
   1c1bc:	2008      	movs	r0, #8
   1c1be:	f000 fcdf 	bl	1cb80 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1c1c2:	4631      	mov	r1, r6
   1c1c4:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1c1c8:	f000 ffc6 	bl	1d158 <radio_ccm_tx_pkt_set>
}
   1c1cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1c1d0:	f000 bd0a 	b.w	1cbe8 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1c1d4:	b2f9      	uxtb	r1, r7
   1c1d6:	2008      	movs	r0, #8
   1c1d8:	f042 0201 	orr.w	r2, r2, #1
   1c1dc:	f000 fcd0 	bl	1cb80 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1c1e0:	4630      	mov	r0, r6
}
   1c1e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1c1e6:	f000 bcff 	b.w	1cbe8 <radio_pkt_tx_set>
   1c1ea:	bf00      	nop

0001c1ec <lll_conn_pdu_tx_prep>:
{
   1c1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c1f0:	4604      	mov	r4, r0
   1c1f2:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c1f4:	aa01      	add	r2, sp, #4
   1c1f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   1c1f8:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c1fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1c1fc:	f7f4 fbba 	bl	10974 <memq_peek>
	if (lll->empty || !link) {
   1c200:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c204:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c206:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1c208:	d432      	bmi.n	1c270 <lll_conn_pdu_tx_prep+0x84>
   1c20a:	2800      	cmp	r0, #0
   1c20c:	d04e      	beq.n	1c2ac <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c20e:	9b01      	ldr	r3, [sp, #4]
   1c210:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
   1c214:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1c218:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c21c:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1c220:	b913      	cbnz	r3, 1c228 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1c222:	786b      	ldrb	r3, [r5, #1]
   1c224:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1c228:	b137      	cbz	r7, 1c238 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c22a:	f818 2007 	ldrb.w	r2, [r8, r7]
   1c22e:	2101      	movs	r1, #1
   1c230:	f361 0201 	bfi	r2, r1, #0, #2
   1c234:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1c238:	1bdb      	subs	r3, r3, r7
   1c23a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1c23c:	4620      	mov	r0, r4
   1c23e:	f7fd fac1 	bl	197c4 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1c242:	786b      	ldrb	r3, [r5, #1]
   1c244:	4283      	cmp	r3, r0
   1c246:	d924      	bls.n	1c292 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1c248:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1c24a:	f818 3007 	ldrb.w	r3, [r8, r7]
   1c24e:	f043 0310 	orr.w	r3, r3, #16
   1c252:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1c256:	f818 3007 	ldrb.w	r3, [r8, r7]
   1c25a:	f36f 1347 	bfc	r3, #5, #3
   1c25e:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1c262:	2300      	movs	r3, #0
   1c264:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1c266:	f8c9 5000 	str.w	r5, [r9]
}
   1c26a:	b003      	add	sp, #12
   1c26c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1c270:	f043 0304 	orr.w	r3, r3, #4
   1c274:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1c278:	f000 fd20 	bl	1ccbc <radio_pkt_empty_get>
   1c27c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1c27e:	b1e6      	cbz	r6, 1c2ba <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1c280:	7803      	ldrb	r3, [r0, #0]
   1c282:	f043 0310 	orr.w	r3, r3, #16
   1c286:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1c288:	f8c9 5000 	str.w	r5, [r9]
}
   1c28c:	b003      	add	sp, #12
   1c28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1c292:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c294:	6832      	ldr	r2, [r6, #0]
   1c296:	429a      	cmp	r2, r3
			p->md = 1U;
   1c298:	f818 3007 	ldrb.w	r3, [r8, r7]
   1c29c:	bf14      	ite	ne
   1c29e:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1c2a2:	f36f 1304 	bfceq	r3, #4, #1
   1c2a6:	f808 3007 	strb.w	r3, [r8, r7]
   1c2aa:	e7d4      	b.n	1c256 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1c2ac:	f043 0304 	orr.w	r3, r3, #4
   1c2b0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1c2b4:	f000 fd02 	bl	1ccbc <radio_pkt_empty_get>
   1c2b8:	4605      	mov	r5, r0
			p->md = 0U;
   1c2ba:	782b      	ldrb	r3, [r5, #0]
   1c2bc:	f36f 1304 	bfc	r3, #4, #1
   1c2c0:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1c2c2:	f8c9 5000 	str.w	r5, [r9]
}
   1c2c6:	b003      	add	sp, #12
   1c2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c2cc <lll_conn_isr_rx>:
{
   1c2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2ce:	b083      	sub	sp, #12
   1c2d0:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1c2d2:	f000 fcc9 	bl	1cc68 <radio_is_done>
	if (trx_done) {
   1c2d6:	b2c0      	uxtb	r0, r0
   1c2d8:	b950      	cbnz	r0, 1c2f0 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1c2da:	f7fe fff9 	bl	1b2d0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1c2de:	48b1      	ldr	r0, [pc, #708]	; (1c5a4 <lll_conn_isr_rx+0x2d8>)
   1c2e0:	4621      	mov	r1, r4
   1c2e2:	f000 fba1 	bl	1ca28 <radio_isr_set>
}
   1c2e6:	b003      	add	sp, #12
   1c2e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   1c2ec:	f000 bc92 	b.w	1cc14 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1c2f0:	f000 fcda 	bl	1cca8 <radio_crc_is_valid>
   1c2f4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1c2f6:	f000 fda7 	bl	1ce48 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1c2fa:	f7fe ffe9 	bl	1b2d0 <lll_isr_rx_status_reset>
	trx_cnt++;
   1c2fe:	4aaa      	ldr	r2, [pc, #680]	; (1c5a8 <lll_conn_isr_rx+0x2dc>)
   1c300:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c302:	2001      	movs	r0, #1
	trx_cnt++;
   1c304:	4403      	add	r3, r0
   1c306:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c308:	f7f8 fa4c 	bl	147a4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c30c:	4606      	mov	r6, r0
   1c30e:	2800      	cmp	r0, #0
   1c310:	f000 80bd 	beq.w	1c48e <lll_conn_isr_rx+0x1c2>
	if (crc_ok) {
   1c314:	2d00      	cmp	r5, #0
   1c316:	d155      	bne.n	1c3c4 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1c318:	4ba4      	ldr	r3, [pc, #656]	; (1c5ac <lll_conn_isr_rx+0x2e0>)
   1c31a:	781f      	ldrb	r7, [r3, #0]
   1c31c:	2f00      	cmp	r7, #0
   1c31e:	f040 80a5 	bne.w	1c46c <lll_conn_isr_rx+0x1a0>
		crc_expire--;
   1c322:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c324:	a901      	add	r1, sp, #4
   1c326:	4620      	mov	r0, r4
		crc_expire--;
   1c328:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c32a:	f7ff ff5f 	bl	1c1ec <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c32e:	2096      	movs	r0, #150	; 0x96
   1c330:	f000 fde6 	bl	1cf00 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1c334:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c338:	f000 0007 	and.w	r0, r0, #7
   1c33c:	f000 fcc6 	bl	1cccc <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1c340:	489b      	ldr	r0, [pc, #620]	; (1c5b0 <lll_conn_isr_rx+0x2e4>)
   1c342:	4621      	mov	r1, r4
   1c344:	f000 fb70 	bl	1ca28 <radio_isr_set>
		radio_tmr_end_capture();
   1c348:	f000 feb4 	bl	1d0b4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1c34c:	9901      	ldr	r1, [sp, #4]
   1c34e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	pdu_data_tx->nesn = lll->nesn;
   1c352:	780b      	ldrb	r3, [r1, #0]
   1c354:	f023 000c 	bic.w	r0, r3, #12
   1c358:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c35c:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1c35e:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1c362:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1c366:	4303      	orrs	r3, r0
   1c368:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c36a:	4620      	mov	r0, r4
   1c36c:	f7ff ff0e 	bl	1c18c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c370:	f000 fc70 	bl	1cc54 <radio_is_ready>
   1c374:	2800      	cmp	r0, #0
   1c376:	f040 80b9 	bne.w	1c4ec <lll_conn_isr_rx+0x220>
	if (!radio_tmr_aa_restore()) {
   1c37a:	f000 fe8f 	bl	1d09c <radio_tmr_aa_restore>
   1c37e:	b170      	cbz	r0, 1c39e <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   1c380:	b19d      	cbz	r5, 1c3aa <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c382:	8a20      	ldrh	r0, [r4, #16]
   1c384:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c388:	4298      	cmp	r0, r3
   1c38a:	f000 80bd 	beq.w	1c508 <lll_conn_isr_rx+0x23c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c38e:	4629      	mov	r1, r5
   1c390:	f7fd f8ea 	bl	19568 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1c394:	b95f      	cbnz	r7, 1c3ae <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1c396:	f7f8 fa49 	bl	1482c <ull_rx_sched>
}
   1c39a:	b003      	add	sp, #12
   1c39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1c39e:	f000 fe71 	bl	1d084 <radio_tmr_aa_get>
   1c3a2:	f000 fe75 	bl	1d090 <radio_tmr_aa_save>
	if (tx_release) {
   1c3a6:	2d00      	cmp	r5, #0
   1c3a8:	d1eb      	bne.n	1c382 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1c3aa:	2f00      	cmp	r7, #0
   1c3ac:	d0f5      	beq.n	1c39a <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   1c3ae:	f7f8 fa17 	bl	147e0 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c3b2:	2303      	movs	r3, #3
   1c3b4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1c3b6:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c3b8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1c3ba:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c3bc:	4631      	mov	r1, r6
   1c3be:	f7f8 fa25 	bl	1480c <ull_rx_put>
	if (is_ull_rx) {
   1c3c2:	e7e8      	b.n	1c396 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   1c3c4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c3c8:	7f32      	ldrb	r2, [r6, #28]
   1c3ca:	f003 0101 	and.w	r1, r3, #1
   1c3ce:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1c3d2:	4288      	cmp	r0, r1
   1c3d4:	d06b      	beq.n	1c4ae <lll_conn_isr_rx+0x1e2>
		if (lll->role) {
   1c3d6:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   1c3da:	f081 0101 	eor.w	r1, r1, #1
   1c3de:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1c3e2:	2a00      	cmp	r2, #0
		lll->sn++;
   1c3e4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1c3e8:	da05      	bge.n	1c3f6 <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1c3ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c3ee:	f043 0301 	orr.w	r3, r3, #1
   1c3f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1c3f6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c3fa:	075a      	lsls	r2, r3, #29
   1c3fc:	f100 8093 	bmi.w	1c526 <lll_conn_isr_rx+0x25a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1c400:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1c404:	aa01      	add	r2, sp, #4
   1c406:	f7f4 fab5 	bl	10974 <memq_peek>
		if (link) {
   1c40a:	4605      	mov	r5, r0
   1c40c:	2800      	cmp	r0, #0
   1c40e:	f000 8097 	beq.w	1c540 <lll_conn_isr_rx+0x274>
					       lll->packet_tx_head_offset);
   1c412:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   1c416:	9b01      	ldr	r3, [sp, #4]
   1c418:	4413      	add	r3, r2
   1c41a:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1c41c:	b171      	cbz	r1, 1c43c <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   1c41e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c422:	06df      	lsls	r7, r3, #27
   1c424:	d50a      	bpl.n	1c43c <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   1c426:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1c42a:	3301      	adds	r3, #1
   1c42c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   1c430:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1c434:	f143 0300 	adc.w	r3, r3, #0
   1c438:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if (offset < lll->packet_tx_head_len) {
   1c43c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c440:	440a      	add	r2, r1
   1c442:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1c444:	429a      	cmp	r2, r3
   1c446:	d379      	bcc.n	1c53c <lll_conn_isr_rx+0x270>
			} else if (offset == lll->packet_tx_head_len) {
   1c448:	d17a      	bne.n	1c540 <lll_conn_isr_rx+0x274>
				lll->packet_tx_head_len = 0;
   1c44a:	2200      	movs	r2, #0
   1c44c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1c450:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1c452:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c456:	f7f4 fa95 	bl	10984 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1c45a:	9b01      	ldr	r3, [sp, #4]
   1c45c:	681a      	ldr	r2, [r3, #0]
   1c45e:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1c460:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1c462:	9d01      	ldr	r5, [sp, #4]
   1c464:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c468:	7f32      	ldrb	r2, [r6, #28]
   1c46a:	e021      	b.n	1c4b0 <lll_conn_isr_rx+0x1e4>
		crc_expire--;
   1c46c:	3f01      	subs	r7, #1
   1c46e:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c470:	a901      	add	r1, sp, #4
   1c472:	4620      	mov	r0, r4
		crc_expire--;
   1c474:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c476:	f7ff feb9 	bl	1c1ec <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c47a:	2f00      	cmp	r7, #0
   1c47c:	f040 80dd 	bne.w	1c63a <lll_conn_isr_rx+0x36e>
		radio_isr_set(isr_done, param);
   1c480:	4848      	ldr	r0, [pc, #288]	; (1c5a4 <lll_conn_isr_rx+0x2d8>)
   1c482:	4621      	mov	r1, r4
   1c484:	f000 fad0 	bl	1ca28 <radio_isr_set>
			radio_switch_complete_and_disable();
   1c488:	f000 fcc8 	bl	1ce1c <radio_switch_complete_and_disable>
   1c48c:	e75e      	b.n	1c34c <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1c48e:	4a49      	ldr	r2, [pc, #292]	; (1c5b4 <lll_conn_isr_rx+0x2e8>)
   1c490:	4949      	ldr	r1, [pc, #292]	; (1c5b8 <lll_conn_isr_rx+0x2ec>)
   1c492:	484a      	ldr	r0, [pc, #296]	; (1c5bc <lll_conn_isr_rx+0x2f0>)
   1c494:	23d1      	movs	r3, #209	; 0xd1
   1c496:	f005 ff1f 	bl	222d8 <printk>
   1c49a:	4040      	eors	r0, r0
   1c49c:	f380 8811 	msr	BASEPRI, r0
   1c4a0:	f04f 0003 	mov.w	r0, #3
   1c4a4:	df02      	svc	2
	if (crc_ok) {
   1c4a6:	2d00      	cmp	r5, #0
   1c4a8:	f43f af36 	beq.w	1c318 <lll_conn_isr_rx+0x4c>
   1c4ac:	e78a      	b.n	1c3c4 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1c4ae:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c4b0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c4b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1c4b8:	429a      	cmp	r2, r3
   1c4ba:	d046      	beq.n	1c54a <lll_conn_isr_rx+0x27e>
	is_rx_enqueue = 0U;
   1c4bc:	2700      	movs	r7, #0
		crc_expire = 0U;
   1c4be:	4a3b      	ldr	r2, [pc, #236]	; (1c5ac <lll_conn_isr_rx+0x2e0>)
		crc_valid = 1U;
   1c4c0:	4b3f      	ldr	r3, [pc, #252]	; (1c5c0 <lll_conn_isr_rx+0x2f4>)
		crc_expire = 0U;
   1c4c2:	2100      	movs	r1, #0
   1c4c4:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c4c6:	4620      	mov	r0, r4
		crc_valid = 1U;
   1c4c8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c4ca:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1c4cc:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c4ce:	f7ff fe8d 	bl	1c1ec <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c4d2:	7f33      	ldrb	r3, [r6, #28]
   1c4d4:	06d9      	lsls	r1, r3, #27
   1c4d6:	f53f af2a 	bmi.w	1c32e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1c4da:	9b01      	ldr	r3, [sp, #4]
   1c4dc:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c4de:	06d2      	lsls	r2, r2, #27
   1c4e0:	f53f af25 	bmi.w	1c32e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1c4e4:	785b      	ldrb	r3, [r3, #1]
   1c4e6:	2b00      	cmp	r3, #0
   1c4e8:	d0ca      	beq.n	1c480 <lll_conn_isr_rx+0x1b4>
   1c4ea:	e720      	b.n	1c32e <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1c4ec:	4a31      	ldr	r2, [pc, #196]	; (1c5b4 <lll_conn_isr_rx+0x2e8>)
   1c4ee:	4935      	ldr	r1, [pc, #212]	; (1c5c4 <lll_conn_isr_rx+0x2f8>)
   1c4f0:	4832      	ldr	r0, [pc, #200]	; (1c5bc <lll_conn_isr_rx+0x2f0>)
   1c4f2:	f240 133d 	movw	r3, #317	; 0x13d
   1c4f6:	f005 feef 	bl	222d8 <printk>
   1c4fa:	4040      	eors	r0, r0
   1c4fc:	f380 8811 	msr	BASEPRI, r0
   1c500:	f04f 0003 	mov.w	r0, #3
   1c504:	df02      	svc	2
   1c506:	e738      	b.n	1c37a <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c508:	4a2a      	ldr	r2, [pc, #168]	; (1c5b4 <lll_conn_isr_rx+0x2e8>)
   1c50a:	492f      	ldr	r1, [pc, #188]	; (1c5c8 <lll_conn_isr_rx+0x2fc>)
   1c50c:	482b      	ldr	r0, [pc, #172]	; (1c5bc <lll_conn_isr_rx+0x2f0>)
   1c50e:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1c512:	f005 fee1 	bl	222d8 <printk>
   1c516:	4040      	eors	r0, r0
   1c518:	f380 8811 	msr	BASEPRI, r0
   1c51c:	f04f 0003 	mov.w	r0, #3
   1c520:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c522:	8a20      	ldrh	r0, [r4, #16]
   1c524:	e733      	b.n	1c38e <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   1c526:	f36f 0382 	bfc	r3, #2, #1
   1c52a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1c52e:	f000 fbc5 	bl	1ccbc <radio_pkt_empty_get>
	tx_release = NULL;
   1c532:	2500      	movs	r5, #0
   1c534:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c538:	7f32      	ldrb	r2, [r6, #28]
   1c53a:	e7b9      	b.n	1c4b0 <lll_conn_isr_rx+0x1e4>
				lll->packet_tx_head_offset = offset;
   1c53c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1c540:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c544:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1c546:	2500      	movs	r5, #0
   1c548:	e7b2      	b.n	1c4b0 <lll_conn_isr_rx+0x1e4>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1c54a:	2003      	movs	r0, #3
   1c54c:	f7f8 f92a 	bl	147a4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c550:	2800      	cmp	r0, #0
   1c552:	d0b3      	beq.n	1c4bc <lll_conn_isr_rx+0x1f0>
		lll->nesn++;
   1c554:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c558:	f083 0302 	eor.w	r3, r3, #2
   1c55c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1c560:	7f73      	ldrb	r3, [r6, #29]
   1c562:	2b00      	cmp	r3, #0
   1c564:	d0aa      	beq.n	1c4bc <lll_conn_isr_rx+0x1f0>
			if (lll->enc_rx) {
   1c566:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c56a:	0718      	lsls	r0, r3, #28
   1c56c:	d401      	bmi.n	1c572 <lll_conn_isr_rx+0x2a6>
			*is_rx_enqueue = 1U;
   1c56e:	2701      	movs	r7, #1
   1c570:	e7a5      	b.n	1c4be <lll_conn_isr_rx+0x1f2>
				done = radio_ccm_is_done();
   1c572:	f000 fe19 	bl	1d1a8 <radio_ccm_is_done>
				LL_ASSERT(done);
   1c576:	2800      	cmp	r0, #0
   1c578:	d051      	beq.n	1c61e <lll_conn_isr_rx+0x352>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1c57a:	f000 fe37 	bl	1d1ec <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1c57e:	2800      	cmp	r0, #0
   1c580:	d13d      	bne.n	1c5fe <lll_conn_isr_rx+0x332>
				    lll->ccm_rx.counter == 0 &&
   1c582:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1c586:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1c58a:	4313      	orrs	r3, r2
   1c58c:	d104      	bne.n	1c598 <lll_conn_isr_rx+0x2cc>
				    (pdu_data_rx->ll_id ==
   1c58e:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1c590:	f003 0303 	and.w	r3, r3, #3
   1c594:	2b03      	cmp	r3, #3
   1c596:	d01b      	beq.n	1c5d0 <lll_conn_isr_rx+0x304>
					mic_state = LLL_CONN_MIC_FAIL;
   1c598:	4b0c      	ldr	r3, [pc, #48]	; (1c5cc <lll_conn_isr_rx+0x300>)
   1c59a:	2202      	movs	r2, #2
   1c59c:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1c59e:	2700      	movs	r7, #0
   1c5a0:	e6eb      	b.n	1c37a <lll_conn_isr_rx+0xae>
   1c5a2:	bf00      	nop
   1c5a4:	0001bef1 	.word	0x0001bef1
   1c5a8:	2000f58e 	.word	0x2000f58e
   1c5ac:	2000fb30 	.word	0x2000fb30
   1c5b0:	0001c0d5 	.word	0x0001c0d5
   1c5b4:	00029940 	.word	0x00029940
   1c5b8:	0002998c 	.word	0x0002998c
   1c5bc:	00028de0 	.word	0x00028de0
   1c5c0:	2000fb31 	.word	0x2000fb31
   1c5c4:	00029904 	.word	0x00029904
   1c5c8:	0002999c 	.word	0x0002999c
   1c5cc:	2000fb32 	.word	0x2000fb32
						radio_pkt_scratch_get();
   1c5d0:	f000 fb78 	bl	1ccc4 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1c5d4:	7843      	ldrb	r3, [r0, #1]
   1c5d6:	2b1b      	cmp	r3, #27
						radio_pkt_scratch_get();
   1c5d8:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1c5da:	d8dd      	bhi.n	1c598 <lll_conn_isr_rx+0x2cc>
						memcpy(pdu_data_rx,
   1c5dc:	3303      	adds	r3, #3
   1c5de:	b2da      	uxtb	r2, r3
   1c5e0:	f106 001c 	add.w	r0, r6, #28
   1c5e4:	f008 fb34 	bl	24c50 <memcpy>
						lll->ccm_rx.counter--;
   1c5e8:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1c5ec:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1c5f0:	3b01      	subs	r3, #1
   1c5f2:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1c5f6:	f142 33ff 	adc.w	r3, r2, #4294967295
   1c5fa:	f8c4 3077 	str.w	r3, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1c5fe:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1c602:	4a0f      	ldr	r2, [pc, #60]	; (1c640 <lll_conn_isr_rx+0x374>)
				lll->ccm_rx.counter++;
   1c604:	3301      	adds	r3, #1
   1c606:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1c60a:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
						lll->ccm_rx.counter--;
   1c60e:	f104 0173 	add.w	r1, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1c612:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   1c616:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1c618:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1c61a:	7017      	strb	r7, [r2, #0]
		if (err) {
   1c61c:	e74f      	b.n	1c4be <lll_conn_isr_rx+0x1f2>
				LL_ASSERT(done);
   1c61e:	4a09      	ldr	r2, [pc, #36]	; (1c644 <lll_conn_isr_rx+0x378>)
   1c620:	4909      	ldr	r1, [pc, #36]	; (1c648 <lll_conn_isr_rx+0x37c>)
   1c622:	480a      	ldr	r0, [pc, #40]	; (1c64c <lll_conn_isr_rx+0x380>)
   1c624:	f44f 7344 	mov.w	r3, #784	; 0x310
   1c628:	f005 fe56 	bl	222d8 <printk>
   1c62c:	4040      	eors	r0, r0
   1c62e:	f380 8811 	msr	BASEPRI, r0
   1c632:	f04f 0003 	mov.w	r0, #3
   1c636:	df02      	svc	2
   1c638:	e79f      	b.n	1c57a <lll_conn_isr_rx+0x2ae>
	is_rx_enqueue = 0U;
   1c63a:	462f      	mov	r7, r5
   1c63c:	e677      	b.n	1c32e <lll_conn_isr_rx+0x62>
   1c63e:	bf00      	nop
   1c640:	2000fb32 	.word	0x2000fb32
   1c644:	00029940 	.word	0x00029940
   1c648:	00029994 	.word	0x00029994
   1c64c:	00028de0 	.word	0x00028de0

0001c650 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1c654:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1c656:	8a22      	ldrh	r2, [r4, #16]
   1c658:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c65c:	429a      	cmp	r2, r3
{
   1c65e:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1c660:	f000 80c3 	beq.w	1c7ea <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1c664:	4605      	mov	r5, r0
   1c666:	f7ff fcab 	bl	1bfc0 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1c66a:	8ae3      	ldrh	r3, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1c66c:	8b60      	ldrh	r0, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1c66e:	1e5a      	subs	r2, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c670:	4403      	add	r3, r0
   1c672:	8363      	strh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   1c674:	2300      	movs	r3, #0
   1c676:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   1c678:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1c67c:	b292      	uxth	r2, r2
	if (lll->data_chan_sel) {
   1c67e:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1c680:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1c682:	f100 808f 	bmi.w	1c7a4 <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1c686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c68a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1c68e:	9300      	str	r3, [sp, #0]
   1c690:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1c694:	f104 031c 	add.w	r3, r4, #28
   1c698:	f7fd f9e0 	bl	19a5c <lll_chan_sel_1>
   1c69c:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1c69e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1c6a2:	441a      	add	r2, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1c6a4:	e9d4 130e 	ldrd	r1, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1c6a8:	2600      	movs	r6, #0
	lll->slave.window_size_event_us +=
   1c6aa:	440b      	add	r3, r1
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1c6ac:	e9c4 630e 	strd	r6, r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   1c6b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	lll->slave.window_widening_prepare_us = 0;
   1c6b2:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_widening_event_us =
   1c6b4:	4293      	cmp	r3, r2
   1c6b6:	bf28      	it	cs
   1c6b8:	4613      	movcs	r3, r2
   1c6ba:	6363      	str	r3, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1c6bc:	f000 f9f6 	bl	1caac <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c6c0:	4630      	mov	r0, r6
   1c6c2:	f000 fa27 	bl	1cb14 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1c6c6:	4620      	mov	r0, r4
   1c6c8:	f7ff fcba 	bl	1c040 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1c6cc:	f104 0008 	add.w	r0, r4, #8
   1c6d0:	f000 fa3e 	bl	1cb50 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c6d4:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c6d6:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c6d8:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c6da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1c6de:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c6e0:	f240 605b 	movw	r0, #1627	; 0x65b
   1c6e4:	4319      	orrs	r1, r3
   1c6e6:	f000 fad3 	bl	1cc90 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1c6ea:	4638      	mov	r0, r7
   1c6ec:	f7fe fda4 	bl	1b238 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1c6f0:	4621      	mov	r1, r4
   1c6f2:	484a      	ldr	r0, [pc, #296]	; (1c81c <prepare_cb+0x1cc>)
   1c6f4:	f000 f998 	bl	1ca28 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1c6f8:	2096      	movs	r0, #150	; 0x96
   1c6fa:	f000 fc01 	bl	1cf00 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1c6fe:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1c702:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c706:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1c70a:	4631      	mov	r1, r6
   1c70c:	f002 0207 	and.w	r2, r2, #7
   1c710:	f000 0007 	and.w	r0, r0, #7
   1c714:	f000 fb22 	bl	1cd5c <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1c718:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1c71c:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c71e:	4640      	mov	r0, r8
   1c720:	f7fe fd6e 	bl	1b200 <lll_evt_offset_get>
   1c724:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c726:	686a      	ldr	r2, [r5, #4]
   1c728:	f107 0109 	add.w	r1, r7, #9
   1c72c:	4630      	mov	r0, r6
   1c72e:	f000 fbf3 	bl	1cf18 <radio_tmr_start>
   1c732:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1c734:	f000 fc92 	bl	1d05c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1c738:	4630      	mov	r0, r6
   1c73a:	f000 fca9 	bl	1d090 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1c73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c740:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1c744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c746:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c74a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c74e:	2101      	movs	r1, #1
   1c750:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1c754:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c756:	f000 fa4f 	bl	1cbf8 <radio_rx_ready_delay_get>
   1c75a:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1c75c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c760:	f000 0007 	and.w	r0, r0, #7
   1c764:	2802      	cmp	r0, #2
   1c766:	d03e      	beq.n	1c7e6 <prepare_cb+0x196>
		return 40;
   1c768:	2804      	cmp	r0, #4
   1c76a:	bf0c      	ite	eq
   1c76c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1c770:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c772:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1c774:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c776:	f000 fa41 	bl	1cbfc <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1c77a:	4428      	add	r0, r5
   1c77c:	f000 fc60 	bl	1d040 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1c780:	8a21      	ldrh	r1, [r4, #16]
   1c782:	3103      	adds	r1, #3
   1c784:	463a      	mov	r2, r7
   1c786:	b2c9      	uxtb	r1, r1
   1c788:	4640      	mov	r0, r8
   1c78a:	f7fe fd43 	bl	1b214 <lll_preempt_calc>
   1c78e:	b1a0      	cbz	r0, 1c7ba <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1c790:	4823      	ldr	r0, [pc, #140]	; (1c820 <prepare_cb+0x1d0>)
   1c792:	4621      	mov	r1, r4
   1c794:	f000 f948 	bl	1ca28 <radio_isr_set>
		radio_disable();
   1c798:	f000 fa3c 	bl	1cc14 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1c79c:	2000      	movs	r0, #0
   1c79e:	b002      	add	sp, #8
   1c7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1c7a4:	4410      	add	r0, r2
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1c7a6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1c7a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c7ac:	f104 021c 	add.w	r2, r4, #28
   1c7b0:	b280      	uxth	r0, r0
   1c7b2:	f7fd f993 	bl	19adc <lll_chan_sel_2>
   1c7b6:	4607      	mov	r7, r0
   1c7b8:	e771      	b.n	1c69e <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1c7ba:	4620      	mov	r0, r4
   1c7bc:	f7fe fcc6 	bl	1b14c <lll_prepare_done>
		LL_ASSERT(!ret);
   1c7c0:	2800      	cmp	r0, #0
   1c7c2:	d0eb      	beq.n	1c79c <prepare_cb+0x14c>
   1c7c4:	4a17      	ldr	r2, [pc, #92]	; (1c824 <prepare_cb+0x1d4>)
   1c7c6:	4918      	ldr	r1, [pc, #96]	; (1c828 <prepare_cb+0x1d8>)
   1c7c8:	4818      	ldr	r0, [pc, #96]	; (1c82c <prepare_cb+0x1dc>)
   1c7ca:	f240 1313 	movw	r3, #275	; 0x113
   1c7ce:	f005 fd83 	bl	222d8 <printk>
   1c7d2:	4040      	eors	r0, r0
   1c7d4:	f380 8811 	msr	BASEPRI, r0
   1c7d8:	f04f 0003 	mov.w	r0, #3
   1c7dc:	df02      	svc	2
}
   1c7de:	2000      	movs	r0, #0
   1c7e0:	b002      	add	sp, #8
   1c7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1c7e6:	2318      	movs	r3, #24
   1c7e8:	e7c3      	b.n	1c772 <prepare_cb+0x122>
		err = lll_hfclock_off();
   1c7ea:	f7fe fe43 	bl	1b474 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1c7ee:	2800      	cmp	r0, #0
   1c7f0:	db06      	blt.n	1c800 <prepare_cb+0x1b0>
		lll_done(NULL);
   1c7f2:	2000      	movs	r0, #0
   1c7f4:	f7fe fcac 	bl	1b150 <lll_done>
}
   1c7f8:	2000      	movs	r0, #0
   1c7fa:	b002      	add	sp, #8
   1c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1c800:	4a08      	ldr	r2, [pc, #32]	; (1c824 <prepare_cb+0x1d4>)
   1c802:	490b      	ldr	r1, [pc, #44]	; (1c830 <prepare_cb+0x1e0>)
   1c804:	4809      	ldr	r0, [pc, #36]	; (1c82c <prepare_cb+0x1dc>)
   1c806:	237d      	movs	r3, #125	; 0x7d
   1c808:	f005 fd66 	bl	222d8 <printk>
   1c80c:	4040      	eors	r0, r0
   1c80e:	f380 8811 	msr	BASEPRI, r0
   1c812:	f04f 0003 	mov.w	r0, #3
   1c816:	df02      	svc	2
   1c818:	e7eb      	b.n	1c7f2 <prepare_cb+0x1a2>
   1c81a:	bf00      	nop
   1c81c:	0001c2cd 	.word	0x0001c2cd
   1c820:	0001b36d 	.word	0x0001b36d
   1c824:	000299c8 	.word	0x000299c8
   1c828:	0002907c 	.word	0x0002907c
   1c82c:	00028de0 	.word	0x00028de0
   1c830:	0002987c 	.word	0x0002987c

0001c834 <lll_slave_prepare>:
{
   1c834:	b510      	push	{r4, lr}
   1c836:	b082      	sub	sp, #8
   1c838:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c83a:	f7fe fe03 	bl	1b444 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c83e:	2800      	cmp	r0, #0
   1c840:	db2a      	blt.n	1c898 <lll_slave_prepare+0x64>
	lll = p->param;
   1c842:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1c844:	8923      	ldrh	r3, [r4, #8]
	lll->slave.window_widening_prepare_us +=
   1c846:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1c848:	f8b1 c016 	ldrh.w	ip, [r1, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1c84c:	6a88      	ldr	r0, [r1, #40]	; 0x28
	elapsed = p->lazy + 1;
   1c84e:	3301      	adds	r3, #1
   1c850:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1c852:	fb00 2003 	mla	r0, r0, r3, r2
	lll->latency_prepare += elapsed;
   1c856:	4463      	add	r3, ip
   1c858:	82cb      	strh	r3, [r1, #22]
	    lll->slave.window_widening_max_us) {
   1c85a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c85c:	4a15      	ldr	r2, [pc, #84]	; (1c8b4 <lll_slave_prepare+0x80>)
		lll->slave.window_widening_prepare_us =
   1c85e:	4283      	cmp	r3, r0
   1c860:	bf28      	it	cs
   1c862:	4603      	movcs	r3, r0
   1c864:	630b      	str	r3, [r1, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c866:	4814      	ldr	r0, [pc, #80]	; (1c8b8 <lll_slave_prepare+0x84>)
   1c868:	4914      	ldr	r1, [pc, #80]	; (1c8bc <lll_slave_prepare+0x88>)
   1c86a:	9400      	str	r4, [sp, #0]
   1c86c:	2300      	movs	r3, #0
   1c86e:	f7fe fbe1 	bl	1b034 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c872:	b108      	cbz	r0, 1c878 <lll_slave_prepare+0x44>
   1c874:	3044      	adds	r0, #68	; 0x44
   1c876:	d101      	bne.n	1c87c <lll_slave_prepare+0x48>
}
   1c878:	b002      	add	sp, #8
   1c87a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c87c:	4a10      	ldr	r2, [pc, #64]	; (1c8c0 <lll_slave_prepare+0x8c>)
   1c87e:	4911      	ldr	r1, [pc, #68]	; (1c8c4 <lll_slave_prepare+0x90>)
   1c880:	4811      	ldr	r0, [pc, #68]	; (1c8c8 <lll_slave_prepare+0x94>)
   1c882:	235f      	movs	r3, #95	; 0x5f
   1c884:	f005 fd28 	bl	222d8 <printk>
   1c888:	4040      	eors	r0, r0
   1c88a:	f380 8811 	msr	BASEPRI, r0
   1c88e:	f04f 0003 	mov.w	r0, #3
   1c892:	df02      	svc	2
}
   1c894:	b002      	add	sp, #8
   1c896:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1c898:	4a09      	ldr	r2, [pc, #36]	; (1c8c0 <lll_slave_prepare+0x8c>)
   1c89a:	490c      	ldr	r1, [pc, #48]	; (1c8cc <lll_slave_prepare+0x98>)
   1c89c:	480a      	ldr	r0, [pc, #40]	; (1c8c8 <lll_slave_prepare+0x94>)
   1c89e:	2348      	movs	r3, #72	; 0x48
   1c8a0:	f005 fd1a 	bl	222d8 <printk>
   1c8a4:	4040      	eors	r0, r0
   1c8a6:	f380 8811 	msr	BASEPRI, r0
   1c8aa:	f04f 0003 	mov.w	r0, #3
   1c8ae:	df02      	svc	2
   1c8b0:	e7c7      	b.n	1c842 <lll_slave_prepare+0xe>
   1c8b2:	bf00      	nop
   1c8b4:	0001c651 	.word	0x0001c651
   1c8b8:	0001b1f9 	.word	0x0001b1f9
   1c8bc:	0001bfe9 	.word	0x0001bfe9
   1c8c0:	000299c8 	.word	0x000299c8
   1c8c4:	0002991c 	.word	0x0002991c
   1c8c8:	00028de0 	.word	0x00028de0
   1c8cc:	0002987c 	.word	0x0002987c

0001c8d0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1c8d0:	4b05      	ldr	r3, [pc, #20]	; (1c8e8 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1c8d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c8d6:	2100      	movs	r1, #0
   1c8d8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c8dc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1c8e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1c8e4:	4770      	bx	lr
   1c8e6:	bf00      	nop
   1c8e8:	4000b000 	.word	0x4000b000

0001c8ec <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1c8ec:	4b05      	ldr	r3, [pc, #20]	; (1c904 <cntr_start+0x18>)
   1c8ee:	7818      	ldrb	r0, [r3, #0]
   1c8f0:	1c42      	adds	r2, r0, #1
   1c8f2:	701a      	strb	r2, [r3, #0]
   1c8f4:	b918      	cbnz	r0, 1c8fe <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c8f6:	4b04      	ldr	r3, [pc, #16]	; (1c908 <cntr_start+0x1c>)
   1c8f8:	2201      	movs	r2, #1
   1c8fa:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1c8fc:	4770      	bx	lr
		return 1;
   1c8fe:	2001      	movs	r0, #1
}
   1c900:	4770      	bx	lr
   1c902:	bf00      	nop
   1c904:	2000fb33 	.word	0x2000fb33
   1c908:	4000b000 	.word	0x4000b000

0001c90c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1c90c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1c90e:	4c0d      	ldr	r4, [pc, #52]	; (1c944 <cntr_stop+0x38>)
   1c910:	7820      	ldrb	r0, [r4, #0]
   1c912:	b148      	cbz	r0, 1c928 <cntr_stop+0x1c>

	if (--_refcount) {
   1c914:	3801      	subs	r0, #1
   1c916:	b2c0      	uxtb	r0, r0
   1c918:	7020      	strb	r0, [r4, #0]
   1c91a:	b918      	cbnz	r0, 1c924 <cntr_stop+0x18>
   1c91c:	4b0a      	ldr	r3, [pc, #40]	; (1c948 <cntr_stop+0x3c>)
   1c91e:	2201      	movs	r2, #1
   1c920:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1c922:	bd10      	pop	{r4, pc}
		return 1;
   1c924:	2001      	movs	r0, #1
}
   1c926:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1c928:	4a08      	ldr	r2, [pc, #32]	; (1c94c <cntr_stop+0x40>)
   1c92a:	4909      	ldr	r1, [pc, #36]	; (1c950 <cntr_stop+0x44>)
   1c92c:	4809      	ldr	r0, [pc, #36]	; (1c954 <cntr_stop+0x48>)
   1c92e:	232d      	movs	r3, #45	; 0x2d
   1c930:	f005 fcd2 	bl	222d8 <printk>
   1c934:	4040      	eors	r0, r0
   1c936:	f380 8811 	msr	BASEPRI, r0
   1c93a:	f04f 0003 	mov.w	r0, #3
   1c93e:	df02      	svc	2
	if (--_refcount) {
   1c940:	7820      	ldrb	r0, [r4, #0]
   1c942:	e7e7      	b.n	1c914 <cntr_stop+0x8>
   1c944:	2000fb33 	.word	0x2000fb33
   1c948:	4000b000 	.word	0x4000b000
   1c94c:	00029a28 	.word	0x00029a28
   1c950:	00029a74 	.word	0x00029a74
   1c954:	00028de0 	.word	0x00028de0

0001c958 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1c958:	4b01      	ldr	r3, [pc, #4]	; (1c960 <cntr_cnt_get+0x8>)
   1c95a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1c95e:	4770      	bx	lr
   1c960:	4000b000 	.word	0x4000b000

0001c964 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1c964:	4b02      	ldr	r3, [pc, #8]	; (1c970 <cntr_cmp_set+0xc>)
   1c966:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c96a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c96e:	4770      	bx	lr
   1c970:	4000b000 	.word	0x4000b000

0001c974 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c974:	4b12      	ldr	r3, [pc, #72]	; (1c9c0 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c976:	b430      	push	{r4, r5}
   1c978:	2101      	movs	r1, #1
   1c97a:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1c97c:	2000      	movs	r0, #0
   1c97e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c980:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c984:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c988:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1c98c:	6019      	str	r1, [r3, #0]
}
   1c98e:	e005      	b.n	1c99c <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c990:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c994:	b932      	cbnz	r2, 1c9a4 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c996:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c99a:	b11a      	cbz	r2, 1c9a4 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c99c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c9a0:	2a00      	cmp	r2, #0
   1c9a2:	d0f5      	beq.n	1c990 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c9a4:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c9a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c9aa:	2a00      	cmp	r2, #0
   1c9ac:	d1e7      	bne.n	1c97e <do_ecb+0xa>
   1c9ae:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1c9b2:	2d00      	cmp	r5, #0
   1c9b4:	d0e3      	beq.n	1c97e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1c9b6:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1c9b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c9bc:	4770      	bx	lr
   1c9be:	bf00      	nop
   1c9c0:	4000e000 	.word	0x4000e000

0001c9c4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c9c4:	b570      	push	{r4, r5, r6, lr}
   1c9c6:	b08c      	sub	sp, #48	; 0x30
   1c9c8:	460e      	mov	r6, r1
   1c9ca:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c9cc:	4601      	mov	r1, r0
   1c9ce:	2210      	movs	r2, #16
   1c9d0:	4668      	mov	r0, sp
{
   1c9d2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c9d4:	f7f3 ff9c 	bl	10910 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c9d8:	2210      	movs	r2, #16
   1c9da:	eb0d 0002 	add.w	r0, sp, r2
   1c9de:	4631      	mov	r1, r6
   1c9e0:	f7f3 ff96 	bl	10910 <mem_rcopy>

	do_ecb(&ecb);
   1c9e4:	4668      	mov	r0, sp
   1c9e6:	f7ff ffc5 	bl	1c974 <do_ecb>

	if (cipher_text_le) {
   1c9ea:	b125      	cbz	r5, 1c9f6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c9ec:	2210      	movs	r2, #16
   1c9ee:	a908      	add	r1, sp, #32
   1c9f0:	4628      	mov	r0, r5
   1c9f2:	f7f3 ff8d 	bl	10910 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c9f6:	b124      	cbz	r4, 1ca02 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1c9f8:	2210      	movs	r2, #16
   1c9fa:	a908      	add	r1, sp, #32
   1c9fc:	4620      	mov	r0, r4
   1c9fe:	f008 f927 	bl	24c50 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1ca02:	b00c      	add	sp, #48	; 0x30
   1ca04:	bd70      	pop	{r4, r5, r6, pc}
   1ca06:	bf00      	nop

0001ca08 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1ca08:	4b04      	ldr	r3, [pc, #16]	; (1ca1c <isr_radio+0x14>)
   1ca0a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1ca0e:	b123      	cbz	r3, 1ca1a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1ca10:	4a03      	ldr	r2, [pc, #12]	; (1ca20 <isr_radio+0x18>)
   1ca12:	4b04      	ldr	r3, [pc, #16]	; (1ca24 <isr_radio+0x1c>)
   1ca14:	6810      	ldr	r0, [r2, #0]
   1ca16:	681b      	ldr	r3, [r3, #0]
   1ca18:	4718      	bx	r3
}
   1ca1a:	4770      	bx	lr
   1ca1c:	40001000 	.word	0x40001000
   1ca20:	2000f2e8 	.word	0x2000f2e8
   1ca24:	2000f2e4 	.word	0x2000f2e4

0001ca28 <radio_isr_set>:
{
   1ca28:	b538      	push	{r3, r4, r5, lr}
   1ca2a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1ca2c:	2001      	movs	r0, #1
{
   1ca2e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1ca30:	f7ea fe58 	bl	76e4 <arch_irq_disable>
	isr_cb = cb;
   1ca34:	4b08      	ldr	r3, [pc, #32]	; (1ca58 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1ca36:	4a09      	ldr	r2, [pc, #36]	; (1ca5c <radio_isr_set+0x34>)
	isr_cb = cb;
   1ca38:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ca3a:	4909      	ldr	r1, [pc, #36]	; (1ca60 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ca3c:	4b09      	ldr	r3, [pc, #36]	; (1ca64 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1ca3e:	6015      	str	r5, [r2, #0]
   1ca40:	2010      	movs	r0, #16
   1ca42:	2202      	movs	r2, #2
   1ca44:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1ca48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1ca4c:	2001      	movs	r0, #1
}
   1ca4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1ca52:	f7ea be37 	b.w	76c4 <arch_irq_enable>
   1ca56:	bf00      	nop
   1ca58:	2000f2e4 	.word	0x2000f2e4
   1ca5c:	2000f2e8 	.word	0x2000f2e8
   1ca60:	40001000 	.word	0x40001000
   1ca64:	e000e100 	.word	0xe000e100

0001ca68 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1ca68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ca6c:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1ca70:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1ca72:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1ca76:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1ca7a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1ca7e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1ca82:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1ca86:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1ca8a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1ca8e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1ca92:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1ca96:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1ca9a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1ca9e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1caa2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1caa6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1caaa:	4770      	bx	lr

0001caac <radio_reset>:
{
   1caac:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1caae:	2001      	movs	r0, #1
   1cab0:	f7ea fe18 	bl	76e4 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1cab4:	4a0d      	ldr	r2, [pc, #52]	; (1caec <radio_reset+0x40>)
   1cab6:	2100      	movs	r1, #0
   1cab8:	2301      	movs	r3, #1
   1caba:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1cabe:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1cac2:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1cac6:	490a      	ldr	r1, [pc, #40]	; (1caf0 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1cac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1cacc:	f023 0301 	bic.w	r3, r3, #1
   1cad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1cad4:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1cad8:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1cadc:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1cae0:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1cae4:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1cae8:	bd10      	pop	{r4, pc}
   1caea:	bf00      	nop
   1caec:	40001000 	.word	0x40001000
   1caf0:	4001f000 	.word	0x4001f000

0001caf4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1caf4:	4b06      	ldr	r3, [pc, #24]	; (1cb10 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1caf6:	2802      	cmp	r0, #2
   1caf8:	bf14      	ite	ne
   1cafa:	2203      	movne	r2, #3
   1cafc:	2204      	moveq	r2, #4
   1cafe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1cb02:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1cb06:	f042 0201 	orr.w	r2, r2, #1
   1cb0a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1cb0e:	4770      	bx	lr
   1cb10:	40001000 	.word	0x40001000

0001cb14 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1cb14:	4b01      	ldr	r3, [pc, #4]	; (1cb1c <radio_tx_power_set+0x8>)
   1cb16:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1cb1a:	4770      	bx	lr
   1cb1c:	40001000 	.word	0x40001000

0001cb20 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1cb20:	4b01      	ldr	r3, [pc, #4]	; (1cb28 <radio_freq_chan_set+0x8>)
   1cb22:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1cb26:	4770      	bx	lr
   1cb28:	40001000 	.word	0x40001000

0001cb2c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1cb2c:	4b07      	ldr	r3, [pc, #28]	; (1cb4c <radio_whiten_iv_set+0x20>)
   1cb2e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1cb32:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1cb36:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1cb3a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1cb3e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1cb42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1cb46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1cb4a:	4770      	bx	lr
   1cb4c:	40001000 	.word	0x40001000

0001cb50 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1cb50:	4a0a      	ldr	r2, [pc, #40]	; (1cb7c <radio_aa_set+0x2c>)
   1cb52:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1cb54:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1cb56:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1cb5a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1cb5e:	78c3      	ldrb	r3, [r0, #3]
   1cb60:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1cb64:	7843      	ldrb	r3, [r0, #1]
   1cb66:	f890 c002 	ldrb.w	ip, [r0, #2]
   1cb6a:	7801      	ldrb	r1, [r0, #0]
   1cb6c:	041b      	lsls	r3, r3, #16
   1cb6e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1cb72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1cb76:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1cb7a:	4770      	bx	lr
   1cb7c:	40001000 	.word	0x40001000

0001cb80 <radio_pkt_configure>:
	switch (phy) {
   1cb80:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1cb84:	2b02      	cmp	r3, #2
   1cb86:	bf14      	ite	ne
   1cb88:	f04f 0c00 	movne.w	ip, #0
   1cb8c:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   1cb90:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cb92:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1cb96:	bf48      	it	mi
   1cb98:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cb9c:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1cb9e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1cba2:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cba6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1cbaa:	4a0a      	ldr	r2, [pc, #40]	; (1cbd4 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1cbac:	4303      	orrs	r3, r0
   1cbae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1cbb2:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1cbb6:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1cbba:	4b07      	ldr	r3, [pc, #28]	; (1cbd8 <radio_pkt_configure+0x58>)
   1cbbc:	4003      	ands	r3, r0
   1cbbe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1cbc2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1cbc6:	4319      	orrs	r1, r3
   1cbc8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1cbcc:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1cbd0:	4770      	bx	lr
   1cbd2:	bf00      	nop
   1cbd4:	40001000 	.word	0x40001000
   1cbd8:	fef80000 	.word	0xfef80000

0001cbdc <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1cbdc:	4b01      	ldr	r3, [pc, #4]	; (1cbe4 <radio_pkt_rx_set+0x8>)
   1cbde:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1cbe2:	4770      	bx	lr
   1cbe4:	40001000 	.word	0x40001000

0001cbe8 <radio_pkt_tx_set>:
   1cbe8:	4b01      	ldr	r3, [pc, #4]	; (1cbf0 <radio_pkt_tx_set+0x8>)
   1cbea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1cbee:	4770      	bx	lr
   1cbf0:	40001000 	.word	0x40001000

0001cbf4 <radio_tx_chain_delay_get>:
}
   1cbf4:	2001      	movs	r0, #1
   1cbf6:	4770      	bx	lr

0001cbf8 <radio_rx_ready_delay_get>:
}
   1cbf8:	2029      	movs	r0, #41	; 0x29
   1cbfa:	4770      	bx	lr

0001cbfc <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1cbfc:	2802      	cmp	r0, #2
}
   1cbfe:	bf14      	ite	ne
   1cc00:	200a      	movne	r0, #10
   1cc02:	2005      	moveq	r0, #5
   1cc04:	4770      	bx	lr
   1cc06:	bf00      	nop

0001cc08 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc08:	4b01      	ldr	r3, [pc, #4]	; (1cc10 <radio_tx_enable+0x8>)
   1cc0a:	2201      	movs	r2, #1
   1cc0c:	601a      	str	r2, [r3, #0]
}
   1cc0e:	4770      	bx	lr
   1cc10:	40001000 	.word	0x40001000

0001cc14 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1cc14:	4a07      	ldr	r2, [pc, #28]	; (1cc34 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1cc16:	4908      	ldr	r1, [pc, #32]	; (1cc38 <radio_disable+0x24>)
{
   1cc18:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1cc1a:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1cc1c:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1cc20:	2000      	movs	r0, #0
   1cc22:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1cc26:	6053      	str	r3, [r2, #4]
}
   1cc28:	bc10      	pop	{r4}
   1cc2a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1cc2c:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1cc30:	610b      	str	r3, [r1, #16]
}
   1cc32:	4770      	bx	lr
   1cc34:	4001f000 	.word	0x4001f000
   1cc38:	40001000 	.word	0x40001000

0001cc3c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1cc3c:	4b04      	ldr	r3, [pc, #16]	; (1cc50 <radio_status_reset+0x14>)
   1cc3e:	2200      	movs	r2, #0
   1cc40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1cc44:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1cc48:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1cc4c:	4770      	bx	lr
   1cc4e:	bf00      	nop
   1cc50:	40001000 	.word	0x40001000

0001cc54 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1cc54:	4b03      	ldr	r3, [pc, #12]	; (1cc64 <radio_is_ready+0x10>)
   1cc56:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1cc5a:	3800      	subs	r0, #0
   1cc5c:	bf18      	it	ne
   1cc5e:	2001      	movne	r0, #1
   1cc60:	4770      	bx	lr
   1cc62:	bf00      	nop
   1cc64:	40001000 	.word	0x40001000

0001cc68 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1cc68:	4b03      	ldr	r3, [pc, #12]	; (1cc78 <radio_is_done+0x10>)
   1cc6a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1cc6e:	3800      	subs	r0, #0
   1cc70:	bf18      	it	ne
   1cc72:	2001      	movne	r0, #1
   1cc74:	4770      	bx	lr
   1cc76:	bf00      	nop
   1cc78:	40001000 	.word	0x40001000

0001cc7c <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1cc7c:	4b03      	ldr	r3, [pc, #12]	; (1cc8c <radio_is_idle+0x10>)
   1cc7e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1cc82:	fab0 f080 	clz	r0, r0
   1cc86:	0940      	lsrs	r0, r0, #5
   1cc88:	4770      	bx	lr
   1cc8a:	bf00      	nop
   1cc8c:	40001000 	.word	0x40001000

0001cc90 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1cc90:	4b04      	ldr	r3, [pc, #16]	; (1cca4 <radio_crc_configure+0x14>)
   1cc92:	f240 1203 	movw	r2, #259	; 0x103
   1cc96:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1cc9a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1cc9e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1cca2:	4770      	bx	lr
   1cca4:	40001000 	.word	0x40001000

0001cca8 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1cca8:	4b03      	ldr	r3, [pc, #12]	; (1ccb8 <radio_crc_is_valid+0x10>)
   1ccaa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1ccae:	3800      	subs	r0, #0
   1ccb0:	bf18      	it	ne
   1ccb2:	2001      	movne	r0, #1
   1ccb4:	4770      	bx	lr
   1ccb6:	bf00      	nop
   1ccb8:	40001000 	.word	0x40001000

0001ccbc <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1ccbc:	4800      	ldr	r0, [pc, #0]	; (1ccc0 <radio_pkt_empty_get+0x4>)
   1ccbe:	4770      	bx	lr
   1ccc0:	2000f1dc 	.word	0x2000f1dc

0001ccc4 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1ccc4:	4800      	ldr	r0, [pc, #0]	; (1ccc8 <radio_pkt_scratch_get+0x4>)
   1ccc6:	4770      	bx	lr
   1ccc8:	2000f1e0 	.word	0x2000f1e0

0001cccc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cccc:	4b1d      	ldr	r3, [pc, #116]	; (1cd44 <radio_switch_complete_and_rx+0x78>)
{
   1ccce:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ccd0:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ccd2:	4d1d      	ldr	r5, [pc, #116]	; (1cd48 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ccd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ccd8:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ccda:	4e1c      	ldr	r6, [pc, #112]	; (1cd4c <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ccdc:	4c1c      	ldr	r4, [pc, #112]	; (1cd50 <radio_switch_complete_and_rx+0x84>)
   1ccde:	4f1d      	ldr	r7, [pc, #116]	; (1cd54 <radio_switch_complete_and_rx+0x88>)
   1cce0:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1cce4:	f102 030c 	add.w	r3, r2, #12
   1cce8:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ccea:	00d0      	lsls	r0, r2, #3
   1ccec:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ccee:	0091      	lsls	r1, r2, #2
   1ccf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ccf4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1ccf8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1ccfc:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cd00:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1cd04:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1cd08:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cd0c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cd10:	4811      	ldr	r0, [pc, #68]	; (1cd58 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cd12:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cd16:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		SW_SWITCH_TIMER->CC[cc]) {
   1cd1a:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
	if (delay <
   1cd1e:	2b28      	cmp	r3, #40	; 0x28
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1cd20:	bf8a      	itet	hi
   1cd22:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1cd26:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1cd28:	3b28      	subhi	r3, #40	; 0x28
   1cd2a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1cd2e:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1cd30:	4b06      	ldr	r3, [pc, #24]	; (1cd4c <radio_switch_complete_and_rx+0x80>)
   1cd32:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1cd36:	f002 0201 	and.w	r2, r2, #1
   1cd3a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1cd3e:	702a      	strb	r2, [r5, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cd40:	bcf0      	pop	{r4, r5, r6, r7}
   1cd42:	4770      	bx	lr
   1cd44:	40001000 	.word	0x40001000
   1cd48:	2000fb34 	.word	0x2000fb34
   1cd4c:	4001f000 	.word	0x4001f000
   1cd50:	40009140 	.word	0x40009140
   1cd54:	4000110c 	.word	0x4000110c
   1cd58:	40001004 	.word	0x40001004

0001cd5c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx, uint8_t phy_tx,
				  uint8_t flags_tx)
{
   1cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cd60:	4e28      	ldr	r6, [pc, #160]	; (1ce04 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cd62:	4c29      	ldr	r4, [pc, #164]	; (1ce08 <radio_switch_complete_and_tx+0xac>)
   1cd64:	4f29      	ldr	r7, [pc, #164]	; (1ce0c <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cd66:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1ce10 <radio_switch_complete_and_tx+0xb4>
   1cd6a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1ce14 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cd6e:	2303      	movs	r3, #3
   1cd70:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cd74:	7821      	ldrb	r1, [r4, #0]
   1cd76:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1cd7a:	f101 030c 	add.w	r3, r1, #12
   1cd7e:	b2db      	uxtb	r3, r3
   1cd80:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cd82:	00cd      	lsls	r5, r1, #3
   1cd84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cd88:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1cd8c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cd90:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cd94:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cd98:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cd9c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cda0:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1cda4:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cda8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1cdac:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1cdb0:	2a02      	cmp	r2, #2
   1cdb2:	bf18      	it	ne
   1cdb4:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1cdb6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1cdba:	f241 3288 	movw	r2, #5000	; 0x1388
   1cdbe:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1cdc2:	2802      	cmp	r0, #2
   1cdc4:	bf08      	it	eq
   1cdc6:	4613      	moveq	r3, r2
   1cdc8:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
		delay = HAL_RADIO_NS2US_ROUND(
   1cdcc:	4a12      	ldr	r2, [pc, #72]	; (1ce18 <radio_switch_complete_and_tx+0xbc>)
   1cdce:	442b      	add	r3, r5
   1cdd0:	fba2 2303 	umull	r2, r3, r2, r3
		SW_SWITCH_TIMER->CC[cc]) {
   1cdd4:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
	if (delay <
   1cdd8:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1cddc:	bf85      	ittet	hi
   1cdde:	0998      	lsrhi	r0, r3, #6
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1cde0:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1cde4:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1cde6:	1a1b      	subhi	r3, r3, r0
   1cde8:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1cdec:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1cdee:	4b08      	ldr	r3, [pc, #32]	; (1ce10 <radio_switch_complete_and_tx+0xb4>)
   1cdf0:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1cdf4:	f001 0101 	and.w	r1, r1, #1
   1cdf8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1cdfc:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ce02:	bf00      	nop
   1ce04:	40001000 	.word	0x40001000
   1ce08:	2000fb34 	.word	0x2000fb34
   1ce0c:	40009140 	.word	0x40009140
   1ce10:	4001f000 	.word	0x4001f000
   1ce14:	4000110c 	.word	0x4000110c
   1ce18:	10624dd3 	.word	0x10624dd3

0001ce1c <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1ce1c:	4904      	ldr	r1, [pc, #16]	; (1ce30 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1ce1e:	4b05      	ldr	r3, [pc, #20]	; (1ce34 <radio_switch_complete_and_disable+0x18>)
   1ce20:	2003      	movs	r0, #3
   1ce22:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1ce26:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1ce2a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ce2e:	4770      	bx	lr
   1ce30:	40001000 	.word	0x40001000
   1ce34:	4001f000 	.word	0x4001f000

0001ce38 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1ce38:	4b02      	ldr	r3, [pc, #8]	; (1ce44 <radio_rssi_status_reset+0xc>)
   1ce3a:	2200      	movs	r2, #0
   1ce3c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1ce40:	4770      	bx	lr
   1ce42:	bf00      	nop
   1ce44:	40001000 	.word	0x40001000

0001ce48 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1ce48:	4b03      	ldr	r3, [pc, #12]	; (1ce58 <radio_rssi_is_ready+0x10>)
   1ce4a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1ce4e:	3800      	subs	r0, #0
   1ce50:	bf18      	it	ne
   1ce52:	2001      	movne	r0, #1
   1ce54:	4770      	bx	lr
   1ce56:	bf00      	nop
   1ce58:	40001000 	.word	0x40001000

0001ce5c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1ce5c:	b410      	push	{r4}
   1ce5e:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1ce62:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1ce66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ce6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1ce6e:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1ce70:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1ce74:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1ce78:	8894      	ldrh	r4, [r2, #4]
   1ce7a:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1ce7e:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1ce82:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1ce86:	d1ec      	bne.n	1ce62 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ce88:	4b03      	ldr	r3, [pc, #12]	; (1ce98 <radio_filter_configure+0x3c>)
}
   1ce8a:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ce8c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1ce90:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1ce94:	4770      	bx	lr
   1ce96:	bf00      	nop
   1ce98:	40001000 	.word	0x40001000

0001ce9c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1ce9c:	4a03      	ldr	r2, [pc, #12]	; (1ceac <radio_filter_disable+0x10>)
   1ce9e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1cea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1cea6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1ceaa:	4770      	bx	lr
   1ceac:	40001000 	.word	0x40001000

0001ceb0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1ceb0:	4b02      	ldr	r3, [pc, #8]	; (1cebc <radio_filter_status_reset+0xc>)
   1ceb2:	2200      	movs	r2, #0
   1ceb4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1ceb8:	4770      	bx	lr
   1ceba:	bf00      	nop
   1cebc:	40001000 	.word	0x40001000

0001cec0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1cec0:	4b03      	ldr	r3, [pc, #12]	; (1ced0 <radio_filter_has_match+0x10>)
   1cec2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1cec6:	3800      	subs	r0, #0
   1cec8:	bf18      	it	ne
   1ceca:	2001      	movne	r0, #1
   1cecc:	4770      	bx	lr
   1cece:	bf00      	nop
   1ced0:	40001000 	.word	0x40001000

0001ced4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1ced4:	4b01      	ldr	r3, [pc, #4]	; (1cedc <radio_filter_match_get+0x8>)
   1ced6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1ceda:	4770      	bx	lr
   1cedc:	40001000 	.word	0x40001000

0001cee0 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1cee0:	4904      	ldr	r1, [pc, #16]	; (1cef4 <radio_tmr_status_reset+0x14>)
   1cee2:	4b05      	ldr	r3, [pc, #20]	; (1cef8 <radio_tmr_status_reset+0x18>)
   1cee4:	4a05      	ldr	r2, [pc, #20]	; (1cefc <radio_tmr_status_reset+0x1c>)
   1cee6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1ceea:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1ceee:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1cef2:	4770      	bx	lr
   1cef4:	4000b000 	.word	0x4000b000
   1cef8:	4001f000 	.word	0x4001f000
   1cefc:	0e7000c0 	.word	0x0e7000c0

0001cf00 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1cf00:	4b03      	ldr	r3, [pc, #12]	; (1cf10 <radio_tmr_tifs_set+0x10>)
   1cf02:	4a04      	ldr	r2, [pc, #16]	; (1cf14 <radio_tmr_tifs_set+0x14>)
   1cf04:	781b      	ldrb	r3, [r3, #0]
   1cf06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1cf0a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cf0e:	4770      	bx	lr
   1cf10:	2000fb34 	.word	0x2000fb34
   1cf14:	40009000 	.word	0x40009000

0001cf18 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1cf18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cf1c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1cf20:	4d31      	ldr	r5, [pc, #196]	; (1cfe8 <radio_tmr_start+0xd0>)
   1cf22:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1cf26:	42ab      	cmp	r3, r5
{
   1cf28:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cf2a:	d906      	bls.n	1cf3a <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1cf2c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1cf30:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1cf34:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1cf36:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf3a:	4b2c      	ldr	r3, [pc, #176]	; (1cfec <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1cf3c:	482c      	ldr	r0, [pc, #176]	; (1cff0 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1cf3e:	4d2d      	ldr	r5, [pc, #180]	; (1cff4 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cf40:	4e2d      	ldr	r6, [pc, #180]	; (1cff8 <radio_tmr_start+0xe0>)
   1cf42:	2701      	movs	r7, #1
   1cf44:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1cf46:	2700      	movs	r7, #0
   1cf48:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1cf4c:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1cf50:	2704      	movs	r7, #4
   1cf52:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1cf56:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1cf58:	2702      	movs	r7, #2
   1cf5a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1cf5e:	4a27      	ldr	r2, [pc, #156]	; (1cffc <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1cf60:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1cf64:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1cf68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1cf6c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1cf70:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cf72:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cf76:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1cf7a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1cf7e:	bb64      	cbnz	r4, 1cfda <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1cf80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1cf84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1cf88:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1cf8c:	4b1b      	ldr	r3, [pc, #108]	; (1cffc <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf8e:	4a1c      	ldr	r2, [pc, #112]	; (1d000 <radio_tmr_start+0xe8>)
   1cf90:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1cf94:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1cf96:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cf98:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1d004 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cf9c:	f8df e068 	ldr.w	lr, [pc, #104]	; 1d008 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cfa0:	f8df c068 	ldr.w	ip, [pc, #104]	; 1d00c <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cfa4:	4f1a      	ldr	r7, [pc, #104]	; (1d010 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cfa6:	4e1b      	ldr	r6, [pc, #108]	; (1d014 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cfa8:	4d1b      	ldr	r5, [pc, #108]	; (1d018 <radio_tmr_start+0x100>)
   1cfaa:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cfac:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1cfb0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cfb4:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1cfb8:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1cfbc:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cfbe:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cfc2:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cfc6:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cfca:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cfce:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cfd2:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1cfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1cfda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1cfde:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1cfe2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1cfe6:	e7d1      	b.n	1cf8c <radio_tmr_start+0x74>
   1cfe8:	7ff0bdbf 	.word	0x7ff0bdbf
   1cfec:	40008000 	.word	0x40008000
   1cff0:	431bde83 	.word	0x431bde83
   1cff4:	4000b000 	.word	0x4000b000
   1cff8:	4000b148 	.word	0x4000b148
   1cffc:	4001f000 	.word	0x4001f000
   1d000:	40009000 	.word	0x40009000
   1d004:	4000110c 	.word	0x4000110c
   1d008:	4000900c 	.word	0x4000900c
   1d00c:	40009140 	.word	0x40009140
   1d010:	4001f004 	.word	0x4001f004
   1d014:	40009144 	.word	0x40009144
   1d018:	4001f00c 	.word	0x4001f00c

0001d01c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1d01c:	4b01      	ldr	r3, [pc, #4]	; (1d024 <radio_tmr_start_get+0x8>)
   1d01e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1d022:	4770      	bx	lr
   1d024:	4000b000 	.word	0x4000b000

0001d028 <radio_tmr_stop>:
   1d028:	4903      	ldr	r1, [pc, #12]	; (1d038 <radio_tmr_stop+0x10>)
   1d02a:	4a04      	ldr	r2, [pc, #16]	; (1d03c <radio_tmr_stop+0x14>)
   1d02c:	2301      	movs	r3, #1
   1d02e:	604b      	str	r3, [r1, #4]
   1d030:	610b      	str	r3, [r1, #16]
   1d032:	6053      	str	r3, [r2, #4]
   1d034:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d036:	4770      	bx	lr
   1d038:	40008000 	.word	0x40008000
   1d03c:	40009000 	.word	0x40009000

0001d040 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1d040:	4904      	ldr	r1, [pc, #16]	; (1d054 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1d042:	4b05      	ldr	r3, [pc, #20]	; (1d058 <radio_tmr_hcto_configure+0x18>)
   1d044:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1d048:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1d04c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1d050:	4770      	bx	lr
   1d052:	bf00      	nop
   1d054:	40008000 	.word	0x40008000
   1d058:	4001f000 	.word	0x4001f000

0001d05c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d05c:	4b05      	ldr	r3, [pc, #20]	; (1d074 <radio_tmr_aa_capture+0x18>)
   1d05e:	4806      	ldr	r0, [pc, #24]	; (1d078 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d060:	4906      	ldr	r1, [pc, #24]	; (1d07c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1d062:	4a07      	ldr	r2, [pc, #28]	; (1d080 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d064:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d068:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1d06c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1d070:	4770      	bx	lr
   1d072:	bf00      	nop
   1d074:	4001f000 	.word	0x4001f000
   1d078:	40001100 	.word	0x40001100
   1d07c:	40008040 	.word	0x40008040
   1d080:	04000080 	.word	0x04000080

0001d084 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1d084:	4b01      	ldr	r3, [pc, #4]	; (1d08c <radio_tmr_aa_get+0x8>)
   1d086:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1d08a:	4770      	bx	lr
   1d08c:	40008000 	.word	0x40008000

0001d090 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1d090:	4b01      	ldr	r3, [pc, #4]	; (1d098 <radio_tmr_aa_save+0x8>)
   1d092:	6018      	str	r0, [r3, #0]
}
   1d094:	4770      	bx	lr
   1d096:	bf00      	nop
   1d098:	2000f2ec 	.word	0x2000f2ec

0001d09c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1d09c:	4b01      	ldr	r3, [pc, #4]	; (1d0a4 <radio_tmr_aa_restore+0x8>)
}
   1d09e:	6818      	ldr	r0, [r3, #0]
   1d0a0:	4770      	bx	lr
   1d0a2:	bf00      	nop
   1d0a4:	2000f2ec 	.word	0x2000f2ec

0001d0a8 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1d0a8:	4b01      	ldr	r3, [pc, #4]	; (1d0b0 <radio_tmr_ready_get+0x8>)
   1d0aa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1d0ae:	4770      	bx	lr
   1d0b0:	40008000 	.word	0x40008000

0001d0b4 <radio_tmr_end_capture>:
   1d0b4:	4b02      	ldr	r3, [pc, #8]	; (1d0c0 <radio_tmr_end_capture+0xc>)
   1d0b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1d0ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1d0be:	4770      	bx	lr
   1d0c0:	4001f000 	.word	0x4001f000

0001d0c4 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1d0c4:	4b01      	ldr	r3, [pc, #4]	; (1d0cc <radio_tmr_end_get+0x8>)
   1d0c6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1d0ca:	4770      	bx	lr
   1d0cc:	40008000 	.word	0x40008000

0001d0d0 <radio_tmr_tifs_base_get>:
   1d0d0:	4b01      	ldr	r3, [pc, #4]	; (1d0d8 <radio_tmr_tifs_base_get+0x8>)
   1d0d2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1d0d6:	4770      	bx	lr
   1d0d8:	40008000 	.word	0x40008000

0001d0dc <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d0dc:	4b17      	ldr	r3, [pc, #92]	; (1d13c <radio_ccm_rx_pkt_set+0x60>)
{
   1d0de:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d0e0:	2400      	movs	r4, #0
{
   1d0e2:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d0e4:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1d0e6:	4816      	ldr	r0, [pc, #88]	; (1d140 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d0e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d0ec:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1d0f0:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1d0f4:	4e13      	ldr	r6, [pc, #76]	; (1d144 <radio_ccm_rx_pkt_set+0x68>)
   1d0f6:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1d0f8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1d0fc:	4812      	ldr	r0, [pc, #72]	; (1d148 <radio_ccm_rx_pkt_set+0x6c>)
   1d0fe:	2902      	cmp	r1, #2
   1d100:	bf08      	it	eq
   1d102:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1d104:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1d108:	4810      	ldr	r0, [pc, #64]	; (1d14c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1d10a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d10e:	4910      	ldr	r1, [pc, #64]	; (1d150 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1d110:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1d114:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1d118:	4a0e      	ldr	r2, [pc, #56]	; (1d154 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d11a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1d11e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1d122:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d126:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d12a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1d12e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d132:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d134:	bc70      	pop	{r4, r5, r6}
   1d136:	601a      	str	r2, [r3, #0]
   1d138:	4770      	bx	lr
   1d13a:	bf00      	nop
   1d13c:	4000f000 	.word	0x4000f000
   1d140:	40001000 	.word	0x40001000
   1d144:	01010001 	.word	0x01010001
   1d148:	01000001 	.word	0x01000001
   1d14c:	2000f1e0 	.word	0x2000f1e0
   1d150:	2000f0d0 	.word	0x2000f0d0
   1d154:	4001f000 	.word	0x4001f000

0001d158 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d158:	4b0f      	ldr	r3, [pc, #60]	; (1d198 <radio_ccm_tx_pkt_set+0x40>)
{
   1d15a:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d15c:	2200      	movs	r2, #0
{
   1d15e:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d160:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d162:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d166:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1d16a:	480c      	ldr	r0, [pc, #48]	; (1d19c <radio_ccm_tx_pkt_set+0x44>)
   1d16c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1d170:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1d174:	480a      	ldr	r0, [pc, #40]	; (1d1a0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1d176:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d17a:	4c0a      	ldr	r4, [pc, #40]	; (1d1a4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1d17c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d180:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d182:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d186:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d18a:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d18c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d190:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d194:	6019      	str	r1, [r3, #0]
}
   1d196:	4770      	bx	lr
   1d198:	4000f000 	.word	0x4000f000
   1d19c:	01010000 	.word	0x01010000
   1d1a0:	2000f1e0 	.word	0x2000f1e0
   1d1a4:	2000f0d0 	.word	0x2000f0d0

0001d1a8 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d1a8:	4a0e      	ldr	r2, [pc, #56]	; (1d1e4 <radio_ccm_is_done+0x3c>)
   1d1aa:	2302      	movs	r3, #2
   1d1ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d1b0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1d1b4:	b933      	cbnz	r3, 1d1c4 <radio_ccm_is_done+0x1c>
		__WFE();
   1d1b6:	bf20      	wfe
		__SEV();
   1d1b8:	bf40      	sev
		__WFE();
   1d1ba:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d1bc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1d1c0:	2b00      	cmp	r3, #0
   1d1c2:	d0f8      	beq.n	1d1b6 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d1c4:	4b07      	ldr	r3, [pc, #28]	; (1d1e4 <radio_ccm_is_done+0x3c>)
   1d1c6:	4a08      	ldr	r2, [pc, #32]	; (1d1e8 <radio_ccm_is_done+0x40>)
   1d1c8:	2002      	movs	r0, #2
   1d1ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d1ce:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1d1d2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1d1d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1d1da:	fab0 f080 	clz	r0, r0
   1d1de:	0940      	lsrs	r0, r0, #5
   1d1e0:	4770      	bx	lr
   1d1e2:	bf00      	nop
   1d1e4:	4000f000 	.word	0x4000f000
   1d1e8:	e000e100 	.word	0xe000e100

0001d1ec <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1d1ec:	4b03      	ldr	r3, [pc, #12]	; (1d1fc <radio_ccm_mic_is_valid+0x10>)
   1d1ee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d1f2:	3800      	subs	r0, #0
   1d1f4:	bf18      	it	ne
   1d1f6:	2001      	movne	r0, #1
   1d1f8:	4770      	bx	lr
   1d1fa:	bf00      	nop
   1d1fc:	4000f000 	.word	0x4000f000

0001d200 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1d200:	4a15      	ldr	r2, [pc, #84]	; (1d258 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d202:	4b16      	ldr	r3, [pc, #88]	; (1d25c <radio_ar_configure+0x5c>)
{
   1d204:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1d206:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d20a:	4e15      	ldr	r6, [pc, #84]	; (1d260 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d20c:	2703      	movs	r7, #3
   1d20e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1d212:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1d214:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1d218:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1d21a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1d21e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1d220:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d224:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1d228:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1d22c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1d230:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1d234:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1d238:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d23c:	4909      	ldr	r1, [pc, #36]	; (1d264 <radio_ar_configure+0x64>)
   1d23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d242:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1d246:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d24a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1d24e:	bcf0      	pop	{r4, r5, r6, r7}
   1d250:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1d254:	4770      	bx	lr
   1d256:	bf00      	nop
   1d258:	40001000 	.word	0x40001000
   1d25c:	4000f000 	.word	0x4000f000
   1d260:	2000f0cc 	.word	0x2000f0cc
   1d264:	4001f000 	.word	0x4001f000

0001d268 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1d268:	4b01      	ldr	r3, [pc, #4]	; (1d270 <radio_ar_match_get+0x8>)
   1d26a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d26e:	4770      	bx	lr
   1d270:	4000f000 	.word	0x4000f000

0001d274 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1d274:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d276:	4807      	ldr	r0, [pc, #28]	; (1d294 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d278:	4c07      	ldr	r4, [pc, #28]	; (1d298 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1d27a:	4a08      	ldr	r2, [pc, #32]	; (1d29c <radio_ar_status_reset+0x28>)
   1d27c:	2300      	movs	r3, #0
   1d27e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1d282:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d286:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1d28a:	bc10      	pop	{r4}
   1d28c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1d290:	4770      	bx	lr
   1d292:	bf00      	nop
   1d294:	4000f000 	.word	0x4000f000
   1d298:	40001000 	.word	0x40001000
   1d29c:	4001f000 	.word	0x4001f000

0001d2a0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1d2a0:	4b08      	ldr	r3, [pc, #32]	; (1d2c4 <radio_ar_has_match+0x24>)
   1d2a2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1d2a6:	b160      	cbz	r0, 1d2c2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1d2a8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1d2ac:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1d2b0:	b138      	cbz	r0, 1d2c2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1d2b2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1d2b6:	b120      	cbz	r0, 1d2c2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1d2b8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1d2bc:	fab0 f080 	clz	r0, r0
   1d2c0:	0940      	lsrs	r0, r0, #5
}
   1d2c2:	4770      	bx	lr
   1d2c4:	40001000 	.word	0x40001000

0001d2c8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d2c8:	2902      	cmp	r1, #2
{
   1d2ca:	b510      	push	{r4, lr}
   1d2cc:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d2ce:	d00b      	beq.n	1d2e8 <mayfly_enable_cb+0x20>
   1d2d0:	4a0a      	ldr	r2, [pc, #40]	; (1d2fc <mayfly_enable_cb+0x34>)
   1d2d2:	490b      	ldr	r1, [pc, #44]	; (1d300 <mayfly_enable_cb+0x38>)
   1d2d4:	480b      	ldr	r0, [pc, #44]	; (1d304 <mayfly_enable_cb+0x3c>)
   1d2d6:	231e      	movs	r3, #30
   1d2d8:	f004 fffe 	bl	222d8 <printk>
   1d2dc:	4040      	eors	r0, r0
   1d2de:	f380 8811 	msr	BASEPRI, r0
   1d2e2:	f04f 0003 	mov.w	r0, #3
   1d2e6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1d2e8:	200b      	movs	r0, #11
	if (enable) {
   1d2ea:	b11c      	cbz	r4, 1d2f4 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1d2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1d2f0:	f7ea b9e8 	b.w	76c4 <arch_irq_enable>
}
   1d2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1d2f8:	f7ea b9f4 	b.w	76e4 <arch_irq_disable>
   1d2fc:	00029aa8 	.word	0x00029aa8
   1d300:	00029af8 	.word	0x00029af8
   1d304:	00028de0 	.word	0x00028de0

0001d308 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d308:	b129      	cbz	r1, 1d316 <mayfly_is_enabled+0xe>
   1d30a:	3901      	subs	r1, #1
   1d30c:	2901      	cmp	r1, #1
   1d30e:	d805      	bhi.n	1d31c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1d310:	200b      	movs	r0, #11
   1d312:	f7ea b9fb 	b.w	770c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1d316:	2018      	movs	r0, #24
   1d318:	f7ea b9f8 	b.w	770c <arch_irq_is_enabled>
{
   1d31c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1d31e:	4a07      	ldr	r2, [pc, #28]	; (1d33c <mayfly_is_enabled+0x34>)
   1d320:	4907      	ldr	r1, [pc, #28]	; (1d340 <mayfly_is_enabled+0x38>)
   1d322:	4808      	ldr	r0, [pc, #32]	; (1d344 <mayfly_is_enabled+0x3c>)
   1d324:	2336      	movs	r3, #54	; 0x36
   1d326:	f004 ffd7 	bl	222d8 <printk>
   1d32a:	4040      	eors	r0, r0
   1d32c:	f380 8811 	msr	BASEPRI, r0
   1d330:	f04f 0003 	mov.w	r0, #3
   1d334:	df02      	svc	2
		break;
	}

	return 0;
}
   1d336:	2000      	movs	r0, #0
   1d338:	bd08      	pop	{r3, pc}
   1d33a:	bf00      	nop
   1d33c:	00029aa8 	.word	0x00029aa8
   1d340:	00028e78 	.word	0x00028e78
   1d344:	00028de0 	.word	0x00028de0

0001d348 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d348:	4288      	cmp	r0, r1
   1d34a:	d00b      	beq.n	1d364 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1d34c:	2801      	cmp	r0, #1
   1d34e:	d003      	beq.n	1d358 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d350:	2802      	cmp	r0, #2
   1d352:	d009      	beq.n	1d368 <mayfly_prio_is_equal+0x20>
   1d354:	2000      	movs	r0, #0
#endif
	       0;
}
   1d356:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d358:	f1a1 0002 	sub.w	r0, r1, #2
   1d35c:	fab0 f080 	clz	r0, r0
   1d360:	0940      	lsrs	r0, r0, #5
   1d362:	4770      	bx	lr
   1d364:	2001      	movs	r0, #1
   1d366:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d368:	f1a1 0001 	sub.w	r0, r1, #1
   1d36c:	fab0 f080 	clz	r0, r0
   1d370:	0940      	lsrs	r0, r0, #5
   1d372:	4770      	bx	lr

0001d374 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d374:	2901      	cmp	r1, #1
{
   1d376:	b508      	push	{r3, lr}
	switch (callee_id) {
   1d378:	d00f      	beq.n	1d39a <mayfly_pend+0x26>
   1d37a:	2902      	cmp	r1, #2
   1d37c:	d00d      	beq.n	1d39a <mayfly_pend+0x26>
   1d37e:	b191      	cbz	r1, 1d3a6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1d380:	4a0c      	ldr	r2, [pc, #48]	; (1d3b4 <mayfly_pend+0x40>)
   1d382:	490d      	ldr	r1, [pc, #52]	; (1d3b8 <mayfly_pend+0x44>)
   1d384:	480d      	ldr	r0, [pc, #52]	; (1d3bc <mayfly_pend+0x48>)
   1d386:	2367      	movs	r3, #103	; 0x67
   1d388:	f004 ffa6 	bl	222d8 <printk>
   1d38c:	4040      	eors	r0, r0
   1d38e:	f380 8811 	msr	BASEPRI, r0
   1d392:	f04f 0003 	mov.w	r0, #3
   1d396:	df02      	svc	2
		break;
	}
}
   1d398:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d39a:	4b09      	ldr	r3, [pc, #36]	; (1d3c0 <mayfly_pend+0x4c>)
   1d39c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d3a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d3a4:	bd08      	pop	{r3, pc}
   1d3a6:	4b06      	ldr	r3, [pc, #24]	; (1d3c0 <mayfly_pend+0x4c>)
   1d3a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1d3ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d3b0:	bd08      	pop	{r3, pc}
   1d3b2:	bf00      	nop
   1d3b4:	00029aa8 	.word	0x00029aa8
   1d3b8:	00028e78 	.word	0x00028e78
   1d3bc:	00028de0 	.word	0x00028de0
   1d3c0:	e000e100 	.word	0xe000e100

0001d3c4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d3c4:	2803      	cmp	r0, #3
{
   1d3c6:	b510      	push	{r4, lr}
   1d3c8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d3ca:	d804      	bhi.n	1d3d6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1d3cc:	4b11      	ldr	r3, [pc, #68]	; (1d414 <hal_ticker_instance0_caller_id_get+0x50>)
   1d3ce:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d3d0:	b18c      	cbz	r4, 1d3f6 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1d3d2:	4620      	mov	r0, r4
   1d3d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d3d6:	4a10      	ldr	r2, [pc, #64]	; (1d418 <hal_ticker_instance0_caller_id_get+0x54>)
   1d3d8:	4910      	ldr	r1, [pc, #64]	; (1d41c <hal_ticker_instance0_caller_id_get+0x58>)
   1d3da:	4811      	ldr	r0, [pc, #68]	; (1d420 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d3dc:	232b      	movs	r3, #43	; 0x2b
   1d3de:	f004 ff7b 	bl	222d8 <printk>
   1d3e2:	4040      	eors	r0, r0
   1d3e4:	f380 8811 	msr	BASEPRI, r0
   1d3e8:	f04f 0003 	mov.w	r0, #3
   1d3ec:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1d3ee:	4b09      	ldr	r3, [pc, #36]	; (1d414 <hal_ticker_instance0_caller_id_get+0x50>)
   1d3f0:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d3f2:	2c00      	cmp	r4, #0
   1d3f4:	d1ed      	bne.n	1d3d2 <hal_ticker_instance0_caller_id_get+0xe>
   1d3f6:	4a08      	ldr	r2, [pc, #32]	; (1d418 <hal_ticker_instance0_caller_id_get+0x54>)
   1d3f8:	490a      	ldr	r1, [pc, #40]	; (1d424 <hal_ticker_instance0_caller_id_get+0x60>)
   1d3fa:	4809      	ldr	r0, [pc, #36]	; (1d420 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d3fc:	232e      	movs	r3, #46	; 0x2e
   1d3fe:	f004 ff6b 	bl	222d8 <printk>
   1d402:	4040      	eors	r0, r0
   1d404:	f380 8811 	msr	BASEPRI, r0
   1d408:	f04f 0003 	mov.w	r0, #3
   1d40c:	df02      	svc	2
}
   1d40e:	4620      	mov	r0, r4
   1d410:	bd10      	pop	{r4, pc}
   1d412:	bf00      	nop
   1d414:	00029bb0 	.word	0x00029bb0
   1d418:	00029b1c 	.word	0x00029b1c
   1d41c:	00029b6c 	.word	0x00029b6c
   1d420:	00028de0 	.word	0x00028de0
   1d424:	00029b8c 	.word	0x00029b8c

0001d428 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1d428:	3801      	subs	r0, #1
{
   1d42a:	b510      	push	{r4, lr}
   1d42c:	461c      	mov	r4, r3
   1d42e:	2804      	cmp	r0, #4
   1d430:	f200 8082 	bhi.w	1d538 <hal_ticker_instance0_sched+0x110>
   1d434:	e8df f000 	tbb	[pc, r0]
   1d438:	3f302112 	.word	0x3f302112
   1d43c:	03          	.byte	0x03
   1d43d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1d43e:	2904      	cmp	r1, #4
   1d440:	d04a      	beq.n	1d4d8 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1d442:	4a44      	ldr	r2, [pc, #272]	; (1d554 <hal_ticker_instance0_sched+0x12c>)
   1d444:	4944      	ldr	r1, [pc, #272]	; (1d558 <hal_ticker_instance0_sched+0x130>)
   1d446:	4845      	ldr	r0, [pc, #276]	; (1d55c <hal_ticker_instance0_sched+0x134>)
   1d448:	23ba      	movs	r3, #186	; 0xba
   1d44a:	f004 ff45 	bl	222d8 <printk>
   1d44e:	4040      	eors	r0, r0
   1d450:	f380 8811 	msr	BASEPRI, r0
   1d454:	f04f 0003 	mov.w	r0, #3
   1d458:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1d45a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d45c:	2904      	cmp	r1, #4
   1d45e:	d043      	beq.n	1d4e8 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1d460:	4a3c      	ldr	r2, [pc, #240]	; (1d554 <hal_ticker_instance0_sched+0x12c>)
   1d462:	493d      	ldr	r1, [pc, #244]	; (1d558 <hal_ticker_instance0_sched+0x130>)
   1d464:	483d      	ldr	r0, [pc, #244]	; (1d55c <hal_ticker_instance0_sched+0x134>)
   1d466:	234e      	movs	r3, #78	; 0x4e
   1d468:	f004 ff36 	bl	222d8 <printk>
   1d46c:	4040      	eors	r0, r0
   1d46e:	f380 8811 	msr	BASEPRI, r0
   1d472:	f04f 0003 	mov.w	r0, #3
   1d476:	df02      	svc	2
}
   1d478:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d47a:	2903      	cmp	r1, #3
   1d47c:	d03c      	beq.n	1d4f8 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1d47e:	4a35      	ldr	r2, [pc, #212]	; (1d554 <hal_ticker_instance0_sched+0x12c>)
   1d480:	4935      	ldr	r1, [pc, #212]	; (1d558 <hal_ticker_instance0_sched+0x130>)
   1d482:	4836      	ldr	r0, [pc, #216]	; (1d55c <hal_ticker_instance0_sched+0x134>)
   1d484:	2365      	movs	r3, #101	; 0x65
   1d486:	f004 ff27 	bl	222d8 <printk>
   1d48a:	4040      	eors	r0, r0
   1d48c:	f380 8811 	msr	BASEPRI, r0
   1d490:	f04f 0003 	mov.w	r0, #3
   1d494:	df02      	svc	2
}
   1d496:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d498:	2904      	cmp	r1, #4
   1d49a:	d035      	beq.n	1d508 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1d49c:	4a2d      	ldr	r2, [pc, #180]	; (1d554 <hal_ticker_instance0_sched+0x12c>)
   1d49e:	492e      	ldr	r1, [pc, #184]	; (1d558 <hal_ticker_instance0_sched+0x130>)
   1d4a0:	482e      	ldr	r0, [pc, #184]	; (1d55c <hal_ticker_instance0_sched+0x134>)
   1d4a2:	237c      	movs	r3, #124	; 0x7c
   1d4a4:	f004 ff18 	bl	222d8 <printk>
   1d4a8:	4040      	eors	r0, r0
   1d4aa:	f380 8811 	msr	BASEPRI, r0
   1d4ae:	f04f 0003 	mov.w	r0, #3
   1d4b2:	df02      	svc	2
}
   1d4b4:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d4b6:	2903      	cmp	r1, #3
   1d4b8:	d036      	beq.n	1d528 <hal_ticker_instance0_sched+0x100>
   1d4ba:	2904      	cmp	r1, #4
   1d4bc:	d02c      	beq.n	1d518 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1d4be:	4a25      	ldr	r2, [pc, #148]	; (1d554 <hal_ticker_instance0_sched+0x12c>)
   1d4c0:	4925      	ldr	r1, [pc, #148]	; (1d558 <hal_ticker_instance0_sched+0x130>)
   1d4c2:	4826      	ldr	r0, [pc, #152]	; (1d55c <hal_ticker_instance0_sched+0x134>)
   1d4c4:	23a2      	movs	r3, #162	; 0xa2
   1d4c6:	f004 ff07 	bl	222d8 <printk>
   1d4ca:	4040      	eors	r0, r0
   1d4cc:	f380 8811 	msr	BASEPRI, r0
   1d4d0:	f04f 0003 	mov.w	r0, #3
   1d4d4:	df02      	svc	2
}
   1d4d6:	bd10      	pop	{r4, pc}
			m.param = instance;
   1d4d8:	4b21      	ldr	r3, [pc, #132]	; (1d560 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d4da:	2102      	movs	r1, #2
			m.param = instance;
   1d4dc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d4de:	2003      	movs	r0, #3
}
   1d4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d4e4:	f7f3 bab0 	b.w	10a48 <mayfly_enqueue>
			m.param = instance;
   1d4e8:	4b1e      	ldr	r3, [pc, #120]	; (1d564 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d4ea:	2102      	movs	r1, #2
			m.param = instance;
   1d4ec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d4ee:	2000      	movs	r0, #0
}
   1d4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d4f4:	f7f3 baa8 	b.w	10a48 <mayfly_enqueue>
			m.param = instance;
   1d4f8:	4b1b      	ldr	r3, [pc, #108]	; (1d568 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d4fa:	2101      	movs	r1, #1
			m.param = instance;
   1d4fc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d4fe:	4608      	mov	r0, r1
}
   1d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d504:	f7f3 baa0 	b.w	10a48 <mayfly_enqueue>
			m.param = instance;
   1d508:	4b18      	ldr	r3, [pc, #96]	; (1d56c <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d50a:	2102      	movs	r1, #2
			m.param = instance;
   1d50c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d50e:	2001      	movs	r0, #1
}
   1d510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d514:	f7f3 ba98 	b.w	10a48 <mayfly_enqueue>
			m.param = instance;
   1d518:	4b15      	ldr	r3, [pc, #84]	; (1d570 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d51a:	2102      	movs	r1, #2
			m.param = instance;
   1d51c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d51e:	4608      	mov	r0, r1
}
   1d520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d524:	f7f3 ba90 	b.w	10a48 <mayfly_enqueue>
			m.param = instance;
   1d528:	4b12      	ldr	r3, [pc, #72]	; (1d574 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d52a:	2101      	movs	r1, #1
			m.param = instance;
   1d52c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d52e:	2002      	movs	r0, #2
}
   1d530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d534:	f7f3 ba88 	b.w	10a48 <mayfly_enqueue>
		LL_ASSERT(0);
   1d538:	4a06      	ldr	r2, [pc, #24]	; (1d554 <hal_ticker_instance0_sched+0x12c>)
   1d53a:	4907      	ldr	r1, [pc, #28]	; (1d558 <hal_ticker_instance0_sched+0x130>)
   1d53c:	4807      	ldr	r0, [pc, #28]	; (1d55c <hal_ticker_instance0_sched+0x134>)
   1d53e:	23c0      	movs	r3, #192	; 0xc0
   1d540:	f004 feca 	bl	222d8 <printk>
   1d544:	4040      	eors	r0, r0
   1d546:	f380 8811 	msr	BASEPRI, r0
   1d54a:	f04f 0003 	mov.w	r0, #3
   1d54e:	df02      	svc	2
}
   1d550:	bd10      	pop	{r4, pc}
   1d552:	bf00      	nop
   1d554:	00029b1c 	.word	0x00029b1c
   1d558:	00028e78 	.word	0x00028e78
   1d55c:	00028de0 	.word	0x00028de0
   1d560:	20000710 	.word	0x20000710
   1d564:	20000700 	.word	0x20000700
   1d568:	200006f0 	.word	0x200006f0
   1d56c:	20000740 	.word	0x20000740
   1d570:	20000720 	.word	0x20000720
   1d574:	20000730 	.word	0x20000730

0001d578 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1d578:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1d57a:	2000      	movs	r0, #0
   1d57c:	f7ff b9f2 	b.w	1c964 <cntr_cmp_set>

0001d580 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1d580:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d586:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1d58a:	3201      	adds	r2, #1
   1d58c:	d008      	beq.n	1d5a0 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d592:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d596:	f013 0301 	ands.w	r3, r3, #1
   1d59a:	d10a      	bne.n	1d5b2 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1d59c:	4618      	mov	r0, r3
}
   1d59e:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d5a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1d5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d5a8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d5aa:	4293      	cmp	r3, r2
   1d5ac:	d1ef      	bne.n	1d58e <hci_vendor_read_static_addr+0xe>
	return 0;
   1d5ae:	2000      	movs	r0, #0
}
   1d5b0:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1d5b2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1d5b6:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d5b8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d5ba:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d5be:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d5c2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1d5c4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1d5c6:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1d5ca:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1d5ce:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1d5d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1d5d4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d5d8:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d5da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1d5de:	3301      	adds	r3, #1
   1d5e0:	d03b      	beq.n	1d65a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d5e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d5e6:	3301      	adds	r3, #1
   1d5e8:	d037      	beq.n	1d65a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d5ea:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d5ee:	3301      	adds	r3, #1
   1d5f0:	d033      	beq.n	1d65a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1d5f2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d5f6:	3301      	adds	r3, #1
   1d5f8:	d02f      	beq.n	1d65a <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1d5fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1d5fe:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1d600:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d602:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d606:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d60a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1d60c:	f880 c009 	strb.w	ip, [r0, #9]
   1d610:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1d612:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1d616:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1d618:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d61a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d61e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d622:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1d624:	f880 c00d 	strb.w	ip, [r0, #13]
   1d628:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1d62a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1d62e:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1d630:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d632:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d636:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d63a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1d63c:	73c3      	strb	r3, [r0, #15]
   1d63e:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1d642:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1d646:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1d648:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d64a:	0a11      	lsrs	r1, r2, #8
   1d64c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d650:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1d652:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1d654:	7541      	strb	r1, [r0, #21]
		return 1;
   1d656:	2001      	movs	r0, #1
}
   1d658:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1d65a:	2210      	movs	r2, #16
   1d65c:	2100      	movs	r1, #0
   1d65e:	3006      	adds	r0, #6
   1d660:	f007 fb21 	bl	24ca6 <memset>
		return 1;
   1d664:	2001      	movs	r0, #1
}
   1d666:	bd08      	pop	{r3, pc}

0001d668 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1d668:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1d66a:	2210      	movs	r2, #16
{
   1d66c:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1d66e:	2100      	movs	r1, #0
   1d670:	f007 fb19 	bl	24ca6 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d674:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d678:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1d67c:	3201      	adds	r2, #1
   1d67e:	d034      	beq.n	1d6ea <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d680:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d684:	3201      	adds	r2, #1
   1d686:	d030      	beq.n	1d6ea <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d688:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d68c:	3201      	adds	r2, #1
   1d68e:	d02c      	beq.n	1d6ea <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1d690:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d694:	3201      	adds	r2, #1
   1d696:	d028      	beq.n	1d6ea <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1d698:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1d69c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d69e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d6a0:	0a08      	lsrs	r0, r1, #8
   1d6a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1d6a6:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1d6a8:	70e0      	strb	r0, [r4, #3]
   1d6aa:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1d6ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1d6b0:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1d6b2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d6b4:	0a08      	lsrs	r0, r1, #8
   1d6b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1d6ba:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1d6bc:	71e0      	strb	r0, [r4, #7]
   1d6be:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1d6c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1d6c4:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1d6c6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d6c8:	0a08      	lsrs	r0, r1, #8
   1d6ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d6ce:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1d6d0:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1d6d2:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1d6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1d6d8:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1d6da:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d6dc:	0a11      	lsrs	r1, r2, #8
   1d6de:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d6e2:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1d6e4:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1d6e6:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1d6e8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1d6ea:	4620      	mov	r0, r4
   1d6ec:	2210      	movs	r2, #16
}
   1d6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1d6f2:	2100      	movs	r1, #0
   1d6f4:	f007 bad7 	b.w	24ca6 <memset>

0001d6f8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d6f8:	4b02      	ldr	r3, [pc, #8]	; (1d704 <net_buf_pool_get+0xc>)
   1d6fa:	2228      	movs	r2, #40	; 0x28
   1d6fc:	fb02 3000 	mla	r0, r2, r0, r3
   1d700:	4770      	bx	lr
   1d702:	bf00      	nop
   1d704:	2000a14c 	.word	0x2000a14c

0001d708 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d708:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1d70a:	4b05      	ldr	r3, [pc, #20]	; (1d720 <net_buf_id+0x18>)
   1d70c:	2128      	movs	r1, #40	; 0x28
   1d70e:	fb01 3302 	mla	r3, r1, r2, r3
   1d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d714:	1ac0      	subs	r0, r0, r3
}
   1d716:	4b03      	ldr	r3, [pc, #12]	; (1d724 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1d718:	10c0      	asrs	r0, r0, #3
}
   1d71a:	4358      	muls	r0, r3
   1d71c:	4770      	bx	lr
   1d71e:	bf00      	nop
   1d720:	2000a14c 	.word	0x2000a14c
   1d724:	aaaaaaab 	.word	0xaaaaaaab

0001d728 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d728:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d72a:	4b0a      	ldr	r3, [pc, #40]	; (1d754 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d72c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d72e:	2428      	movs	r4, #40	; 0x28
   1d730:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1d734:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d736:	6a1b      	ldr	r3, [r3, #32]
   1d738:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d73a:	6823      	ldr	r3, [r4, #0]
   1d73c:	429a      	cmp	r2, r3
   1d73e:	bf94      	ite	ls
   1d740:	600a      	strls	r2, [r1, #0]
   1d742:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d744:	f7ff ffe0 	bl	1d708 <net_buf_id>
   1d748:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d74c:	fb02 3000 	mla	r0, r2, r0, r3
   1d750:	bd10      	pop	{r4, pc}
   1d752:	bf00      	nop
   1d754:	2000a14c 	.word	0x2000a14c

0001d758 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d75c:	4605      	mov	r5, r0
   1d75e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d760:	4610      	mov	r0, r2
   1d762:	4619      	mov	r1, r3
{
   1d764:	4691      	mov	r9, r2
   1d766:	4698      	mov	r8, r3
   1d768:	4617      	mov	r7, r2
   1d76a:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d76c:	f00a f9f4 	bl	27b58 <z_timeout_end_calc>
   1d770:	4682      	mov	sl, r0
   1d772:	468b      	mov	fp, r1
	__asm__ volatile(
   1d774:	f04f 0320 	mov.w	r3, #32
   1d778:	f3ef 8111 	mrs	r1, BASEPRI
   1d77c:	f383 8811 	msr	BASEPRI, r3
   1d780:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d784:	8b6b      	ldrh	r3, [r5, #26]
   1d786:	2b00      	cmp	r3, #0
   1d788:	d055      	beq.n	1d836 <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d78a:	8b2a      	ldrh	r2, [r5, #24]
   1d78c:	429a      	cmp	r2, r3
   1d78e:	d93e      	bls.n	1d80e <net_buf_alloc_len+0xb6>
   1d790:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1d792:	2200      	movs	r2, #0
   1d794:	2300      	movs	r3, #0
   1d796:	4628      	mov	r0, r5
   1d798:	f002 fe82 	bl	204a0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d79c:	9900      	ldr	r1, [sp, #0]
   1d79e:	4604      	mov	r4, r0
   1d7a0:	2800      	cmp	r0, #0
   1d7a2:	d034      	beq.n	1d80e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1d7a4:	f381 8811 	msr	BASEPRI, r1
   1d7a8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d7ac:	9b01      	ldr	r3, [sp, #4]
   1d7ae:	2b00      	cmp	r3, #0
   1d7b0:	d051      	beq.n	1d856 <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d7b2:	ea58 0309 	orrs.w	r3, r8, r9
   1d7b6:	d00f      	beq.n	1d7d8 <net_buf_alloc_len+0x80>
   1d7b8:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d7bc:	bf08      	it	eq
   1d7be:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1d7c2:	d009      	beq.n	1d7d8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d7c4:	f003 fd10 	bl	211e8 <z_tick_get>
   1d7c8:	ebba 0700 	subs.w	r7, sl, r0
   1d7cc:	eb6b 0601 	sbc.w	r6, fp, r1
   1d7d0:	2e00      	cmp	r6, #0
   1d7d2:	bfbc      	itt	lt
   1d7d4:	2700      	movlt	r7, #0
   1d7d6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d7d8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d7da:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1d86c <net_buf_alloc_len+0x114>
   1d7de:	2228      	movs	r2, #40	; 0x28
   1d7e0:	fb02 8303 	mla	r3, r2, r3, r8
   1d7e4:	a901      	add	r1, sp, #4
   1d7e6:	6a1b      	ldr	r3, [r3, #32]
   1d7e8:	681b      	ldr	r3, [r3, #0]
   1d7ea:	463a      	mov	r2, r7
   1d7ec:	681d      	ldr	r5, [r3, #0]
   1d7ee:	4620      	mov	r0, r4
   1d7f0:	4633      	mov	r3, r6
   1d7f2:	47a8      	blx	r5
   1d7f4:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d7f6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d7f8:	bb70      	cbnz	r0, 1d858 <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1d7fa:	79a0      	ldrb	r0, [r4, #6]
   1d7fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d800:	4621      	mov	r1, r4
   1d802:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1d806:	f009 ff97 	bl	27738 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d80a:	462c      	mov	r4, r5
}
   1d80c:	e01f      	b.n	1d84e <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   1d80e:	8b6b      	ldrh	r3, [r5, #26]
   1d810:	1e5a      	subs	r2, r3, #1
   1d812:	836a      	strh	r2, [r5, #26]
   1d814:	f381 8811 	msr	BASEPRI, r1
   1d818:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d81c:	8b2c      	ldrh	r4, [r5, #24]
   1d81e:	1ae3      	subs	r3, r4, r3
   1d820:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1d822:	2018      	movs	r0, #24
   1d824:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1d828:	4810      	ldr	r0, [pc, #64]	; (1d86c <net_buf_alloc_len+0x114>)
   1d82a:	4b11      	ldr	r3, [pc, #68]	; (1d870 <net_buf_alloc_len+0x118>)
   1d82c:	1a2d      	subs	r5, r5, r0
   1d82e:	10ed      	asrs	r5, r5, #3
   1d830:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d832:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d834:	e7ba      	b.n	1d7ac <net_buf_alloc_len+0x54>
   1d836:	f381 8811 	msr	BASEPRI, r1
   1d83a:	f3bf 8f6f 	isb	sy
   1d83e:	464a      	mov	r2, r9
   1d840:	4643      	mov	r3, r8
   1d842:	4628      	mov	r0, r5
   1d844:	f002 fe2c 	bl	204a0 <z_impl_k_queue_get>
	if (!buf) {
   1d848:	4604      	mov	r4, r0
   1d84a:	2800      	cmp	r0, #0
   1d84c:	d1ae      	bne.n	1d7ac <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d84e:	4620      	mov	r0, r4
   1d850:	b003      	add	sp, #12
   1d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1d856:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d858:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d85a:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d85c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d85e:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d860:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d862:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d864:	6923      	ldr	r3, [r4, #16]
   1d866:	81e2      	strh	r2, [r4, #14]
   1d868:	60a3      	str	r3, [r4, #8]
	return buf;
   1d86a:	e7f0      	b.n	1d84e <net_buf_alloc_len+0xf6>
   1d86c:	2000a14c 	.word	0x2000a14c
   1d870:	cccccccd 	.word	0xcccccccd

0001d874 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d878:	4d17      	ldr	r5, [pc, #92]	; (1d8d8 <net_buf_unref+0x64>)
   1d87a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d87c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d87e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1d880:	b90c      	cbnz	r4, 1d886 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d886:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d888:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d88c:	3b01      	subs	r3, #1
   1d88e:	b2db      	uxtb	r3, r3
   1d890:	7123      	strb	r3, [r4, #4]
   1d892:	2b00      	cmp	r3, #0
   1d894:	d1f5      	bne.n	1d882 <net_buf_unref+0xe>
		if (buf->__buf) {
   1d896:	6921      	ldr	r1, [r4, #16]
   1d898:	b159      	cbz	r1, 1d8b2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d89a:	7963      	ldrb	r3, [r4, #5]
   1d89c:	079b      	lsls	r3, r3, #30
   1d89e:	d407      	bmi.n	1d8b0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d8a0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1d8a2:	fb07 5303 	mla	r3, r7, r3, r5
   1d8a6:	4620      	mov	r0, r4
   1d8a8:	6a1b      	ldr	r3, [r3, #32]
   1d8aa:	681b      	ldr	r3, [r3, #0]
   1d8ac:	689b      	ldr	r3, [r3, #8]
   1d8ae:	4798      	blx	r3
			buf->__buf = NULL;
   1d8b0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d8b2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d8b4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d8b6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d8ba:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d8bc:	69db      	ldr	r3, [r3, #28]
   1d8be:	b11b      	cbz	r3, 1d8c8 <net_buf_unref+0x54>
			pool->destroy(buf);
   1d8c0:	4620      	mov	r0, r4
   1d8c2:	4798      	blx	r3
{
   1d8c4:	4644      	mov	r4, r8
   1d8c6:	e7db      	b.n	1d880 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d8c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d8cc:	4621      	mov	r1, r4
   1d8ce:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1d8d2:	f009 ff31 	bl	27738 <k_queue_prepend>
}
   1d8d6:	e7f5      	b.n	1d8c4 <net_buf_unref+0x50>
   1d8d8:	2000a14c 	.word	0x2000a14c

0001d8dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d8dc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d8de:	4b09      	ldr	r3, [pc, #36]	; (1d904 <gpio_nrfx_init+0x28>)
   1d8e0:	781a      	ldrb	r2, [r3, #0]
   1d8e2:	b96a      	cbnz	r2, 1d900 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d8e4:	2101      	movs	r1, #1
   1d8e6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d8e8:	2006      	movs	r0, #6
   1d8ea:	2105      	movs	r1, #5
   1d8ec:	f7e9 ff1c 	bl	7728 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d8f0:	2006      	movs	r0, #6
   1d8f2:	f7e9 fee7 	bl	76c4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d8f6:	4b04      	ldr	r3, [pc, #16]	; (1d908 <gpio_nrfx_init+0x2c>)
   1d8f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d8fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d900:	2000      	movs	r0, #0
   1d902:	bd08      	pop	{r3, pc}
   1d904:	2000fb35 	.word	0x2000fb35
   1d908:	40006000 	.word	0x40006000

0001d90c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d90c:	4b2b      	ldr	r3, [pc, #172]	; (1d9bc <gpio_nrfx_config+0xb0>)
{
   1d90e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   1d910:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d912:	482b      	ldr	r0, [pc, #172]	; (1d9c0 <gpio_nrfx_config+0xb4>)
   1d914:	4013      	ands	r3, r2
   1d916:	4283      	cmp	r3, r0
   1d918:	d041      	beq.n	1d99e <gpio_nrfx_config+0x92>
   1d91a:	d80d      	bhi.n	1d938 <gpio_nrfx_config+0x2c>
   1d91c:	2b06      	cmp	r3, #6
   1d91e:	d015      	beq.n	1d94c <gpio_nrfx_config+0x40>
   1d920:	d805      	bhi.n	1d92e <gpio_nrfx_config+0x22>
   1d922:	b19b      	cbz	r3, 1d94c <gpio_nrfx_config+0x40>
   1d924:	2b02      	cmp	r3, #2
   1d926:	d03c      	beq.n	1d9a2 <gpio_nrfx_config+0x96>
   1d928:	f06f 0015 	mvn.w	r0, #21
   1d92c:	e036      	b.n	1d99c <gpio_nrfx_config+0x90>
   1d92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d932:	d1f9      	bne.n	1d928 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1d934:	2301      	movs	r3, #1
   1d936:	e009      	b.n	1d94c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d938:	4822      	ldr	r0, [pc, #136]	; (1d9c4 <gpio_nrfx_config+0xb8>)
   1d93a:	4283      	cmp	r3, r0
   1d93c:	d033      	beq.n	1d9a6 <gpio_nrfx_config+0x9a>
   1d93e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d942:	d032      	beq.n	1d9aa <gpio_nrfx_config+0x9e>
   1d944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d948:	d1ee      	bne.n	1d928 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1d94a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1d94c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1d94e:	bf54      	ite	pl
   1d950:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1d954:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d956:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1d95a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1d95c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d960:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d964:	d507      	bpl.n	1d976 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d966:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d96a:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d96c:	d01f      	beq.n	1d9ae <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d96e:	2201      	movs	r2, #1
   1d970:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1d972:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1d976:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1d978:	4c13      	ldr	r4, [pc, #76]	; (1d9c8 <gpio_nrfx_config+0xbc>)
   1d97a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1d97c:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d980:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1d984:	bf18      	it	ne
   1d986:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d98a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d98e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d992:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d996:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1d99a:	2000      	movs	r0, #0
}
   1d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1d99e:	2307      	movs	r3, #7
   1d9a0:	e7d4      	b.n	1d94c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1d9a2:	2304      	movs	r3, #4
   1d9a4:	e7d2      	b.n	1d94c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1d9a6:	2305      	movs	r3, #5
   1d9a8:	e7d0      	b.n	1d94c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1d9aa:	2303      	movs	r3, #3
   1d9ac:	e7ce      	b.n	1d94c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d9ae:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d9b0:	bf42      	ittt	mi
   1d9b2:	2201      	movmi	r2, #1
   1d9b4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1d9b6:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1d9ba:	e7dc      	b.n	1d976 <gpio_nrfx_config+0x6a>
   1d9bc:	00f00006 	.word	0x00f00006
   1d9c0:	00100006 	.word	0x00100006
   1d9c4:	00400002 	.word	0x00400002
   1d9c8:	50000300 	.word	0x50000300

0001d9cc <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1d9cc:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1d9d0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1d9d2:	4b08      	ldr	r3, [pc, #32]	; (1d9f4 <nrf_gpio_cfg_sense_set+0x28>)
   1d9d4:	2801      	cmp	r0, #1
   1d9d6:	bf18      	it	ne
   1d9d8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d9dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1d9e0:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1d9e4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d9e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1d9ec:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1d9f0:	4770      	bx	lr
   1d9f2:	bf00      	nop
   1d9f4:	50000300 	.word	0x50000300

0001d9f8 <gpiote_event_handler>:
{
   1d9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1d9fa:	2600      	movs	r6, #0
   1d9fc:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da00:	4d28      	ldr	r5, [pc, #160]	; (1daa4 <gpiote_event_handler+0xac>)
   1da02:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   1da06:	b15c      	cbz	r4, 1da20 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1da08:	4827      	ldr	r0, [pc, #156]	; (1daa8 <gpiote_event_handler+0xb0>)
   1da0a:	f009 fa5a 	bl	26ec2 <check_level_trigger_pins>
		fired_triggers[0] =
   1da0e:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1da10:	4826      	ldr	r0, [pc, #152]	; (1daac <gpiote_event_handler+0xb4>)
   1da12:	f009 fa56 	bl	26ec2 <check_level_trigger_pins>
		fired_triggers[1] =
   1da16:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da18:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   1da1c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   1da20:	4923      	ldr	r1, [pc, #140]	; (1dab0 <gpiote_event_handler+0xb8>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1da22:	4d20      	ldr	r5, [pc, #128]	; (1daa4 <gpiote_event_handler+0xac>)
   1da24:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1da26:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da28:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1da2a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1da2e:	fa06 f002 	lsl.w	r0, r6, r2
   1da32:	4218      	tst	r0, r3
   1da34:	d016      	beq.n	1da64 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da36:	680b      	ldr	r3, [r1, #0]
   1da38:	b1a3      	cbz	r3, 1da64 <gpiote_event_handler+0x6c>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1da3a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1da3e:	af02      	add	r7, sp, #8
   1da40:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da44:	f8c1 c000 	str.w	ip, [r1]
   1da48:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1da4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1da50:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1da54:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1da58:	fa06 f303 	lsl.w	r3, r6, r3
   1da5c:	433b      	orrs	r3, r7
   1da5e:	f840 3c08 	str.w	r3, [r0, #-8]
   1da62:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1da64:	3201      	adds	r2, #1
   1da66:	2a08      	cmp	r2, #8
   1da68:	f101 0104 	add.w	r1, r1, #4
   1da6c:	d1dd      	bne.n	1da2a <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   1da6e:	9a00      	ldr	r2, [sp, #0]
   1da70:	b122      	cbz	r2, 1da7c <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   1da72:	4b10      	ldr	r3, [pc, #64]	; (1dab4 <gpiote_event_handler+0xbc>)
   1da74:	490c      	ldr	r1, [pc, #48]	; (1daa8 <gpiote_event_handler+0xb0>)
   1da76:	6858      	ldr	r0, [r3, #4]
   1da78:	f009 f9ec 	bl	26e54 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1da7c:	9a01      	ldr	r2, [sp, #4]
   1da7e:	b122      	cbz	r2, 1da8a <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   1da80:	4b0d      	ldr	r3, [pc, #52]	; (1dab8 <gpiote_event_handler+0xc0>)
   1da82:	490a      	ldr	r1, [pc, #40]	; (1daac <gpiote_event_handler+0xb4>)
   1da84:	6858      	ldr	r0, [r3, #4]
   1da86:	f009 f9e5 	bl	26e54 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   1da8a:	b144      	cbz	r4, 1da9e <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1da8c:	4806      	ldr	r0, [pc, #24]	; (1daa8 <gpiote_event_handler+0xb0>)
   1da8e:	f009 f9f2 	bl	26e76 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1da92:	4806      	ldr	r0, [pc, #24]	; (1daac <gpiote_event_handler+0xb4>)
}
   1da94:	b003      	add	sp, #12
   1da96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1da9a:	f009 b9ec 	b.w	26e76 <cfg_level_pins>
}
   1da9e:	b003      	add	sp, #12
   1daa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1daa2:	bf00      	nop
   1daa4:	40006000 	.word	0x40006000
   1daa8:	20009ebc 	.word	0x20009ebc
   1daac:	20009ecc 	.word	0x20009ecc
   1dab0:	40006100 	.word	0x40006100
   1dab4:	2000f320 	.word	0x2000f320
   1dab8:	2000f33c 	.word	0x2000f33c

0001dabc <gpio_nrfx_pin_interrupt_configure>:
{
   1dabc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dabe:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dac0:	6842      	ldr	r2, [r0, #4]
	return port->data;
   1dac2:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dac4:	7a12      	ldrb	r2, [r2, #8]
   1dac6:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1daca:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   1dace:	460e      	mov	r6, r1
   1dad0:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1dad4:	d110      	bne.n	1daf8 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   1dad6:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   1dad8:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1dada:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   1dade:	4961      	ldr	r1, [pc, #388]	; (1dc64 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dae0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1dae4:	bf18      	it	ne
   1dae6:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1daea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1daee:	07d0      	lsls	r0, r2, #31
   1daf0:	d507      	bpl.n	1db02 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   1daf2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1daf6:	e09a      	b.n	1dc2e <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1daf8:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   1dafc:	68f9      	ldr	r1, [r7, #12]
   1dafe:	f000 8098 	beq.w	1dc32 <gpio_nrfx_pin_interrupt_configure+0x176>
   1db02:	68fa      	ldr	r2, [r7, #12]
   1db04:	2101      	movs	r1, #1
   1db06:	40b1      	lsls	r1, r6
   1db08:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1db0a:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1db0c:	60f9      	str	r1, [r7, #12]
   1db0e:	2101      	movs	r1, #1
   1db10:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1db12:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1db16:	bf0c      	ite	eq
   1db18:	430a      	orreq	r2, r1
   1db1a:	438a      	bicne	r2, r1
   1db1c:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1db1e:	69ba      	ldr	r2, [r7, #24]
   1db20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1db24:	bf0c      	ite	eq
   1db26:	430a      	orreq	r2, r1
   1db28:	438a      	bicne	r2, r1
   1db2a:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1db2c:	693a      	ldr	r2, [r7, #16]
   1db2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1db32:	bf0c      	ite	eq
   1db34:	4311      	orreq	r1, r2
   1db36:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   1db3a:	4a4b      	ldr	r2, [pc, #300]	; (1dc68 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   1db3c:	6139      	str	r1, [r7, #16]
   1db3e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1db42:	2000      	movs	r0, #0
   1db44:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1db46:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1db4a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1db4e:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1db52:	428d      	cmp	r5, r1
   1db54:	d172      	bne.n	1dc3c <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   1db56:	fa23 f100 	lsr.w	r1, r3, r0
   1db5a:	07c9      	lsls	r1, r1, #31
   1db5c:	d56e      	bpl.n	1dc3c <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1db5e:	0083      	lsls	r3, r0, #2
   1db60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1db64:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1db68:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1db6c:	f021 0101 	bic.w	r1, r1, #1
   1db70:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1db74:	2301      	movs	r3, #1
   1db76:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1db78:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1db7c:	b2c0      	uxtb	r0, r0
   1db7e:	f001 fd2f 	bl	1f5e0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1db82:	4628      	mov	r0, r5
   1db84:	2100      	movs	r1, #0
   1db86:	f7ff ff21 	bl	1d9cc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1db8a:	68f8      	ldr	r0, [r7, #12]
   1db8c:	40f0      	lsrs	r0, r6
   1db8e:	f010 0001 	ands.w	r0, r0, #1
   1db92:	d04c      	beq.n	1dc2e <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   1db94:	6978      	ldr	r0, [r7, #20]
   1db96:	40f0      	lsrs	r0, r6
   1db98:	f010 0401 	ands.w	r4, r0, #1
   1db9c:	d055      	beq.n	1dc4a <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1db9e:	69bb      	ldr	r3, [r7, #24]
   1dba0:	40f3      	lsrs	r3, r6
   1dba2:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1dba4:	bf5f      	itttt	pl
   1dba6:	6939      	ldrpl	r1, [r7, #16]
   1dba8:	fa21 f606 	lsrpl.w	r6, r1, r6
   1dbac:	f006 0601 	andpl.w	r6, r6, #1
   1dbb0:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1dbb4:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1dbb8:	bf54      	ite	pl
   1dbba:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1dbbc:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1dbbe:	f001 fd2f 	bl	1f620 <nrfx_gpiote_channel_alloc>
   1dbc2:	4b2a      	ldr	r3, [pc, #168]	; (1dc6c <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1dbc4:	4298      	cmp	r0, r3
   1dbc6:	d13d      	bne.n	1dc44 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1dbc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1dbcc:	0093      	lsls	r3, r2, #2
   1dbce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dbd2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dbd6:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1dbd8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1dbdc:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1dbe0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1dbe4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dbe8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1dbec:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1dbf0:	430d      	orrs	r5, r1
   1dbf2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1dbf6:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1dbfa:	0093      	lsls	r3, r2, #2
   1dbfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dc00:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dc04:	2000      	movs	r0, #0
   1dc06:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1dc08:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1dc0c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1dc0e:	008b      	lsls	r3, r1, #2
   1dc10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dc14:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1dc18:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1dc1c:	f042 0201 	orr.w	r2, r2, #1
   1dc20:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1dc24:	4a10      	ldr	r2, [pc, #64]	; (1dc68 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1dc26:	2301      	movs	r3, #1
   1dc28:	408b      	lsls	r3, r1
   1dc2a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1dc2e:	b003      	add	sp, #12
   1dc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1dc32:	2201      	movs	r2, #1
   1dc34:	40b2      	lsls	r2, r6
   1dc36:	ea21 0102 	bic.w	r1, r1, r2
   1dc3a:	e766      	b.n	1db0a <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dc3c:	3001      	adds	r0, #1
   1dc3e:	2808      	cmp	r0, #8
   1dc40:	d181      	bne.n	1db46 <gpio_nrfx_pin_interrupt_configure+0x8a>
   1dc42:	e79e      	b.n	1db82 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1dc44:	f06f 0012 	mvn.w	r0, #18
   1dc48:	e7f1      	b.n	1dc2e <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1dc4a:	6939      	ldr	r1, [r7, #16]
   1dc4c:	40f1      	lsrs	r1, r6
   1dc4e:	f001 0101 	and.w	r1, r1, #1
   1dc52:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1dc56:	4628      	mov	r0, r5
   1dc58:	b2c9      	uxtb	r1, r1
   1dc5a:	f7ff feb7 	bl	1d9cc <nrf_gpio_cfg_sense_set>
	int res = 0;
   1dc5e:	4620      	mov	r0, r4
   1dc60:	e7e5      	b.n	1dc2e <gpio_nrfx_pin_interrupt_configure+0x172>
   1dc62:	bf00      	nop
   1dc64:	50000300 	.word	0x50000300
   1dc68:	40006000 	.word	0x40006000
   1dc6c:	0bad0000 	.word	0x0bad0000

0001dc70 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1dc70:	b510      	push	{r4, lr}
   1dc72:	4604      	mov	r4, r0
   1dc74:	2200      	movs	r2, #0
   1dc76:	2101      	movs	r1, #1
   1dc78:	2003      	movs	r0, #3
   1dc7a:	f7e9 fd55 	bl	7728 <z_arm_irq_priority_set>
	return dev->config;
   1dc7e:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1dc80:	68e3      	ldr	r3, [r4, #12]
   1dc82:	4a0c      	ldr	r2, [pc, #48]	; (1dcb4 <twi_0_init+0x44>)
   1dc84:	f100 0108 	add.w	r1, r0, #8
   1dc88:	f001 ffa4 	bl	1fbd4 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1dc8c:	4b0a      	ldr	r3, [pc, #40]	; (1dcb8 <twi_0_init+0x48>)
   1dc8e:	4298      	cmp	r0, r3
   1dc90:	d00d      	beq.n	1dcae <twi_0_init+0x3e>
   1dc92:	4b0a      	ldr	r3, [pc, #40]	; (1dcbc <twi_0_init+0x4c>)
   1dc94:	4a0a      	ldr	r2, [pc, #40]	; (1dcc0 <twi_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1dc96:	480b      	ldr	r0, [pc, #44]	; (1dcc4 <twi_0_init+0x54>)
   1dc98:	6821      	ldr	r1, [r4, #0]
   1dc9a:	1ad2      	subs	r2, r2, r3
   1dc9c:	08d2      	lsrs	r2, r2, #3
   1dc9e:	0192      	lsls	r2, r2, #6
   1dca0:	f042 0201 	orr.w	r2, r2, #1
   1dca4:	f004 ffbb 	bl	22c1e <log_1>
		return -EBUSY;
   1dca8:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1dcac:	bd10      	pop	{r4, pc}
	return 0;
   1dcae:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1dcb0:	e7fc      	b.n	1dcac <twi_0_init+0x3c>
   1dcb2:	bf00      	nop
   1dcb4:	0001dd1d 	.word	0x0001dd1d
   1dcb8:	0bad0000 	.word	0x0bad0000
   1dcbc:	000281b4 	.word	0x000281b4
   1dcc0:	000282dc 	.word	0x000282dc
   1dcc4:	0002e0fa 	.word	0x0002e0fa

0001dcc8 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1dcc8:	07ca      	lsls	r2, r1, #31
{
   1dcca:	b508      	push	{r3, lr}
	return dev->config;
   1dccc:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1dcce:	d40f      	bmi.n	1dcf0 <i2c_nrfx_twi_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1dcd0:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1dcd4:	2a01      	cmp	r2, #1
   1dcd6:	d00e      	beq.n	1dcf6 <i2c_nrfx_twi_configure+0x2e>
   1dcd8:	2a02      	cmp	r2, #2
   1dcda:	d015      	beq.n	1dd08 <i2c_nrfx_twi_configure+0x40>
   1dcdc:	490c      	ldr	r1, [pc, #48]	; (1dd10 <i2c_nrfx_twi_configure+0x48>)
   1dcde:	4b0d      	ldr	r3, [pc, #52]	; (1dd14 <i2c_nrfx_twi_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1dce0:	480d      	ldr	r0, [pc, #52]	; (1dd18 <i2c_nrfx_twi_configure+0x50>)
   1dce2:	1ac9      	subs	r1, r1, r3
   1dce4:	08c9      	lsrs	r1, r1, #3
   1dce6:	0189      	lsls	r1, r1, #6
   1dce8:	f041 0101 	orr.w	r1, r1, #1
   1dcec:	f004 ff8a 	bl	22c04 <log_0>
		return -EINVAL;
   1dcf0:	f06f 0015 	mvn.w	r0, #21
   1dcf4:	e007      	b.n	1dd06 <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1dcf6:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1dcf8:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1dcfc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1dd00:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1dd02:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1dd04:	6359      	str	r1, [r3, #52]	; 0x34
}
   1dd06:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1dd08:	681b      	ldr	r3, [r3, #0]
   1dd0a:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1dd0e:	e7f5      	b.n	1dcfc <i2c_nrfx_twi_configure+0x34>
   1dd10:	000282dc 	.word	0x000282dc
   1dd14:	000281b4 	.word	0x000281b4
   1dd18:	0002e11a 	.word	0x0002e11a

0001dd1c <event_handler>:
	switch (p_event->type) {
   1dd1c:	7803      	ldrb	r3, [r0, #0]
   1dd1e:	2b01      	cmp	r3, #1
   1dd20:	d008      	beq.n	1dd34 <event_handler+0x18>
   1dd22:	2b02      	cmp	r3, #2
   1dd24:	d008      	beq.n	1dd38 <event_handler+0x1c>
   1dd26:	b94b      	cbnz	r3, 1dd3c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1dd28:	4b05      	ldr	r3, [pc, #20]	; (1dd40 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1dd2a:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1dd2c:	f101 0018 	add.w	r0, r1, #24
   1dd30:	f002 bf72 	b.w	20c18 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1dd34:	4b03      	ldr	r3, [pc, #12]	; (1dd44 <event_handler+0x28>)
   1dd36:	e7f8      	b.n	1dd2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1dd38:	4b03      	ldr	r3, [pc, #12]	; (1dd48 <event_handler+0x2c>)
   1dd3a:	e7f6      	b.n	1dd2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1dd3c:	4b03      	ldr	r3, [pc, #12]	; (1dd4c <event_handler+0x30>)
   1dd3e:	e7f4      	b.n	1dd2a <event_handler+0xe>
   1dd40:	0bad0000 	.word	0x0bad0000
   1dd44:	0bae0001 	.word	0x0bae0001
   1dd48:	0bae0002 	.word	0x0bae0002
   1dd4c:	0bad0001 	.word	0x0bad0001

0001dd50 <i2c_nrfx_twi_transfer>:
{
   1dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd54:	4604      	mov	r4, r0
   1dd56:	b087      	sub	sp, #28
   1dd58:	460d      	mov	r5, r1
   1dd5a:	4690      	mov	r8, r2
   1dd5c:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1dd5e:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1dd60:	f04f 32ff 	mov.w	r2, #4294967295
   1dd64:	f04f 33ff 	mov.w	r3, #4294967295
   1dd68:	f002 ff7c 	bl	20c64 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1dd6c:	68e0      	ldr	r0, [r4, #12]
   1dd6e:	3018      	adds	r0, #24
   1dd70:	2200      	movs	r2, #0
   1dd72:	2300      	movs	r3, #0
   1dd74:	f002 ff76 	bl	20c64 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1dd78:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1dd7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1de60 <i2c_nrfx_twi_transfer+0x110>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1dd7e:	f001 ff81 	bl	1fc84 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1dd82:	2600      	movs	r6, #0
   1dd84:	4546      	cmp	r6, r8
   1dd86:	d301      	bcc.n	1dd8c <i2c_nrfx_twi_transfer+0x3c>
   1dd88:	2500      	movs	r5, #0
   1dd8a:	e02d      	b.n	1dde8 <i2c_nrfx_twi_transfer+0x98>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1dd8c:	f895 b008 	ldrb.w	fp, [r5, #8]
   1dd90:	f01b 0708 	ands.w	r7, fp, #8
   1dd94:	d160      	bne.n	1de58 <i2c_nrfx_twi_transfer+0x108>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dd96:	2214      	movs	r2, #20
   1dd98:	4639      	mov	r1, r7
   1dd9a:	a801      	add	r0, sp, #4
   1dd9c:	f006 ff83 	bl	24ca6 <memset>
   1dda0:	686a      	ldr	r2, [r5, #4]
   1dda2:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1dda4:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dda8:	682a      	ldr	r2, [r5, #0]
   1ddaa:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ddae:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ddb2:	f88d 9005 	strb.w	r9, [sp, #5]
   1ddb6:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ddb8:	d120      	bne.n	1ddfc <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
   1ddba:	f108 32ff 	add.w	r2, r8, #4294967295
   1ddbe:	42b2      	cmp	r2, r6
   1ddc0:	d902      	bls.n	1ddc8 <i2c_nrfx_twi_transfer+0x78>
   1ddc2:	7d2a      	ldrb	r2, [r5, #20]
   1ddc4:	0752      	lsls	r2, r2, #29
   1ddc6:	d51b      	bpl.n	1de00 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1ddc8:	2b00      	cmp	r3, #0
   1ddca:	d145      	bne.n	1de58 <i2c_nrfx_twi_transfer+0x108>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1ddcc:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1ddce:	6860      	ldr	r0, [r4, #4]
   1ddd0:	a901      	add	r1, sp, #4
   1ddd2:	f001 ff81 	bl	1fcd8 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1ddd6:	4550      	cmp	r0, sl
   1ddd8:	d014      	beq.n	1de04 <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
   1ddda:	4b22      	ldr	r3, [pc, #136]	; (1de64 <i2c_nrfx_twi_transfer+0x114>)
				ret = -EIO;
   1dddc:	4298      	cmp	r0, r3
   1ddde:	bf0c      	ite	eq
   1dde0:	f06f 050f 	mvneq.w	r5, #15
   1dde4:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1dde8:	6860      	ldr	r0, [r4, #4]
   1ddea:	f001 ff5b 	bl	1fca4 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1ddee:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1ddf0:	f002 ff12 	bl	20c18 <z_impl_k_sem_give>
}
   1ddf4:	4628      	mov	r0, r5
   1ddf6:	b007      	add	sp, #28
   1ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1ddfc:	463a      	mov	r2, r7
   1ddfe:	e7e6      	b.n	1ddce <i2c_nrfx_twi_transfer+0x7e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1de00:	2240      	movs	r2, #64	; 0x40
   1de02:	e7e4      	b.n	1ddce <i2c_nrfx_twi_transfer+0x7e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1de04:	68e0      	ldr	r0, [r4, #12]
   1de06:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1de08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1de0c:	2300      	movs	r3, #0
   1de0e:	f002 ff29 	bl	20c64 <z_impl_k_sem_take>
		if (ret != 0) {
   1de12:	b168      	cbz	r0, 1de30 <i2c_nrfx_twi_transfer+0xe0>
   1de14:	4a14      	ldr	r2, [pc, #80]	; (1de68 <i2c_nrfx_twi_transfer+0x118>)
   1de16:	4b15      	ldr	r3, [pc, #84]	; (1de6c <i2c_nrfx_twi_transfer+0x11c>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1de18:	4815      	ldr	r0, [pc, #84]	; (1de70 <i2c_nrfx_twi_transfer+0x120>)
   1de1a:	1ad2      	subs	r2, r2, r3
   1de1c:	08d2      	lsrs	r2, r2, #3
   1de1e:	0192      	lsls	r2, r2, #6
   1de20:	f042 0201 	orr.w	r2, r2, #1
   1de24:	4631      	mov	r1, r6
   1de26:	f004 fefa 	bl	22c1e <log_1>
			ret = -EIO;
   1de2a:	f06f 0504 	mvn.w	r5, #4
			break;
   1de2e:	e7db      	b.n	1dde8 <i2c_nrfx_twi_transfer+0x98>
	return dev->data;
   1de30:	68e3      	ldr	r3, [r4, #12]
		res = get_dev_data(dev)->res;
   1de32:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1de34:	4551      	cmp	r1, sl
   1de36:	f105 050c 	add.w	r5, r5, #12
   1de3a:	d00b      	beq.n	1de54 <i2c_nrfx_twi_transfer+0x104>
   1de3c:	4a0b      	ldr	r2, [pc, #44]	; (1de6c <i2c_nrfx_twi_transfer+0x11c>)
   1de3e:	4b0a      	ldr	r3, [pc, #40]	; (1de68 <i2c_nrfx_twi_transfer+0x118>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   1de40:	480c      	ldr	r0, [pc, #48]	; (1de74 <i2c_nrfx_twi_transfer+0x124>)
   1de42:	1a9b      	subs	r3, r3, r2
   1de44:	08db      	lsrs	r3, r3, #3
   1de46:	019b      	lsls	r3, r3, #6
   1de48:	f043 0301 	orr.w	r3, r3, #1
   1de4c:	4632      	mov	r2, r6
   1de4e:	f004 fefa 	bl	22c46 <log_2>
   1de52:	e7ea      	b.n	1de2a <i2c_nrfx_twi_transfer+0xda>
	for (size_t i = 0; i < num_msgs; i++) {
   1de54:	3601      	adds	r6, #1
   1de56:	e795      	b.n	1dd84 <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1de58:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1de5c:	e7c4      	b.n	1dde8 <i2c_nrfx_twi_transfer+0x98>
   1de5e:	bf00      	nop
   1de60:	0bad0000 	.word	0x0bad0000
   1de64:	0bad000b 	.word	0x0bad000b
   1de68:	000282dc 	.word	0x000282dc
   1de6c:	000281b4 	.word	0x000281b4
   1de70:	0002e12c 	.word	0x0002e12c
   1de74:	0002e156 	.word	0x0002e156

0001de78 <mpu6050_convert_gyro>:
}

/* see "Gyroscope Measurements" section from register map description */
static void mpu6050_convert_gyro(struct sensor_value *val, int16_t raw_val,
				 uint16_t sensitivity_x10)
{
   1de78:	b570      	push	{r4, r5, r6, lr}
	int64_t conv_val;

	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
   1de7a:	4d0d      	ldr	r5, [pc, #52]	; (1deb0 <mpu6050_convert_gyro+0x38>)
{
   1de7c:	4604      	mov	r4, r0
	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
   1de7e:	17ce      	asrs	r6, r1, #31
   1de80:	23b4      	movs	r3, #180	; 0xb4
   1de82:	fba1 0105 	umull	r0, r1, r1, r5
   1de86:	435a      	muls	r2, r3
   1de88:	fb05 1106 	mla	r1, r5, r6, r1
   1de8c:	2300      	movs	r3, #0
   1de8e:	f7e2 fffb 	bl	e88 <__aeabi_ldivmod>
		   (sensitivity_x10 * 180U);
	val->val1 = conv_val / 1000000;
   1de92:	4a08      	ldr	r2, [pc, #32]	; (1deb4 <mpu6050_convert_gyro+0x3c>)
   1de94:	2300      	movs	r3, #0
	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
   1de96:	4606      	mov	r6, r0
   1de98:	460d      	mov	r5, r1
	val->val1 = conv_val / 1000000;
   1de9a:	f7e2 fff5 	bl	e88 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
   1de9e:	4a05      	ldr	r2, [pc, #20]	; (1deb4 <mpu6050_convert_gyro+0x3c>)
	val->val1 = conv_val / 1000000;
   1dea0:	6020      	str	r0, [r4, #0]
	val->val2 = conv_val % 1000000;
   1dea2:	2300      	movs	r3, #0
   1dea4:	4630      	mov	r0, r6
   1dea6:	4629      	mov	r1, r5
   1dea8:	f7e2 ffee 	bl	e88 <__aeabi_ldivmod>
   1deac:	6062      	str	r2, [r4, #4]
}
   1deae:	bd70      	pop	{r4, r5, r6, pc}
   1deb0:	01df5e70 	.word	0x01df5e70
   1deb4:	000f4240 	.word	0x000f4240

0001deb8 <mpu6050_sample_fetch>:
	return 0;
}

static int mpu6050_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
   1deb8:	b530      	push	{r4, r5, lr}
   1deba:	4603      	mov	r3, r0
   1debc:	b08d      	sub	sp, #52	; 0x34
	struct mpu6050_data *drv_data = dev->data;
   1debe:	68c4      	ldr	r4, [r0, #12]
	const struct mpu6050_config *cfg = dev->config;
	int16_t buf[7];

	if (i2c_burst_read(drv_data->i2c, cfg->i2c_addr,
   1dec0:	685b      	ldr	r3, [r3, #4]
   1dec2:	6820      	ldr	r0, [r4, #0]
   1dec4:	889b      	ldrh	r3, [r3, #4]
 * @param num_bytes Number of bytes being read.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_burst_read(const struct device *dev,
   1dec6:	223b      	movs	r2, #59	; 0x3b
   1dec8:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1decc:	f10d 0207 	add.w	r2, sp, #7
   1ded0:	9206      	str	r2, [sp, #24]
	msg[0].len = num_write;
   1ded2:	2201      	movs	r2, #1
   1ded4:	9207      	str	r2, [sp, #28]
	msg[1].buf = (uint8_t *)read_buf;
   1ded6:	aa02      	add	r2, sp, #8
   1ded8:	9209      	str	r2, [sp, #36]	; 0x24
	msg[1].len = num_read;
   1deda:	220e      	movs	r2, #14
	msg[0].flags = I2C_MSG_WRITE;
   1dedc:	2500      	movs	r5, #0
	msg[1].len = num_read;
   1dede:	920a      	str	r2, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dee0:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1dee2:	f88d 5020 	strb.w	r5, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dee6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
   1deea:	2202      	movs	r2, #2
   1deec:	a906      	add	r1, sp, #24
   1deee:	f009 f811 	bl	26f14 <z_impl_i2c_transfer>
   1def2:	42a8      	cmp	r0, r5
   1def4:	da0d      	bge.n	1df12 <mpu6050_sample_fetch+0x5a>
   1def6:	4b16      	ldr	r3, [pc, #88]	; (1df50 <mpu6050_sample_fetch+0x98>)
   1def8:	4916      	ldr	r1, [pc, #88]	; (1df54 <mpu6050_sample_fetch+0x9c>)
			   MPU6050_REG_DATA_START, (uint8_t *)buf, 14) < 0) {
		LOG_ERR("Failed to read data sample.");
   1defa:	4817      	ldr	r0, [pc, #92]	; (1df58 <mpu6050_sample_fetch+0xa0>)
   1defc:	1ac9      	subs	r1, r1, r3
   1defe:	08c9      	lsrs	r1, r1, #3
   1df00:	0189      	lsls	r1, r1, #6
   1df02:	f041 0101 	orr.w	r1, r1, #1
   1df06:	f004 fe7d 	bl	22c04 <log_0>
		return -EIO;
   1df0a:	f06f 0004 	mvn.w	r0, #4
	drv_data->gyro_x = sys_be16_to_cpu(buf[4]);
	drv_data->gyro_y = sys_be16_to_cpu(buf[5]);
	drv_data->gyro_z = sys_be16_to_cpu(buf[6]);

	return 0;
}
   1df0e:	b00d      	add	sp, #52	; 0x34
   1df10:	bd30      	pop	{r4, r5, pc}
	drv_data->accel_x = sys_be16_to_cpu(buf[0]);
   1df12:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1df16:	ba5b      	rev16	r3, r3
   1df18:	80a3      	strh	r3, [r4, #4]
	drv_data->accel_y = sys_be16_to_cpu(buf[1]);
   1df1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1df1e:	ba5b      	rev16	r3, r3
   1df20:	80e3      	strh	r3, [r4, #6]
	drv_data->accel_z = sys_be16_to_cpu(buf[2]);
   1df22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1df26:	ba5b      	rev16	r3, r3
   1df28:	8123      	strh	r3, [r4, #8]
	drv_data->temp = sys_be16_to_cpu(buf[3]);
   1df2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1df2e:	ba5b      	rev16	r3, r3
   1df30:	81a3      	strh	r3, [r4, #12]
	drv_data->gyro_x = sys_be16_to_cpu(buf[4]);
   1df32:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1df36:	ba5b      	rev16	r3, r3
   1df38:	81e3      	strh	r3, [r4, #14]
	drv_data->gyro_y = sys_be16_to_cpu(buf[5]);
   1df3a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1df3e:	ba5b      	rev16	r3, r3
   1df40:	8223      	strh	r3, [r4, #16]
	drv_data->gyro_z = sys_be16_to_cpu(buf[6]);
   1df42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1df46:	ba5b      	rev16	r3, r3
   1df48:	8263      	strh	r3, [r4, #18]
	return 0;
   1df4a:	4628      	mov	r0, r5
   1df4c:	e7df      	b.n	1df0e <mpu6050_sample_fetch+0x56>
   1df4e:	bf00      	nop
   1df50:	000281b4 	.word	0x000281b4
   1df54:	000281b4 	.word	0x000281b4
   1df58:	0002e184 	.word	0x0002e184

0001df5c <mpu6050_init>:
	.sample_fetch = mpu6050_sample_fetch,
	.channel_get = mpu6050_channel_get,
};

int mpu6050_init(const struct device *dev)
{
   1df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct mpu6050_data *drv_data = dev->data;
	const struct mpu6050_config *cfg = dev->config;
   1df60:	6845      	ldr	r5, [r0, #4]
	struct mpu6050_data *drv_data = dev->data;
   1df62:	68c4      	ldr	r4, [r0, #12]
{
   1df64:	4606      	mov	r6, r0
   1df66:	b089      	sub	sp, #36	; 0x24
	uint8_t id, i;

	drv_data->i2c = device_get_binding(cfg->i2c_label);
   1df68:	6828      	ldr	r0, [r5, #0]
   1df6a:	f001 ffbf 	bl	1feec <z_impl_device_get_binding>
   1df6e:	6020      	str	r0, [r4, #0]
	if (drv_data->i2c == NULL) {
   1df70:	b978      	cbnz	r0, 1df92 <mpu6050_init+0x36>
   1df72:	4a56      	ldr	r2, [pc, #344]	; (1e0cc <mpu6050_init+0x170>)
   1df74:	4b56      	ldr	r3, [pc, #344]	; (1e0d0 <mpu6050_init+0x174>)
		LOG_ERR("Failed to get pointer to %s device",
   1df76:	6829      	ldr	r1, [r5, #0]
   1df78:	4856      	ldr	r0, [pc, #344]	; (1e0d4 <mpu6050_init+0x178>)
   1df7a:	1ad2      	subs	r2, r2, r3
   1df7c:	08d2      	lsrs	r2, r2, #3
   1df7e:	0192      	lsls	r2, r2, #6
   1df80:	f042 0201 	orr.w	r2, r2, #1
   1df84:	f004 fe4b 	bl	22c1e <log_1>
		return -EIO;
	}

	if (id != MPU6050_CHIP_ID) {
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
   1df88:	f06f 0015 	mvn.w	r0, #21
		return -EIO;
	}
#endif

	return 0;
}
   1df8c:	b009      	add	sp, #36	; 0x24
   1df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (i2c_reg_read_byte(drv_data->i2c, cfg->i2c_addr,
   1df92:	2275      	movs	r2, #117	; 0x75
   1df94:	88ab      	ldrh	r3, [r5, #4]
   1df96:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
   1df9a:	f04f 0200 	mov.w	r2, #0
	msg[0].len = num_write;
   1df9e:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
   1dfa2:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1dfa6:	f10d 0205 	add.w	r2, sp, #5
	msg[1].len = num_read;
   1dfaa:	e9cd 2805 	strd	r2, r8, [sp, #20]
	msg[0].buf = (uint8_t *)write_buf;
   1dfae:	f10d 0707 	add.w	r7, sp, #7
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dfb2:	f04f 0207 	mov.w	r2, #7
	msg[0].buf = (uint8_t *)write_buf;
   1dfb6:	9702      	str	r7, [sp, #8]
	msg[0].len = num_write;
   1dfb8:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1dfbc:	f88d 201c 	strb.w	r2, [sp, #28]
   1dfc0:	2202      	movs	r2, #2
   1dfc2:	a902      	add	r1, sp, #8
   1dfc4:	f008 ffa6 	bl	26f14 <z_impl_i2c_transfer>
   1dfc8:	2800      	cmp	r0, #0
   1dfca:	da0c      	bge.n	1dfe6 <mpu6050_init+0x8a>
   1dfcc:	493f      	ldr	r1, [pc, #252]	; (1e0cc <mpu6050_init+0x170>)
   1dfce:	4b40      	ldr	r3, [pc, #256]	; (1e0d0 <mpu6050_init+0x174>)
		LOG_ERR("Failed to read chip ID.");
   1dfd0:	4841      	ldr	r0, [pc, #260]	; (1e0d8 <mpu6050_init+0x17c>)
   1dfd2:	1ac9      	subs	r1, r1, r3
   1dfd4:	08c9      	lsrs	r1, r1, #3
   1dfd6:	0189      	lsls	r1, r1, #6
   1dfd8:	ea41 0108 	orr.w	r1, r1, r8
		LOG_ERR("Failed to write gyro full-scale range.");
   1dfdc:	f004 fe12 	bl	22c04 <log_0>
		return -EIO;
   1dfe0:	f06f 0004 	mvn.w	r0, #4
   1dfe4:	e7d2      	b.n	1df8c <mpu6050_init+0x30>
	if (id != MPU6050_CHIP_ID) {
   1dfe6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1dfea:	2b68      	cmp	r3, #104	; 0x68
   1dfec:	d00a      	beq.n	1e004 <mpu6050_init+0xa8>
   1dfee:	4b38      	ldr	r3, [pc, #224]	; (1e0d0 <mpu6050_init+0x174>)
   1dff0:	4936      	ldr	r1, [pc, #216]	; (1e0cc <mpu6050_init+0x170>)
		LOG_ERR("Invalid chip ID.");
   1dff2:	483a      	ldr	r0, [pc, #232]	; (1e0dc <mpu6050_init+0x180>)
   1dff4:	1ac9      	subs	r1, r1, r3
   1dff6:	08c9      	lsrs	r1, r1, #3
   1dff8:	0189      	lsls	r1, r1, #6
   1dffa:	f041 0101 	orr.w	r1, r1, #1
   1dffe:	f004 fe01 	bl	22c04 <log_0>
   1e002:	e7c1      	b.n	1df88 <mpu6050_init+0x2c>
	msg[0].flags = I2C_MSG_WRITE;
   1e004:	f04f 0300 	mov.w	r3, #0
	if (i2c_reg_update_byte(drv_data->i2c, cfg->i2c_addr,
   1e008:	f8d4 9000 	ldr.w	r9, [r4]
				      uint8_t value)
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   1e00c:	f895 a004 	ldrb.w	sl, [r5, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1e010:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1e014:	f10d 0306 	add.w	r3, sp, #6
	msg[1].len = num_read;
   1e018:	e9cd 3805 	strd	r3, r8, [sp, #20]
   1e01c:	f04f 0b6b 	mov.w	fp, #107	; 0x6b
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e020:	f04f 0307 	mov.w	r3, #7
	msg[0].len = num_write;
   1e024:	e9cd 7802 	strd	r7, r8, [sp, #8]
   1e028:	f88d b007 	strb.w	fp, [sp, #7]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e02c:	f88d 301c 	strb.w	r3, [sp, #28]
   1e030:	2202      	movs	r2, #2
   1e032:	4653      	mov	r3, sl
   1e034:	a902      	add	r1, sp, #8
   1e036:	4648      	mov	r0, r9
   1e038:	f008 ff6c 	bl	26f14 <z_impl_i2c_transfer>
	if (rc != 0) {
   1e03c:	b958      	cbnz	r0, 1e056 <mpu6050_init+0xfa>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   1e03e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1e042:	f002 03bf 	and.w	r3, r2, #191	; 0xbf
	if (new_value == old_value) {
   1e046:	f032 02bf 	bics.w	r2, r2, #191	; 0xbf
   1e04a:	d00f      	beq.n	1e06c <mpu6050_init+0x110>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
   1e04c:	465a      	mov	r2, fp
   1e04e:	4651      	mov	r1, sl
   1e050:	4648      	mov	r0, r9
   1e052:	f008 ff65 	bl	26f20 <i2c_reg_write_byte>
   1e056:	2800      	cmp	r0, #0
   1e058:	da08      	bge.n	1e06c <mpu6050_init+0x110>
   1e05a:	491c      	ldr	r1, [pc, #112]	; (1e0cc <mpu6050_init+0x170>)
   1e05c:	4b1c      	ldr	r3, [pc, #112]	; (1e0d0 <mpu6050_init+0x174>)
		LOG_ERR("Failed to wake up chip.");
   1e05e:	4820      	ldr	r0, [pc, #128]	; (1e0e0 <mpu6050_init+0x184>)
   1e060:	1ac9      	subs	r1, r1, r3
   1e062:	08c9      	lsrs	r1, r1, #3
   1e064:	0189      	lsls	r1, r1, #6
   1e066:	f041 0101 	orr.w	r1, r1, #1
   1e06a:	e7b7      	b.n	1dfdc <mpu6050_init+0x80>
	if (i2c_reg_write_byte(drv_data->i2c, cfg->i2c_addr,
   1e06c:	88a9      	ldrh	r1, [r5, #4]
   1e06e:	6820      	ldr	r0, [r4, #0]
   1e070:	2300      	movs	r3, #0
   1e072:	221c      	movs	r2, #28
   1e074:	f008 ff54 	bl	26f20 <i2c_reg_write_byte>
   1e078:	2800      	cmp	r0, #0
   1e07a:	da08      	bge.n	1e08e <mpu6050_init+0x132>
   1e07c:	4913      	ldr	r1, [pc, #76]	; (1e0cc <mpu6050_init+0x170>)
   1e07e:	4b14      	ldr	r3, [pc, #80]	; (1e0d0 <mpu6050_init+0x174>)
		LOG_ERR("Failed to write accel full-scale range.");
   1e080:	4818      	ldr	r0, [pc, #96]	; (1e0e4 <mpu6050_init+0x188>)
   1e082:	1ac9      	subs	r1, r1, r3
   1e084:	08c9      	lsrs	r1, r1, #3
   1e086:	0189      	lsls	r1, r1, #6
   1e088:	f041 0101 	orr.w	r1, r1, #1
   1e08c:	e7a6      	b.n	1dfdc <mpu6050_init+0x80>
	drv_data->accel_sensitivity_shift = 14 - i;
   1e08e:	230e      	movs	r3, #14
   1e090:	8163      	strh	r3, [r4, #10]
	if (i2c_reg_write_byte(drv_data->i2c, cfg->i2c_addr,
   1e092:	88a9      	ldrh	r1, [r5, #4]
   1e094:	6820      	ldr	r0, [r4, #0]
   1e096:	2300      	movs	r3, #0
   1e098:	221b      	movs	r2, #27
   1e09a:	f008 ff41 	bl	26f20 <i2c_reg_write_byte>
   1e09e:	2800      	cmp	r0, #0
   1e0a0:	da08      	bge.n	1e0b4 <mpu6050_init+0x158>
   1e0a2:	490a      	ldr	r1, [pc, #40]	; (1e0cc <mpu6050_init+0x170>)
   1e0a4:	4b0a      	ldr	r3, [pc, #40]	; (1e0d0 <mpu6050_init+0x174>)
		LOG_ERR("Failed to write gyro full-scale range.");
   1e0a6:	4810      	ldr	r0, [pc, #64]	; (1e0e8 <mpu6050_init+0x18c>)
   1e0a8:	1ac9      	subs	r1, r1, r3
   1e0aa:	08c9      	lsrs	r1, r1, #3
   1e0ac:	0189      	lsls	r1, r1, #6
   1e0ae:	f041 0101 	orr.w	r1, r1, #1
   1e0b2:	e793      	b.n	1dfdc <mpu6050_init+0x80>
	drv_data->gyro_sensitivity_x10 = mpu6050_gyro_sensitivity_x10[i];
   1e0b4:	f240 531e 	movw	r3, #1310	; 0x51e
   1e0b8:	82a3      	strh	r3, [r4, #20]
	if (mpu6050_init_interrupt(dev) < 0) {
   1e0ba:	4630      	mov	r0, r6
   1e0bc:	f000 f950 	bl	1e360 <mpu6050_init_interrupt>
		return -EIO;
   1e0c0:	2800      	cmp	r0, #0
   1e0c2:	bfac      	ite	ge
   1e0c4:	2000      	movge	r0, #0
   1e0c6:	f06f 0004 	mvnlt.w	r0, #4
   1e0ca:	e75f      	b.n	1df8c <mpu6050_init+0x30>
   1e0cc:	000281b4 	.word	0x000281b4
   1e0d0:	000281b4 	.word	0x000281b4
   1e0d4:	0002e1a0 	.word	0x0002e1a0
   1e0d8:	0002e1c3 	.word	0x0002e1c3
   1e0dc:	0002e1db 	.word	0x0002e1db
   1e0e0:	0002e1ec 	.word	0x0002e1ec
   1e0e4:	0002e204 	.word	0x0002e204
   1e0e8:	0002e22c 	.word	0x0002e22c

0001e0ec <mpu6050_channel_get>:
{
   1e0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct mpu6050_data *drv_data = dev->data;
   1e0f0:	68c5      	ldr	r5, [r0, #12]
{
   1e0f2:	4614      	mov	r4, r2
   1e0f4:	2907      	cmp	r1, #7
   1e0f6:	f200 80ce 	bhi.w	1e296 <mpu6050_channel_get+0x1aa>
   1e0fa:	e8df f001 	tbb	[pc, r1]
   1e0fe:	a47b      	.short	0xa47b
   1e100:	c4bf04a7 	.word	0xc4bf04a7
   1e104:	aac8      	.short	0xaac8
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e106:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   1e10a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1e304 <mpu6050_channel_get+0x218>
   1e10e:	896e      	ldrh	r6, [r5, #10]
   1e110:	17cb      	asrs	r3, r1, #31
   1e112:	fba1 a109 	umull	sl, r1, r1, r9
   1e116:	fb09 1103 	mla	r1, r9, r3, r1
   1e11a:	f1c6 0220 	rsb	r2, r6, #32
   1e11e:	f1b6 0320 	subs.w	r3, r6, #32
   1e122:	fa01 f202 	lsl.w	r2, r1, r2
   1e126:	fa2a fa06 	lsr.w	sl, sl, r6
   1e12a:	bf58      	it	pl
   1e12c:	fa41 f303 	asrpl.w	r3, r1, r3
   1e130:	ea4a 0a02 	orr.w	sl, sl, r2
   1e134:	bf58      	it	pl
   1e136:	ea4a 0a03 	orrpl.w	sl, sl, r3
   1e13a:	fa41 fb06 	asr.w	fp, r1, r6
	val->val1 = conv_val / 1000000;
   1e13e:	4a72      	ldr	r2, [pc, #456]	; (1e308 <mpu6050_channel_get+0x21c>)
   1e140:	2300      	movs	r3, #0
   1e142:	4650      	mov	r0, sl
   1e144:	4659      	mov	r1, fp
   1e146:	f7e2 fe9f 	bl	e88 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
   1e14a:	4659      	mov	r1, fp
	val->val1 = conv_val / 1000000;
   1e14c:	6020      	str	r0, [r4, #0]
	val->val2 = conv_val % 1000000;
   1e14e:	4a6e      	ldr	r2, [pc, #440]	; (1e308 <mpu6050_channel_get+0x21c>)
   1e150:	4650      	mov	r0, sl
   1e152:	2300      	movs	r3, #0
   1e154:	f7e2 fe98 	bl	e88 <__aeabi_ldivmod>
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e158:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
	val->val2 = conv_val % 1000000;
   1e15c:	6062      	str	r2, [r4, #4]
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e15e:	17cb      	asrs	r3, r1, #31
   1e160:	fba1 a109 	umull	sl, r1, r1, r9
   1e164:	fb09 1103 	mla	r1, r9, r3, r1
   1e168:	f1c6 0820 	rsb	r8, r6, #32
   1e16c:	f1b6 0320 	subs.w	r3, r6, #32
   1e170:	fa01 f208 	lsl.w	r2, r1, r8
   1e174:	fa2a fa06 	lsr.w	sl, sl, r6
   1e178:	bf58      	it	pl
   1e17a:	fa41 f303 	asrpl.w	r3, r1, r3
   1e17e:	ea4a 0a02 	orr.w	sl, sl, r2
   1e182:	bf58      	it	pl
   1e184:	ea4a 0a03 	orrpl.w	sl, sl, r3
   1e188:	fa41 fb06 	asr.w	fp, r1, r6
	val->val1 = conv_val / 1000000;
   1e18c:	4a5e      	ldr	r2, [pc, #376]	; (1e308 <mpu6050_channel_get+0x21c>)
   1e18e:	2300      	movs	r3, #0
   1e190:	4650      	mov	r0, sl
   1e192:	4659      	mov	r1, fp
   1e194:	f7e2 fe78 	bl	e88 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
   1e198:	4a5b      	ldr	r2, [pc, #364]	; (1e308 <mpu6050_channel_get+0x21c>)
	val->val1 = conv_val / 1000000;
   1e19a:	60a0      	str	r0, [r4, #8]
	val->val2 = conv_val % 1000000;
   1e19c:	2300      	movs	r3, #0
   1e19e:	4650      	mov	r0, sl
   1e1a0:	4659      	mov	r1, fp
   1e1a2:	f7e2 fe71 	bl	e88 <__aeabi_ldivmod>
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e1a6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
	val->val2 = conv_val % 1000000;
   1e1aa:	60e2      	str	r2, [r4, #12]
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e1ac:	17cb      	asrs	r3, r1, #31
   1e1ae:	fba1 7109 	umull	r7, r1, r1, r9
   1e1b2:	fb09 1103 	mla	r1, r9, r3, r1
   1e1b6:	40f7      	lsrs	r7, r6
   1e1b8:	f1b6 0320 	subs.w	r3, r6, #32
   1e1bc:	fa01 f808 	lsl.w	r8, r1, r8
   1e1c0:	bf58      	it	pl
   1e1c2:	fa41 f303 	asrpl.w	r3, r1, r3
   1e1c6:	ea47 0708 	orr.w	r7, r7, r8
   1e1ca:	bf58      	it	pl
   1e1cc:	431f      	orrpl	r7, r3
   1e1ce:	fa41 f606 	asr.w	r6, r1, r6
	val->val1 = conv_val / 1000000;
   1e1d2:	4a4d      	ldr	r2, [pc, #308]	; (1e308 <mpu6050_channel_get+0x21c>)
   1e1d4:	2300      	movs	r3, #0
   1e1d6:	4638      	mov	r0, r7
   1e1d8:	4631      	mov	r1, r6
   1e1da:	f7e2 fe55 	bl	e88 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
   1e1de:	4a4a      	ldr	r2, [pc, #296]	; (1e308 <mpu6050_channel_get+0x21c>)
	val->val1 = conv_val / 1000000;
   1e1e0:	6120      	str	r0, [r4, #16]
	val->val2 = conv_val % 1000000;
   1e1e2:	2300      	movs	r3, #0
   1e1e4:	4638      	mov	r0, r7
   1e1e6:	4631      	mov	r1, r6
   1e1e8:	f7e2 fe4e 	bl	e88 <__aeabi_ldivmod>
   1e1ec:	6162      	str	r2, [r4, #20]
}
   1e1ee:	2000      	movs	r0, #0
   1e1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e1f4:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   1e1f8:	4a42      	ldr	r2, [pc, #264]	; (1e304 <mpu6050_channel_get+0x218>)
   1e1fa:	896e      	ldrh	r6, [r5, #10]
   1e1fc:	17c8      	asrs	r0, r1, #31
   1e1fe:	fba1 1302 	umull	r1, r3, r1, r2
   1e202:	fb02 3300 	mla	r3, r2, r0, r3
   1e206:	f1c6 0020 	rsb	r0, r6, #32
   1e20a:	f1b6 0220 	subs.w	r2, r6, #32
   1e20e:	fa21 f506 	lsr.w	r5, r1, r6
   1e212:	fa03 f000 	lsl.w	r0, r3, r0
   1e216:	bf58      	it	pl
   1e218:	fa43 f202 	asrpl.w	r2, r3, r2
   1e21c:	ea45 0500 	orr.w	r5, r5, r0
   1e220:	bf58      	it	pl
   1e222:	4315      	orrpl	r5, r2
   1e224:	fa43 f606 	asr.w	r6, r3, r6
	val->val1 = conv_val / 1000000;
   1e228:	4a37      	ldr	r2, [pc, #220]	; (1e308 <mpu6050_channel_get+0x21c>)
   1e22a:	2300      	movs	r3, #0
   1e22c:	4628      	mov	r0, r5
   1e22e:	4631      	mov	r1, r6
   1e230:	f7e2 fe2a 	bl	e88 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
   1e234:	4a34      	ldr	r2, [pc, #208]	; (1e308 <mpu6050_channel_get+0x21c>)
	val->val1 = conv_val / 1000000;
   1e236:	6020      	str	r0, [r4, #0]
	val->val2 = conv_val % 1000000;
   1e238:	2300      	movs	r3, #0
   1e23a:	4628      	mov	r0, r5
   1e23c:	4631      	mov	r1, r6
   1e23e:	f7e2 fe23 	bl	e88 <__aeabi_ldivmod>
   1e242:	6062      	str	r2, [r4, #4]
}
   1e244:	e7d3      	b.n	1e1ee <mpu6050_channel_get+0x102>
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
   1e246:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
   1e24a:	e7d5      	b.n	1e1f8 <mpu6050_channel_get+0x10c>
   1e24c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
   1e250:	e7d2      	b.n	1e1f8 <mpu6050_channel_get+0x10c>
		mpu6050_convert_gyro(val, drv_data->gyro_x,
   1e252:	8aaa      	ldrh	r2, [r5, #20]
   1e254:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   1e258:	4620      	mov	r0, r4
   1e25a:	f7ff fe0d 	bl	1de78 <mpu6050_convert_gyro>
		mpu6050_convert_gyro(val + 1, drv_data->gyro_y,
   1e25e:	8aaa      	ldrh	r2, [r5, #20]
   1e260:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   1e264:	f104 0008 	add.w	r0, r4, #8
   1e268:	f7ff fe06 	bl	1de78 <mpu6050_convert_gyro>
		mpu6050_convert_gyro(val + 2, drv_data->gyro_z,
   1e26c:	8aaa      	ldrh	r2, [r5, #20]
   1e26e:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
   1e272:	f104 0010 	add.w	r0, r4, #16
		mpu6050_convert_gyro(val, drv_data->gyro_z,
   1e276:	f7ff fdff 	bl	1de78 <mpu6050_convert_gyro>
		break;
   1e27a:	e7b8      	b.n	1e1ee <mpu6050_channel_get+0x102>
		mpu6050_convert_gyro(val, drv_data->gyro_x,
   1e27c:	8aaa      	ldrh	r2, [r5, #20]
   1e27e:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
		mpu6050_convert_gyro(val, drv_data->gyro_z,
   1e282:	4620      	mov	r0, r4
   1e284:	e7f7      	b.n	1e276 <mpu6050_channel_get+0x18a>
		mpu6050_convert_gyro(val, drv_data->gyro_y,
   1e286:	8aaa      	ldrh	r2, [r5, #20]
   1e288:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   1e28c:	e7f9      	b.n	1e282 <mpu6050_channel_get+0x196>
		mpu6050_convert_gyro(val, drv_data->gyro_z,
   1e28e:	8aaa      	ldrh	r2, [r5, #20]
   1e290:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
   1e294:	e7f5      	b.n	1e282 <mpu6050_channel_get+0x196>
		mpu6050_convert_temp(val, drv_data->temp);
   1e296:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
   1e29a:	4e1b      	ldr	r6, [pc, #108]	; (1e308 <mpu6050_channel_get+0x21c>)
	val->val1 = raw_val / 340 + 36;
   1e29c:	f44f 70aa 	mov.w	r0, #340	; 0x154
   1e2a0:	fb91 f3f0 	sdiv	r3, r1, r0
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
   1e2a4:	fb00 1113 	mls	r1, r0, r3, r1
	val->val1 = raw_val / 340 + 36;
   1e2a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
   1e2ac:	b208      	sxth	r0, r1
	val->val1 = raw_val / 340 + 36;
   1e2ae:	b212      	sxth	r2, r2
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
   1e2b0:	fba0 0706 	umull	r0, r7, r0, r6
   1e2b4:	f341 31c0 	sbfx	r1, r1, #15, #1
	val->val1 = raw_val / 340 + 36;
   1e2b8:	6022      	str	r2, [r4, #0]
   1e2ba:	b21d      	sxth	r5, r3
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
   1e2bc:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1e2c0:	2300      	movs	r3, #0
   1e2c2:	fb06 7101 	mla	r1, r6, r1, r7
   1e2c6:	f7e2 fddf 	bl	e88 <__aeabi_ldivmod>
   1e2ca:	f500 2201 	add.w	r2, r0, #528384	; 0x81000
   1e2ce:	f502 62ca 	add.w	r2, r2, #1616	; 0x650
	if (val->val2 < 0) {
   1e2d2:	2a00      	cmp	r2, #0
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
   1e2d4:	6062      	str	r2, [r4, #4]
	if (val->val2 < 0) {
   1e2d6:	da07      	bge.n	1e2e8 <mpu6050_channel_get+0x1fc>
		val->val1--;
   1e2d8:	f105 0323 	add.w	r3, r5, #35	; 0x23
   1e2dc:	b21b      	sxth	r3, r3
   1e2de:	6023      	str	r3, [r4, #0]
		val->val2 += 1000000;
   1e2e0:	4b0a      	ldr	r3, [pc, #40]	; (1e30c <mpu6050_channel_get+0x220>)
   1e2e2:	4403      	add	r3, r0
   1e2e4:	6063      	str	r3, [r4, #4]
   1e2e6:	e782      	b.n	1e1ee <mpu6050_channel_get+0x102>
	} else if (val->val2 >= 1000000) {
   1e2e8:	4b09      	ldr	r3, [pc, #36]	; (1e310 <mpu6050_channel_get+0x224>)
   1e2ea:	429a      	cmp	r2, r3
   1e2ec:	f77f af7f 	ble.w	1e1ee <mpu6050_channel_get+0x102>
		val->val1++;
   1e2f0:	f105 0325 	add.w	r3, r5, #37	; 0x25
		val->val2 -= 1000000;
   1e2f4:	f5a0 20e5 	sub.w	r0, r0, #468992	; 0x72800
		val->val1++;
   1e2f8:	b21b      	sxth	r3, r3
		val->val2 -= 1000000;
   1e2fa:	f5a0 707c 	sub.w	r0, r0, #1008	; 0x3f0
		val->val1++;
   1e2fe:	6023      	str	r3, [r4, #0]
		val->val2 -= 1000000;
   1e300:	6060      	str	r0, [r4, #4]
   1e302:	e774      	b.n	1e1ee <mpu6050_channel_get+0x102>
   1e304:	0095a33a 	.word	0x0095a33a
   1e308:	000f4240 	.word	0x000f4240
   1e30c:	00175890 	.word	0x00175890
   1e310:	000f423f 	.word	0x000f423f

0001e314 <mpu6050_gpio_callback>:
	return 0;
}

static void mpu6050_gpio_callback(const struct device *dev,
				  struct gpio_callback *cb, uint32_t pins)
{
   1e314:	b510      	push	{r4, lr}
	struct mpu6050_data *drv_data =
		CONTAINER_OF(cb, struct mpu6050_data, gpio_cb);
	const struct mpu6050_config *cfg = drv_data->dev->config;
   1e316:	f851 3c08 	ldr.w	r3, [r1, #-8]
{
   1e31a:	460c      	mov	r4, r1

	ARG_UNUSED(pins);

	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
   1e31c:	685b      	ldr	r3, [r3, #4]
   1e31e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e322:	7999      	ldrb	r1, [r3, #6]
   1e324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e328:	f008 fe21 	bl	26f6e <gpio_pin_interrupt_configure.isra.0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e32c:	f3bf 8f5b 	dmb	ish
   1e330:	f104 031c 	add.w	r3, r4, #28
   1e334:	e853 2f00 	ldrex	r2, [r3]
   1e338:	f042 0101 	orr.w	r1, r2, #1
   1e33c:	e843 1000 	strex	r0, r1, [r3]
   1e340:	2800      	cmp	r0, #0
   1e342:	d1f7      	bne.n	1e334 <mpu6050_gpio_callback+0x20>
   1e344:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e348:	07d3      	lsls	r3, r2, #31
   1e34a:	d406      	bmi.n	1e35a <mpu6050_gpio_callback+0x46>
		k_queue_append(&work_q->queue, work);
   1e34c:	f104 0114 	add.w	r1, r4, #20
   1e350:	4802      	ldr	r0, [pc, #8]	; (1e35c <mpu6050_gpio_callback+0x48>)
#if defined(CONFIG_MPU6050_TRIGGER_OWN_THREAD)
	k_sem_give(&drv_data->gpio_sem);
#elif defined(CONFIG_MPU6050_TRIGGER_GLOBAL_THREAD)
	k_work_submit(&drv_data->work);
#endif
}
   1e352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e356:	f009 b9e4 	b.w	27722 <k_queue_append>
   1e35a:	bd10      	pop	{r4, pc}
   1e35c:	2000b0f0 	.word	0x2000b0f0

0001e360 <mpu6050_init_interrupt>:
	mpu6050_thread_cb(drv_data->dev);
}
#endif

int mpu6050_init_interrupt(const struct device *dev)
{
   1e360:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct mpu6050_data *drv_data = dev->data;
	const struct mpu6050_config *cfg = dev->config;
   1e364:	6845      	ldr	r5, [r0, #4]
	struct mpu6050_data *drv_data = dev->data;
   1e366:	68c4      	ldr	r4, [r0, #12]
{
   1e368:	4606      	mov	r6, r0

	/* setup data ready gpio interrupt */
	drv_data->gpio = device_get_binding(cfg->int_label);
   1e36a:	68a8      	ldr	r0, [r5, #8]
   1e36c:	f001 fdbe 	bl	1feec <z_impl_device_get_binding>
   1e370:	61e0      	str	r0, [r4, #28]
	if (drv_data->gpio == NULL) {
   1e372:	b978      	cbnz	r0, 1e394 <mpu6050_init_interrupt+0x34>
   1e374:	4b34      	ldr	r3, [pc, #208]	; (1e448 <mpu6050_init_interrupt+0xe8>)
   1e376:	4a35      	ldr	r2, [pc, #212]	; (1e44c <mpu6050_init_interrupt+0xec>)
		LOG_ERR("Failed to get pointer to %s device",
   1e378:	4835      	ldr	r0, [pc, #212]	; (1e450 <mpu6050_init_interrupt+0xf0>)
   1e37a:	68a9      	ldr	r1, [r5, #8]
   1e37c:	1ad2      	subs	r2, r2, r3
   1e37e:	08d2      	lsrs	r2, r2, #3
   1e380:	0192      	lsls	r2, r2, #6
   1e382:	f042 0201 	orr.w	r2, r2, #1
   1e386:	f004 fc4a 	bl	22c1e <log_1>
			    cfg->int_label);
		return -EINVAL;
   1e38a:	f06f 0015 	mvn.w	r0, #21

	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
				     GPIO_INT_EDGE_TO_ACTIVE);

	return 0;
}
   1e38e:	b004      	add	sp, #16
   1e390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	drv_data->dev = dev;
   1e394:	61a6      	str	r6, [r4, #24]
	gpio_pin_configure(drv_data->gpio, cfg->int_pin,
   1e396:	f895 8006 	ldrb.w	r8, [r5, #6]
			   GPIO_INPUT | cfg->int_flags);
   1e39a:	79ef      	ldrb	r7, [r5, #7]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1e39c:	68c6      	ldr	r6, [r0, #12]
	return api->pin_configure(port, pin, flags);
   1e39e:	6883      	ldr	r3, [r0, #8]
   1e3a0:	f447 7280 	orr.w	r2, r7, #256	; 0x100
   1e3a4:	681b      	ldr	r3, [r3, #0]
   1e3a6:	4641      	mov	r1, r8
   1e3a8:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1e3aa:	b940      	cbnz	r0, 1e3be <mpu6050_init_interrupt+0x5e>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e3ac:	6833      	ldr	r3, [r6, #0]
   1e3ae:	2201      	movs	r2, #1
   1e3b0:	fa02 f108 	lsl.w	r1, r2, r8
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e3b4:	07fa      	lsls	r2, r7, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e3b6:	bf4c      	ite	mi
   1e3b8:	430b      	orrmi	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e3ba:	438b      	bicpl	r3, r1
   1e3bc:	6033      	str	r3, [r6, #0]
			   BIT(cfg->int_pin));
   1e3be:	79ab      	ldrb	r3, [r5, #6]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1e3c0:	4a24      	ldr	r2, [pc, #144]	; (1e454 <mpu6050_init_interrupt+0xf4>)
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   1e3c2:	69e0      	ldr	r0, [r4, #28]
			   BIT(cfg->int_pin));
   1e3c4:	2601      	movs	r6, #1
   1e3c6:	fa06 f303 	lsl.w	r3, r6, r3
	callback->pin_mask = pin_mask;
   1e3ca:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1e3ce:	6883      	ldr	r3, [r0, #8]
   1e3d0:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&drv_data->gpio_cb,
   1e3d2:	f104 0120 	add.w	r1, r4, #32
   1e3d6:	b963      	cbnz	r3, 1e3f2 <mpu6050_init_interrupt+0x92>
   1e3d8:	491c      	ldr	r1, [pc, #112]	; (1e44c <mpu6050_init_interrupt+0xec>)
   1e3da:	4b1b      	ldr	r3, [pc, #108]	; (1e448 <mpu6050_init_interrupt+0xe8>)
		LOG_ERR("Failed to set gpio callback");
   1e3dc:	481e      	ldr	r0, [pc, #120]	; (1e458 <mpu6050_init_interrupt+0xf8>)
   1e3de:	1ac9      	subs	r1, r1, r3
   1e3e0:	08c9      	lsrs	r1, r1, #3
   1e3e2:	0189      	lsls	r1, r1, #6
   1e3e4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Failed to enable data ready interrupt.");
   1e3e8:	f004 fc0c 	bl	22c04 <log_0>
		return -EIO;
   1e3ec:	f06f 0004 	mvn.w	r0, #4
   1e3f0:	e7cd      	b.n	1e38e <mpu6050_init_interrupt+0x2e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1e3f2:	4632      	mov	r2, r6
   1e3f4:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   1e3f6:	2800      	cmp	r0, #0
   1e3f8:	dbee      	blt.n	1e3d8 <mpu6050_init_interrupt+0x78>
	uint8_t tx_buf[2] = {reg_addr, value};
   1e3fa:	2238      	movs	r2, #56	; 0x38
	if (i2c_reg_write_byte(drv_data->i2c, cfg->i2c_addr,
   1e3fc:	6820      	ldr	r0, [r4, #0]
   1e3fe:	f88d 2000 	strb.w	r2, [sp]
	msg.len = num_bytes;
   1e402:	2202      	movs	r2, #2
   1e404:	88ab      	ldrh	r3, [r5, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   1e406:	f88d 6001 	strb.w	r6, [sp, #1]
	msg.buf = (uint8_t *)buf;
   1e40a:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   1e40e:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e410:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1e414:	6882      	ldr	r2, [r0, #8]
   1e416:	a901      	add	r1, sp, #4
   1e418:	6857      	ldr	r7, [r2, #4]
   1e41a:	4632      	mov	r2, r6
   1e41c:	47b8      	blx	r7
   1e41e:	2800      	cmp	r0, #0
   1e420:	da08      	bge.n	1e434 <mpu6050_init_interrupt+0xd4>
   1e422:	490a      	ldr	r1, [pc, #40]	; (1e44c <mpu6050_init_interrupt+0xec>)
   1e424:	4b08      	ldr	r3, [pc, #32]	; (1e448 <mpu6050_init_interrupt+0xe8>)
		LOG_ERR("Failed to enable data ready interrupt.");
   1e426:	480d      	ldr	r0, [pc, #52]	; (1e45c <mpu6050_init_interrupt+0xfc>)
   1e428:	1ac9      	subs	r1, r1, r3
   1e42a:	08c9      	lsrs	r1, r1, #3
   1e42c:	0189      	lsls	r1, r1, #6
   1e42e:	f041 0101 	orr.w	r1, r1, #1
   1e432:	e7d9      	b.n	1e3e8 <mpu6050_init_interrupt+0x88>
	drv_data->work.handler = mpu6050_work_cb;
   1e434:	4b0a      	ldr	r3, [pc, #40]	; (1e460 <mpu6050_init_interrupt+0x100>)
   1e436:	63a3      	str	r3, [r4, #56]	; 0x38
	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
   1e438:	69e0      	ldr	r0, [r4, #28]
   1e43a:	79a9      	ldrb	r1, [r5, #6]
   1e43c:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   1e440:	f008 fd95 	bl	26f6e <gpio_pin_interrupt_configure.isra.0>
	return 0;
   1e444:	2000      	movs	r0, #0
   1e446:	e7a2      	b.n	1e38e <mpu6050_init_interrupt+0x2e>
   1e448:	000281b4 	.word	0x000281b4
   1e44c:	000281b4 	.word	0x000281b4
   1e450:	0002e1a0 	.word	0x0002e1a0
   1e454:	0001e315 	.word	0x0001e315
   1e458:	0002e25b 	.word	0x0002e25b
   1e45c:	0002e277 	.word	0x0002e277
   1e460:	00026f73 	.word	0x00026f73

0001e464 <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
   1e464:	b538      	push	{r3, r4, r5, lr}
   1e466:	4604      	mov	r4, r0
   1e468:	2200      	movs	r2, #0
   1e46a:	2101      	movs	r1, #1
   1e46c:	2023      	movs	r0, #35	; 0x23
   1e46e:	f7e9 f95b 	bl	7728 <z_arm_irq_priority_set>
	return dev->data;
   1e472:	68e3      	ldr	r3, [r4, #12]
	return dev->config;
   1e474:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
   1e476:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1e478:	4a0d      	ldr	r2, [pc, #52]	; (1e4b0 <spi_2_init+0x4c>)
   1e47a:	f100 0108 	add.w	r1, r0, #8
   1e47e:	f001 f989 	bl	1f794 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1e482:	4b0c      	ldr	r3, [pc, #48]	; (1e4b4 <spi_2_init+0x50>)
   1e484:	4298      	cmp	r0, r3
   1e486:	d011      	beq.n	1e4ac <spi_2_init+0x48>
   1e488:	4b0b      	ldr	r3, [pc, #44]	; (1e4b8 <spi_2_init+0x54>)
   1e48a:	4a0c      	ldr	r2, [pc, #48]	; (1e4bc <spi_2_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1e48c:	6821      	ldr	r1, [r4, #0]
   1e48e:	480c      	ldr	r0, [pc, #48]	; (1e4c0 <spi_2_init+0x5c>)
   1e490:	1ad2      	subs	r2, r2, r3
   1e492:	08d2      	lsrs	r2, r2, #3
   1e494:	0192      	lsls	r2, r2, #6
   1e496:	f042 0201 	orr.w	r2, r2, #1
   1e49a:	f004 fbc0 	bl	22c1e <log_1>
		return -EBUSY;
   1e49e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(2);
   1e4a2:	68e0      	ldr	r0, [r4, #12]
   1e4a4:	f008 fdcb 	bl	2703e <spi_context_unlock_unconditionally>
   1e4a8:	4628      	mov	r0, r5
   1e4aa:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1e4ac:	2500      	movs	r5, #0
   1e4ae:	e7f8      	b.n	1e4a2 <spi_2_init+0x3e>
   1e4b0:	0001e541 	.word	0x0001e541
   1e4b4:	0bad0000 	.word	0x0bad0000
   1e4b8:	000281b4 	.word	0x000281b4
   1e4bc:	0002831c 	.word	0x0002831c
   1e4c0:	0002e0fa 	.word	0x0002e0fa

0001e4c4 <transfer_next_chunk>:
{
   1e4c4:	b530      	push	{r4, r5, lr}
	return dev->data;
   1e4c6:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1e4c8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		return ctx->rx_len;
   1e4ca:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1e4cc:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1e4ce:	b982      	cbnz	r2, 1e4f2 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1e4d0:	bb73      	cbnz	r3, 1e530 <transfer_next_chunk+0x6c>
	int error = 0;
   1e4d2:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1e4d4:	2200      	movs	r2, #0
   1e4d6:	4611      	mov	r1, r2
   1e4d8:	4628      	mov	r0, r5
   1e4da:	f008 fd8b 	bl	26ff4 <_spi_context_cs_control>
	ctx->sync_status = status;
   1e4de:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1e4e0:	f105 0020 	add.w	r0, r5, #32
   1e4e4:	f002 fb98 	bl	20c18 <z_impl_k_sem_give>
	dev_data->busy = false;
   1e4e8:	2300      	movs	r3, #0
   1e4ea:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1e4ee:	b005      	add	sp, #20
   1e4f0:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1e4f2:	4611      	mov	r1, r2
   1e4f4:	b113      	cbz	r3, 1e4fc <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1e4f6:	429a      	cmp	r2, r3
   1e4f8:	bf28      	it	cs
   1e4fa:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1e4fc:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1e4fe:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1e500:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1e502:	b1bc      	cbz	r4, 1e534 <transfer_next_chunk+0x70>
   1e504:	2a00      	cmp	r2, #0
   1e506:	bf18      	it	ne
   1e508:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e50a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1e50c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1e50e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1e510:	b192      	cbz	r2, 1e538 <transfer_next_chunk+0x74>
   1e512:	2b00      	cmp	r3, #0
   1e514:	bf18      	it	ne
   1e516:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1e518:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e51a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1e51c:	2200      	movs	r2, #0
   1e51e:	4669      	mov	r1, sp
   1e520:	f001 f9da 	bl	1f8d8 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1e524:	4b05      	ldr	r3, [pc, #20]	; (1e53c <transfer_next_chunk+0x78>)
   1e526:	4298      	cmp	r0, r3
   1e528:	d0e1      	beq.n	1e4ee <transfer_next_chunk+0x2a>
		error = -EIO;
   1e52a:	f06f 0404 	mvn.w	r4, #4
   1e52e:	e7d1      	b.n	1e4d4 <transfer_next_chunk+0x10>
   1e530:	4619      	mov	r1, r3
   1e532:	e7e3      	b.n	1e4fc <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e534:	4622      	mov	r2, r4
   1e536:	e7e8      	b.n	1e50a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e538:	4613      	mov	r3, r2
   1e53a:	e7ed      	b.n	1e518 <transfer_next_chunk+0x54>
   1e53c:	0bad0000 	.word	0x0bad0000

0001e540 <event_handler>:
{
   1e540:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1e542:	7803      	ldrb	r3, [r0, #0]
{
   1e544:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1e546:	2b00      	cmp	r3, #0
   1e548:	d14e      	bne.n	1e5e8 <event_handler+0xa8>
	if (!ctx->tx_len) {
   1e54a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1e54c:	b163      	cbz	r3, 1e568 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e54e:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1e550:	429a      	cmp	r2, r3
   1e552:	d91d      	bls.n	1e590 <event_handler+0x50>
   1e554:	4925      	ldr	r1, [pc, #148]	; (1e5ec <event_handler+0xac>)
   1e556:	4b26      	ldr	r3, [pc, #152]	; (1e5f0 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1e558:	4826      	ldr	r0, [pc, #152]	; (1e5f4 <event_handler+0xb4>)
   1e55a:	1ac9      	subs	r1, r1, r3
   1e55c:	08c9      	lsrs	r1, r1, #3
   1e55e:	0189      	lsls	r1, r1, #6
   1e560:	f041 0101 	orr.w	r1, r1, #1
   1e564:	f004 fb4e 	bl	22c04 <log_0>
	if (!ctx->rx_len) {
   1e568:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1e56a:	b163      	cbz	r3, 1e586 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e56c:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1e56e:	429a      	cmp	r2, r3
   1e570:	d924      	bls.n	1e5bc <event_handler+0x7c>
   1e572:	491e      	ldr	r1, [pc, #120]	; (1e5ec <event_handler+0xac>)
   1e574:	4b1e      	ldr	r3, [pc, #120]	; (1e5f0 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1e576:	481f      	ldr	r0, [pc, #124]	; (1e5f4 <event_handler+0xb4>)
   1e578:	1ac9      	subs	r1, r1, r3
   1e57a:	08c9      	lsrs	r1, r1, #3
   1e57c:	0189      	lsls	r1, r1, #6
   1e57e:	f041 0101 	orr.w	r1, r1, #1
   1e582:	f004 fb3f 	bl	22c04 <log_0>
		transfer_next_chunk(dev_data->dev);
   1e586:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1e588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1e58c:	f7ff bf9a 	b.w	1e4c4 <transfer_next_chunk>
	ctx->tx_len -= len;
   1e590:	1a9b      	subs	r3, r3, r2
   1e592:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1e594:	b963      	cbnz	r3, 1e5b0 <event_handler+0x70>
		ctx->tx_count--;
   1e596:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1e598:	3b01      	subs	r3, #1
   1e59a:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1e59c:	b163      	cbz	r3, 1e5b8 <event_handler+0x78>
			ctx->current_tx++;
   1e59e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1e5a0:	f103 0208 	add.w	r2, r3, #8
   1e5a4:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e5a6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1e5a8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e5aa:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1e5ac:	650b      	str	r3, [r1, #80]	; 0x50
   1e5ae:	e7db      	b.n	1e568 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1e5b0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1e5b2:	2b00      	cmp	r3, #0
   1e5b4:	d0d8      	beq.n	1e568 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1e5b6:	4413      	add	r3, r2
   1e5b8:	64e3      	str	r3, [r4, #76]	; 0x4c
   1e5ba:	e7d5      	b.n	1e568 <event_handler+0x28>
	ctx->rx_len -= len;
   1e5bc:	1a9b      	subs	r3, r3, r2
   1e5be:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1e5c0:	b963      	cbnz	r3, 1e5dc <event_handler+0x9c>
		ctx->rx_count--;
   1e5c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e5c4:	3b01      	subs	r3, #1
   1e5c6:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1e5c8:	b163      	cbz	r3, 1e5e4 <event_handler+0xa4>
			ctx->current_rx++;
   1e5ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e5cc:	f103 0208 	add.w	r2, r3, #8
   1e5d0:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e5d2:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1e5d4:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e5d6:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1e5d8:	65a3      	str	r3, [r4, #88]	; 0x58
   1e5da:	e7d4      	b.n	1e586 <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1e5dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1e5de:	2b00      	cmp	r3, #0
   1e5e0:	d0d1      	beq.n	1e586 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1e5e2:	4413      	add	r3, r2
   1e5e4:	6563      	str	r3, [r4, #84]	; 0x54
   1e5e6:	e7ce      	b.n	1e586 <event_handler+0x46>
}
   1e5e8:	bd10      	pop	{r4, pc}
   1e5ea:	bf00      	nop
   1e5ec:	0002831c 	.word	0x0002831c
   1e5f0:	000281b4 	.word	0x000281b4
   1e5f4:	0002e29e 	.word	0x0002e29e

0001e5f8 <spi_nrfx_transceive>:
{
   1e5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5fc:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e5fe:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
   1e600:	68c4      	ldr	r4, [r0, #12]
   1e602:	045b      	lsls	r3, r3, #17
{
   1e604:	4680      	mov	r8, r0
   1e606:	460d      	mov	r5, r1
   1e608:	4617      	mov	r7, r2
   1e60a:	d42d      	bmi.n	1e668 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1e60c:	f04f 32ff 	mov.w	r2, #4294967295
   1e610:	f04f 33ff 	mov.w	r3, #4294967295
   1e614:	f104 0008 	add.w	r0, r4, #8
   1e618:	f002 fb24 	bl	20c64 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1e61c:	6065      	str	r5, [r4, #4]
	return dev->data;
   1e61e:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   1e622:	6813      	ldr	r3, [r2, #0]
   1e624:	429d      	cmp	r5, r3
   1e626:	f000 80b1 	beq.w	1e78c <spi_nrfx_transceive+0x194>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1e62a:	88ab      	ldrh	r3, [r5, #4]
   1e62c:	07d8      	lsls	r0, r3, #31
   1e62e:	d522      	bpl.n	1e676 <spi_nrfx_transceive+0x7e>
   1e630:	4a82      	ldr	r2, [pc, #520]	; (1e83c <spi_nrfx_transceive+0x244>)
   1e632:	4b83      	ldr	r3, [pc, #524]	; (1e840 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Slave mode is not supported on %s",
   1e634:	f8d8 1000 	ldr.w	r1, [r8]
   1e638:	4882      	ldr	r0, [pc, #520]	; (1e844 <spi_nrfx_transceive+0x24c>)
   1e63a:	1ad2      	subs	r2, r2, r3
   1e63c:	08d2      	lsrs	r2, r2, #3
   1e63e:	0192      	lsls	r2, r2, #6
   1e640:	f042 0201 	orr.w	r2, r2, #1
   1e644:	f004 faeb 	bl	22c1e <log_1>
		return -EINVAL;
   1e648:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1e64c:	6823      	ldr	r3, [r4, #0]
   1e64e:	889b      	ldrh	r3, [r3, #4]
   1e650:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1e654:	d104      	bne.n	1e660 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1e656:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1e658:	f104 0008 	add.w	r0, r4, #8
   1e65c:	f002 fadc 	bl	20c18 <z_impl_k_sem_give>
}
   1e660:	4628      	mov	r0, r5
   1e662:	b003      	add	sp, #12
   1e664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e668:	6923      	ldr	r3, [r4, #16]
   1e66a:	2b00      	cmp	r3, #0
   1e66c:	d1ce      	bne.n	1e60c <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1e66e:	6863      	ldr	r3, [r4, #4]
   1e670:	4299      	cmp	r1, r3
   1e672:	d1cb      	bne.n	1e60c <spi_nrfx_transceive+0x14>
   1e674:	e7d3      	b.n	1e61e <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e676:	0719      	lsls	r1, r3, #28
   1e678:	d50a      	bpl.n	1e690 <spi_nrfx_transceive+0x98>
   1e67a:	4970      	ldr	r1, [pc, #448]	; (1e83c <spi_nrfx_transceive+0x244>)
   1e67c:	4b70      	ldr	r3, [pc, #448]	; (1e840 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Loopback mode is not supported");
   1e67e:	4872      	ldr	r0, [pc, #456]	; (1e848 <spi_nrfx_transceive+0x250>)
   1e680:	1ac9      	subs	r1, r1, r3
   1e682:	08c9      	lsrs	r1, r1, #3
   1e684:	0189      	lsls	r1, r1, #6
   1e686:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1e68a:	f004 fabb 	bl	22c04 <log_0>
   1e68e:	e7db      	b.n	1e648 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1e690:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1e694:	d008      	beq.n	1e6a8 <spi_nrfx_transceive+0xb0>
   1e696:	4969      	ldr	r1, [pc, #420]	; (1e83c <spi_nrfx_transceive+0x244>)
   1e698:	4b69      	ldr	r3, [pc, #420]	; (1e840 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Only single line mode is supported");
   1e69a:	486c      	ldr	r0, [pc, #432]	; (1e84c <spi_nrfx_transceive+0x254>)
   1e69c:	1ac9      	subs	r1, r1, r3
   1e69e:	08c9      	lsrs	r1, r1, #3
   1e6a0:	0189      	lsls	r1, r1, #6
   1e6a2:	f041 0101 	orr.w	r1, r1, #1
   1e6a6:	e7f0      	b.n	1e68a <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e6a8:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1e6ac:	2b08      	cmp	r3, #8
   1e6ae:	d008      	beq.n	1e6c2 <spi_nrfx_transceive+0xca>
   1e6b0:	4962      	ldr	r1, [pc, #392]	; (1e83c <spi_nrfx_transceive+0x244>)
   1e6b2:	4b63      	ldr	r3, [pc, #396]	; (1e840 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Word sizes other than 8 bits"
   1e6b4:	4866      	ldr	r0, [pc, #408]	; (1e850 <spi_nrfx_transceive+0x258>)
   1e6b6:	1ac9      	subs	r1, r1, r3
   1e6b8:	08c9      	lsrs	r1, r1, #3
   1e6ba:	0189      	lsls	r1, r1, #6
   1e6bc:	f041 0101 	orr.w	r1, r1, #1
   1e6c0:	e7e3      	b.n	1e68a <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1e6c2:	6829      	ldr	r1, [r5, #0]
   1e6c4:	4b63      	ldr	r3, [pc, #396]	; (1e854 <spi_nrfx_transceive+0x25c>)
   1e6c6:	4299      	cmp	r1, r3
   1e6c8:	d808      	bhi.n	1e6dc <spi_nrfx_transceive+0xe4>
   1e6ca:	495c      	ldr	r1, [pc, #368]	; (1e83c <spi_nrfx_transceive+0x244>)
   1e6cc:	4b5c      	ldr	r3, [pc, #368]	; (1e840 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e6ce:	4862      	ldr	r0, [pc, #392]	; (1e858 <spi_nrfx_transceive+0x260>)
   1e6d0:	1ac9      	subs	r1, r1, r3
   1e6d2:	08c9      	lsrs	r1, r1, #3
   1e6d4:	0189      	lsls	r1, r1, #6
   1e6d6:	f041 0101 	orr.w	r1, r1, #1
   1e6da:	e7d6      	b.n	1e68a <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1e6dc:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
   1e6de:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1e6e2:	6015      	str	r5, [r2, #0]
   1e6e4:	2b00      	cmp	r3, #0
   1e6e6:	d07b      	beq.n	1e7e0 <spi_nrfx_transceive+0x1e8>
   1e6e8:	6818      	ldr	r0, [r3, #0]
   1e6ea:	2800      	cmp	r0, #0
   1e6ec:	d078      	beq.n	1e7e0 <spi_nrfx_transceive+0x1e8>
				   ctx->config->cs->gpio_dt_flags |
   1e6ee:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1e6f2:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   1e6f4:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1e6f8:	f01a 0f01 	tst.w	sl, #1
   1e6fc:	bf0c      	ite	eq
   1e6fe:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   1e702:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   1e706:	6883      	ldr	r3, [r0, #8]
   1e708:	9101      	str	r1, [sp, #4]
   1e70a:	681b      	ldr	r3, [r3, #0]
   1e70c:	4652      	mov	r2, sl
   1e70e:	4798      	blx	r3
	if (ret != 0) {
   1e710:	b960      	cbnz	r0, 1e72c <spi_nrfx_transceive+0x134>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e712:	9901      	ldr	r1, [sp, #4]
   1e714:	f8db 3000 	ldr.w	r3, [fp]
   1e718:	2201      	movs	r2, #1
   1e71a:	fa02 f101 	lsl.w	r1, r2, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e71e:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e722:	bf14      	ite	ne
   1e724:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e726:	438b      	biceq	r3, r1
   1e728:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
   1e72c:	88a9      	ldrh	r1, [r5, #4]
   1e72e:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e732:	0788      	lsls	r0, r1, #30
   1e734:	f001 0304 	and.w	r3, r1, #4
   1e738:	d55d      	bpl.n	1e7f6 <spi_nrfx_transceive+0x1fe>
			return NRF_SPI_MODE_2;
   1e73a:	2b00      	cmp	r3, #0
   1e73c:	bf14      	ite	ne
   1e73e:	2303      	movne	r3, #3
   1e740:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1e742:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1e744:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1e748:	d059      	beq.n	1e7fe <spi_nrfx_transceive+0x206>
   1e74a:	2b03      	cmp	r3, #3
   1e74c:	d05a      	beq.n	1e804 <spi_nrfx_transceive+0x20c>
   1e74e:	2b01      	cmp	r3, #1
   1e750:	d101      	bne.n	1e756 <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1e752:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1e756:	4b41      	ldr	r3, [pc, #260]	; (1e85c <spi_nrfx_transceive+0x264>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1e758:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1e75c:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1e75e:	4299      	cmp	r1, r3
   1e760:	d953      	bls.n	1e80a <spi_nrfx_transceive+0x212>
	} else if (frequency < 500000) {
   1e762:	4b3f      	ldr	r3, [pc, #252]	; (1e860 <spi_nrfx_transceive+0x268>)
   1e764:	4299      	cmp	r1, r3
   1e766:	d953      	bls.n	1e810 <spi_nrfx_transceive+0x218>
	} else if (frequency < 1000000) {
   1e768:	4b3e      	ldr	r3, [pc, #248]	; (1e864 <spi_nrfx_transceive+0x26c>)
   1e76a:	4299      	cmp	r1, r3
   1e76c:	d953      	bls.n	1e816 <spi_nrfx_transceive+0x21e>
	} else if (frequency < 2000000) {
   1e76e:	4b3e      	ldr	r3, [pc, #248]	; (1e868 <spi_nrfx_transceive+0x270>)
   1e770:	4299      	cmp	r1, r3
   1e772:	d953      	bls.n	1e81c <spi_nrfx_transceive+0x224>
	} else if (frequency < 4000000) {
   1e774:	4b3d      	ldr	r3, [pc, #244]	; (1e86c <spi_nrfx_transceive+0x274>)
   1e776:	4299      	cmp	r1, r3
   1e778:	d953      	bls.n	1e822 <spi_nrfx_transceive+0x22a>
		return NRF_SPI_FREQ_8M;
   1e77a:	4b3d      	ldr	r3, [pc, #244]	; (1e870 <spi_nrfx_transceive+0x278>)
   1e77c:	4299      	cmp	r1, r3
   1e77e:	bf34      	ite	cc
   1e780:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1e784:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1e788:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1e78c:	2301      	movs	r3, #1
   1e78e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1e792:	2f00      	cmp	r7, #0
   1e794:	d048      	beq.n	1e828 <spi_nrfx_transceive+0x230>
		ctx->current_tx = tx_bufs->buffers;
   1e796:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1e798:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1e79a:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1e79c:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e79e:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1e7a0:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e7a2:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1e7a4:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1e7a6:	2e00      	cmp	r6, #0
   1e7a8:	d043      	beq.n	1e832 <spi_nrfx_transceive+0x23a>
		ctx->current_rx = rx_bufs->buffers;
   1e7aa:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1e7ac:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1e7ae:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1e7b0:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e7b2:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1e7b4:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e7b6:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1e7b8:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1e7ba:	2200      	movs	r2, #0
   1e7bc:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1e7be:	2101      	movs	r1, #1
   1e7c0:	4620      	mov	r0, r4
   1e7c2:	f008 fc17 	bl	26ff4 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1e7c6:	4640      	mov	r0, r8
   1e7c8:	f7ff fe7c 	bl	1e4c4 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1e7cc:	f04f 32ff 	mov.w	r2, #4294967295
   1e7d0:	f04f 33ff 	mov.w	r3, #4294967295
   1e7d4:	f104 0020 	add.w	r0, r4, #32
   1e7d8:	f002 fa44 	bl	20c64 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1e7dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1e7de:	e735      	b.n	1e64c <spi_nrfx_transceive+0x54>
   1e7e0:	4b17      	ldr	r3, [pc, #92]	; (1e840 <spi_nrfx_transceive+0x248>)
   1e7e2:	4916      	ldr	r1, [pc, #88]	; (1e83c <spi_nrfx_transceive+0x244>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1e7e4:	4823      	ldr	r0, [pc, #140]	; (1e874 <spi_nrfx_transceive+0x27c>)
   1e7e6:	1ac9      	subs	r1, r1, r3
   1e7e8:	08c9      	lsrs	r1, r1, #3
   1e7ea:	0189      	lsls	r1, r1, #6
   1e7ec:	f041 0103 	orr.w	r1, r1, #3
   1e7f0:	f004 fa08 	bl	22c04 <log_0>
   1e7f4:	e79a      	b.n	1e72c <spi_nrfx_transceive+0x134>
			return NRF_SPI_MODE_0;
   1e7f6:	3b00      	subs	r3, #0
   1e7f8:	bf18      	it	ne
   1e7fa:	2301      	movne	r3, #1
   1e7fc:	e7a1      	b.n	1e742 <spi_nrfx_transceive+0x14a>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1e7fe:	f041 0104 	orr.w	r1, r1, #4
        break;
   1e802:	e7a8      	b.n	1e756 <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1e804:	f041 0106 	orr.w	r1, r1, #6
        break;
   1e808:	e7a5      	b.n	1e756 <spi_nrfx_transceive+0x15e>
		return NRF_SPI_FREQ_125K;
   1e80a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1e80e:	e7bb      	b.n	1e788 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_250K;
   1e810:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1e814:	e7b8      	b.n	1e788 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_500K;
   1e816:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1e81a:	e7b5      	b.n	1e788 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_1M;
   1e81c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1e820:	e7b2      	b.n	1e788 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_2M;
   1e822:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1e826:	e7af      	b.n	1e788 <spi_nrfx_transceive+0x190>
		ctx->tx_count = 0;
   1e828:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1e82c:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1e830:	e7b9      	b.n	1e7a6 <spi_nrfx_transceive+0x1ae>
		ctx->rx_count = 0;
   1e832:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1e836:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1e83a:	e7be      	b.n	1e7ba <spi_nrfx_transceive+0x1c2>
   1e83c:	0002831c 	.word	0x0002831c
   1e840:	000281b4 	.word	0x000281b4
   1e844:	0002e2bc 	.word	0x0002e2bc
   1e848:	0002e2de 	.word	0x0002e2de
   1e84c:	0002e2fd 	.word	0x0002e2fd
   1e850:	0002e320 	.word	0x0002e320
   1e854:	0001e847 	.word	0x0001e847
   1e858:	0002e34f 	.word	0x0002e34f
   1e85c:	0003d08f 	.word	0x0003d08f
   1e860:	0007a11f 	.word	0x0007a11f
   1e864:	000f423f 	.word	0x000f423f
   1e868:	001e847f 	.word	0x001e847f
   1e86c:	003d08ff 	.word	0x003d08ff
   1e870:	007a1200 	.word	0x007a1200
   1e874:	0002e380 	.word	0x0002e380

0001e878 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e878:	4b02      	ldr	r3, [pc, #8]	; (1e884 <flash_nrf_pages_layout+0xc>)
   1e87a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e87c:	2301      	movs	r3, #1
   1e87e:	6013      	str	r3, [r2, #0]
}
   1e880:	4770      	bx	lr
   1e882:	bf00      	nop
   1e884:	2000f398 	.word	0x2000f398

0001e888 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e888:	4800      	ldr	r0, [pc, #0]	; (1e88c <flash_nrf_get_parameters+0x4>)
   1e88a:	4770      	bx	lr
   1e88c:	00029c80 	.word	0x00029c80

0001e890 <flash_nrf_read>:
{
   1e890:	b570      	push	{r4, r5, r6, lr}
   1e892:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1e894:	4628      	mov	r0, r5
   1e896:	4619      	mov	r1, r3
{
   1e898:	4616      	mov	r6, r2
   1e89a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e89c:	f008 fbf3 	bl	27086 <is_regular_addr_valid>
   1e8a0:	b970      	cbnz	r0, 1e8c0 <flash_nrf_read+0x30>
   1e8a2:	4a0c      	ldr	r2, [pc, #48]	; (1e8d4 <flash_nrf_read+0x44>)
   1e8a4:	4b0c      	ldr	r3, [pc, #48]	; (1e8d8 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e8a6:	480d      	ldr	r0, [pc, #52]	; (1e8dc <flash_nrf_read+0x4c>)
   1e8a8:	1a9b      	subs	r3, r3, r2
   1e8aa:	08db      	lsrs	r3, r3, #3
   1e8ac:	019b      	lsls	r3, r3, #6
   1e8ae:	f043 0301 	orr.w	r3, r3, #1
   1e8b2:	4622      	mov	r2, r4
   1e8b4:	4629      	mov	r1, r5
   1e8b6:	f004 f9c6 	bl	22c46 <log_2>
		return -EINVAL;
   1e8ba:	f06f 0015 	mvn.w	r0, #21
}
   1e8be:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1e8c0:	b134      	cbz	r4, 1e8d0 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1e8c2:	4622      	mov	r2, r4
   1e8c4:	4629      	mov	r1, r5
   1e8c6:	4630      	mov	r0, r6
   1e8c8:	f006 f9c2 	bl	24c50 <memcpy>
	return 0;
   1e8cc:	2000      	movs	r0, #0
   1e8ce:	e7f6      	b.n	1e8be <flash_nrf_read+0x2e>
		return 0;
   1e8d0:	4620      	mov	r0, r4
   1e8d2:	e7f4      	b.n	1e8be <flash_nrf_read+0x2e>
   1e8d4:	000281b4 	.word	0x000281b4
   1e8d8:	000282bc 	.word	0x000282bc
   1e8dc:	0002e3b3 	.word	0x0002e3b3

0001e8e0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1e8e0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e8e2:	2201      	movs	r2, #1
   1e8e4:	4611      	mov	r1, r2
   1e8e6:	4807      	ldr	r0, [pc, #28]	; (1e904 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e8e8:	4c07      	ldr	r4, [pc, #28]	; (1e908 <nrf_flash_init+0x28>)
   1e8ea:	f009 f858 	bl	2799e <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e8ee:	f000 f97d 	bl	1ebec <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e8f2:	f008 fd06 	bl	27302 <nrfx_nvmc_flash_page_count_get>
   1e8f6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e8f8:	f008 fcff 	bl	272fa <nrfx_nvmc_flash_page_size_get>
   1e8fc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1e8fe:	2000      	movs	r0, #0
   1e900:	bd10      	pop	{r4, pc}
   1e902:	bf00      	nop
   1e904:	2000f3a0 	.word	0x2000f3a0
   1e908:	2000f398 	.word	0x2000f398

0001e90c <flash_nrf_erase>:
{
   1e90c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e90e:	b087      	sub	sp, #28
   1e910:	460e      	mov	r6, r1
   1e912:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e914:	f008 fcf1 	bl	272fa <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e918:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e91a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e91c:	4630      	mov	r0, r6
   1e91e:	f008 fbb2 	bl	27086 <is_regular_addr_valid>
   1e922:	b388      	cbz	r0, 1e988 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e924:	fbb6 f3f7 	udiv	r3, r6, r7
   1e928:	fb07 6313 	mls	r3, r7, r3, r6
   1e92c:	b923      	cbnz	r3, 1e938 <flash_nrf_erase+0x2c>
   1e92e:	fbb5 f4f7 	udiv	r4, r5, r7
   1e932:	fb07 5414 	mls	r4, r7, r4, r5
   1e936:	b184      	cbz	r4, 1e95a <flash_nrf_erase+0x4e>
   1e938:	4a25      	ldr	r2, [pc, #148]	; (1e9d0 <flash_nrf_erase+0xc4>)
   1e93a:	4b26      	ldr	r3, [pc, #152]	; (1e9d4 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e93c:	4826      	ldr	r0, [pc, #152]	; (1e9d8 <flash_nrf_erase+0xcc>)
   1e93e:	1a9b      	subs	r3, r3, r2
   1e940:	08db      	lsrs	r3, r3, #3
   1e942:	019b      	lsls	r3, r3, #6
   1e944:	f043 0301 	orr.w	r3, r3, #1
   1e948:	462a      	mov	r2, r5
   1e94a:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e94c:	f004 f97b 	bl	22c46 <log_2>
		return -EINVAL;
   1e950:	f06f 0415 	mvn.w	r4, #21
}
   1e954:	4620      	mov	r0, r4
   1e956:	b007      	add	sp, #28
   1e958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e95a:	42bd      	cmp	r5, r7
   1e95c:	d3fa      	bcc.n	1e954 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1e95e:	f04f 33ff 	mov.w	r3, #4294967295
   1e962:	f04f 32ff 	mov.w	r2, #4294967295
   1e966:	481d      	ldr	r0, [pc, #116]	; (1e9dc <flash_nrf_erase+0xd0>)
   1e968:	f002 f97c 	bl	20c64 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e96c:	f008 fbc3 	bl	270f6 <nrf_flash_sync_is_required>
   1e970:	ab02      	add	r3, sp, #8
   1e972:	4601      	mov	r1, r0
   1e974:	b998      	cbnz	r0, 1e99e <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1e976:	2210      	movs	r2, #16
   1e978:	4618      	mov	r0, r3
   1e97a:	f006 f994 	bl	24ca6 <memset>
   1e97e:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1e982:	f008 fb93 	bl	270ac <erase_op>
   1e986:	e01d      	b.n	1e9c4 <flash_nrf_erase+0xb8>
   1e988:	4a11      	ldr	r2, [pc, #68]	; (1e9d0 <flash_nrf_erase+0xc4>)
   1e98a:	4b12      	ldr	r3, [pc, #72]	; (1e9d4 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e98c:	4814      	ldr	r0, [pc, #80]	; (1e9e0 <flash_nrf_erase+0xd4>)
   1e98e:	1a9b      	subs	r3, r3, r2
   1e990:	08db      	lsrs	r3, r3, #3
   1e992:	019b      	lsls	r3, r3, #6
   1e994:	f043 0301 	orr.w	r3, r3, #1
   1e998:	462a      	mov	r2, r5
   1e99a:	4631      	mov	r1, r6
   1e99c:	e7d6      	b.n	1e94c <flash_nrf_erase+0x40>
	struct flash_context context = {
   1e99e:	2210      	movs	r2, #16
   1e9a0:	4621      	mov	r1, r4
   1e9a2:	4618      	mov	r0, r3
   1e9a4:	f006 f97f 	bl	24ca6 <memset>
   1e9a8:	2201      	movs	r2, #1
   1e9aa:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e9ae:	4a0d      	ldr	r2, [pc, #52]	; (1e9e4 <flash_nrf_erase+0xd8>)
   1e9b0:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e9b4:	480c      	ldr	r0, [pc, #48]	; (1e9e8 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1e9b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e9ba:	f000 f921 	bl	1ec00 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e9be:	4668      	mov	r0, sp
   1e9c0:	f7e3 ff4a 	bl	2858 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e9c4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e9c6:	4805      	ldr	r0, [pc, #20]	; (1e9dc <flash_nrf_erase+0xd0>)
   1e9c8:	f002 f926 	bl	20c18 <z_impl_k_sem_give>
}
   1e9cc:	e7c2      	b.n	1e954 <flash_nrf_erase+0x48>
   1e9ce:	bf00      	nop
   1e9d0:	000281b4 	.word	0x000281b4
   1e9d4:	000282bc 	.word	0x000282bc
   1e9d8:	0002e3d0 	.word	0x0002e3d0
   1e9dc:	2000f3a0 	.word	0x2000f3a0
   1e9e0:	0002e3b3 	.word	0x0002e3b3
   1e9e4:	000270ad 	.word	0x000270ad
   1e9e8:	00015e64 	.word	0x00015e64

0001e9ec <write_op>:
{
   1e9ec:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1e9ee:	7b03      	ldrb	r3, [r0, #12]
{
   1e9f0:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e9f2:	b10b      	cbz	r3, 1e9f8 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e9f4:	f000 f90c 	bl	1ec10 <nrf_flash_sync_get_timestamp_begin>
{
   1e9f8:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e9fa:	68a3      	ldr	r3, [r4, #8]
   1e9fc:	2b03      	cmp	r3, #3
   1e9fe:	d806      	bhi.n	1ea0e <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1ea00:	4a12      	ldr	r2, [pc, #72]	; (1ea4c <write_op+0x60>)
   1ea02:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1ea06:	07db      	lsls	r3, r3, #31
   1ea08:	d5fb      	bpl.n	1ea02 <write_op+0x16>
	return FLASH_OP_DONE;
   1ea0a:	2000      	movs	r0, #0
}
   1ea0c:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1ea0e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1ea10:	6860      	ldr	r0, [r4, #4]
   1ea12:	6819      	ldr	r1, [r3, #0]
   1ea14:	f000 fe68 	bl	1f6e8 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1ea18:	6863      	ldr	r3, [r4, #4]
   1ea1a:	3304      	adds	r3, #4
   1ea1c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1ea1e:	6823      	ldr	r3, [r4, #0]
   1ea20:	3304      	adds	r3, #4
   1ea22:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1ea24:	68a3      	ldr	r3, [r4, #8]
   1ea26:	3b04      	subs	r3, #4
   1ea28:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1ea2a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1ea2c:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1ea2e:	2b00      	cmp	r3, #0
   1ea30:	d0e3      	beq.n	1e9fa <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1ea32:	4628      	mov	r0, r5
   1ea34:	f7e3 ff8c 	bl	2950 <nrf_flash_sync_check_time_limit>
   1ea38:	2800      	cmp	r0, #0
   1ea3a:	d0de      	beq.n	1e9fa <write_op+0xe>
   1ea3c:	4a03      	ldr	r2, [pc, #12]	; (1ea4c <write_op+0x60>)
   1ea3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1ea42:	07d9      	lsls	r1, r3, #31
   1ea44:	d5fb      	bpl.n	1ea3e <write_op+0x52>
				return FLASH_OP_ONGOING;
   1ea46:	f04f 30ff 	mov.w	r0, #4294967295
   1ea4a:	e7df      	b.n	1ea0c <write_op+0x20>
   1ea4c:	4001e000 	.word	0x4001e000

0001ea50 <flash_nrf_write>:
{
   1ea50:	b570      	push	{r4, r5, r6, lr}
   1ea52:	460d      	mov	r5, r1
   1ea54:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1ea56:	4619      	mov	r1, r3
   1ea58:	4628      	mov	r0, r5
{
   1ea5a:	4616      	mov	r6, r2
   1ea5c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1ea5e:	f008 fb12 	bl	27086 <is_regular_addr_valid>
   1ea62:	b980      	cbnz	r0, 1ea86 <flash_nrf_write+0x36>
   1ea64:	4a23      	ldr	r2, [pc, #140]	; (1eaf4 <flash_nrf_write+0xa4>)
   1ea66:	4b24      	ldr	r3, [pc, #144]	; (1eaf8 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ea68:	4824      	ldr	r0, [pc, #144]	; (1eafc <flash_nrf_write+0xac>)
   1ea6a:	1a9b      	subs	r3, r3, r2
   1ea6c:	08db      	lsrs	r3, r3, #3
   1ea6e:	019b      	lsls	r3, r3, #6
   1ea70:	f043 0301 	orr.w	r3, r3, #1
   1ea74:	4622      	mov	r2, r4
   1ea76:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ea78:	f004 f8e5 	bl	22c46 <log_2>
		return -EINVAL;
   1ea7c:	f06f 0415 	mvn.w	r4, #21
}
   1ea80:	4620      	mov	r0, r4
   1ea82:	b006      	add	sp, #24
   1ea84:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1ea86:	ea44 0305 	orr.w	r3, r4, r5
   1ea8a:	079b      	lsls	r3, r3, #30
   1ea8c:	d00a      	beq.n	1eaa4 <flash_nrf_write+0x54>
   1ea8e:	4a19      	ldr	r2, [pc, #100]	; (1eaf4 <flash_nrf_write+0xa4>)
   1ea90:	4b19      	ldr	r3, [pc, #100]	; (1eaf8 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ea92:	481b      	ldr	r0, [pc, #108]	; (1eb00 <flash_nrf_write+0xb0>)
   1ea94:	1a9b      	subs	r3, r3, r2
   1ea96:	08db      	lsrs	r3, r3, #3
   1ea98:	019b      	lsls	r3, r3, #6
   1ea9a:	f043 0301 	orr.w	r3, r3, #1
   1ea9e:	4622      	mov	r2, r4
   1eaa0:	4629      	mov	r1, r5
   1eaa2:	e7e9      	b.n	1ea78 <flash_nrf_write+0x28>
	if (!len) {
   1eaa4:	2c00      	cmp	r4, #0
   1eaa6:	d0eb      	beq.n	1ea80 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1eaa8:	f04f 33ff 	mov.w	r3, #4294967295
   1eaac:	f04f 32ff 	mov.w	r2, #4294967295
   1eab0:	4814      	ldr	r0, [pc, #80]	; (1eb04 <flash_nrf_write+0xb4>)
   1eab2:	f002 f8d7 	bl	20c64 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1eab6:	f008 fb1e 	bl	270f6 <nrf_flash_sync_is_required>
   1eaba:	4603      	mov	r3, r0
	struct flash_context context = {
   1eabc:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1eac0:	a802      	add	r0, sp, #8
   1eac2:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1eac4:	b18b      	cbz	r3, 1eaea <flash_nrf_write+0x9a>
	struct flash_context context = {
   1eac6:	2301      	movs	r3, #1
   1eac8:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1eacc:	4b0e      	ldr	r3, [pc, #56]	; (1eb08 <flash_nrf_write+0xb8>)
   1eace:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1ead2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1ead6:	f000 f893 	bl	1ec00 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1eada:	4668      	mov	r0, sp
   1eadc:	f7e3 febc 	bl	2858 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1eae0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1eae2:	4808      	ldr	r0, [pc, #32]	; (1eb04 <flash_nrf_write+0xb4>)
   1eae4:	f002 f898 	bl	20c18 <z_impl_k_sem_give>
}
   1eae8:	e7ca      	b.n	1ea80 <flash_nrf_write+0x30>
	struct flash_context context = {
   1eaea:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1eaee:	f7ff ff7d 	bl	1e9ec <write_op>
   1eaf2:	e7f5      	b.n	1eae0 <flash_nrf_write+0x90>
   1eaf4:	000281b4 	.word	0x000281b4
   1eaf8:	000282bc 	.word	0x000282bc
   1eafc:	0002e3b3 	.word	0x0002e3b3
   1eb00:	0002e3ef 	.word	0x0002e3ef
   1eb04:	2000f3a0 	.word	0x2000f3a0
   1eb08:	0001e9ed 	.word	0x0001e9ed

0001eb0c <time_slot_callback_work>:
{
   1eb0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1eb0e:	e9d3 2000 	ldrd	r2, r0, [r3]
   1eb12:	4790      	blx	r2
   1eb14:	4604      	mov	r4, r0
   1eb16:	b998      	cbnz	r0, 1eb40 <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1eb18:	f10d 010f 	add.w	r1, sp, #15
   1eb1c:	f10d 000e 	add.w	r0, sp, #14
   1eb20:	f7f5 fd3c 	bl	1459c <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1eb24:	4623      	mov	r3, r4
   1eb26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1eb2a:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1eb2e:	9400      	str	r4, [sp, #0]
   1eb30:	4621      	mov	r1, r4
   1eb32:	f7f3 f983 	bl	11e3c <ticker_stop>
		_ticker_sync_context.result = 0;
   1eb36:	4b03      	ldr	r3, [pc, #12]	; (1eb44 <time_slot_callback_work+0x38>)
   1eb38:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   1eb3a:	4803      	ldr	r0, [pc, #12]	; (1eb48 <time_slot_callback_work+0x3c>)
   1eb3c:	f002 f86c 	bl	20c18 <z_impl_k_sem_give>
}
   1eb40:	b004      	add	sp, #16
   1eb42:	bd10      	pop	{r4, pc}
   1eb44:	2000f3b8 	.word	0x2000f3b8
   1eb48:	2000f3c8 	.word	0x2000f3c8

0001eb4c <time_slot_delay>:
{
   1eb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eb50:	b08d      	sub	sp, #52	; 0x34
   1eb52:	4606      	mov	r6, r0
   1eb54:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1eb56:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1eb5a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1eb5e:	4690      	mov	r8, r2
   1eb60:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1eb62:	f7f5 fd1b 	bl	1459c <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1eb66:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1eb6a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1eb6e:	9700      	str	r7, [sp, #0]
   1eb70:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1eb72:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1eb74:	4633      	mov	r3, r6
   1eb76:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1eb7a:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1eb7e:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1eb82:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1eb86:	b2ea      	uxtb	r2, r5
   1eb88:	4621      	mov	r1, r4
   1eb8a:	f7f3 f8cd 	bl	11d28 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1eb8e:	f030 0302 	bics.w	r3, r0, #2
   1eb92:	d00d      	beq.n	1ebb0 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   1eb94:	4b08      	ldr	r3, [pc, #32]	; (1ebb8 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1eb96:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   1eb9a:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1eb9c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1eba0:	9400      	str	r4, [sp, #0]
   1eba2:	4623      	mov	r3, r4
   1eba4:	4621      	mov	r1, r4
   1eba6:	f7f3 f949 	bl	11e3c <ticker_stop>
   1ebaa:	4804      	ldr	r0, [pc, #16]	; (1ebbc <time_slot_delay+0x70>)
   1ebac:	f002 f834 	bl	20c18 <z_impl_k_sem_give>
}
   1ebb0:	b00d      	add	sp, #52	; 0x34
   1ebb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ebb6:	bf00      	nop
   1ebb8:	2000f3b8 	.word	0x2000f3b8
   1ebbc:	2000f3c8 	.word	0x2000f3c8

0001ebc0 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1ebc0:	4a01      	ldr	r2, [pc, #4]	; (1ebc8 <time_slot_callback_prepare+0x8>)
   1ebc2:	2131      	movs	r1, #49	; 0x31
   1ebc4:	f7ff bfc2 	b.w	1eb4c <time_slot_delay>
   1ebc8:	0001ebcd 	.word	0x0001ebcd

0001ebcc <time_slot_callback_abort>:
{
   1ebcc:	b570      	push	{r4, r5, r6, lr}
   1ebce:	4604      	mov	r4, r0
   1ebd0:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1ebd2:	f7f5 fce9 	bl	145a8 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1ebd6:	462b      	mov	r3, r5
   1ebd8:	4620      	mov	r0, r4
   1ebda:	4a03      	ldr	r2, [pc, #12]	; (1ebe8 <time_slot_callback_abort+0x1c>)
}
   1ebdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1ebe0:	2106      	movs	r1, #6
   1ebe2:	f7ff bfb3 	b.w	1eb4c <time_slot_delay>
   1ebe6:	bf00      	nop
   1ebe8:	0001eb0d 	.word	0x0001eb0d

0001ebec <nrf_flash_sync_init>:
{
   1ebec:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ebee:	2201      	movs	r2, #1
   1ebf0:	2100      	movs	r1, #0
   1ebf2:	4802      	ldr	r0, [pc, #8]	; (1ebfc <nrf_flash_sync_init+0x10>)
   1ebf4:	f008 fed3 	bl	2799e <z_impl_k_sem_init>
}
   1ebf8:	2000      	movs	r0, #0
   1ebfa:	bd08      	pop	{r3, pc}
   1ebfc:	2000f3c8 	.word	0x2000f3c8

0001ec00 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1ec00:	4b02      	ldr	r3, [pc, #8]	; (1ec0c <nrf_flash_sync_set_context+0xc>)
   1ec02:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1ec06:	e9c3 2000 	strd	r2, r0, [r3]
}
   1ec0a:	4770      	bx	lr
   1ec0c:	2000f3b8 	.word	0x2000f3b8

0001ec10 <nrf_flash_sync_get_timestamp_begin>:
{
   1ec10:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1ec12:	f7f3 f955 	bl	11ec0 <ticker_ticks_now_get>
   1ec16:	4b01      	ldr	r3, [pc, #4]	; (1ec1c <nrf_flash_sync_get_timestamp_begin+0xc>)
   1ec18:	6098      	str	r0, [r3, #8]
}
   1ec1a:	bd08      	pop	{r3, pc}
   1ec1c:	2000f3b8 	.word	0x2000f3b8

0001ec20 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1ec20:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1ec22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ec26:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1ec28:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1ec2a:	6002      	str	r2, [r0, #0]
}
   1ec2c:	4802      	ldr	r0, [pc, #8]	; (1ec38 <nrf_gpio_pin_port_decode+0x18>)
   1ec2e:	bf18      	it	ne
   1ec30:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1ec34:	4770      	bx	lr
   1ec36:	bf00      	nop
   1ec38:	50000300 	.word	0x50000300

0001ec3c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1ec3e:	794b      	ldrb	r3, [r1, #5]
   1ec40:	2b01      	cmp	r3, #1
   1ec42:	d029      	beq.n	1ec98 <uarte_nrfx_configure+0x5c>
   1ec44:	2b03      	cmp	r3, #3
   1ec46:	d124      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1ec48:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1ec4a:	798b      	ldrb	r3, [r1, #6]
   1ec4c:	2b03      	cmp	r3, #3
   1ec4e:	d120      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1ec50:	79cc      	ldrb	r4, [r1, #7]
   1ec52:	b124      	cbz	r4, 1ec5e <uarte_nrfx_configure+0x22>
   1ec54:	2c01      	cmp	r4, #1
   1ec56:	d11c      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1ec58:	6843      	ldr	r3, [r0, #4]
   1ec5a:	791b      	ldrb	r3, [r3, #4]
   1ec5c:	b1cb      	cbz	r3, 1ec92 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1ec5e:	790a      	ldrb	r2, [r1, #4]
   1ec60:	b112      	cbz	r2, 1ec68 <uarte_nrfx_configure+0x2c>
   1ec62:	2a02      	cmp	r2, #2
   1ec64:	d115      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1ec66:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1ec68:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1ec6a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1ec6c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1ec70:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1ec72:	d065      	beq.n	1ed40 <uarte_nrfx_configure+0x104>
   1ec74:	d82d      	bhi.n	1ecd2 <uarte_nrfx_configure+0x96>
   1ec76:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1ec7a:	d064      	beq.n	1ed46 <uarte_nrfx_configure+0x10a>
   1ec7c:	d816      	bhi.n	1ecac <uarte_nrfx_configure+0x70>
   1ec7e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1ec82:	d062      	beq.n	1ed4a <uarte_nrfx_configure+0x10e>
   1ec84:	d80a      	bhi.n	1ec9c <uarte_nrfx_configure+0x60>
   1ec86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1ec8a:	d061      	beq.n	1ed50 <uarte_nrfx_configure+0x114>
   1ec8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1ec90:	d061      	beq.n	1ed56 <uarte_nrfx_configure+0x11a>
   1ec92:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ec96:	e052      	b.n	1ed3e <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1ec98:	2600      	movs	r6, #0
   1ec9a:	e7d6      	b.n	1ec4a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1ec9c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1eca0:	d05c      	beq.n	1ed5c <uarte_nrfx_configure+0x120>
   1eca2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1eca6:	d1f4      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1eca8:	4b37      	ldr	r3, [pc, #220]	; (1ed88 <uarte_nrfx_configure+0x14c>)
   1ecaa:	e03c      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecac:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1ecb0:	d057      	beq.n	1ed62 <uarte_nrfx_configure+0x126>
   1ecb2:	d807      	bhi.n	1ecc4 <uarte_nrfx_configure+0x88>
   1ecb4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1ecb8:	d055      	beq.n	1ed66 <uarte_nrfx_configure+0x12a>
   1ecba:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1ecbe:	d1e8      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1ecc0:	4b32      	ldr	r3, [pc, #200]	; (1ed8c <uarte_nrfx_configure+0x150>)
   1ecc2:	e030      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecc4:	f647 2712 	movw	r7, #31250	; 0x7a12
   1ecc8:	42bb      	cmp	r3, r7
   1ecca:	d1e2      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1eccc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1ecd0:	e029      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecd2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1ecd6:	d048      	beq.n	1ed6a <uarte_nrfx_configure+0x12e>
   1ecd8:	d813      	bhi.n	1ed02 <uarte_nrfx_configure+0xc6>
   1ecda:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1ecde:	d047      	beq.n	1ed70 <uarte_nrfx_configure+0x134>
   1ece0:	d809      	bhi.n	1ecf6 <uarte_nrfx_configure+0xba>
   1ece2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1ece6:	42bb      	cmp	r3, r7
   1ece8:	d044      	beq.n	1ed74 <uarte_nrfx_configure+0x138>
   1ecea:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1ecee:	d1d0      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1ecf0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1ecf4:	e017      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecf6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1ecfa:	d1ca      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1ecfc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1ed00:	e011      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ed02:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1ed06:	d038      	beq.n	1ed7a <uarte_nrfx_configure+0x13e>
   1ed08:	d808      	bhi.n	1ed1c <uarte_nrfx_configure+0xe0>
   1ed0a:	4f21      	ldr	r7, [pc, #132]	; (1ed90 <uarte_nrfx_configure+0x154>)
   1ed0c:	42bb      	cmp	r3, r7
   1ed0e:	d037      	beq.n	1ed80 <uarte_nrfx_configure+0x144>
   1ed10:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1ed14:	d1bd      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1ed16:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1ed1a:	e004      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ed1c:	4f1d      	ldr	r7, [pc, #116]	; (1ed94 <uarte_nrfx_configure+0x158>)
   1ed1e:	42bb      	cmp	r3, r7
   1ed20:	d1b7      	bne.n	1ec92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ed22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1ed26:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1ed2a:	68c3      	ldr	r3, [r0, #12]
   1ed2c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1ed2e:	4334      	orrs	r4, r6
   1ed30:	4322      	orrs	r2, r4
   1ed32:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ed34:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1ed38:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1ed3c:	2000      	movs	r0, #0
}
   1ed3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ed40:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ed44:	e7ef      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ed46:	4b14      	ldr	r3, [pc, #80]	; (1ed98 <uarte_nrfx_configure+0x15c>)
   1ed48:	e7ed      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ed4a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ed4e:	e7ea      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1ed50:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ed54:	e7e7      	b.n	1ed26 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ed56:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1ed5a:	e7e4      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1ed5c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ed60:	e7e1      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1ed62:	4b0e      	ldr	r3, [pc, #56]	; (1ed9c <uarte_nrfx_configure+0x160>)
   1ed64:	e7df      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1ed66:	4b0e      	ldr	r3, [pc, #56]	; (1eda0 <uarte_nrfx_configure+0x164>)
   1ed68:	e7dd      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1ed6a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1ed6e:	e7da      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1ed70:	4b0c      	ldr	r3, [pc, #48]	; (1eda4 <uarte_nrfx_configure+0x168>)
   1ed72:	e7d8      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1ed74:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ed78:	e7d5      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1ed7a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ed7e:	e7d2      	b.n	1ed26 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1ed80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ed84:	e7cf      	b.n	1ed26 <uarte_nrfx_configure+0xea>
   1ed86:	bf00      	nop
   1ed88:	0013b000 	.word	0x0013b000
   1ed8c:	004ea000 	.word	0x004ea000
   1ed90:	0003d090 	.word	0x0003d090
   1ed94:	000f4240 	.word	0x000f4240
   1ed98:	00275000 	.word	0x00275000
   1ed9c:	0075c000 	.word	0x0075c000
   1eda0:	003af000 	.word	0x003af000
   1eda4:	013a9000 	.word	0x013a9000

0001eda8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1eda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return dev->data;
   1edac:	68c7      	ldr	r7, [r0, #12]
{
   1edae:	4606      	mov	r6, r0
   1edb0:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1edb2:	f008 fe04 	bl	279be <k_is_in_isr>
   1edb6:	b9b8      	cbnz	r0, 1ede8 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1edb8:	4b28      	ldr	r3, [pc, #160]	; (1ee5c <uarte_nrfx_poll_out+0xb4>)
   1edba:	781b      	ldrb	r3, [r3, #0]
   1edbc:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1edc0:	6872      	ldr	r2, [r6, #4]
   1edc2:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1edc4:	b193      	cbz	r3, 1edec <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1edc6:	f04f 0320 	mov.w	r3, #32
   1edca:	f3ef 8411 	mrs	r4, BASEPRI
   1edce:	f383 8811 	msr	BASEPRI, r3
   1edd2:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1edd6:	6870      	ldr	r0, [r6, #4]
   1edd8:	f008 fa21 	bl	2721e <is_tx_ready.isra.0>
   1eddc:	bb38      	cbnz	r0, 1ee2e <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1edde:	f384 8811 	msr	BASEPRI, r4
   1ede2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1ede6:	e7ee      	b.n	1edc6 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ede8:	2301      	movs	r3, #1
   1edea:	e7e9      	b.n	1edc0 <uarte_nrfx_poll_out+0x18>
   1edec:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1edee:	6870      	ldr	r0, [r6, #4]
   1edf0:	f008 fa15 	bl	2721e <is_tx_ready.isra.0>
   1edf4:	b970      	cbnz	r0, 1ee14 <uarte_nrfx_poll_out+0x6c>
   1edf6:	2001      	movs	r0, #1
   1edf8:	f008 fa41 	bl	2727e <nrfx_busy_wait>
   1edfc:	3c01      	subs	r4, #1
   1edfe:	d1f6      	bne.n	1edee <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1ee00:	2100      	movs	r1, #0
   1ee02:	2021      	movs	r0, #33	; 0x21
   1ee04:	f001 fee8 	bl	20bd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ee08:	e7f0      	b.n	1edec <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1ee0a:	f384 8811 	msr	BASEPRI, r4
   1ee0e:	f3bf 8f6f 	isb	sy
}
   1ee12:	e7f5      	b.n	1ee00 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1ee14:	f04f 0320 	mov.w	r3, #32
   1ee18:	f3ef 8411 	mrs	r4, BASEPRI
   1ee1c:	f383 8811 	msr	BASEPRI, r3
   1ee20:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ee24:	6870      	ldr	r0, [r6, #4]
   1ee26:	f008 f9fa 	bl	2721e <is_tx_ready.isra.0>
   1ee2a:	2800      	cmp	r0, #0
   1ee2c:	d0ed      	beq.n	1ee0a <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1ee2e:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1ee32:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee34:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ee36:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ee3a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee3e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1ee42:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1ee46:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1ee4a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee4e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1ee50:	f384 8811 	msr	BASEPRI, r4
   1ee54:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee5c:	2000fb37 	.word	0x2000fb37

0001ee60 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1ee60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1ee64:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1ee66:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   1ee68:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1ee6a:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ee6c:	2100      	movs	r1, #0
   1ee6e:	682b      	ldr	r3, [r5, #0]
   1ee70:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1ee74:	4606      	mov	r6, r0
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1ee76:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee78:	a801      	add	r0, sp, #4
   1ee7a:	9301      	str	r3, [sp, #4]
   1ee7c:	f7ff fed0 	bl	1ec20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ee80:	9a01      	ldr	r2, [sp, #4]
   1ee82:	2301      	movs	r3, #1
   1ee84:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ee86:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1ee8a:	682b      	ldr	r3, [r5, #0]
   1ee8c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee8e:	a801      	add	r0, sp, #4
   1ee90:	f7ff fec6 	bl	1ec20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ee94:	9b01      	ldr	r3, [sp, #4]
   1ee96:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ee9a:	2203      	movs	r2, #3
   1ee9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1eea0:	686b      	ldr	r3, [r5, #4]
   1eea2:	1c58      	adds	r0, r3, #1
   1eea4:	d008      	beq.n	1eeb8 <uarte_instance_init.constprop.0+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eea6:	a801      	add	r0, sp, #4
   1eea8:	9301      	str	r3, [sp, #4]
   1eeaa:	f7ff feb9 	bl	1ec20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eeae:	9b01      	ldr	r3, [sp, #4]
   1eeb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1eeb4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1eeb8:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1eebc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1eec0:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1eec4:	68ab      	ldr	r3, [r5, #8]
   1eec6:	1c59      	adds	r1, r3, #1
   1eec8:	d009      	beq.n	1eede <uarte_instance_init.constprop.0+0x7e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eeca:	a801      	add	r0, sp, #4
   1eecc:	9301      	str	r3, [sp, #4]
   1eece:	f7ff fea7 	bl	1ec20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eed2:	9b01      	ldr	r3, [sp, #4]
   1eed4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1eed8:	2200      	movs	r2, #0
   1eeda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1eede:	68eb      	ldr	r3, [r5, #12]
   1eee0:	1c5a      	adds	r2, r3, #1
   1eee2:	d013      	beq.n	1ef0c <uarte_instance_init.constprop.0+0xac>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eee4:	a801      	add	r0, sp, #4
   1eee6:	9301      	str	r3, [sp, #4]
   1eee8:	f7ff fe9a 	bl	1ec20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1eeec:	9a01      	ldr	r2, [sp, #4]
   1eeee:	2301      	movs	r3, #1
   1eef0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1eef2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1eef6:	68eb      	ldr	r3, [r5, #12]
   1eef8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eefa:	a801      	add	r0, sp, #4
   1eefc:	f7ff fe90 	bl	1ec20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ef00:	9b01      	ldr	r3, [sp, #4]
   1ef02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ef06:	2203      	movs	r2, #3
   1ef08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1ef0c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1ef10:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
   1ef12:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1ef16:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1ef18:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1ef1c:	4630      	mov	r0, r6
   1ef1e:	f7ff fe8d 	bl	1ec3c <uarte_nrfx_configure>
	if (err) {
   1ef22:	4680      	mov	r8, r0
   1ef24:	b9a8      	cbnz	r0, 1ef52 <uarte_instance_init.constprop.0+0xf2>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1ef26:	6873      	ldr	r3, [r6, #4]
   1ef28:	799b      	ldrb	r3, [r3, #6]
   1ef2a:	b34b      	cbz	r3, 1ef80 <uarte_instance_init.constprop.0+0x120>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1ef2c:	f107 0012 	add.w	r0, r7, #18
   1ef30:	f000 fbe8 	bl	1f704 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1ef34:	4b24      	ldr	r3, [pc, #144]	; (1efc8 <uarte_instance_init.constprop.0+0x168>)
   1ef36:	4298      	cmp	r0, r3
   1ef38:	d00f      	beq.n	1ef5a <uarte_instance_init.constprop.0+0xfa>
   1ef3a:	4b24      	ldr	r3, [pc, #144]	; (1efcc <uarte_instance_init.constprop.0+0x16c>)
   1ef3c:	4924      	ldr	r1, [pc, #144]	; (1efd0 <uarte_instance_init.constprop.0+0x170>)
		LOG_ERR("Failed to allocate PPI Channel");
   1ef3e:	4825      	ldr	r0, [pc, #148]	; (1efd4 <uarte_instance_init.constprop.0+0x174>)
   1ef40:	1ac9      	subs	r1, r1, r3
   1ef42:	08c9      	lsrs	r1, r1, #3
   1ef44:	0189      	lsls	r1, r1, #6
   1ef46:	f041 0101 	orr.w	r1, r1, #1
   1ef4a:	f003 fe5b 	bl	22c04 <log_0>
		return -EIO;
   1ef4e:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1ef52:	4640      	mov	r0, r8
   1ef54:	b002      	add	sp, #8
   1ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1ef5a:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ef5c:	00c3      	lsls	r3, r0, #3
   1ef5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ef62:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1ef66:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ef6a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ef6e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ef72:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1ef76:	4a18      	ldr	r2, [pc, #96]	; (1efd8 <uarte_instance_init.constprop.0+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ef78:	2301      	movs	r3, #1
   1ef7a:	4083      	lsls	r3, r0
   1ef7c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ef80:	2308      	movs	r3, #8
   1ef82:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1ef86:	686b      	ldr	r3, [r5, #4]
   1ef88:	3301      	adds	r3, #1
   1ef8a:	d00c      	beq.n	1efa6 <uarte_instance_init.constprop.0+0x146>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef8c:	2300      	movs	r3, #0
   1ef8e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ef92:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ef96:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ef9a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ef9e:	2301      	movs	r3, #1
   1efa0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1efa4:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1efa6:	6873      	ldr	r3, [r6, #4]
   1efa8:	799b      	ldrb	r3, [r3, #6]
   1efaa:	b91b      	cbnz	r3, 1efb4 <uarte_instance_init.constprop.0+0x154>
    p_reg->INTENSET = mask;
   1efac:	f44f 7380 	mov.w	r3, #256	; 0x100
   1efb0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1efb4:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1efb6:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1efb8:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1efbc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1efc0:	2301      	movs	r3, #1
   1efc2:	60a3      	str	r3, [r4, #8]
   1efc4:	60e3      	str	r3, [r4, #12]
	return 0;
   1efc6:	e7c4      	b.n	1ef52 <uarte_instance_init.constprop.0+0xf2>
   1efc8:	0bad0000 	.word	0x0bad0000
   1efcc:	000281b4 	.word	0x000281b4
   1efd0:	00028324 	.word	0x00028324
   1efd4:	0002e417 	.word	0x0002e417
   1efd8:	4001f000 	.word	0x4001f000

0001efdc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1efdc:	b530      	push	{r4, r5, lr}
   1efde:	4b0a      	ldr	r3, [pc, #40]	; (1f008 <uarte_1_init+0x2c>)
   1efe0:	4605      	mov	r5, r0
   1efe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1efe4:	b085      	sub	sp, #20
   1efe6:	466c      	mov	r4, sp
   1efe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1efec:	2200      	movs	r2, #0
   1efee:	2101      	movs	r1, #1
   1eff0:	2028      	movs	r0, #40	; 0x28
   1eff2:	f7e8 fb99 	bl	7728 <z_arm_irq_priority_set>
   1eff6:	2028      	movs	r0, #40	; 0x28
   1eff8:	f7e8 fb64 	bl	76c4 <arch_irq_enable>
   1effc:	4621      	mov	r1, r4
   1effe:	4628      	mov	r0, r5
   1f000:	f7ff ff2e 	bl	1ee60 <uarte_instance_init.constprop.0>
   1f004:	b005      	add	sp, #20
   1f006:	bd30      	pop	{r4, r5, pc}
   1f008:	000283d0 	.word	0x000283d0

0001f00c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1f00c:	b530      	push	{r4, r5, lr}
   1f00e:	4b0a      	ldr	r3, [pc, #40]	; (1f038 <uarte_0_init+0x2c>)
   1f010:	4605      	mov	r5, r0
   1f012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f014:	b085      	sub	sp, #20
   1f016:	466c      	mov	r4, sp
   1f018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1f01c:	2200      	movs	r2, #0
   1f01e:	2101      	movs	r1, #1
   1f020:	2002      	movs	r0, #2
   1f022:	f7e8 fb81 	bl	7728 <z_arm_irq_priority_set>
   1f026:	2002      	movs	r0, #2
   1f028:	f7e8 fb4c 	bl	76c4 <arch_irq_enable>
   1f02c:	4621      	mov	r1, r4
   1f02e:	4628      	mov	r0, r5
   1f030:	f7ff ff16 	bl	1ee60 <uarte_instance_init.constprop.0>
   1f034:	b005      	add	sp, #20
   1f036:	bd30      	pop	{r4, r5, pc}
   1f038:	000283e0 	.word	0x000283e0

0001f03c <random_byte_get>:
	__asm__ volatile(
   1f03c:	f04f 0320 	mov.w	r3, #32
   1f040:	f3ef 8211 	mrs	r2, BASEPRI
   1f044:	f383 8811 	msr	BASEPRI, r3
   1f048:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f04c:	4b09      	ldr	r3, [pc, #36]	; (1f074 <random_byte_get+0x38>)
   1f04e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1f052:	b161      	cbz	r1, 1f06e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f054:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1f056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f05a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1f05e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1f062:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1f064:	f382 8811 	msr	BASEPRI, r2
   1f068:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1f06c:	4770      	bx	lr
	int retval = -EAGAIN;
   1f06e:	f06f 000a 	mvn.w	r0, #10
   1f072:	e7f7      	b.n	1f064 <random_byte_get+0x28>
   1f074:	4000d000 	.word	0x4000d000

0001f078 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1f078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f07a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1f07c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1f07e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1f080:	f04f 0020 	mov.w	r0, #32
   1f084:	f3ef 8e11 	mrs	lr, BASEPRI
   1f088:	f380 8811 	msr	BASEPRI, r0
   1f08c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1f090:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1f092:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1f096:	1ba4      	subs	r4, r4, r6
   1f098:	403c      	ands	r4, r7
	if (available < len) {
   1f09a:	42a2      	cmp	r2, r4
		len = available;
   1f09c:	bf88      	it	hi
   1f09e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1f0a0:	18b0      	adds	r0, r6, r2
   1f0a2:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1f0a4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1f0a6:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1f0a8:	f38e 8811 	msr	BASEPRI, lr
   1f0ac:	f3bf 8f6f 	isb	sy
   1f0b0:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1f0b2:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1f0b4:	4290      	cmp	r0, r2
   1f0b6:	d119      	bne.n	1f0ec <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f0b8:	4566      	cmp	r6, ip
   1f0ba:	d10d      	bne.n	1f0d8 <rng_pool_get+0x60>
	__asm__ volatile(
   1f0bc:	f04f 0520 	mov.w	r5, #32
   1f0c0:	f3ef 8011 	mrs	r0, BASEPRI
   1f0c4:	f385 8811 	msr	BASEPRI, r5
   1f0c8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f0cc:	781d      	ldrb	r5, [r3, #0]
   1f0ce:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1f0d0:	f380 8811 	msr	BASEPRI, r0
   1f0d4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f0d8:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1f0da:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1f0dc:	b290      	uxth	r0, r2
	available = available - len;
   1f0de:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1f0e0:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f0e2:	bf22      	ittt	cs
   1f0e4:	4b06      	ldrcs	r3, [pc, #24]	; (1f100 <rng_pool_get+0x88>)
   1f0e6:	2201      	movcs	r2, #1
   1f0e8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1f0ec:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1f0f0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1f0f2:	f89e e005 	ldrb.w	lr, [lr, #5]
   1f0f6:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1f0fa:	403d      	ands	r5, r7
   1f0fc:	e7da      	b.n	1f0b4 <rng_pool_get+0x3c>
   1f0fe:	bf00      	nop
   1f100:	4000d000 	.word	0x4000d000

0001f104 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f104:	43db      	mvns	r3, r3
{
   1f106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f10a:	f013 0501 	ands.w	r5, r3, #1
{
   1f10e:	460e      	mov	r6, r1
   1f110:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f112:	d004      	beq.n	1f11e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f114:	4821      	ldr	r0, [pc, #132]	; (1f19c <entropy_nrf5_get_entropy_isr+0x98>)
   1f116:	f7ff ffaf 	bl	1f078 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1f11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1f11e:	b3a2      	cbz	r2, 1f18a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1f120:	f04f 0320 	mov.w	r3, #32
   1f124:	f3ef 8811 	mrs	r8, BASEPRI
   1f128:	f383 8811 	msr	BASEPRI, r3
   1f12c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1f130:	200d      	movs	r0, #13
   1f132:	f7e8 faeb 	bl	770c <arch_irq_is_enabled>
   1f136:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1f138:	200d      	movs	r0, #13
   1f13a:	f7e8 fad3 	bl	76e4 <arch_irq_disable>
	__asm__ volatile(
   1f13e:	f388 8811 	msr	BASEPRI, r8
   1f142:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f146:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1f1a0 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f14a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1f1a4 <entropy_nrf5_get_entropy_isr+0xa0>
   1f14e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1f152:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1f156:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f15a:	2301      	movs	r3, #1
   1f15c:	f8c8 3000 	str.w	r3, [r8]
   1f160:	4625      	mov	r5, r4
   1f162:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f166:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1f16a:	b183      	cbz	r3, 1f18e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1f16c:	f7ff ff66 	bl	1f03c <random_byte_get>
			if (byte < 0) {
   1f170:	1e03      	subs	r3, r0, #0
   1f172:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1f176:	dbf6      	blt.n	1f166 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1f178:	3d01      	subs	r5, #1
   1f17a:	b2ad      	uxth	r5, r5
   1f17c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1f17e:	2d00      	cmp	r5, #0
   1f180:	d1f1      	bne.n	1f166 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1f182:	b117      	cbz	r7, 1f18a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1f184:	200d      	movs	r0, #13
   1f186:	f7e8 fa9d 	bl	76c4 <arch_irq_enable>
	return cnt;
   1f18a:	4620      	mov	r0, r4
   1f18c:	e7c5      	b.n	1f11a <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1f18e:	f3bf 8f4f 	dsb	sy
				__WFE();
   1f192:	bf20      	wfe
				__SEV();
   1f194:	bf40      	sev
				__WFE();
   1f196:	bf20      	wfe
   1f198:	e7e5      	b.n	1f166 <entropy_nrf5_get_entropy_isr+0x62>
   1f19a:	bf00      	nop
   1f19c:	2000f410 	.word	0x2000f410
   1f1a0:	4000d000 	.word	0x4000d000
   1f1a4:	e000e100 	.word	0xe000e100

0001f1a8 <entropy_nrf5_get_entropy>:
{
   1f1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1f1ac:	4f13      	ldr	r7, [pc, #76]	; (1f1fc <entropy_nrf5_get_entropy+0x54>)
   1f1ae:	460d      	mov	r5, r1
   1f1b0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f1b2:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1f1b6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1f1ba:	b914      	cbnz	r4, 1f1c2 <entropy_nrf5_get_entropy+0x1a>
}
   1f1bc:	4620      	mov	r0, r4
   1f1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f1c2:	f04f 33ff 	mov.w	r3, #4294967295
   1f1c6:	f04f 32ff 	mov.w	r2, #4294967295
   1f1ca:	4638      	mov	r0, r7
   1f1cc:	f001 fd4a 	bl	20c64 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f1d0:	4622      	mov	r2, r4
   1f1d2:	4629      	mov	r1, r5
   1f1d4:	4640      	mov	r0, r8
   1f1d6:	f7ff ff4f 	bl	1f078 <rng_pool_get>
   1f1da:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1f1dc:	4638      	mov	r0, r7
   1f1de:	f001 fd1b 	bl	20c18 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1f1e2:	b93e      	cbnz	r6, 1f1f4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1f1e4:	f04f 32ff 	mov.w	r2, #4294967295
   1f1e8:	f04f 33ff 	mov.w	r3, #4294967295
   1f1ec:	4648      	mov	r0, r9
   1f1ee:	f001 fd39 	bl	20c64 <z_impl_k_sem_take>
			continue;
   1f1f2:	e7e2      	b.n	1f1ba <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1f1f4:	1ba4      	subs	r4, r4, r6
   1f1f6:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f1f8:	4435      	add	r5, r6
   1f1fa:	e7de      	b.n	1f1ba <entropy_nrf5_get_entropy+0x12>
   1f1fc:	2000f3e0 	.word	0x2000f3e0

0001f200 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1f200:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f202:	4c19      	ldr	r4, [pc, #100]	; (1f268 <entropy_nrf5_init+0x68>)
   1f204:	2201      	movs	r2, #1
   1f206:	4611      	mov	r1, r2
   1f208:	4620      	mov	r0, r4
   1f20a:	f008 fbc8 	bl	2799e <z_impl_k_sem_init>
   1f20e:	2201      	movs	r2, #1
   1f210:	2100      	movs	r1, #0
   1f212:	f104 0018 	add.w	r0, r4, #24
   1f216:	f008 fbc2 	bl	2799e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1f21a:	f240 4307 	movw	r3, #1031	; 0x407
   1f21e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1f222:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f226:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1f228:	230c      	movs	r3, #12
   1f22a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1f22e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1f230:	4b0e      	ldr	r3, [pc, #56]	; (1f26c <entropy_nrf5_init+0x6c>)
   1f232:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1f236:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1f23a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f23e:	f042 0201 	orr.w	r2, r2, #1
   1f242:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1f246:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f248:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1f24c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f250:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1f254:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f256:	6019      	str	r1, [r3, #0]
   1f258:	200d      	movs	r0, #13
   1f25a:	f7e8 fa65 	bl	7728 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1f25e:	200d      	movs	r0, #13
   1f260:	f7e8 fa30 	bl	76c4 <arch_irq_enable>

	return 0;
}
   1f264:	4628      	mov	r0, r5
   1f266:	bd38      	pop	{r3, r4, r5, pc}
   1f268:	2000f3e0 	.word	0x2000f3e0
   1f26c:	4000d000 	.word	0x4000d000

0001f270 <isr>:
{
   1f270:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f272:	f7ff fee3 	bl	1f03c <random_byte_get>
	if (byte < 0) {
   1f276:	2800      	cmp	r0, #0
   1f278:	db20      	blt.n	1f2bc <isr+0x4c>
	uint8_t last  = rngp->last;
   1f27a:	4b17      	ldr	r3, [pc, #92]	; (1f2d8 <isr+0x68>)
   1f27c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1f280:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1f284:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1f288:	1a51      	subs	r1, r2, r1
   1f28a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f28e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1f290:	d10d      	bne.n	1f2ae <isr+0x3e>
	uint8_t last  = rngp->last;
   1f292:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1f296:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1f29a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1f29e:	1a51      	subs	r1, r2, r1
   1f2a0:	ea34 0101 	bics.w	r1, r4, r1
   1f2a4:	d10b      	bne.n	1f2be <isr+0x4e>
   1f2a6:	4b0d      	ldr	r3, [pc, #52]	; (1f2dc <isr+0x6c>)
   1f2a8:	2201      	movs	r2, #1
   1f2aa:	605a      	str	r2, [r3, #4]
}
   1f2ac:	e00e      	b.n	1f2cc <isr+0x5c>
	rngp->buffer[last] = byte;
   1f2ae:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f2b0:	3201      	adds	r2, #1
   1f2b2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f2b4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1f2b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1f2bc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1f2be:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f2c0:	3201      	adds	r2, #1
   1f2c2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f2c4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1f2c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1f2cc:	4804      	ldr	r0, [pc, #16]	; (1f2e0 <isr+0x70>)
}
   1f2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f2d2:	f001 bca1 	b.w	20c18 <z_impl_k_sem_give>
   1f2d6:	bf00      	nop
   1f2d8:	2000f3e0 	.word	0x2000f3e0
   1f2dc:	4000d000 	.word	0x4000d000
   1f2e0:	2000f3f8 	.word	0x2000f3f8

0001f2e4 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f2e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f2e8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f2ec:	2a08      	cmp	r2, #8
   1f2ee:	d106      	bne.n	1f2fe <nrf52_errata_136+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f2f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1f2f4:	2b05      	cmp	r3, #5
   1f2f6:	d802      	bhi.n	1f2fe <nrf52_errata_136+0x1a>
   1f2f8:	4a02      	ldr	r2, [pc, #8]	; (1f304 <nrf52_errata_136+0x20>)
   1f2fa:	5cd0      	ldrb	r0, [r2, r3]
   1f2fc:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f2fe:	2000      	movs	r0, #0
    #endif
}
   1f300:	4770      	bx	lr
   1f302:	bf00      	nop
   1f304:	0002e451 	.word	0x0002e451

0001f308 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f30c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f310:	2a08      	cmp	r2, #8
   1f312:	d106      	bne.n	1f322 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f314:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1f318:	2b05      	cmp	r3, #5
   1f31a:	d802      	bhi.n	1f322 <nrf52_errata_103+0x1a>
   1f31c:	4a02      	ldr	r2, [pc, #8]	; (1f328 <nrf52_errata_103+0x20>)
   1f31e:	5cd0      	ldrb	r0, [r2, r3]
   1f320:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f322:	2000      	movs	r0, #0
    #endif
}
   1f324:	4770      	bx	lr
   1f326:	bf00      	nop
   1f328:	0002e457 	.word	0x0002e457

0001f32c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f32c:	4a02      	ldr	r2, [pc, #8]	; (1f338 <nvmc_wait+0xc>)
   1f32e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f332:	2b00      	cmp	r3, #0
   1f334:	d0fb      	beq.n	1f32e <nvmc_wait+0x2>
}
   1f336:	4770      	bx	lr
   1f338:	4001e000 	.word	0x4001e000

0001f33c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f33c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f33e:	f7ff ffd1 	bl	1f2e4 <nrf52_errata_136>
   1f342:	b140      	cbz	r0, 1f356 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f348:	2200      	movs	r2, #0
   1f34a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f34e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f352:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f356:	f7ff ffc5 	bl	1f2e4 <nrf52_errata_136>
   1f35a:	2800      	cmp	r0, #0
   1f35c:	d046      	beq.n	1f3ec <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f362:	4b55      	ldr	r3, [pc, #340]	; (1f4b8 <SystemInit+0x17c>)
   1f364:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f368:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f36c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f370:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f374:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f378:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f37c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f380:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f384:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f388:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f38c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f390:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f394:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f398:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f39c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f3a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f3a4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f3a8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f3ac:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f3b0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f3b4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f3b8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f3bc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f3c0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f3c4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f3c8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f3cc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f3d0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f3d4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f3d8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f3dc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f3e0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f3e4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f3e8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1f3ec:	f7ff ff8c 	bl	1f308 <nrf52_errata_103>
   1f3f0:	b118      	cbz	r0, 1f3fa <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1f3f2:	4b32      	ldr	r3, [pc, #200]	; (1f4bc <SystemInit+0x180>)
   1f3f4:	4a32      	ldr	r2, [pc, #200]	; (1f4c0 <SystemInit+0x184>)
   1f3f6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1f3fa:	f7ff ff85 	bl	1f308 <nrf52_errata_103>
   1f3fe:	b118      	cbz	r0, 1f408 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1f400:	4b30      	ldr	r3, [pc, #192]	; (1f4c4 <SystemInit+0x188>)
   1f402:	22fb      	movs	r2, #251	; 0xfb
   1f404:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1f408:	f7ff ff7e 	bl	1f308 <nrf52_errata_103>
   1f40c:	b170      	cbz	r0, 1f42c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1f40e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1f412:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f416:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1f41a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f41e:	f022 020f 	bic.w	r2, r2, #15
   1f422:	f003 030f 	and.w	r3, r3, #15
   1f426:	4313      	orrs	r3, r2
   1f428:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1f42c:	f7ff ff6c 	bl	1f308 <nrf52_errata_103>
   1f430:	b120      	cbz	r0, 1f43c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1f432:	4b25      	ldr	r3, [pc, #148]	; (1f4c8 <SystemInit+0x18c>)
   1f434:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f438:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f43c:	f7ff ff52 	bl	1f2e4 <nrf52_errata_136>
   1f440:	b148      	cbz	r0, 1f456 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f446:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f44a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f44c:	bf44      	itt	mi
   1f44e:	f06f 0201 	mvnmi.w	r2, #1
   1f452:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f456:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f45a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f45e:	2a00      	cmp	r2, #0
   1f460:	db03      	blt.n	1f46a <SystemInit+0x12e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f462:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f466:	2b00      	cmp	r3, #0
   1f468:	da22      	bge.n	1f4b0 <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f46a:	4918      	ldr	r1, [pc, #96]	; (1f4cc <SystemInit+0x190>)
   1f46c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f46e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f472:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f476:	2412      	movs	r4, #18
    nvmc_wait();
   1f478:	f7ff ff58 	bl	1f32c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f47c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f480:	f7ff ff54 	bl	1f32c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f484:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f488:	f7ff ff50 	bl	1f32c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f48c:	2300      	movs	r3, #0
   1f48e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f492:	f7ff ff4b 	bl	1f32c <nvmc_wait>
   1f496:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f49a:	490d      	ldr	r1, [pc, #52]	; (1f4d0 <SystemInit+0x194>)
   1f49c:	4b0d      	ldr	r3, [pc, #52]	; (1f4d4 <SystemInit+0x198>)
   1f49e:	68ca      	ldr	r2, [r1, #12]
   1f4a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f4a4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f4a6:	60cb      	str	r3, [r1, #12]
   1f4a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1f4ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f4ae:	e7fd      	b.n	1f4ac <SystemInit+0x170>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f4b0:	4b09      	ldr	r3, [pc, #36]	; (1f4d8 <SystemInit+0x19c>)
   1f4b2:	4a0a      	ldr	r2, [pc, #40]	; (1f4dc <SystemInit+0x1a0>)
   1f4b4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f4b6:	bd10      	pop	{r4, pc}
   1f4b8:	4000c000 	.word	0x4000c000
   1f4bc:	40005000 	.word	0x40005000
   1f4c0:	00038148 	.word	0x00038148
   1f4c4:	4000f000 	.word	0x4000f000
   1f4c8:	40029000 	.word	0x40029000
   1f4cc:	4001e000 	.word	0x4001e000
   1f4d0:	e000ed00 	.word	0xe000ed00
   1f4d4:	05fa0004 	.word	0x05fa0004
   1f4d8:	20000818 	.word	0x20000818
   1f4dc:	03d09000 	.word	0x03d09000

0001f4e0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1f4e0:	4b04      	ldr	r3, [pc, #16]	; (1f4f4 <nrfx_clock_init+0x14>)
   1f4e2:	791a      	ldrb	r2, [r3, #4]
   1f4e4:	b922      	cbnz	r2, 1f4f0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1f4e6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1f4e8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1f4ea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f4ec:	4802      	ldr	r0, [pc, #8]	; (1f4f8 <nrfx_clock_init+0x18>)
   1f4ee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1f4f0:	4802      	ldr	r0, [pc, #8]	; (1f4fc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f4f2:	4770      	bx	lr
   1f4f4:	2000f434 	.word	0x2000f434
   1f4f8:	0bad0000 	.word	0x0bad0000
   1f4fc:	0bad000c 	.word	0x0bad000c

0001f500 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f500:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1f502:	b110      	cbz	r0, 1f50a <nrfx_clock_stop+0xa>
   1f504:	2801      	cmp	r0, #1
   1f506:	d017      	beq.n	1f538 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1f508:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1f50a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1f50e:	2302      	movs	r3, #2
   1f510:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f514:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1f518:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f51c:	2301      	movs	r3, #1
   1f51e:	60e3      	str	r3, [r4, #12]
   1f520:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f524:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1f528:	03db      	lsls	r3, r3, #15
   1f52a:	d5ed      	bpl.n	1f508 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1f52c:	2001      	movs	r0, #1
   1f52e:	f007 fea6 	bl	2727e <nrfx_busy_wait>
   1f532:	3d01      	subs	r5, #1
   1f534:	d1f6      	bne.n	1f524 <nrfx_clock_stop+0x24>
   1f536:	e7e7      	b.n	1f508 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1f538:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f53c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1f53e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f542:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f546:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f54a:	6060      	str	r0, [r4, #4]
   1f54c:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f550:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f554:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1f558:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f55a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f55e:	d505      	bpl.n	1f56c <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1f560:	b123      	cbz	r3, 1f56c <nrfx_clock_stop+0x6c>
   1f562:	2001      	movs	r0, #1
   1f564:	f007 fe8b 	bl	2727e <nrfx_busy_wait>
   1f568:	3d01      	subs	r5, #1
   1f56a:	d1f1      	bne.n	1f550 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1f56c:	4b01      	ldr	r3, [pc, #4]	; (1f574 <nrfx_clock_stop+0x74>)
   1f56e:	2200      	movs	r2, #0
   1f570:	715a      	strb	r2, [r3, #5]
   1f572:	e7c9      	b.n	1f508 <nrfx_clock_stop+0x8>
   1f574:	2000f434 	.word	0x2000f434

0001f578 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1f57c:	b510      	push	{r4, lr}
   1f57e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1f582:	b16a      	cbz	r2, 1f5a0 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f584:	2200      	movs	r2, #0
   1f586:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f58a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1f58e:	2201      	movs	r2, #1
   1f590:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1f594:	4b11      	ldr	r3, [pc, #68]	; (1f5dc <nrfx_power_clock_irq_handler+0x64>)
   1f596:	7958      	ldrb	r0, [r3, #5]
   1f598:	b910      	cbnz	r0, 1f5a0 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1f59a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f59c:	681b      	ldr	r3, [r3, #0]
   1f59e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f5a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f5a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1f5a8:	b172      	cbz	r2, 1f5c8 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5aa:	2200      	movs	r2, #0
   1f5ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f5b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f5b4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f5b8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f5bc:	0792      	lsls	r2, r2, #30
   1f5be:	d104      	bne.n	1f5ca <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f5c0:	2201      	movs	r2, #1
   1f5c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5c6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1f5c8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1f5ca:	2202      	movs	r2, #2
   1f5cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f5d0:	4b02      	ldr	r3, [pc, #8]	; (1f5dc <nrfx_power_clock_irq_handler+0x64>)
}
   1f5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f5d6:	681b      	ldr	r3, [r3, #0]
   1f5d8:	2001      	movs	r0, #1
   1f5da:	4718      	bx	r3
   1f5dc:	2000f434 	.word	0x2000f434

0001f5e0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1f5e0:	2301      	movs	r3, #1
   1f5e2:	fa03 f000 	lsl.w	r0, r3, r0
   1f5e6:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1f5e8:	b193      	cbz	r3, 1f610 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1f5ea:	f04f 0320 	mov.w	r3, #32
   1f5ee:	f3ef 8111 	mrs	r1, BASEPRI
   1f5f2:	f383 8811 	msr	BASEPRI, r3
   1f5f6:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1f5fa:	4a06      	ldr	r2, [pc, #24]	; (1f614 <nrfx_gpiote_channel_free+0x34>)
   1f5fc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1f5fe:	ea23 0000 	bic.w	r0, r3, r0
   1f602:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1f604:	f381 8811 	msr	BASEPRI, r1
   1f608:	f3bf 8f6f 	isb	sy
   1f60c:	4802      	ldr	r0, [pc, #8]	; (1f618 <nrfx_gpiote_channel_free+0x38>)
   1f60e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1f610:	4802      	ldr	r0, [pc, #8]	; (1f61c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f612:	4770      	bx	lr
   1f614:	2000f43c 	.word	0x2000f43c
   1f618:	0bad0000 	.word	0x0bad0000
   1f61c:	0bad0004 	.word	0x0bad0004

0001f620 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f624:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1f626:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1f684 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f62a:	4817      	ldr	r0, [pc, #92]	; (1f688 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1f62c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1f68c <nrfx_gpiote_channel_alloc+0x6c>
{
   1f630:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1f632:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1f634:	2601      	movs	r6, #1
   1f636:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1f638:	f04f 0120 	mov.w	r1, #32
   1f63c:	f3ef 8c11 	mrs	ip, BASEPRI
   1f640:	f381 8811 	msr	BASEPRI, r1
   1f644:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1f648:	fa22 f103 	lsr.w	r1, r2, r3
   1f64c:	07c9      	lsls	r1, r1, #31
   1f64e:	d50a      	bpl.n	1f666 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1f650:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1f654:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1f658:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1f65a:	bf01      	itttt	eq
   1f65c:	4339      	orreq	r1, r7
   1f65e:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1f662:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1f664:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1f666:	f38c 8811 	msr	BASEPRI, ip
   1f66a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1f66e:	4540      	cmp	r0, r8
   1f670:	d005      	beq.n	1f67e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1f672:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1f676:	439a      	bics	r2, r3
   1f678:	f104 0401 	add.w	r4, r4, #1
   1f67c:	d1db      	bne.n	1f636 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f682:	bf00      	nop
   1f684:	2000f43c 	.word	0x2000f43c
   1f688:	0bad0002 	.word	0x0bad0002
   1f68c:	0bad0000 	.word	0x0bad0000

0001f690 <nvmc_word_write>:
   1f690:	4a04      	ldr	r2, [pc, #16]	; (1f6a4 <nvmc_word_write+0x14>)
   1f692:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f696:	07db      	lsls	r3, r3, #31
   1f698:	d5fb      	bpl.n	1f692 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f69a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f69c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f6a0:	4770      	bx	lr
   1f6a2:	bf00      	nop
   1f6a4:	4001e000 	.word	0x4001e000

0001f6a8 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1f6a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f6ac:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1f6ae:	fbb0 f3f2 	udiv	r3, r0, r2
   1f6b2:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1f6b6:	b973      	cbnz	r3, 1f6d6 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1f6b8:	4b08      	ldr	r3, [pc, #32]	; (1f6dc <nrfx_nvmc_page_erase+0x34>)
   1f6ba:	2202      	movs	r2, #2
   1f6bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1f6c0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f6c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f6c8:	07d2      	lsls	r2, r2, #31
   1f6ca:	d5fb      	bpl.n	1f6c4 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1f6cc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f6ce:	4804      	ldr	r0, [pc, #16]	; (1f6e0 <nrfx_nvmc_page_erase+0x38>)
   1f6d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1f6d4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1f6d6:	4803      	ldr	r0, [pc, #12]	; (1f6e4 <nrfx_nvmc_page_erase+0x3c>)
}
   1f6d8:	4770      	bx	lr
   1f6da:	bf00      	nop
   1f6dc:	4001e000 	.word	0x4001e000
   1f6e0:	0bad0000 	.word	0x0bad0000
   1f6e4:	0bad000a 	.word	0x0bad000a

0001f6e8 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f6e8:	b510      	push	{r4, lr}
   1f6ea:	4c05      	ldr	r4, [pc, #20]	; (1f700 <nrfx_nvmc_word_write+0x18>)
   1f6ec:	2301      	movs	r3, #1
   1f6ee:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1f6f2:	f7ff ffcd 	bl	1f690 <nvmc_word_write>
   1f6f6:	2300      	movs	r3, #0
   1f6f8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1f6fc:	bd10      	pop	{r4, pc}
   1f6fe:	bf00      	nop
   1f700:	4001e000 	.word	0x4001e000

0001f704 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f704:	4b18      	ldr	r3, [pc, #96]	; (1f768 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1f706:	f8df c064 	ldr.w	ip, [pc, #100]	; 1f76c <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f70a:	681b      	ldr	r3, [r3, #0]
{
   1f70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f710:	43db      	mvns	r3, r3
{
   1f712:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f714:	4f16      	ldr	r7, [pc, #88]	; (1f770 <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f716:	4817      	ldr	r0, [pc, #92]	; (1f774 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f718:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f71c:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1f71e:	f04f 0e01 	mov.w	lr, #1
   1f722:	b2e6      	uxtb	r6, r4
   1f724:	b90b      	cbnz	r3, 1f72a <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1f72a:	f04f 0220 	mov.w	r2, #32
   1f72e:	f3ef 8811 	mrs	r8, BASEPRI
   1f732:	f382 8811 	msr	BASEPRI, r2
   1f736:	f3bf 8f6f 	isb	sy
   1f73a:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f73e:	4213      	tst	r3, r2
   1f740:	d006      	beq.n	1f750 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f742:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f744:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1f746:	bf01      	itttt	eq
   1f748:	4311      	orreq	r1, r2
   1f74a:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1f74c:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1f74e:	4660      	moveq	r0, ip
	__asm__ volatile(
   1f750:	f388 8811 	msr	BASEPRI, r8
   1f754:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1f758:	4560      	cmp	r0, ip
   1f75a:	f104 0401 	add.w	r4, r4, #1
   1f75e:	d0e2      	beq.n	1f726 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1f760:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f764:	e7dd      	b.n	1f722 <nrfx_ppi_channel_alloc+0x1e>
   1f766:	bf00      	nop
   1f768:	00029aa4 	.word	0x00029aa4
   1f76c:	0bad0000 	.word	0x0bad0000
   1f770:	2000f49c 	.word	0x2000f49c
   1f774:	0bad0002 	.word	0x0bad0002

0001f778 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1f778:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1f77a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1f77e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1f780:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1f782:	6002      	str	r2, [r0, #0]
}
   1f784:	4802      	ldr	r0, [pc, #8]	; (1f790 <nrf_gpio_pin_port_decode+0x18>)
   1f786:	bf18      	it	ne
   1f788:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1f78c:	4770      	bx	lr
   1f78e:	bf00      	nop
   1f790:	50000300 	.word	0x50000300

0001f794 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1f794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f798:	7907      	ldrb	r7, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f79a:	4c4c      	ldr	r4, [pc, #304]	; (1f8cc <nrfx_spi_init+0x138>)
{
   1f79c:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f79e:	2028      	movs	r0, #40	; 0x28
   1f7a0:	4378      	muls	r0, r7
   1f7a2:	1825      	adds	r5, r4, r0
   1f7a4:	7f2e      	ldrb	r6, [r5, #28]
   1f7a6:	2e00      	cmp	r6, #0
   1f7a8:	f040 808e 	bne.w	1f8c8 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1f7ac:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   1f7ae:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1f7b0:	7b0b      	ldrb	r3, [r1, #12]
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1f7b2:	7808      	ldrb	r0, [r1, #0]
    if (p_config->mode <= NRF_SPI_MODE_1)
   1f7b4:	2b01      	cmp	r3, #1
   1f7b6:	d878      	bhi.n	1f8aa <nrfx_spi_init+0x116>
        nrf_gpio_pin_clear(p_config->sck_pin);
   1f7b8:	f007 fdb4 	bl	27324 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1f7bc:	780b      	ldrb	r3, [r1, #0]
   1f7be:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7c0:	a801      	add	r0, sp, #4
   1f7c2:	f7ff ffd9 	bl	1f778 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f7c6:	9b01      	ldr	r3, [sp, #4]
   1f7c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f7cc:	2201      	movs	r2, #1
   1f7ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1f7d2:	784d      	ldrb	r5, [r1, #1]
   1f7d4:	2dff      	cmp	r5, #255	; 0xff
   1f7d6:	d06b      	beq.n	1f8b0 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1f7d8:	4628      	mov	r0, r5
   1f7da:	f007 fda3 	bl	27324 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7de:	a801      	add	r0, sp, #4
   1f7e0:	9501      	str	r5, [sp, #4]
   1f7e2:	f7ff ffc9 	bl	1f778 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f7e6:	9b01      	ldr	r3, [sp, #4]
   1f7e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f7ec:	2203      	movs	r2, #3
   1f7ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1f7f2:	788e      	ldrb	r6, [r1, #2]
   1f7f4:	2eff      	cmp	r6, #255	; 0xff
   1f7f6:	d05e      	beq.n	1f8b6 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7f8:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1f7fa:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   1f7fe:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f800:	f7ff ffba 	bl	1f778 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f804:	9b01      	ldr	r3, [sp, #4]
   1f806:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1f80a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f80e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f812:	78c8      	ldrb	r0, [r1, #3]
   1f814:	28ff      	cmp	r0, #255	; 0xff
   1f816:	d00c      	beq.n	1f832 <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   1f818:	f007 fd77 	bl	2730a <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->ss_pin);
   1f81c:	78cb      	ldrb	r3, [r1, #3]
   1f81e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f820:	a801      	add	r0, sp, #4
   1f822:	f7ff ffa9 	bl	1f778 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f826:	9b01      	ldr	r3, [sp, #4]
   1f828:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f82c:	2203      	movs	r2, #3
   1f82e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1f832:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f836:	78c8      	ldrb	r0, [r1, #3]
   1f838:	2328      	movs	r3, #40	; 0x28
   1f83a:	fb03 4302 	mla	r3, r3, r2, r4
   1f83e:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1f840:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1f844:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1f846:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f84a:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1f84c:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1f850:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f854:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1f858:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1f85a:	7b0d      	ldrb	r5, [r1, #12]
   1f85c:	3b00      	subs	r3, #0
   1f85e:	bf18      	it	ne
   1f860:	2301      	movne	r3, #1
    switch (spi_mode)
   1f862:	2d02      	cmp	r5, #2
   1f864:	d02a      	beq.n	1f8bc <nrfx_spi_init+0x128>
   1f866:	2d03      	cmp	r5, #3
   1f868:	d02b      	beq.n	1f8c2 <nrfx_spi_init+0x12e>
   1f86a:	2d01      	cmp	r5, #1
   1f86c:	d101      	bne.n	1f872 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1f86e:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1f872:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1f876:	2328      	movs	r3, #40	; 0x28
   1f878:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1f87c:	437b      	muls	r3, r7
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1f87e:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   1f880:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1f882:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1f884:	2201      	movs	r2, #1
   1f886:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   1f88a:	b11b      	cbz	r3, 1f894 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f88c:	f340 3007 	sbfx	r0, r0, #12, #8
   1f890:	f7e7 ff18 	bl	76c4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1f894:	2328      	movs	r3, #40	; 0x28
   1f896:	fb03 4407 	mla	r4, r3, r7, r4
   1f89a:	2300      	movs	r3, #0
   1f89c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f89e:	480c      	ldr	r0, [pc, #48]	; (1f8d0 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f8a0:	2301      	movs	r3, #1
   1f8a2:	7723      	strb	r3, [r4, #28]
}
   1f8a4:	b003      	add	sp, #12
   1f8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1f8aa:	f007 fd2e 	bl	2730a <nrf_gpio_pin_set>
   1f8ae:	e785      	b.n	1f7bc <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1f8b0:	f04f 35ff 	mov.w	r5, #4294967295
   1f8b4:	e79d      	b.n	1f7f2 <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1f8b6:	f04f 36ff 	mov.w	r6, #4294967295
   1f8ba:	e7aa      	b.n	1f812 <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1f8bc:	f043 0304 	orr.w	r3, r3, #4
        break;
   1f8c0:	e7d7      	b.n	1f872 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1f8c2:	f043 0306 	orr.w	r3, r3, #6
        break;
   1f8c6:	e7d4      	b.n	1f872 <nrfx_spi_init+0xde>
        return err_code;
   1f8c8:	4802      	ldr	r0, [pc, #8]	; (1f8d4 <nrfx_spi_init+0x140>)
   1f8ca:	e7eb      	b.n	1f8a4 <nrfx_spi_init+0x110>
   1f8cc:	2000f4a0 	.word	0x2000f4a0
   1f8d0:	0bad0000 	.word	0x0bad0000
   1f8d4:	0bad0005 	.word	0x0bad0005

0001f8d8 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1f8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f8dc:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1f8de:	4c39      	ldr	r4, [pc, #228]	; (1f9c4 <nrfx_spi_xfer+0xec>)
   1f8e0:	2328      	movs	r3, #40	; 0x28
   1f8e2:	437b      	muls	r3, r7
{
   1f8e4:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1f8e6:	18e2      	adds	r2, r4, r3
{
   1f8e8:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1f8ea:	7f51      	ldrb	r1, [r2, #29]
{
   1f8ec:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1f8ee:	2900      	cmp	r1, #0
   1f8f0:	d165      	bne.n	1f9be <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1f8f2:	58e3      	ldr	r3, [r4, r3]
   1f8f4:	b10b      	cbz	r3, 1f8fa <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1f8f6:	2301      	movs	r3, #1
   1f8f8:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1f8fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1f8fe:	2528      	movs	r5, #40	; 0x28
   1f900:	fb05 4507 	mla	r5, r5, r7, r4
   1f904:	f105 0c0c 	add.w	ip, r5, #12
   1f908:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f90c:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   1f90e:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f910:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1f912:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f916:	d001      	beq.n	1f91c <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   1f918:	f007 fd04 	bl	27324 <nrf_gpio_pin_clear>
    }
    if (flags)
   1f91c:	2328      	movs	r3, #40	; 0x28
   1f91e:	f1b8 0f00 	cmp.w	r8, #0
   1f922:	d006      	beq.n	1f932 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1f924:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1f928:	4827      	ldr	r0, [pc, #156]	; (1f9c8 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1f92a:	2300      	movs	r3, #0
   1f92c:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1f932:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   1f936:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   1f93a:	2204      	movs	r2, #4
   1f93c:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   1f940:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f944:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   1f948:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1f94c:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   1f94e:	b192      	cbz	r2, 1f976 <nrfx_spi_xfer+0x9e>
   1f950:	6833      	ldr	r3, [r6, #0]
   1f952:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1f954:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1f958:	2a01      	cmp	r2, #1
   1f95a:	d90e      	bls.n	1f97a <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1f95c:	6833      	ldr	r3, [r6, #0]
   1f95e:	785b      	ldrb	r3, [r3, #1]
   1f960:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   1f964:	2328      	movs	r3, #40	; 0x28
   1f966:	437b      	muls	r3, r7
   1f968:	58e6      	ldr	r6, [r4, r3]
   1f96a:	b176      	cbz	r6, 1f98a <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1f96c:	2304      	movs	r3, #4
   1f96e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f972:	4816      	ldr	r0, [pc, #88]	; (1f9cc <nrfx_spi_xfer+0xf4>)
   1f974:	e7db      	b.n	1f92e <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1f976:	7fdb      	ldrb	r3, [r3, #31]
   1f978:	e7ec      	b.n	1f954 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1f97a:	68f3      	ldr	r3, [r6, #12]
   1f97c:	2b01      	cmp	r3, #1
   1f97e:	d9f1      	bls.n	1f964 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1f980:	2328      	movs	r3, #40	; 0x28
   1f982:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   1f986:	7fdb      	ldrb	r3, [r3, #31]
   1f988:	e7ea      	b.n	1f960 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f98a:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1f98e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f992:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1f996:	2b00      	cmp	r3, #0
   1f998:	d0fb      	beq.n	1f992 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f99a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1f99e:	4628      	mov	r0, r5
   1f9a0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f9a4:	f007 fccb 	bl	2733e <transfer_byte>
   1f9a8:	2800      	cmp	r0, #0
   1f9aa:	d1f2      	bne.n	1f992 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f9ac:	2328      	movs	r3, #40	; 0x28
   1f9ae:	fb03 4407 	mla	r4, r3, r7, r4
   1f9b2:	7fa0      	ldrb	r0, [r4, #30]
   1f9b4:	28ff      	cmp	r0, #255	; 0xff
   1f9b6:	d0dc      	beq.n	1f972 <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   1f9b8:	f007 fca7 	bl	2730a <nrf_gpio_pin_set>
   1f9bc:	e7d9      	b.n	1f972 <nrfx_spi_xfer+0x9a>
        return err_code;
   1f9be:	4804      	ldr	r0, [pc, #16]	; (1f9d0 <nrfx_spi_xfer+0xf8>)
   1f9c0:	e7b5      	b.n	1f92e <nrfx_spi_xfer+0x56>
   1f9c2:	bf00      	nop
   1f9c4:	2000f4a0 	.word	0x2000f4a0
   1f9c8:	0bad0003 	.word	0x0bad0003
   1f9cc:	0bad0000 	.word	0x0bad0000
   1f9d0:	0bad000b 	.word	0x0bad000b

0001f9d4 <nrfx_spi_2_irq_handler>:
   1f9d4:	480c      	ldr	r0, [pc, #48]	; (1fa08 <nrfx_spi_2_irq_handler+0x34>)
    NRFX_ASSERT(p_cb->handler);

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
   1f9d6:	490d      	ldr	r1, [pc, #52]	; (1fa0c <nrfx_spi_2_irq_handler+0x38>)
   1f9d8:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
   1f9da:	b510      	push	{r4, lr}
   1f9dc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f9e0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   1f9e4:	f007 fcab 	bl	2733e <transfer_byte>
   1f9e8:	b968      	cbnz	r0, 1fa06 <nrfx_spi_2_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f9ea:	7f88      	ldrb	r0, [r1, #30]
   1f9ec:	28ff      	cmp	r0, #255	; 0xff
   1f9ee:	d001      	beq.n	1f9f4 <nrfx_spi_2_irq_handler+0x20>
        nrf_gpio_pin_set(p_cb->ss_pin);
   1f9f0:	f007 fc8b 	bl	2730a <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1f9f4:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1f9f6:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1f9f8:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
}
   1f9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f9fe:	e9d1 3100 	ldrd	r3, r1, [r1]
   1fa02:	4803      	ldr	r0, [pc, #12]	; (1fa10 <nrfx_spi_2_irq_handler+0x3c>)
   1fa04:	4718      	bx	r3
}
   1fa06:	bd10      	pop	{r4, pc}
   1fa08:	40023000 	.word	0x40023000
   1fa0c:	2000f4a0 	.word	0x2000f4a0
   1fa10:	2000f4a8 	.word	0x2000f4a8

0001fa14 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1fa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1fa16:	4b30      	ldr	r3, [pc, #192]	; (1fad8 <twi_tx_start_transfer+0xc4>)
   1fa18:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fa1a:	2300      	movs	r3, #0
   1fa1c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1fa20:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1fa24:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1fa28:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1fa2c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1fa30:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1fa34:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1fa38:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1fa3c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1fa40:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1fa42:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa46:	2301      	movs	r3, #1
   1fa48:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1fa4a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1fa4e:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1fa50:	429a      	cmp	r2, r3
   1fa52:	bf18      	it	ne
   1fa54:	6083      	strne	r3, [r0, #8]
{
   1fa56:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   1fa58:	f007 fca4 	bl	273a4 <twi_send_byte>

    if (p_cb->handler)
   1fa5c:	682b      	ldr	r3, [r5, #0]
   1fa5e:	b183      	cbz	r3, 1fa82 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1fa60:	f240 2386 	movw	r3, #646	; 0x286
   1fa64:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1fa66:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fa68:	481c      	ldr	r0, [pc, #112]	; (1fadc <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1fa6a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1fa6e:	b003      	add	sp, #12
   1fa70:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1fa72:	4629      	mov	r1, r5
   1fa74:	4620      	mov	r0, r4
   1fa76:	f007 fcb2 	bl	273de <twi_transfer>
        while ((hw_timeout > 0) &&
   1fa7a:	b128      	cbz	r0, 1fa88 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1fa7c:	9b01      	ldr	r3, [sp, #4]
   1fa7e:	3b01      	subs	r3, #1
   1fa80:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1fa82:	9b01      	ldr	r3, [sp, #4]
   1fa84:	2b00      	cmp	r3, #0
   1fa86:	dcf4      	bgt.n	1fa72 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1fa88:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1fa8c:	b95b      	cbnz	r3, 1faa6 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fa8e:	4813      	ldr	r0, [pc, #76]	; (1fadc <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1fa90:	9b01      	ldr	r3, [sp, #4]
   1fa92:	2b00      	cmp	r3, #0
   1fa94:	dceb      	bgt.n	1fa6e <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1fa96:	2300      	movs	r3, #0
   1fa98:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1fa9c:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1fa9e:	4810      	ldr	r0, [pc, #64]	; (1fae0 <twi_tx_start_transfer+0xcc>)
   1faa0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1faa4:	e7e3      	b.n	1fa6e <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1faa6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1faaa:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1faae:	b18b      	cbz	r3, 1fad4 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1fab0:	4a0c      	ldr	r2, [pc, #48]	; (1fae4 <twi_tx_start_transfer+0xd0>)
   1fab2:	480b      	ldr	r0, [pc, #44]	; (1fae0 <twi_tx_start_transfer+0xcc>)
   1fab4:	f013 0f01 	tst.w	r3, #1
   1fab8:	bf18      	it	ne
   1faba:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1fabc:	f013 0f02 	tst.w	r3, #2
   1fac0:	f102 0201 	add.w	r2, r2, #1
   1fac4:	bf18      	it	ne
   1fac6:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1fac8:	f013 0f04 	tst.w	r3, #4
   1facc:	4b06      	ldr	r3, [pc, #24]	; (1fae8 <twi_tx_start_transfer+0xd4>)
   1face:	bf18      	it	ne
   1fad0:	4618      	movne	r0, r3
   1fad2:	e7dd      	b.n	1fa90 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1fad4:	4802      	ldr	r0, [pc, #8]	; (1fae0 <twi_tx_start_transfer+0xcc>)
   1fad6:	e7db      	b.n	1fa90 <twi_tx_start_transfer+0x7c>
   1fad8:	000186a0 	.word	0x000186a0
   1fadc:	0bad0000 	.word	0x0bad0000
   1fae0:	0bad0001 	.word	0x0bad0001
   1fae4:	0bae0000 	.word	0x0bae0000
   1fae8:	0bae0002 	.word	0x0bae0002

0001faec <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1faec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1faee:	4b34      	ldr	r3, [pc, #208]	; (1fbc0 <twi_rx_start_transfer+0xd4>)
   1faf0:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1faf2:	2300      	movs	r3, #0
   1faf4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1faf8:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1fafc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1fb00:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1fb04:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1fb08:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1fb0c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1fb10:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1fb14:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1fb16:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1fb1a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1fb1c:	2b01      	cmp	r3, #1
{
   1fb1e:	4604      	mov	r4, r0
   1fb20:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1fb22:	d117      	bne.n	1fb54 <twi_rx_start_transfer+0x68>
   1fb24:	6a0b      	ldr	r3, [r1, #32]
   1fb26:	065b      	lsls	r3, r3, #25
   1fb28:	d414      	bmi.n	1fb54 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
   1fb2a:	2302      	movs	r3, #2
   1fb2c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fb30:	2301      	movs	r3, #1
   1fb32:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1fb34:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1fb38:	2a02      	cmp	r2, #2
   1fb3a:	bf18      	it	ne
   1fb3c:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1fb3e:	682b      	ldr	r3, [r5, #0]
   1fb40:	b193      	cbz	r3, 1fb68 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1fb42:	f240 2386 	movw	r3, #646	; 0x286
   1fb46:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1fb48:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fb4a:	481e      	ldr	r0, [pc, #120]	; (1fbc4 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1fb4c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1fb50:	b003      	add	sp, #12
   1fb52:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1fb54:	2301      	movs	r3, #1
   1fb56:	e7e9      	b.n	1fb2c <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1fb58:	4629      	mov	r1, r5
   1fb5a:	4620      	mov	r0, r4
   1fb5c:	f007 fc3f 	bl	273de <twi_transfer>
        while ((hw_timeout > 0) &&
   1fb60:	b128      	cbz	r0, 1fb6e <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1fb62:	9b01      	ldr	r3, [sp, #4]
   1fb64:	3b01      	subs	r3, #1
   1fb66:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1fb68:	9b01      	ldr	r3, [sp, #4]
   1fb6a:	2b00      	cmp	r3, #0
   1fb6c:	dcf4      	bgt.n	1fb58 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1fb6e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1fb72:	b95b      	cbnz	r3, 1fb8c <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fb74:	4813      	ldr	r0, [pc, #76]	; (1fbc4 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1fb76:	9b01      	ldr	r3, [sp, #4]
   1fb78:	2b00      	cmp	r3, #0
   1fb7a:	dce9      	bgt.n	1fb50 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1fb7c:	2300      	movs	r3, #0
   1fb7e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1fb82:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1fb84:	4810      	ldr	r0, [pc, #64]	; (1fbc8 <twi_rx_start_transfer+0xdc>)
   1fb86:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1fb8a:	e7e1      	b.n	1fb50 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1fb8c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1fb90:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1fb94:	b18b      	cbz	r3, 1fbba <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1fb96:	4a0d      	ldr	r2, [pc, #52]	; (1fbcc <twi_rx_start_transfer+0xe0>)
   1fb98:	480b      	ldr	r0, [pc, #44]	; (1fbc8 <twi_rx_start_transfer+0xdc>)
   1fb9a:	f013 0f01 	tst.w	r3, #1
   1fb9e:	bf18      	it	ne
   1fba0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1fba2:	f013 0f02 	tst.w	r3, #2
   1fba6:	f102 0201 	add.w	r2, r2, #1
   1fbaa:	bf18      	it	ne
   1fbac:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1fbae:	f013 0f04 	tst.w	r3, #4
   1fbb2:	4b07      	ldr	r3, [pc, #28]	; (1fbd0 <twi_rx_start_transfer+0xe4>)
   1fbb4:	bf18      	it	ne
   1fbb6:	4618      	movne	r0, r3
   1fbb8:	e7dd      	b.n	1fb76 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1fbba:	4803      	ldr	r0, [pc, #12]	; (1fbc8 <twi_rx_start_transfer+0xdc>)
   1fbbc:	e7db      	b.n	1fb76 <twi_rx_start_transfer+0x8a>
   1fbbe:	bf00      	nop
   1fbc0:	000186a0 	.word	0x000186a0
   1fbc4:	0bad0000 	.word	0x0bad0000
   1fbc8:	0bad0001 	.word	0x0bad0001
   1fbcc:	0bae0000 	.word	0x0bae0000
   1fbd0:	0bae0002 	.word	0x0bae0002

0001fbd4 <nrfx_twi_init>:
{
   1fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fbd8:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fbdc:	4d25      	ldr	r5, [pc, #148]	; (1fc74 <nrfx_twi_init+0xa0>)
   1fbde:	273c      	movs	r7, #60	; 0x3c
   1fbe0:	fb07 f708 	mul.w	r7, r7, r8
   1fbe4:	19ec      	adds	r4, r5, r7
   1fbe6:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1fbea:	2e00      	cmp	r6, #0
   1fbec:	d13f      	bne.n	1fc6e <nrfx_twi_init+0x9a>
    p_cb->int_mask        = 0;
   1fbee:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1fbf0:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   1fbf4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   1fbf8:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
   1fbfc:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
   1fbfe:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1fc00:	7b4b      	ldrb	r3, [r1, #13]
   1fc02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->handler         = event_handler;
   1fc06:	51ea      	str	r2, [r5, r7]
        case 1: return NRF_P1;
   1fc08:	4b1b      	ldr	r3, [pc, #108]	; (1fc78 <nrfx_twi_init+0xa4>)
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1fc0a:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   1fc0c:	0977      	lsrs	r7, r6, #5
        case 1: return NRF_P1;
   1fc0e:	2f01      	cmp	r7, #1
    *p_pin = pin_number & 0x1F;
   1fc10:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
   1fc14:	bf0c      	ite	eq
   1fc16:	461f      	moveq	r7, r3
   1fc18:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fc1c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1fc20:	f240 6c0c 	movw	ip, #1548	; 0x60c
   1fc24:	f847 c024 	str.w	ip, [r7, r4, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   1fc28:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   1fc2a:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   1fc2e:	f004 071f 	and.w	r7, r4, #31
        case 1: return NRF_P1;
   1fc32:	f1be 0f01 	cmp.w	lr, #1
   1fc36:	bf18      	it	ne
   1fc38:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fc3c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1fc40:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
   1fc44:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1fc46:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1fc4a:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1fc4e:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1fc52:	b11a      	cbz	r2, 1fc5c <nrfx_twi_init+0x88>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1fc54:	f340 3007 	sbfx	r0, r0, #12, #8
   1fc58:	f7e7 fd34 	bl	76c4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fc5c:	233c      	movs	r3, #60	; 0x3c
   1fc5e:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
   1fc62:	4806      	ldr	r0, [pc, #24]	; (1fc7c <nrfx_twi_init+0xa8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fc64:	2301      	movs	r3, #1
   1fc66:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1fc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1fc6e:	4804      	ldr	r0, [pc, #16]	; (1fc80 <nrfx_twi_init+0xac>)
   1fc70:	e7fb      	b.n	1fc6a <nrfx_twi_init+0x96>
   1fc72:	bf00      	nop
   1fc74:	2000f4c8 	.word	0x2000f4c8
   1fc78:	50000300 	.word	0x50000300
   1fc7c:	0bad0000 	.word	0x0bad0000
   1fc80:	0bad0005 	.word	0x0bad0005

0001fc84 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1fc84:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fc86:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1fc88:	2105      	movs	r1, #5
   1fc8a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1fc8e:	4b04      	ldr	r3, [pc, #16]	; (1fca0 <nrfx_twi_enable+0x1c>)
   1fc90:	213c      	movs	r1, #60	; 0x3c
   1fc92:	fb01 3302 	mla	r3, r1, r2, r3
   1fc96:	2202      	movs	r2, #2
   1fc98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1fc9c:	4770      	bx	lr
   1fc9e:	bf00      	nop
   1fca0:	2000f4c8 	.word	0x2000f4c8

0001fca4 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1fca4:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1fca6:	4a0a      	ldr	r2, [pc, #40]	; (1fcd0 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fca8:	7901      	ldrb	r1, [r0, #4]
   1fcaa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1fcae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1fcb2:	f022 0203 	bic.w	r2, r2, #3
   1fcb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1fcba:	2200      	movs	r2, #0
   1fcbc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fcc0:	4b04      	ldr	r3, [pc, #16]	; (1fcd4 <nrfx_twi_disable+0x30>)
   1fcc2:	223c      	movs	r2, #60	; 0x3c
   1fcc4:	fb02 3301 	mla	r3, r2, r1, r3
   1fcc8:	2201      	movs	r2, #1
   1fcca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1fcce:	4770      	bx	lr
   1fcd0:	00044286 	.word	0x00044286
   1fcd4:	2000f4c8 	.word	0x2000f4c8

0001fcd8 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1fcd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1fcdc:	4f31      	ldr	r7, [pc, #196]	; (1fda4 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fcde:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1fce0:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1fce4:	233c      	movs	r3, #60	; 0x3c
   1fce6:	fb03 7304 	mla	r3, r3, r4, r7
{
   1fcea:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1fcec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1fcf0:	2b01      	cmp	r3, #1
{
   1fcf2:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1fcf4:	d104      	bne.n	1fd00 <nrfx_twi_xfer+0x28>
   1fcf6:	780b      	ldrb	r3, [r1, #0]
   1fcf8:	2b01      	cmp	r3, #1
   1fcfa:	d106      	bne.n	1fd0a <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1fcfc:	482a      	ldr	r0, [pc, #168]	; (1fda8 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1fcfe:	e011      	b.n	1fd24 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1fd00:	2b02      	cmp	r3, #2
   1fd02:	d102      	bne.n	1fd0a <nrfx_twi_xfer+0x32>
   1fd04:	780b      	ldrb	r3, [r1, #0]
   1fd06:	2b01      	cmp	r3, #1
   1fd08:	d1f8      	bne.n	1fcfc <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1fd0a:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1fd0c:	4b27      	ldr	r3, [pc, #156]	; (1fdac <nrfx_twi_xfer+0xd4>)
   1fd0e:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1fd12:	fb06 7604 	mla	r6, r6, r4, r7
   1fd16:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1fd1a:	b12b      	cbz	r3, 1fd28 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1fd1c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1fd1e:	4824      	ldr	r0, [pc, #144]	; (1fdb0 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1fd20:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1fd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1fd28:	f08c 0304 	eor.w	r3, ip, #4
   1fd2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1fd30:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1fd34:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1fd38:	46a8      	mov	r8, r5
   1fd3a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1fd3e:	f106 0e0c 	add.w	lr, r6, #12
   1fd42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1fd46:	f8d8 3000 	ldr.w	r3, [r8]
   1fd4a:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1fd4e:	686b      	ldr	r3, [r5, #4]
   1fd50:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1fd52:	68eb      	ldr	r3, [r5, #12]
   1fd54:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1fd56:	786b      	ldrb	r3, [r5, #1]
   1fd58:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1fd5c:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fd5e:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1fd62:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fd64:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1fd68:	d017      	beq.n	1fd9a <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1fd6a:	b99b      	cbnz	r3, 1fd94 <nrfx_twi_xfer+0xbc>
   1fd6c:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1fd70:	233c      	movs	r3, #60	; 0x3c
   1fd72:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1fd76:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1fd78:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1fd7c:	4648      	mov	r0, r9
   1fd7e:	f7ff fe49 	bl	1fa14 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1fd82:	233c      	movs	r3, #60	; 0x3c
   1fd84:	435c      	muls	r4, r3
   1fd86:	193a      	adds	r2, r7, r4
   1fd88:	593b      	ldr	r3, [r7, r4]
   1fd8a:	2b00      	cmp	r3, #0
   1fd8c:	d1ca      	bne.n	1fd24 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1fd8e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1fd92:	e7c7      	b.n	1fd24 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1fd94:	f04f 0c01 	mov.w	ip, #1
   1fd98:	e7ea      	b.n	1fd70 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1fd9a:	4651      	mov	r1, sl
   1fd9c:	4648      	mov	r0, r9
   1fd9e:	f7ff fea5 	bl	1faec <twi_rx_start_transfer>
   1fda2:	e7ee      	b.n	1fd82 <nrfx_twi_xfer+0xaa>
   1fda4:	2000f4c8 	.word	0x2000f4c8
   1fda8:	0bad0005 	.word	0x0bad0005
   1fdac:	00044286 	.word	0x00044286
   1fdb0:	0bad000b 	.word	0x0bad000b

0001fdb4 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1fdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1fdb6:	4c2b      	ldr	r4, [pc, #172]	; (1fe64 <nrfx_twi_0_irq_handler+0xb0>)
   1fdb8:	482b      	ldr	r0, [pc, #172]	; (1fe68 <nrfx_twi_0_irq_handler+0xb4>)
{
   1fdba:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1fdbc:	4621      	mov	r1, r4
   1fdbe:	f007 fb0e 	bl	273de <twi_transfer>
   1fdc2:	2800      	cmp	r0, #0
   1fdc4:	d140      	bne.n	1fe48 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
   1fdc6:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1fdca:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
   1fdce:	b9ff      	cbnz	r7, 1fe10 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1fdd0:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1fdd2:	1e9a      	subs	r2, r3, #2
   1fdd4:	2a01      	cmp	r2, #1
   1fdd6:	d81b      	bhi.n	1fe10 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1fdd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1fdda:	69a2      	ldr	r2, [r4, #24]
   1fddc:	4291      	cmp	r1, r2
   1fdde:	d117      	bne.n	1fe10 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1fde0:	69e2      	ldr	r2, [r4, #28]
   1fde2:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1fde4:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1fde8:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1fdea:	481f      	ldr	r0, [pc, #124]	; (1fe68 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1fdec:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1fdee:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1fdf0:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1fdf4:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1fdf8:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1fdfa:	d104      	bne.n	1fe06 <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1fdfc:	b007      	add	sp, #28
   1fdfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1fe02:	f7ff be07 	b.w	1fa14 <twi_tx_start_transfer>
}
   1fe06:	b007      	add	sp, #28
   1fe08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1fe0c:	f7ff be6e 	b.w	1faec <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   1fe10:	4e16      	ldr	r6, [pc, #88]	; (1fe6c <nrfx_twi_0_irq_handler+0xb8>)
   1fe12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fe14:	ad01      	add	r5, sp, #4
   1fe16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fe18:	6833      	ldr	r3, [r6, #0]
   1fe1a:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   1fe1c:	b1ff      	cbz	r7, 1fe5e <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   1fe1e:	4a12      	ldr	r2, [pc, #72]	; (1fe68 <nrfx_twi_0_irq_handler+0xb4>)
   1fe20:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1fe24:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1fe28:	0799      	lsls	r1, r3, #30
   1fe2a:	d50f      	bpl.n	1fe4c <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1fe2c:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1fe2e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1fe32:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1fe34:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   1fe38:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1fe3c:	d000      	beq.n	1fe40 <nrfx_twi_0_irq_handler+0x8c>
   1fe3e:	b11f      	cbz	r7, 1fe48 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
   1fe40:	e9d4 3100 	ldrd	r3, r1, [r4]
   1fe44:	4668      	mov	r0, sp
   1fe46:	4798      	blx	r3
}
   1fe48:	b007      	add	sp, #28
   1fe4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1fe4c:	075a      	lsls	r2, r3, #29
   1fe4e:	d501      	bpl.n	1fe54 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1fe50:	2302      	movs	r3, #2
   1fe52:	e7ec      	b.n	1fe2e <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1fe54:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   1fe56:	bf4c      	ite	mi
   1fe58:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1fe5a:	2304      	movpl	r3, #4
   1fe5c:	e7e7      	b.n	1fe2e <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
   1fe5e:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   1fe62:	e7e6      	b.n	1fe32 <nrfx_twi_0_irq_handler+0x7e>
   1fe64:	2000f4c8 	.word	0x2000f4c8
   1fe68:	40003000 	.word	0x40003000
   1fe6c:	2000f4d4 	.word	0x2000f4d4

0001fe70 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe72:	4b10      	ldr	r3, [pc, #64]	; (1feb4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1fe74:	4f10      	ldr	r7, [pc, #64]	; (1feb8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe76:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1fe7a:	3001      	adds	r0, #1
   1fe7c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fe80:	42ae      	cmp	r6, r5
   1fe82:	d800      	bhi.n	1fe86 <z_sys_init_run_level+0x16>
		}
	}
}
   1fe84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1fe86:	e9d5 3400 	ldrd	r3, r4, [r5]
   1fe8a:	4620      	mov	r0, r4
   1fe8c:	4798      	blx	r3
   1fe8e:	b170      	cbz	r0, 1feae <z_sys_init_run_level+0x3e>
   1fe90:	b16c      	cbz	r4, 1feae <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1fe92:	1be4      	subs	r4, r4, r7
   1fe94:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1fe96:	0961      	lsrs	r1, r4, #5
   1fe98:	4a08      	ldr	r2, [pc, #32]	; (1febc <z_sys_init_run_level+0x4c>)
   1fe9a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1fe9e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1fea2:	2301      	movs	r3, #1
   1fea4:	fa03 f404 	lsl.w	r4, r3, r4
   1fea8:	4304      	orrs	r4, r0
   1feaa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1feae:	3508      	adds	r5, #8
   1feb0:	e7e6      	b.n	1fe80 <z_sys_init_run_level+0x10>
   1feb2:	bf00      	nop
   1feb4:	00029cb4 	.word	0x00029cb4
   1feb8:	20009e6c 	.word	0x20009e6c
   1febc:	20009f1c 	.word	0x20009f1c

0001fec0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1fec0:	4b08      	ldr	r3, [pc, #32]	; (1fee4 <z_device_ready+0x24>)
   1fec2:	1ac0      	subs	r0, r0, r3
   1fec4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1fec6:	4b08      	ldr	r3, [pc, #32]	; (1fee8 <z_device_ready+0x28>)
   1fec8:	0942      	lsrs	r2, r0, #5
   1feca:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1fece:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1fed2:	2301      	movs	r3, #1
   1fed4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1fed8:	4210      	tst	r0, r2
}
   1feda:	bf0c      	ite	eq
   1fedc:	4618      	moveq	r0, r3
   1fede:	2000      	movne	r0, #0
   1fee0:	4770      	bx	lr
   1fee2:	bf00      	nop
   1fee4:	20009e6c 	.word	0x20009e6c
   1fee8:	20009f1c 	.word	0x20009f1c

0001feec <z_impl_device_get_binding>:
{
   1feec:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1feee:	4c10      	ldr	r4, [pc, #64]	; (1ff30 <z_impl_device_get_binding+0x44>)
   1fef0:	4e10      	ldr	r6, [pc, #64]	; (1ff34 <z_impl_device_get_binding+0x48>)
{
   1fef2:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   1fef4:	42b4      	cmp	r4, r6
   1fef6:	d104      	bne.n	1ff02 <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fef8:	4c0d      	ldr	r4, [pc, #52]	; (1ff30 <z_impl_device_get_binding+0x44>)
   1fefa:	42b4      	cmp	r4, r6
   1fefc:	d10a      	bne.n	1ff14 <z_impl_device_get_binding+0x28>
	return NULL;
   1fefe:	2400      	movs	r4, #0
   1ff00:	e014      	b.n	1ff2c <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ff02:	4620      	mov	r0, r4
   1ff04:	f7ff ffdc 	bl	1fec0 <z_device_ready>
   1ff08:	b110      	cbz	r0, 1ff10 <z_impl_device_get_binding+0x24>
   1ff0a:	6823      	ldr	r3, [r4, #0]
   1ff0c:	42ab      	cmp	r3, r5
   1ff0e:	d00d      	beq.n	1ff2c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ff10:	3410      	adds	r4, #16
   1ff12:	e7ef      	b.n	1fef4 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ff14:	4620      	mov	r0, r4
   1ff16:	f7ff ffd3 	bl	1fec0 <z_device_ready>
   1ff1a:	b908      	cbnz	r0, 1ff20 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ff1c:	3410      	adds	r4, #16
   1ff1e:	e7ec      	b.n	1fefa <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ff20:	6821      	ldr	r1, [r4, #0]
   1ff22:	4628      	mov	r0, r5
   1ff24:	f004 fe66 	bl	24bf4 <strcmp>
   1ff28:	2800      	cmp	r0, #0
   1ff2a:	d1f7      	bne.n	1ff1c <z_impl_device_get_binding+0x30>
}
   1ff2c:	4620      	mov	r0, r4
   1ff2e:	bd70      	pop	{r4, r5, r6, pc}
   1ff30:	20009e6c 	.word	0x20009e6c
   1ff34:	20009f1c 	.word	0x20009f1c

0001ff38 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1ff38:	4b01      	ldr	r3, [pc, #4]	; (1ff40 <z_impl_z_errno+0x8>)
   1ff3a:	6898      	ldr	r0, [r3, #8]
}
   1ff3c:	3068      	adds	r0, #104	; 0x68
   1ff3e:	4770      	bx	lr
   1ff40:	2000f504 	.word	0x2000f504

0001ff44 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1ff44:	b510      	push	{r4, lr}
   1ff46:	4604      	mov	r4, r0
	z_impl_log_panic();
   1ff48:	f7e5 fccc 	bl	58e4 <z_impl_log_panic>
   1ff4c:	4b06      	ldr	r3, [pc, #24]	; (1ff68 <k_sys_fatal_error_handler+0x24>)
   1ff4e:	4907      	ldr	r1, [pc, #28]	; (1ff6c <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1ff50:	4807      	ldr	r0, [pc, #28]	; (1ff70 <k_sys_fatal_error_handler+0x2c>)
   1ff52:	1ac9      	subs	r1, r1, r3
   1ff54:	08c9      	lsrs	r1, r1, #3
   1ff56:	0189      	lsls	r1, r1, #6
   1ff58:	f041 0101 	orr.w	r1, r1, #1
   1ff5c:	f002 fe52 	bl	22c04 <log_0>
	arch_system_halt(reason);
   1ff60:	4620      	mov	r0, r4
   1ff62:	f007 fac8 	bl	274f6 <arch_system_halt>
   1ff66:	bf00      	nop
   1ff68:	000281b4 	.word	0x000281b4
   1ff6c:	000282fc 	.word	0x000282fc
   1ff70:	0002e45d 	.word	0x0002e45d

0001ff74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ff74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ff78:	4606      	mov	r6, r0
   1ff7a:	460f      	mov	r7, r1
	__asm__ volatile(
   1ff7c:	f04f 0320 	mov.w	r3, #32
   1ff80:	f3ef 8811 	mrs	r8, BASEPRI
   1ff84:	f383 8811 	msr	BASEPRI, r3
   1ff88:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ff8c:	f000 fe3e 	bl	20c0c <z_impl_k_current_get>
   1ff90:	4c1f      	ldr	r4, [pc, #124]	; (20010 <z_fatal_error+0x9c>)
   1ff92:	4b20      	ldr	r3, [pc, #128]	; (20014 <z_fatal_error+0xa0>)
   1ff94:	1ae4      	subs	r4, r4, r3
   1ff96:	2e04      	cmp	r6, #4
   1ff98:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1ff9c:	bf96      	itet	ls
   1ff9e:	4a1e      	ldrls	r2, [pc, #120]	; (20018 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ffa0:	4a1e      	ldrhi	r2, [pc, #120]	; (2001c <z_fatal_error+0xa8>)
   1ffa2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1ffa6:	01a4      	lsls	r4, r4, #6
   1ffa8:	f044 0301 	orr.w	r3, r4, #1
   1ffac:	4605      	mov	r5, r0
   1ffae:	f8ad 3000 	strh.w	r3, [sp]
   1ffb2:	481b      	ldr	r0, [pc, #108]	; (20020 <z_fatal_error+0xac>)
   1ffb4:	2300      	movs	r3, #0
   1ffb6:	4631      	mov	r1, r6
   1ffb8:	f002 fe5e 	bl	22c78 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1ffbc:	b147      	cbz	r7, 1ffd0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1ffbe:	69fb      	ldr	r3, [r7, #28]
   1ffc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1ffc4:	b123      	cbz	r3, 1ffd0 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1ffc6:	4817      	ldr	r0, [pc, #92]	; (20024 <z_fatal_error+0xb0>)
   1ffc8:	f044 0101 	orr.w	r1, r4, #1
   1ffcc:	f002 fe1a 	bl	22c04 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1ffd0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1ffd4:	b12d      	cbz	r5, 1ffe2 <z_fatal_error+0x6e>
   1ffd6:	4628      	mov	r0, r5
   1ffd8:	f007 fcfe 	bl	279d8 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1ffdc:	b108      	cbz	r0, 1ffe2 <z_fatal_error+0x6e>
   1ffde:	7803      	ldrb	r3, [r0, #0]
   1ffe0:	b903      	cbnz	r3, 1ffe4 <z_fatal_error+0x70>
		thread_name = "unknown";
   1ffe2:	4811      	ldr	r0, [pc, #68]	; (20028 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1ffe4:	f7e5 fafa 	bl	55dc <log_strdup>
   1ffe8:	4623      	mov	r3, r4
   1ffea:	4602      	mov	r2, r0
   1ffec:	4629      	mov	r1, r5
   1ffee:	480f      	ldr	r0, [pc, #60]	; (2002c <z_fatal_error+0xb8>)
   1fff0:	f002 fe29 	bl	22c46 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1fff4:	4639      	mov	r1, r7
   1fff6:	4630      	mov	r0, r6
   1fff8:	f7ff ffa4 	bl	1ff44 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1fffc:	f388 8811 	msr	BASEPRI, r8
   20000:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20004:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   20006:	b002      	add	sp, #8
   20008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2000c:	f7e7 bef4 	b.w	7df8 <z_impl_k_thread_abort>
   20010:	000282fc 	.word	0x000282fc
   20014:	000281b4 	.word	0x000281b4
   20018:	00029ccc 	.word	0x00029ccc
   2001c:	0002e46c 	.word	0x0002e46c
   20020:	0002e47a 	.word	0x0002e47a
   20024:	0002e4a2 	.word	0x0002e4a2
   20028:	0002ca4d 	.word	0x0002ca4d
   2002c:	0002e4c3 	.word	0x0002e4c3

00020030 <z_pm_save_idle_exit>:
}
#endif /* !SMP_FALLBACK */


void z_pm_save_idle_exit(int32_t ticks)
{
   20030:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   20032:	4b04      	ldr	r3, [pc, #16]	; (20044 <z_pm_save_idle_exit+0x14>)
   20034:	781b      	ldrb	r3, [r3, #0]
   20036:	b10b      	cbz	r3, 2003c <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   20038:	f7e6 fe4e 	bl	6cd8 <pm_system_resume>
	}
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}
   2003c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   20040:	f003 bc0f 	b.w	23862 <z_clock_idle_exit>
   20044:	2000fb36 	.word	0x2000fb36

00020048 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   20048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   2004c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 200bc <idle+0x74>
	pm_idle_exit_notify = 1U;
   20050:	4e1b      	ldr	r6, [pc, #108]	; (200c0 <idle+0x78>)
{
   20052:	4605      	mov	r5, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20054:	2701      	movs	r7, #1
	__asm__ volatile(
   20056:	f04f 0220 	mov.w	r2, #32
   2005a:	f3ef 8311 	mrs	r3, BASEPRI
   2005e:	f382 8811 	msr	BASEPRI, r2
   20062:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   20066:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   20068:	b190      	cbz	r0, 20090 <idle+0x48>
			cpu->pending_abort = NULL;
   2006a:	2200      	movs	r2, #0
   2006c:	612a      	str	r2, [r5, #16]
	__asm__ volatile(
   2006e:	f383 8811 	msr	BASEPRI, r3
   20072:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   20076:	f000 fc05 	bl	20884 <z_thread_single_abort>
	__asm__ volatile(
   2007a:	f04f 0320 	mov.w	r3, #32
   2007e:	f3ef 8011 	mrs	r0, BASEPRI
   20082:	f383 8811 	msr	BASEPRI, r3
   20086:	f3bf 8f6f 	isb	sy
   2008a:	f007 fbb4 	bl	277f6 <z_reschedule_irqlock>
			continue;
   2008e:	e7e2      	b.n	20056 <idle+0xe>
		int32_t ticks = z_get_next_timeout_expiry();
   20090:	f007 fd32 	bl	27af8 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20094:	2101      	movs	r1, #1
   20096:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   20098:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2009a:	bfd8      	it	le
   2009c:	4608      	movle	r0, r1
   2009e:	f007 fd3b 	bl	27b18 <z_set_timeout_expiry>
	idle_state = pm_system_suspend(ticks);
   200a2:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   200a4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   200a8:	7037      	strb	r7, [r6, #0]
	idle_state = pm_system_suspend(ticks);
   200aa:	f7e6 fdd9 	bl	6c60 <pm_system_suspend>
	if (idle_state == PM_STATE_ACTIVE) {
   200ae:	2800      	cmp	r0, #0
   200b0:	d1d1      	bne.n	20056 <idle+0xe>
		pm_idle_exit_notify = 0U;
   200b2:	7030      	strb	r0, [r6, #0]
	arch_cpu_idle();
   200b4:	f7e7 fbb0 	bl	7818 <arch_cpu_idle>
}
   200b8:	e7cd      	b.n	20056 <idle+0xe>
   200ba:	bf00      	nop
   200bc:	2000f504 	.word	0x2000f504
   200c0:	2000fb36 	.word	0x2000fb36

000200c4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   200c4:	4802      	ldr	r0, [pc, #8]	; (200d0 <z_bss_zero+0xc>)
   200c6:	4a03      	ldr	r2, [pc, #12]	; (200d4 <z_bss_zero+0x10>)
   200c8:	2100      	movs	r1, #0
   200ca:	1a12      	subs	r2, r2, r0
   200cc:	f004 bdeb 	b.w	24ca6 <memset>
   200d0:	2000a268 	.word	0x2000a268
   200d4:	2000fb38 	.word	0x2000fb38

000200d8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   200d8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   200da:	4b0a      	ldr	r3, [pc, #40]	; (20104 <bg_thread_main+0x2c>)
   200dc:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   200de:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   200e0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   200e2:	f7ff fec5 	bl	1fe70 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   200e6:	f000 ff31 	bl	20f4c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   200ea:	2003      	movs	r0, #3
   200ec:	f7ff fec0 	bl	1fe70 <z_sys_init_run_level>

	z_init_static_threads();
   200f0:	f000 fe56 	bl	20da0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   200f4:	f7e1 f8e0 	bl	12b8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   200f8:	4a03      	ldr	r2, [pc, #12]	; (20108 <bg_thread_main+0x30>)
   200fa:	7b13      	ldrb	r3, [r2, #12]
   200fc:	f023 0301 	bic.w	r3, r3, #1
   20100:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20102:	bd08      	pop	{r3, pc}
   20104:	2000fb37 	.word	0x2000fb37
   20108:	2000b068 	.word	0x2000b068

0002010c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2010c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   20110:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20112:	f7e5 f9bb 	bl	548c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20116:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 201ec <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2011a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2011e:	4d34      	ldr	r5, [pc, #208]	; (201f0 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   20120:	4e34      	ldr	r6, [pc, #208]	; (201f4 <z_cstart+0xe8>)
   20122:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20124:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 201f8 <z_cstart+0xec>
	z_setup_new_thread(thread, stack,
   20128:	4f34      	ldr	r7, [pc, #208]	; (201fc <z_cstart+0xf0>)
   2012a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2012e:	2400      	movs	r4, #0
   20130:	616b      	str	r3, [r5, #20]
   20132:	23e0      	movs	r3, #224	; 0xe0
   20134:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20138:	77ec      	strb	r4, [r5, #31]
   2013a:	762c      	strb	r4, [r5, #24]
   2013c:	766c      	strb	r4, [r5, #25]
   2013e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20140:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20142:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20146:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20148:	f7e7 fe34 	bl	7db4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2014c:	f7e7 fb5e 	bl	780c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20150:	f04f 33ff 	mov.w	r3, #4294967295
   20154:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20156:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   20158:	4d29      	ldr	r5, [pc, #164]	; (20200 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2015a:	f240 1301 	movw	r3, #257	; 0x101
   2015e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   20162:	ab06      	add	r3, sp, #24
   20164:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20166:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   20168:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   2016c:	f7ff fe80 	bl	1fe70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20170:	2001      	movs	r0, #1
   20172:	f7ff fe7d 	bl	1fe70 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20176:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   2017a:	f000 fc99 	bl	20ab0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2017e:	4b21      	ldr	r3, [pc, #132]	; (20204 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   20180:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20182:	4921      	ldr	r1, [pc, #132]	; (20208 <z_cstart+0xfc>)
   20184:	9305      	str	r3, [sp, #20]
   20186:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2018a:	4653      	mov	r3, sl
   2018c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   20190:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20194:	9400      	str	r4, [sp, #0]
   20196:	4630      	mov	r0, r6
   20198:	f000 fda4 	bl	20ce4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2019c:	7b73      	ldrb	r3, [r6, #13]
   2019e:	4680      	mov	r8, r0
   201a0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   201a4:	4630      	mov	r0, r6
   201a6:	7373      	strb	r3, [r6, #13]
   201a8:	f007 fb63 	bl	27872 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   201ac:	230f      	movs	r3, #15
   201ae:	e9cd 4302 	strd	r4, r3, [sp, #8]
   201b2:	4916      	ldr	r1, [pc, #88]	; (2020c <z_cstart+0x100>)
   201b4:	4b16      	ldr	r3, [pc, #88]	; (20210 <z_cstart+0x104>)
   201b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   201ba:	e9cd b404 	strd	fp, r4, [sp, #16]
   201be:	e9cd 5400 	strd	r5, r4, [sp]
   201c2:	4638      	mov	r0, r7
   201c4:	f000 fd8e 	bl	20ce4 <z_setup_new_thread>
   201c8:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   201ca:	60ef      	str	r7, [r5, #12]
   201cc:	f023 0304 	bic.w	r3, r3, #4
   201d0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   201d2:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   201d6:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   201da:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   201dc:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   201e0:	4652      	mov	r2, sl
   201e2:	4641      	mov	r1, r8
   201e4:	4630      	mov	r0, r6
   201e6:	f7e7 faf7 	bl	77d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   201ea:	bf00      	nop
   201ec:	20012a80 	.word	0x20012a80
   201f0:	e000ed00 	.word	0xe000ed00
   201f4:	2000b068 	.word	0x2000b068
   201f8:	000200d9 	.word	0x000200d9
   201fc:	2000afe0 	.word	0x2000afe0
   20200:	2000f504 	.word	0x2000f504
   20204:	0002e525 	.word	0x0002e525
   20208:	20011ce0 	.word	0x20011ce0
   2020c:	20012100 	.word	0x20012100
   20210:	00020049 	.word	0x00020049

00020214 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   20214:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20216:	4c06      	ldr	r4, [pc, #24]	; (20230 <statics_init+0x1c>)
   20218:	4d06      	ldr	r5, [pc, #24]	; (20234 <statics_init+0x20>)
   2021a:	42ac      	cmp	r4, r5
   2021c:	d301      	bcc.n	20222 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   2021e:	2000      	movs	r0, #0
   20220:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20222:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20226:	4620      	mov	r0, r4
   20228:	f007 f96e 	bl	27508 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2022c:	3414      	adds	r4, #20
   2022e:	e7f4      	b.n	2021a <statics_init+0x6>
   20230:	2000a094 	.word	0x2000a094
   20234:	2000a094 	.word	0x2000a094

00020238 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20238:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2023a:	4b0e      	ldr	r3, [pc, #56]	; (20274 <init_mem_slab_module+0x3c>)
   2023c:	4c0e      	ldr	r4, [pc, #56]	; (20278 <init_mem_slab_module+0x40>)
   2023e:	42a3      	cmp	r3, r4
   20240:	d301      	bcc.n	20246 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   20242:	2000      	movs	r0, #0
	return rc;
}
   20244:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20246:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   2024a:	ea41 0200 	orr.w	r2, r1, r0
   2024e:	f012 0203 	ands.w	r2, r2, #3
   20252:	d10b      	bne.n	2026c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   20254:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   20256:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20258:	42aa      	cmp	r2, r5
   2025a:	d101      	bne.n	20260 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2025c:	331c      	adds	r3, #28
   2025e:	e7ee      	b.n	2023e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   20260:	695e      	ldr	r6, [r3, #20]
   20262:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20264:	3201      	adds	r2, #1
		slab->free_list = p;
   20266:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   20268:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2026a:	e7f5      	b.n	20258 <init_mem_slab_module+0x20>
	return rc;
   2026c:	f06f 0015 	mvn.w	r0, #21
   20270:	e7e8      	b.n	20244 <init_mem_slab_module+0xc>
   20272:	bf00      	nop
   20274:	2000a040 	.word	0x2000a040
   20278:	2000a094 	.word	0x2000a094

0002027c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2027c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2027e:	460c      	mov	r4, r1
   20280:	f04f 0520 	mov.w	r5, #32
   20284:	f3ef 8111 	mrs	r1, BASEPRI
   20288:	f385 8811 	msr	BASEPRI, r5
   2028c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   20290:	6945      	ldr	r5, [r0, #20]
   20292:	b15d      	cbz	r5, 202ac <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   20294:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   20296:	682b      	ldr	r3, [r5, #0]
   20298:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2029a:	6983      	ldr	r3, [r0, #24]
   2029c:	3301      	adds	r3, #1
   2029e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   202a0:	2000      	movs	r0, #0
	__asm__ volatile(
   202a2:	f381 8811 	msr	BASEPRI, r1
   202a6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   202aa:	e011      	b.n	202d0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   202ac:	ea52 0c03 	orrs.w	ip, r2, r3
   202b0:	d103      	bne.n	202ba <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   202b2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   202b4:	f06f 000b 	mvn.w	r0, #11
   202b8:	e7f3      	b.n	202a2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   202ba:	e9cd 2300 	strd	r2, r3, [sp]
   202be:	4602      	mov	r2, r0
   202c0:	4804      	ldr	r0, [pc, #16]	; (202d4 <k_mem_slab_alloc+0x58>)
   202c2:	f000 fba1 	bl	20a08 <z_pend_curr>
		if (result == 0) {
   202c6:	b918      	cbnz	r0, 202d0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   202c8:	4b03      	ldr	r3, [pc, #12]	; (202d8 <k_mem_slab_alloc+0x5c>)
   202ca:	689b      	ldr	r3, [r3, #8]
   202cc:	695b      	ldr	r3, [r3, #20]
   202ce:	6023      	str	r3, [r4, #0]
}
   202d0:	b003      	add	sp, #12
   202d2:	bd30      	pop	{r4, r5, pc}
   202d4:	2000fb38 	.word	0x2000fb38
   202d8:	2000f504 	.word	0x2000f504

000202dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   202dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202de:	4604      	mov	r4, r0
   202e0:	460d      	mov	r5, r1
	__asm__ volatile(
   202e2:	f04f 0320 	mov.w	r3, #32
   202e6:	f3ef 8611 	mrs	r6, BASEPRI
   202ea:	f383 8811 	msr	BASEPRI, r3
   202ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   202f2:	6947      	ldr	r7, [r0, #20]
   202f4:	b977      	cbnz	r7, 20314 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   202f6:	f007 fb29 	bl	2794c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   202fa:	b158      	cbz	r0, 20314 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   202fc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   202fe:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20300:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   20304:	f007 fab5 	bl	27872 <z_ready_thread>
			z_reschedule(&lock, key);
   20308:	4631      	mov	r1, r6
   2030a:	4809      	ldr	r0, [pc, #36]	; (20330 <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   2030c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   20310:	f000 b93a 	b.w	20588 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20314:	682b      	ldr	r3, [r5, #0]
   20316:	6962      	ldr	r2, [r4, #20]
   20318:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2031a:	682b      	ldr	r3, [r5, #0]
   2031c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2031e:	69a3      	ldr	r3, [r4, #24]
   20320:	3b01      	subs	r3, #1
   20322:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   20324:	f386 8811 	msr	BASEPRI, r6
   20328:	f3bf 8f6f 	isb	sy
}
   2032c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2032e:	bf00      	nop
   20330:	2000fb38 	.word	0x2000fb38

00020334 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20338:	4604      	mov	r4, r0
   2033a:	4617      	mov	r7, r2
   2033c:	461e      	mov	r6, r3
	__asm__ volatile(
   2033e:	f04f 0320 	mov.w	r3, #32
   20342:	f3ef 8811 	mrs	r8, BASEPRI
   20346:	f383 8811 	msr	BASEPRI, r3
   2034a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2034e:	68c3      	ldr	r3, [r0, #12]
   20350:	4a2f      	ldr	r2, [pc, #188]	; (20410 <z_impl_k_mutex_lock+0xdc>)
   20352:	b16b      	cbz	r3, 20370 <z_impl_k_mutex_lock+0x3c>
   20354:	6880      	ldr	r0, [r0, #8]
   20356:	6891      	ldr	r1, [r2, #8]
   20358:	4288      	cmp	r0, r1
   2035a:	d019      	beq.n	20390 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2035c:	ea57 0306 	orrs.w	r3, r7, r6
   20360:	d118      	bne.n	20394 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   20362:	f388 8811 	msr	BASEPRI, r8
   20366:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2036a:	f06f 000f 	mvn.w	r0, #15
   2036e:	e00c      	b.n	2038a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   20370:	6891      	ldr	r1, [r2, #8]
   20372:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20376:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   20378:	3301      	adds	r3, #1
   2037a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2037c:	6893      	ldr	r3, [r2, #8]
   2037e:	60a3      	str	r3, [r4, #8]
   20380:	f388 8811 	msr	BASEPRI, r8
   20384:	f3bf 8f6f 	isb	sy
		return 0;
   20388:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2038a:	b002      	add	sp, #8
   2038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20390:	6921      	ldr	r1, [r4, #16]
   20392:	e7f0      	b.n	20376 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20394:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20398:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2039c:	4299      	cmp	r1, r3
   2039e:	bfa8      	it	ge
   203a0:	4619      	movge	r1, r3
   203a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   203a6:	428b      	cmp	r3, r1
   203a8:	dd2b      	ble.n	20402 <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
   203aa:	f007 f92e 	bl	2760a <adjust_owner_prio.isra.0>
   203ae:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   203b0:	e9cd 7600 	strd	r7, r6, [sp]
   203b4:	4817      	ldr	r0, [pc, #92]	; (20414 <z_impl_k_mutex_lock+0xe0>)
   203b6:	4622      	mov	r2, r4
   203b8:	4641      	mov	r1, r8
   203ba:	f000 fb25 	bl	20a08 <z_pend_curr>
	if (got_mutex == 0) {
   203be:	2800      	cmp	r0, #0
   203c0:	d0e3      	beq.n	2038a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   203c2:	f04f 0320 	mov.w	r3, #32
   203c6:	f3ef 8611 	mrs	r6, BASEPRI
   203ca:	f383 8811 	msr	BASEPRI, r3
   203ce:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   203d2:	6823      	ldr	r3, [r4, #0]
   203d4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   203d6:	42a3      	cmp	r3, r4
   203d8:	d007      	beq.n	203ea <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   203da:	b133      	cbz	r3, 203ea <z_impl_k_mutex_lock+0xb6>
   203dc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   203e0:	4299      	cmp	r1, r3
   203e2:	bfa8      	it	ge
   203e4:	4619      	movge	r1, r3
   203e6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   203ea:	68a0      	ldr	r0, [r4, #8]
   203ec:	f007 f90d 	bl	2760a <adjust_owner_prio.isra.0>
   203f0:	b900      	cbnz	r0, 203f4 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
   203f2:	b145      	cbz	r5, 20406 <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
   203f4:	4807      	ldr	r0, [pc, #28]	; (20414 <z_impl_k_mutex_lock+0xe0>)
   203f6:	4631      	mov	r1, r6
   203f8:	f000 f8c6 	bl	20588 <z_reschedule>
	return -EAGAIN;
   203fc:	f06f 000a 	mvn.w	r0, #10
   20400:	e7c3      	b.n	2038a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   20402:	2500      	movs	r5, #0
   20404:	e7d4      	b.n	203b0 <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
   20406:	f386 8811 	msr	BASEPRI, r6
   2040a:	f3bf 8f6f 	isb	sy
   2040e:	e7f5      	b.n	203fc <z_impl_k_mutex_lock+0xc8>
   20410:	2000f504 	.word	0x2000f504
   20414:	2000fb38 	.word	0x2000fb38

00020418 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20418:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   2041a:	6883      	ldr	r3, [r0, #8]
{
   2041c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2041e:	2b00      	cmp	r3, #0
   20420:	d033      	beq.n	2048a <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20422:	4a1d      	ldr	r2, [pc, #116]	; (20498 <z_impl_k_mutex_unlock+0x80>)
   20424:	6892      	ldr	r2, [r2, #8]
   20426:	4293      	cmp	r3, r2
   20428:	d132      	bne.n	20490 <z_impl_k_mutex_unlock+0x78>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   2042a:	7bda      	ldrb	r2, [r3, #15]
   2042c:	3a01      	subs	r2, #1
   2042e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   20430:	68c3      	ldr	r3, [r0, #12]
   20432:	2b01      	cmp	r3, #1
   20434:	d005      	beq.n	20442 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   20436:	3b01      	subs	r3, #1
   20438:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   2043a:	f000 f909 	bl	20650 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   2043e:	2000      	movs	r0, #0
}
   20440:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20442:	f04f 0320 	mov.w	r3, #32
   20446:	f3ef 8511 	mrs	r5, BASEPRI
   2044a:	f383 8811 	msr	BASEPRI, r3
   2044e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20452:	6901      	ldr	r1, [r0, #16]
   20454:	6880      	ldr	r0, [r0, #8]
   20456:	f007 f8d8 	bl	2760a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2045a:	4620      	mov	r0, r4
   2045c:	f007 fa76 	bl	2794c <z_unpend_first_thread>
	mutex->owner = new_owner;
   20460:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20462:	b160      	cbz	r0, 2047e <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   20464:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20468:	6122      	str	r2, [r4, #16]
   2046a:	2200      	movs	r2, #0
   2046c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   20470:	f007 f9ff 	bl	27872 <z_ready_thread>
		z_reschedule(&lock, key);
   20474:	4809      	ldr	r0, [pc, #36]	; (2049c <z_impl_k_mutex_unlock+0x84>)
   20476:	4629      	mov	r1, r5
   20478:	f000 f886 	bl	20588 <z_reschedule>
   2047c:	e7dd      	b.n	2043a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   2047e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20480:	f385 8811 	msr	BASEPRI, r5
   20484:	f3bf 8f6f 	isb	sy
   20488:	e7d7      	b.n	2043a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2048a:	f06f 0015 	mvn.w	r0, #21
   2048e:	e7d7      	b.n	20440 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   20490:	f04f 30ff 	mov.w	r0, #4294967295
   20494:	e7d4      	b.n	20440 <z_impl_k_mutex_unlock+0x28>
   20496:	bf00      	nop
   20498:	2000f504 	.word	0x2000f504
   2049c:	2000fb38 	.word	0x2000fb38

000204a0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   204a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   204a2:	4611      	mov	r1, r2
	__asm__ volatile(
   204a4:	f04f 0220 	mov.w	r2, #32
   204a8:	f3ef 8511 	mrs	r5, BASEPRI
   204ac:	f382 8811 	msr	BASEPRI, r2
   204b0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   204b4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   204b6:	b19c      	cbz	r4, 204e0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   204b8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   204ba:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   204bc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   204c0:	4294      	cmp	r4, r2
	list->head = node;
   204c2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   204c4:	bf08      	it	eq
   204c6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   204c8:	2101      	movs	r1, #1
   204ca:	4620      	mov	r0, r4
   204cc:	f007 f911 	bl	276f2 <z_queue_node_peek>
   204d0:	4604      	mov	r4, r0
	__asm__ volatile(
   204d2:	f385 8811 	msr	BASEPRI, r5
   204d6:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   204da:	4620      	mov	r0, r4
   204dc:	b003      	add	sp, #12
   204de:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   204e0:	ea51 0203 	orrs.w	r2, r1, r3
   204e4:	d0f5      	beq.n	204d2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   204e6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   204ea:	e9cd 1300 	strd	r1, r3, [sp]
   204ee:	4610      	mov	r0, r2
   204f0:	4629      	mov	r1, r5
   204f2:	f000 fa89 	bl	20a08 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   204f6:	2800      	cmp	r0, #0
   204f8:	d1ef      	bne.n	204da <z_impl_k_queue_get+0x3a>
   204fa:	4b02      	ldr	r3, [pc, #8]	; (20504 <z_impl_k_queue_get+0x64>)
   204fc:	689b      	ldr	r3, [r3, #8]
   204fe:	695c      	ldr	r4, [r3, #20]
   20500:	e7eb      	b.n	204da <z_impl_k_queue_get+0x3a>
   20502:	bf00      	nop
   20504:	2000f504 	.word	0x2000f504

00020508 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   20508:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2050a:	4c08      	ldr	r4, [pc, #32]	; (2052c <z_reset_time_slice+0x24>)
   2050c:	6823      	ldr	r3, [r4, #0]
   2050e:	b15b      	cbz	r3, 20528 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   20510:	f7e6 fea0 	bl	7254 <z_clock_elapsed>
   20514:	4603      	mov	r3, r0
   20516:	6820      	ldr	r0, [r4, #0]
   20518:	4a05      	ldr	r2, [pc, #20]	; (20530 <z_reset_time_slice+0x28>)
   2051a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   2051c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   20520:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   20522:	2100      	movs	r1, #0
   20524:	f007 baf8 	b.w	27b18 <z_set_timeout_expiry>
}
   20528:	bd10      	pop	{r4, pc}
   2052a:	bf00      	nop
   2052c:	2000f540 	.word	0x2000f540
   20530:	2000f504 	.word	0x2000f504

00020534 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   20534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20536:	4604      	mov	r4, r0
   20538:	460d      	mov	r5, r1
	__asm__ volatile(
   2053a:	f04f 0320 	mov.w	r3, #32
   2053e:	f3ef 8711 	mrs	r7, BASEPRI
   20542:	f383 8811 	msr	BASEPRI, r3
   20546:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2054a:	4b0c      	ldr	r3, [pc, #48]	; (2057c <k_sched_time_slice_set+0x48>)
   2054c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2054e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20552:	f240 30e7 	movw	r0, #999	; 0x3e7
   20556:	6159      	str	r1, [r3, #20]
   20558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2055c:	2300      	movs	r3, #0
   2055e:	fbe4 0106 	umlal	r0, r1, r4, r6
   20562:	f7e0 fce1 	bl	f28 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20566:	4b06      	ldr	r3, [pc, #24]	; (20580 <k_sched_time_slice_set+0x4c>)
   20568:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2056a:	4b06      	ldr	r3, [pc, #24]	; (20584 <k_sched_time_slice_set+0x50>)
   2056c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2056e:	f7ff ffcb 	bl	20508 <z_reset_time_slice>
	__asm__ volatile(
   20572:	f387 8811 	msr	BASEPRI, r7
   20576:	f3bf 8f6f 	isb	sy
	}
}
   2057a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2057c:	2000f504 	.word	0x2000f504
   20580:	2000f540 	.word	0x2000f540
   20584:	2000f53c 	.word	0x2000f53c

00020588 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20588:	b949      	cbnz	r1, 2059e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2058a:	f3ef 8005 	mrs	r0, IPSR
   2058e:	b930      	cbnz	r0, 2059e <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   20590:	4b05      	ldr	r3, [pc, #20]	; (205a8 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   20592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   20594:	689b      	ldr	r3, [r3, #8]
   20596:	429a      	cmp	r2, r3
   20598:	d001      	beq.n	2059e <z_reschedule+0x16>
	ret = arch_swap(key);
   2059a:	f7e7 b83d 	b.w	7618 <arch_swap>
   2059e:	f381 8811 	msr	BASEPRI, r1
   205a2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   205a6:	4770      	bx	lr
   205a8:	2000f504 	.word	0x2000f504

000205ac <k_sched_lock>:
	__asm__ volatile(
   205ac:	f04f 0320 	mov.w	r3, #32
   205b0:	f3ef 8111 	mrs	r1, BASEPRI
   205b4:	f383 8811 	msr	BASEPRI, r3
   205b8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   205bc:	4b04      	ldr	r3, [pc, #16]	; (205d0 <k_sched_lock+0x24>)
   205be:	689a      	ldr	r2, [r3, #8]
   205c0:	7bd3      	ldrb	r3, [r2, #15]
   205c2:	3b01      	subs	r3, #1
   205c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   205c6:	f381 8811 	msr	BASEPRI, r1
   205ca:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   205ce:	4770      	bx	lr
   205d0:	2000f504 	.word	0x2000f504

000205d4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   205d4:	4b09      	ldr	r3, [pc, #36]	; (205fc <z_priq_dumb_remove+0x28>)
   205d6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   205da:	4282      	cmp	r2, r0
   205dc:	d105      	bne.n	205ea <z_priq_dumb_remove+0x16>
   205de:	689b      	ldr	r3, [r3, #8]
   205e0:	428b      	cmp	r3, r1
   205e2:	d102      	bne.n	205ea <z_priq_dumb_remove+0x16>
   205e4:	7b4b      	ldrb	r3, [r1, #13]
   205e6:	06db      	lsls	r3, r3, #27
   205e8:	d106      	bne.n	205f8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   205ea:	e9d1 3200 	ldrd	r3, r2, [r1]
   205ee:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   205f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   205f2:	2300      	movs	r3, #0
	node->prev = NULL;
   205f4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   205f8:	4770      	bx	lr
   205fa:	bf00      	nop
   205fc:	2000f504 	.word	0x2000f504

00020600 <update_cache>:
{
   20600:	b538      	push	{r3, r4, r5, lr}
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20602:	4d12      	ldr	r5, [pc, #72]	; (2064c <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   20604:	692b      	ldr	r3, [r5, #16]
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20606:	68aa      	ldr	r2, [r5, #8]
{
   20608:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   2060a:	b10b      	cbz	r3, 20610 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   2060c:	68ec      	ldr	r4, [r5, #12]
   2060e:	e00c      	b.n	2062a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   20610:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   20614:	f007 f927 	bl	27866 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20618:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2061a:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   2061c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   2061e:	bf44      	itt	mi
   20620:	f043 0308 	orrmi.w	r3, r3, #8
   20624:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   20626:	2c00      	cmp	r4, #0
   20628:	d0f0      	beq.n	2060c <update_cache+0xc>
	if (preempt_ok != 0) {
   2062a:	b949      	cbnz	r1, 20640 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   2062c:	7b53      	ldrb	r3, [r2, #13]
   2062e:	06db      	lsls	r3, r3, #27
   20630:	d106      	bne.n	20640 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20632:	69a3      	ldr	r3, [r4, #24]
   20634:	b923      	cbnz	r3, 20640 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   20636:	89d3      	ldrh	r3, [r2, #14]
   20638:	2b7f      	cmp	r3, #127	; 0x7f
   2063a:	d901      	bls.n	20640 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   2063c:	62aa      	str	r2, [r5, #40]	; 0x28
}
   2063e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   20640:	4294      	cmp	r4, r2
   20642:	d001      	beq.n	20648 <update_cache+0x48>
			z_reset_time_slice();
   20644:	f7ff ff60 	bl	20508 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   20648:	62ac      	str	r4, [r5, #40]	; 0x28
}
   2064a:	e7f8      	b.n	2063e <update_cache+0x3e>
   2064c:	2000f504 	.word	0x2000f504

00020650 <k_sched_unlock>:
{
   20650:	b510      	push	{r4, lr}
	__asm__ volatile(
   20652:	f04f 0320 	mov.w	r3, #32
   20656:	f3ef 8411 	mrs	r4, BASEPRI
   2065a:	f383 8811 	msr	BASEPRI, r3
   2065e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   20662:	4b08      	ldr	r3, [pc, #32]	; (20684 <k_sched_unlock+0x34>)
   20664:	689a      	ldr	r2, [r3, #8]
   20666:	7bd3      	ldrb	r3, [r2, #15]
   20668:	3301      	adds	r3, #1
   2066a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2066c:	2000      	movs	r0, #0
   2066e:	f7ff ffc7 	bl	20600 <update_cache>
	__asm__ volatile(
   20672:	f384 8811 	msr	BASEPRI, r4
   20676:	f3bf 8f6f 	isb	sy
}
   2067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2067e:	f007 b8c6 	b.w	2780e <z_reschedule_unlocked>
   20682:	bf00      	nop
   20684:	2000f504 	.word	0x2000f504

00020688 <ready_thread>:
{
   20688:	b4f0      	push	{r4, r5, r6, r7}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2068a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2068e:	7b41      	ldrb	r1, [r0, #13]
   20690:	2b00      	cmp	r3, #0
   20692:	db28      	blt.n	206e6 <ready_thread+0x5e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20694:	06cb      	lsls	r3, r1, #27
   20696:	d126      	bne.n	206e6 <ready_thread+0x5e>
   20698:	6983      	ldr	r3, [r0, #24]
   2069a:	bb23      	cbnz	r3, 206e6 <ready_thread+0x5e>
	return list->head == list;
   2069c:	4a13      	ldr	r2, [pc, #76]	; (206ec <ready_thread+0x64>)
	return (node == list->tail) ? NULL : node->next;
   2069e:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206a2:	f102 052c 	add.w	r5, r2, #44	; 0x2c
   206a6:	42ab      	cmp	r3, r5
   206a8:	d017      	beq.n	206da <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206aa:	b1b3      	cbz	r3, 206da <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   206ac:	f990 600e 	ldrsb.w	r6, [r0, #14]
   206b0:	f993 700e 	ldrsb.w	r7, [r3, #14]
   206b4:	42b7      	cmp	r7, r6
   206b6:	dd0b      	ble.n	206d0 <ready_thread+0x48>
	node->prev = successor->prev;
   206b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   206ba:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   206be:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   206c0:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   206c2:	f061 017f 	orn	r1, r1, #127	; 0x7f
   206c6:	7341      	strb	r1, [r0, #13]
}
   206c8:	bcf0      	pop	{r4, r5, r6, r7}
		update_cache(0);
   206ca:	2000      	movs	r0, #0
   206cc:	f7ff bf98 	b.w	20600 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   206d0:	42a3      	cmp	r3, r4
   206d2:	d002      	beq.n	206da <ready_thread+0x52>
   206d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206d6:	2b00      	cmp	r3, #0
   206d8:	d1ea      	bne.n	206b0 <ready_thread+0x28>
	node->prev = list->tail;
   206da:	e9c0 5400 	strd	r5, r4, [r0]
	list->tail->next = node;
   206de:	6b13      	ldr	r3, [r2, #48]	; 0x30
   206e0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   206e2:	6310      	str	r0, [r2, #48]	; 0x30
}
   206e4:	e7ed      	b.n	206c2 <ready_thread+0x3a>
}
   206e6:	bcf0      	pop	{r4, r5, r6, r7}
   206e8:	4770      	bx	lr
   206ea:	bf00      	nop
   206ec:	2000f504 	.word	0x2000f504

000206f0 <z_sched_start>:
{
   206f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   206f2:	f04f 0220 	mov.w	r2, #32
   206f6:	f3ef 8411 	mrs	r4, BASEPRI
   206fa:	f382 8811 	msr	BASEPRI, r2
   206fe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   20702:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   20704:	0751      	lsls	r1, r2, #29
   20706:	d404      	bmi.n	20712 <z_sched_start+0x22>
	__asm__ volatile(
   20708:	f384 8811 	msr	BASEPRI, r4
   2070c:	f3bf 8f6f 	isb	sy
}
   20710:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20712:	f022 0204 	bic.w	r2, r2, #4
   20716:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   20718:	f7ff ffb6 	bl	20688 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2071c:	4621      	mov	r1, r4
   2071e:	4802      	ldr	r0, [pc, #8]	; (20728 <z_sched_start+0x38>)
}
   20720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   20724:	f7ff bf30 	b.w	20588 <z_reschedule>
   20728:	2000fb38 	.word	0x2000fb38

0002072c <move_thread_to_end_of_prio_q>:
{
   2072c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2072e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20732:	2b00      	cmp	r3, #0
{
   20734:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   20736:	da02      	bge.n	2073e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   20738:	4816      	ldr	r0, [pc, #88]	; (20794 <move_thread_to_end_of_prio_q+0x68>)
   2073a:	f7ff ff4b 	bl	205d4 <z_priq_dumb_remove>
	return list->head == list;
   2073e:	4a16      	ldr	r2, [pc, #88]	; (20798 <move_thread_to_end_of_prio_q+0x6c>)
	return (node == list->tail) ? NULL : node->next;
   20740:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20744:	f102 042c 	add.w	r4, r2, #44	; 0x2c
   20748:	42a3      	cmp	r3, r4
   2074a:	d01c      	beq.n	20786 <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2074c:	b1db      	cbz	r3, 20786 <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   2074e:	f991 500e 	ldrsb.w	r5, [r1, #14]
   20752:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20756:	42ae      	cmp	r6, r5
   20758:	dd10      	ble.n	2077c <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   2075a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   2075c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   20760:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   20762:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   20764:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   20766:	6890      	ldr	r0, [r2, #8]
   20768:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2076c:	734b      	strb	r3, [r1, #13]
   2076e:	1a43      	subs	r3, r0, r1
   20770:	4258      	negs	r0, r3
}
   20772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   20776:	4158      	adcs	r0, r3
   20778:	f7ff bf42 	b.w	20600 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2077c:	4283      	cmp	r3, r0
   2077e:	d002      	beq.n	20786 <move_thread_to_end_of_prio_q+0x5a>
   20780:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20782:	2b00      	cmp	r3, #0
   20784:	d1e5      	bne.n	20752 <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   20786:	e9c1 4000 	strd	r4, r0, [r1]
	list->tail->next = node;
   2078a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2078c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2078e:	6311      	str	r1, [r2, #48]	; 0x30
}
   20790:	e7e8      	b.n	20764 <move_thread_to_end_of_prio_q+0x38>
   20792:	bf00      	nop
   20794:	2000f530 	.word	0x2000f530
   20798:	2000f504 	.word	0x2000f504

0002079c <z_time_slice>:
{
   2079c:	b538      	push	{r3, r4, r5, lr}
   2079e:	4601      	mov	r1, r0
	__asm__ volatile(
   207a0:	f04f 0320 	mov.w	r3, #32
   207a4:	f3ef 8411 	mrs	r4, BASEPRI
   207a8:	f383 8811 	msr	BASEPRI, r3
   207ac:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   207b0:	4b15      	ldr	r3, [pc, #84]	; (20808 <z_time_slice+0x6c>)
   207b2:	4a16      	ldr	r2, [pc, #88]	; (2080c <z_time_slice+0x70>)
   207b4:	6898      	ldr	r0, [r3, #8]
   207b6:	6815      	ldr	r5, [r2, #0]
   207b8:	42a8      	cmp	r0, r5
   207ba:	d106      	bne.n	207ca <z_time_slice+0x2e>
			z_reset_time_slice();
   207bc:	f7ff fea4 	bl	20508 <z_reset_time_slice>
	__asm__ volatile(
   207c0:	f384 8811 	msr	BASEPRI, r4
   207c4:	f3bf 8f6f 	isb	sy
}
   207c8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   207ca:	2500      	movs	r5, #0
   207cc:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   207ce:	4a10      	ldr	r2, [pc, #64]	; (20810 <z_time_slice+0x74>)
   207d0:	6812      	ldr	r2, [r2, #0]
   207d2:	b1ba      	cbz	r2, 20804 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   207d4:	89c2      	ldrh	r2, [r0, #14]
   207d6:	2a7f      	cmp	r2, #127	; 0x7f
   207d8:	d814      	bhi.n	20804 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   207da:	7b42      	ldrb	r2, [r0, #13]
   207dc:	06d2      	lsls	r2, r2, #27
   207de:	d111      	bne.n	20804 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   207e0:	4a0c      	ldr	r2, [pc, #48]	; (20814 <z_time_slice+0x78>)
   207e2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   207e6:	6812      	ldr	r2, [r2, #0]
   207e8:	4295      	cmp	r5, r2
   207ea:	db0b      	blt.n	20804 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   207ec:	4a0a      	ldr	r2, [pc, #40]	; (20818 <z_time_slice+0x7c>)
   207ee:	4290      	cmp	r0, r2
   207f0:	d008      	beq.n	20804 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   207f2:	695a      	ldr	r2, [r3, #20]
   207f4:	428a      	cmp	r2, r1
   207f6:	dc02      	bgt.n	207fe <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   207f8:	f7ff ff98 	bl	2072c <move_thread_to_end_of_prio_q>
   207fc:	e7de      	b.n	207bc <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   207fe:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   20800:	615a      	str	r2, [r3, #20]
   20802:	e7dd      	b.n	207c0 <z_time_slice+0x24>
   20804:	2200      	movs	r2, #0
   20806:	e7fb      	b.n	20800 <z_time_slice+0x64>
   20808:	2000f504 	.word	0x2000f504
   2080c:	2000f538 	.word	0x2000f538
   20810:	2000f540 	.word	0x2000f540
   20814:	2000f53c 	.word	0x2000f53c
   20818:	2000afe0 	.word	0x2000afe0

0002081c <z_impl_k_thread_suspend>:
{
   2081c:	b570      	push	{r4, r5, r6, lr}
   2081e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20820:	3018      	adds	r0, #24
   20822:	f007 f953 	bl	27acc <z_abort_timeout>
	__asm__ volatile(
   20826:	f04f 0320 	mov.w	r3, #32
   2082a:	f3ef 8611 	mrs	r6, BASEPRI
   2082e:	f383 8811 	msr	BASEPRI, r3
   20832:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20836:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2083a:	2b00      	cmp	r3, #0
   2083c:	da07      	bge.n	2084e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2083e:	480f      	ldr	r0, [pc, #60]	; (2087c <z_impl_k_thread_suspend+0x60>)
   20840:	4621      	mov	r1, r4
   20842:	f7ff fec7 	bl	205d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20846:	7b63      	ldrb	r3, [r4, #13]
   20848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2084c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2084e:	4d0c      	ldr	r5, [pc, #48]	; (20880 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20850:	7b63      	ldrb	r3, [r4, #13]
   20852:	68a8      	ldr	r0, [r5, #8]
   20854:	f043 0310 	orr.w	r3, r3, #16
   20858:	7363      	strb	r3, [r4, #13]
   2085a:	1b03      	subs	r3, r0, r4
   2085c:	4258      	negs	r0, r3
   2085e:	4158      	adcs	r0, r3
   20860:	f7ff fece 	bl	20600 <update_cache>
	__asm__ volatile(
   20864:	f386 8811 	msr	BASEPRI, r6
   20868:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2086c:	68ab      	ldr	r3, [r5, #8]
   2086e:	42a3      	cmp	r3, r4
   20870:	d103      	bne.n	2087a <z_impl_k_thread_suspend+0x5e>
}
   20872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   20876:	f006 bfca 	b.w	2780e <z_reschedule_unlocked>
}
   2087a:	bd70      	pop	{r4, r5, r6, pc}
   2087c:	2000f530 	.word	0x2000f530
   20880:	2000f504 	.word	0x2000f504

00020884 <z_thread_single_abort>:
{
   20884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20888:	4604      	mov	r4, r0
	__asm__ volatile(
   2088a:	f04f 0320 	mov.w	r3, #32
   2088e:	f3ef 8211 	mrs	r2, BASEPRI
   20892:	f383 8811 	msr	BASEPRI, r3
   20896:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   2089a:	7b43      	ldrb	r3, [r0, #13]
   2089c:	f013 0f28 	tst.w	r3, #40	; 0x28
   208a0:	d005      	beq.n	208ae <z_thread_single_abort+0x2a>
	__asm__ volatile(
   208a2:	f382 8811 	msr	BASEPRI, r2
   208a6:	f3bf 8f6f 	isb	sy
}
   208aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   208ae:	f043 0320 	orr.w	r3, r3, #32
   208b2:	7343      	strb	r3, [r0, #13]
   208b4:	f382 8811 	msr	BASEPRI, r2
   208b8:	f3bf 8f6f 	isb	sy
   208bc:	3018      	adds	r0, #24
   208be:	f007 f905 	bl	27acc <z_abort_timeout>
	__asm__ volatile(
   208c2:	f04f 0320 	mov.w	r3, #32
   208c6:	f3ef 8611 	mrs	r6, BASEPRI
   208ca:	f383 8811 	msr	BASEPRI, r3
   208ce:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   208d2:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   208d4:	06d8      	lsls	r0, r3, #27
   208d6:	d116      	bne.n	20906 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   208d8:	69a2      	ldr	r2, [r4, #24]
   208da:	b9a2      	cbnz	r2, 20906 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   208dc:	0619      	lsls	r1, r3, #24
   208de:	d507      	bpl.n	208f0 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   208e0:	4826      	ldr	r0, [pc, #152]	; (2097c <z_thread_single_abort+0xf8>)
   208e2:	4621      	mov	r1, r4
   208e4:	f7ff fe76 	bl	205d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   208e8:	7b63      	ldrb	r3, [r4, #13]
   208ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   208ee:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   208f0:	4b23      	ldr	r3, [pc, #140]	; (20980 <z_thread_single_abort+0xfc>)
   208f2:	6898      	ldr	r0, [r3, #8]
   208f4:	1b02      	subs	r2, r0, r4
   208f6:	4250      	negs	r0, r2
   208f8:	4150      	adcs	r0, r2
   208fa:	f7ff fe81 	bl	20600 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   208fe:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   20902:	2700      	movs	r7, #0
   20904:	e01e      	b.n	20944 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   20906:	079b      	lsls	r3, r3, #30
   20908:	d5f9      	bpl.n	208fe <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2090a:	68a0      	ldr	r0, [r4, #8]
   2090c:	4621      	mov	r1, r4
   2090e:	f7ff fe61 	bl	205d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20912:	7b63      	ldrb	r3, [r4, #13]
   20914:	f023 0302 	bic.w	r3, r3, #2
   20918:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2091a:	2300      	movs	r3, #0
   2091c:	60a3      	str	r3, [r4, #8]
   2091e:	e7ee      	b.n	208fe <z_thread_single_abort+0x7a>
   20920:	f105 0018 	add.w	r0, r5, #24
   20924:	f007 f8d2 	bl	27acc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   20928:	68a8      	ldr	r0, [r5, #8]
   2092a:	4629      	mov	r1, r5
   2092c:	f7ff fe52 	bl	205d4 <z_priq_dumb_remove>
   20930:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   20932:	60af      	str	r7, [r5, #8]
   20934:	f023 0302 	bic.w	r3, r3, #2
   20938:	736b      	strb	r3, [r5, #13]
   2093a:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   2093e:	4628      	mov	r0, r5
   20940:	f7ff fea2 	bl	20688 <ready_thread>
	return list->head == list;
   20944:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20946:	4545      	cmp	r5, r8
   20948:	d001      	beq.n	2094e <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   2094a:	2d00      	cmp	r5, #0
   2094c:	d1e8      	bne.n	20920 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   2094e:	4b0c      	ldr	r3, [pc, #48]	; (20980 <z_thread_single_abort+0xfc>)
   20950:	689a      	ldr	r2, [r3, #8]
   20952:	4b0c      	ldr	r3, [pc, #48]	; (20984 <z_thread_single_abort+0x100>)
   20954:	429a      	cmp	r2, r3
   20956:	d102      	bne.n	2095e <z_thread_single_abort+0xda>
			update_cache(1);
   20958:	2001      	movs	r0, #1
   2095a:	f7ff fe51 	bl	20600 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   2095e:	7b63      	ldrb	r3, [r4, #13]
   20960:	f043 0308 	orr.w	r3, r3, #8
   20964:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   20966:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   20968:	f386 8811 	msr	BASEPRI, r6
   2096c:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   20970:	2b00      	cmp	r3, #0
   20972:	d09a      	beq.n	208aa <z_thread_single_abort+0x26>
		fn_abort(thread);
   20974:	4620      	mov	r0, r4
}
   20976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   2097a:	4718      	bx	r3
   2097c:	2000f530 	.word	0x2000f530
   20980:	2000f504 	.word	0x2000f504
   20984:	2000afe0 	.word	0x2000afe0

00020988 <unready_thread>:
{
   20988:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2098a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2098e:	2b00      	cmp	r3, #0
{
   20990:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   20992:	da06      	bge.n	209a2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   20994:	4807      	ldr	r0, [pc, #28]	; (209b4 <unready_thread+0x2c>)
   20996:	f7ff fe1d 	bl	205d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2099a:	7b4b      	ldrb	r3, [r1, #13]
   2099c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   209a0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   209a2:	4b05      	ldr	r3, [pc, #20]	; (209b8 <unready_thread+0x30>)
   209a4:	6898      	ldr	r0, [r3, #8]
   209a6:	1a43      	subs	r3, r0, r1
   209a8:	4258      	negs	r0, r3
   209aa:	4158      	adcs	r0, r3
}
   209ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   209b0:	f7ff be26 	b.w	20600 <update_cache>
   209b4:	2000f530 	.word	0x2000f530
   209b8:	2000f504 	.word	0x2000f504

000209bc <pend>:
{
   209bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   209c0:	4606      	mov	r6, r0
   209c2:	4615      	mov	r5, r2
   209c4:	461c      	mov	r4, r3
	__asm__ volatile(
   209c6:	f04f 0320 	mov.w	r3, #32
   209ca:	f3ef 8711 	mrs	r7, BASEPRI
   209ce:	f383 8811 	msr	BASEPRI, r3
   209d2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   209d6:	f006 ff7c 	bl	278d2 <add_to_waitq_locked>
	__asm__ volatile(
   209da:	f387 8811 	msr	BASEPRI, r7
   209de:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   209e2:	f1b4 3fff 	cmp.w	r4, #4294967295
   209e6:	bf08      	it	eq
   209e8:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   209ec:	d008      	beq.n	20a00 <pend+0x44>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   209ee:	462a      	mov	r2, r5
   209f0:	4623      	mov	r3, r4
   209f2:	f106 0018 	add.w	r0, r6, #24
   209f6:	4903      	ldr	r1, [pc, #12]	; (20a04 <pend+0x48>)
}
   209f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   209fc:	f000 bb18 	b.w	21030 <z_add_timeout>
   20a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20a04:	00027893 	.word	0x00027893

00020a08 <z_pend_curr>:
{
   20a08:	b510      	push	{r4, lr}
	pending_current = _current;
   20a0a:	4b07      	ldr	r3, [pc, #28]	; (20a28 <z_pend_curr+0x20>)
   20a0c:	6898      	ldr	r0, [r3, #8]
   20a0e:	4b07      	ldr	r3, [pc, #28]	; (20a2c <z_pend_curr+0x24>)
{
   20a10:	460c      	mov	r4, r1
	pending_current = _current;
   20a12:	6018      	str	r0, [r3, #0]
{
   20a14:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   20a16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20a1a:	f7ff ffcf 	bl	209bc <pend>
   20a1e:	4620      	mov	r0, r4
}
   20a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20a24:	f7e6 bdf8 	b.w	7618 <arch_swap>
   20a28:	2000f504 	.word	0x2000f504
   20a2c:	2000f538 	.word	0x2000f538

00020a30 <z_set_prio>:
{
   20a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a32:	4604      	mov	r4, r0
	__asm__ volatile(
   20a34:	f04f 0320 	mov.w	r3, #32
   20a38:	f3ef 8711 	mrs	r7, BASEPRI
   20a3c:	f383 8811 	msr	BASEPRI, r3
   20a40:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20a44:	7b43      	ldrb	r3, [r0, #13]
   20a46:	06db      	lsls	r3, r3, #27
				thread->base.prio = prio;
   20a48:	b24d      	sxtb	r5, r1
   20a4a:	d12b      	bne.n	20aa4 <z_set_prio+0x74>
		if (need_sched) {
   20a4c:	6983      	ldr	r3, [r0, #24]
   20a4e:	bb4b      	cbnz	r3, 20aa4 <z_set_prio+0x74>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   20a50:	4e16      	ldr	r6, [pc, #88]	; (20aac <z_set_prio+0x7c>)
   20a52:	4621      	mov	r1, r4
   20a54:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   20a58:	f7ff fdbc 	bl	205d4 <z_priq_dumb_remove>
	return list->head == list;
   20a5c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				thread->base.prio = prio;
   20a5e:	73a5      	strb	r5, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a60:	4283      	cmp	r3, r0
   20a62:	d018      	beq.n	20a96 <z_set_prio+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20a64:	b1bb      	cbz	r3, 20a96 <z_set_prio+0x66>
	return (node == list->tail) ? NULL : node->next;
   20a66:	6b32      	ldr	r2, [r6, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   20a68:	f993 100e 	ldrsb.w	r1, [r3, #14]
   20a6c:	42a9      	cmp	r1, r5
   20a6e:	dd0d      	ble.n	20a8c <z_set_prio+0x5c>
	node->prev = successor->prev;
   20a70:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20a72:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20a76:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20a78:	605c      	str	r4, [r3, #4]
			update_cache(1);
   20a7a:	2001      	movs	r0, #1
   20a7c:	f7ff fdc0 	bl	20600 <update_cache>
   20a80:	2001      	movs	r0, #1
	__asm__ volatile(
   20a82:	f387 8811 	msr	BASEPRI, r7
   20a86:	f3bf 8f6f 	isb	sy
}
   20a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   20a8c:	4293      	cmp	r3, r2
   20a8e:	d002      	beq.n	20a96 <z_set_prio+0x66>
   20a90:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20a92:	2b00      	cmp	r3, #0
   20a94:	d1e8      	bne.n	20a68 <z_set_prio+0x38>
	node->prev = list->tail;
   20a96:	6b33      	ldr	r3, [r6, #48]	; 0x30
   20a98:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20a9a:	6b33      	ldr	r3, [r6, #48]	; 0x30
	node->next = list;
   20a9c:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   20a9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20aa0:	6334      	str	r4, [r6, #48]	; 0x30
}
   20aa2:	e7ea      	b.n	20a7a <z_set_prio+0x4a>
			thread->base.prio = prio;
   20aa4:	73a5      	strb	r5, [r4, #14]
   20aa6:	2000      	movs	r0, #0
   20aa8:	e7eb      	b.n	20a82 <z_set_prio+0x52>
   20aaa:	bf00      	nop
   20aac:	2000f504 	.word	0x2000f504

00020ab0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   20ab0:	4b04      	ldr	r3, [pc, #16]	; (20ac4 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   20ab2:	2100      	movs	r1, #0
   20ab4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   20ab8:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   20abc:	4608      	mov	r0, r1
   20abe:	f7ff bd39 	b.w	20534 <k_sched_time_slice_set>
   20ac2:	bf00      	nop
   20ac4:	2000f504 	.word	0x2000f504

00020ac8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   20ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   20aca:	4c23      	ldr	r4, [pc, #140]	; (20b58 <z_impl_k_yield+0x90>)
   20acc:	4b23      	ldr	r3, [pc, #140]	; (20b5c <z_impl_k_yield+0x94>)
   20ace:	68a2      	ldr	r2, [r4, #8]
   20ad0:	429a      	cmp	r2, r3
   20ad2:	d028      	beq.n	20b26 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   20ad4:	f04f 0320 	mov.w	r3, #32
   20ad8:	f3ef 8511 	mrs	r5, BASEPRI
   20adc:	f383 8811 	msr	BASEPRI, r3
   20ae0:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   20ae4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   20ae8:	68a1      	ldr	r1, [r4, #8]
   20aea:	f7ff fd73 	bl	205d4 <z_priq_dumb_remove>
	return list->head == list;
   20aee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   20af0:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20af2:	4282      	cmp	r2, r0
   20af4:	d028      	beq.n	20b48 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20af6:	b33a      	cbz	r2, 20b48 <z_impl_k_yield+0x80>
	return (node == list->tail) ? NULL : node->next;
   20af8:	6b21      	ldr	r1, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   20afa:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20afe:	f992 700e 	ldrsb.w	r7, [r2, #14]
   20b02:	42b7      	cmp	r7, r6
   20b04:	dd1b      	ble.n	20b3e <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   20b06:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20b08:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   20b0c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   20b0e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   20b10:	7b5a      	ldrb	r2, [r3, #13]
   20b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20b16:	735a      	strb	r2, [r3, #13]
			z_mark_thread_as_queued(_current);
			update_cache(1);
   20b18:	2001      	movs	r0, #1
   20b1a:	f7ff fd71 	bl	20600 <update_cache>
	__asm__ volatile(
   20b1e:	f385 8811 	msr	BASEPRI, r5
   20b22:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20b26:	f04f 0320 	mov.w	r3, #32
   20b2a:	f3ef 8011 	mrs	r0, BASEPRI
   20b2e:	f383 8811 	msr	BASEPRI, r3
   20b32:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   20b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20b3a:	f7e6 bd6d 	b.w	7618 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   20b3e:	428a      	cmp	r2, r1
   20b40:	d002      	beq.n	20b48 <z_impl_k_yield+0x80>
   20b42:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20b44:	2a00      	cmp	r2, #0
   20b46:	d1da      	bne.n	20afe <z_impl_k_yield+0x36>
	node->prev = list->tail;
   20b48:	6b22      	ldr	r2, [r4, #48]	; 0x30
   20b4a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   20b4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
   20b4e:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   20b50:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20b52:	6323      	str	r3, [r4, #48]	; 0x30
}
   20b54:	e7dc      	b.n	20b10 <z_impl_k_yield+0x48>
   20b56:	bf00      	nop
   20b58:	2000f504 	.word	0x2000f504
   20b5c:	2000afe0 	.word	0x2000afe0

00020b60 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   20b60:	ea50 0301 	orrs.w	r3, r0, r1
{
   20b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b68:	4605      	mov	r5, r0
   20b6a:	460e      	mov	r6, r1
	if (ticks == 0) {
   20b6c:	d104      	bne.n	20b78 <z_tick_sleep+0x18>
	z_impl_k_yield();
   20b6e:	f7ff ffab 	bl	20ac8 <z_impl_k_yield>
		k_yield();
		return 0;
   20b72:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   20b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   20b78:	f006 ffe8 	bl	27b4c <z_tick_get_32>
   20b7c:	4604      	mov	r4, r0
   20b7e:	f04f 0320 	mov.w	r3, #32
   20b82:	f3ef 8811 	mrs	r8, BASEPRI
   20b86:	f383 8811 	msr	BASEPRI, r3
   20b8a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   20b8e:	4f0f      	ldr	r7, [pc, #60]	; (20bcc <z_tick_sleep+0x6c>)
   20b90:	4b0f      	ldr	r3, [pc, #60]	; (20bd0 <z_tick_sleep+0x70>)
   20b92:	68b8      	ldr	r0, [r7, #8]
   20b94:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   20b96:	f7ff fef7 	bl	20988 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   20b9a:	68b8      	ldr	r0, [r7, #8]
   20b9c:	490d      	ldr	r1, [pc, #52]	; (20bd4 <z_tick_sleep+0x74>)
   20b9e:	462a      	mov	r2, r5
   20ba0:	4633      	mov	r3, r6
   20ba2:	3018      	adds	r0, #24
   20ba4:	f000 fa44 	bl	21030 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20ba8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20baa:	7b53      	ldrb	r3, [r2, #13]
   20bac:	f043 0310 	orr.w	r3, r3, #16
   20bb0:	7353      	strb	r3, [r2, #13]
   20bb2:	4640      	mov	r0, r8
   20bb4:	f7e6 fd30 	bl	7618 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   20bb8:	f006 ffc8 	bl	27b4c <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   20bbc:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   20bbe:	1a10      	subs	r0, r2, r0
   20bc0:	eb63 0303 	sbc.w	r3, r3, r3
   20bc4:	2b00      	cmp	r3, #0
   20bc6:	bfb8      	it	lt
   20bc8:	2000      	movlt	r0, #0
   20bca:	e7d3      	b.n	20b74 <z_tick_sleep+0x14>
   20bcc:	2000f504 	.word	0x2000f504
   20bd0:	2000f538 	.word	0x2000f538
   20bd4:	00027893 	.word	0x00027893

00020bd8 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20bd8:	f1b1 3fff 	cmp.w	r1, #4294967295
   20bdc:	bf08      	it	eq
   20bde:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   20be2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20be4:	d106      	bne.n	20bf4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   20be6:	4b08      	ldr	r3, [pc, #32]	; (20c08 <z_impl_k_sleep+0x30>)
   20be8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   20bea:	f7ff fe17 	bl	2081c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   20bee:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   20bf2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   20bf4:	f7ff ffb4 	bl	20b60 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   20bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20bfc:	fb80 0303 	smull	r0, r3, r0, r3
   20c00:	0bc0      	lsrs	r0, r0, #15
   20c02:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   20c06:	e7f4      	b.n	20bf2 <z_impl_k_sleep+0x1a>
   20c08:	2000f504 	.word	0x2000f504

00020c0c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20c0c:	4b01      	ldr	r3, [pc, #4]	; (20c14 <z_impl_k_current_get+0x8>)
   20c0e:	6898      	ldr	r0, [r3, #8]
   20c10:	4770      	bx	lr
   20c12:	bf00      	nop
   20c14:	2000f504 	.word	0x2000f504

00020c18 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20c18:	b538      	push	{r3, r4, r5, lr}
   20c1a:	4604      	mov	r4, r0
   20c1c:	f04f 0320 	mov.w	r3, #32
   20c20:	f3ef 8511 	mrs	r5, BASEPRI
   20c24:	f383 8811 	msr	BASEPRI, r3
   20c28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   20c2c:	f006 fe8e 	bl	2794c <z_unpend_first_thread>

	if (thread != NULL) {
   20c30:	b150      	cbz	r0, 20c48 <z_impl_k_sem_give+0x30>
   20c32:	2200      	movs	r2, #0
   20c34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20c38:	f006 fe1b 	bl	27872 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20c3c:	4629      	mov	r1, r5
   20c3e:	4808      	ldr	r0, [pc, #32]	; (20c60 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   20c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20c44:	f7ff bca0 	b.w	20588 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20c48:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20c4c:	429a      	cmp	r2, r3
   20c4e:	bf18      	it	ne
   20c50:	3301      	addne	r3, #1
   20c52:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20c54:	2102      	movs	r1, #2
   20c56:	f104 0010 	add.w	r0, r4, #16
   20c5a:	f007 f912 	bl	27e82 <z_handle_obj_poll_events>
}
   20c5e:	e7ed      	b.n	20c3c <z_impl_k_sem_give+0x24>
   20c60:	2000fb38 	.word	0x2000fb38

00020c64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20c64:	b513      	push	{r0, r1, r4, lr}
   20c66:	f04f 0420 	mov.w	r4, #32
   20c6a:	f3ef 8111 	mrs	r1, BASEPRI
   20c6e:	f384 8811 	msr	BASEPRI, r4
   20c72:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   20c76:	6884      	ldr	r4, [r0, #8]
   20c78:	b144      	cbz	r4, 20c8c <z_impl_k_sem_take+0x28>
		sem->count--;
   20c7a:	3c01      	subs	r4, #1
   20c7c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   20c7e:	f381 8811 	msr	BASEPRI, r1
   20c82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20c86:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   20c88:	b002      	add	sp, #8
   20c8a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20c8c:	ea52 0403 	orrs.w	r4, r2, r3
   20c90:	d106      	bne.n	20ca0 <z_impl_k_sem_take+0x3c>
   20c92:	f381 8811 	msr	BASEPRI, r1
   20c96:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20c9a:	f06f 000f 	mvn.w	r0, #15
   20c9e:	e7f3      	b.n	20c88 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20ca0:	e9cd 2300 	strd	r2, r3, [sp]
   20ca4:	4602      	mov	r2, r0
   20ca6:	4802      	ldr	r0, [pc, #8]	; (20cb0 <z_impl_k_sem_take+0x4c>)
   20ca8:	f7ff feae 	bl	20a08 <z_pend_curr>
	return ret;
   20cac:	e7ec      	b.n	20c88 <z_impl_k_sem_take+0x24>
   20cae:	bf00      	nop
   20cb0:	2000fb38 	.word	0x2000fb38

00020cb4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20cb4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   20cb6:	4c08      	ldr	r4, [pc, #32]	; (20cd8 <k_sys_work_q_init+0x24>)
   20cb8:	4908      	ldr	r1, [pc, #32]	; (20cdc <k_sys_work_q_init+0x28>)
   20cba:	f04f 33ff 	mov.w	r3, #4294967295
   20cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20cc2:	4620      	mov	r0, r4
   20cc4:	f000 f8dc 	bl	20e80 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   20cc8:	4905      	ldr	r1, [pc, #20]	; (20ce0 <k_sys_work_q_init+0x2c>)
   20cca:	f104 0018 	add.w	r0, r4, #24
   20cce:	f006 fe80 	bl	279d2 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   20cd2:	2000      	movs	r0, #0
   20cd4:	bd10      	pop	{r4, pc}
   20cd6:	bf00      	nop
   20cd8:	2000b0f0 	.word	0x2000b0f0
   20cdc:	20012a80 	.word	0x20012a80
   20ce0:	0002e52d 	.word	0x0002e52d

00020ce4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20ce4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   20ce8:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   20cec:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   20cf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20cf2:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   20cf4:	2504      	movs	r5, #4
   20cf6:	7345      	strb	r5, [r0, #13]
{
   20cf8:	460f      	mov	r7, r1

	thread_base->prio = priority;
   20cfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   20cfc:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20cfe:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   20d00:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   20d04:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20d06:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   20d0a:	3720      	adds	r7, #32
	node->prev = NULL;
   20d0c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   20d10:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   20d14:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20d16:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20d1a:	9202      	str	r2, [sp, #8]
   20d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20d1e:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   20d20:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20d24:	9200      	str	r2, [sp, #0]
   20d26:	4642      	mov	r2, r8
{
   20d28:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20d2a:	f7e6 fd23 	bl	7774 <arch_new_thread>
	if (!_current) {
   20d2e:	4b05      	ldr	r3, [pc, #20]	; (20d44 <z_setup_new_thread+0x60>)
   20d30:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   20d32:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   20d36:	b103      	cbz	r3, 20d3a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   20d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   20d3a:	67a3      	str	r3, [r4, #120]	; 0x78
}
   20d3c:	4640      	mov	r0, r8
   20d3e:	b004      	add	sp, #16
   20d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20d44:	2000f504 	.word	0x2000f504

00020d48 <z_impl_k_thread_create>:
{
   20d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d4a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20d4c:	2700      	movs	r7, #0
   20d4e:	9705      	str	r7, [sp, #20]
   20d50:	9f10      	ldr	r7, [sp, #64]	; 0x40
   20d52:	9704      	str	r7, [sp, #16]
   20d54:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   20d56:	9703      	str	r7, [sp, #12]
   20d58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   20d5a:	9702      	str	r7, [sp, #8]
{
   20d5c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20d60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   20d62:	9701      	str	r7, [sp, #4]
   20d64:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   20d66:	9700      	str	r7, [sp, #0]
{
   20d68:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20d6a:	f7ff ffbb 	bl	20ce4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20d6e:	f1b5 3fff 	cmp.w	r5, #4294967295
   20d72:	bf08      	it	eq
   20d74:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   20d78:	d005      	beq.n	20d86 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20d7a:	ea55 0306 	orrs.w	r3, r5, r6
   20d7e:	d105      	bne.n	20d8c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   20d80:	4620      	mov	r0, r4
   20d82:	f7ff fcb5 	bl	206f0 <z_sched_start>
}
   20d86:	4620      	mov	r0, r4
   20d88:	b007      	add	sp, #28
   20d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d8c:	4903      	ldr	r1, [pc, #12]	; (20d9c <z_impl_k_thread_create+0x54>)
   20d8e:	4632      	mov	r2, r6
   20d90:	462b      	mov	r3, r5
   20d92:	f104 0018 	add.w	r0, r4, #24
   20d96:	f000 f94b 	bl	21030 <z_add_timeout>
   20d9a:	e7f4      	b.n	20d86 <z_impl_k_thread_create+0x3e>
   20d9c:	00027893 	.word	0x00027893

00020da0 <z_init_static_threads>:
{
   20da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20da4:	4c29      	ldr	r4, [pc, #164]	; (20e4c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   20da6:	4d2a      	ldr	r5, [pc, #168]	; (20e50 <z_init_static_threads+0xb0>)
{
   20da8:	b087      	sub	sp, #28
   20daa:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   20dac:	42ae      	cmp	r6, r5
   20dae:	f104 0430 	add.w	r4, r4, #48	; 0x30
   20db2:	d30f      	bcc.n	20dd4 <z_init_static_threads+0x34>
	k_sched_lock();
   20db4:	f7ff fbfa 	bl	205ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   20db8:	4c24      	ldr	r4, [pc, #144]	; (20e4c <z_init_static_threads+0xac>)
   20dba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 20e54 <z_init_static_threads+0xb4>
   20dbe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20dc2:	f240 37e7 	movw	r7, #999	; 0x3e7
   20dc6:	42ac      	cmp	r4, r5
   20dc8:	d320      	bcc.n	20e0c <z_init_static_threads+0x6c>
}
   20dca:	b007      	add	sp, #28
   20dcc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   20dd0:	f7ff bc3e 	b.w	20650 <k_sched_unlock>
		z_setup_new_thread(
   20dd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20dd8:	9305      	str	r3, [sp, #20]
   20dda:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20dde:	9304      	str	r3, [sp, #16]
   20de0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20de4:	9303      	str	r3, [sp, #12]
   20de6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20dea:	9302      	str	r3, [sp, #8]
   20dec:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   20df0:	9301      	str	r3, [sp, #4]
   20df2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20df6:	9300      	str	r3, [sp, #0]
   20df8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20dfc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20e00:	f7ff ff70 	bl	20ce4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20e04:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20e08:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
   20e0a:	e7ce      	b.n	20daa <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20e0e:	1c5a      	adds	r2, r3, #1
   20e10:	d00d      	beq.n	20e2e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   20e12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20e16:	2100      	movs	r1, #0
   20e18:	4638      	mov	r0, r7
   20e1a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20e1e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20e22:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20e26:	d104      	bne.n	20e32 <z_init_static_threads+0x92>
	z_sched_start(thread);
   20e28:	4640      	mov	r0, r8
   20e2a:	f7ff fc61 	bl	206f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20e2e:	3430      	adds	r4, #48	; 0x30
   20e30:	e7c9      	b.n	20dc6 <z_init_static_threads+0x26>
   20e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20e36:	2300      	movs	r3, #0
   20e38:	f7e0 f876 	bl	f28 <__aeabi_uldivmod>
   20e3c:	4602      	mov	r2, r0
   20e3e:	460b      	mov	r3, r1
   20e40:	f108 0018 	add.w	r0, r8, #24
   20e44:	4649      	mov	r1, r9
   20e46:	f000 f8f3 	bl	21030 <z_add_timeout>
   20e4a:	e7f0      	b.n	20e2e <z_init_static_threads+0x8e>
   20e4c:	20009f20 	.word	0x20009f20
   20e50:	2000a040 	.word	0x2000a040
   20e54:	00027893 	.word	0x00027893

00020e58 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   20e58:	b508      	push	{r3, lr}
	__asm__ volatile(
   20e5a:	f04f 0320 	mov.w	r3, #32
   20e5e:	f3ef 8411 	mrs	r4, BASEPRI
   20e62:	f383 8811 	msr	BASEPRI, r3
   20e66:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   20e6a:	4b04      	ldr	r3, [pc, #16]	; (20e7c <z_self_abort+0x24>)
   20e6c:	6898      	ldr	r0, [r3, #8]
   20e6e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   20e70:	f7ff fcd4 	bl	2081c <z_impl_k_thread_suspend>
   20e74:	4620      	mov	r0, r4
   20e76:	f7e6 fbcf 	bl	7618 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20e7a:	bf00      	nop
   20e7c:	2000f504 	.word	0x2000f504

00020e80 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   20e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e84:	4604      	mov	r4, r0
   20e86:	b088      	sub	sp, #32
   20e88:	460d      	mov	r5, r1
   20e8a:	4616      	mov	r6, r2
   20e8c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   20e8e:	f006 fc3c 	bl	2770a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   20e92:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20e96:	2200      	movs	r2, #0
   20e98:	2300      	movs	r3, #0
   20e9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20e9e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   20ea2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   20ea6:	4b07      	ldr	r3, [pc, #28]	; (20ec4 <k_work_q_start+0x44>)
   20ea8:	9400      	str	r4, [sp, #0]
   20eaa:	4632      	mov	r2, r6
   20eac:	4629      	mov	r1, r5
   20eae:	4640      	mov	r0, r8
   20eb0:	f7ff ff4a 	bl	20d48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   20eb4:	4904      	ldr	r1, [pc, #16]	; (20ec8 <k_work_q_start+0x48>)
   20eb6:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   20eb8:	b008      	add	sp, #32
   20eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20ebe:	f006 bd88 	b.w	279d2 <z_impl_k_thread_name_set>
   20ec2:	bf00      	nop
   20ec4:	000224c1 	.word	0x000224c1
   20ec8:	0002e536 	.word	0x0002e536

00020ecc <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   20ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ed0:	4606      	mov	r6, r0
   20ed2:	460d      	mov	r5, r1
   20ed4:	4690      	mov	r8, r2
   20ed6:	461f      	mov	r7, r3
   20ed8:	f04f 0320 	mov.w	r3, #32
   20edc:	f3ef 8911 	mrs	r9, BASEPRI
   20ee0:	f383 8811 	msr	BASEPRI, r3
   20ee4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   20ee8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   20eea:	b17b      	cbz	r3, 20f0c <k_delayed_work_submit_to_queue+0x40>
   20eec:	4283      	cmp	r3, r0
   20eee:	d128      	bne.n	20f42 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   20ef0:	4628      	mov	r0, r5
   20ef2:	f006 fd90 	bl	27a16 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   20ef6:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   20efa:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   20efc:	d008      	beq.n	20f10 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   20efe:	2800      	cmp	r0, #0
   20f00:	da07      	bge.n	20f12 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   20f02:	f389 8811 	msr	BASEPRI, r9
   20f06:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   20f0a:	e00f      	b.n	20f2c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   20f0c:	2800      	cmp	r0, #0
   20f0e:	d0ef      	beq.n	20ef0 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   20f10:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20f12:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   20f16:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20f18:	d10b      	bne.n	20f32 <k_delayed_work_submit_to_queue+0x66>
   20f1a:	f389 8811 	msr	BASEPRI, r9
   20f1e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   20f22:	4629      	mov	r1, r5
   20f24:	4630      	mov	r0, r6
   20f26:	f006 fd59 	bl	279dc <k_work_submit_to_queue>
		return 0;
   20f2a:	2400      	movs	r4, #0
}
   20f2c:	4620      	mov	r0, r4
   20f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   20f32:	4905      	ldr	r1, [pc, #20]	; (20f48 <k_delayed_work_submit_to_queue+0x7c>)
   20f34:	4642      	mov	r2, r8
   20f36:	463b      	mov	r3, r7
   20f38:	f105 0010 	add.w	r0, r5, #16
   20f3c:	f000 f878 	bl	21030 <z_add_timeout>
   20f40:	e7df      	b.n	20f02 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   20f42:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   20f46:	e7dc      	b.n	20f02 <k_delayed_work_submit_to_queue+0x36>
   20f48:	00027a0d 	.word	0x00027a0d

00020f4c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   20f4c:	4a02      	ldr	r2, [pc, #8]	; (20f58 <boot_banner+0xc>)
   20f4e:	4903      	ldr	r1, [pc, #12]	; (20f5c <boot_banner+0x10>)
   20f50:	4803      	ldr	r0, [pc, #12]	; (20f60 <boot_banner+0x14>)
   20f52:	f001 b9c1 	b.w	222d8 <printk>
   20f56:	bf00      	nop
   20f58:	00029eb8 	.word	0x00029eb8
   20f5c:	0002e540 	.word	0x0002e540
   20f60:	0002e55b 	.word	0x0002e55b

00020f64 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   20f64:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   20f66:	4806      	ldr	r0, [pc, #24]	; (20f80 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   20f68:	4a06      	ldr	r2, [pc, #24]	; (20f84 <z_data_copy+0x20>)
   20f6a:	4907      	ldr	r1, [pc, #28]	; (20f88 <z_data_copy+0x24>)
   20f6c:	1a12      	subs	r2, r2, r0
   20f6e:	f003 fe6f 	bl	24c50 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   20f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   20f76:	4a05      	ldr	r2, [pc, #20]	; (20f8c <z_data_copy+0x28>)
   20f78:	4905      	ldr	r1, [pc, #20]	; (20f90 <z_data_copy+0x2c>)
   20f7a:	4806      	ldr	r0, [pc, #24]	; (20f94 <z_data_copy+0x30>)
   20f7c:	f003 be68 	b.w	24c50 <memcpy>
   20f80:	20000000 	.word	0x20000000
   20f84:	2000a264 	.word	0x2000a264
   20f88:	0002e584 	.word	0x0002e584
   20f8c:	00000000 	.word	0x00000000
   20f90:	0002e584 	.word	0x0002e584
   20f94:	20000000 	.word	0x20000000

00020f98 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   20f98:	4b03      	ldr	r3, [pc, #12]	; (20fa8 <elapsed+0x10>)
   20f9a:	681b      	ldr	r3, [r3, #0]
   20f9c:	b90b      	cbnz	r3, 20fa2 <elapsed+0xa>
   20f9e:	f7e6 b959 	b.w	7254 <z_clock_elapsed>
}
   20fa2:	2000      	movs	r0, #0
   20fa4:	4770      	bx	lr
   20fa6:	bf00      	nop
   20fa8:	2000f544 	.word	0x2000f544

00020fac <next_timeout>:
	return list->head == list;
   20fac:	4b11      	ldr	r3, [pc, #68]	; (20ff4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   20fae:	b510      	push	{r4, lr}
   20fb0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20fb2:	429c      	cmp	r4, r3
   20fb4:	bf08      	it	eq
   20fb6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20fb8:	f7ff ffee 	bl	20f98 <elapsed>
   20fbc:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   20fbe:	b16c      	cbz	r4, 20fdc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20fc0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   20fc4:	1ac0      	subs	r0, r0, r3
   20fc6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   20fca:	2801      	cmp	r0, #1
   20fcc:	f173 0200 	sbcs.w	r2, r3, #0
   20fd0:	db0d      	blt.n	20fee <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20fd2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   20fd6:	f173 0300 	sbcs.w	r3, r3, #0
   20fda:	db01      	blt.n	20fe0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   20fdc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20fe0:	4b05      	ldr	r3, [pc, #20]	; (20ff8 <next_timeout+0x4c>)
   20fe2:	695b      	ldr	r3, [r3, #20]
   20fe4:	b113      	cbz	r3, 20fec <next_timeout+0x40>
   20fe6:	4298      	cmp	r0, r3
   20fe8:	bfa8      	it	ge
   20fea:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   20fec:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   20fee:	2000      	movs	r0, #0
   20ff0:	e7f6      	b.n	20fe0 <next_timeout+0x34>
   20ff2:	bf00      	nop
   20ff4:	2000081c 	.word	0x2000081c
   20ff8:	2000f504 	.word	0x2000f504

00020ffc <remove_timeout>:
{
   20ffc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   20ffe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21000:	b168      	cbz	r0, 2101e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   21002:	4a0a      	ldr	r2, [pc, #40]	; (2102c <remove_timeout+0x30>)
   21004:	6852      	ldr	r2, [r2, #4]
   21006:	4290      	cmp	r0, r2
   21008:	d009      	beq.n	2101e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2100a:	b143      	cbz	r3, 2101e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2100c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21010:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21014:	1912      	adds	r2, r2, r4
   21016:	eb41 0105 	adc.w	r1, r1, r5
   2101a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2101e:	6842      	ldr	r2, [r0, #4]
   21020:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21022:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21024:	2300      	movs	r3, #0
	node->prev = NULL;
   21026:	e9c0 3300 	strd	r3, r3, [r0]
}
   2102a:	bd30      	pop	{r4, r5, pc}
   2102c:	2000081c 	.word	0x2000081c

00021030 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21030:	f1b3 3fff 	cmp.w	r3, #4294967295
   21034:	bf08      	it	eq
   21036:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2103a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2103e:	4604      	mov	r4, r0
   21040:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21042:	d064      	beq.n	2110e <z_add_timeout+0xde>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   21044:	1c55      	adds	r5, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   21046:	f06f 0701 	mvn.w	r7, #1
	k_ticks_t ticks = timeout.ticks + 1;
   2104a:	f143 0600 	adc.w	r6, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2104e:	f04f 39ff 	mov.w	r9, #4294967295
   21052:	1b7b      	subs	r3, r7, r5
   21054:	eb69 0306 	sbc.w	r3, r9, r6
   21058:	2b00      	cmp	r3, #0
   2105a:	db0d      	blt.n	21078 <z_add_timeout+0x48>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   2105c:	f7ff ff9c 	bl	20f98 <elapsed>
   21060:	4b30      	ldr	r3, [pc, #192]	; (21124 <z_add_timeout+0xf4>)
   21062:	e9d3 2300 	ldrd	r2, r3, [r3]
   21066:	1abf      	subs	r7, r7, r2
   21068:	eb69 0303 	sbc.w	r3, r9, r3
   2106c:	1b7d      	subs	r5, r7, r5
   2106e:	eb63 0606 	sbc.w	r6, r3, r6
   21072:	1a2d      	subs	r5, r5, r0
   21074:	eb66 76e0 	sbc.w	r6, r6, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   21078:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   2107c:	f04f 0320 	mov.w	r3, #32
   21080:	f3ef 8711 	mrs	r7, BASEPRI
   21084:	f383 8811 	msr	BASEPRI, r3
   21088:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2108c:	f7ff ff84 	bl	20f98 <elapsed>
	ticks = MAX(1, ticks);
   21090:	2d01      	cmp	r5, #1
	return list->head == list;
   21092:	4a25      	ldr	r2, [pc, #148]	; (21128 <z_add_timeout+0xf8>)
   21094:	f176 0300 	sbcs.w	r3, r6, #0
   21098:	bfb8      	it	lt
   2109a:	2501      	movlt	r5, #1
   2109c:	6813      	ldr	r3, [r2, #0]
   2109e:	bfb8      	it	lt
   210a0:	2600      	movlt	r6, #0
		to->dticks = ticks + elapsed();
   210a2:	182d      	adds	r5, r5, r0
   210a4:	eb46 76e0 	adc.w	r6, r6, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   210a8:	4293      	cmp	r3, r2
   210aa:	e9c4 5604 	strd	r5, r6, [r4, #16]
   210ae:	d002      	beq.n	210b6 <z_add_timeout+0x86>
	return (node == list->tail) ? NULL : node->next;
   210b0:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   210b4:	b933      	cbnz	r3, 210c4 <z_add_timeout+0x94>
	node->prev = list->tail;
   210b6:	6853      	ldr	r3, [r2, #4]
   210b8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   210ba:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   210bc:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   210be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   210c0:	6054      	str	r4, [r2, #4]
}
   210c2:	e011      	b.n	210e8 <z_add_timeout+0xb8>
			if (t->dticks > to->dticks) {
   210c4:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
   210c8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   210cc:	4281      	cmp	r1, r0
   210ce:	eb75 0e06 	sbcs.w	lr, r5, r6
   210d2:	da1e      	bge.n	21112 <z_add_timeout+0xe2>
				t->dticks -= to->dticks;
   210d4:	1a41      	subs	r1, r0, r1
   210d6:	eb66 0505 	sbc.w	r5, r6, r5
   210da:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   210de:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   210e0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   210e4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   210e6:	605c      	str	r4, [r3, #4]
	return list->head == list;
   210e8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   210ea:	4293      	cmp	r3, r2
   210ec:	d00b      	beq.n	21106 <z_add_timeout+0xd6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   210ee:	429c      	cmp	r4, r3
   210f0:	d109      	bne.n	21106 <z_add_timeout+0xd6>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   210f2:	f7ff ff5b 	bl	20fac <next_timeout>

			if (next_time == 0 ||
   210f6:	b118      	cbz	r0, 21100 <z_add_timeout+0xd0>
			    _current_cpu->slice_ticks != next_time) {
   210f8:	4b0c      	ldr	r3, [pc, #48]	; (2112c <z_add_timeout+0xfc>)
			if (next_time == 0 ||
   210fa:	695b      	ldr	r3, [r3, #20]
   210fc:	4283      	cmp	r3, r0
   210fe:	d002      	beq.n	21106 <z_add_timeout+0xd6>
				z_clock_set_timeout(next_time, false);
   21100:	2100      	movs	r1, #0
   21102:	f7e6 f875 	bl	71f0 <z_clock_set_timeout>
	__asm__ volatile(
   21106:	f387 8811 	msr	BASEPRI, r7
   2110a:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   21112:	1a09      	subs	r1, r1, r0
   21114:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
   21118:	4563      	cmp	r3, ip
   2111a:	e9c4 1504 	strd	r1, r5, [r4, #16]
   2111e:	d0ca      	beq.n	210b6 <z_add_timeout+0x86>
   21120:	681b      	ldr	r3, [r3, #0]
   21122:	e7c7      	b.n	210b4 <z_add_timeout+0x84>
   21124:	2000b190 	.word	0x2000b190
   21128:	2000081c 	.word	0x2000081c
   2112c:	2000f504 	.word	0x2000f504

00021130 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   21130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21134:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   21136:	f7ff fb31 	bl	2079c <z_time_slice>
	__asm__ volatile(
   2113a:	f04f 0320 	mov.w	r3, #32
   2113e:	f3ef 8411 	mrs	r4, BASEPRI
   21142:	f383 8811 	msr	BASEPRI, r3
   21146:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2114a:	4e24      	ldr	r6, [pc, #144]	; (211dc <z_clock_announce+0xac>)
	return list->head == list;
   2114c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 211e0 <z_clock_announce+0xb0>
   21150:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   21152:	4d24      	ldr	r5, [pc, #144]	; (211e4 <z_clock_announce+0xb4>)
   21154:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   21158:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2115a:	4540      	cmp	r0, r8
		curr_tick += dt;
   2115c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   21160:	ea4f 77e2 	mov.w	r7, r2, asr #31
   21164:	d00b      	beq.n	2117e <z_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   21166:	b150      	cbz	r0, 2117e <z_clock_announce+0x4e>
   21168:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   2116c:	429a      	cmp	r2, r3
   2116e:	eb77 090c 	sbcs.w	r9, r7, ip
   21172:	da16      	bge.n	211a2 <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   21174:	1a9b      	subs	r3, r3, r2
   21176:	eb6c 0c07 	sbc.w	ip, ip, r7
   2117a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2117e:	1852      	adds	r2, r2, r1
   21180:	eb4e 0707 	adc.w	r7, lr, r7
   21184:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   21188:	2500      	movs	r5, #0
   2118a:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2118c:	f7ff ff0e 	bl	20fac <next_timeout>
   21190:	4629      	mov	r1, r5
   21192:	f7e6 f82d 	bl	71f0 <z_clock_set_timeout>
	__asm__ volatile(
   21196:	f384 8811 	msr	BASEPRI, r4
   2119a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2119e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   211a2:	1859      	adds	r1, r3, r1
   211a4:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   211a8:	1ad3      	subs	r3, r2, r3
   211aa:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   211ac:	2200      	movs	r2, #0
   211ae:	2300      	movs	r3, #0
   211b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   211b4:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   211b8:	f7ff ff20 	bl	20ffc <remove_timeout>
   211bc:	f384 8811 	msr	BASEPRI, r4
   211c0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   211c4:	6883      	ldr	r3, [r0, #8]
   211c6:	4798      	blx	r3
	__asm__ volatile(
   211c8:	f04f 0320 	mov.w	r3, #32
   211cc:	f3ef 8411 	mrs	r4, BASEPRI
   211d0:	f383 8811 	msr	BASEPRI, r3
   211d4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   211d8:	e7bc      	b.n	21154 <z_clock_announce+0x24>
   211da:	bf00      	nop
   211dc:	2000f544 	.word	0x2000f544
   211e0:	2000081c 	.word	0x2000081c
   211e4:	2000b190 	.word	0x2000b190

000211e8 <z_tick_get>:

int64_t z_tick_get(void)
{
   211e8:	b510      	push	{r4, lr}
   211ea:	f04f 0320 	mov.w	r3, #32
   211ee:	f3ef 8411 	mrs	r4, BASEPRI
   211f2:	f383 8811 	msr	BASEPRI, r3
   211f6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   211fa:	f7e6 f82b 	bl	7254 <z_clock_elapsed>
   211fe:	4a05      	ldr	r2, [pc, #20]	; (21214 <z_tick_get+0x2c>)
   21200:	e9d2 3100 	ldrd	r3, r1, [r2]
   21204:	18c0      	adds	r0, r0, r3
   21206:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   2120a:	f384 8811 	msr	BASEPRI, r4
   2120e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   21212:	bd10      	pop	{r4, pc}
   21214:	2000b190 	.word	0x2000b190

00021218 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   21218:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2121a:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   2121e:	3301      	adds	r3, #1
   21220:	f142 0200 	adc.w	r2, r2, #0
   21224:	2b02      	cmp	r3, #2
   21226:	f172 0300 	sbcs.w	r3, r2, #0
{
   2122a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2122c:	d304      	bcc.n	21238 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2122e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   21232:	490c      	ldr	r1, [pc, #48]	; (21264 <z_timer_expiration_handler+0x4c>)
   21234:	f7ff fefc 	bl	21030 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   21238:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2123a:	3301      	adds	r3, #1
   2123c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2123e:	6a23      	ldr	r3, [r4, #32]
   21240:	b10b      	cbz	r3, 21246 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   21242:	4620      	mov	r0, r4
   21244:	4798      	blx	r3
	return list->head == list;
   21246:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2124a:	42a5      	cmp	r5, r4
   2124c:	d009      	beq.n	21262 <z_timer_expiration_handler+0x4a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2124e:	b145      	cbz	r5, 21262 <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   21250:	4628      	mov	r0, r5
   21252:	f006 fac0 	bl	277d6 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   21256:	4628      	mov	r0, r5
   21258:	f006 fb0b 	bl	27872 <z_ready_thread>
   2125c:	2300      	movs	r3, #0
   2125e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   21262:	bd38      	pop	{r3, r4, r5, pc}
   21264:	00021219 	.word	0x00021219

00021268 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   21268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2126c:	4611      	mov	r1, r2
   2126e:	4605      	mov	r5, r0
   21270:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   21272:	f1b0 3fff 	cmp.w	r0, #4294967295
   21276:	bf08      	it	eq
   21278:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   2127c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21280:	4688      	mov	r8, r1
   21282:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   21284:	d036      	beq.n	212f4 <z_impl_k_timer_start+0x8c>
   21286:	4614      	mov	r4, r2
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   21288:	431a      	orrs	r2, r3
   2128a:	461e      	mov	r6, r3
   2128c:	d011      	beq.n	212b2 <z_impl_k_timer_start+0x4a>
   2128e:	f06f 0201 	mvn.w	r2, #1
   21292:	1b12      	subs	r2, r2, r4
   21294:	f04f 32ff 	mov.w	r2, #4294967295
   21298:	eb62 0203 	sbc.w	r2, r2, r3
   2129c:	2a00      	cmp	r2, #0
   2129e:	da08      	bge.n	212b2 <z_impl_k_timer_start+0x4a>
		period.ticks = MAX(period.ticks - 1, 1);
   212a0:	3c01      	subs	r4, #1
   212a2:	f163 0600 	sbc.w	r6, r3, #0
   212a6:	2c01      	cmp	r4, #1
   212a8:	f176 0300 	sbcs.w	r3, r6, #0
   212ac:	bfbc      	itt	lt
   212ae:	2401      	movlt	r4, #1
   212b0:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   212b2:	f06f 0301 	mvn.w	r3, #1
   212b6:	1a5b      	subs	r3, r3, r1
   212b8:	f04f 33ff 	mov.w	r3, #4294967295
   212bc:	eb63 0300 	sbc.w	r3, r3, r0
   212c0:	2b00      	cmp	r3, #0
   212c2:	da08      	bge.n	212d6 <z_impl_k_timer_start+0x6e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   212c4:	1e4a      	subs	r2, r1, #1
   212c6:	f160 0700 	sbc.w	r7, r0, #0
   212ca:	2f00      	cmp	r7, #0
   212cc:	4690      	mov	r8, r2
   212ce:	bfbc      	itt	lt
   212d0:	f04f 0800 	movlt.w	r8, #0
   212d4:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   212d6:	4628      	mov	r0, r5
   212d8:	f006 fbf8 	bl	27acc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   212dc:	2300      	movs	r3, #0
   212de:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   212e0:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   212e4:	4642      	mov	r2, r8
   212e6:	463b      	mov	r3, r7
   212e8:	4628      	mov	r0, r5
   212ea:	4903      	ldr	r1, [pc, #12]	; (212f8 <z_impl_k_timer_start+0x90>)
		     duration);
}
   212ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   212f0:	f7ff be9e 	b.w	21030 <z_add_timeout>
}
   212f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212f8:	00021219 	.word	0x00021219

000212fc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   212fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21300:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   21302:	4b29      	ldr	r3, [pc, #164]	; (213a8 <z_impl_k_poll+0xac>)
   21304:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   21306:	2301      	movs	r3, #1
   21308:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	poller->mode = MODE_POLL;
   2130c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   21310:	ea52 0305 	orrs.w	r3, r2, r5
{
   21314:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   21316:	bf0c      	ite	eq
   21318:	2301      	moveq	r3, #1
   2131a:	2300      	movne	r3, #0
   2131c:	f107 0264 	add.w	r2, r7, #100	; 0x64
{
   21320:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   21322:	f006 fd11 	bl	27d48 <register_events>
   21326:	4681      	mov	r9, r0
	__asm__ volatile(
   21328:	f04f 0320 	mov.w	r3, #32
   2132c:	f3ef 8a11 	mrs	sl, BASEPRI
   21330:	f383 8811 	msr	BASEPRI, r3
   21334:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   21338:	f897 4064 	ldrb.w	r4, [r7, #100]	; 0x64
   2133c:	b964      	cbnz	r4, 21358 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2133e:	4601      	mov	r1, r0
   21340:	4652      	mov	r2, sl
   21342:	4640      	mov	r0, r8
   21344:	f006 fd61 	bl	27e0a <clear_event_registrations>
	__asm__ volatile(
   21348:	f38a 8811 	msr	BASEPRI, sl
   2134c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   21350:	4620      	mov	r0, r4
   21352:	b002      	add	sp, #8
   21354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   21358:	2300      	movs	r3, #0
   2135a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2135e:	ea56 0305 	orrs.w	r3, r6, r5
   21362:	d106      	bne.n	21372 <z_impl_k_poll+0x76>
   21364:	f38a 8811 	msr	BASEPRI, sl
   21368:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2136c:	f06f 040a 	mvn.w	r4, #10
   21370:	e7ee      	b.n	21350 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   21372:	e9cd 6500 	strd	r6, r5, [sp]
   21376:	4a0d      	ldr	r2, [pc, #52]	; (213ac <z_impl_k_poll+0xb0>)
   21378:	480d      	ldr	r0, [pc, #52]	; (213b0 <z_impl_k_poll+0xb4>)
   2137a:	4651      	mov	r1, sl
   2137c:	f7ff fb44 	bl	20a08 <z_pend_curr>
   21380:	4604      	mov	r4, r0
	__asm__ volatile(
   21382:	f04f 0320 	mov.w	r3, #32
   21386:	f3ef 8511 	mrs	r5, BASEPRI
   2138a:	f383 8811 	msr	BASEPRI, r3
   2138e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   21392:	462a      	mov	r2, r5
   21394:	4649      	mov	r1, r9
   21396:	4640      	mov	r0, r8
   21398:	f006 fd37 	bl	27e0a <clear_event_registrations>
	__asm__ volatile(
   2139c:	f385 8811 	msr	BASEPRI, r5
   213a0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   213a4:	e7d4      	b.n	21350 <z_impl_k_poll+0x54>
   213a6:	bf00      	nop
   213a8:	2000f504 	.word	0x2000f504
   213ac:	20000824 	.word	0x20000824
   213b0:	2000fb38 	.word	0x2000fb38

000213b4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   213b4:	b538      	push	{r3, r4, r5, lr}
   213b6:	4603      	mov	r3, r0
	__asm__ volatile(
   213b8:	f04f 0220 	mov.w	r2, #32
   213bc:	f3ef 8511 	mrs	r5, BASEPRI
   213c0:	f382 8811 	msr	BASEPRI, r2
   213c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   213c8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   213ca:	2101      	movs	r1, #1
   213cc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   213ce:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   213d0:	4283      	cmp	r3, r0
   213d2:	d106      	bne.n	213e2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   213d4:	f385 8811 	msr	BASEPRI, r5
   213d8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   213dc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   213de:	4620      	mov	r0, r4
   213e0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   213e2:	e9d0 3200 	ldrd	r3, r2, [r0]
   213e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   213e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   213ea:	2300      	movs	r3, #0
	node->prev = NULL;
   213ec:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   213f0:	f006 fc1e 	bl	27c30 <signal_poll_event>
	z_reschedule(&lock, key);
   213f4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   213f6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   213f8:	4801      	ldr	r0, [pc, #4]	; (21400 <z_impl_k_poll_signal_raise+0x4c>)
   213fa:	f7ff f8c5 	bl	20588 <z_reschedule>
	return rc;
   213fe:	e7ee      	b.n	213de <z_impl_k_poll_signal_raise+0x2a>
   21400:	2000fb38 	.word	0x2000fb38

00021404 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   21404:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21406:	4606      	mov	r6, r0
   21408:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2140a:	f006 fad8 	bl	279be <k_is_in_isr>
   2140e:	b978      	cbnz	r0, 21430 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   21410:	4b0b      	ldr	r3, [pc, #44]	; (21440 <z_thread_aligned_alloc+0x3c>)
   21412:	689b      	ldr	r3, [r3, #8]
   21414:	6f9c      	ldr	r4, [r3, #120]	; 0x78
	}

	if (heap) {
   21416:	b17c      	cbz	r4, 21438 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   21418:	1d2a      	adds	r2, r5, #4
   2141a:	d209      	bcs.n	21430 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2141c:	2000      	movs	r0, #0
   2141e:	2100      	movs	r1, #0
   21420:	e9cd 0100 	strd	r0, r1, [sp]
   21424:	f046 0104 	orr.w	r1, r6, #4
   21428:	4620      	mov	r0, r4
   2142a:	f006 f875 	bl	27518 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2142e:	b908      	cbnz	r0, 21434 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   21430:	2400      	movs	r4, #0
	}

	return ret;
   21432:	e001      	b.n	21438 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   21434:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   21436:	1d04      	adds	r4, r0, #4
}
   21438:	4620      	mov	r0, r4
   2143a:	b002      	add	sp, #8
   2143c:	bd70      	pop	{r4, r5, r6, pc}
   2143e:	bf00      	nop
   21440:	2000f504 	.word	0x2000f504

00021444 <write_without_rsp_vnd>:
{
   21444:	b510      	push	{r4, lr}
   21446:	4608      	mov	r0, r1
   21448:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   2144a:	f89d 200c 	ldrb.w	r2, [sp, #12]
	uint8_t *value = attr->user_data;
   2144e:	68c0      	ldr	r0, [r0, #12]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   21450:	0792      	lsls	r2, r2, #30
{
   21452:	461c      	mov	r4, r3
   21454:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   21458:	d508      	bpl.n	2146c <write_without_rsp_vnd+0x28>
	if (offset + len > sizeof(vnd_value)) {
   2145a:	191a      	adds	r2, r3, r4
   2145c:	2a06      	cmp	r2, #6
   2145e:	dc08      	bgt.n	21472 <write_without_rsp_vnd+0x2e>
	memcpy(value + offset, buf, len);
   21460:	4622      	mov	r2, r4
   21462:	4418      	add	r0, r3
   21464:	f003 fbf4 	bl	24c50 <memcpy>
}
   21468:	4620      	mov	r0, r4
   2146a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   2146c:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   21470:	e7fa      	b.n	21468 <write_without_rsp_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21472:	f06f 0406 	mvn.w	r4, #6
   21476:	e7f7      	b.n	21468 <write_without_rsp_vnd+0x24>

00021478 <write_signed>:
{
   21478:	b538      	push	{r3, r4, r5, lr}
   2147a:	460c      	mov	r4, r1
   2147c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   21480:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   21482:	461c      	mov	r4, r3
   21484:	18c3      	adds	r3, r0, r3
   21486:	2b04      	cmp	r3, #4
{
   21488:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   2148a:	dc05      	bgt.n	21498 <write_signed+0x20>
	memcpy(value + offset, buf, len);
   2148c:	4622      	mov	r2, r4
   2148e:	4428      	add	r0, r5
   21490:	f003 fbde 	bl	24c50 <memcpy>
}
   21494:	4620      	mov	r0, r4
   21496:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21498:	f06f 0406 	mvn.w	r4, #6
   2149c:	e7fa      	b.n	21494 <write_signed+0x1c>

0002149e <write_long_vnd>:
{
   2149e:	b538      	push	{r3, r4, r5, lr}
   214a0:	460d      	mov	r5, r1
   214a2:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   214a4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   214a8:	07d2      	lsls	r2, r2, #31
{
   214aa:	461c      	mov	r4, r3
   214ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   214b0:	d409      	bmi.n	214c6 <write_long_vnd+0x28>
	if (offset + len > sizeof(vnd_long_value)) {
   214b2:	191a      	adds	r2, r3, r4
   214b4:	2a4a      	cmp	r2, #74	; 0x4a
   214b6:	dc08      	bgt.n	214ca <write_long_vnd+0x2c>
	memcpy(value + offset, buf, len);
   214b8:	68e8      	ldr	r0, [r5, #12]
   214ba:	4622      	mov	r2, r4
   214bc:	4418      	add	r0, r3
   214be:	f003 fbc7 	bl	24c50 <memcpy>
}
   214c2:	4620      	mov	r0, r4
   214c4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   214c6:	2400      	movs	r4, #0
   214c8:	e7fb      	b.n	214c2 <write_long_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   214ca:	f06f 0406 	mvn.w	r4, #6
   214ce:	e7f8      	b.n	214c2 <write_long_vnd+0x24>

000214d0 <write_vnd>:
{
   214d0:	b538      	push	{r3, r4, r5, lr}
   214d2:	460c      	mov	r4, r1
   214d4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   214d8:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(vnd_value)) {
   214da:	461c      	mov	r4, r3
   214dc:	18c3      	adds	r3, r0, r3
   214de:	2b06      	cmp	r3, #6
{
   214e0:	4611      	mov	r1, r2
	if (offset + len > sizeof(vnd_value)) {
   214e2:	dc05      	bgt.n	214f0 <write_vnd+0x20>
	memcpy(value + offset, buf, len);
   214e4:	4622      	mov	r2, r4
   214e6:	4428      	add	r0, r5
   214e8:	f003 fbb2 	bl	24c50 <memcpy>
}
   214ec:	4620      	mov	r0, r4
   214ee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   214f0:	f06f 0406 	mvn.w	r4, #6
   214f4:	e7fa      	b.n	214ec <write_vnd+0x1c>

000214f6 <read_signed>:
{
   214f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   214f8:	2404      	movs	r4, #4
   214fa:	9402      	str	r4, [sp, #8]
   214fc:	68cc      	ldr	r4, [r1, #12]
   214fe:	9401      	str	r4, [sp, #4]
   21500:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   21504:	9400      	str	r4, [sp, #0]
   21506:	f004 ff0b 	bl	26320 <bt_gatt_attr_read>
}
   2150a:	b004      	add	sp, #16
   2150c:	bd10      	pop	{r4, pc}

0002150e <read_long_vnd>:
{
   2150e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   21510:	244a      	movs	r4, #74	; 0x4a
   21512:	9402      	str	r4, [sp, #8]
   21514:	68cc      	ldr	r4, [r1, #12]
   21516:	9401      	str	r4, [sp, #4]
   21518:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2151c:	9400      	str	r4, [sp, #0]
   2151e:	f004 feff 	bl	26320 <bt_gatt_attr_read>
}
   21522:	b004      	add	sp, #16
   21524:	bd10      	pop	{r4, pc}

00021526 <read_vnd>:
{
   21526:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   2152a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2152e:	4605      	mov	r5, r0
				 strlen(value));
   21530:	4640      	mov	r0, r8
{
   21532:	461f      	mov	r7, r3
   21534:	460c      	mov	r4, r1
   21536:	4616      	mov	r6, r2
				 strlen(value));
   21538:	f003 fb4c 	bl	24bd4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   2153c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   21540:	9300      	str	r3, [sp, #0]
   21542:	b280      	uxth	r0, r0
   21544:	e9cd 8001 	strd	r8, r0, [sp, #4]
   21548:	463b      	mov	r3, r7
   2154a:	4632      	mov	r2, r6
   2154c:	4621      	mov	r1, r4
   2154e:	4628      	mov	r0, r5
   21550:	f004 fee6 	bl	26320 <bt_gatt_attr_read>
}
   21554:	b004      	add	sp, #16
   21556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002155a <k_msleep.isra.0>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
   2155a:	4601      	mov	r1, r0
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   2155c:	f240 30e7 	movw	r0, #999	; 0x3e7
   21560:	b508      	push	{r3, lr}
   21562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21566:	2300      	movs	r3, #0
   21568:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2156c:	1449      	asrs	r1, r1, #17
   2156e:	f7df fcdb 	bl	f28 <__aeabi_uldivmod>
{
	return k_sleep(Z_TIMEOUT_MS(ms));
}
   21572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   21576:	f7ff bb2f 	b.w	20bd8 <z_impl_k_sleep>

0002157a <bma_delay_us>:
	z_impl_k_busy_wait(usec_to_wait);
   2157a:	f006 ba26 	b.w	279ca <z_impl_k_busy_wait>

0002157e <null_pointer_check>:
 */
static int8_t null_pointer_check(const struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if ((dev == NULL) || (dev->bus_read == NULL) || (dev->bus_write == NULL) || (dev->intf_ptr == NULL))
   2157e:	b148      	cbz	r0, 21594 <null_pointer_check+0x16>
   21580:	6a03      	ldr	r3, [r0, #32]
   21582:	b13b      	cbz	r3, 21594 <null_pointer_check+0x16>
   21584:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21586:	b12b      	cbz	r3, 21594 <null_pointer_check+0x16>
   21588:	6840      	ldr	r0, [r0, #4]
   2158a:	fab0 f080 	clz	r0, r0
   2158e:	0940      	lsrs	r0, r0, #5
   21590:	4240      	negs	r0, r0
   21592:	4770      	bx	lr
    {
        rslt = BMA4_E_NULL_PTR;
   21594:	f04f 30ff 	mov.w	r0, #4294967295
    {
        rslt = BMA4_OK;
    }

    return rslt;
}
   21598:	4770      	bx	lr

0002159a <write_regs>:
{
   2159a:	b570      	push	{r4, r5, r6, lr}
   2159c:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   2159e:	4618      	mov	r0, r3
{
   215a0:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   215a2:	f7ff ffec 	bl	2157e <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   215a6:	b9b8      	cbnz	r0, 215d8 <write_regs+0x3e>
   215a8:	b1b1      	cbz	r1, 215d8 <write_regs+0x3e>
        if (dev->intf == BMA4_SPI_INTF)
   215aa:	7a23      	ldrb	r3, [r4, #8]
   215ac:	b90b      	cbnz	r3, 215b2 <write_regs+0x18>
            addr = addr & BMA4_SPI_WR_MASK;
   215ae:	f005 057f 	and.w	r5, r5, #127	; 0x7f
        dev->intf_rslt = dev->bus_write(addr, data, len, dev->intf_ptr);
   215b2:	4628      	mov	r0, r5
   215b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   215b6:	6863      	ldr	r3, [r4, #4]
   215b8:	47b0      	blx	r6
   215ba:	4605      	mov	r5, r0
   215bc:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   215be:	b970      	cbnz	r0, 215de <write_regs+0x44>
            if (dev->perf_mode_status == BMA4_ENABLE)
   215c0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
                dev->delay_us(2, dev->intf_ptr);
   215c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   215c6:	6861      	ldr	r1, [r4, #4]
            if (dev->perf_mode_status == BMA4_ENABLE)
   215c8:	2a01      	cmp	r2, #1
                dev->delay_us(2, dev->intf_ptr);
   215ca:	bf0c      	ite	eq
   215cc:	2002      	moveq	r0, #2
                dev->delay_us(450, dev->intf_ptr);
   215ce:	f44f 70e1 	movne.w	r0, #450	; 0x1c2
   215d2:	4798      	blx	r3
}
   215d4:	4628      	mov	r0, r5
   215d6:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA4_E_NULL_PTR;
   215d8:	f04f 35ff 	mov.w	r5, #4294967295
   215dc:	e7fa      	b.n	215d4 <write_regs+0x3a>
            rslt = BMA4_E_COM_FAIL;
   215de:	f06f 0501 	mvn.w	r5, #1
   215e2:	e7f7      	b.n	215d4 <write_regs+0x3a>

000215e4 <read_regs>:
{
   215e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215e8:	4683      	mov	fp, r0
   215ea:	af00      	add	r7, sp, #0
    rslt = null_pointer_check(dev);
   215ec:	4618      	mov	r0, r3
{
   215ee:	4688      	mov	r8, r1
   215f0:	4615      	mov	r5, r2
   215f2:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   215f4:	f7ff ffc3 	bl	2157e <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   215f8:	bb40      	cbnz	r0, 2164c <read_regs+0x68>
   215fa:	b339      	cbz	r1, 2164c <read_regs+0x68>
        uint32_t temp_len = len + dev->dummy_byte;
   215fc:	7ae2      	ldrb	r2, [r4, #11]
   215fe:	442a      	add	r2, r5
        uint8_t temp_buff[temp_len];
   21600:	1dd3      	adds	r3, r2, #7
   21602:	f023 0307 	bic.w	r3, r3, #7
    {
   21606:	46e9      	mov	r9, sp
        uint8_t temp_buff[temp_len];
   21608:	ebad 0d03 	sub.w	sp, sp, r3
        if (dev->intf == BMA4_SPI_INTF)
   2160c:	7a23      	ldrb	r3, [r4, #8]
        uint8_t temp_buff[temp_len];
   2160e:	46ea      	mov	sl, sp
        if (dev->intf == BMA4_SPI_INTF)
   21610:	b90b      	cbnz	r3, 21616 <read_regs+0x32>
            addr = addr | BMA4_SPI_RD_MASK;
   21612:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
        dev->intf_rslt = dev->bus_read(addr, temp_buff, temp_len, dev->intf_ptr);
   21616:	6a26      	ldr	r6, [r4, #32]
   21618:	6863      	ldr	r3, [r4, #4]
   2161a:	4651      	mov	r1, sl
   2161c:	4658      	mov	r0, fp
   2161e:	47b0      	blx	r6
   21620:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   21622:	b188      	cbz	r0, 21648 <read_regs+0x64>
            rslt = BMA4_E_COM_FAIL;
   21624:	f06f 0001 	mvn.w	r0, #1
   21628:	46cd      	mov	sp, r9
}
   2162a:	46bd      	mov	sp, r7
   2162c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                data[indx] = temp_buff[indx + dev->dummy_byte];
   21630:	7ae1      	ldrb	r1, [r4, #11]
   21632:	eb0a 0602 	add.w	r6, sl, r2
   21636:	5c71      	ldrb	r1, [r6, r1]
   21638:	f808 1002 	strb.w	r1, [r8, r2]
            for (indx = 0; indx < len; indx++)
   2163c:	b29a      	uxth	r2, r3
   2163e:	42aa      	cmp	r2, r5
   21640:	f103 0301 	add.w	r3, r3, #1
   21644:	d3f4      	bcc.n	21630 <read_regs+0x4c>
   21646:	e7ef      	b.n	21628 <read_regs+0x44>
   21648:	4603      	mov	r3, r0
   2164a:	e7f7      	b.n	2163c <read_regs+0x58>
        rslt = BMA4_E_NULL_PTR;
   2164c:	f04f 30ff 	mov.w	r0, #4294967295
   21650:	e7eb      	b.n	2162a <read_regs+0x46>

00021652 <increment_feature_config_addr>:
{
   21652:	b513      	push	{r0, r1, r4, lr}
    uint8_t asic_lsb = 0;
   21654:	2300      	movs	r3, #0
{
   21656:	4604      	mov	r4, r0
    uint8_t asic_lsb = 0;
   21658:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_msb = 0;
   2165c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   21660:	f7ff ff8d 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
   21664:	b948      	cbnz	r0, 2167a <increment_feature_config_addr+0x28>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   21666:	4623      	mov	r3, r4
   21668:	2201      	movs	r2, #1
   2166a:	f10d 0106 	add.w	r1, sp, #6
   2166e:	205b      	movs	r0, #91	; 0x5b
   21670:	f7ff ffb8 	bl	215e4 <read_regs>
        if (rslt == BMA4_OK)
   21674:	b118      	cbz	r0, 2167e <increment_feature_config_addr+0x2c>
            rslt = BMA4_E_COM_FAIL;
   21676:	f06f 0001 	mvn.w	r0, #1
}
   2167a:	b002      	add	sp, #8
   2167c:	bd10      	pop	{r4, pc}
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   2167e:	4623      	mov	r3, r4
   21680:	2201      	movs	r2, #1
   21682:	f10d 0107 	add.w	r1, sp, #7
   21686:	205c      	movs	r0, #92	; 0x5c
   21688:	f7ff ffac 	bl	215e4 <read_regs>
        if (rslt == BMA4_OK)
   2168c:	2800      	cmp	r0, #0
   2168e:	d1f2      	bne.n	21676 <increment_feature_config_addr+0x24>
            asic_addr = (asic_msb << 4) | (asic_lsb & 0x0F);
   21690:	f89d 2006 	ldrb.w	r2, [sp, #6]
   21694:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21698:	f002 020f 	and.w	r2, r2, #15
   2169c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
            asic_addr = asic_addr + (dev->read_write_len / 2);
   216a0:	8aa3      	ldrh	r3, [r4, #20]
   216a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
            asic_lsb = asic_addr & 0x0F;
   216a6:	f002 030f 	and.w	r3, r2, #15
            asic_msb = (uint8_t)(asic_addr >> 4);
   216aa:	0912      	lsrs	r2, r2, #4
            asic_lsb = asic_addr & 0x0F;
   216ac:	f88d 3006 	strb.w	r3, [sp, #6]
            asic_msb = (uint8_t)(asic_addr >> 4);
   216b0:	f88d 2007 	strb.w	r2, [sp, #7]
            rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   216b4:	4623      	mov	r3, r4
   216b6:	2201      	movs	r2, #1
   216b8:	f10d 0106 	add.w	r1, sp, #6
   216bc:	205b      	movs	r0, #91	; 0x5b
   216be:	f7ff ff6c 	bl	2159a <write_regs>
            if (rslt == BMA4_OK)
   216c2:	2800      	cmp	r0, #0
   216c4:	d1d9      	bne.n	2167a <increment_feature_config_addr+0x28>
                rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   216c6:	4623      	mov	r3, r4
   216c8:	2201      	movs	r2, #1
   216ca:	f10d 0107 	add.w	r1, sp, #7
   216ce:	205c      	movs	r0, #92	; 0x5c
   216d0:	f7ff ff63 	bl	2159a <write_regs>
   216d4:	e7d1      	b.n	2167a <increment_feature_config_addr+0x28>

000216d6 <set_feature_config_start_addr>:
{
   216d6:	b510      	push	{r4, lr}
   216d8:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   216da:	f7ff ff50 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
   216de:	b980      	cbnz	r0, 21702 <set_feature_config_start_addr+0x2c>
        rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &dev->asic_data.asic_lsb, 1, dev);
   216e0:	4623      	mov	r3, r4
   216e2:	2201      	movs	r2, #1
   216e4:	f104 0117 	add.w	r1, r4, #23
   216e8:	205b      	movs	r0, #91	; 0x5b
   216ea:	f7ff ff56 	bl	2159a <write_regs>
        if (rslt == BMA4_OK)
   216ee:	b940      	cbnz	r0, 21702 <set_feature_config_start_addr+0x2c>
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   216f0:	4623      	mov	r3, r4
   216f2:	f104 0118 	add.w	r1, r4, #24
   216f6:	2201      	movs	r2, #1
}
   216f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   216fc:	205c      	movs	r0, #92	; 0x5c
   216fe:	f7ff bf4c 	b.w	2159a <write_regs>
}
   21702:	bd10      	pop	{r4, pc}

00021704 <bma4_get_advance_power_save>:
{
   21704:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   21706:	2300      	movs	r3, #0
{
   21708:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   2170a:	4608      	mov	r0, r1
    uint8_t data = 0;
   2170c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   21710:	f7ff ff35 	bl	2157e <null_pointer_check>
    if ((rslt == BMA4_OK) && (adv_pwr_save != NULL))
   21714:	b978      	cbnz	r0, 21736 <bma4_get_advance_power_save+0x32>
   21716:	b174      	cbz	r4, 21736 <bma4_get_advance_power_save+0x32>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   21718:	460b      	mov	r3, r1
   2171a:	2201      	movs	r2, #1
   2171c:	f10d 0107 	add.w	r1, sp, #7
   21720:	207c      	movs	r0, #124	; 0x7c
   21722:	f000 f80b 	bl	2173c <bma4_read_regs>
        if (rslt == BMA4_OK)
   21726:	b920      	cbnz	r0, 21732 <bma4_get_advance_power_save+0x2e>
            *adv_pwr_save = BMA4_GET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE);
   21728:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2172c:	f003 0301 	and.w	r3, r3, #1
   21730:	7023      	strb	r3, [r4, #0]
}
   21732:	b002      	add	sp, #8
   21734:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   21736:	f04f 30ff 	mov.w	r0, #4294967295
   2173a:	e7fa      	b.n	21732 <bma4_get_advance_power_save+0x2e>

0002173c <bma4_read_regs>:
{
   2173c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21740:	461d      	mov	r5, r3
   21742:	4607      	mov	r7, r0
    uint8_t adv_pwr_save = 0;
   21744:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   21746:	4628      	mov	r0, r5
    uint8_t adv_pwr_save = 0;
   21748:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   2174c:	f7ff ff17 	bl	2157e <null_pointer_check>
{
   21750:	460e      	mov	r6, r1
   21752:	4614      	mov	r4, r2
    if ((rslt == BMA4_OK) && (data != NULL))
   21754:	4680      	mov	r8, r0
   21756:	2800      	cmp	r0, #0
   21758:	d172      	bne.n	21840 <bma4_read_regs+0x104>
   2175a:	2900      	cmp	r1, #0
   2175c:	d070      	beq.n	21840 <bma4_read_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   2175e:	2f5e      	cmp	r7, #94	; 0x5e
   21760:	d168      	bne.n	21834 <bma4_read_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   21762:	4629      	mov	r1, r5
   21764:	f10d 0007 	add.w	r0, sp, #7
   21768:	f7ff ffcc 	bl	21704 <bma4_get_advance_power_save>
            if (adv_pwr_save == BMA4_ENABLE)
   2176c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21770:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   21772:	4607      	mov	r7, r0
            if (adv_pwr_save == BMA4_ENABLE)
   21774:	d109      	bne.n	2178a <bma4_read_regs+0x4e>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   21776:	4629      	mov	r1, r5
   21778:	4640      	mov	r0, r8
   2177a:	f000 f867 	bl	2184c <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   2177e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21780:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   21782:	4607      	mov	r7, r0
                dev->delay_us(450, dev->intf_ptr);
   21784:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   21788:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   2178a:	f014 0901 	ands.w	r9, r4, #1
   2178e:	d15a      	bne.n	21846 <bma4_read_regs+0x10a>
   21790:	7dab      	ldrb	r3, [r5, #22]
   21792:	42a3      	cmp	r3, r4
   21794:	d357      	bcc.n	21846 <bma4_read_regs+0x10a>
   21796:	2f00      	cmp	r7, #0
   21798:	d155      	bne.n	21846 <bma4_read_regs+0x10a>
                if (dev->read_write_len < len)
   2179a:	8aaf      	ldrh	r7, [r5, #20]
   2179c:	42a7      	cmp	r7, r4
   2179e:	d242      	bcs.n	21826 <bma4_read_regs+0xea>
                    loop_count = len / dev->read_write_len;
   217a0:	fbb4 faf7 	udiv	sl, r4, r7
                    rslt = set_feature_config_start_addr(dev);
   217a4:	4628      	mov	r0, r5
   217a6:	f7ff ff96 	bl	216d6 <set_feature_config_start_addr>
                    overflow = len % dev->read_write_len;
   217aa:	fb07 471a 	mls	r7, r7, sl, r4
                    index = 0;
   217ae:	46c8      	mov	r8, r9
                    rslt = set_feature_config_start_addr(dev);
   217b0:	4604      	mov	r4, r0
                    for (idx = 0; idx < loop_count; idx++)
   217b2:	fa5f f389 	uxtb.w	r3, r9
   217b6:	459a      	cmp	sl, r3
   217b8:	d820      	bhi.n	217fc <bma4_read_regs+0xc0>
                    if ((overflow) && (rslt == BMA4_OK))
   217ba:	b147      	cbz	r7, 217ce <bma4_read_regs+0x92>
   217bc:	b9d4      	cbnz	r4, 217f4 <bma4_read_regs+0xb8>
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   217be:	462b      	mov	r3, r5
   217c0:	463a      	mov	r2, r7
   217c2:	eb06 0108 	add.w	r1, r6, r8
   217c6:	205e      	movs	r0, #94	; 0x5e
   217c8:	f7ff ff0c 	bl	215e4 <read_regs>
   217cc:	4604      	mov	r4, r0
                    if (rslt == BMA4_OK)
   217ce:	b98c      	cbnz	r4, 217f4 <bma4_read_regs+0xb8>
                        rslt = set_feature_config_start_addr(dev);
   217d0:	4628      	mov	r0, r5
   217d2:	f7ff ff80 	bl	216d6 <set_feature_config_start_addr>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   217d6:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   217d8:	b960      	cbnz	r0, 217f4 <bma4_read_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   217da:	f89d 0007 	ldrb.w	r0, [sp, #7]
   217de:	2801      	cmp	r0, #1
   217e0:	d108      	bne.n	217f4 <bma4_read_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   217e2:	4629      	mov	r1, r5
   217e4:	f000 f832 	bl	2184c <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   217e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   217ea:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   217ec:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   217ee:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   217f2:	4798      	blx	r3
}
   217f4:	4620      	mov	r0, r4
   217f6:	b002      	add	sp, #8
   217f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   217fc:	8aaa      	ldrh	r2, [r5, #20]
   217fe:	462b      	mov	r3, r5
   21800:	eb06 0108 	add.w	r1, r6, r8
   21804:	205e      	movs	r0, #94	; 0x5e
   21806:	f7ff feed 	bl	215e4 <read_regs>
                        if (rslt == BMA4_OK)
   2180a:	4604      	mov	r4, r0
   2180c:	b940      	cbnz	r0, 21820 <bma4_read_regs+0xe4>
                            rslt = increment_feature_config_addr(dev);
   2180e:	4628      	mov	r0, r5
   21810:	f7ff ff1f 	bl	21652 <increment_feature_config_addr>
                            if (rslt == BMA4_OK)
   21814:	4604      	mov	r4, r0
   21816:	b918      	cbnz	r0, 21820 <bma4_read_regs+0xe4>
                                index = index + dev->read_write_len;
   21818:	8aab      	ldrh	r3, [r5, #20]
   2181a:	4498      	add	r8, r3
   2181c:	fa1f f888 	uxth.w	r8, r8
                    for (idx = 0; idx < loop_count; idx++)
   21820:	f109 0901 	add.w	r9, r9, #1
   21824:	e7c5      	b.n	217b2 <bma4_read_regs+0x76>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   21826:	462b      	mov	r3, r5
   21828:	4622      	mov	r2, r4
   2182a:	4631      	mov	r1, r6
   2182c:	205e      	movs	r0, #94	; 0x5e
   2182e:	f7ff fed9 	bl	215e4 <read_regs>
   21832:	e7d0      	b.n	217d6 <bma4_read_regs+0x9a>
            rslt = read_regs(addr, data, len, dev);
   21834:	462b      	mov	r3, r5
   21836:	4638      	mov	r0, r7
   21838:	f7ff fed4 	bl	215e4 <read_regs>
   2183c:	4604      	mov	r4, r0
   2183e:	e7d9      	b.n	217f4 <bma4_read_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   21840:	f04f 34ff 	mov.w	r4, #4294967295
   21844:	e7d6      	b.n	217f4 <bma4_read_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   21846:	f06f 0409 	mvn.w	r4, #9
   2184a:	e7d3      	b.n	217f4 <bma4_read_regs+0xb8>

0002184c <bma4_set_advance_power_save>:
{
   2184c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   2184e:	2300      	movs	r3, #0
{
   21850:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   21852:	4608      	mov	r0, r1
{
   21854:	460c      	mov	r4, r1
    uint8_t data = 0;
   21856:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   2185a:	f7ff fe90 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
   2185e:	b9b8      	cbnz	r0, 21890 <bma4_set_advance_power_save+0x44>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   21860:	460b      	mov	r3, r1
   21862:	2201      	movs	r2, #1
   21864:	f10d 0107 	add.w	r1, sp, #7
   21868:	207c      	movs	r0, #124	; 0x7c
   2186a:	f7ff ff67 	bl	2173c <bma4_read_regs>
        if (rslt == BMA4_OK)
   2186e:	b978      	cbnz	r0, 21890 <bma4_set_advance_power_save+0x44>
            data = BMA4_SET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE, adv_pwr_save);
   21870:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21874:	f005 0001 	and.w	r0, r5, #1
   21878:	f023 0301 	bic.w	r3, r3, #1
   2187c:	4318      	orrs	r0, r3
   2187e:	f88d 0007 	strb.w	r0, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   21882:	4623      	mov	r3, r4
   21884:	2201      	movs	r2, #1
   21886:	f10d 0107 	add.w	r1, sp, #7
   2188a:	207c      	movs	r0, #124	; 0x7c
   2188c:	f000 f802 	bl	21894 <bma4_write_regs>
}
   21890:	b003      	add	sp, #12
   21892:	bd30      	pop	{r4, r5, pc}

00021894 <bma4_write_regs>:
{
   21894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21898:	461d      	mov	r5, r3
   2189a:	4604      	mov	r4, r0
    uint8_t adv_pwr_save = 0;
   2189c:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   2189e:	4628      	mov	r0, r5
{
   218a0:	460f      	mov	r7, r1
   218a2:	4616      	mov	r6, r2
    uint8_t adv_pwr_save = 0;
   218a4:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   218a8:	f7ff fe69 	bl	2157e <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   218ac:	2800      	cmp	r0, #0
   218ae:	d173      	bne.n	21998 <bma4_write_regs+0x104>
   218b0:	2900      	cmp	r1, #0
   218b2:	d071      	beq.n	21998 <bma4_write_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   218b4:	2c5e      	cmp	r4, #94	; 0x5e
   218b6:	d169      	bne.n	2198c <bma4_write_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   218b8:	4629      	mov	r1, r5
   218ba:	f10d 0007 	add.w	r0, sp, #7
   218be:	f7ff ff21 	bl	21704 <bma4_get_advance_power_save>
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   218c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218c6:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   218c8:	4604      	mov	r4, r0
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   218ca:	d109      	bne.n	218e0 <bma4_write_regs+0x4c>
   218cc:	b940      	cbnz	r0, 218e0 <bma4_write_regs+0x4c>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   218ce:	4629      	mov	r1, r5
   218d0:	f7ff ffbc 	bl	2184c <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   218d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   218d6:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   218d8:	4604      	mov	r4, r0
                dev->delay_us(450, dev->intf_ptr);
   218da:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   218de:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   218e0:	f016 0a01 	ands.w	sl, r6, #1
   218e4:	d15b      	bne.n	2199e <bma4_write_regs+0x10a>
   218e6:	7dab      	ldrb	r3, [r5, #22]
   218e8:	42b3      	cmp	r3, r6
   218ea:	d358      	bcc.n	2199e <bma4_write_regs+0x10a>
   218ec:	2c00      	cmp	r4, #0
   218ee:	d156      	bne.n	2199e <bma4_write_regs+0x10a>
                if (dev->read_write_len < len)
   218f0:	f8b5 b014 	ldrh.w	fp, [r5, #20]
   218f4:	45b3      	cmp	fp, r6
   218f6:	d242      	bcs.n	2197e <bma4_write_regs+0xea>
                    rslt = set_feature_config_start_addr(dev);
   218f8:	4628      	mov	r0, r5
   218fa:	f7ff feec 	bl	216d6 <set_feature_config_start_addr>
                    if (rslt == BMA4_OK)
   218fe:	4604      	mov	r4, r0
   21900:	bb20      	cbnz	r0, 2194c <bma4_write_regs+0xb8>
                    loop_count = len / dev->read_write_len;
   21902:	fbb6 f8fb 	udiv	r8, r6, fp
                    index = 0;
   21906:	46d1      	mov	r9, sl
                        for (i = 0; i < loop_count; i++)
   21908:	fa5f f38a 	uxtb.w	r3, sl
   2190c:	4598      	cmp	r8, r3
   2190e:	d821      	bhi.n	21954 <bma4_write_regs+0xc0>
                    overflow = len % dev->read_write_len;
   21910:	fb0b 6218 	mls	r2, fp, r8, r6
                        if ((overflow) && (rslt == BMA4_OK))
   21914:	b13a      	cbz	r2, 21926 <bma4_write_regs+0x92>
   21916:	b9cc      	cbnz	r4, 2194c <bma4_write_regs+0xb8>
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   21918:	462b      	mov	r3, r5
   2191a:	eb07 0109 	add.w	r1, r7, r9
   2191e:	205e      	movs	r0, #94	; 0x5e
   21920:	f7ff fe3b 	bl	2159a <write_regs>
   21924:	4604      	mov	r4, r0
                        if (rslt == BMA4_OK)
   21926:	b98c      	cbnz	r4, 2194c <bma4_write_regs+0xb8>
                            rslt = set_feature_config_start_addr(dev);
   21928:	4628      	mov	r0, r5
   2192a:	f7ff fed4 	bl	216d6 <set_feature_config_start_addr>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   2192e:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   21930:	b960      	cbnz	r0, 2194c <bma4_write_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   21932:	f89d 0007 	ldrb.w	r0, [sp, #7]
   21936:	2801      	cmp	r0, #1
   21938:	d108      	bne.n	2194c <bma4_write_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   2193a:	4629      	mov	r1, r5
   2193c:	f7ff ff86 	bl	2184c <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   21940:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21942:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   21944:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   21946:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   2194a:	4798      	blx	r3
}
   2194c:	4620      	mov	r0, r4
   2194e:	b003      	add	sp, #12
   21950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   21954:	8aaa      	ldrh	r2, [r5, #20]
   21956:	462b      	mov	r3, r5
   21958:	eb07 0109 	add.w	r1, r7, r9
   2195c:	205e      	movs	r0, #94	; 0x5e
   2195e:	f7ff fe1c 	bl	2159a <write_regs>
                            if (rslt == BMA4_OK)
   21962:	4604      	mov	r4, r0
   21964:	b940      	cbnz	r0, 21978 <bma4_write_regs+0xe4>
                                rslt = increment_feature_config_addr(dev);
   21966:	4628      	mov	r0, r5
   21968:	f7ff fe73 	bl	21652 <increment_feature_config_addr>
                                if (rslt == BMA4_OK)
   2196c:	4604      	mov	r4, r0
   2196e:	b918      	cbnz	r0, 21978 <bma4_write_regs+0xe4>
                                    index = index + dev->read_write_len;
   21970:	8aab      	ldrh	r3, [r5, #20]
   21972:	4499      	add	r9, r3
   21974:	fa1f f989 	uxth.w	r9, r9
                        for (i = 0; i < loop_count; i++)
   21978:	f10a 0a01 	add.w	sl, sl, #1
   2197c:	e7c4      	b.n	21908 <bma4_write_regs+0x74>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   2197e:	462b      	mov	r3, r5
   21980:	4632      	mov	r2, r6
   21982:	4639      	mov	r1, r7
   21984:	205e      	movs	r0, #94	; 0x5e
   21986:	f7ff fe08 	bl	2159a <write_regs>
   2198a:	e7d0      	b.n	2192e <bma4_write_regs+0x9a>
            rslt = write_regs(addr, data, len, dev);
   2198c:	4620      	mov	r0, r4
   2198e:	462b      	mov	r3, r5
   21990:	f7ff fe03 	bl	2159a <write_regs>
   21994:	4604      	mov	r4, r0
   21996:	e7d9      	b.n	2194c <bma4_write_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   21998:	f04f 34ff 	mov.w	r4, #4294967295
   2199c:	e7d6      	b.n	2194c <bma4_write_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   2199e:	f06f 0409 	mvn.w	r4, #9
   219a2:	e7d3      	b.n	2194c <bma4_write_regs+0xb8>

000219a4 <bma4_init>:
{
   219a4:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   219a6:	2300      	movs	r3, #0
{
   219a8:	4604      	mov	r4, r0
    uint8_t data = 0;
   219aa:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t dummy_read = 0;
   219ae:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   219b2:	f7ff fde4 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
   219b6:	4602      	mov	r2, r0
   219b8:	b9b0      	cbnz	r0, 219e8 <bma4_init+0x44>
        if (dev->intf == BMA4_SPI_INTF)
   219ba:	7a23      	ldrb	r3, [r4, #8]
   219bc:	b9bb      	cbnz	r3, 219ee <bma4_init+0x4a>
            dev->dummy_byte = 1;
   219be:	2201      	movs	r2, #1
   219c0:	72e2      	strb	r2, [r4, #11]
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &dummy_read, 1, dev);
   219c2:	4623      	mov	r3, r4
   219c4:	f10d 0107 	add.w	r1, sp, #7
   219c8:	f7ff feb8 	bl	2173c <bma4_read_regs>
        if (rslt == BMA4_OK)
   219cc:	4602      	mov	r2, r0
   219ce:	b958      	cbnz	r0, 219e8 <bma4_init+0x44>
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &data, 1, dev);
   219d0:	2201      	movs	r2, #1
   219d2:	4623      	mov	r3, r4
   219d4:	f10d 0106 	add.w	r1, sp, #6
   219d8:	2000      	movs	r0, #0
   219da:	f7ff feaf 	bl	2173c <bma4_read_regs>
            if (rslt == BMA4_OK)
   219de:	4602      	mov	r2, r0
   219e0:	b910      	cbnz	r0, 219e8 <bma4_init+0x44>
                dev->chip_id = data;
   219e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   219e6:	7023      	strb	r3, [r4, #0]
}
   219e8:	4610      	mov	r0, r2
   219ea:	b002      	add	sp, #8
   219ec:	bd10      	pop	{r4, pc}
            dev->dummy_byte = 0;
   219ee:	72e0      	strb	r0, [r4, #11]
        if (rslt == BMA4_OK)
   219f0:	e7ee      	b.n	219d0 <bma4_init+0x2c>

000219f2 <bma4_set_accel_enable>:
{
   219f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   219f4:	2300      	movs	r3, #0
{
   219f6:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   219f8:	4608      	mov	r0, r1
{
   219fa:	460d      	mov	r5, r1
    uint8_t data = 0;
   219fc:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   21a00:	f7ff fdbd 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
   21a04:	b9c0      	cbnz	r0, 21a38 <bma4_set_accel_enable+0x46>
        rslt = bma4_read_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   21a06:	460b      	mov	r3, r1
   21a08:	2201      	movs	r2, #1
   21a0a:	f10d 0107 	add.w	r1, sp, #7
   21a0e:	207d      	movs	r0, #125	; 0x7d
   21a10:	f7ff fe94 	bl	2173c <bma4_read_regs>
        if (rslt == BMA4_OK)
   21a14:	b980      	cbnz	r0, 21a38 <bma4_set_accel_enable+0x46>
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   21a16:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21a1a:	00a4      	lsls	r4, r4, #2
   21a1c:	f022 0204 	bic.w	r2, r2, #4
   21a20:	f004 0404 	and.w	r4, r4, #4
   21a24:	4314      	orrs	r4, r2
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   21a26:	462b      	mov	r3, r5
   21a28:	2201      	movs	r2, #1
   21a2a:	f10d 0107 	add.w	r1, sp, #7
   21a2e:	207d      	movs	r0, #125	; 0x7d
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   21a30:	f88d 4007 	strb.w	r4, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   21a34:	f7ff ff2e 	bl	21894 <bma4_write_regs>
}
   21a38:	b003      	add	sp, #12
   21a3a:	bd30      	pop	{r4, r5, pc}

00021a3c <bma4_set_command_register>:
{
   21a3c:	b507      	push	{r0, r1, r2, lr}
   21a3e:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
   21a42:	4608      	mov	r0, r1
   21a44:	f7ff fd9b 	bl	2157e <null_pointer_check>
    if (rslt == BMA4_OK)
   21a48:	b930      	cbnz	r0, 21a58 <bma4_set_command_register+0x1c>
        rslt = bma4_write_regs(BMA4_CMD_ADDR, &command_reg, 1, dev);
   21a4a:	460b      	mov	r3, r1
   21a4c:	2201      	movs	r2, #1
   21a4e:	f10d 0107 	add.w	r1, sp, #7
   21a52:	207e      	movs	r0, #126	; 0x7e
   21a54:	f7ff ff1e 	bl	21894 <bma4_write_regs>
}
   21a58:	b003      	add	sp, #12
   21a5a:	f85d fb04 	ldr.w	pc, [sp], #4

00021a5e <bma456_init>:
{
   21a5e:	b510      	push	{r4, lr}
   21a60:	4604      	mov	r4, r0
    rslt = bma4_init(dev);
   21a62:	f7ff ff9f 	bl	219a4 <bma4_init>
    if (rslt == BMA4_OK)
   21a66:	b968      	cbnz	r0, 21a84 <bma456_init+0x26>
        if (dev->chip_id == BMA456_CHIP_ID)
   21a68:	7823      	ldrb	r3, [r4, #0]
   21a6a:	2b16      	cmp	r3, #22
            dev->feature_len = BMA456_FEATURE_SIZE;
   21a6c:	bf01      	itttt	eq
   21a6e:	2346      	moveq	r3, #70	; 0x46
   21a70:	75a3      	strbeq	r3, [r4, #22]
            dev->resolution = 16;
   21a72:	f44f 7304 	moveq.w	r3, #528	; 0x210
   21a76:	81a3      	strheq	r3, [r4, #12]
            dev->config_size = sizeof(bma456_config_file);
   21a78:	bf06      	itte	eq
   21a7a:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
   21a7e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
            rslt = BMA4_E_INVALID_SENSOR;
   21a80:	f06f 0003 	mvnne.w	r0, #3
}
   21a84:	bd10      	pop	{r4, pc}

00021a86 <bma456_map_interrupt>:
/*!
 * @brief This API sets/un-sets the user provided interrupt to either interrupt
 * pin1 or pin2 in the sensor.
 */
int8_t bma456_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable, struct bma4_dev *dev)
{
   21a86:	b430      	push	{r4, r5}
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
   21a88:	b13b      	cbz	r3, 21a9a <bma456_map_interrupt+0x14>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   21a8a:	781c      	ldrb	r4, [r3, #0]
   21a8c:	2c16      	cmp	r4, #22
   21a8e:	d108      	bne.n	21aa2 <bma456_map_interrupt+0x1c>
        {
            if (int_line <= 1)
   21a90:	2801      	cmp	r0, #1
   21a92:	d809      	bhi.n	21aa8 <bma456_map_interrupt+0x22>
    {
        rslt = BMA4_E_NULL_PTR;
    }

    return rslt;
}
   21a94:	bc30      	pop	{r4, r5}
                rslt = bma4_map_interrupt(int_line, int_map, enable, dev);
   21a96:	f7e1 bc27 	b.w	32e8 <bma4_map_interrupt>
        rslt = BMA4_E_NULL_PTR;
   21a9a:	f04f 30ff 	mov.w	r0, #4294967295
}
   21a9e:	bc30      	pop	{r4, r5}
   21aa0:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
   21aa2:	f06f 0003 	mvn.w	r0, #3
   21aa6:	e7fa      	b.n	21a9e <bma456_map_interrupt+0x18>
                rslt = BMA4_E_INT_LINE_INVALID;
   21aa8:	f06f 0008 	mvn.w	r0, #8
   21aac:	e7f7      	b.n	21a9e <bma456_map_interrupt+0x18>

00021aae <bma456_feature_enable>:

/*!
 * @brief This API enables/disables the features of the sensor.
 */
int8_t bma456_feature_enable(uint8_t feature, uint8_t enable, struct bma4_dev *dev)
{
   21aae:	b570      	push	{r4, r5, r6, lr}
   21ab0:	b092      	sub	sp, #72	; 0x48
   21ab2:	4615      	mov	r5, r2
   21ab4:	4604      	mov	r4, r0
   21ab6:	460e      	mov	r6, r1
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   21ab8:	2242      	movs	r2, #66	; 0x42
   21aba:	2100      	movs	r1, #0
   21abc:	a801      	add	r0, sp, #4
   21abe:	9100      	str	r1, [sp, #0]
   21ac0:	f003 f8f1 	bl	24ca6 <memset>
    int8_t rslt = BMA4_OK;
    uint8_t len = BMA456_FEATURE_SIZE;

    if (dev != NULL)
   21ac4:	2d00      	cmp	r5, #0
   21ac6:	d063      	beq.n	21b90 <bma456_feature_enable+0xe2>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   21ac8:	782b      	ldrb	r3, [r5, #0]
   21aca:	2b16      	cmp	r3, #22
   21acc:	d163      	bne.n	21b96 <bma456_feature_enable+0xe8>
        {
            /* Read feature configuration data */
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   21ace:	462b      	mov	r3, r5
   21ad0:	2246      	movs	r2, #70	; 0x46
   21ad2:	4669      	mov	r1, sp
   21ad4:	205e      	movs	r0, #94	; 0x5e
   21ad6:	f7ff fe31 	bl	2173c <bma4_read_regs>
            if (rslt == BMA4_OK)
   21ada:	bba0      	cbnz	r0, 21b46 <bma456_feature_enable+0x98>
            {
                if (enable == TRUE)
   21adc:	2e01      	cmp	r6, #1
   21ade:	f004 0301 	and.w	r3, r4, #1
   21ae2:	f004 0002 	and.w	r0, r4, #2
   21ae6:	f004 0104 	and.w	r1, r4, #4
   21aea:	f004 0208 	and.w	r2, r4, #8
   21aee:	f004 0410 	and.w	r4, r4, #16
   21af2:	d12a      	bne.n	21b4a <bma456_feature_enable+0x9c>
    int8_t rslt = BMA4_OK;

    if ((dev != NULL) && (feature_config != NULL))
    {
        /* Enable step counter */
        if ((feature & BMA456_STEP_CNTR) > 0)
   21af4:	b12b      	cbz	r3, 21b02 <bma456_feature_enable+0x54>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_CNTR_EN_MSK;
   21af6:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21afa:	f043 0310 	orr.w	r3, r3, #16
   21afe:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable step activity */
        if ((feature & BMA456_STEP_ACT) > 0)
   21b02:	b128      	cbz	r0, 21b10 <bma456_feature_enable+0x62>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_ACT_EN_MSK;
   21b04:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21b08:	f043 0320 	orr.w	r3, r3, #32
   21b0c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable wrist wear wakeup */
        if ((feature & BMA456_WRIST_WEAR) > 0)
   21b10:	b129      	cbz	r1, 21b1e <bma456_feature_enable+0x70>
        {
            index = BMA456_WRIST_WEAR_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_WRIST_WEAR_EN_MSK;
   21b12:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   21b16:	f043 0301 	orr.w	r3, r3, #1
   21b1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        }

        /* Enable single - tap */
        if ((feature & BMA456_SINGLE_TAP) > 0)
   21b1e:	b12a      	cbz	r2, 21b2c <bma456_feature_enable+0x7e>
        {
            index = BMA456_SINGLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_SINGLE_TAP_EN_MSK;
   21b20:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   21b24:	f043 0301 	orr.w	r3, r3, #1
   21b28:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        }

        /* Enable  double- tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   21b2c:	b12c      	cbz	r4, 21b3a <bma456_feature_enable+0x8c>
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_DOUBLE_TAP_EN_MSK;
   21b2e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   21b32:	f043 0301 	orr.w	r3, r3, #1

        /* Disable double-tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   21b36:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        }

        /* Write the configured settings in the sensor */
        rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   21b3a:	462b      	mov	r3, r5
   21b3c:	2246      	movs	r2, #70	; 0x46
   21b3e:	4669      	mov	r1, sp
   21b40:	205e      	movs	r0, #94	; 0x5e
   21b42:	f7ff fea7 	bl	21894 <bma4_write_regs>
}
   21b46:	b012      	add	sp, #72	; 0x48
   21b48:	bd70      	pop	{r4, r5, r6, pc}
        if ((feature & BMA456_STEP_CNTR) > 0)
   21b4a:	b12b      	cbz	r3, 21b58 <bma456_feature_enable+0xaa>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_CNTR_EN_MSK);
   21b4c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21b50:	f023 0310 	bic.w	r3, r3, #16
   21b54:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_STEP_ACT) > 0)
   21b58:	b128      	cbz	r0, 21b66 <bma456_feature_enable+0xb8>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_ACT_EN_MSK);
   21b5a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21b5e:	f023 0320 	bic.w	r3, r3, #32
   21b62:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_WRIST_WEAR) > 0)
   21b66:	b129      	cbz	r1, 21b74 <bma456_feature_enable+0xc6>
            feature_config[index] = feature_config[index] & (~BMA456_WRIST_WEAR_EN_MSK);
   21b68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   21b6c:	f023 0301 	bic.w	r3, r3, #1
   21b70:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        if ((feature & BMA456_SINGLE_TAP) > 0)
   21b74:	b12a      	cbz	r2, 21b82 <bma456_feature_enable+0xd4>
            feature_config[index] = feature_config[index] & (~BMA456_SINGLE_TAP_EN_MSK);
   21b76:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   21b7a:	f023 0301 	bic.w	r3, r3, #1
   21b7e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   21b82:	2c00      	cmp	r4, #0
   21b84:	d0d9      	beq.n	21b3a <bma456_feature_enable+0x8c>
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   21b86:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   21b8a:	f023 0301 	bic.w	r3, r3, #1
   21b8e:	e7d2      	b.n	21b36 <bma456_feature_enable+0x88>
        rslt = BMA4_E_NULL_PTR;
   21b90:	f04f 30ff 	mov.w	r0, #4294967295
   21b94:	e7d7      	b.n	21b46 <bma456_feature_enable+0x98>
            rslt = BMA4_E_INVALID_SENSOR;
   21b96:	f06f 0003 	mvn.w	r0, #3
   21b9a:	e7d4      	b.n	21b46 <bma456_feature_enable+0x98>

00021b9c <bma456_step_counter_set_watermark>:
{
   21b9c:	b530      	push	{r4, r5, lr}
   21b9e:	b093      	sub	sp, #76	; 0x4c
   21ba0:	460c      	mov	r4, r1
   21ba2:	4605      	mov	r5, r0
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   21ba4:	2100      	movs	r1, #0
   21ba6:	2242      	movs	r2, #66	; 0x42
   21ba8:	a801      	add	r0, sp, #4
   21baa:	9100      	str	r1, [sp, #0]
   21bac:	f003 f87b 	bl	24ca6 <memset>
    if (dev != NULL)
   21bb0:	b30c      	cbz	r4, 21bf6 <bma456_step_counter_set_watermark+0x5a>
        if (dev->chip_id == BMA456_CHIP_ID)
   21bb2:	7823      	ldrb	r3, [r4, #0]
   21bb4:	2b16      	cmp	r3, #22
   21bb6:	d121      	bne.n	21bfc <bma456_step_counter_set_watermark+0x60>
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   21bb8:	4623      	mov	r3, r4
   21bba:	2246      	movs	r2, #70	; 0x46
   21bbc:	4669      	mov	r1, sp
   21bbe:	205e      	movs	r0, #94	; 0x5e
   21bc0:	f7ff fdbc 	bl	2173c <bma4_read_regs>
            if (rslt == BMA4_OK)
   21bc4:	b9a8      	cbnz	r0, 21bf2 <bma456_step_counter_set_watermark+0x56>
                data = BMA4_SET_BITS_POS_0(data, BMA456_STEP_CNTR_WM, step_counter_wm);
   21bc6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
   21bca:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   21bce:	f022 0203 	bic.w	r2, r2, #3
   21bd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
   21bd6:	432a      	orrs	r2, r5
   21bd8:	b212      	sxth	r2, r2
                feature_config[index] = BMA4_GET_LSB(data);
   21bda:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                feature_config[index + 1] = BMA4_GET_MSB(data);
   21bde:	f3c2 2207 	ubfx	r2, r2, #8, #8
   21be2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   21be6:	4623      	mov	r3, r4
   21be8:	2246      	movs	r2, #70	; 0x46
   21bea:	4669      	mov	r1, sp
   21bec:	205e      	movs	r0, #94	; 0x5e
   21bee:	f7ff fe51 	bl	21894 <bma4_write_regs>
}
   21bf2:	b013      	add	sp, #76	; 0x4c
   21bf4:	bd30      	pop	{r4, r5, pc}
        rslt = BMA4_E_NULL_PTR;
   21bf6:	f04f 30ff 	mov.w	r0, #4294967295
   21bfa:	e7fa      	b.n	21bf2 <bma456_step_counter_set_watermark+0x56>
            rslt = BMA4_E_INVALID_SENSOR;
   21bfc:	f06f 0003 	mvn.w	r0, #3
   21c00:	e7f7      	b.n	21bf2 <bma456_step_counter_set_watermark+0x56>

00021c02 <bma456_step_counter_output>:
{
   21c02:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[BMA456_STEP_CNTR_DATA_SIZE] = { 0 };
   21c04:	2300      	movs	r3, #0
   21c06:	9301      	str	r3, [sp, #4]
{
   21c08:	4604      	mov	r4, r0
    if ((dev != NULL) && (step_count != NULL))
   21c0a:	460b      	mov	r3, r1
   21c0c:	b171      	cbz	r1, 21c2c <bma456_step_counter_output+0x2a>
   21c0e:	b168      	cbz	r0, 21c2c <bma456_step_counter_output+0x2a>
        if (dev->chip_id == BMA456_CHIP_ID)
   21c10:	780a      	ldrb	r2, [r1, #0]
   21c12:	2a16      	cmp	r2, #22
   21c14:	d10d      	bne.n	21c32 <bma456_step_counter_output+0x30>
            rslt = bma4_read_regs(BMA4_STEP_CNT_OUT_0_ADDR, data, BMA456_STEP_CNTR_DATA_SIZE, dev);
   21c16:	2204      	movs	r2, #4
   21c18:	eb0d 0102 	add.w	r1, sp, r2
   21c1c:	201e      	movs	r0, #30
   21c1e:	f7ff fd8d 	bl	2173c <bma4_read_regs>
            if (rslt == BMA4_OK)
   21c22:	b908      	cbnz	r0, 21c28 <bma456_step_counter_output+0x26>
                *step_count = step_count_0 | step_count_1 | step_count_2 | step_count_3;
   21c24:	9b01      	ldr	r3, [sp, #4]
   21c26:	6023      	str	r3, [r4, #0]
}
   21c28:	b002      	add	sp, #8
   21c2a:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   21c2c:	f04f 30ff 	mov.w	r0, #4294967295
   21c30:	e7fa      	b.n	21c28 <bma456_step_counter_output+0x26>
            rslt = BMA4_E_INVALID_SENSOR;
   21c32:	f06f 0003 	mvn.w	r0, #3
   21c36:	e7f7      	b.n	21c28 <bma456_step_counter_output+0x26>

00021c38 <set_max30102_for_reading_data>:
{
   21c38:	b510      	push	{r4, lr}
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   21c3a:	2140      	movs	r1, #64	; 0x40
   21c3c:	2002      	movs	r0, #2
   21c3e:	f7e1 fbbb 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   21c42:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   21c44:	4604      	mov	r4, r0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   21c46:	2003      	movs	r0, #3
   21c48:	f7e1 fbb6 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21c4c:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   21c4e:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21c50:	2004      	movs	r0, #4
   21c52:	f7e1 fbb1 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   21c56:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21c58:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   21c5a:	2100      	movs	r1, #0
   21c5c:	2005      	movs	r0, #5
   21c5e:	f7e1 fbab 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21c62:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   21c64:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   21c66:	2100      	movs	r1, #0
   21c68:	2006      	movs	r0, #6
   21c6a:	f7e1 fba5 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   21c6e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   21c70:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   21c72:	210f      	movs	r1, #15
   21c74:	2008      	movs	r0, #8
   21c76:	f7e1 fb9f 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   21c7a:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   21c7c:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   21c7e:	2103      	movs	r1, #3
   21c80:	2009      	movs	r0, #9
   21c82:	f7e1 fb99 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   21c86:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   21c88:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   21c8a:	2127      	movs	r1, #39	; 0x27
   21c8c:	200a      	movs	r0, #10
   21c8e:	f7e1 fb93 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   21c92:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   21c94:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   21c96:	2124      	movs	r1, #36	; 0x24
   21c98:	200c      	movs	r0, #12
   21c9a:	f7e1 fb8d 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   21c9e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   21ca0:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   21ca2:	2124      	movs	r1, #36	; 0x24
   21ca4:	200d      	movs	r0, #13
   21ca6:	f7e1 fb87 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   21caa:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   21cac:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   21cae:	217f      	movs	r1, #127	; 0x7f
   21cb0:	2010      	movs	r0, #16
   21cb2:	f7e1 fb81 	bl	33b8 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   21cb6:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   21cb8:	4320      	orrs	r0, r4
}
   21cba:	b280      	uxth	r0, r0
   21cbc:	bd10      	pop	{r4, pc}

00021cbe <gpio_pin_configure>:
{
   21cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_driver_data *data =
   21cc0:	68c5      	ldr	r5, [r0, #12]
{
   21cc2:	460f      	mov	r7, r1
   21cc4:	4616      	mov	r6, r2
	return api->pin_configure(port, pin, flags);
   21cc6:	6883      	ldr	r3, [r0, #8]
   21cc8:	681b      	ldr	r3, [r3, #0]
   21cca:	4798      	blx	r3
	if (ret != 0) {
   21ccc:	b948      	cbnz	r0, 21ce2 <gpio_pin_configure+0x24>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21cce:	682c      	ldr	r4, [r5, #0]
   21cd0:	2301      	movs	r3, #1
   21cd2:	fa03 f107 	lsl.w	r1, r3, r7
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   21cd6:	07f3      	lsls	r3, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21cd8:	bf4c      	ite	mi
   21cda:	4321      	orrmi	r1, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21cdc:	ea24 0101 	bicpl.w	r1, r4, r1
   21ce0:	6029      	str	r1, [r5, #0]
}
   21ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021ce4 <match_led_to_button>:

    return led;
}

bool match_led_to_button(struct device *button, struct device *led)
{
   21ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
   21ce6:	68c5      	ldr	r5, [r0, #12]
   21ce8:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   21cea:	6883      	ldr	r3, [r0, #8]
   21cec:	a901      	add	r1, sp, #4
   21cee:	685b      	ldr	r3, [r3, #4]
   21cf0:	4798      	blx	r3
	if (ret == 0) {
   21cf2:	b920      	cbnz	r0, 21cfe <match_led_to_button+0x1a>
		*value ^= data->invert;
   21cf4:	6828      	ldr	r0, [r5, #0]
   21cf6:	9b01      	ldr	r3, [sp, #4]
   21cf8:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   21cfa:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   21cfe:	68e3      	ldr	r3, [r4, #12]
   21d00:	681b      	ldr	r3, [r3, #0]
    bool val;
    val = gpio_pin_get(button, SW0_GPIO_PIN);
   21d02:	1e05      	subs	r5, r0, #0
   21d04:	bf18      	it	ne
   21d06:	2501      	movne	r5, #1
   21d08:	055b      	lsls	r3, r3, #21
   21d0a:	d509      	bpl.n	21d20 <match_led_to_button+0x3c>
	if (value != 0)	{
   21d0c:	b150      	cbz	r0, 21d24 <match_led_to_button+0x40>
	return api->port_set_bits_raw(port, pins);
   21d0e:	68a3      	ldr	r3, [r4, #8]
   21d10:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   21d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
   21d16:	4620      	mov	r0, r4
   21d18:	4798      	blx	r3
    gpio_pin_set(led, LED0_GPIO_PIN, !val);
    return val;
}
   21d1a:	4628      	mov	r0, r5
   21d1c:	b003      	add	sp, #12
   21d1e:	bd30      	pop	{r4, r5, pc}
	if (value != 0)	{
   21d20:	2800      	cmp	r0, #0
   21d22:	d0f4      	beq.n	21d0e <match_led_to_button+0x2a>
	return api->port_clear_bits_raw(port, pins);
   21d24:	68a3      	ldr	r3, [r4, #8]
   21d26:	691b      	ldr	r3, [r3, #16]
   21d28:	e7f3      	b.n	21d12 <match_led_to_button+0x2e>

00021d2a <z_impl_i2c_transfer>:
{
   21d2a:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   21d2c:	6884      	ldr	r4, [r0, #8]
   21d2e:	6864      	ldr	r4, [r4, #4]
   21d30:	46a4      	mov	ip, r4
}
   21d32:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   21d34:	4760      	bx	ip

00021d36 <max30208_read_fifo>:
{
   21d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    *data = 0;
   21d38:	2300      	movs	r3, #0
   21d3a:	6003      	str	r3, [r0, #0]
{
   21d3c:	4605      	mov	r5, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   21d3e:	21c1      	movs	r1, #193	; 0xc1
   21d40:	2014      	movs	r0, #20
   21d42:	f7e1 fd83 	bl	384c <max30208_i2c_write.constprop.0>
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21d46:	f10d 0107 	add.w	r1, sp, #7
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   21d4a:	4604      	mov	r4, r0
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21d4c:	2008      	movs	r0, #8
   21d4e:	f7e1 fd99 	bl	3884 <max30208_i2c_read.constprop.0>
   21d52:	f10d 0107 	add.w	r1, sp, #7
   21d56:	2008      	movs	r0, #8
            temp_dat[i] = temp;
   21d58:	f89d 7007 	ldrb.w	r7, [sp, #7]
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21d5c:	f7e1 fd92 	bl	3884 <max30208_i2c_read.constprop.0>
            temp_dat[i] = temp;
   21d60:	f89d 6007 	ldrb.w	r6, [sp, #7]
        sum = sum + (temp_dat[0] << 8) + temp_dat[1];
   21d64:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    *data = sum / samples;
   21d68:	602e      	str	r6, [r5, #0]
    max30208_i2c_read(MAX30208_FIFO_R_POINTER, &temp, 1);
   21d6a:	f10d 0107 	add.w	r1, sp, #7
   21d6e:	2005      	movs	r0, #5
   21d70:	f7e1 fd88 	bl	3884 <max30208_i2c_read.constprop.0>
}
   21d74:	4620      	mov	r0, r4
    *data = (temp_dat[0] << 8) + temp_dat[1];
   21d76:	602e      	str	r6, [r5, #0]
}
   21d78:	b003      	add	sp, #12
   21d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021d7c <mpu6050_read_Acc>:

u16_t mpu6050_read_Acc(uint16_t *value)
{
   21d7c:	4601      	mov	r1, r0
    return mpu6050_i2c_read(0x3B, value, 2);
   21d7e:	203b      	movs	r0, #59	; 0x3b
   21d80:	f7e1 bdba 	b.w	38f8 <mpu6050_i2c_read.constprop.0>

00021d84 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   21d84:	4684      	mov	ip, r0
    int32_t i = 1, n_width;
    *pn_npks = 0;
   21d86:	2000      	movs	r0, #0
{
   21d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    *pn_npks = 0;
   21d8a:	6008      	str	r0, [r1, #0]
    int32_t i = 1, n_width;
   21d8c:	2501      	movs	r5, #1

    while (i < n_size - 1)
   21d8e:	f103 3eff 	add.w	lr, r3, #4294967295
   21d92:	45ae      	cmp	lr, r5
   21d94:	dc00      	bgt.n	21d98 <maxim_peaks_above_min_height+0x14>
                i += n_width;
        }
        else
            i++;
    }
}
   21d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1])
   21d98:	9c05      	ldr	r4, [sp, #20]
   21d9a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
   21d9e:	42a0      	cmp	r0, r4
   21da0:	ea4f 0685 	mov.w	r6, r5, lsl #2
   21da4:	f105 0401 	add.w	r4, r5, #1
   21da8:	dd18      	ble.n	21ddc <maxim_peaks_above_min_height+0x58>
   21daa:	4416      	add	r6, r2
   21dac:	f856 6c04 	ldr.w	r6, [r6, #-4]
   21db0:	42b0      	cmp	r0, r6
   21db2:	dd13      	ble.n	21ddc <maxim_peaks_above_min_height+0x58>
   21db4:	4626      	mov	r6, r4
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
   21db6:	429e      	cmp	r6, r3
   21db8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   21dbc:	4634      	mov	r4, r6
   21dbe:	da03      	bge.n	21dc8 <maxim_peaks_above_min_height+0x44>
   21dc0:	42b8      	cmp	r0, r7
   21dc2:	f106 0601 	add.w	r6, r6, #1
   21dc6:	d0f6      	beq.n	21db6 <maxim_peaks_above_min_height+0x32>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15)
   21dc8:	42b8      	cmp	r0, r7
   21dca:	dd07      	ble.n	21ddc <maxim_peaks_above_min_height+0x58>
   21dcc:	6808      	ldr	r0, [r1, #0]
   21dce:	280e      	cmp	r0, #14
                pn_locs[(*pn_npks)++] = i;
   21dd0:	bfdf      	itttt	le
   21dd2:	1c46      	addle	r6, r0, #1
   21dd4:	600e      	strle	r6, [r1, #0]
   21dd6:	f84c 5020 	strle.w	r5, [ip, r0, lsl #2]
                i += n_width + 1;
   21dda:	3401      	addle	r4, #1
{
   21ddc:	4625      	mov	r5, r4
   21dde:	e7d8      	b.n	21d92 <maxim_peaks_above_min_height+0xe>

00021de0 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   21de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   21de2:	2301      	movs	r3, #1
   21de4:	4604      	mov	r4, r0
   21de6:	428b      	cmp	r3, r1
   21de8:	db00      	blt.n	21dec <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
            pn_x[j] = pn_x[j - 1];
        pn_x[j] = n_temp;
    }
}
   21dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
   21dec:	f854 6f04 	ldr.w	r6, [r4, #4]!
   21df0:	461a      	mov	r2, r3
   21df2:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   21df4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   21df8:	42b7      	cmp	r7, r6
   21dfa:	dd03      	ble.n	21e04 <maxim_sort_ascend+0x24>
   21dfc:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j - 1];
   21dfe:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   21e02:	d1f7      	bne.n	21df4 <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
   21e04:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++)
   21e08:	3301      	adds	r3, #1
   21e0a:	e7ec      	b.n	21de6 <maxim_sort_ascend+0x6>

00021e0c <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
   21e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   21e10:	2301      	movs	r3, #1
   21e12:	460d      	mov	r5, r1
   21e14:	4293      	cmp	r3, r2
   21e16:	db01      	blt.n	21e1c <maxim_sort_indices_descend+0x10>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
            pn_indx[j] = pn_indx[j - 1];
        pn_indx[j] = n_temp;
    }
}
   21e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
   21e1c:	f855 6f04 	ldr.w	r6, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   21e20:	461c      	mov	r4, r3
   21e22:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   21e26:	46ac      	mov	ip, r5
   21e28:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   21e2c:	f8d9 e000 	ldr.w	lr, [r9]
   21e30:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
   21e34:	45c6      	cmp	lr, r8
   21e36:	dd03      	ble.n	21e40 <maxim_sort_indices_descend+0x34>
   21e38:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j - 1];
   21e3a:	f84c 7904 	str.w	r7, [ip], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   21e3e:	d1f3      	bne.n	21e28 <maxim_sort_indices_descend+0x1c>
        pn_indx[j] = n_temp;
   21e40:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++)
   21e44:	3301      	adds	r3, #1
   21e46:	e7e5      	b.n	21e14 <maxim_sort_indices_descend+0x8>

00021e48 <maxim_remove_close_peaks>:
{
   21e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e4a:	4604      	mov	r4, r0
   21e4c:	461e      	mov	r6, r3
   21e4e:	4610      	mov	r0, r2
   21e50:	460d      	mov	r5, r1
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
   21e52:	680a      	ldr	r2, [r1, #0]
   21e54:	4621      	mov	r1, r4
   21e56:	f7ff ffd9 	bl	21e0c <maxim_sort_indices_descend>
    for (i = -1; i < *pn_npks; i++)
   21e5a:	f04f 32ff 	mov.w	r2, #4294967295
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   21e5e:	f1c6 0e00 	rsb	lr, r6, #0
    for (i = -1; i < *pn_npks; i++)
   21e62:	6829      	ldr	r1, [r5, #0]
   21e64:	4291      	cmp	r1, r2
   21e66:	dc04      	bgt.n	21e72 <maxim_remove_close_peaks+0x2a>
    maxim_sort_ascend(pn_locs, *pn_npks);
   21e68:	4620      	mov	r0, r4
}
   21e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    maxim_sort_ascend(pn_locs, *pn_npks);
   21e6e:	f7ff bfb7 	b.w	21de0 <maxim_sort_ascend>
        *pn_npks = i + 1;
   21e72:	1c57      	adds	r7, r2, #1
   21e74:	4638      	mov	r0, r7
   21e76:	602f      	str	r7, [r5, #0]
        for (j = i + 1; j < n_old_npks; j++)
   21e78:	4281      	cmp	r1, r0
   21e7a:	d101      	bne.n	21e80 <maxim_remove_close_peaks+0x38>
   21e7c:	463a      	mov	r2, r7
   21e7e:	e7f0      	b.n	21e62 <maxim_remove_close_peaks+0x1a>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
   21e80:	f1b2 3fff 	cmp.w	r2, #4294967295
   21e84:	bf18      	it	ne
   21e86:	f854 c022 	ldrne.w	ip, [r4, r2, lsl #2]
   21e8a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   21e8e:	bf08      	it	eq
   21e90:	4694      	moveq	ip, r2
   21e92:	eba3 030c 	sub.w	r3, r3, ip
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   21e96:	42b3      	cmp	r3, r6
   21e98:	dc01      	bgt.n	21e9e <maxim_remove_close_peaks+0x56>
   21e9a:	459e      	cmp	lr, r3
   21e9c:	dd08      	ble.n	21eb0 <maxim_remove_close_peaks+0x68>
                pn_locs[(*pn_npks)++] = pn_locs[j];
   21e9e:	f8d5 c000 	ldr.w	ip, [r5]
   21ea2:	f10c 0301 	add.w	r3, ip, #1
   21ea6:	602b      	str	r3, [r5, #0]
   21ea8:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   21eac:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        for (j = i + 1; j < n_old_npks; j++)
   21eb0:	3001      	adds	r0, #1
   21eb2:	e7e1      	b.n	21e78 <maxim_remove_close_peaks+0x30>

00021eb4 <maxim_find_peaks>:
{
   21eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   21eb6:	9e06      	ldr	r6, [sp, #24]
   21eb8:	9600      	str	r6, [sp, #0]
{
   21eba:	4605      	mov	r5, r0
   21ebc:	460c      	mov	r4, r1
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   21ebe:	f7ff ff61 	bl	21d84 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
   21ec2:	9b07      	ldr	r3, [sp, #28]
   21ec4:	4628      	mov	r0, r5
   21ec6:	f7ff ffbf 	bl	21e48 <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
   21eca:	6822      	ldr	r2, [r4, #0]
   21ecc:	9b08      	ldr	r3, [sp, #32]
   21ece:	429a      	cmp	r2, r3
   21ed0:	bfd4      	ite	le
   21ed2:	6022      	strle	r2, [r4, #0]
   21ed4:	6023      	strgt	r3, [r4, #0]
}
   21ed6:	b002      	add	sp, #8
   21ed8:	bd70      	pop	{r4, r5, r6, pc}

00021eda <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   21eda:	2301      	movs	r3, #1
   21edc:	fa03 f101 	lsl.w	r1, r3, r1
   21ee0:	68c3      	ldr	r3, [r0, #12]
   21ee2:	681b      	ldr	r3, [r3, #0]
   21ee4:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   21ee6:	bf18      	it	ne
   21ee8:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   21eec:	b112      	cbz	r2, 21ef4 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   21eee:	6883      	ldr	r3, [r0, #8]
   21ef0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   21ef2:	4718      	bx	r3
   21ef4:	6883      	ldr	r3, [r0, #8]
   21ef6:	691b      	ldr	r3, [r3, #16]
   21ef8:	e7fb      	b.n	21ef2 <gpio_pin_set+0x18>

00021efa <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   21efa:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   21efc:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   21efe:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   21f00:	6883      	ldr	r3, [r0, #8]
   21f02:	f44f 7200 	mov.w	r2, #512	; 0x200
   21f06:	681b      	ldr	r3, [r3, #0]
   21f08:	4798      	blx	r3
	if (ret != 0) {
   21f0a:	b930      	cbnz	r0, 21f1a <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21f0c:	2301      	movs	r3, #1
   21f0e:	fa03 f104 	lsl.w	r1, r3, r4
   21f12:	682b      	ldr	r3, [r5, #0]
   21f14:	ea23 0301 	bic.w	r3, r3, r1
   21f18:	602b      	str	r3, [r5, #0]
}
   21f1a:	bd38      	pop	{r3, r4, r5, pc}

00021f1c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   21f1c:	4601      	mov	r1, r0
   21f1e:	f240 30e7 	movw	r0, #999	; 0x3e7
   21f22:	b508      	push	{r3, lr}
   21f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21f28:	2300      	movs	r3, #0
   21f2a:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   21f2e:	1449      	asrs	r1, r1, #17
   21f30:	f7de fffa 	bl	f28 <__aeabi_uldivmod>
}
   21f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   21f38:	f7fe be4e 	b.w	20bd8 <z_impl_k_sleep>

00021f3c <SetBrightness>:
{
   21f3c:	b510      	push	{r4, lr}
   21f3e:	4604      	mov	r4, r0
	WriteComm(0x51);
   21f40:	2051      	movs	r0, #81	; 0x51
   21f42:	f7e1 fff5 	bl	3f30 <WriteComm>
	WriteData(value);
   21f46:	b2e0      	uxtb	r0, r4
}
   21f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	WriteData(value);
   21f4c:	f7e2 b828 	b.w	3fa0 <WriteData>

00021f50 <BlockWrite>:
{
   21f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f52:	4607      	mov	r7, r0
	WriteComm(0x2A);
   21f54:	202a      	movs	r0, #42	; 0x2a
{
   21f56:	460e      	mov	r6, r1
   21f58:	4615      	mov	r5, r2
   21f5a:	461c      	mov	r4, r3
	WriteComm(0x2A);
   21f5c:	f7e1 ffe8 	bl	3f30 <WriteComm>
	WriteData(Xstart >> 8);
   21f60:	f3c7 2007 	ubfx	r0, r7, #8, #8
   21f64:	f7e2 f81c 	bl	3fa0 <WriteData>
	WriteData(Xstart);
   21f68:	b2f8      	uxtb	r0, r7
   21f6a:	f7e2 f819 	bl	3fa0 <WriteData>
	WriteData(Xend >> 8);
   21f6e:	f3c6 2007 	ubfx	r0, r6, #8, #8
   21f72:	f7e2 f815 	bl	3fa0 <WriteData>
	WriteData(Xend);
   21f76:	b2f0      	uxtb	r0, r6
   21f78:	f7e2 f812 	bl	3fa0 <WriteData>
	WriteComm(0x2B);
   21f7c:	202b      	movs	r0, #43	; 0x2b
   21f7e:	f7e1 ffd7 	bl	3f30 <WriteComm>
	WriteData(Ystart >> 8);
   21f82:	f3c5 2007 	ubfx	r0, r5, #8, #8
   21f86:	f7e2 f80b 	bl	3fa0 <WriteData>
	WriteData(Ystart);
   21f8a:	b2e8      	uxtb	r0, r5
   21f8c:	f7e2 f808 	bl	3fa0 <WriteData>
	WriteData(Yend >> 8);
   21f90:	f3c4 2007 	ubfx	r0, r4, #8, #8
   21f94:	f7e2 f804 	bl	3fa0 <WriteData>
	WriteData(Yend);
   21f98:	b2e0      	uxtb	r0, r4
   21f9a:	f7e2 f801 	bl	3fa0 <WriteData>
}
   21f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	WriteComm(0x2c);
   21fa2:	202c      	movs	r0, #44	; 0x2c
   21fa4:	f7e1 bfc4 	b.w	3f30 <WriteComm>

00021fa8 <resetDisplay>:
	WriteComm(0x01);
   21fa8:	2001      	movs	r0, #1
   21faa:	f7e1 bfc1 	b.w	3f30 <WriteComm>

00021fae <setDisplay>:
{
   21fae:	b508      	push	{r3, lr}
	WriteComm(0xFE);
   21fb0:	20fe      	movs	r0, #254	; 0xfe
   21fb2:	f7e1 ffbd 	bl	3f30 <WriteComm>
	WriteData(0x01);
   21fb6:	2001      	movs	r0, #1
   21fb8:	f7e1 fff2 	bl	3fa0 <WriteData>
	WriteComm(0x04);
   21fbc:	2004      	movs	r0, #4
   21fbe:	f7e1 ffb7 	bl	3f30 <WriteComm>
	WriteData(0xA0);
   21fc2:	20a0      	movs	r0, #160	; 0xa0
   21fc4:	f7e1 ffec 	bl	3fa0 <WriteData>
	WriteComm(0x70);
   21fc8:	2070      	movs	r0, #112	; 0x70
   21fca:	f7e1 ffb1 	bl	3f30 <WriteComm>
	WriteData(0x55);
   21fce:	2055      	movs	r0, #85	; 0x55
   21fd0:	f7e1 ffe6 	bl	3fa0 <WriteData>
	WriteComm(0xFE);
   21fd4:	20fe      	movs	r0, #254	; 0xfe
   21fd6:	f7e1 ffab 	bl	3f30 <WriteComm>
	WriteData(0x0A);
   21fda:	200a      	movs	r0, #10
   21fdc:	f7e1 ffe0 	bl	3fa0 <WriteData>
	WriteComm(0x29);
   21fe0:	2029      	movs	r0, #41	; 0x29
   21fe2:	f7e1 ffa5 	bl	3f30 <WriteComm>
	WriteData(0x10);
   21fe6:	2010      	movs	r0, #16
   21fe8:	f7e1 ffda 	bl	3fa0 <WriteData>
	WriteComm(0xFE);
   21fec:	20fe      	movs	r0, #254	; 0xfe
   21fee:	f7e1 ff9f 	bl	3f30 <WriteComm>
	WriteData(0x05);
   21ff2:	2005      	movs	r0, #5
   21ff4:	f7e1 ffd4 	bl	3fa0 <WriteData>
	WriteComm(0x05);
   21ff8:	2005      	movs	r0, #5
   21ffa:	f7e1 ff99 	bl	3f30 <WriteComm>
	WriteData(0x00);
   21ffe:	2000      	movs	r0, #0
   22000:	f7e1 ffce 	bl	3fa0 <WriteData>
	WriteComm(0xFE);
   22004:	20fe      	movs	r0, #254	; 0xfe
   22006:	f7e1 ff93 	bl	3f30 <WriteComm>
	WriteData(0x00);
   2200a:	2000      	movs	r0, #0
   2200c:	f7e1 ffc8 	bl	3fa0 <WriteData>
	WriteComm(0x51);
   22010:	2051      	movs	r0, #81	; 0x51
   22012:	f7e1 ff8d 	bl	3f30 <WriteComm>
	WriteData(0xaf);
   22016:	20af      	movs	r0, #175	; 0xaf
   22018:	f7e1 ffc2 	bl	3fa0 <WriteData>
	WriteComm(0x53);
   2201c:	2053      	movs	r0, #83	; 0x53
   2201e:	f7e1 ff87 	bl	3f30 <WriteComm>
	WriteData(0x10);
   22022:	2010      	movs	r0, #16
   22024:	f7e1 ffbc 	bl	3fa0 <WriteData>
	WriteComm(0x53);
   22028:	2053      	movs	r0, #83	; 0x53
   2202a:	f7e1 ff81 	bl	3f30 <WriteComm>
	WriteData(0x20);
   2202e:	2020      	movs	r0, #32
   22030:	f7e1 ffb6 	bl	3fa0 <WriteData>
	WriteComm(0x35);
   22034:	2035      	movs	r0, #53	; 0x35
   22036:	f7e1 ff7b 	bl	3f30 <WriteComm>
	WriteData(0x00);
   2203a:	2000      	movs	r0, #0
   2203c:	f7e1 ffb0 	bl	3fa0 <WriteData>
	WriteComm(0x3A);
   22040:	203a      	movs	r0, #58	; 0x3a
   22042:	f7e1 ff75 	bl	3f30 <WriteComm>
	WriteData(0x55); //RGB565
   22046:	2055      	movs	r0, #85	; 0x55
   22048:	f7e1 ffaa 	bl	3fa0 <WriteData>
	WriteComm(0x2A);
   2204c:	202a      	movs	r0, #42	; 0x2a
   2204e:	f7e1 ff6f 	bl	3f30 <WriteComm>
	WriteData(0x00);
   22052:	2000      	movs	r0, #0
   22054:	f7e1 ffa4 	bl	3fa0 <WriteData>
	WriteData(0x10);
   22058:	2010      	movs	r0, #16
   2205a:	f7e1 ffa1 	bl	3fa0 <WriteData>
	WriteData(0x01);
   2205e:	2001      	movs	r0, #1
   22060:	f7e1 ff9e 	bl	3fa0 <WriteData>
	WriteData(0x7F);
   22064:	207f      	movs	r0, #127	; 0x7f
   22066:	f7e1 ff9b 	bl	3fa0 <WriteData>
	WriteComm(0x2B);
   2206a:	202b      	movs	r0, #43	; 0x2b
   2206c:	f7e1 ff60 	bl	3f30 <WriteComm>
	WriteData(0x00);
   22070:	2000      	movs	r0, #0
   22072:	f7e1 ff95 	bl	3fa0 <WriteData>
	WriteData(0x00);
   22076:	2000      	movs	r0, #0
   22078:	f7e1 ff92 	bl	3fa0 <WriteData>
	WriteData(0x01);
   2207c:	2001      	movs	r0, #1
   2207e:	f7e1 ff8f 	bl	3fa0 <WriteData>
	WriteData(0xBF);
   22082:	20bf      	movs	r0, #191	; 0xbf
   22084:	f7e1 ff8c 	bl	3fa0 <WriteData>
	WriteComm(0x11);
   22088:	2011      	movs	r0, #17
   2208a:	f7e1 ff51 	bl	3f30 <WriteComm>
	k_msleep(480);
   2208e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   22092:	f7ff ff43 	bl	21f1c <k_msleep.isra.0>
	WriteComm(0x29);
   22096:	2029      	movs	r0, #41	; 0x29
   22098:	f7e1 ff4a 	bl	3f30 <WriteComm>
}
   2209c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_msleep(80);
   220a0:	2050      	movs	r0, #80	; 0x50
   220a2:	f7ff bf3b 	b.w	21f1c <k_msleep.isra.0>

000220a6 <ToOrd>:

//ascii 32~90(!~Z), (32~47)�ո�~/,(48~57)0~9,(58~64):~@,(65~126)A~~
//ord 0~95, (48~57)0~9,(65~126)A~z,(33~47)!~/,(58~64):~@
unsigned char ToOrd(unsigned char ch)
{
	if (ch < 32) {
   220a6:	281f      	cmp	r0, #31
{
   220a8:	4603      	mov	r3, r0
	if (ch < 32) {
   220aa:	d916      	bls.n	220da <ToOrd+0x34>
		ch = 95;
	} else if ((ch >= 32) && (ch <= 47)) //(32~47)�ո�~/
   220ac:	f1a0 0220 	sub.w	r2, r0, #32
   220b0:	2a0f      	cmp	r2, #15
   220b2:	d802      	bhi.n	220ba <ToOrd+0x14>
	{
		ch = (ch - 32) + 10 + 62;
   220b4:	3328      	adds	r3, #40	; 0x28
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
	{
		ch = ch - 48;
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
	{
		ch = (ch - 58) + 10 + 62 + 16;
   220b6:	b2d8      	uxtb	r0, r3
   220b8:	4770      	bx	lr
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
   220ba:	3830      	subs	r0, #48	; 0x30
   220bc:	b2c0      	uxtb	r0, r0
   220be:	2809      	cmp	r0, #9
   220c0:	d90c      	bls.n	220dc <ToOrd+0x36>
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
   220c2:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
   220c6:	2a06      	cmp	r2, #6
   220c8:	d801      	bhi.n	220ce <ToOrd+0x28>
		ch = (ch - 58) + 10 + 62 + 16;
   220ca:	331e      	adds	r3, #30
   220cc:	e7f3      	b.n	220b6 <ToOrd+0x10>
	} else if ((ch >= 65) && (ch <= 126)) //(65~126)A~~
   220ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   220d2:	2a3d      	cmp	r2, #61	; 0x3d
   220d4:	d801      	bhi.n	220da <ToOrd+0x34>
	{
		ch = (ch - 65) + 10;
   220d6:	3b37      	subs	r3, #55	; 0x37
   220d8:	e7ed      	b.n	220b6 <ToOrd+0x10>
		ch = 95;
   220da:	205f      	movs	r0, #95	; 0x5f
	} else if (ch > 126) {
		ch = 95;
	}
	return ch;
}
   220dc:	4770      	bx	lr

000220de <DispStr>:
{
   220de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   220e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   220e6:	460d      	mov	r5, r1
   220e8:	4614      	mov	r4, r2
   220ea:	461f      	mov	r7, r3
   220ec:	1e46      	subs	r6, r0, #1
	while (!(*str == '\0')) {
   220ee:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   220f2:	b94a      	cbnz	r2, 22108 <DispStr+0x2a>
	BlockWrite(0, COL - 1, 0, ROW - 1);
   220f4:	f240 13bf 	movw	r3, #447	; 0x1bf
   220f8:	f240 116f 	movw	r1, #367	; 0x16f
   220fc:	4610      	mov	r0, r2
}
   220fe:	b002      	add	sp, #8
   22100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	BlockWrite(0, COL - 1, 0, ROW - 1);
   22104:	f7ff bf24 	b.w	21f50 <BlockWrite>
		DispOneChar(ToOrd(*str++), Xstart, Ystart, TextColor,
   22108:	4610      	mov	r0, r2
   2210a:	f7ff ffcc 	bl	220a6 <ToOrd>
   2210e:	4629      	mov	r1, r5
   22110:	4622      	mov	r2, r4
   22112:	f8cd 8000 	str.w	r8, [sp]
   22116:	463b      	mov	r3, r7
   22118:	f7e2 f8c6 	bl	42a8 <DispOneChar>
		if (Xstart > ((COL - 1) - FONT_W)) {
   2211c:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
			Ystart = Ystart + FONT_H;
   22120:	bf26      	itte	cs
   22122:	3415      	addcs	r4, #21
			Xstart = 0;
   22124:	2500      	movcs	r5, #0
			Xstart = Xstart + FONT_W;
   22126:	3510      	addcc	r5, #16
			Ystart = 0;
   22128:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
   2212c:	bf88      	it	hi
   2212e:	2400      	movhi	r4, #0
   22130:	e7dd      	b.n	220ee <DispStr+0x10>

00022132 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   22132:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   22134:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   22136:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   22138:	6883      	ldr	r3, [r0, #8]
   2213a:	f240 2201 	movw	r2, #513	; 0x201
   2213e:	681b      	ldr	r3, [r3, #0]
   22140:	4798      	blx	r3
	if (ret != 0) {
   22142:	b928      	cbnz	r0, 22150 <gpio_pin_configure.constprop.0+0x1e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22144:	2301      	movs	r3, #1
   22146:	fa03 f104 	lsl.w	r1, r3, r4
   2214a:	682b      	ldr	r3, [r5, #0]
   2214c:	430b      	orrs	r3, r1
   2214e:	602b      	str	r3, [r5, #0]
}
   22150:	bd38      	pop	{r3, r4, r5, pc}

00022152 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22152:	2301      	movs	r3, #1
   22154:	fa03 f101 	lsl.w	r1, r3, r1
   22158:	68c3      	ldr	r3, [r0, #12]
   2215a:	681b      	ldr	r3, [r3, #0]
   2215c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2215e:	bf18      	it	ne
   22160:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   22164:	b112      	cbz	r2, 2216c <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   22166:	6883      	ldr	r3, [r0, #8]
   22168:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2216a:	4718      	bx	r3
   2216c:	6883      	ldr	r3, [r0, #8]
   2216e:	691b      	ldr	r3, [r3, #16]
   22170:	e7fb      	b.n	2216a <gpio_pin_set.isra.0+0x18>

00022172 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   22172:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   22174:	2364      	movs	r3, #100	; 0x64
{
   22176:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   22178:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   2217a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2217c:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   22180:	b111      	cbz	r1, 22188 <u8_to_dec+0x16>
   22182:	3d01      	subs	r5, #1
   22184:	d101      	bne.n	2218a <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   22186:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   22188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2218a:	429a      	cmp	r2, r3
		digit = value / divisor;
   2218c:	fbb2 f7f3 	udiv	r7, r2, r3
   22190:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22192:	d202      	bcs.n	2219a <u8_to_dec+0x28>
   22194:	2b01      	cmp	r3, #1
   22196:	d000      	beq.n	2219a <u8_to_dec+0x28>
   22198:	b130      	cbz	r0, 221a8 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   2219a:	3630      	adds	r6, #48	; 0x30
			buflen--;
   2219c:	3901      	subs	r1, #1
			num_digits++;
   2219e:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   221a0:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   221a4:	b2c9      	uxtb	r1, r1
			num_digits++;
   221a6:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   221a8:	fb03 2217 	mls	r2, r3, r7, r2
   221ac:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   221ae:	fbb3 f3fc 	udiv	r3, r3, ip
   221b2:	e7e5      	b.n	22180 <u8_to_dec+0xe>

000221b4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   221b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   221b8:	b2db      	uxtb	r3, r3
   221ba:	2b09      	cmp	r3, #9
   221bc:	d802      	bhi.n	221c4 <char2hex+0x10>
		*x = c - '0';
   221be:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   221c0:	2000      	movs	r0, #0
   221c2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   221c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   221c8:	2b05      	cmp	r3, #5
   221ca:	d802      	bhi.n	221d2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   221cc:	3857      	subs	r0, #87	; 0x57
   221ce:	7008      	strb	r0, [r1, #0]
   221d0:	e7f6      	b.n	221c0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   221d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   221d6:	2b05      	cmp	r3, #5
   221d8:	d801      	bhi.n	221de <char2hex+0x2a>
		*x = c - 'A' + 10;
   221da:	3837      	subs	r0, #55	; 0x37
   221dc:	e7f7      	b.n	221ce <char2hex+0x1a>
		return -EINVAL;
   221de:	f06f 0015 	mvn.w	r0, #21
}
   221e2:	4770      	bx	lr

000221e4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   221e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   221e6:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   221e8:	f001 0001 	and.w	r0, r1, #1
   221ec:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   221f0:	429d      	cmp	r5, r3
   221f2:	ea4f 0651 	mov.w	r6, r1, lsr #1
   221f6:	d903      	bls.n	22200 <hex2bin+0x1c>
		return 0;
   221f8:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   221fa:	4628      	mov	r0, r5
   221fc:	b003      	add	sp, #12
   221fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   22200:	b158      	cbz	r0, 2221a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   22202:	7820      	ldrb	r0, [r4, #0]
   22204:	f10d 0107 	add.w	r1, sp, #7
   22208:	f7ff ffd4 	bl	221b4 <char2hex>
   2220c:	2800      	cmp	r0, #0
   2220e:	dbf3      	blt.n	221f8 <hex2bin+0x14>
		buf[0] = dec;
   22210:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22214:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   22218:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2221a:	3401      	adds	r4, #1
   2221c:	4416      	add	r6, r2
   2221e:	42b2      	cmp	r2, r6
   22220:	d0eb      	beq.n	221fa <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   22222:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   22226:	f10d 0107 	add.w	r1, sp, #7
   2222a:	f7ff ffc3 	bl	221b4 <char2hex>
   2222e:	2800      	cmp	r0, #0
   22230:	dbe2      	blt.n	221f8 <hex2bin+0x14>
		buf[i] = dec << 4;
   22232:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22236:	011b      	lsls	r3, r3, #4
   22238:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2223a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2223e:	f7ff ffb9 	bl	221b4 <char2hex>
   22242:	2800      	cmp	r0, #0
   22244:	dbd8      	blt.n	221f8 <hex2bin+0x14>
		buf[i] += dec;
   22246:	7813      	ldrb	r3, [r2, #0]
   22248:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2224c:	440b      	add	r3, r1
   2224e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22252:	e7e4      	b.n	2221e <hex2bin+0x3a>

00022254 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   22254:	4603      	mov	r3, r0
   22256:	b140      	cbz	r0, 2226a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22258:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2225a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2225e:	2a02      	cmp	r2, #2
   22260:	d006      	beq.n	22270 <sys_notify_validate+0x1c>
   22262:	2a03      	cmp	r2, #3
   22264:	d004      	beq.n	22270 <sys_notify_validate+0x1c>
   22266:	2a01      	cmp	r2, #1
   22268:	d005      	beq.n	22276 <sys_notify_validate+0x22>
		return -EINVAL;
   2226a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2226e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   22270:	681a      	ldr	r2, [r3, #0]
   22272:	2a00      	cmp	r2, #0
   22274:	d0f9      	beq.n	2226a <sys_notify_validate+0x16>
		notify->result = 0;
   22276:	2000      	movs	r0, #0
   22278:	6098      	str	r0, [r3, #8]
   2227a:	4770      	bx	lr

0002227c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2227c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2227e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   22282:	2a02      	cmp	r2, #2
{
   22284:	b510      	push	{r4, lr}
   22286:	4603      	mov	r3, r0
	notify->result = res;
   22288:	6081      	str	r1, [r0, #8]
	switch (method) {
   2228a:	d00a      	beq.n	222a2 <sys_notify_finalize+0x26>
   2228c:	2a03      	cmp	r2, #3
   2228e:	d10b      	bne.n	222a8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   22290:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   22292:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22294:	2200      	movs	r2, #0
   22296:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   22298:	b108      	cbz	r0, 2229e <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   2229a:	f7ff f88b 	bl	213b4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2229e:	4620      	mov	r0, r4
   222a0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   222a2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   222a4:	2400      	movs	r4, #0
		break;
   222a6:	e7f5      	b.n	22294 <sys_notify_finalize+0x18>
	switch (method) {
   222a8:	2400      	movs	r4, #0
   222aa:	4620      	mov	r0, r4
   222ac:	e7f2      	b.n	22294 <sys_notify_finalize+0x18>

000222ae <arch_printk_char_out>:
}
   222ae:	2000      	movs	r0, #0
   222b0:	4770      	bx	lr

000222b2 <str_out>:
{
   222b2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   222b4:	688a      	ldr	r2, [r1, #8]
   222b6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   222b8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   222ba:	b114      	cbz	r4, 222c2 <str_out+0x10>
   222bc:	684b      	ldr	r3, [r1, #4]
   222be:	4293      	cmp	r3, r2
   222c0:	dc01      	bgt.n	222c6 <str_out+0x14>
		ctx->count++;
   222c2:	608d      	str	r5, [r1, #8]
}
   222c4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   222c6:	3b01      	subs	r3, #1
   222c8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   222ca:	bf08      	it	eq
   222cc:	2200      	moveq	r2, #0
   222ce:	608d      	str	r5, [r1, #8]
   222d0:	bf0c      	ite	eq
   222d2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   222d4:	54a0      	strbne	r0, [r4, r2]
   222d6:	e7f5      	b.n	222c4 <str_out+0x12>

000222d8 <printk>:
{
   222d8:	b40f      	push	{r0, r1, r2, r3}
   222da:	b507      	push	{r0, r1, r2, lr}
   222dc:	a904      	add	r1, sp, #16
   222de:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   222e2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   222e4:	f7e2 f918 	bl	4518 <vprintk>
}
   222e8:	b003      	add	sp, #12
   222ea:	f85d eb04 	ldr.w	lr, [sp], #4
   222ee:	b004      	add	sp, #16
   222f0:	4770      	bx	lr

000222f2 <snprintk>:
{
   222f2:	b40c      	push	{r2, r3}
   222f4:	b507      	push	{r0, r1, r2, lr}
   222f6:	ab04      	add	r3, sp, #16
   222f8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   222fc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   222fe:	f7e2 f919 	bl	4534 <vsnprintk>
}
   22302:	b003      	add	sp, #12
   22304:	f85d eb04 	ldr.w	lr, [sp], #4
   22308:	b002      	add	sp, #8
   2230a:	4770      	bx	lr

0002230c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2230c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2230e:	f013 0307 	ands.w	r3, r3, #7
   22312:	d105      	bne.n	22320 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22314:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   22316:	2b00      	cmp	r3, #0
   22318:	bf0c      	ite	eq
   2231a:	2000      	moveq	r0, #0
   2231c:	2003      	movne	r0, #3
   2231e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   22320:	2b02      	cmp	r3, #2
   22322:	d105      	bne.n	22330 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22324:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   22326:	2b00      	cmp	r3, #0
   22328:	bf14      	ite	ne
   2232a:	2000      	movne	r0, #0
   2232c:	2004      	moveq	r0, #4
   2232e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   22330:	2b01      	cmp	r3, #1
   22332:	d105      	bne.n	22340 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22334:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   22336:	2b00      	cmp	r3, #0
   22338:	bf0c      	ite	eq
   2233a:	2000      	moveq	r0, #0
   2233c:	2005      	movne	r0, #5
   2233e:	4770      	bx	lr
	int evt = EVT_NOP;
   22340:	2000      	movs	r0, #0
}
   22342:	4770      	bx	lr

00022344 <notify_one>:
{
   22344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22348:	460d      	mov	r5, r1
   2234a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2234c:	4619      	mov	r1, r3
   2234e:	1d28      	adds	r0, r5, #4
{
   22350:	4690      	mov	r8, r2
   22352:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22354:	f7ff ff92 	bl	2227c <sys_notify_finalize>
	if (cb) {
   22358:	4604      	mov	r4, r0
   2235a:	b138      	cbz	r0, 2236c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2235c:	4633      	mov	r3, r6
   2235e:	4642      	mov	r2, r8
   22360:	4629      	mov	r1, r5
   22362:	4638      	mov	r0, r7
   22364:	46a4      	mov	ip, r4
}
   22366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2236a:	4760      	bx	ip
}
   2236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022370 <transition_complete>:
{
   22370:	b410      	push	{r4}
	__asm__ volatile(
   22372:	f04f 0420 	mov.w	r4, #32
   22376:	f3ef 8211 	mrs	r2, BASEPRI
   2237a:	f384 8811 	msr	BASEPRI, r4
   2237e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   22382:	6141      	str	r1, [r0, #20]
}
   22384:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   22386:	2101      	movs	r1, #1
   22388:	f7e2 b8e8 	b.w	455c <process_event>

0002238c <validate_args>:
{
   2238c:	b510      	push	{r4, lr}
   2238e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   22390:	b140      	cbz	r0, 223a4 <validate_args+0x18>
   22392:	b139      	cbz	r1, 223a4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   22394:	1d08      	adds	r0, r1, #4
   22396:	f7ff ff5d 	bl	22254 <sys_notify_validate>
	if ((rv == 0)
   2239a:	b928      	cbnz	r0, 223a8 <validate_args+0x1c>
	    && ((cli->notify.flags
   2239c:	68a3      	ldr	r3, [r4, #8]
   2239e:	f033 0303 	bics.w	r3, r3, #3
   223a2:	d001      	beq.n	223a8 <validate_args+0x1c>
		rv = -EINVAL;
   223a4:	f06f 0015 	mvn.w	r0, #21
}
   223a8:	bd10      	pop	{r4, pc}

000223aa <onoff_manager_init>:
{
   223aa:	b538      	push	{r3, r4, r5, lr}
   223ac:	460c      	mov	r4, r1
	if ((mgr == NULL)
   223ae:	4605      	mov	r5, r0
   223b0:	b158      	cbz	r0, 223ca <onoff_manager_init+0x20>
	    || (transitions == NULL)
   223b2:	b151      	cbz	r1, 223ca <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   223b4:	680b      	ldr	r3, [r1, #0]
   223b6:	b143      	cbz	r3, 223ca <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   223b8:	684b      	ldr	r3, [r1, #4]
   223ba:	b133      	cbz	r3, 223ca <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   223bc:	221c      	movs	r2, #28
   223be:	2100      	movs	r1, #0
   223c0:	f002 fc71 	bl	24ca6 <memset>
   223c4:	612c      	str	r4, [r5, #16]
	return 0;
   223c6:	2000      	movs	r0, #0
}
   223c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   223ca:	f06f 0015 	mvn.w	r0, #21
   223ce:	e7fb      	b.n	223c8 <onoff_manager_init+0x1e>

000223d0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   223d0:	b570      	push	{r4, r5, r6, lr}
   223d2:	4604      	mov	r4, r0
   223d4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   223d6:	f7ff ffd9 	bl	2238c <validate_args>

	if (rv < 0) {
   223da:	1e05      	subs	r5, r0, #0
   223dc:	db31      	blt.n	22442 <onoff_request+0x72>
   223de:	f04f 0320 	mov.w	r3, #32
   223e2:	f3ef 8111 	mrs	r1, BASEPRI
   223e6:	f383 8811 	msr	BASEPRI, r3
   223ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   223ee:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   223f0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   223f2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   223f6:	42ab      	cmp	r3, r5
   223f8:	f000 0207 	and.w	r2, r0, #7
   223fc:	d02e      	beq.n	2245c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   223fe:	2a02      	cmp	r2, #2
   22400:	d10e      	bne.n	22420 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   22402:	3301      	adds	r3, #1
   22404:	8363      	strh	r3, [r4, #26]
	rv = state;
   22406:	4615      	mov	r5, r2
		notify = true;
   22408:	2301      	movs	r3, #1
	__asm__ volatile(
   2240a:	f381 8811 	msr	BASEPRI, r1
   2240e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   22412:	b1b3      	cbz	r3, 22442 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   22414:	2300      	movs	r3, #0
   22416:	4631      	mov	r1, r6
   22418:	4620      	mov	r0, r4
   2241a:	f7ff ff93 	bl	22344 <notify_one>
   2241e:	e010      	b.n	22442 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   22420:	0783      	lsls	r3, r0, #30
   22422:	d001      	beq.n	22428 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   22424:	2a06      	cmp	r2, #6
   22426:	d10e      	bne.n	22446 <onoff_request+0x76>
	parent->next = child;
   22428:	2300      	movs	r3, #0
   2242a:	6033      	str	r3, [r6, #0]
	return list->tail;
   2242c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2242e:	b993      	cbnz	r3, 22456 <onoff_request+0x86>
	list->head = node;
   22430:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   22434:	4615      	mov	r5, r2
   22436:	b962      	cbnz	r2, 22452 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   22438:	460a      	mov	r2, r1
   2243a:	4620      	mov	r0, r4
   2243c:	2102      	movs	r1, #2
   2243e:	f7e2 f88d 	bl	455c <process_event>
		}
	}

	return rv;
}
   22442:	4628      	mov	r0, r5
   22444:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   22446:	2a05      	cmp	r2, #5
   22448:	bf0c      	ite	eq
   2244a:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   2244e:	f06f 0504 	mvnne.w	r5, #4
   22452:	2300      	movs	r3, #0
   22454:	e7d9      	b.n	2240a <onoff_request+0x3a>
	parent->next = child;
   22456:	601e      	str	r6, [r3, #0]
	list->tail = node;
   22458:	6066      	str	r6, [r4, #4]
}
   2245a:	e7eb      	b.n	22434 <onoff_request+0x64>
		rv = -EAGAIN;
   2245c:	f06f 050a 	mvn.w	r5, #10
   22460:	e7f7      	b.n	22452 <onoff_request+0x82>

00022462 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   22462:	b510      	push	{r4, lr}
	__asm__ volatile(
   22464:	f04f 0320 	mov.w	r3, #32
   22468:	f3ef 8211 	mrs	r2, BASEPRI
   2246c:	f383 8811 	msr	BASEPRI, r3
   22470:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22474:	8b04      	ldrh	r4, [r0, #24]
   22476:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2247a:	2c02      	cmp	r4, #2
   2247c:	d00a      	beq.n	22494 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2247e:	2c01      	cmp	r4, #1
   22480:	bf0c      	ite	eq
   22482:	f06f 0004 	mvneq.w	r0, #4
   22486:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   2248a:	f382 8811 	msr	BASEPRI, r2
   2248e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   22492:	e008      	b.n	224a6 <onoff_release+0x44>
	mgr->refs -= 1U;
   22494:	8b43      	ldrh	r3, [r0, #26]
   22496:	3b01      	subs	r3, #1
   22498:	b29b      	uxth	r3, r3
   2249a:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2249c:	b923      	cbnz	r3, 224a8 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2249e:	4621      	mov	r1, r4
   224a0:	f7e2 f85c 	bl	455c <process_event>
	int rv = state;
   224a4:	4620      	mov	r0, r4
}
   224a6:	bd10      	pop	{r4, pc}
	int rv = state;
   224a8:	4620      	mov	r0, r4
   224aa:	e7ee      	b.n	2248a <onoff_release+0x28>

000224ac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   224ac:	4604      	mov	r4, r0
   224ae:	b508      	push	{r3, lr}
   224b0:	4608      	mov	r0, r1
   224b2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   224b4:	461a      	mov	r2, r3
   224b6:	47a0      	blx	r4
	return z_impl_k_current_get();
   224b8:	f7fe fba8 	bl	20c0c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   224bc:	f7e5 fc9c 	bl	7df8 <z_impl_k_thread_abort>

000224c0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   224c0:	b510      	push	{r4, lr}
   224c2:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   224c4:	f04f 33ff 	mov.w	r3, #4294967295
   224c8:	f04f 32ff 	mov.w	r2, #4294967295
   224cc:	4620      	mov	r0, r4
   224ce:	f7fd ffe7 	bl	204a0 <z_impl_k_queue_get>
   224d2:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   224d4:	2800      	cmp	r0, #0
   224d6:	d0f5      	beq.n	224c4 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   224d8:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   224da:	6842      	ldr	r2, [r0, #4]
   224dc:	f3bf 8f5b 	dmb	ish
   224e0:	e853 1f00 	ldrex	r1, [r3]
   224e4:	f021 0c01 	bic.w	ip, r1, #1
   224e8:	e843 ce00 	strex	lr, ip, [r3]
   224ec:	f1be 0f00 	cmp.w	lr, #0
   224f0:	d1f6      	bne.n	224e0 <z_work_q_main+0x20>
   224f2:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   224f6:	07cb      	lsls	r3, r1, #31
   224f8:	d500      	bpl.n	224fc <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   224fa:	4790      	blx	r2
	z_impl_k_yield();
   224fc:	f7fe fae4 	bl	20ac8 <z_impl_k_yield>
   22500:	e7e0      	b.n	224c4 <z_work_q_main+0x4>

00022502 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   22502:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   22504:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   22508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2250c:	bf2c      	ite	cs
   2250e:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   22512:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   22516:	4770      	bx	lr

00022518 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   22518:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   2251c:	6880      	ldr	r0, [r0, #8]
   2251e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   22522:	bf2c      	ite	cs
   22524:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   22528:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2252c:	4770      	bx	lr

0002252e <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   2252e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   22530:	2201      	movs	r2, #1
   22532:	f7ff ffe6 	bl	22502 <chunk_field>
}
   22536:	40d0      	lsrs	r0, r2
   22538:	bd08      	pop	{r3, pc}

0002253a <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   2253a:	6883      	ldr	r3, [r0, #8]
   2253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   22540:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   22544:	d308      	bcc.n	22558 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   22546:	684b      	ldr	r3, [r1, #4]
		if (used) {
   22548:	b11a      	cbz	r2, 22552 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2254a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2254e:	604b      	str	r3, [r1, #4]
   22550:	4770      	bx	lr
   22552:	f023 0301 	bic.w	r3, r3, #1
   22556:	e7fa      	b.n	2254e <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22558:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   2255a:	b11a      	cbz	r2, 22564 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2255c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22560:	804b      	strh	r3, [r1, #2]
		}
	}
}
   22562:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22564:	f023 0301 	bic.w	r3, r3, #1
   22568:	e7fa      	b.n	22560 <set_chunk_used+0x26>

0002256a <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2256a:	0053      	lsls	r3, r2, #1
   2256c:	2201      	movs	r2, #1
   2256e:	f7ff bfd3 	b.w	22518 <chunk_set>

00022572 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   22572:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   22576:	bf2c      	ite	cs
   22578:	2008      	movcs	r0, #8
   2257a:	2004      	movcc	r0, #4
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2257c:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2257e:	3008      	adds	r0, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   22580:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   22584:	fab0 f080 	clz	r0, r0
}
   22588:	f1c0 001f 	rsb	r0, r0, #31
   2258c:	4770      	bx	lr

0002258e <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   2258e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22592:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   22594:	2203      	movs	r2, #3
   22596:	460e      	mov	r6, r1
   22598:	4604      	mov	r4, r0
   2259a:	f7ff ffb2 	bl	22502 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   2259e:	4286      	cmp	r6, r0
   225a0:	4605      	mov	r5, r0
   225a2:	f107 0804 	add.w	r8, r7, #4
   225a6:	d10b      	bne.n	225c0 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   225a8:	2301      	movs	r3, #1
   225aa:	fa03 f707 	lsl.w	r7, r3, r7
   225ae:	68e3      	ldr	r3, [r4, #12]
   225b0:	ea23 0307 	bic.w	r3, r3, r7
   225b4:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   225b6:	2300      	movs	r3, #0
   225b8:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   225bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   225c0:	4631      	mov	r1, r6
   225c2:	2202      	movs	r2, #2
   225c4:	4620      	mov	r0, r4
   225c6:	f7ff ff9c 	bl	22502 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   225ca:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   225cc:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   225ce:	4601      	mov	r1, r0
		b->next = second;
   225d0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   225d4:	4620      	mov	r0, r4
   225d6:	2203      	movs	r2, #3
   225d8:	f7ff ff9e 	bl	22518 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   225dc:	4633      	mov	r3, r6
   225de:	4629      	mov	r1, r5
   225e0:	4620      	mov	r0, r4
   225e2:	2202      	movs	r2, #2
}
   225e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   225e8:	f7ff bf96 	b.w	22518 <chunk_set>

000225ec <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   225ec:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->len);
   225ee:	6886      	ldr	r6, [r0, #8]
   225f0:	460d      	mov	r5, r1
   225f2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   225f4:	f7ff ff9b 	bl	2252e <chunk_size>
   225f8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   225fc:	4601      	mov	r1, r0
   225fe:	d301      	bcc.n	22604 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   22600:	2801      	cmp	r0, #1
   22602:	d009      	beq.n	22618 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   22604:	4630      	mov	r0, r6
   22606:	f7ff ffb4 	bl	22572 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   2260a:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2260c:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2260e:	4620      	mov	r0, r4
	}
}
   22610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   22614:	f7ff bfbb 	b.w	2258e <free_list_remove_bidx>
}
   22618:	bd70      	pop	{r4, r5, r6, pc}

0002261a <alloc_chunk>:
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
	int bi = bucket_idx(h, sz);
   2261a:	6883      	ldr	r3, [r0, #8]
{
   2261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22620:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   22622:	4618      	mov	r0, r3
{
   22624:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   22626:	f7ff ffa4 	bl	22572 <bucket_idx.isra.0>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   2262a:	4619      	mov	r1, r3
	int bi = bucket_idx(h, sz);
   2262c:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   2262e:	4618      	mov	r0, r3
   22630:	f7ff ff9f 	bl	22572 <bucket_idx.isra.0>
   22634:	42a8      	cmp	r0, r5
   22636:	da03      	bge.n	22640 <alloc_chunk+0x26>
		return 0;
   22638:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2263a:	4630      	mov	r0, r6
   2263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   22640:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   22644:	f8da 9010 	ldr.w	r9, [sl, #16]
   22648:	f1b9 0f00 	cmp.w	r9, #0
   2264c:	d019      	beq.n	22682 <alloc_chunk+0x68>
   2264e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   22650:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   22654:	4620      	mov	r0, r4
   22656:	4631      	mov	r1, r6
   22658:	f7ff ff69 	bl	2252e <chunk_size>
   2265c:	4540      	cmp	r0, r8
   2265e:	d305      	bcc.n	2266c <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   22660:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   22662:	4631      	mov	r1, r6
   22664:	4620      	mov	r0, r4
   22666:	f7ff ff92 	bl	2258e <free_list_remove_bidx>
		return c;
   2266a:	e7e6      	b.n	2263a <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   2266c:	2203      	movs	r2, #3
   2266e:	4631      	mov	r1, r6
   22670:	4620      	mov	r0, r4
   22672:	f7ff ff46 	bl	22502 <chunk_field>
		} while (--i && b->next != first);
   22676:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   22678:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   2267c:	d001      	beq.n	22682 <alloc_chunk+0x68>
   2267e:	4581      	cmp	r9, r0
   22680:	d1e6      	bne.n	22650 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   22682:	68e3      	ldr	r3, [r4, #12]
   22684:	3501      	adds	r5, #1
   22686:	f04f 32ff 	mov.w	r2, #4294967295
   2268a:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   2268c:	401a      	ands	r2, r3
   2268e:	d0d3      	beq.n	22638 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   22690:	fa92 f2a2 	rbit	r2, r2
   22694:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   22698:	1d13      	adds	r3, r2, #4
   2269a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   2269e:	e7e0      	b.n	22662 <alloc_chunk+0x48>

000226a0 <split_chunks>:
{
   226a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226a4:	4614      	mov	r4, r2
   226a6:	4605      	mov	r5, r0
   226a8:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   226aa:	f7ff ff40 	bl	2252e <chunk_size>
	size_t lsz = rc - lc;
   226ae:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   226b2:	1b37      	subs	r7, r6, r4
   226b4:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   226b6:	4642      	mov	r2, r8
   226b8:	4631      	mov	r1, r6
   226ba:	4628      	mov	r0, r5
   226bc:	f7ff ff55 	bl	2256a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   226c0:	463a      	mov	r2, r7
   226c2:	4621      	mov	r1, r4
   226c4:	4628      	mov	r0, r5
   226c6:	f7ff ff50 	bl	2256a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   226ca:	4643      	mov	r3, r8
   226cc:	2200      	movs	r2, #0
   226ce:	4621      	mov	r1, r4
   226d0:	4628      	mov	r0, r5
   226d2:	f7ff ff21 	bl	22518 <chunk_set>
	return c + chunk_size(h, c);
   226d6:	4621      	mov	r1, r4
   226d8:	4628      	mov	r0, r5
   226da:	f7ff ff28 	bl	2252e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   226de:	463b      	mov	r3, r7
   226e0:	1821      	adds	r1, r4, r0
   226e2:	2200      	movs	r2, #0
   226e4:	4628      	mov	r0, r5
}
   226e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   226ea:	f7ff bf15 	b.w	22518 <chunk_set>

000226ee <merge_chunks>:
{
   226ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226f2:	4616      	mov	r6, r2
   226f4:	4604      	mov	r4, r0
   226f6:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   226f8:	f7ff ff19 	bl	2252e <chunk_size>
   226fc:	4631      	mov	r1, r6
   226fe:	4605      	mov	r5, r0
   22700:	4620      	mov	r0, r4
   22702:	f7ff ff14 	bl	2252e <chunk_size>
   22706:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   22708:	462a      	mov	r2, r5
   2270a:	4639      	mov	r1, r7
   2270c:	4620      	mov	r0, r4
   2270e:	f7ff ff2c 	bl	2256a <set_chunk_size>
	return c + chunk_size(h, c);
   22712:	4631      	mov	r1, r6
   22714:	4620      	mov	r0, r4
   22716:	f7ff ff0a 	bl	2252e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2271a:	462b      	mov	r3, r5
   2271c:	1831      	adds	r1, r6, r0
   2271e:	2200      	movs	r2, #0
   22720:	4620      	mov	r0, r4
}
   22722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22726:	f7ff bef7 	b.w	22518 <chunk_set>

0002272a <free_list_add>:
{
   2272a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->len);
   2272e:	6886      	ldr	r6, [r0, #8]
   22730:	460d      	mov	r5, r1
   22732:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   22734:	f7ff fefb 	bl	2252e <chunk_size>
   22738:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2273c:	4601      	mov	r1, r0
   2273e:	d301      	bcc.n	22744 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   22740:	2801      	cmp	r0, #1
   22742:	d033      	beq.n	227ac <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   22744:	4630      	mov	r0, r6
   22746:	f7ff ff14 	bl	22572 <bucket_idx.isra.0>
	if (b->next == 0U) {
   2274a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2274e:	6916      	ldr	r6, [r2, #16]
   22750:	b99e      	cbnz	r6, 2277a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   22752:	2301      	movs	r3, #1
   22754:	fa03 f000 	lsl.w	r0, r3, r0
   22758:	68e3      	ldr	r3, [r4, #12]
   2275a:	4303      	orrs	r3, r0
   2275c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2275e:	4629      	mov	r1, r5
		b->next = c;
   22760:	6115      	str	r5, [r2, #16]
   22762:	462b      	mov	r3, r5
   22764:	2202      	movs	r2, #2
   22766:	4620      	mov	r0, r4
   22768:	f7ff fed6 	bl	22518 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2276c:	2203      	movs	r2, #3
   2276e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   22770:	4620      	mov	r0, r4
}
   22772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22776:	f7ff becf 	b.w	22518 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2277a:	2202      	movs	r2, #2
   2277c:	4631      	mov	r1, r6
   2277e:	4620      	mov	r0, r4
   22780:	f7ff febf 	bl	22502 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   22784:	4629      	mov	r1, r5
   22786:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   22788:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2278a:	4620      	mov	r0, r4
   2278c:	f7ff fec4 	bl	22518 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   22790:	2203      	movs	r2, #3
   22792:	4633      	mov	r3, r6
   22794:	4629      	mov	r1, r5
   22796:	4620      	mov	r0, r4
   22798:	f7ff febe 	bl	22518 <chunk_set>
   2279c:	4639      	mov	r1, r7
   2279e:	462b      	mov	r3, r5
   227a0:	4620      	mov	r0, r4
   227a2:	f7ff feb9 	bl	22518 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   227a6:	2202      	movs	r2, #2
   227a8:	4631      	mov	r1, r6
   227aa:	e7e1      	b.n	22770 <free_list_add+0x46>
   227ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000227b0 <free_chunk>:
{
   227b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   227b2:	460c      	mov	r4, r1
   227b4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   227b6:	f7ff feba 	bl	2252e <chunk_size>
   227ba:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   227bc:	2201      	movs	r2, #1
   227be:	4631      	mov	r1, r6
   227c0:	4628      	mov	r0, r5
   227c2:	f7ff fe9e 	bl	22502 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   227c6:	07c3      	lsls	r3, r0, #31
   227c8:	d40c      	bmi.n	227e4 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   227ca:	4631      	mov	r1, r6
   227cc:	4628      	mov	r0, r5
   227ce:	f7ff ff0d 	bl	225ec <free_list_remove>
	return c + chunk_size(h, c);
   227d2:	4621      	mov	r1, r4
   227d4:	4628      	mov	r0, r5
   227d6:	f7ff feaa 	bl	2252e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   227da:	4621      	mov	r1, r4
   227dc:	1822      	adds	r2, r4, r0
   227de:	4628      	mov	r0, r5
   227e0:	f7ff ff85 	bl	226ee <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   227e4:	2200      	movs	r2, #0
   227e6:	4621      	mov	r1, r4
   227e8:	4628      	mov	r0, r5
   227ea:	f7ff fe8a 	bl	22502 <chunk_field>
   227ee:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   227f0:	2201      	movs	r2, #1
   227f2:	4639      	mov	r1, r7
   227f4:	4628      	mov	r0, r5
   227f6:	f7ff fe84 	bl	22502 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   227fa:	ea10 0602 	ands.w	r6, r0, r2
   227fe:	d113      	bne.n	22828 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   22800:	4639      	mov	r1, r7
   22802:	4628      	mov	r0, r5
   22804:	f7ff fef2 	bl	225ec <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   22808:	4621      	mov	r1, r4
   2280a:	4632      	mov	r2, r6
   2280c:	4628      	mov	r0, r5
   2280e:	f7ff fe78 	bl	22502 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   22812:	4622      	mov	r2, r4
   22814:	1a21      	subs	r1, r4, r0
   22816:	4628      	mov	r0, r5
   22818:	f7ff ff69 	bl	226ee <merge_chunks>
   2281c:	4621      	mov	r1, r4
   2281e:	4632      	mov	r2, r6
   22820:	4628      	mov	r0, r5
   22822:	f7ff fe6e 	bl	22502 <chunk_field>
   22826:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   22828:	4621      	mov	r1, r4
   2282a:	4628      	mov	r0, r5
}
   2282c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   22830:	f7ff bf7b 	b.w	2272a <free_list_add>

00022834 <sys_heap_free>:
{
   22834:	b510      	push	{r4, lr}
	if (mem == NULL) {
   22836:	b191      	cbz	r1, 2285e <sys_heap_free+0x2a>
   22838:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   2283a:	6883      	ldr	r3, [r0, #8]
   2283c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22840:	bf2c      	ite	cs
   22842:	2408      	movcs	r4, #8
   22844:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22846:	1b0c      	subs	r4, r1, r4
   22848:	1a24      	subs	r4, r4, r0
   2284a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   2284c:	4621      	mov	r1, r4
   2284e:	2200      	movs	r2, #0
   22850:	f7ff fe73 	bl	2253a <set_chunk_used>
	free_chunk(h, c);
   22854:	4621      	mov	r1, r4
}
   22856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   2285a:	f7ff bfa9 	b.w	227b0 <free_chunk>
}
   2285e:	bd10      	pop	{r4, pc}

00022860 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   22860:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   22862:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   22864:	b909      	cbnz	r1, 2286a <sys_heap_alloc+0xa>
		return NULL;
   22866:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   22868:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   2286a:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2286c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   22870:	d9f9      	bls.n	22866 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   22872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22876:	bf2c      	ite	cs
   22878:	2208      	movcs	r2, #8
   2287a:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2287c:	1dcc      	adds	r4, r1, #7
   2287e:	4414      	add	r4, r2
   22880:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   22882:	4621      	mov	r1, r4
   22884:	4630      	mov	r0, r6
   22886:	f7ff fec8 	bl	2261a <alloc_chunk>
	if (c == 0U) {
   2288a:	4605      	mov	r5, r0
   2288c:	2800      	cmp	r0, #0
   2288e:	d0ea      	beq.n	22866 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   22890:	4601      	mov	r1, r0
   22892:	4630      	mov	r0, r6
   22894:	f7ff fe4b 	bl	2252e <chunk_size>
   22898:	42a0      	cmp	r0, r4
   2289a:	d909      	bls.n	228b0 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   2289c:	442c      	add	r4, r5
   2289e:	4629      	mov	r1, r5
   228a0:	4630      	mov	r0, r6
   228a2:	4622      	mov	r2, r4
   228a4:	f7ff fefc 	bl	226a0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   228a8:	4621      	mov	r1, r4
   228aa:	4630      	mov	r0, r6
   228ac:	f7ff ff3d 	bl	2272a <free_list_add>
	set_chunk_used(h, c, true);
   228b0:	4629      	mov	r1, r5
   228b2:	4630      	mov	r0, r6
   228b4:	2201      	movs	r2, #1
   228b6:	f7ff fe40 	bl	2253a <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   228ba:	68b3      	ldr	r3, [r6, #8]
   228bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   228c0:	bf2c      	ite	cs
   228c2:	2308      	movcs	r3, #8
   228c4:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   228c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   228ca:	4428      	add	r0, r5
	return chunk_mem(h, c);
   228cc:	e7cc      	b.n	22868 <sys_heap_alloc+0x8>

000228ce <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   228ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   228d2:	6806      	ldr	r6, [r0, #0]
{
   228d4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   228d6:	424a      	negs	r2, r1
   228d8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   228dc:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->len);
   228e0:	68b5      	ldr	r5, [r6, #8]
{
   228e2:	460b      	mov	r3, r1
	if (align != rewind) {
   228e4:	d00f      	beq.n	22906 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   228e6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   228ea:	bf34      	ite	cc
   228ec:	2104      	movcc	r1, #4
   228ee:	2108      	movcs	r1, #8
   228f0:	42b9      	cmp	r1, r7
   228f2:	460a      	mov	r2, r1
   228f4:	46b9      	mov	r9, r7
   228f6:	bf28      	it	cs
   228f8:	463a      	movcs	r2, r7
		align -= rewind;
   228fa:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   228fc:	b994      	cbnz	r4, 22924 <sys_heap_aligned_alloc+0x56>
		return NULL;
   228fe:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   22900:	4628      	mov	r0, r5
   22902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22906:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2290a:	bf34      	ite	cc
   2290c:	2204      	movcc	r2, #4
   2290e:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   22910:	4291      	cmp	r1, r2
   22912:	d804      	bhi.n	2291e <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   22914:	4621      	mov	r1, r4
}
   22916:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2291a:	f7ff bfa1 	b.w	22860 <sys_heap_alloc>
		rewind = 0;
   2291e:	f04f 0900 	mov.w	r9, #0
   22922:	e7eb      	b.n	228fc <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   22924:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   22928:	d9e9      	bls.n	228fe <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2292a:	1de1      	adds	r1, r4, #7
   2292c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   22930:	4439      	add	r1, r7
   22932:	bf2c      	ite	cs
   22934:	2308      	movcs	r3, #8
   22936:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22938:	1a89      	subs	r1, r1, r2
   2293a:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2293c:	08c9      	lsrs	r1, r1, #3
   2293e:	4630      	mov	r0, r6
   22940:	f7ff fe6b 	bl	2261a <alloc_chunk>
	if (c0 == 0) {
   22944:	4680      	mov	r8, r0
   22946:	2800      	cmp	r0, #0
   22948:	d0d9      	beq.n	228fe <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   2294a:	68b3      	ldr	r3, [r6, #8]
   2294c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22950:	bf2c      	ite	cs
   22952:	2308      	movcs	r3, #8
   22954:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   22956:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   2295a:	441d      	add	r5, r3
   2295c:	1e7a      	subs	r2, r7, #1
   2295e:	4435      	add	r5, r6
   22960:	427f      	negs	r7, r7
   22962:	4415      	add	r5, r2
   22964:	403d      	ands	r5, r7
   22966:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2296a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2296c:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2296e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22970:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22972:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   22976:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   22978:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2297c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   22980:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   22984:	d208      	bcs.n	22998 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   22986:	4601      	mov	r1, r0
   22988:	463a      	mov	r2, r7
   2298a:	4630      	mov	r0, r6
   2298c:	f7ff fe88 	bl	226a0 <split_chunks>
		free_list_add(h, c0);
   22990:	4641      	mov	r1, r8
   22992:	4630      	mov	r0, r6
   22994:	f7ff fec9 	bl	2272a <free_list_add>
	return c + chunk_size(h, c);
   22998:	4639      	mov	r1, r7
   2299a:	4630      	mov	r0, r6
   2299c:	f7ff fdc7 	bl	2252e <chunk_size>
   229a0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   229a2:	4284      	cmp	r4, r0
   229a4:	d208      	bcs.n	229b8 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   229a6:	4639      	mov	r1, r7
   229a8:	4630      	mov	r0, r6
   229aa:	4622      	mov	r2, r4
   229ac:	f7ff fe78 	bl	226a0 <split_chunks>
		free_list_add(h, c_end);
   229b0:	4621      	mov	r1, r4
   229b2:	4630      	mov	r0, r6
   229b4:	f7ff feb9 	bl	2272a <free_list_add>
	set_chunk_used(h, c, true);
   229b8:	2201      	movs	r2, #1
   229ba:	4639      	mov	r1, r7
   229bc:	4630      	mov	r0, r6
   229be:	f7ff fdbc 	bl	2253a <set_chunk_used>
	return mem;
   229c2:	e79d      	b.n	22900 <sys_heap_aligned_alloc+0x32>

000229c4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   229c4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   229c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229ca:	bf2c      	ite	cs
   229cc:	2408      	movcs	r4, #8
   229ce:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   229d0:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   229d2:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   229d4:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   229d6:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   229da:	f024 0407 	bic.w	r4, r4, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   229de:	2200      	movs	r2, #0
   229e0:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   229e2:	1ba4      	subs	r4, r4, r6
	heap->heap = h;
   229e4:	6006      	str	r6, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   229e6:	08e4      	lsrs	r4, r4, #3
	h->chunk0_hdr_area = 0;
   229e8:	e9c6 2300 	strd	r2, r3, [r6]
	h->len = buf_sz;
	h->avail_buckets = 0;
   229ec:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   229ee:	4621      	mov	r1, r4
	h->len = buf_sz;
   229f0:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   229f2:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   229f4:	4620      	mov	r0, r4
   229f6:	f7ff fdbc 	bl	22572 <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   229fa:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   229fc:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   229fe:	1c41      	adds	r1, r0, #1
   22a00:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   22a02:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   22a06:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   22a08:	428b      	cmp	r3, r1
   22a0a:	db28      	blt.n	22a5e <sys_heap_init+0x9a>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   22a0c:	462a      	mov	r2, r5
   22a0e:	4630      	mov	r0, r6
   22a10:	2100      	movs	r1, #0
   22a12:	f7ff fdaa 	bl	2256a <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   22a16:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   22a18:	4630      	mov	r0, r6
   22a1a:	2201      	movs	r2, #1
   22a1c:	2100      	movs	r1, #0
   22a1e:	f7ff fd8c 	bl	2253a <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   22a22:	463a      	mov	r2, r7
   22a24:	4629      	mov	r1, r5
   22a26:	f7ff fda0 	bl	2256a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   22a2a:	462b      	mov	r3, r5
   22a2c:	2200      	movs	r2, #0
   22a2e:	4629      	mov	r1, r5
   22a30:	4630      	mov	r0, r6
   22a32:	f7ff fd71 	bl	22518 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   22a36:	4621      	mov	r1, r4
   22a38:	4630      	mov	r0, r6
   22a3a:	f7ff fd96 	bl	2256a <set_chunk_size>
   22a3e:	463b      	mov	r3, r7
   22a40:	4621      	mov	r1, r4
   22a42:	4630      	mov	r0, r6
   22a44:	2200      	movs	r2, #0
   22a46:	f7ff fd67 	bl	22518 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   22a4a:	4621      	mov	r1, r4
   22a4c:	4630      	mov	r0, r6
   22a4e:	2201      	movs	r2, #1
   22a50:	f7ff fd73 	bl	2253a <set_chunk_used>

	free_list_add(h, chunk0_size);
   22a54:	4629      	mov	r1, r5
}
   22a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   22a5a:	f7ff be66 	b.w	2272a <free_list_add>
		h->buckets[i].next = 0;
   22a5e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   22a62:	3301      	adds	r3, #1
   22a64:	e7d0      	b.n	22a08 <sys_heap_init+0x44>

00022a66 <_ldiv5>:
	uint32_t v_lo = *v;
   22a66:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   22a6a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   22a6c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   22a70:	fba2 2403 	umull	r2, r4, r2, r3
   22a74:	18d5      	adds	r5, r2, r3
   22a76:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   22a7a:	fba1 1303 	umull	r1, r3, r1, r3
   22a7e:	1852      	adds	r2, r2, r1
   22a80:	eb44 0403 	adc.w	r4, r4, r3
   22a84:	1952      	adds	r2, r2, r5
   22a86:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   22a8a:	1889      	adds	r1, r1, r2
   22a8c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   22a90:	e9c0 1300 	strd	r1, r3, [r0]
}
   22a94:	bd30      	pop	{r4, r5, pc}

00022a96 <_get_digit>:
	if (*digit_count > 0) {
   22a96:	680a      	ldr	r2, [r1, #0]
   22a98:	2a00      	cmp	r2, #0
{
   22a9a:	b510      	push	{r4, lr}
   22a9c:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   22a9e:	dd0f      	ble.n	22ac0 <_get_digit+0x2a>
		--*digit_count;
   22aa0:	3a01      	subs	r2, #1
   22aa2:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   22aa4:	681a      	ldr	r2, [r3, #0]
   22aa6:	6844      	ldr	r4, [r0, #4]
   22aa8:	200a      	movs	r0, #10
   22aaa:	fba2 1200 	umull	r1, r2, r2, r0
   22aae:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   22ab2:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   22ab4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   22ab8:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   22abc:	3030      	adds	r0, #48	; 0x30
}
   22abe:	bd10      	pop	{r4, pc}
		rval = '0';
   22ac0:	2030      	movs	r0, #48	; 0x30
   22ac2:	e7fc      	b.n	22abe <_get_digit+0x28>

00022ac4 <encode_uint>:
{
   22ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ac8:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   22aca:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   22acc:	2b6f      	cmp	r3, #111	; 0x6f
{
   22ace:	4680      	mov	r8, r0
   22ad0:	460f      	mov	r7, r1
   22ad2:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22ad4:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   22ad8:	d029      	beq.n	22b2e <encode_uint+0x6a>
   22ada:	d824      	bhi.n	22b26 <encode_uint+0x62>
		return 16;
   22adc:	2b58      	cmp	r3, #88	; 0x58
   22ade:	bf14      	ite	ne
   22ae0:	260a      	movne	r6, #10
   22ae2:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   22ae4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   22ae8:	4632      	mov	r2, r6
   22aea:	2300      	movs	r3, #0
   22aec:	4640      	mov	r0, r8
   22aee:	4639      	mov	r1, r7
   22af0:	f7de fa1a 	bl	f28 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22af4:	2a09      	cmp	r2, #9
   22af6:	b2d4      	uxtb	r4, r2
   22af8:	d81e      	bhi.n	22b38 <encode_uint+0x74>
   22afa:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   22afc:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22afe:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   22b00:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22b04:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   22b08:	d301      	bcc.n	22b0e <encode_uint+0x4a>
   22b0a:	45d1      	cmp	r9, sl
   22b0c:	d811      	bhi.n	22b32 <encode_uint+0x6e>
	if (conv->flag_hash) {
   22b0e:	782b      	ldrb	r3, [r5, #0]
   22b10:	069b      	lsls	r3, r3, #26
   22b12:	d505      	bpl.n	22b20 <encode_uint+0x5c>
		if (radix == 8) {
   22b14:	2e08      	cmp	r6, #8
   22b16:	d115      	bne.n	22b44 <encode_uint+0x80>
			conv->altform_0 = true;
   22b18:	78ab      	ldrb	r3, [r5, #2]
   22b1a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   22b1e:	70ab      	strb	r3, [r5, #2]
}
   22b20:	4648      	mov	r0, r9
   22b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   22b26:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   22b2a:	2b70      	cmp	r3, #112	; 0x70
   22b2c:	e7d7      	b.n	22ade <encode_uint+0x1a>
	switch (specifier) {
   22b2e:	2608      	movs	r6, #8
   22b30:	e7d8      	b.n	22ae4 <encode_uint+0x20>
		value /= radix;
   22b32:	4680      	mov	r8, r0
   22b34:	460f      	mov	r7, r1
   22b36:	e7d7      	b.n	22ae8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22b38:	f1bb 0f19 	cmp.w	fp, #25
   22b3c:	bf94      	ite	ls
   22b3e:	3437      	addls	r4, #55	; 0x37
   22b40:	3457      	addhi	r4, #87	; 0x57
   22b42:	e7db      	b.n	22afc <encode_uint+0x38>
		} else if (radix == 16) {
   22b44:	2e10      	cmp	r6, #16
   22b46:	d1eb      	bne.n	22b20 <encode_uint+0x5c>
			conv->altform_0c = true;
   22b48:	78ab      	ldrb	r3, [r5, #2]
   22b4a:	f043 0310 	orr.w	r3, r3, #16
   22b4e:	e7e6      	b.n	22b1e <encode_uint+0x5a>

00022b50 <outs>:
{
   22b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b54:	4607      	mov	r7, r0
   22b56:	4688      	mov	r8, r1
   22b58:	4615      	mov	r5, r2
   22b5a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22b5c:	4614      	mov	r4, r2
   22b5e:	42b4      	cmp	r4, r6
   22b60:	eba4 0005 	sub.w	r0, r4, r5
   22b64:	d302      	bcc.n	22b6c <outs+0x1c>
   22b66:	b93e      	cbnz	r6, 22b78 <outs+0x28>
   22b68:	7823      	ldrb	r3, [r4, #0]
   22b6a:	b12b      	cbz	r3, 22b78 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   22b6c:	f814 0b01 	ldrb.w	r0, [r4], #1
   22b70:	4641      	mov	r1, r8
   22b72:	47b8      	blx	r7
		if (rc < 0) {
   22b74:	2800      	cmp	r0, #0
   22b76:	daf2      	bge.n	22b5e <outs+0xe>
}
   22b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022b7c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED_ZEPHYR_INT_TYPES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22b7c:	4770      	bx	lr

00022b7e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   22b7e:	2300      	movs	r3, #0
	list->head = NULL;
   22b80:	e9c0 3300 	strd	r3, r3, [r0]
}
   22b84:	4770      	bx	lr

00022b86 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   22b86:	6803      	ldr	r3, [r0, #0]
   22b88:	b923      	cbnz	r3, 22b94 <log_list_add_tail+0xe>
		list->head = msg;
   22b8a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   22b8c:	2300      	movs	r3, #0
	list->tail = msg;
   22b8e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   22b90:	600b      	str	r3, [r1, #0]
}
   22b92:	4770      	bx	lr
		list->tail->next = msg;
   22b94:	6843      	ldr	r3, [r0, #4]
   22b96:	6019      	str	r1, [r3, #0]
   22b98:	e7f8      	b.n	22b8c <log_list_add_tail+0x6>

00022b9a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   22b9a:	6800      	ldr	r0, [r0, #0]
   22b9c:	4770      	bx	lr

00022b9e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   22b9e:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   22ba0:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   22ba2:	b108      	cbz	r0, 22ba8 <log_list_head_get+0xa>
		list->head = list->head->next;
   22ba4:	6802      	ldr	r2, [r0, #0]
   22ba6:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   22ba8:	4770      	bx	lr

00022baa <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   22baa:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   22bac:	f7e2 fefa 	bl	59a4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   22bb0:	b118      	cbz	r0, 22bba <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   22bb2:	2301      	movs	r3, #1
   22bb4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   22bb6:	2300      	movs	r3, #0
   22bb8:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   22bba:	bd08      	pop	{r3, pc}

00022bbc <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   22bbc:	f7e4 bb64 	b.w	7288 <z_timer_cycle_get_32>

00022bc0 <dummy_timestamp>:
   22bc0:	2000      	movs	r0, #0
   22bc2:	4770      	bx	lr

00022bc4 <z_log_get_s_mask>:
{
   22bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bc6:	4605      	mov	r5, r0
	uint32_t mask = 0;
   22bc8:	2000      	movs	r0, #0
	uint32_t arg = 0;
   22bca:	4603      	mov	r3, r0
	bool arm = false;
   22bcc:	4602      	mov	r2, r0
				mask |= BIT(arg);
   22bce:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   22bd0:	f815 4b01 	ldrb.w	r4, [r5], #1
   22bd4:	b10c      	cbz	r4, 22bda <z_log_get_s_mask+0x16>
   22bd6:	428b      	cmp	r3, r1
   22bd8:	d300      	bcc.n	22bdc <z_log_get_s_mask+0x18>
}
   22bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   22bdc:	2c25      	cmp	r4, #37	; 0x25
   22bde:	d102      	bne.n	22be6 <z_log_get_s_mask+0x22>
			arm = !arm;
   22be0:	f082 0201 	eor.w	r2, r2, #1
   22be4:	e7f4      	b.n	22bd0 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   22be6:	2a00      	cmp	r2, #0
   22be8:	d0f2      	beq.n	22bd0 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22bea:	f044 0620 	orr.w	r6, r4, #32
   22bee:	3e61      	subs	r6, #97	; 0x61
   22bf0:	2e19      	cmp	r6, #25
   22bf2:	d8ed      	bhi.n	22bd0 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   22bf4:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   22bf6:	bf04      	itt	eq
   22bf8:	fa07 f203 	lsleq.w	r2, r7, r3
   22bfc:	4310      	orreq	r0, r2
			arg++;
   22bfe:	3301      	adds	r3, #1
			arm = false;
   22c00:	2200      	movs	r2, #0
   22c02:	e7e5      	b.n	22bd0 <z_log_get_s_mask+0xc>

00022c04 <log_0>:
{
   22c04:	b538      	push	{r3, r4, r5, lr}
   22c06:	4605      	mov	r5, r0
   22c08:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   22c0a:	f7ff ffce 	bl	22baa <z_log_msg_std_alloc>

	if (msg != NULL) {
   22c0e:	b128      	cbz	r0, 22c1c <log_0+0x18>
		msg->str = str;
   22c10:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   22c12:	4621      	mov	r1, r4
}
   22c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   22c18:	f7e2 be02 	b.w	5820 <msg_finalize>
}
   22c1c:	bd38      	pop	{r3, r4, r5, pc}

00022c1e <log_1>:
{
   22c1e:	b570      	push	{r4, r5, r6, lr}
   22c20:	4606      	mov	r6, r0
   22c22:	460d      	mov	r5, r1
   22c24:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   22c26:	f7ff ffc0 	bl	22baa <z_log_msg_std_alloc>

	if (msg != NULL) {
   22c2a:	b158      	cbz	r0, 22c44 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   22c2c:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   22c2e:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   22c30:	2101      	movs	r1, #1
   22c32:	f361 1207 	bfi	r2, r1, #4, #4
   22c36:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   22c38:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   22c3a:	4621      	mov	r1, r4
}
   22c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   22c40:	f7e2 bdee 	b.w	5820 <msg_finalize>
}
   22c44:	bd70      	pop	{r4, r5, r6, pc}

00022c46 <log_2>:
{
   22c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c4a:	4680      	mov	r8, r0
   22c4c:	460f      	mov	r7, r1
   22c4e:	4616      	mov	r6, r2
   22c50:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   22c52:	f7ff ffaa 	bl	22baa <z_log_msg_std_alloc>

	if (msg != NULL) {
   22c56:	b168      	cbz	r0, 22c74 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   22c58:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   22c5a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   22c5e:	2202      	movs	r2, #2
   22c60:	f362 1307 	bfi	r3, r2, #4, #4
   22c64:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   22c66:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   22c6a:	4629      	mov	r1, r5
}
   22c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   22c70:	f7e2 bdd6 	b.w	5820 <msg_finalize>
}
   22c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022c78 <log_3>:
{
   22c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c7c:	4680      	mov	r8, r0
   22c7e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   22c82:	460f      	mov	r7, r1
   22c84:	4616      	mov	r6, r2
   22c86:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   22c88:	f7ff ff8f 	bl	22baa <z_log_msg_std_alloc>

	if (msg != NULL) {
   22c8c:	b170      	cbz	r0, 22cac <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   22c8e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   22c90:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   22c94:	2203      	movs	r2, #3
   22c96:	f362 1307 	bfi	r3, r2, #4, #4
   22c9a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   22c9c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   22ca0:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   22ca2:	4649      	mov	r1, r9
}
   22ca4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   22ca8:	f7e2 bdba 	b.w	5820 <msg_finalize>
}
   22cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022cb0 <log_n>:
{
   22cb0:	b510      	push	{r4, lr}
   22cb2:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   22cb4:	f000 f8a1 	bl	22dfa <log_msg_create_n>
		if (msg == NULL) {
   22cb8:	b120      	cbz	r0, 22cc4 <log_n+0x14>
		msg_finalize(msg, src_level);
   22cba:	4621      	mov	r1, r4
}
   22cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   22cc0:	f7e2 bdae 	b.w	5820 <msg_finalize>
}
   22cc4:	bd10      	pop	{r4, pc}

00022cc6 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   22cc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22cca:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   22ccc:	8903      	ldrh	r3, [r0, #8]
{
   22cce:	f89d 7020 	ldrb.w	r7, [sp, #32]
   22cd2:	460e      	mov	r6, r1
   22cd4:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   22cd6:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   22cda:	42a2      	cmp	r2, r4
   22cdc:	d803      	bhi.n	22ce6 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   22cde:	2300      	movs	r3, #0
   22ce0:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   22ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   22ce6:	680b      	ldr	r3, [r1, #0]
   22ce8:	4423      	add	r3, r4
   22cea:	4293      	cmp	r3, r2
		*length = available_len - offset;
   22cec:	bf84      	itt	hi
   22cee:	1b13      	subhi	r3, r2, r4
   22cf0:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   22cf2:	2a0c      	cmp	r2, #12
	req_len = *length;
   22cf4:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   22cf8:	d92a      	bls.n	22d50 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   22cfa:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   22cfc:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   22d00:	d82d      	bhi.n	22d5e <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   22d02:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   22d04:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   22d06:	454a      	cmp	r2, r9
   22d08:	bf28      	it	cs
   22d0a:	464a      	movcs	r2, r9
   22d0c:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   22d0e:	4420      	add	r0, r4
		if (put_op) {
   22d10:	b317      	cbz	r7, 22d58 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   22d12:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   22d14:	f001 ff9c 	bl	24c50 <memcpy>
		req_len -= cpy_len;
   22d18:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   22d1c:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   22d1e:	f1b9 0f00 	cmp.w	r9, #0
   22d22:	d0de      	beq.n	22ce2 <log_msg_hexdump_data_op+0x1c>
   22d24:	f1b8 0f00 	cmp.w	r8, #0
   22d28:	d0db      	beq.n	22ce2 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   22d2a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   22d2e:	454d      	cmp	r5, r9
   22d30:	bf28      	it	cs
   22d32:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   22d34:	1d20      	adds	r0, r4, #4
   22d36:	4440      	add	r0, r8
   22d38:	462a      	mov	r2, r5
		if (put_op) {
   22d3a:	b1bf      	cbz	r7, 22d6c <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   22d3c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   22d3e:	f001 ff87 	bl	24c50 <memcpy>
		req_len -= cpy_len;
   22d42:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   22d46:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   22d4a:	442e      	add	r6, r5
		offset = 0;
   22d4c:	2400      	movs	r4, #0
   22d4e:	e7e6      	b.n	22d1e <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   22d50:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   22d52:	f04f 0800 	mov.w	r8, #0
   22d56:	e7d6      	b.n	22d06 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   22d58:	4601      	mov	r1, r0
   22d5a:	4630      	mov	r0, r6
   22d5c:	e7da      	b.n	22d14 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   22d5e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   22d60:	2c1b      	cmp	r4, #27
   22d62:	d9dc      	bls.n	22d1e <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   22d64:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   22d68:	3c1c      	subs	r4, #28
   22d6a:	e7f9      	b.n	22d60 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   22d6c:	4601      	mov	r1, r0
   22d6e:	4630      	mov	r0, r6
   22d70:	e7e5      	b.n	22d3e <log_msg_hexdump_data_op+0x78>

00022d72 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22d72:	3004      	adds	r0, #4
   22d74:	f3bf 8f5b 	dmb	ish
   22d78:	e850 3f00 	ldrex	r3, [r0]
   22d7c:	3301      	adds	r3, #1
   22d7e:	e840 3200 	strex	r2, r3, [r0]
   22d82:	2a00      	cmp	r2, #0
   22d84:	d1f8      	bne.n	22d78 <log_msg_get+0x6>
   22d86:	f3bf 8f5b 	dmb	ish
}
   22d8a:	4770      	bx	lr

00022d8c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   22d8c:	7a40      	ldrb	r0, [r0, #9]
}
   22d8e:	0900      	lsrs	r0, r0, #4
   22d90:	4770      	bx	lr

00022d92 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   22d92:	7a43      	ldrb	r3, [r0, #9]
   22d94:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   22d98:	ea4f 1213 	mov.w	r2, r3, lsr #4
   22d9c:	d216      	bcs.n	22dcc <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   22d9e:	2a03      	cmp	r2, #3
   22da0:	d803      	bhi.n	22daa <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   22da2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22da6:	6940      	ldr	r0, [r0, #20]
   22da8:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   22daa:	2901      	cmp	r1, #1
   22dac:	d803      	bhi.n	22db6 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   22dae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22db2:	6980      	ldr	r0, [r0, #24]
   22db4:	4770      	bx	lr
	cont = msg->payload.ext.next;
   22db6:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   22db8:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   22dba:	2906      	cmp	r1, #6
   22dbc:	d803      	bhi.n	22dc6 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   22dbe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   22dc2:	6848      	ldr	r0, [r1, #4]
   22dc4:	4770      	bx	lr
		cont = cont->next;
   22dc6:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   22dc8:	3907      	subs	r1, #7
		cont = cont->next;
   22dca:	e7f6      	b.n	22dba <log_msg_arg_get+0x28>
		return 0;
   22dcc:	2000      	movs	r0, #0
}
   22dce:	4770      	bx	lr

00022dd0 <log_msg_put>:
{
   22dd0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22dd2:	1d02      	adds	r2, r0, #4
   22dd4:	f3bf 8f5b 	dmb	ish
   22dd8:	e852 1f00 	ldrex	r1, [r2]
   22ddc:	3901      	subs	r1, #1
   22dde:	e842 1c00 	strex	ip, r1, [r2]
   22de2:	f1bc 0f00 	cmp.w	ip, #0
   22de6:	d1f7      	bne.n	22dd8 <log_msg_put+0x8>
   22de8:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   22dec:	685b      	ldr	r3, [r3, #4]
   22dee:	b90b      	cbnz	r3, 22df4 <log_msg_put+0x24>
		msg_free(msg);
   22df0:	f7e2 bdec 	b.w	59cc <msg_free>
}
   22df4:	4770      	bx	lr

00022df6 <log_msg_str_get>:
}
   22df6:	6900      	ldr	r0, [r0, #16]
   22df8:	4770      	bx	lr

00022dfa <log_msg_create_n>:
{
   22dfa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dfe:	4680      	mov	r8, r0
   22e00:	460f      	mov	r7, r1
   22e02:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   22e04:	f7e2 fdce 	bl	59a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   22e08:	4604      	mov	r4, r0
   22e0a:	b358      	cbz	r0, 22e64 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   22e0c:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   22e0e:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   22e12:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   22e14:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   22e16:	f8a0 a008 	strh.w	sl, [r0, #8]
   22e1a:	d90c      	bls.n	22e36 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   22e1c:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   22e1e:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   22e22:	f043 0302 	orr.w	r3, r3, #2
   22e26:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   22e28:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   22e2c:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   22e30:	f1b9 0f00 	cmp.w	r9, #0
   22e34:	dc0e      	bgt.n	22e54 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   22e36:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   22e38:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   22e3c:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22e40:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   22e42:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22e44:	d819      	bhi.n	22e7a <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   22e46:	00aa      	lsls	r2, r5, #2
   22e48:	4639      	mov	r1, r7
   22e4a:	f104 0014 	add.w	r0, r4, #20
   22e4e:	f001 feff 	bl	24c50 <memcpy>
	while (nargs != 0U) {
   22e52:	e007      	b.n	22e64 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   22e54:	f7e2 fda6 	bl	59a4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   22e58:	4606      	mov	r6, r0
   22e5a:	b930      	cbnz	r0, 22e6a <log_msg_create_n+0x70>
			msg_free(msg);
   22e5c:	4620      	mov	r0, r4
   22e5e:	f7e2 fdb5 	bl	59cc <msg_free>
			return NULL;
   22e62:	4634      	mov	r4, r6
}
   22e64:	4620      	mov	r0, r4
   22e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   22e6a:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   22e6e:	f1a9 0907 	sub.w	r9, r9, #7
   22e72:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   22e76:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   22e78:	e7da      	b.n	22e30 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   22e7a:	4639      	mov	r1, r7
   22e7c:	2208      	movs	r2, #8
   22e7e:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   22e82:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   22e86:	f001 fee3 	bl	24c50 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   22e8a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   22e8c:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   22e8e:	2d07      	cmp	r5, #7
   22e90:	462e      	mov	r6, r5
   22e92:	bf28      	it	cs
   22e94:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   22e96:	ea4f 0986 	mov.w	r9, r6, lsl #2
   22e9a:	4639      	mov	r1, r7
   22e9c:	f108 0004 	add.w	r0, r8, #4
   22ea0:	464a      	mov	r2, r9
   22ea2:	f001 fed5 	bl	24c50 <memcpy>
	while (nargs != 0U) {
   22ea6:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   22ea8:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   22eac:	444f      	add	r7, r9
	while (nargs != 0U) {
   22eae:	d1ee      	bne.n	22e8e <log_msg_create_n+0x94>
   22eb0:	e7d8      	b.n	22e64 <log_msg_create_n+0x6a>

00022eb2 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   22eb2:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   22eb4:	2400      	movs	r4, #0
   22eb6:	9400      	str	r4, [sp, #0]
   22eb8:	f7ff ff05 	bl	22cc6 <log_msg_hexdump_data_op>
}
   22ebc:	b002      	add	sp, #8
   22ebe:	bd10      	pop	{r4, pc}

00022ec0 <buffer_write>:
{
   22ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ec2:	4606      	mov	r6, r0
   22ec4:	460d      	mov	r5, r1
   22ec6:	4614      	mov	r4, r2
   22ec8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   22eca:	4621      	mov	r1, r4
   22ecc:	4628      	mov	r0, r5
   22ece:	463a      	mov	r2, r7
   22ed0:	47b0      	blx	r6
	} while (len != 0);
   22ed2:	1a24      	subs	r4, r4, r0
		buf += processed;
   22ed4:	4405      	add	r5, r0
	} while (len != 0);
   22ed6:	d1f8      	bne.n	22eca <buffer_write+0xa>
}
   22ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022eda <std_print>:
{
   22eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ede:	b08e      	sub	sp, #56	; 0x38
   22ee0:	af0e      	add	r7, sp, #56	; 0x38
   22ee2:	4680      	mov	r8, r0
   22ee4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   22ee6:	f7ff ff86 	bl	22df6 <log_msg_str_get>
   22eea:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   22eec:	4640      	mov	r0, r8
   22eee:	f7ff ff4d 	bl	22d8c <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   22ef2:	0083      	lsls	r3, r0, #2
   22ef4:	3307      	adds	r3, #7
   22ef6:	f023 0307 	bic.w	r3, r3, #7
   22efa:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   22efe:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   22f00:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   22f02:	f04f 0900 	mov.w	r9, #0
   22f06:	45d1      	cmp	r9, sl
   22f08:	d116      	bne.n	22f38 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   22f0a:	4640      	mov	r0, r8
   22f0c:	f7ff ff3e 	bl	22d8c <log_msg_nargs_get>
   22f10:	280f      	cmp	r0, #15
   22f12:	d81e      	bhi.n	22f52 <std_print+0x78>
   22f14:	e8df f010 	tbh	[pc, r0, lsl #1]
   22f18:	00200019 	.word	0x00200019
   22f1c:	002d0026 	.word	0x002d0026
   22f20:	00410036 	.word	0x00410036
   22f24:	005d004e 	.word	0x005d004e
   22f28:	0081006e 	.word	0x0081006e
   22f2c:	00ad0096 	.word	0x00ad0096
   22f30:	00e100c6 	.word	0x00e100c6
   22f34:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   22f38:	4649      	mov	r1, r9
   22f3a:	4640      	mov	r0, r8
   22f3c:	f7ff ff29 	bl	22d92 <log_msg_arg_get>
   22f40:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   22f44:	f109 0901 	add.w	r9, r9, #1
   22f48:	e7dd      	b.n	22f06 <std_print+0x2c>
		print_formatted(log_output, str);
   22f4a:	4631      	mov	r1, r6
   22f4c:	4628      	mov	r0, r5
   22f4e:	f7e2 fd7b 	bl	5a48 <print_formatted>
}
   22f52:	46bd      	mov	sp, r7
   22f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   22f58:	6822      	ldr	r2, [r4, #0]
   22f5a:	4631      	mov	r1, r6
   22f5c:	4628      	mov	r0, r5
   22f5e:	f7e2 fd73 	bl	5a48 <print_formatted>
		break;
   22f62:	e7f6      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   22f64:	e9d4 2300 	ldrd	r2, r3, [r4]
   22f68:	4631      	mov	r1, r6
   22f6a:	4628      	mov	r0, r5
   22f6c:	f7e2 fd6c 	bl	5a48 <print_formatted>
		break;
   22f70:	e7ef      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   22f72:	68a3      	ldr	r3, [r4, #8]
   22f74:	9300      	str	r3, [sp, #0]
   22f76:	e9d4 2300 	ldrd	r2, r3, [r4]
   22f7a:	4631      	mov	r1, r6
   22f7c:	4628      	mov	r0, r5
   22f7e:	f7e2 fd63 	bl	5a48 <print_formatted>
		break;
   22f82:	e7e6      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22f84:	68e3      	ldr	r3, [r4, #12]
   22f86:	9301      	str	r3, [sp, #4]
   22f88:	68a3      	ldr	r3, [r4, #8]
   22f8a:	9300      	str	r3, [sp, #0]
   22f8c:	e9d4 2300 	ldrd	r2, r3, [r4]
   22f90:	4631      	mov	r1, r6
   22f92:	4628      	mov	r0, r5
   22f94:	f7e2 fd58 	bl	5a48 <print_formatted>
		break;
   22f98:	e7db      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22f9a:	6923      	ldr	r3, [r4, #16]
   22f9c:	9302      	str	r3, [sp, #8]
   22f9e:	68e3      	ldr	r3, [r4, #12]
   22fa0:	9301      	str	r3, [sp, #4]
   22fa2:	68a3      	ldr	r3, [r4, #8]
   22fa4:	9300      	str	r3, [sp, #0]
   22fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
   22faa:	4631      	mov	r1, r6
   22fac:	4628      	mov	r0, r5
   22fae:	f7e2 fd4b 	bl	5a48 <print_formatted>
		break;
   22fb2:	e7ce      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22fb4:	6963      	ldr	r3, [r4, #20]
   22fb6:	9303      	str	r3, [sp, #12]
   22fb8:	6923      	ldr	r3, [r4, #16]
   22fba:	9302      	str	r3, [sp, #8]
   22fbc:	68e3      	ldr	r3, [r4, #12]
   22fbe:	9301      	str	r3, [sp, #4]
   22fc0:	68a3      	ldr	r3, [r4, #8]
   22fc2:	9300      	str	r3, [sp, #0]
   22fc4:	e9d4 2300 	ldrd	r2, r3, [r4]
   22fc8:	4631      	mov	r1, r6
   22fca:	4628      	mov	r0, r5
   22fcc:	f7e2 fd3c 	bl	5a48 <print_formatted>
		break;
   22fd0:	e7bf      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22fd2:	69a3      	ldr	r3, [r4, #24]
   22fd4:	9304      	str	r3, [sp, #16]
   22fd6:	6963      	ldr	r3, [r4, #20]
   22fd8:	9303      	str	r3, [sp, #12]
   22fda:	6923      	ldr	r3, [r4, #16]
   22fdc:	9302      	str	r3, [sp, #8]
   22fde:	68e3      	ldr	r3, [r4, #12]
   22fe0:	9301      	str	r3, [sp, #4]
   22fe2:	68a3      	ldr	r3, [r4, #8]
   22fe4:	9300      	str	r3, [sp, #0]
   22fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
   22fea:	4631      	mov	r1, r6
   22fec:	4628      	mov	r0, r5
   22fee:	f7e2 fd2b 	bl	5a48 <print_formatted>
		break;
   22ff2:	e7ae      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22ff4:	69e3      	ldr	r3, [r4, #28]
   22ff6:	9305      	str	r3, [sp, #20]
   22ff8:	69a3      	ldr	r3, [r4, #24]
   22ffa:	9304      	str	r3, [sp, #16]
   22ffc:	6963      	ldr	r3, [r4, #20]
   22ffe:	9303      	str	r3, [sp, #12]
   23000:	6923      	ldr	r3, [r4, #16]
   23002:	9302      	str	r3, [sp, #8]
   23004:	68e3      	ldr	r3, [r4, #12]
   23006:	9301      	str	r3, [sp, #4]
   23008:	68a3      	ldr	r3, [r4, #8]
   2300a:	9300      	str	r3, [sp, #0]
   2300c:	e9d4 2300 	ldrd	r2, r3, [r4]
   23010:	4631      	mov	r1, r6
   23012:	4628      	mov	r0, r5
   23014:	f7e2 fd18 	bl	5a48 <print_formatted>
		break;
   23018:	e79b      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2301a:	6a23      	ldr	r3, [r4, #32]
   2301c:	9306      	str	r3, [sp, #24]
   2301e:	69e3      	ldr	r3, [r4, #28]
   23020:	9305      	str	r3, [sp, #20]
   23022:	69a3      	ldr	r3, [r4, #24]
   23024:	9304      	str	r3, [sp, #16]
   23026:	6963      	ldr	r3, [r4, #20]
   23028:	9303      	str	r3, [sp, #12]
   2302a:	6923      	ldr	r3, [r4, #16]
   2302c:	9302      	str	r3, [sp, #8]
   2302e:	68e3      	ldr	r3, [r4, #12]
   23030:	9301      	str	r3, [sp, #4]
   23032:	68a3      	ldr	r3, [r4, #8]
   23034:	9300      	str	r3, [sp, #0]
   23036:	e9d4 2300 	ldrd	r2, r3, [r4]
   2303a:	4631      	mov	r1, r6
   2303c:	4628      	mov	r0, r5
   2303e:	f7e2 fd03 	bl	5a48 <print_formatted>
		break;
   23042:	e786      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23044:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23046:	9307      	str	r3, [sp, #28]
   23048:	6a23      	ldr	r3, [r4, #32]
   2304a:	9306      	str	r3, [sp, #24]
   2304c:	69e3      	ldr	r3, [r4, #28]
   2304e:	9305      	str	r3, [sp, #20]
   23050:	69a3      	ldr	r3, [r4, #24]
   23052:	9304      	str	r3, [sp, #16]
   23054:	6963      	ldr	r3, [r4, #20]
   23056:	9303      	str	r3, [sp, #12]
   23058:	6923      	ldr	r3, [r4, #16]
   2305a:	9302      	str	r3, [sp, #8]
   2305c:	68e3      	ldr	r3, [r4, #12]
   2305e:	9301      	str	r3, [sp, #4]
   23060:	68a3      	ldr	r3, [r4, #8]
   23062:	9300      	str	r3, [sp, #0]
   23064:	e9d4 2300 	ldrd	r2, r3, [r4]
   23068:	4631      	mov	r1, r6
   2306a:	4628      	mov	r0, r5
   2306c:	f7e2 fcec 	bl	5a48 <print_formatted>
		break;
   23070:	e76f      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23074:	9308      	str	r3, [sp, #32]
   23076:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23078:	9307      	str	r3, [sp, #28]
   2307a:	6a23      	ldr	r3, [r4, #32]
   2307c:	9306      	str	r3, [sp, #24]
   2307e:	69e3      	ldr	r3, [r4, #28]
   23080:	9305      	str	r3, [sp, #20]
   23082:	69a3      	ldr	r3, [r4, #24]
   23084:	9304      	str	r3, [sp, #16]
   23086:	6963      	ldr	r3, [r4, #20]
   23088:	9303      	str	r3, [sp, #12]
   2308a:	6923      	ldr	r3, [r4, #16]
   2308c:	9302      	str	r3, [sp, #8]
   2308e:	68e3      	ldr	r3, [r4, #12]
   23090:	9301      	str	r3, [sp, #4]
   23092:	68a3      	ldr	r3, [r4, #8]
   23094:	9300      	str	r3, [sp, #0]
   23096:	e9d4 2300 	ldrd	r2, r3, [r4]
   2309a:	4631      	mov	r1, r6
   2309c:	4628      	mov	r0, r5
   2309e:	f7e2 fcd3 	bl	5a48 <print_formatted>
		break;
   230a2:	e756      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   230a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   230a6:	9309      	str	r3, [sp, #36]	; 0x24
   230a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   230aa:	9308      	str	r3, [sp, #32]
   230ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   230ae:	9307      	str	r3, [sp, #28]
   230b0:	6a23      	ldr	r3, [r4, #32]
   230b2:	9306      	str	r3, [sp, #24]
   230b4:	69e3      	ldr	r3, [r4, #28]
   230b6:	9305      	str	r3, [sp, #20]
   230b8:	69a3      	ldr	r3, [r4, #24]
   230ba:	9304      	str	r3, [sp, #16]
   230bc:	6963      	ldr	r3, [r4, #20]
   230be:	9303      	str	r3, [sp, #12]
   230c0:	6923      	ldr	r3, [r4, #16]
   230c2:	9302      	str	r3, [sp, #8]
   230c4:	68e3      	ldr	r3, [r4, #12]
   230c6:	9301      	str	r3, [sp, #4]
   230c8:	68a3      	ldr	r3, [r4, #8]
   230ca:	9300      	str	r3, [sp, #0]
   230cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   230d0:	4631      	mov	r1, r6
   230d2:	4628      	mov	r0, r5
   230d4:	f7e2 fcb8 	bl	5a48 <print_formatted>
		break;
   230d8:	e73b      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   230da:	6b23      	ldr	r3, [r4, #48]	; 0x30
   230dc:	930a      	str	r3, [sp, #40]	; 0x28
   230de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   230e0:	9309      	str	r3, [sp, #36]	; 0x24
   230e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   230e4:	9308      	str	r3, [sp, #32]
   230e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   230e8:	9307      	str	r3, [sp, #28]
   230ea:	6a23      	ldr	r3, [r4, #32]
   230ec:	9306      	str	r3, [sp, #24]
   230ee:	69e3      	ldr	r3, [r4, #28]
   230f0:	9305      	str	r3, [sp, #20]
   230f2:	69a3      	ldr	r3, [r4, #24]
   230f4:	9304      	str	r3, [sp, #16]
   230f6:	6963      	ldr	r3, [r4, #20]
   230f8:	9303      	str	r3, [sp, #12]
   230fa:	6923      	ldr	r3, [r4, #16]
   230fc:	9302      	str	r3, [sp, #8]
   230fe:	68e3      	ldr	r3, [r4, #12]
   23100:	9301      	str	r3, [sp, #4]
   23102:	68a3      	ldr	r3, [r4, #8]
   23104:	9300      	str	r3, [sp, #0]
   23106:	e9d4 2300 	ldrd	r2, r3, [r4]
   2310a:	4631      	mov	r1, r6
   2310c:	4628      	mov	r0, r5
   2310e:	f7e2 fc9b 	bl	5a48 <print_formatted>
		break;
   23112:	e71e      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23114:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23116:	930b      	str	r3, [sp, #44]	; 0x2c
   23118:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2311a:	930a      	str	r3, [sp, #40]	; 0x28
   2311c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2311e:	9309      	str	r3, [sp, #36]	; 0x24
   23120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23122:	9308      	str	r3, [sp, #32]
   23124:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23126:	9307      	str	r3, [sp, #28]
   23128:	6a23      	ldr	r3, [r4, #32]
   2312a:	9306      	str	r3, [sp, #24]
   2312c:	69e3      	ldr	r3, [r4, #28]
   2312e:	9305      	str	r3, [sp, #20]
   23130:	69a3      	ldr	r3, [r4, #24]
   23132:	9304      	str	r3, [sp, #16]
   23134:	6963      	ldr	r3, [r4, #20]
   23136:	9303      	str	r3, [sp, #12]
   23138:	6923      	ldr	r3, [r4, #16]
   2313a:	9302      	str	r3, [sp, #8]
   2313c:	68e3      	ldr	r3, [r4, #12]
   2313e:	9301      	str	r3, [sp, #4]
   23140:	68a3      	ldr	r3, [r4, #8]
   23142:	9300      	str	r3, [sp, #0]
   23144:	e9d4 2300 	ldrd	r2, r3, [r4]
   23148:	4631      	mov	r1, r6
   2314a:	4628      	mov	r0, r5
   2314c:	f7e2 fc7c 	bl	5a48 <print_formatted>
		break;
   23150:	e6ff      	b.n	22f52 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23154:	930c      	str	r3, [sp, #48]	; 0x30
   23156:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23158:	930b      	str	r3, [sp, #44]	; 0x2c
   2315a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2315c:	930a      	str	r3, [sp, #40]	; 0x28
   2315e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23160:	9309      	str	r3, [sp, #36]	; 0x24
   23162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23164:	9308      	str	r3, [sp, #32]
   23166:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23168:	9307      	str	r3, [sp, #28]
   2316a:	6a23      	ldr	r3, [r4, #32]
   2316c:	9306      	str	r3, [sp, #24]
   2316e:	69e3      	ldr	r3, [r4, #28]
   23170:	9305      	str	r3, [sp, #20]
   23172:	69a3      	ldr	r3, [r4, #24]
   23174:	9304      	str	r3, [sp, #16]
   23176:	6963      	ldr	r3, [r4, #20]
   23178:	9303      	str	r3, [sp, #12]
   2317a:	6923      	ldr	r3, [r4, #16]
   2317c:	9302      	str	r3, [sp, #8]
   2317e:	68e3      	ldr	r3, [r4, #12]
   23180:	9301      	str	r3, [sp, #4]
   23182:	68a3      	ldr	r3, [r4, #8]
   23184:	9300      	str	r3, [sp, #0]
   23186:	e9d4 2300 	ldrd	r2, r3, [r4]
   2318a:	4631      	mov	r1, r6
   2318c:	4628      	mov	r0, r5
   2318e:	f7e2 fc5b 	bl	5a48 <print_formatted>
}
   23192:	e6de      	b.n	22f52 <std_print+0x78>

00023194 <log_output_flush>:
		     log_output->control_block->offset,
   23194:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   23196:	6881      	ldr	r1, [r0, #8]
{
   23198:	b510      	push	{r4, lr}
   2319a:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2319c:	e9d2 2300 	ldrd	r2, r3, [r2]
   231a0:	6800      	ldr	r0, [r0, #0]
   231a2:	f7ff fe8d 	bl	22ec0 <buffer_write>
	log_output->control_block->offset = 0;
   231a6:	6863      	ldr	r3, [r4, #4]
   231a8:	2200      	movs	r2, #0
   231aa:	601a      	str	r2, [r3, #0]
}
   231ac:	bd10      	pop	{r4, pc}

000231ae <out_func>:
{
   231ae:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   231b0:	684b      	ldr	r3, [r1, #4]
   231b2:	681a      	ldr	r2, [r3, #0]
   231b4:	68cb      	ldr	r3, [r1, #12]
   231b6:	429a      	cmp	r2, r3
{
   231b8:	4605      	mov	r5, r0
   231ba:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   231bc:	d102      	bne.n	231c4 <out_func+0x16>
		log_output_flush(out_ctx);
   231be:	4608      	mov	r0, r1
   231c0:	f7ff ffe8 	bl	23194 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   231c4:	6863      	ldr	r3, [r4, #4]
   231c6:	f3bf 8f5b 	dmb	ish
   231ca:	e853 2f00 	ldrex	r2, [r3]
   231ce:	1c51      	adds	r1, r2, #1
   231d0:	e843 1000 	strex	r0, r1, [r3]
   231d4:	2800      	cmp	r0, #0
   231d6:	d1f8      	bne.n	231ca <out_func+0x1c>
   231d8:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   231dc:	68a3      	ldr	r3, [r4, #8]
   231de:	549d      	strb	r5, [r3, r2]
}
   231e0:	2000      	movs	r0, #0
   231e2:	bd38      	pop	{r3, r4, r5, pc}

000231e4 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   231e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   231e8:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   231ec:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   231ee:	4640      	mov	r0, r8
{
   231f0:	461f      	mov	r7, r3
   231f2:	460c      	mov	r4, r1
   231f4:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   231f6:	f001 fced 	bl	24bd4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   231fa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   231fe:	9300      	str	r3, [sp, #0]
   23200:	b280      	uxth	r0, r0
   23202:	e9cd 8001 	strd	r8, r0, [sp, #4]
   23206:	463b      	mov	r3, r7
   23208:	4632      	mov	r2, r6
   2320a:	4621      	mov	r1, r4
   2320c:	4628      	mov	r0, r5
   2320e:	f003 f887 	bl	26320 <bt_gatt_attr_read>
}
   23212:	b004      	add	sp, #16
   23214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023218 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   23218:	6883      	ldr	r3, [r0, #8]
   2321a:	68db      	ldr	r3, [r3, #12]
   2321c:	4718      	bx	r3

0002321e <nvs_flash_rd>:
{
   2321e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   23220:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23222:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   23224:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23226:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   23228:	fa16 f181 	uxtah	r1, r6, r1
   2322c:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   23230:	6884      	ldr	r4, [r0, #8]
   23232:	6824      	ldr	r4, [r4, #0]
   23234:	46a4      	mov	ip, r4
}
   23236:	bc70      	pop	{r4, r5, r6}
   23238:	4760      	bx	ip

0002323a <nvs_flash_block_cmp>:
{
   2323a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2323e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   23240:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23242:	681d      	ldr	r5, [r3, #0]
   23244:	426d      	negs	r5, r5
{
   23246:	b089      	sub	sp, #36	; 0x24
   23248:	4681      	mov	r9, r0
   2324a:	460e      	mov	r6, r1
   2324c:	4617      	mov	r7, r2
	block_size =
   2324e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   23252:	b91c      	cbnz	r4, 2325c <nvs_flash_block_cmp+0x22>
	return 0;
   23254:	4620      	mov	r0, r4
}
   23256:	b009      	add	sp, #36	; 0x24
   23258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2325c:	42ac      	cmp	r4, r5
   2325e:	46a0      	mov	r8, r4
   23260:	bf28      	it	cs
   23262:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   23264:	4643      	mov	r3, r8
   23266:	466a      	mov	r2, sp
   23268:	4631      	mov	r1, r6
   2326a:	4648      	mov	r0, r9
   2326c:	f7ff ffd7 	bl	2321e <nvs_flash_rd>
		if (rc) {
   23270:	2800      	cmp	r0, #0
   23272:	d1f0      	bne.n	23256 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   23274:	4642      	mov	r2, r8
   23276:	4669      	mov	r1, sp
   23278:	4638      	mov	r0, r7
   2327a:	f001 fcd8 	bl	24c2e <memcmp>
		if (rc) {
   2327e:	b920      	cbnz	r0, 2328a <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   23280:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   23284:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   23286:	4447      	add	r7, r8
   23288:	e7e3      	b.n	23252 <nvs_flash_block_cmp+0x18>
			return 1;
   2328a:	2001      	movs	r0, #1
   2328c:	e7e3      	b.n	23256 <nvs_flash_block_cmp+0x1c>

0002328e <nvs_flash_cmp_const>:
{
   2328e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23292:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   23294:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23296:	681d      	ldr	r5, [r3, #0]
   23298:	426d      	negs	r5, r5
{
   2329a:	b088      	sub	sp, #32
	block_size =
   2329c:	f005 0520 	and.w	r5, r5, #32
{
   232a0:	4607      	mov	r7, r0
   232a2:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   232a4:	4668      	mov	r0, sp
{
   232a6:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   232a8:	462a      	mov	r2, r5
   232aa:	f001 fcfc 	bl	24ca6 <memset>
	while (len) {
   232ae:	b91c      	cbnz	r4, 232b8 <nvs_flash_cmp_const+0x2a>
	return 0;
   232b0:	4620      	mov	r0, r4
}
   232b2:	b008      	add	sp, #32
   232b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   232b8:	42ac      	cmp	r4, r5
   232ba:	46a0      	mov	r8, r4
   232bc:	bf28      	it	cs
   232be:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   232c0:	4643      	mov	r3, r8
   232c2:	466a      	mov	r2, sp
   232c4:	4631      	mov	r1, r6
   232c6:	4638      	mov	r0, r7
   232c8:	f7ff ffb7 	bl	2323a <nvs_flash_block_cmp>
		if (rc) {
   232cc:	2800      	cmp	r0, #0
   232ce:	d1f0      	bne.n	232b2 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   232d0:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   232d4:	4446      	add	r6, r8
   232d6:	e7ea      	b.n	232ae <nvs_flash_cmp_const+0x20>

000232d8 <nvs_flash_erase_sector>:
{
   232d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   232dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   232de:	8983      	ldrh	r3, [r0, #12]
   232e0:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   232e2:	0c0e      	lsrs	r6, r1, #16
   232e4:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   232e6:	4631      	mov	r1, r6
{
   232e8:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   232ea:	f7ff ffd0 	bl	2328e <nvs_flash_cmp_const>
	if (rc <= 0) {
   232ee:	1e04      	subs	r4, r0, #0
   232f0:	dd16      	ble.n	23320 <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   232f2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   232f4:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   232f6:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   232fa:	2100      	movs	r1, #0
   232fc:	f7ff ff8c 	bl	23218 <flash_write_protection_set>
	if (rc) {
   23300:	4604      	mov	r4, r0
   23302:	b968      	cbnz	r0, 23320 <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   23304:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   23306:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   23308:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2330a:	0c31      	lsrs	r1, r6, #16
   2330c:	689b      	ldr	r3, [r3, #8]
   2330e:	fb08 7101 	mla	r1, r8, r1, r7
   23312:	4798      	blx	r3
	if (rc) {
   23314:	4604      	mov	r4, r0
   23316:	b918      	cbnz	r0, 23320 <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   23318:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   2331a:	2101      	movs	r1, #1
   2331c:	f7ff ff7c 	bl	23218 <flash_write_protection_set>
}
   23320:	4620      	mov	r0, r4
   23322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023326 <nvs_ate_crc8_check>:
{
   23326:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23328:	4601      	mov	r1, r0
{
   2332a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2332c:	2207      	movs	r2, #7
   2332e:	20ff      	movs	r0, #255	; 0xff
   23330:	f7e1 f8cc 	bl	44cc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   23334:	79e3      	ldrb	r3, [r4, #7]
}
   23336:	1a18      	subs	r0, r3, r0
   23338:	bf18      	it	ne
   2333a:	2001      	movne	r0, #1
   2333c:	bd10      	pop	{r4, pc}

0002333e <nvs_ate_crc8_update>:
{
   2333e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23340:	4601      	mov	r1, r0
{
   23342:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23344:	2207      	movs	r2, #7
   23346:	20ff      	movs	r0, #255	; 0xff
   23348:	f7e1 f8c0 	bl	44cc <crc8_ccitt>
	entry->crc8 = crc8;
   2334c:	71e0      	strb	r0, [r4, #7]
}
   2334e:	bd10      	pop	{r4, pc}

00023350 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   23350:	680b      	ldr	r3, [r1, #0]
   23352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   23356:	0c1a      	lsrs	r2, r3, #16
   23358:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2335c:	bf08      	it	eq
   2335e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   23362:	600b      	str	r3, [r1, #0]
}
   23364:	4770      	bx	lr

00023366 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   23366:	7803      	ldrb	r3, [r0, #0]
   23368:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2336a:	bf81      	itttt	hi
   2336c:	f101 31ff 	addhi.w	r1, r1, #4294967295
   23370:	18c9      	addhi	r1, r1, r3
   23372:	425b      	neghi	r3, r3
   23374:	4019      	andhi	r1, r3
}
   23376:	4608      	mov	r0, r1
   23378:	4770      	bx	lr

0002337a <nvs_prev_ate>:
{
   2337a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2337c:	4604      	mov	r4, r0
   2337e:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23380:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   23382:	2108      	movs	r1, #8
   23384:	f7ff ffef 	bl	23366 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23388:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2338a:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2338c:	2308      	movs	r3, #8
   2338e:	4620      	mov	r0, r4
   23390:	f7ff ff45 	bl	2321e <nvs_flash_rd>
	if (rc) {
   23394:	2800      	cmp	r0, #0
   23396:	d13e      	bne.n	23416 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   23398:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2339a:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   2339c:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2339e:	b299      	uxth	r1, r3
   233a0:	1b92      	subs	r2, r2, r6
   233a2:	4291      	cmp	r1, r2
	*addr += ate_size;
   233a4:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   233a6:	d136      	bne.n	23416 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   233a8:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   233aa:	bf03      	ittte	eq
   233ac:	89e1      	ldrheq	r1, [r4, #14]
   233ae:	f101 31ff 	addeq.w	r1, r1, #4294967295
   233b2:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   233b6:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   233ba:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   233bc:	2308      	movs	r3, #8
   233be:	466a      	mov	r2, sp
   233c0:	4620      	mov	r0, r4
   233c2:	f7ff ff2c 	bl	2321e <nvs_flash_rd>
	if (rc) {
   233c6:	bb30      	cbnz	r0, 23416 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   233c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   233ca:	466a      	mov	r2, sp
   233cc:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   233ce:	4603      	mov	r3, r0
		if (data8[i] != value) {
   233d0:	f812 7b01 	ldrb.w	r7, [r2], #1
   233d4:	42b9      	cmp	r1, r7
   233d6:	d115      	bne.n	23404 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   233d8:	3301      	adds	r3, #1
   233da:	2b08      	cmp	r3, #8
   233dc:	d1f8      	bne.n	233d0 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   233de:	6863      	ldr	r3, [r4, #4]
   233e0:	e00e      	b.n	23400 <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   233e2:	89a3      	ldrh	r3, [r4, #12]
   233e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   233e8:	1b9b      	subs	r3, r3, r6
   233ea:	429a      	cmp	r2, r3
   233ec:	d20f      	bcs.n	2340e <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   233ee:	fbb2 f3f6 	udiv	r3, r2, r6
   233f2:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   233f6:	b956      	cbnz	r6, 2340e <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   233f8:	682b      	ldr	r3, [r5, #0]
   233fa:	0c1b      	lsrs	r3, r3, #16
   233fc:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   233fe:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   23400:	602b      	str	r3, [r5, #0]
		return 0;
   23402:	e008      	b.n	23416 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   23404:	4668      	mov	r0, sp
   23406:	f7ff ff8e 	bl	23326 <nvs_ate_crc8_check>
   2340a:	2800      	cmp	r0, #0
   2340c:	d0e9      	beq.n	233e2 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2340e:	4629      	mov	r1, r5
   23410:	4620      	mov	r0, r4
   23412:	f7e2 fe15 	bl	6040 <nvs_recover_last_ate>
}
   23416:	b003      	add	sp, #12
   23418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002341a <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2341a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   2341e:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23422:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   23426:	b088      	sub	sp, #32
   23428:	4605      	mov	r5, r0
   2342a:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, false);
   2342c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2342e:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   23430:	4690      	mov	r8, r2
   23432:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   23434:	f7ff fef0 	bl	23218 <flash_write_protection_set>
	if (rc) {
   23438:	2800      	cmp	r0, #0
   2343a:	d134      	bne.n	234a6 <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2343c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2343e:	681b      	ldr	r3, [r3, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23440:	0c27      	lsrs	r7, r4, #16
	offset += addr & ADDR_OFFS_MASK;
   23442:	fa1a f484 	uxtah	r4, sl, r4
   23446:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2344a:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   2344e:	ea19 0906 	ands.w	r9, r9, r6
   23452:	d00c      	beq.n	2346e <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   23454:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   23456:	6883      	ldr	r3, [r0, #8]
   23458:	4642      	mov	r2, r8
   2345a:	685c      	ldr	r4, [r3, #4]
   2345c:	4639      	mov	r1, r7
   2345e:	464b      	mov	r3, r9
   23460:	47a0      	blx	r4
		if (rc) {
   23462:	4604      	mov	r4, r0
   23464:	b9d0      	cbnz	r0, 2349c <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   23466:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   2346a:	444f      	add	r7, r9
		data8 += blen;
   2346c:	44c8      	add	r8, r9
	if (len) {
   2346e:	b1ee      	cbz	r6, 234ac <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   23470:	4632      	mov	r2, r6
   23472:	4641      	mov	r1, r8
   23474:	4668      	mov	r0, sp
   23476:	f001 fbeb 	bl	24c50 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2347a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2347c:	681a      	ldr	r2, [r3, #0]
   2347e:	7919      	ldrb	r1, [r3, #4]
   23480:	1b92      	subs	r2, r2, r6
   23482:	eb0d 0006 	add.w	r0, sp, r6
   23486:	f001 fc0e 	bl	24ca6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2348a:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   2348e:	681b      	ldr	r3, [r3, #0]
   23490:	6882      	ldr	r2, [r0, #8]
   23492:	4639      	mov	r1, r7
   23494:	6854      	ldr	r4, [r2, #4]
   23496:	466a      	mov	r2, sp
   23498:	47a0      	blx	r4
   2349a:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   2349c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   2349e:	2101      	movs	r1, #1
   234a0:	f7ff feba 	bl	23218 <flash_write_protection_set>
	return rc;
   234a4:	4620      	mov	r0, r4
}
   234a6:	b008      	add	sp, #32
   234a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   234ac:	4634      	mov	r4, r6
   234ae:	e7f5      	b.n	2349c <nvs_flash_al_wrt.part.0+0x82>

000234b0 <nvs_flash_data_wrt>:
{
   234b0:	b538      	push	{r3, r4, r5, lr}
   234b2:	4604      	mov	r4, r0
	if (!len) {
   234b4:	4615      	mov	r5, r2
   234b6:	b12a      	cbz	r2, 234c4 <nvs_flash_data_wrt+0x14>
   234b8:	4613      	mov	r3, r2
   234ba:	460a      	mov	r2, r1
   234bc:	6881      	ldr	r1, [r0, #8]
   234be:	f7ff ffac 	bl	2341a <nvs_flash_al_wrt.part.0>
   234c2:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   234c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   234c6:	4629      	mov	r1, r5
   234c8:	f7ff ff4d 	bl	23366 <nvs_al_size.isra.0>
   234cc:	68a3      	ldr	r3, [r4, #8]
   234ce:	4403      	add	r3, r0
   234d0:	60a3      	str	r3, [r4, #8]
}
   234d2:	4610      	mov	r0, r2
   234d4:	bd38      	pop	{r3, r4, r5, pc}

000234d6 <nvs_flash_ate_wrt>:
{
   234d6:	b510      	push	{r4, lr}
   234d8:	460a      	mov	r2, r1
	if (!len) {
   234da:	2308      	movs	r3, #8
   234dc:	6841      	ldr	r1, [r0, #4]
{
   234de:	4604      	mov	r4, r0
   234e0:	f7ff ff9b 	bl	2341a <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   234e4:	2108      	movs	r1, #8
   234e6:	4602      	mov	r2, r0
   234e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   234ea:	f7ff ff3c 	bl	23366 <nvs_al_size.isra.0>
   234ee:	6863      	ldr	r3, [r4, #4]
   234f0:	1a1b      	subs	r3, r3, r0
   234f2:	6063      	str	r3, [r4, #4]
}
   234f4:	4610      	mov	r0, r2
   234f6:	bd10      	pop	{r4, pc}

000234f8 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   234f8:	2300      	movs	r3, #0
   234fa:	461a      	mov	r2, r3
   234fc:	f7e2 bfe4 	b.w	64c8 <nvs_write>

00023500 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   23500:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   23502:	2400      	movs	r4, #0
   23504:	9400      	str	r4, [sp, #0]
   23506:	f7e3 f8b3 	bl	6670 <nvs_read_hist>
	return rc;
}
   2350a:	b002      	add	sp, #8
   2350c:	bd10      	pop	{r4, pc}

0002350e <device_get_binding>:
   2350e:	f7fc bced 	b.w	1feec <z_impl_device_get_binding>

00023512 <get_sectors_cb>:
{
   23512:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   23514:	6802      	ldr	r2, [r0, #0]
   23516:	684c      	ldr	r4, [r1, #4]
   23518:	42a2      	cmp	r2, r4
   2351a:	d316      	bcc.n	2354a <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2351c:	688b      	ldr	r3, [r1, #8]
   2351e:	4423      	add	r3, r4
   23520:	429a      	cmp	r2, r3
   23522:	d206      	bcs.n	23532 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   23524:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   23528:	42ab      	cmp	r3, r5
   2352a:	d304      	bcc.n	23536 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   2352c:	f06f 030b 	mvn.w	r3, #11
   23530:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   23532:	2000      	movs	r0, #0
   23534:	e00a      	b.n	2354c <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   23536:	68cd      	ldr	r5, [r1, #12]
   23538:	1b12      	subs	r2, r2, r4
   2353a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   2353e:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   23542:	6842      	ldr	r2, [r0, #4]
   23544:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   23546:	3301      	adds	r3, #1
   23548:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   2354a:	2001      	movs	r0, #1
}
   2354c:	bd70      	pop	{r4, r5, r6, pc}

0002354e <settings_load>:
	return settings_load_subtree(NULL);
   2354e:	2000      	movs	r0, #0
   23550:	f7e3 b982 	b.w	6858 <settings_load_subtree>

00023554 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   23554:	2200      	movs	r2, #0
   23556:	4611      	mov	r1, r2
   23558:	f7e3 b944 	b.w	67e4 <settings_save_one>

0002355c <settings_name_steq>:
{
   2355c:	4603      	mov	r3, r0
   2355e:	b530      	push	{r4, r5, lr}
   23560:	4608      	mov	r0, r1
	if (next) {
   23562:	b10a      	cbz	r2, 23568 <settings_name_steq+0xc>
		*next = NULL;
   23564:	2100      	movs	r1, #0
   23566:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   23568:	b163      	cbz	r3, 23584 <settings_name_steq+0x28>
   2356a:	b190      	cbz	r0, 23592 <settings_name_steq+0x36>
   2356c:	1e41      	subs	r1, r0, #1
   2356e:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   23570:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   23574:	4604      	mov	r4, r0
   23576:	f810 3b01 	ldrb.w	r3, [r0], #1
   2357a:	b15d      	cbz	r5, 23594 <settings_name_steq+0x38>
   2357c:	429d      	cmp	r5, r3
   2357e:	d101      	bne.n	23584 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23580:	2d3d      	cmp	r5, #61	; 0x3d
   23582:	d1f5      	bne.n	23570 <settings_name_steq+0x14>
	return 0;
   23584:	2000      	movs	r0, #0
   23586:	e004      	b.n	23592 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23588:	2b3d      	cmp	r3, #61	; 0x3d
   2358a:	d008      	beq.n	2359e <settings_name_steq+0x42>
   2358c:	fab3 f083 	clz	r0, r3
   23590:	0940      	lsrs	r0, r0, #5
}
   23592:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23594:	2b2f      	cmp	r3, #47	; 0x2f
   23596:	d1f7      	bne.n	23588 <settings_name_steq+0x2c>
		if (next) {
   23598:	b10a      	cbz	r2, 2359e <settings_name_steq+0x42>
			*next = name + 1;
   2359a:	3401      	adds	r4, #1
   2359c:	6014      	str	r4, [r2, #0]
		return 1;
   2359e:	2001      	movs	r0, #1
   235a0:	e7f7      	b.n	23592 <settings_name_steq+0x36>

000235a2 <settings_name_next>:
{
   235a2:	b530      	push	{r4, r5, lr}
   235a4:	4603      	mov	r3, r0
	if (next) {
   235a6:	b109      	cbz	r1, 235ac <settings_name_next+0xa>
		*next = NULL;
   235a8:	2200      	movs	r2, #0
   235aa:	600a      	str	r2, [r1, #0]
	if (!name) {
   235ac:	b16b      	cbz	r3, 235ca <settings_name_next+0x28>
   235ae:	461a      	mov	r2, r3
   235b0:	4614      	mov	r4, r2
   235b2:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   235b4:	f812 5b01 	ldrb.w	r5, [r2], #1
   235b8:	b135      	cbz	r5, 235c8 <settings_name_next+0x26>
   235ba:	2d3d      	cmp	r5, #61	; 0x3d
   235bc:	d004      	beq.n	235c8 <settings_name_next+0x26>
   235be:	2d2f      	cmp	r5, #47	; 0x2f
   235c0:	d1f6      	bne.n	235b0 <settings_name_next+0xe>
		if (next) {
   235c2:	b109      	cbz	r1, 235c8 <settings_name_next+0x26>
			*next = name + 1;
   235c4:	3401      	adds	r4, #1
   235c6:	600c      	str	r4, [r1, #0]
}
   235c8:	bd30      	pop	{r4, r5, pc}
		return 0;
   235ca:	4618      	mov	r0, r3
   235cc:	e7fc      	b.n	235c8 <settings_name_next+0x26>

000235ce <settings_nvs_read_fn>:
{
   235ce:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   235d0:	4613      	mov	r3, r2
{
   235d2:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   235d4:	460a      	mov	r2, r1
   235d6:	8881      	ldrh	r1, [r0, #4]
   235d8:	6800      	ldr	r0, [r0, #0]
   235da:	f7ff ff91 	bl	23500 <nvs_read>
}
   235de:	42a0      	cmp	r0, r4
   235e0:	bfa8      	it	ge
   235e2:	4620      	movge	r0, r4
   235e4:	bd10      	pop	{r4, pc}

000235e6 <settings_nvs_save>:
{
   235e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235ea:	b097      	sub	sp, #92	; 0x5c
   235ec:	4604      	mov	r4, r0
   235ee:	9201      	str	r2, [sp, #4]
   235f0:	469b      	mov	fp, r3
	if (!name) {
   235f2:	4689      	mov	r9, r1
   235f4:	2900      	cmp	r1, #0
   235f6:	d069      	beq.n	236cc <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   235f8:	b1da      	cbz	r2, 23632 <settings_nvs_save+0x4c>
   235fa:	fabb f78b 	clz	r7, fp
   235fe:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   23600:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   23602:	3501      	adds	r5, #1
   23604:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   23606:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   23608:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   2360c:	1e6e      	subs	r6, r5, #1
   2360e:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   23610:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   23614:	d02e      	beq.n	23674 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   23616:	234a      	movs	r3, #74	; 0x4a
   23618:	aa03      	add	r2, sp, #12
   2361a:	4631      	mov	r1, r6
   2361c:	4650      	mov	r0, sl
   2361e:	f7ff ff6f 	bl	23500 <nvs_read>
		if (rc < 0) {
   23622:	2800      	cmp	r0, #0
   23624:	da07      	bge.n	23636 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   23626:	f110 0f02 	cmn.w	r0, #2
   2362a:	bf08      	it	eq
   2362c:	46b0      	moveq	r8, r6
   2362e:	4635      	mov	r5, r6
   23630:	e7ec      	b.n	2360c <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   23632:	2701      	movs	r7, #1
   23634:	e7e4      	b.n	23600 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   23636:	ab16      	add	r3, sp, #88	; 0x58
   23638:	4418      	add	r0, r3
   2363a:	2300      	movs	r3, #0
   2363c:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   23640:	a903      	add	r1, sp, #12
   23642:	4648      	mov	r0, r9
   23644:	f001 fad6 	bl	24bf4 <strcmp>
   23648:	2800      	cmp	r0, #0
   2364a:	d1f0      	bne.n	2362e <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   2364c:	2f00      	cmp	r7, #0
   2364e:	d03b      	beq.n	236c8 <settings_nvs_save+0xe2>
   23650:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   23652:	42b3      	cmp	r3, r6
   23654:	d142      	bne.n	236dc <settings_nvs_save+0xf6>
			cf->last_name_id--;
   23656:	4622      	mov	r2, r4
   23658:	1e73      	subs	r3, r6, #1
   2365a:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2365e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23662:	2302      	movs	r3, #2
   23664:	4650      	mov	r0, sl
   23666:	f7e2 ff2f 	bl	64c8 <nvs_write>
			if (rc < 0) {
   2366a:	2800      	cmp	r0, #0
   2366c:	da36      	bge.n	236dc <settings_nvs_save+0xf6>
}
   2366e:	b017      	add	sp, #92	; 0x5c
   23670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   23674:	bb6f      	cbnz	r7, 236d2 <settings_nvs_save+0xec>
	write_name = true;
   23676:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   23678:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2367c:	d02b      	beq.n	236d6 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2367e:	f104 0508 	add.w	r5, r4, #8
   23682:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   23686:	9a01      	ldr	r2, [sp, #4]
   23688:	465b      	mov	r3, fp
   2368a:	b289      	uxth	r1, r1
   2368c:	4628      	mov	r0, r5
   2368e:	f7e2 ff1b 	bl	64c8 <nvs_write>
	if (rc < 0) {
   23692:	2800      	cmp	r0, #0
   23694:	dbeb      	blt.n	2366e <settings_nvs_save+0x88>
	if (write_name) {
   23696:	b157      	cbz	r7, 236ae <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   23698:	4648      	mov	r0, r9
   2369a:	f001 fa9b 	bl	24bd4 <strlen>
   2369e:	464a      	mov	r2, r9
   236a0:	4603      	mov	r3, r0
   236a2:	4641      	mov	r1, r8
   236a4:	4628      	mov	r0, r5
   236a6:	f7e2 ff0f 	bl	64c8 <nvs_write>
		if (rc < 0) {
   236aa:	2800      	cmp	r0, #0
   236ac:	dbdf      	blt.n	2366e <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   236ae:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   236b0:	4543      	cmp	r3, r8
   236b2:	d220      	bcs.n	236f6 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   236b4:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   236b6:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   236b8:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   236bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   236c0:	4628      	mov	r0, r5
   236c2:	f7e2 ff01 	bl	64c8 <nvs_write>
   236c6:	e016      	b.n	236f6 <settings_nvs_save+0x110>
   236c8:	46b0      	mov	r8, r6
   236ca:	e7d5      	b.n	23678 <settings_nvs_save+0x92>
		return -EINVAL;
   236cc:	f06f 0015 	mvn.w	r0, #21
   236d0:	e7cd      	b.n	2366e <settings_nvs_save+0x88>
		return 0;
   236d2:	2000      	movs	r0, #0
   236d4:	e7cb      	b.n	2366e <settings_nvs_save+0x88>
		return -ENOMEM;
   236d6:	f06f 000b 	mvn.w	r0, #11
   236da:	e7c8      	b.n	2366e <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   236dc:	4631      	mov	r1, r6
   236de:	4650      	mov	r0, sl
   236e0:	f7ff ff0a 	bl	234f8 <nvs_delete>
			if (rc >= 0) {
   236e4:	2800      	cmp	r0, #0
   236e6:	dbc2      	blt.n	2366e <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   236e8:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   236ec:	313f      	adds	r1, #63	; 0x3f
   236ee:	b289      	uxth	r1, r1
   236f0:	4650      	mov	r0, sl
   236f2:	f7ff ff01 	bl	234f8 <nvs_delete>
	if (rc < 0) {
   236f6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   236fa:	e7b8      	b.n	2366e <settings_nvs_save+0x88>

000236fc <settings_nvs_backend_init>:
{
   236fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   236fe:	f100 0608 	add.w	r6, r0, #8
   23702:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   23704:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   23706:	4630      	mov	r0, r6
   23708:	f7e2 fd72 	bl	61f0 <nvs_init>
	if (rc) {
   2370c:	4605      	mov	r5, r0
   2370e:	b970      	cbnz	r0, 2372e <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   23710:	2302      	movs	r3, #2
   23712:	f10d 0206 	add.w	r2, sp, #6
   23716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2371a:	4630      	mov	r0, r6
   2371c:	f7ff fef0 	bl	23500 <nvs_read>
	if (rc < 0) {
   23720:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   23722:	bfac      	ite	ge
   23724:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   23728:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   2372c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2372e:	4628      	mov	r0, r5
   23730:	b002      	add	sp, #8
   23732:	bd70      	pop	{r4, r5, r6, pc}

00023734 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   23734:	2200      	movs	r2, #0
   23736:	8002      	strh	r2, [r0, #0]
   23738:	6042      	str	r2, [r0, #4]
}
   2373a:	4770      	bx	lr

0002373c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2373c:	68c3      	ldr	r3, [r0, #12]
   2373e:	b2c9      	uxtb	r1, r1
   23740:	220c      	movs	r2, #12
   23742:	fb01 3302 	mla	r3, r1, r2, r3
   23746:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   23748:	f000 0007 	and.w	r0, r0, #7
   2374c:	4770      	bx	lr

0002374e <set_on_state>:
	__asm__ volatile(
   2374e:	f04f 0320 	mov.w	r3, #32
   23752:	f3ef 8211 	mrs	r2, BASEPRI
   23756:	f383 8811 	msr	BASEPRI, r3
   2375a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2375e:	6803      	ldr	r3, [r0, #0]
   23760:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23764:	f043 0302 	orr.w	r3, r3, #2
   23768:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2376a:	f382 8811 	msr	BASEPRI, r2
   2376e:	f3bf 8f6f 	isb	sy
}
   23772:	4770      	bx	lr

00023774 <stop>:
{
   23774:	4603      	mov	r3, r0
   23776:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   23778:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
   2377a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2377c:	f04f 0420 	mov.w	r4, #32
   23780:	f3ef 8611 	mrs	r6, BASEPRI
   23784:	f384 8811 	msr	BASEPRI, r4
   23788:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2378c:	250c      	movs	r5, #12
   2378e:	fb05 0401 	mla	r4, r5, r1, r0
   23792:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23794:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   23798:	d001      	beq.n	2379e <stop+0x2a>
   2379a:	42a2      	cmp	r2, r4
   2379c:	d111      	bne.n	237c2 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2379e:	fb05 0001 	mla	r0, r5, r1, r0
   237a2:	2201      	movs	r2, #1
   237a4:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   237a6:	2000      	movs	r0, #0
	__asm__ volatile(
   237a8:	f386 8811 	msr	BASEPRI, r6
   237ac:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   237b0:	b930      	cbnz	r0, 237c0 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   237b2:	685b      	ldr	r3, [r3, #4]
   237b4:	220c      	movs	r2, #12
   237b6:	fb02 3101 	mla	r1, r2, r1, r3
   237ba:	684b      	ldr	r3, [r1, #4]
   237bc:	4798      	blx	r3
	return 0;
   237be:	2000      	movs	r0, #0
}
   237c0:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   237c2:	f04f 30ff 	mov.w	r0, #4294967295
   237c6:	e7ef      	b.n	237a8 <stop+0x34>

000237c8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   237c8:	2280      	movs	r2, #128	; 0x80
   237ca:	f7ff bfd3 	b.w	23774 <stop>

000237ce <async_start>:
{
   237ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   237d0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   237d2:	68c4      	ldr	r4, [r0, #12]
{
   237d4:	4605      	mov	r5, r0
   237d6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   237d8:	f04f 0020 	mov.w	r0, #32
   237dc:	f3ef 8c11 	mrs	ip, BASEPRI
   237e0:	f380 8811 	msr	BASEPRI, r0
   237e4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   237e8:	260c      	movs	r6, #12
   237ea:	fb06 4601 	mla	r6, r6, r1, r4
   237ee:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   237f0:	f000 0e07 	and.w	lr, r0, #7
   237f4:	f1be 0f01 	cmp.w	lr, #1
   237f8:	d110      	bne.n	2381c <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   237fa:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   237fc:	2600      	movs	r6, #0
	__asm__ volatile(
   237fe:	f38c 8811 	msr	BASEPRI, ip
   23802:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   23806:	b93e      	cbnz	r6, 23818 <async_start+0x4a>
	subdata->cb = cb;
   23808:	200c      	movs	r0, #12
   2380a:	4341      	muls	r1, r0
   2380c:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2380e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   23812:	686b      	ldr	r3, [r5, #4]
   23814:	585b      	ldr	r3, [r3, r1]
   23816:	4798      	blx	r3
}
   23818:	4630      	mov	r0, r6
   2381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2381c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   23820:	4287      	cmp	r7, r0
   23822:	bf14      	ite	ne
   23824:	f04f 36ff 	movne.w	r6, #4294967295
   23828:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   2382c:	e7e7      	b.n	237fe <async_start+0x30>

0002382e <api_start>:
{
   2382e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   23830:	2480      	movs	r4, #128	; 0x80
   23832:	9400      	str	r4, [sp, #0]
   23834:	f7ff ffcb 	bl	237ce <async_start>
}
   23838:	b002      	add	sp, #8
   2383a:	bd10      	pop	{r4, pc}

0002383c <onoff_started_callback>:
	return &data->mgr[type];
   2383c:	68c0      	ldr	r0, [r0, #12]
{
   2383e:	b410      	push	{r4}
	return &data->mgr[type];
   23840:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   23842:	241c      	movs	r4, #28
   23844:	fb03 0004 	mla	r0, r3, r4, r0
   23848:	2100      	movs	r1, #0
}
   2384a:	bc10      	pop	{r4}
	notify(mgr, 0);
   2384c:	4710      	bx	r2

0002384e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2384e:	2000      	movs	r0, #0
   23850:	f003 bd21 	b.w	27296 <nrfx_clock_start>

00023854 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   23854:	2000      	movs	r0, #0
   23856:	f7fb be53 	b.w	1f500 <nrfx_clock_stop>

0002385a <blocking_start_callback>:
{
   2385a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2385c:	f7fd b9dc 	b.w	20c18 <z_impl_k_sem_give>

00023860 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   23860:	4770      	bx	lr

00023862 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   23862:	4770      	bx	lr

00023864 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   23864:	f7e3 bd2a 	b.w	72bc <_DoInit>

00023868 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   23868:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2386a:	f7ff fffb 	bl	23864 <SEGGER_RTT_Init>

	return 0;
}
   2386e:	2000      	movs	r0, #0
   23870:	bd08      	pop	{r3, pc}

00023872 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23872:	b538      	push	{r3, r4, r5, lr}
   23874:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   23876:	42ab      	cmp	r3, r5
{
   23878:	4611      	mov	r1, r2
   2387a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2387c:	d804      	bhi.n	23888 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2387e:	461a      	mov	r2, r3
   23880:	f001 f9e6 	bl	24c50 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23884:	4620      	mov	r0, r4
   23886:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   23888:	2400      	movs	r4, #0
   2388a:	e7fb      	b.n	23884 <_copy+0x12>

0002388c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2388c:	f001 ba0b 	b.w	24ca6 <memset>

00023890 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23890:	09c3      	lsrs	r3, r0, #7
   23892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23896:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2389a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2389e:	b2c0      	uxtb	r0, r0
   238a0:	4770      	bx	lr

000238a2 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   238a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238a6:	4606      	mov	r6, r0
   238a8:	b0a9      	sub	sp, #164	; 0xa4
   238aa:	4688      	mov	r8, r1
   238ac:	4614      	mov	r4, r2
   238ae:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   238b0:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   238b4:	f7e3 fd88 	bl	73c8 <uECC_get_rng>
		if (!rng_function ||
   238b8:	4603      	mov	r3, r0
   238ba:	2800      	cmp	r0, #0
   238bc:	d03e      	beq.n	2393c <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   238be:	2140      	movs	r1, #64	; 0x40
   238c0:	a808      	add	r0, sp, #32
   238c2:	4798      	blx	r3
		if (!rng_function ||
   238c4:	b3d0      	cbz	r0, 2393c <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   238c6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   238ca:	f112 031f 	adds.w	r3, r2, #31
   238ce:	bf48      	it	mi
   238d0:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   238d4:	466d      	mov	r5, sp
   238d6:	464a      	mov	r2, r9
   238d8:	a908      	add	r1, sp, #32
   238da:	4628      	mov	r0, r5
   238dc:	f343 1347 	sbfx	r3, r3, #5, #8
   238e0:	f000 f9fa 	bl	23cd8 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   238e4:	4622      	mov	r2, r4
   238e6:	4629      	mov	r1, r5
   238e8:	a818      	add	r0, sp, #96	; 0x60
   238ea:	f000 fe0f 	bl	2450c <EccPoint_compute_public_key>
   238ee:	b318      	cbz	r0, 23938 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   238f0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   238f4:	1dd9      	adds	r1, r3, #7
   238f6:	bf48      	it	mi
   238f8:	f103 010e 	addmi.w	r1, r3, #14
   238fc:	462a      	mov	r2, r5
   238fe:	4640      	mov	r0, r8
   23900:	10c9      	asrs	r1, r1, #3
   23902:	f000 fe2b 	bl	2455c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   23906:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2390a:	aa18      	add	r2, sp, #96	; 0x60
   2390c:	4630      	mov	r0, r6
   2390e:	f000 fe25 	bl	2455c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23912:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   23916:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2391a:	ab18      	add	r3, sp, #96	; 0x60
   2391c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23920:	1870      	adds	r0, r6, r1
   23922:	f000 fe1b 	bl	2455c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   23926:	2220      	movs	r2, #32
   23928:	2100      	movs	r1, #0
   2392a:	4628      	mov	r0, r5
   2392c:	f001 f9bb 	bl	24ca6 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   23930:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   23932:	b029      	add	sp, #164	; 0xa4
   23934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   23938:	3f01      	subs	r7, #1
   2393a:	d1bb      	bne.n	238b4 <uECC_make_key+0x12>
        		return 0;
   2393c:	2000      	movs	r0, #0
   2393e:	e7f8      	b.n	23932 <uECC_make_key+0x90>

00023940 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   23940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23944:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   23946:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   2394a:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2394e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   23952:	b0a4      	sub	sp, #144	; 0x90
   23954:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   23956:	1dda      	adds	r2, r3, #7
   23958:	bf48      	it	mi
   2395a:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2395e:	ad04      	add	r5, sp, #16
{
   23960:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   23962:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   23964:	4628      	mov	r0, r5
   23966:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   23968:	9502      	str	r5, [sp, #8]
   2396a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2396c:	f000 fe0a 	bl	24584 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   23970:	463a      	mov	r2, r7
   23972:	4649      	mov	r1, r9
   23974:	a814      	add	r0, sp, #80	; 0x50
   23976:	f000 fe05 	bl	24584 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2397a:	ab14      	add	r3, sp, #80	; 0x50
   2397c:	eb09 0107 	add.w	r1, r9, r7
   23980:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   23984:	463a      	mov	r2, r7
   23986:	f000 fdfd 	bl	24584 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2398a:	4623      	mov	r3, r4
   2398c:	4632      	mov	r2, r6
   2398e:	4629      	mov	r1, r5
   23990:	4628      	mov	r0, r5
   23992:	f000 fd8f 	bl	244b4 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   23996:	fab0 f380 	clz	r3, r0
   2399a:	9401      	str	r4, [sp, #4]
   2399c:	aa24      	add	r2, sp, #144	; 0x90
   2399e:	095b      	lsrs	r3, r3, #5
   239a0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   239a4:	8863      	ldrh	r3, [r4, #2]
   239a6:	3301      	adds	r3, #1
   239a8:	b21b      	sxth	r3, r3
   239aa:	9300      	str	r3, [sp, #0]
   239ac:	f851 2c88 	ldr.w	r2, [r1, #-136]
   239b0:	a914      	add	r1, sp, #80	; 0x50
   239b2:	2300      	movs	r3, #0
   239b4:	4608      	mov	r0, r1
   239b6:	f000 fcb0 	bl	2431a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   239ba:	aa14      	add	r2, sp, #80	; 0x50
   239bc:	4639      	mov	r1, r7
   239be:	4640      	mov	r0, r8
   239c0:	f000 fdcc 	bl	2455c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   239c4:	4621      	mov	r1, r4
   239c6:	a814      	add	r0, sp, #80	; 0x50
   239c8:	f000 fc1c 	bl	24204 <EccPoint_isZero>
   239cc:	af02      	add	r7, sp, #8
   239ce:	4604      	mov	r4, r0
   239d0:	2208      	movs	r2, #8
   239d2:	2100      	movs	r1, #0
   239d4:	4638      	mov	r0, r7
   239d6:	f001 f966 	bl	24ca6 <memset>
   239da:	2220      	movs	r2, #32
   239dc:	2100      	movs	r1, #0
   239de:	4630      	mov	r0, r6
   239e0:	f001 f961 	bl	24ca6 <memset>
   239e4:	2220      	movs	r2, #32
   239e6:	2100      	movs	r1, #0
   239e8:	4628      	mov	r0, r5
   239ea:	f001 f95c 	bl	24ca6 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   239ee:	fab4 f084 	clz	r0, r4
   239f2:	0940      	lsrs	r0, r0, #5
   239f4:	b024      	add	sp, #144	; 0x90
   239f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000239fa <uECC_vli_add>:
{
   239fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   239fc:	2400      	movs	r4, #0
{
   239fe:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   23a00:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23a02:	b265      	sxtb	r5, r4
   23a04:	42ab      	cmp	r3, r5
   23a06:	dc00      	bgt.n	23a0a <uECC_vli_add+0x10>
}
   23a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   23a0a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23a0e:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   23a12:	443d      	add	r5, r7
   23a14:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   23a16:	42af      	cmp	r7, r5
   23a18:	f000 0001 	and.w	r0, r0, #1
   23a1c:	bf18      	it	ne
   23a1e:	2000      	movne	r0, #0
		result[i] = sum;
   23a20:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23a24:	bf88      	it	hi
   23a26:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   23a2a:	3401      	adds	r4, #1
   23a2c:	e7e9      	b.n	23a02 <uECC_vli_add+0x8>

00023a2e <uECC_vli_rshift1>:
	vli += num_words;
   23a2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   23a32:	2300      	movs	r3, #0
	while (vli-- > end) {
   23a34:	4288      	cmp	r0, r1
   23a36:	d300      	bcc.n	23a3a <uECC_vli_rshift1+0xc>
}
   23a38:	4770      	bx	lr
		uECC_word_t temp = *vli;
   23a3a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   23a3e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   23a42:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   23a44:	07d3      	lsls	r3, r2, #31
   23a46:	e7f5      	b.n	23a34 <uECC_vli_rshift1+0x6>

00023a48 <vli_modInv_update>:
	if (!EVEN(uv)) {
   23a48:	6803      	ldr	r3, [r0, #0]
{
   23a4a:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   23a4c:	f013 0601 	ands.w	r6, r3, #1
{
   23a50:	4605      	mov	r5, r0
   23a52:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   23a54:	d005      	beq.n	23a62 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   23a56:	4613      	mov	r3, r2
   23a58:	460a      	mov	r2, r1
   23a5a:	4601      	mov	r1, r0
   23a5c:	f7ff ffcd 	bl	239fa <uECC_vli_add>
   23a60:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   23a62:	4621      	mov	r1, r4
   23a64:	4628      	mov	r0, r5
   23a66:	f7ff ffe2 	bl	23a2e <uECC_vli_rshift1>
	if (carry) {
   23a6a:	b146      	cbz	r6, 23a7e <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   23a6c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   23a70:	3a01      	subs	r2, #1
   23a72:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   23a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23a7a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   23a7e:	bd70      	pop	{r4, r5, r6, pc}

00023a80 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   23a80:	f04f 0c00 	mov.w	ip, #0
{
   23a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   23a88:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   23a8a:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   23a8c:	fa4f f98c 	sxtb.w	r9, ip
   23a90:	454b      	cmp	r3, r9
   23a92:	dc16      	bgt.n	23ac2 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23a94:	f04f 36ff 	mov.w	r6, #4294967295
   23a98:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   23a9c:	9600      	str	r6, [sp, #0]
   23a9e:	f04f 0800 	mov.w	r8, #0
   23aa2:	9f00      	ldr	r7, [sp, #0]
   23aa4:	fa53 fe88 	uxtab	lr, r3, r8
   23aa8:	fa4f fe8e 	sxtb.w	lr, lr
   23aac:	45be      	cmp	lr, r7
   23aae:	fa5f f688 	uxtb.w	r6, r8
   23ab2:	db26      	blt.n	23b02 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   23ab4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23ab8:	f840 4c04 	str.w	r4, [r0, #-4]
}
   23abc:	b003      	add	sp, #12
   23abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   23ac2:	f04f 0e00 	mov.w	lr, #0
   23ac6:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   23aca:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   23acc:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23ad0:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23ad4:	fba6 6707 	umull	r6, r7, r6, r7
   23ad8:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   23ada:	f10e 0e01 	add.w	lr, lr, #1
   23ade:	417d      	adcs	r5, r7
   23ae0:	fa4f f68e 	sxtb.w	r6, lr
   23ae4:	f04f 0b00 	mov.w	fp, #0
   23ae8:	bf28      	it	cs
   23aea:	f04f 0b01 	movcs.w	fp, #1
   23aee:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   23af0:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   23af2:	ddeb      	ble.n	23acc <uECC_vli_mult+0x4c>
		result[k] = r0;
   23af4:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   23af8:	462c      	mov	r4, r5
   23afa:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   23afe:	4645      	mov	r5, r8
   23b00:	e7c4      	b.n	23a8c <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23b02:	3601      	adds	r6, #1
   23b04:	fa4f fc86 	sxtb.w	ip, r6
   23b08:	ebae 0a0c 	sub.w	sl, lr, ip
   23b0c:	46a9      	mov	r9, r5
   23b0e:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   23b12:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   23b16:	2500      	movs	r5, #0
   23b18:	459c      	cmp	ip, r3
   23b1a:	db05      	blt.n	23b28 <uECC_vli_mult+0xa8>
		result[k] = r0;
   23b1c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23b20:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   23b24:	464c      	mov	r4, r9
   23b26:	e7bc      	b.n	23aa2 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23b28:	f856 bb04 	ldr.w	fp, [r6], #4
   23b2c:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23b30:	fbab 7b07 	umull	r7, fp, fp, r7
   23b34:	f8cd b004 	str.w	fp, [sp, #4]
   23b38:	193c      	adds	r4, r7, r4
   23b3a:	9f01      	ldr	r7, [sp, #4]
   23b3c:	eb57 0909 	adcs.w	r9, r7, r9
   23b40:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23b44:	f10c 0c01 	add.w	ip, ip, #1
   23b48:	bf28      	it	cs
   23b4a:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   23b4e:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23b50:	fa4f fc8c 	sxtb.w	ip, ip
   23b54:	e7e0      	b.n	23b18 <uECC_vli_mult+0x98>

00023b56 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   23b56:	2300      	movs	r3, #0
{
   23b58:	b510      	push	{r4, lr}
		 vli[i] = 0;
   23b5a:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   23b5c:	b25a      	sxtb	r2, r3
   23b5e:	4291      	cmp	r1, r2
   23b60:	dc00      	bgt.n	23b64 <uECC_vli_clear+0xe>
}
   23b62:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   23b64:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23b68:	3301      	adds	r3, #1
   23b6a:	e7f7      	b.n	23b5c <uECC_vli_clear+0x6>

00023b6c <uECC_vli_isZero>:
{
   23b6c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23b6e:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   23b70:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   23b72:	b25c      	sxtb	r4, r3
   23b74:	42a1      	cmp	r1, r4
   23b76:	dc03      	bgt.n	23b80 <uECC_vli_isZero+0x14>
}
   23b78:	fab2 f082 	clz	r0, r2
   23b7c:	0940      	lsrs	r0, r0, #5
   23b7e:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   23b80:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23b84:	3301      	adds	r3, #1
   23b86:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   23b88:	e7f3      	b.n	23b72 <uECC_vli_isZero+0x6>

00023b8a <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23b8a:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23b8c:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23b8e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23b92:	f001 011f 	and.w	r1, r1, #31
   23b96:	fa03 f101 	lsl.w	r1, r3, r1
}
   23b9a:	4008      	ands	r0, r1
   23b9c:	4770      	bx	lr

00023b9e <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23b9e:	3901      	subs	r1, #1
   23ba0:	b24b      	sxtb	r3, r1
{
   23ba2:	4602      	mov	r2, r0
   23ba4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23ba8:	2b00      	cmp	r3, #0
   23baa:	da03      	bge.n	23bb4 <uECC_vli_numBits+0x16>
	return (i + 1);
   23bac:	3301      	adds	r3, #1
   23bae:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   23bb0:	b938      	cbnz	r0, 23bc2 <uECC_vli_numBits+0x24>
   23bb2:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23bb4:	f851 0904 	ldr.w	r0, [r1], #-4
   23bb8:	2800      	cmp	r0, #0
   23bba:	d1f7      	bne.n	23bac <uECC_vli_numBits+0xe>
   23bbc:	3b01      	subs	r3, #1
   23bbe:	b25b      	sxtb	r3, r3
   23bc0:	e7f2      	b.n	23ba8 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   23bc2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   23bc6:	3b01      	subs	r3, #1
   23bc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   23bcc:	2300      	movs	r3, #0
   23bce:	b922      	cbnz	r2, 23bda <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   23bd0:	3801      	subs	r0, #1
   23bd2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   23bd6:	b200      	sxth	r0, r0
}
   23bd8:	4770      	bx	lr
		digit >>= 1;
   23bda:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   23bdc:	3301      	adds	r3, #1
   23bde:	e7f6      	b.n	23bce <uECC_vli_numBits+0x30>

00023be0 <uECC_vli_set>:
{
   23be0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23be2:	2300      	movs	r3, #0
   23be4:	b25c      	sxtb	r4, r3
   23be6:	42a2      	cmp	r2, r4
   23be8:	dc00      	bgt.n	23bec <uECC_vli_set+0xc>
}
   23bea:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   23bec:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   23bf0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23bf4:	3301      	adds	r3, #1
   23bf6:	e7f5      	b.n	23be4 <uECC_vli_set+0x4>

00023bf8 <uECC_vli_cmp_unsafe>:
{
   23bf8:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   23bfa:	3a01      	subs	r2, #1
   23bfc:	b253      	sxtb	r3, r2
   23bfe:	009a      	lsls	r2, r3, #2
   23c00:	2b00      	cmp	r3, #0
   23c02:	da01      	bge.n	23c08 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   23c04:	2000      	movs	r0, #0
}
   23c06:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   23c08:	5885      	ldr	r5, [r0, r2]
   23c0a:	588c      	ldr	r4, [r1, r2]
   23c0c:	42a5      	cmp	r5, r4
   23c0e:	d805      	bhi.n	23c1c <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   23c10:	f1a2 0204 	sub.w	r2, r2, #4
   23c14:	d304      	bcc.n	23c20 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   23c16:	3b01      	subs	r3, #1
   23c18:	b25b      	sxtb	r3, r3
   23c1a:	e7f1      	b.n	23c00 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   23c1c:	2001      	movs	r0, #1
   23c1e:	e7f2      	b.n	23c06 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   23c20:	f04f 30ff 	mov.w	r0, #4294967295
   23c24:	e7ef      	b.n	23c06 <uECC_vli_cmp_unsafe+0xe>

00023c26 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   23c26:	3a01      	subs	r2, #1
   23c28:	b253      	sxtb	r3, r2
{
   23c2a:	b570      	push	{r4, r5, r6, lr}
   23c2c:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   23c2e:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   23c30:	2b00      	cmp	r3, #0
   23c32:	da03      	bge.n	23c3c <uECC_vli_equal+0x16>
}
   23c34:	1e20      	subs	r0, r4, #0
   23c36:	bf18      	it	ne
   23c38:	2001      	movne	r0, #1
   23c3a:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   23c3c:	5885      	ldr	r5, [r0, r2]
   23c3e:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   23c40:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   23c42:	4075      	eors	r5, r6
   23c44:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   23c46:	b25b      	sxtb	r3, r3
   23c48:	3a04      	subs	r2, #4
   23c4a:	e7f1      	b.n	23c30 <uECC_vli_equal+0xa>

00023c4c <uECC_vli_sub>:
{
   23c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23c4e:	2400      	movs	r4, #0
{
   23c50:	4606      	mov	r6, r0
   23c52:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   23c54:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23c56:	b265      	sxtb	r5, r4
   23c58:	4565      	cmp	r5, ip
   23c5a:	db00      	blt.n	23c5e <uECC_vli_sub+0x12>
}
   23c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   23c5e:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23c62:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   23c66:	1a3d      	subs	r5, r7, r0
   23c68:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   23c6a:	42af      	cmp	r7, r5
   23c6c:	f000 0001 	and.w	r0, r0, #1
   23c70:	bf18      	it	ne
   23c72:	2000      	movne	r0, #0
		result[i] = diff;
   23c74:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23c78:	bf38      	it	cc
   23c7a:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   23c7e:	3401      	adds	r4, #1
   23c80:	e7e9      	b.n	23c56 <uECC_vli_sub+0xa>

00023c82 <uECC_vli_modAdd>:
{
   23c82:	b570      	push	{r4, r5, r6, lr}
   23c84:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   23c88:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23c8a:	4633      	mov	r3, r6
{
   23c8c:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23c8e:	f7ff feb4 	bl	239fa <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   23c92:	b930      	cbnz	r0, 23ca2 <uECC_vli_modAdd+0x20>
   23c94:	4632      	mov	r2, r6
   23c96:	4621      	mov	r1, r4
   23c98:	4628      	mov	r0, r5
   23c9a:	f7ff ffad 	bl	23bf8 <uECC_vli_cmp_unsafe>
   23c9e:	2801      	cmp	r0, #1
   23ca0:	d007      	beq.n	23cb2 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   23ca2:	4633      	mov	r3, r6
   23ca4:	462a      	mov	r2, r5
   23ca6:	4621      	mov	r1, r4
   23ca8:	4620      	mov	r0, r4
}
   23caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   23cae:	f7ff bfcd 	b.w	23c4c <uECC_vli_sub>
}
   23cb2:	bd70      	pop	{r4, r5, r6, pc}

00023cb4 <uECC_vli_modSub>:
{
   23cb4:	b570      	push	{r4, r5, r6, lr}
   23cb6:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   23cba:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23cbc:	4633      	mov	r3, r6
{
   23cbe:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23cc0:	f7ff ffc4 	bl	23c4c <uECC_vli_sub>
	if (l_borrow) {
   23cc4:	b138      	cbz	r0, 23cd6 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   23cc6:	4633      	mov	r3, r6
   23cc8:	462a      	mov	r2, r5
   23cca:	4621      	mov	r1, r4
   23ccc:	4620      	mov	r0, r4
}
   23cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   23cd2:	f7ff be92 	b.w	239fa <uECC_vli_add>
}
   23cd6:	bd70      	pop	{r4, r5, r6, pc}

00023cd8 <uECC_vli_mmod>:
{
   23cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23cdc:	b0a5      	sub	sp, #148	; 0x94
   23cde:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   23ce0:	ab14      	add	r3, sp, #80	; 0x50
   23ce2:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   23ce6:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   23ce8:	4629      	mov	r1, r5
   23cea:	4610      	mov	r0, r2
{
   23cec:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   23cee:	f7ff ff56 	bl	23b9e <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   23cf2:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   23cf6:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23cf8:	2c00      	cmp	r4, #0
   23cfa:	4621      	mov	r1, r4
   23cfc:	bfb8      	it	lt
   23cfe:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23d02:	4263      	negs	r3, r4
   23d04:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23d08:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23d0c:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   23d10:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23d12:	bf58      	it	pl
   23d14:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   23d16:	f7ff ff1e 	bl	23b56 <uECC_vli_clear>
	if (bit_shift > 0) {
   23d1a:	2e00      	cmp	r6, #0
   23d1c:	b208      	sxth	r0, r1
   23d1e:	dd2b      	ble.n	23d78 <uECC_vli_mmod+0xa0>
   23d20:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   23d22:	2200      	movs	r2, #0
   23d24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23d28:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23d2c:	4613      	mov	r3, r2
   23d2e:	429d      	cmp	r5, r3
   23d30:	d817      	bhi.n	23d62 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   23d32:	006b      	lsls	r3, r5, #1
   23d34:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23d36:	ab04      	add	r3, sp, #16
   23d38:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23d3c:	1e6f      	subs	r7, r5, #1
   23d3e:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23d40:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23d42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   23d46:	2c00      	cmp	r4, #0
   23d48:	da54      	bge.n	23df4 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   23d4a:	ab24      	add	r3, sp, #144	; 0x90
   23d4c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   23d50:	462a      	mov	r2, r5
   23d52:	f856 1c88 	ldr.w	r1, [r6, #-136]
   23d56:	4640      	mov	r0, r8
   23d58:	f7ff ff42 	bl	23be0 <uECC_vli_set>
}
   23d5c:	b025      	add	sp, #148	; 0x94
   23d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   23d62:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   23d66:	fa0c f106 	lsl.w	r1, ip, r6
   23d6a:	430a      	orrs	r2, r1
   23d6c:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23d70:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23d72:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23d76:	e7da      	b.n	23d2e <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   23d78:	ab04      	add	r3, sp, #16
   23d7a:	462a      	mov	r2, r5
   23d7c:	4639      	mov	r1, r7
   23d7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23d82:	f7ff ff2d 	bl	23be0 <uECC_vli_set>
   23d86:	e7d4      	b.n	23d32 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23d88:	fa0f fe82 	sxth.w	lr, r2
   23d8c:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   23d90:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   23d94:	ab24      	add	r3, sp, #144	; 0x90
   23d96:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23d9a:	3001      	adds	r0, #1
   23d9c:	f852 3c80 	ldr.w	r3, [r2, #-128]
   23da0:	440b      	add	r3, r1
   23da2:	ebbb 0303 	subs.w	r3, fp, r3
   23da6:	bf34      	ite	cc
   23da8:	2201      	movcc	r2, #1
   23daa:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   23dac:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   23dae:	bf18      	it	ne
   23db0:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   23db2:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   23db6:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   23dba:	9b01      	ldr	r3, [sp, #4]
   23dbc:	b242      	sxtb	r2, r0
   23dbe:	429a      	cmp	r2, r3
   23dc0:	dbe2      	blt.n	23d88 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   23dc2:	1a73      	subs	r3, r6, r1
   23dc4:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23dc6:	4629      	mov	r1, r5
   23dc8:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   23dca:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23dcc:	f7ff fe2f 	bl	23a2e <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23dd0:	ab24      	add	r3, sp, #144	; 0x90
   23dd2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23dd6:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23dd8:	f853 2c80 	ldr.w	r2, [r3, #-128]
   23ddc:	f857 3c80 	ldr.w	r3, [r7, #-128]
   23de0:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   23de4:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23de8:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   23dea:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23dec:	f7ff fe1f 	bl	23a2e <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   23df0:	b224      	sxth	r4, r4
   23df2:	e7a8      	b.n	23d46 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23df4:	ab24      	add	r3, sp, #144	; 0x90
   23df6:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   23df8:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   23dfc:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23dfe:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   23e02:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   23e06:	e7d8      	b.n	23dba <uECC_vli_mmod+0xe2>

00023e08 <uECC_vli_modMult_fast>:
{
   23e08:	b530      	push	{r4, r5, lr}
   23e0a:	461c      	mov	r4, r3
   23e0c:	b091      	sub	sp, #68	; 0x44
   23e0e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   23e10:	f993 3000 	ldrsb.w	r3, [r3]
   23e14:	4668      	mov	r0, sp
   23e16:	f7ff fe33 	bl	23a80 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   23e1a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   23e1e:	4669      	mov	r1, sp
   23e20:	4628      	mov	r0, r5
   23e22:	4798      	blx	r3
}
   23e24:	b011      	add	sp, #68	; 0x44
   23e26:	bd30      	pop	{r4, r5, pc}

00023e28 <uECC_vli_modSquare_fast>:
{
   23e28:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   23e2a:	460a      	mov	r2, r1
   23e2c:	f7ff bfec 	b.w	23e08 <uECC_vli_modMult_fast>

00023e30 <double_jacobian_default>:
{
   23e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   23e34:	f993 6000 	ldrsb.w	r6, [r3]
{
   23e38:	b092      	sub	sp, #72	; 0x48
   23e3a:	4604      	mov	r4, r0
   23e3c:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   23e3e:	4610      	mov	r0, r2
   23e40:	4631      	mov	r1, r6
{
   23e42:	4615      	mov	r5, r2
   23e44:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   23e46:	f7ff fe91 	bl	23b6c <uECC_vli_isZero>
   23e4a:	2800      	cmp	r0, #0
   23e4c:	f040 8091 	bne.w	23f72 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   23e50:	463a      	mov	r2, r7
   23e52:	4649      	mov	r1, r9
   23e54:	a802      	add	r0, sp, #8
   23e56:	f7ff ffe7 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   23e5a:	463b      	mov	r3, r7
   23e5c:	aa02      	add	r2, sp, #8
   23e5e:	4621      	mov	r1, r4
   23e60:	a80a      	add	r0, sp, #40	; 0x28
   23e62:	f7ff ffd1 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   23e66:	a902      	add	r1, sp, #8
   23e68:	4608      	mov	r0, r1
   23e6a:	463a      	mov	r2, r7
   23e6c:	f7ff ffdc 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23e70:	463b      	mov	r3, r7
   23e72:	462a      	mov	r2, r5
   23e74:	4649      	mov	r1, r9
   23e76:	4648      	mov	r0, r9
   23e78:	f7ff ffc6 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23e7c:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23e80:	463a      	mov	r2, r7
   23e82:	4629      	mov	r1, r5
   23e84:	4628      	mov	r0, r5
   23e86:	f7ff ffcf 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23e8a:	4643      	mov	r3, r8
   23e8c:	462a      	mov	r2, r5
   23e8e:	4621      	mov	r1, r4
   23e90:	4620      	mov	r0, r4
   23e92:	9600      	str	r6, [sp, #0]
   23e94:	f7ff fef5 	bl	23c82 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   23e98:	4643      	mov	r3, r8
   23e9a:	462a      	mov	r2, r5
   23e9c:	4629      	mov	r1, r5
   23e9e:	4628      	mov	r0, r5
   23ea0:	9600      	str	r6, [sp, #0]
   23ea2:	f7ff feee 	bl	23c82 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   23ea6:	4643      	mov	r3, r8
   23ea8:	462a      	mov	r2, r5
   23eaa:	4621      	mov	r1, r4
   23eac:	4628      	mov	r0, r5
   23eae:	9600      	str	r6, [sp, #0]
   23eb0:	f7ff ff00 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   23eb4:	463b      	mov	r3, r7
   23eb6:	462a      	mov	r2, r5
   23eb8:	4621      	mov	r1, r4
   23eba:	4620      	mov	r0, r4
   23ebc:	f7ff ffa4 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   23ec0:	4643      	mov	r3, r8
   23ec2:	4622      	mov	r2, r4
   23ec4:	4621      	mov	r1, r4
   23ec6:	4628      	mov	r0, r5
   23ec8:	9600      	str	r6, [sp, #0]
   23eca:	f7ff feda 	bl	23c82 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   23ece:	4643      	mov	r3, r8
   23ed0:	9600      	str	r6, [sp, #0]
   23ed2:	462a      	mov	r2, r5
   23ed4:	4621      	mov	r1, r4
   23ed6:	4620      	mov	r0, r4
   23ed8:	f7ff fed3 	bl	23c82 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23edc:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   23ede:	07db      	lsls	r3, r3, #31
   23ee0:	d54a      	bpl.n	23f78 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23ee2:	4633      	mov	r3, r6
   23ee4:	4642      	mov	r2, r8
   23ee6:	4621      	mov	r1, r4
   23ee8:	4620      	mov	r0, r4
   23eea:	f7ff fd86 	bl	239fa <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   23eee:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23ef0:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   23ef2:	4620      	mov	r0, r4
   23ef4:	f7ff fd9b 	bl	23a2e <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   23ef8:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   23efc:	3b01      	subs	r3, #1
   23efe:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   23f02:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   23f06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   23f0a:	463a      	mov	r2, r7
   23f0c:	4621      	mov	r1, r4
   23f0e:	4628      	mov	r0, r5
   23f10:	f7ff ff8a 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   23f14:	4643      	mov	r3, r8
   23f16:	aa0a      	add	r2, sp, #40	; 0x28
   23f18:	4629      	mov	r1, r5
   23f1a:	4628      	mov	r0, r5
   23f1c:	9600      	str	r6, [sp, #0]
   23f1e:	f7ff fec9 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   23f22:	4643      	mov	r3, r8
   23f24:	aa0a      	add	r2, sp, #40	; 0x28
   23f26:	4629      	mov	r1, r5
   23f28:	4628      	mov	r0, r5
   23f2a:	9600      	str	r6, [sp, #0]
   23f2c:	f7ff fec2 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   23f30:	a90a      	add	r1, sp, #40	; 0x28
   23f32:	4608      	mov	r0, r1
   23f34:	4643      	mov	r3, r8
   23f36:	462a      	mov	r2, r5
   23f38:	9600      	str	r6, [sp, #0]
   23f3a:	f7ff febb 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   23f3e:	463b      	mov	r3, r7
   23f40:	aa0a      	add	r2, sp, #40	; 0x28
   23f42:	4621      	mov	r1, r4
   23f44:	4620      	mov	r0, r4
   23f46:	f7ff ff5f 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   23f4a:	aa02      	add	r2, sp, #8
   23f4c:	4643      	mov	r3, r8
   23f4e:	4610      	mov	r0, r2
   23f50:	4621      	mov	r1, r4
   23f52:	9600      	str	r6, [sp, #0]
   23f54:	f7ff feae 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   23f58:	4632      	mov	r2, r6
   23f5a:	4629      	mov	r1, r5
   23f5c:	4620      	mov	r0, r4
   23f5e:	f7ff fe3f 	bl	23be0 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23f62:	4649      	mov	r1, r9
   23f64:	4628      	mov	r0, r5
   23f66:	f7ff fe3b 	bl	23be0 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   23f6a:	a902      	add	r1, sp, #8
   23f6c:	4648      	mov	r0, r9
   23f6e:	f7ff fe37 	bl	23be0 <uECC_vli_set>
}
   23f72:	b012      	add	sp, #72	; 0x48
   23f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   23f78:	4631      	mov	r1, r6
   23f7a:	4620      	mov	r0, r4
   23f7c:	f7ff fd57 	bl	23a2e <uECC_vli_rshift1>
   23f80:	e7c3      	b.n	23f0a <double_jacobian_default+0xda>

00023f82 <x_side_default>:
{
   23f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f86:	4615      	mov	r5, r2
   23f88:	b08a      	sub	sp, #40	; 0x28
   23f8a:	4604      	mov	r4, r0
   23f8c:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23f8e:	221c      	movs	r2, #28
   23f90:	2100      	movs	r1, #0
   23f92:	a803      	add	r0, sp, #12
   23f94:	f000 fe87 	bl	24ca6 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23f98:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   23f9a:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23f9e:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23fa0:	462a      	mov	r2, r5
   23fa2:	4631      	mov	r1, r6
   23fa4:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23fa6:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23fa8:	f7ff ff3e 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23fac:	463b      	mov	r3, r7
   23fae:	aa02      	add	r2, sp, #8
   23fb0:	4621      	mov	r1, r4
   23fb2:	4620      	mov	r0, r4
   23fb4:	f8cd 8000 	str.w	r8, [sp]
   23fb8:	f7ff fe7c 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   23fbc:	462b      	mov	r3, r5
   23fbe:	4632      	mov	r2, r6
   23fc0:	4621      	mov	r1, r4
   23fc2:	4620      	mov	r0, r4
   23fc4:	f7ff ff20 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   23fc8:	f8cd 8000 	str.w	r8, [sp]
   23fcc:	463b      	mov	r3, r7
   23fce:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23fd2:	4621      	mov	r1, r4
   23fd4:	4620      	mov	r0, r4
   23fd6:	f7ff fe54 	bl	23c82 <uECC_vli_modAdd>
}
   23fda:	b00a      	add	sp, #40	; 0x28
   23fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023fe0 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23fe4:	b09a      	sub	sp, #104	; 0x68
   23fe6:	4616      	mov	r6, r2
   23fe8:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23fec:	4644      	mov	r4, r8
{
   23fee:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   23ff0:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23ff4:	9500      	str	r5, [sp, #0]
{
   23ff6:	4607      	mov	r7, r0
   23ff8:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23ffa:	4623      	mov	r3, r4
   23ffc:	4602      	mov	r2, r0
   23ffe:	4631      	mov	r1, r6
   24000:	a802      	add	r0, sp, #8
   24002:	f7ff fe57 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   24006:	a902      	add	r1, sp, #8
   24008:	4642      	mov	r2, r8
   2400a:	4608      	mov	r0, r1
   2400c:	f7ff ff0c 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   24010:	4643      	mov	r3, r8
   24012:	aa02      	add	r2, sp, #8
   24014:	4639      	mov	r1, r7
   24016:	4638      	mov	r0, r7
   24018:	f7ff fef6 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2401c:	4643      	mov	r3, r8
   2401e:	aa02      	add	r2, sp, #8
   24020:	4631      	mov	r1, r6
   24022:	4630      	mov	r0, r6
   24024:	f7ff fef0 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   24028:	4623      	mov	r3, r4
   2402a:	4652      	mov	r2, sl
   2402c:	4649      	mov	r1, r9
   2402e:	a802      	add	r0, sp, #8
   24030:	9500      	str	r5, [sp, #0]
   24032:	f7ff fe26 	bl	23c82 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   24036:	4623      	mov	r3, r4
   24038:	4652      	mov	r2, sl
   2403a:	4649      	mov	r1, r9
   2403c:	4648      	mov	r0, r9
   2403e:	9500      	str	r5, [sp, #0]
   24040:	f7ff fe38 	bl	23cb4 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   24044:	4623      	mov	r3, r4
   24046:	463a      	mov	r2, r7
   24048:	4631      	mov	r1, r6
   2404a:	a80a      	add	r0, sp, #40	; 0x28
   2404c:	9500      	str	r5, [sp, #0]
   2404e:	f7ff fe31 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   24052:	4643      	mov	r3, r8
   24054:	aa0a      	add	r2, sp, #40	; 0x28
   24056:	4651      	mov	r1, sl
   24058:	4650      	mov	r0, sl
   2405a:	f7ff fed5 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2405e:	4623      	mov	r3, r4
   24060:	4632      	mov	r2, r6
   24062:	4639      	mov	r1, r7
   24064:	a80a      	add	r0, sp, #40	; 0x28
   24066:	9500      	str	r5, [sp, #0]
   24068:	f7ff fe0b 	bl	23c82 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2406c:	4642      	mov	r2, r8
   2406e:	4649      	mov	r1, r9
   24070:	4630      	mov	r0, r6
   24072:	f7ff fed9 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   24076:	4623      	mov	r3, r4
   24078:	aa0a      	add	r2, sp, #40	; 0x28
   2407a:	4631      	mov	r1, r6
   2407c:	4630      	mov	r0, r6
   2407e:	9500      	str	r5, [sp, #0]
   24080:	f7ff fe18 	bl	23cb4 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   24084:	4623      	mov	r3, r4
   24086:	4632      	mov	r2, r6
   24088:	4639      	mov	r1, r7
   2408a:	a812      	add	r0, sp, #72	; 0x48
   2408c:	9500      	str	r5, [sp, #0]
   2408e:	f7ff fe11 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   24092:	4643      	mov	r3, r8
   24094:	aa12      	add	r2, sp, #72	; 0x48
   24096:	4649      	mov	r1, r9
   24098:	4648      	mov	r0, r9
   2409a:	f7ff feb5 	bl	23e08 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2409e:	4623      	mov	r3, r4
   240a0:	4652      	mov	r2, sl
   240a2:	4649      	mov	r1, r9
   240a4:	4648      	mov	r0, r9
   240a6:	9500      	str	r5, [sp, #0]
   240a8:	f7ff fe04 	bl	23cb4 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   240ac:	4642      	mov	r2, r8
   240ae:	a902      	add	r1, sp, #8
   240b0:	a812      	add	r0, sp, #72	; 0x48
   240b2:	f7ff feb9 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   240b6:	a912      	add	r1, sp, #72	; 0x48
   240b8:	4623      	mov	r3, r4
   240ba:	aa0a      	add	r2, sp, #40	; 0x28
   240bc:	4608      	mov	r0, r1
   240be:	9500      	str	r5, [sp, #0]
   240c0:	f7ff fdf8 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   240c4:	4623      	mov	r3, r4
   240c6:	463a      	mov	r2, r7
   240c8:	a912      	add	r1, sp, #72	; 0x48
   240ca:	a80a      	add	r0, sp, #40	; 0x28
   240cc:	9500      	str	r5, [sp, #0]
   240ce:	f7ff fdf1 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   240d2:	a90a      	add	r1, sp, #40	; 0x28
   240d4:	4643      	mov	r3, r8
   240d6:	aa02      	add	r2, sp, #8
   240d8:	4608      	mov	r0, r1
   240da:	f7ff fe95 	bl	23e08 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   240de:	4623      	mov	r3, r4
   240e0:	4652      	mov	r2, sl
   240e2:	a90a      	add	r1, sp, #40	; 0x28
   240e4:	4650      	mov	r0, sl
   240e6:	9500      	str	r5, [sp, #0]
   240e8:	f7ff fde4 	bl	23cb4 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   240ec:	462a      	mov	r2, r5
   240ee:	a912      	add	r1, sp, #72	; 0x48
   240f0:	4638      	mov	r0, r7
   240f2:	f7ff fd75 	bl	23be0 <uECC_vli_set>
}
   240f6:	b01a      	add	sp, #104	; 0x68
   240f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000240fc <uECC_vli_modInv>:
{
   240fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   240fe:	460f      	mov	r7, r1
   24100:	b0a1      	sub	sp, #132	; 0x84
   24102:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   24104:	4619      	mov	r1, r3
   24106:	4638      	mov	r0, r7
{
   24108:	4615      	mov	r5, r2
   2410a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2410c:	f7ff fd2e 	bl	23b6c <uECC_vli_isZero>
   24110:	b128      	cbz	r0, 2411e <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   24112:	4630      	mov	r0, r6
}
   24114:	b021      	add	sp, #132	; 0x84
   24116:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   2411a:	f7ff bd1c 	b.w	23b56 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   2411e:	4622      	mov	r2, r4
   24120:	4639      	mov	r1, r7
   24122:	4668      	mov	r0, sp
   24124:	f7ff fd5c 	bl	23be0 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   24128:	4629      	mov	r1, r5
   2412a:	a808      	add	r0, sp, #32
   2412c:	f7ff fd58 	bl	23be0 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   24130:	a810      	add	r0, sp, #64	; 0x40
   24132:	4621      	mov	r1, r4
   24134:	f7ff fd0f 	bl	23b56 <uECC_vli_clear>
	u[0] = 1;
   24138:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2413a:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2413c:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2413e:	f7ff fd0a 	bl	23b56 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   24142:	4622      	mov	r2, r4
   24144:	a908      	add	r1, sp, #32
   24146:	4668      	mov	r0, sp
   24148:	f7ff fd56 	bl	23bf8 <uECC_vli_cmp_unsafe>
   2414c:	b930      	cbnz	r0, 2415c <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   2414e:	4622      	mov	r2, r4
   24150:	a910      	add	r1, sp, #64	; 0x40
   24152:	4630      	mov	r0, r6
   24154:	f7ff fd44 	bl	23be0 <uECC_vli_set>
}
   24158:	b021      	add	sp, #132	; 0x84
   2415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   2415c:	9b00      	ldr	r3, [sp, #0]
   2415e:	07da      	lsls	r2, r3, #31
   24160:	d409      	bmi.n	24176 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   24162:	4621      	mov	r1, r4
   24164:	4668      	mov	r0, sp
   24166:	f7ff fc62 	bl	23a2e <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2416a:	4622      	mov	r2, r4
   2416c:	4629      	mov	r1, r5
   2416e:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   24170:	f7ff fc6a 	bl	23a48 <vli_modInv_update>
   24174:	e7e5      	b.n	24142 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   24176:	9b08      	ldr	r3, [sp, #32]
   24178:	07db      	lsls	r3, r3, #31
   2417a:	d407      	bmi.n	2418c <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   2417c:	4621      	mov	r1, r4
   2417e:	a808      	add	r0, sp, #32
   24180:	f7ff fc55 	bl	23a2e <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   24184:	4622      	mov	r2, r4
   24186:	4629      	mov	r1, r5
   24188:	a818      	add	r0, sp, #96	; 0x60
   2418a:	e7f1      	b.n	24170 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   2418c:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2418e:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   24190:	dd1c      	ble.n	241cc <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   24192:	aa08      	add	r2, sp, #32
   24194:	4669      	mov	r1, sp
   24196:	4668      	mov	r0, sp
   24198:	f7ff fd58 	bl	23c4c <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2419c:	4621      	mov	r1, r4
   2419e:	4668      	mov	r0, sp
   241a0:	f7ff fc45 	bl	23a2e <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   241a4:	4622      	mov	r2, r4
   241a6:	a918      	add	r1, sp, #96	; 0x60
   241a8:	a810      	add	r0, sp, #64	; 0x40
   241aa:	f7ff fd25 	bl	23bf8 <uECC_vli_cmp_unsafe>
   241ae:	2800      	cmp	r0, #0
   241b0:	da05      	bge.n	241be <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   241b2:	a910      	add	r1, sp, #64	; 0x40
   241b4:	4623      	mov	r3, r4
   241b6:	462a      	mov	r2, r5
   241b8:	4608      	mov	r0, r1
   241ba:	f7ff fc1e 	bl	239fa <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   241be:	a910      	add	r1, sp, #64	; 0x40
   241c0:	4623      	mov	r3, r4
   241c2:	aa18      	add	r2, sp, #96	; 0x60
   241c4:	4608      	mov	r0, r1
   241c6:	f7ff fd41 	bl	23c4c <uECC_vli_sub>
   241ca:	e7ce      	b.n	2416a <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   241cc:	466a      	mov	r2, sp
   241ce:	a808      	add	r0, sp, #32
   241d0:	f7ff fd3c 	bl	23c4c <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   241d4:	4621      	mov	r1, r4
   241d6:	a808      	add	r0, sp, #32
   241d8:	f7ff fc29 	bl	23a2e <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   241dc:	4622      	mov	r2, r4
   241de:	a910      	add	r1, sp, #64	; 0x40
   241e0:	a818      	add	r0, sp, #96	; 0x60
   241e2:	f7ff fd09 	bl	23bf8 <uECC_vli_cmp_unsafe>
   241e6:	2800      	cmp	r0, #0
   241e8:	da05      	bge.n	241f6 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   241ea:	a918      	add	r1, sp, #96	; 0x60
   241ec:	4623      	mov	r3, r4
   241ee:	462a      	mov	r2, r5
   241f0:	4608      	mov	r0, r1
   241f2:	f7ff fc02 	bl	239fa <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   241f6:	a918      	add	r1, sp, #96	; 0x60
   241f8:	4623      	mov	r3, r4
   241fa:	aa10      	add	r2, sp, #64	; 0x40
   241fc:	4608      	mov	r0, r1
   241fe:	f7ff fd25 	bl	23c4c <uECC_vli_sub>
   24202:	e7bf      	b.n	24184 <uECC_vli_modInv+0x88>

00024204 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   24204:	7809      	ldrb	r1, [r1, #0]
   24206:	0049      	lsls	r1, r1, #1
   24208:	b249      	sxtb	r1, r1
   2420a:	f7ff bcaf 	b.w	23b6c <uECC_vli_isZero>

0002420e <apply_z>:
{
   2420e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24210:	4615      	mov	r5, r2
   24212:	b089      	sub	sp, #36	; 0x24
   24214:	461c      	mov	r4, r3
   24216:	4607      	mov	r7, r0
   24218:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2421a:	461a      	mov	r2, r3
   2421c:	4629      	mov	r1, r5
   2421e:	4668      	mov	r0, sp
   24220:	f7ff fe02 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   24224:	4623      	mov	r3, r4
   24226:	466a      	mov	r2, sp
   24228:	4639      	mov	r1, r7
   2422a:	4638      	mov	r0, r7
   2422c:	f7ff fdec 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   24230:	4623      	mov	r3, r4
   24232:	462a      	mov	r2, r5
   24234:	4669      	mov	r1, sp
   24236:	4668      	mov	r0, sp
   24238:	f7ff fde6 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2423c:	4623      	mov	r3, r4
   2423e:	466a      	mov	r2, sp
   24240:	4631      	mov	r1, r6
   24242:	4630      	mov	r0, r6
   24244:	f7ff fde0 	bl	23e08 <uECC_vli_modMult_fast>
}
   24248:	b009      	add	sp, #36	; 0x24
   2424a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002424c <XYcZ_add>:
{
   2424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24250:	b08a      	sub	sp, #40	; 0x28
   24252:	4614      	mov	r4, r2
   24254:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   24258:	4655      	mov	r5, sl
{
   2425a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2425c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   24260:	9600      	str	r6, [sp, #0]
{
   24262:	4680      	mov	r8, r0
   24264:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   24266:	462b      	mov	r3, r5
   24268:	4602      	mov	r2, r0
   2426a:	4621      	mov	r1, r4
   2426c:	a802      	add	r0, sp, #8
   2426e:	f7ff fd21 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   24272:	a902      	add	r1, sp, #8
   24274:	4652      	mov	r2, sl
   24276:	4608      	mov	r0, r1
   24278:	f7ff fdd6 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2427c:	4653      	mov	r3, sl
   2427e:	aa02      	add	r2, sp, #8
   24280:	4641      	mov	r1, r8
   24282:	4640      	mov	r0, r8
   24284:	f7ff fdc0 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   24288:	4653      	mov	r3, sl
   2428a:	aa02      	add	r2, sp, #8
   2428c:	4621      	mov	r1, r4
   2428e:	4620      	mov	r0, r4
   24290:	f7ff fdba 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   24294:	462b      	mov	r3, r5
   24296:	464a      	mov	r2, r9
   24298:	4639      	mov	r1, r7
   2429a:	4638      	mov	r0, r7
   2429c:	9600      	str	r6, [sp, #0]
   2429e:	f7ff fd09 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   242a2:	4652      	mov	r2, sl
   242a4:	4639      	mov	r1, r7
   242a6:	a802      	add	r0, sp, #8
   242a8:	f7ff fdbe 	bl	23e28 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   242ac:	a902      	add	r1, sp, #8
   242ae:	462b      	mov	r3, r5
   242b0:	4642      	mov	r2, r8
   242b2:	4608      	mov	r0, r1
   242b4:	9600      	str	r6, [sp, #0]
   242b6:	f7ff fcfd 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   242ba:	a902      	add	r1, sp, #8
   242bc:	462b      	mov	r3, r5
   242be:	4622      	mov	r2, r4
   242c0:	4608      	mov	r0, r1
   242c2:	9600      	str	r6, [sp, #0]
   242c4:	f7ff fcf6 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   242c8:	462b      	mov	r3, r5
   242ca:	4642      	mov	r2, r8
   242cc:	4621      	mov	r1, r4
   242ce:	4620      	mov	r0, r4
   242d0:	9600      	str	r6, [sp, #0]
   242d2:	f7ff fcef 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   242d6:	4653      	mov	r3, sl
   242d8:	4622      	mov	r2, r4
   242da:	4649      	mov	r1, r9
   242dc:	4648      	mov	r0, r9
   242de:	f7ff fd93 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   242e2:	462b      	mov	r3, r5
   242e4:	aa02      	add	r2, sp, #8
   242e6:	4641      	mov	r1, r8
   242e8:	4620      	mov	r0, r4
   242ea:	9600      	str	r6, [sp, #0]
   242ec:	f7ff fce2 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   242f0:	4653      	mov	r3, sl
   242f2:	4622      	mov	r2, r4
   242f4:	4639      	mov	r1, r7
   242f6:	4638      	mov	r0, r7
   242f8:	f7ff fd86 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   242fc:	462b      	mov	r3, r5
   242fe:	464a      	mov	r2, r9
   24300:	4639      	mov	r1, r7
   24302:	4638      	mov	r0, r7
   24304:	9600      	str	r6, [sp, #0]
   24306:	f7ff fcd5 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2430a:	4632      	mov	r2, r6
   2430c:	a902      	add	r1, sp, #8
   2430e:	4620      	mov	r0, r4
   24310:	f7ff fc66 	bl	23be0 <uECC_vli_set>
}
   24314:	b00a      	add	sp, #40	; 0x28
   24316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002431a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2431a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2431e:	b0b1      	sub	sp, #196	; 0xc4
   24320:	e9cd 0103 	strd	r0, r1, [sp, #12]
   24324:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   24326:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2432a:	a818      	add	r0, sp, #96	; 0x60
{
   2432c:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2432e:	463a      	mov	r2, r7
{
   24330:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   24332:	f7ff fc55 	bl	23be0 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   24336:	00bb      	lsls	r3, r7, #2
   24338:	9305      	str	r3, [sp, #20]
   2433a:	9b04      	ldr	r3, [sp, #16]
   2433c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   24340:	4619      	mov	r1, r3
   24342:	a828      	add	r0, sp, #160	; 0xa0
   24344:	9302      	str	r3, [sp, #8]
   24346:	f7ff fc4b 	bl	23be0 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2434a:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   2434e:	2d00      	cmp	r5, #0
   24350:	f000 8086 	beq.w	24460 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   24354:	4632      	mov	r2, r6
   24356:	4629      	mov	r1, r5
   24358:	a808      	add	r0, sp, #32
   2435a:	f7ff fc41 	bl	23be0 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2435e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   24362:	4632      	mov	r2, r6
   24364:	a918      	add	r1, sp, #96	; 0x60
   24366:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   24368:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2436c:	f7ff fc38 	bl	23be0 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   24370:	a928      	add	r1, sp, #160	; 0xa0
   24372:	4648      	mov	r0, r9
   24374:	f7ff fc34 	bl	23be0 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   24378:	4623      	mov	r3, r4
   2437a:	aa08      	add	r2, sp, #32
   2437c:	a818      	add	r0, sp, #96	; 0x60
   2437e:	f7ff ff46 	bl	2420e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   24382:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   24386:	4623      	mov	r3, r4
   24388:	aa08      	add	r2, sp, #32
   2438a:	a928      	add	r1, sp, #160	; 0xa0
   2438c:	a818      	add	r0, sp, #96	; 0x60
   2438e:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   24390:	4623      	mov	r3, r4
   24392:	aa08      	add	r2, sp, #32
   24394:	4649      	mov	r1, r9
   24396:	4640      	mov	r0, r8
   24398:	f7ff ff39 	bl	2420e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2439c:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   243a0:	3d02      	subs	r5, #2
   243a2:	b22d      	sxth	r5, r5
   243a4:	2d00      	cmp	r5, #0
   243a6:	dc62      	bgt.n	2446e <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   243a8:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   243ac:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   243ae:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   243b2:	ab10      	add	r3, sp, #64	; 0x40
   243b4:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   243b8:	43ed      	mvns	r5, r5
   243ba:	ab20      	add	r3, sp, #128	; 0x80
   243bc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   243c0:	f005 0501 	and.w	r5, r5, #1
   243c4:	ab10      	add	r3, sp, #64	; 0x40
   243c6:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   243ca:	ab20      	add	r3, sp, #128	; 0x80
   243cc:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   243d0:	462b      	mov	r3, r5
   243d2:	464a      	mov	r2, r9
   243d4:	4631      	mov	r1, r6
   243d6:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   243d8:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   243dc:	f7ff fe00 	bl	23fe0 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   243e0:	4653      	mov	r3, sl
   243e2:	aa10      	add	r2, sp, #64	; 0x40
   243e4:	a918      	add	r1, sp, #96	; 0x60
   243e6:	a808      	add	r0, sp, #32
   243e8:	9700      	str	r7, [sp, #0]
   243ea:	f7ff fc63 	bl	23cb4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   243ee:	a908      	add	r1, sp, #32
   243f0:	4623      	mov	r3, r4
   243f2:	4632      	mov	r2, r6
   243f4:	4608      	mov	r0, r1
   243f6:	f7ff fd07 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   243fa:	a908      	add	r1, sp, #32
   243fc:	9a04      	ldr	r2, [sp, #16]
   243fe:	4623      	mov	r3, r4
   24400:	4608      	mov	r0, r1
   24402:	f7ff fd01 	bl	23e08 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   24406:	a908      	add	r1, sp, #32
   24408:	463b      	mov	r3, r7
   2440a:	4652      	mov	r2, sl
   2440c:	4608      	mov	r0, r1
   2440e:	f7ff fe75 	bl	240fc <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   24412:	a908      	add	r1, sp, #32
   24414:	9a02      	ldr	r2, [sp, #8]
   24416:	4623      	mov	r3, r4
   24418:	4608      	mov	r0, r1
   2441a:	f7ff fcf5 	bl	23e08 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2441e:	a908      	add	r1, sp, #32
   24420:	4623      	mov	r3, r4
   24422:	4642      	mov	r2, r8
   24424:	4608      	mov	r0, r1
   24426:	f7ff fcef 	bl	23e08 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2442a:	4633      	mov	r3, r6
   2442c:	4642      	mov	r2, r8
   2442e:	4629      	mov	r1, r5
   24430:	4648      	mov	r0, r9
   24432:	9400      	str	r4, [sp, #0]
   24434:	f7ff ff0a 	bl	2424c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   24438:	4623      	mov	r3, r4
   2443a:	aa08      	add	r2, sp, #32
   2443c:	a920      	add	r1, sp, #128	; 0x80
   2443e:	a810      	add	r0, sp, #64	; 0x40
   24440:	f7ff fee5 	bl	2420e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   24444:	9803      	ldr	r0, [sp, #12]
   24446:	463a      	mov	r2, r7
   24448:	a910      	add	r1, sp, #64	; 0x40
   2444a:	f7ff fbc9 	bl	23be0 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2444e:	9803      	ldr	r0, [sp, #12]
   24450:	9b05      	ldr	r3, [sp, #20]
   24452:	a920      	add	r1, sp, #128	; 0x80
   24454:	4418      	add	r0, r3
   24456:	f7ff fbc3 	bl	23be0 <uECC_vli_set>
}
   2445a:	b031      	add	sp, #196	; 0xc4
   2445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   24460:	4631      	mov	r1, r6
   24462:	a808      	add	r0, sp, #32
   24464:	f7ff fb77 	bl	23b56 <uECC_vli_clear>
		z[0] = 1;
   24468:	2301      	movs	r3, #1
   2446a:	9308      	str	r3, [sp, #32]
   2446c:	e777      	b.n	2435e <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2446e:	4629      	mov	r1, r5
   24470:	4650      	mov	r0, sl
   24472:	f7ff fb8a 	bl	23b8a <uECC_vli_testBit>
   24476:	fab0 f680 	clz	r6, r0
   2447a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2447c:	f1c6 0101 	rsb	r1, r6, #1
   24480:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   24484:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   24488:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2448c:	4633      	mov	r3, r6
   2448e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   24492:	465a      	mov	r2, fp
   24494:	9400      	str	r4, [sp, #0]
   24496:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2449a:	f7ff fda1 	bl	23fe0 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2449e:	9907      	ldr	r1, [sp, #28]
   244a0:	9806      	ldr	r0, [sp, #24]
   244a2:	9400      	str	r4, [sp, #0]
   244a4:	460b      	mov	r3, r1
   244a6:	4602      	mov	r2, r0
   244a8:	4631      	mov	r1, r6
   244aa:	4658      	mov	r0, fp
   244ac:	f7ff fece 	bl	2424c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   244b0:	3d01      	subs	r5, #1
   244b2:	e776      	b.n	243a2 <EccPoint_mult+0x88>

000244b4 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   244b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   244b8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   244bc:	f119 081f 	adds.w	r8, r9, #31
{
   244c0:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   244c2:	bf48      	it	mi
   244c4:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   244c8:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   244ca:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   244ce:	3524      	adds	r5, #36	; 0x24
   244d0:	4601      	mov	r1, r0
{
   244d2:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   244d4:	4643      	mov	r3, r8
   244d6:	462a      	mov	r2, r5
   244d8:	4630      	mov	r0, r6
   244da:	f7ff fa8e 	bl	239fa <uECC_vli_add>
   244de:	4604      	mov	r4, r0
   244e0:	b990      	cbnz	r0, 24508 <regularize_k+0x54>
   244e2:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   244e6:	da06      	bge.n	244f6 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   244e8:	4649      	mov	r1, r9
   244ea:	4630      	mov	r0, r6
   244ec:	f7ff fb4d 	bl	23b8a <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   244f0:	1e04      	subs	r4, r0, #0
   244f2:	bf18      	it	ne
   244f4:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   244f6:	4643      	mov	r3, r8
   244f8:	462a      	mov	r2, r5
   244fa:	4631      	mov	r1, r6
   244fc:	4638      	mov	r0, r7
   244fe:	f7ff fa7c 	bl	239fa <uECC_vli_add>

	return carry;
}
   24502:	4620      	mov	r0, r4
   24504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   24508:	2401      	movs	r4, #1
   2450a:	e7f4      	b.n	244f6 <regularize_k+0x42>

0002450c <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2450c:	b530      	push	{r4, r5, lr}
   2450e:	4614      	mov	r4, r2
   24510:	b095      	sub	sp, #84	; 0x54
   24512:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   24514:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   24516:	4623      	mov	r3, r4
{
   24518:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2451a:	a904      	add	r1, sp, #16
   2451c:	9102      	str	r1, [sp, #8]
   2451e:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   24520:	f7ff ffc8 	bl	244b4 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   24524:	fab0 f380 	clz	r3, r0
   24528:	095b      	lsrs	r3, r3, #5
   2452a:	aa14      	add	r2, sp, #80	; 0x50
   2452c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   24530:	8863      	ldrh	r3, [r4, #2]
   24532:	9401      	str	r4, [sp, #4]
   24534:	3301      	adds	r3, #1
   24536:	b21b      	sxth	r3, r3
   24538:	9300      	str	r3, [sp, #0]
   2453a:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2453e:	2300      	movs	r3, #0
   24540:	f104 0144 	add.w	r1, r4, #68	; 0x44
   24544:	4628      	mov	r0, r5
   24546:	f7ff fee8 	bl	2431a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2454a:	4621      	mov	r1, r4
   2454c:	4628      	mov	r0, r5
   2454e:	f7ff fe59 	bl	24204 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   24552:	fab0 f080 	clz	r0, r0
   24556:	0940      	lsrs	r0, r0, #5
   24558:	b015      	add	sp, #84	; 0x54
   2455a:	bd30      	pop	{r4, r5, pc}

0002455c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2455c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2455e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   24560:	1e4f      	subs	r7, r1, #1
   24562:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   24564:	428c      	cmp	r4, r1
   24566:	f105 0501 	add.w	r5, r5, #1
   2456a:	db00      	blt.n	2456e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2456c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2456e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   24570:	f023 0603 	bic.w	r6, r3, #3
   24574:	f003 0303 	and.w	r3, r3, #3
   24578:	5996      	ldr	r6, [r2, r6]
   2457a:	00db      	lsls	r3, r3, #3
   2457c:	fa26 f303 	lsr.w	r3, r6, r3
   24580:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   24582:	e7ee      	b.n	24562 <uECC_vli_nativeToBytes+0x6>

00024584 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   24584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24586:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   24588:	1cd1      	adds	r1, r2, #3
   2458a:	bf48      	it	mi
   2458c:	1d91      	addmi	r1, r2, #6
   2458e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   24592:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   24594:	f7ff fadf 	bl	23b56 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   24598:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2459a:	1e67      	subs	r7, r4, #1
   2459c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2459e:	42a2      	cmp	r2, r4
   245a0:	f105 0501 	add.w	r5, r5, #1
   245a4:	db00      	blt.n	245a8 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   245a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   245a8:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   245aa:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   245ae:	5cb2      	ldrb	r2, [r6, r2]
   245b0:	f003 0303 	and.w	r3, r3, #3
   245b4:	00db      	lsls	r3, r3, #3
   245b6:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   245ba:	5842      	ldr	r2, [r0, r1]
   245bc:	431a      	orrs	r2, r3
   245be:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   245c0:	e7ec      	b.n	2459c <uECC_vli_bytesToNative+0x18>

000245c2 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   245c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   245c4:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   245c6:	f991 6000 	ldrsb.w	r6, [r1]
{
   245ca:	4605      	mov	r5, r0
   245cc:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   245ce:	f7ff fe19 	bl	24204 <EccPoint_isZero>
   245d2:	bb28      	cbnz	r0, 24620 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   245d4:	1d27      	adds	r7, r4, #4
   245d6:	4632      	mov	r2, r6
   245d8:	4629      	mov	r1, r5
   245da:	4638      	mov	r0, r7
   245dc:	f7ff fb0c 	bl	23bf8 <uECC_vli_cmp_unsafe>
   245e0:	2801      	cmp	r0, #1
   245e2:	d120      	bne.n	24626 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   245e4:	4632      	mov	r2, r6
   245e6:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   245ea:	4638      	mov	r0, r7
   245ec:	f7ff fb04 	bl	23bf8 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   245f0:	2801      	cmp	r0, #1
   245f2:	d118      	bne.n	24626 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   245f4:	4622      	mov	r2, r4
   245f6:	4668      	mov	r0, sp
   245f8:	f7ff fc16 	bl	23e28 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   245fc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   24600:	4622      	mov	r2, r4
   24602:	4629      	mov	r1, r5
   24604:	a808      	add	r0, sp, #32
   24606:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   24608:	4632      	mov	r2, r6
   2460a:	a908      	add	r1, sp, #32
   2460c:	4668      	mov	r0, sp
   2460e:	f7ff fb0a 	bl	23c26 <uECC_vli_equal>
		return -3;
   24612:	2800      	cmp	r0, #0
   24614:	bf0c      	ite	eq
   24616:	2000      	moveq	r0, #0
   24618:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   2461c:	b011      	add	sp, #68	; 0x44
   2461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   24620:	f04f 30ff 	mov.w	r0, #4294967295
   24624:	e7fa      	b.n	2461c <uECC_valid_point+0x5a>
		return -2;
   24626:	f06f 0001 	mvn.w	r0, #1
   2462a:	e7f7      	b.n	2461c <uECC_valid_point+0x5a>

0002462c <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2462c:	b570      	push	{r4, r5, r6, lr}
   2462e:	460c      	mov	r4, r1
   24630:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   24632:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   24634:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   24638:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2463a:	4601      	mov	r1, r0
   2463c:	4668      	mov	r0, sp
   2463e:	f7ff ffa1 	bl	24584 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   24642:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   24646:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2464a:	18a9      	adds	r1, r5, r2
   2464c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   24650:	f7ff ff98 	bl	24584 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   24654:	2210      	movs	r2, #16
   24656:	4631      	mov	r1, r6
   24658:	4668      	mov	r0, sp
   2465a:	f7ff facd 	bl	23bf8 <uECC_vli_cmp_unsafe>
   2465e:	b128      	cbz	r0, 2466c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   24660:	4621      	mov	r1, r4
   24662:	4668      	mov	r0, sp
   24664:	f7ff ffad 	bl	245c2 <uECC_valid_point>
}
   24668:	b010      	add	sp, #64	; 0x40
   2466a:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   2466c:	f06f 0003 	mvn.w	r0, #3
   24670:	e7fa      	b.n	24668 <uECC_valid_public_key+0x3c>

00024672 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   24672:	78cb      	ldrb	r3, [r1, #3]
   24674:	7802      	ldrb	r2, [r0, #0]
   24676:	4053      	eors	r3, r2
   24678:	7003      	strb	r3, [r0, #0]
   2467a:	884b      	ldrh	r3, [r1, #2]
   2467c:	7842      	ldrb	r2, [r0, #1]
   2467e:	4053      	eors	r3, r2
   24680:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   24682:	680a      	ldr	r2, [r1, #0]
   24684:	7883      	ldrb	r3, [r0, #2]
   24686:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2468a:	7083      	strb	r3, [r0, #2]
   2468c:	680a      	ldr	r2, [r1, #0]
   2468e:	78c3      	ldrb	r3, [r0, #3]
   24690:	4053      	eors	r3, r2
   24692:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   24694:	79cb      	ldrb	r3, [r1, #7]
   24696:	7902      	ldrb	r2, [r0, #4]
   24698:	4053      	eors	r3, r2
   2469a:	7103      	strb	r3, [r0, #4]
   2469c:	88cb      	ldrh	r3, [r1, #6]
   2469e:	7942      	ldrb	r2, [r0, #5]
   246a0:	4053      	eors	r3, r2
   246a2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   246a4:	684a      	ldr	r2, [r1, #4]
   246a6:	7983      	ldrb	r3, [r0, #6]
   246a8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   246ac:	7183      	strb	r3, [r0, #6]
   246ae:	684a      	ldr	r2, [r1, #4]
   246b0:	79c3      	ldrb	r3, [r0, #7]
   246b2:	4053      	eors	r3, r2
   246b4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   246b6:	7acb      	ldrb	r3, [r1, #11]
   246b8:	7a02      	ldrb	r2, [r0, #8]
   246ba:	4053      	eors	r3, r2
   246bc:	7203      	strb	r3, [r0, #8]
   246be:	7a42      	ldrb	r2, [r0, #9]
   246c0:	894b      	ldrh	r3, [r1, #10]
   246c2:	4053      	eors	r3, r2
   246c4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   246c6:	688a      	ldr	r2, [r1, #8]
   246c8:	7a83      	ldrb	r3, [r0, #10]
   246ca:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   246ce:	7283      	strb	r3, [r0, #10]
   246d0:	688a      	ldr	r2, [r1, #8]
   246d2:	7ac3      	ldrb	r3, [r0, #11]
   246d4:	4053      	eors	r3, r2
   246d6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   246d8:	7bcb      	ldrb	r3, [r1, #15]
   246da:	7b02      	ldrb	r2, [r0, #12]
   246dc:	4053      	eors	r3, r2
   246de:	7303      	strb	r3, [r0, #12]
   246e0:	89cb      	ldrh	r3, [r1, #14]
   246e2:	7b42      	ldrb	r2, [r0, #13]
   246e4:	4053      	eors	r3, r2
   246e6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   246e8:	68ca      	ldr	r2, [r1, #12]
   246ea:	7b83      	ldrb	r3, [r0, #14]
   246ec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   246f0:	7383      	strb	r3, [r0, #14]
   246f2:	68ca      	ldr	r2, [r1, #12]
   246f4:	7bc3      	ldrb	r3, [r0, #15]
   246f6:	4053      	eors	r3, r2
   246f8:	73c3      	strb	r3, [r0, #15]
}
   246fa:	4770      	bx	lr

000246fc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   246fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   246fe:	7802      	ldrb	r2, [r0, #0]
   24700:	f88d 2000 	strb.w	r2, [sp]
   24704:	7942      	ldrb	r2, [r0, #5]
   24706:	f88d 2001 	strb.w	r2, [sp, #1]
   2470a:	7a82      	ldrb	r2, [r0, #10]
   2470c:	f88d 2002 	strb.w	r2, [sp, #2]
   24710:	7bc2      	ldrb	r2, [r0, #15]
   24712:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24716:	7902      	ldrb	r2, [r0, #4]
   24718:	f88d 2004 	strb.w	r2, [sp, #4]
   2471c:	7a42      	ldrb	r2, [r0, #9]
   2471e:	f88d 2005 	strb.w	r2, [sp, #5]
   24722:	7b82      	ldrb	r2, [r0, #14]
   24724:	f88d 2006 	strb.w	r2, [sp, #6]
   24728:	78c2      	ldrb	r2, [r0, #3]
   2472a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2472e:	7a02      	ldrb	r2, [r0, #8]
   24730:	f88d 2008 	strb.w	r2, [sp, #8]
   24734:	7b42      	ldrb	r2, [r0, #13]
   24736:	f88d 2009 	strb.w	r2, [sp, #9]
   2473a:	7882      	ldrb	r2, [r0, #2]
   2473c:	f88d 200a 	strb.w	r2, [sp, #10]
   24740:	79c2      	ldrb	r2, [r0, #7]
   24742:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24746:	7b02      	ldrb	r2, [r0, #12]
   24748:	f88d 200c 	strb.w	r2, [sp, #12]
   2474c:	7842      	ldrb	r2, [r0, #1]
   2474e:	7ac3      	ldrb	r3, [r0, #11]
   24750:	f88d 200d 	strb.w	r2, [sp, #13]
   24754:	7982      	ldrb	r2, [r0, #6]
   24756:	f88d 200e 	strb.w	r2, [sp, #14]
   2475a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2475e:	2310      	movs	r3, #16
   24760:	466a      	mov	r2, sp
   24762:	4619      	mov	r1, r3
   24764:	f7ff f885 	bl	23872 <_copy>
}
   24768:	b005      	add	sp, #20
   2476a:	f85d fb04 	ldr.w	pc, [sp], #4

0002476e <mult_row_column>:
{
   2476e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24770:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24772:	7808      	ldrb	r0, [r1, #0]
{
   24774:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24776:	f7ff f88b 	bl	23890 <_double_byte>
   2477a:	4605      	mov	r5, r0
   2477c:	7860      	ldrb	r0, [r4, #1]
   2477e:	f7ff f887 	bl	23890 <_double_byte>
   24782:	78a2      	ldrb	r2, [r4, #2]
   24784:	7863      	ldrb	r3, [r4, #1]
   24786:	4053      	eors	r3, r2
   24788:	78e2      	ldrb	r2, [r4, #3]
   2478a:	4053      	eors	r3, r2
   2478c:	405d      	eors	r5, r3
   2478e:	4045      	eors	r5, r0
   24790:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24792:	7860      	ldrb	r0, [r4, #1]
   24794:	7827      	ldrb	r7, [r4, #0]
   24796:	f7ff f87b 	bl	23890 <_double_byte>
   2479a:	4605      	mov	r5, r0
   2479c:	78a0      	ldrb	r0, [r4, #2]
   2479e:	f7ff f877 	bl	23890 <_double_byte>
   247a2:	78a3      	ldrb	r3, [r4, #2]
   247a4:	405f      	eors	r7, r3
   247a6:	78e3      	ldrb	r3, [r4, #3]
   247a8:	405f      	eors	r7, r3
   247aa:	407d      	eors	r5, r7
   247ac:	4045      	eors	r5, r0
   247ae:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   247b0:	78a0      	ldrb	r0, [r4, #2]
   247b2:	7865      	ldrb	r5, [r4, #1]
   247b4:	7827      	ldrb	r7, [r4, #0]
   247b6:	f7ff f86b 	bl	23890 <_double_byte>
   247ba:	406f      	eors	r7, r5
   247bc:	4605      	mov	r5, r0
   247be:	78e0      	ldrb	r0, [r4, #3]
   247c0:	f7ff f866 	bl	23890 <_double_byte>
   247c4:	78e3      	ldrb	r3, [r4, #3]
   247c6:	405f      	eors	r7, r3
   247c8:	407d      	eors	r5, r7
   247ca:	4045      	eors	r5, r0
   247cc:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   247ce:	7820      	ldrb	r0, [r4, #0]
   247d0:	f7ff f85e 	bl	23890 <_double_byte>
   247d4:	7863      	ldrb	r3, [r4, #1]
   247d6:	7825      	ldrb	r5, [r4, #0]
   247d8:	405d      	eors	r5, r3
   247da:	78a3      	ldrb	r3, [r4, #2]
   247dc:	405d      	eors	r5, r3
   247de:	4045      	eors	r5, r0
   247e0:	78e0      	ldrb	r0, [r4, #3]
   247e2:	f7ff f855 	bl	23890 <_double_byte>
   247e6:	b2ed      	uxtb	r5, r5
   247e8:	4045      	eors	r5, r0
   247ea:	70f5      	strb	r5, [r6, #3]
}
   247ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000247ee <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   247ee:	b570      	push	{r4, r5, r6, lr}
   247f0:	4614      	mov	r4, r2
   247f2:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   247f4:	4605      	mov	r5, r0
   247f6:	2800      	cmp	r0, #0
   247f8:	d049      	beq.n	2488e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   247fa:	2900      	cmp	r1, #0
   247fc:	d049      	beq.n	24892 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   247fe:	2a00      	cmp	r2, #0
   24800:	d049      	beq.n	24896 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   24802:	2310      	movs	r3, #16
   24804:	460a      	mov	r2, r1
   24806:	4668      	mov	r0, sp
   24808:	4619      	mov	r1, r3
   2480a:	f7ff f832 	bl	23872 <_copy>
	add_round_key(state, s->words);
   2480e:	4621      	mov	r1, r4
   24810:	4668      	mov	r0, sp
   24812:	f7ff ff2e 	bl	24672 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   24816:	3410      	adds	r4, #16
   24818:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2481c:	4668      	mov	r0, sp
   2481e:	f7e2 fe9d 	bl	755c <sub_bytes>
		shift_rows(state);
   24822:	4668      	mov	r0, sp
   24824:	f7ff ff6a 	bl	246fc <shift_rows>
	mult_row_column(t, s);
   24828:	4669      	mov	r1, sp
   2482a:	a804      	add	r0, sp, #16
   2482c:	f7ff ff9f 	bl	2476e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24830:	a901      	add	r1, sp, #4
   24832:	a805      	add	r0, sp, #20
   24834:	f7ff ff9b 	bl	2476e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   24838:	a902      	add	r1, sp, #8
   2483a:	a806      	add	r0, sp, #24
   2483c:	f7ff ff97 	bl	2476e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24840:	a903      	add	r1, sp, #12
   24842:	a807      	add	r0, sp, #28
   24844:	f7ff ff93 	bl	2476e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24848:	2310      	movs	r3, #16
   2484a:	4619      	mov	r1, r3
   2484c:	eb0d 0203 	add.w	r2, sp, r3
   24850:	4668      	mov	r0, sp
   24852:	f7ff f80e 	bl	23872 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   24856:	4621      	mov	r1, r4
   24858:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2485a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2485c:	f7ff ff09 	bl	24672 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   24860:	42a6      	cmp	r6, r4
   24862:	d1db      	bne.n	2481c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   24864:	f7e2 fe7a 	bl	755c <sub_bytes>
	shift_rows(state);
   24868:	4668      	mov	r0, sp
   2486a:	f7ff ff47 	bl	246fc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2486e:	4631      	mov	r1, r6
   24870:	4668      	mov	r0, sp
   24872:	f7ff fefe 	bl	24672 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   24876:	2310      	movs	r3, #16
   24878:	4619      	mov	r1, r3
   2487a:	466a      	mov	r2, sp
   2487c:	4628      	mov	r0, r5
   2487e:	f7fe fff8 	bl	23872 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   24882:	4668      	mov	r0, sp
   24884:	2210      	movs	r2, #16
   24886:	2100      	movs	r1, #0
   24888:	f7ff f800 	bl	2388c <_set>

	return TC_CRYPTO_SUCCESS;
   2488c:	2001      	movs	r0, #1
}
   2488e:	b008      	add	sp, #32
   24890:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24892:	4608      	mov	r0, r1
   24894:	e7fb      	b.n	2488e <tc_aes_encrypt+0xa0>
   24896:	4610      	mov	r0, r2
   24898:	e7f9      	b.n	2488e <tc_aes_encrypt+0xa0>

0002489a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2489a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2489c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2489e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   248a0:	f912 3b10 	ldrsb.w	r3, [r2], #16
   248a4:	2b00      	cmp	r3, #0
   248a6:	bfb4      	ite	lt
   248a8:	2387      	movlt	r3, #135	; 0x87
   248aa:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   248ac:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   248b0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   248b4:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   248b6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   248ba:	d002      	beq.n	248c2 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   248bc:	7813      	ldrb	r3, [r2, #0]
   248be:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   248c0:	e7f4      	b.n	248ac <gf_double+0x12>
	}
}
   248c2:	bd10      	pop	{r4, pc}

000248c4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   248c4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   248c6:	b120      	cbz	r0, 248d2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   248c8:	2258      	movs	r2, #88	; 0x58
   248ca:	2100      	movs	r1, #0
   248cc:	f7fe ffde 	bl	2388c <_set>
   248d0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   248d2:	bd08      	pop	{r3, pc}

000248d4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   248d4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   248d6:	4604      	mov	r4, r0
   248d8:	b188      	cbz	r0, 248fe <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   248da:	2210      	movs	r2, #16
   248dc:	2100      	movs	r1, #0
   248de:	f7fe ffd5 	bl	2388c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   248e2:	2210      	movs	r2, #16
   248e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   248e8:	2100      	movs	r1, #0
   248ea:	f7fe ffcf 	bl	2388c <_set>
	s->leftover_offset = 0;
   248ee:	2300      	movs	r3, #0
   248f0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   248f2:	2200      	movs	r2, #0
   248f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   248f8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   248fc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   248fe:	bd10      	pop	{r4, pc}

00024900 <tc_cmac_setup>:
{
   24900:	b570      	push	{r4, r5, r6, lr}
   24902:	460d      	mov	r5, r1
   24904:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   24906:	4604      	mov	r4, r0
   24908:	b310      	cbz	r0, 24950 <tc_cmac_setup+0x50>
   2490a:	b311      	cbz	r1, 24952 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2490c:	2258      	movs	r2, #88	; 0x58
   2490e:	2100      	movs	r1, #0
   24910:	f7fe ffbc 	bl	2388c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24914:	4629      	mov	r1, r5
	s->sched = sched;
   24916:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24918:	4630      	mov	r0, r6
   2491a:	f7e2 fe2b 	bl	7574 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2491e:	2210      	movs	r2, #16
   24920:	2100      	movs	r1, #0
   24922:	4620      	mov	r0, r4
   24924:	f7fe ffb2 	bl	2388c <_set>
	gf_double (s->K1, s->iv);
   24928:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2492c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2492e:	4621      	mov	r1, r4
   24930:	4620      	mov	r0, r4
   24932:	f7ff ff5c 	bl	247ee <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24936:	4621      	mov	r1, r4
   24938:	4628      	mov	r0, r5
   2493a:	f7ff ffae 	bl	2489a <gf_double>
	gf_double (s->K2, s->K1);
   2493e:	4629      	mov	r1, r5
   24940:	f104 0020 	add.w	r0, r4, #32
   24944:	f7ff ffa9 	bl	2489a <gf_double>
	tc_cmac_init(s);
   24948:	4620      	mov	r0, r4
   2494a:	f7ff ffc3 	bl	248d4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2494e:	2001      	movs	r0, #1
}
   24950:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24952:	4608      	mov	r0, r1
   24954:	e7fc      	b.n	24950 <tc_cmac_setup+0x50>

00024956 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2495a:	460d      	mov	r5, r1
   2495c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2495e:	4604      	mov	r4, r0
   24960:	2800      	cmp	r0, #0
   24962:	d061      	beq.n	24a28 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24964:	b912      	cbnz	r2, 2496c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   24966:	2001      	movs	r0, #1
}
   24968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2496c:	2900      	cmp	r1, #0
   2496e:	d05b      	beq.n	24a28 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   24970:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   24974:	ea53 0102 	orrs.w	r1, r3, r2
   24978:	d056      	beq.n	24a28 <tc_cmac_update+0xd2>
	s->countdown--;
   2497a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2497c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24980:	f142 32ff 	adc.w	r2, r2, #4294967295
   24984:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24988:	f1b8 0f00 	cmp.w	r8, #0
   2498c:	d02a      	beq.n	249e4 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2498e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24992:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   24996:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24998:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2499a:	d208      	bcs.n	249ae <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2499c:	462a      	mov	r2, r5
   2499e:	4633      	mov	r3, r6
   249a0:	4631      	mov	r1, r6
   249a2:	f7fe ff66 	bl	23872 <_copy>
			s->leftover_offset += data_length;
   249a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   249a8:	4432      	add	r2, r6
   249aa:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   249ac:	e7db      	b.n	24966 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   249ae:	463b      	mov	r3, r7
   249b0:	462a      	mov	r2, r5
   249b2:	4639      	mov	r1, r7
   249b4:	f7fe ff5d 	bl	23872 <_copy>
		data_length -= remaining_space;
   249b8:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   249ba:	2300      	movs	r3, #0
   249bc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   249be:	4446      	add	r6, r8
		data += remaining_space;
   249c0:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249c2:	1e63      	subs	r3, r4, #1
   249c4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   249c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   249cc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249d0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   249d2:	ea82 0200 	eor.w	r2, r2, r0
   249d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249d8:	d1f6      	bne.n	249c8 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   249da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   249dc:	4621      	mov	r1, r4
   249de:	4620      	mov	r0, r4
   249e0:	f7ff ff05 	bl	247ee <tc_aes_encrypt>
   249e4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   249e8:	2e10      	cmp	r6, #16
   249ea:	d80a      	bhi.n	24a02 <tc_cmac_update+0xac>
	if (data_length > 0) {
   249ec:	2e00      	cmp	r6, #0
   249ee:	d0ba      	beq.n	24966 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   249f0:	4633      	mov	r3, r6
   249f2:	462a      	mov	r2, r5
   249f4:	4631      	mov	r1, r6
   249f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   249fa:	f7fe ff3a 	bl	23872 <_copy>
		s->leftover_offset = data_length;
   249fe:	6466      	str	r6, [r4, #68]	; 0x44
   24a00:	e7b1      	b.n	24966 <tc_cmac_update+0x10>
   24a02:	1e63      	subs	r3, r4, #1
   24a04:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   24a06:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24a0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24a0e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24a10:	ea82 0200 	eor.w	r2, r2, r0
   24a14:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24a16:	d1f6      	bne.n	24a06 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24a18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24a1a:	4621      	mov	r1, r4
   24a1c:	4620      	mov	r0, r4
   24a1e:	f7ff fee6 	bl	247ee <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24a22:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24a24:	3e10      	subs	r6, #16
   24a26:	e7df      	b.n	249e8 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   24a28:	2000      	movs	r0, #0
   24a2a:	e79d      	b.n	24968 <tc_cmac_update+0x12>

00024a2c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24a2c:	b570      	push	{r4, r5, r6, lr}
   24a2e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24a30:	4605      	mov	r5, r0
   24a32:	b1e8      	cbz	r0, 24a70 <tc_cmac_final+0x44>
   24a34:	b369      	cbz	r1, 24a92 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24a36:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24a38:	2a10      	cmp	r2, #16
   24a3a:	d11a      	bne.n	24a72 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24a3c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24a3e:	1e63      	subs	r3, r4, #1
   24a40:	3901      	subs	r1, #1
   24a42:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24a46:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24a4a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24a4e:	4072      	eors	r2, r6
   24a50:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24a54:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24a56:	ea82 0206 	eor.w	r2, r2, r6
   24a5a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24a5c:	d1f3      	bne.n	24a46 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24a5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24a60:	4621      	mov	r1, r4
   24a62:	4628      	mov	r0, r5
   24a64:	f7ff fec3 	bl	247ee <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24a68:	4620      	mov	r0, r4
   24a6a:	f7ff ff2b 	bl	248c4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24a6e:	2001      	movs	r0, #1
}
   24a70:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24a72:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24a76:	2100      	movs	r1, #0
   24a78:	f1c2 0210 	rsb	r2, r2, #16
   24a7c:	4420      	add	r0, r4
   24a7e:	f7fe ff05 	bl	2388c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24a82:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24a84:	4423      	add	r3, r4
   24a86:	2280      	movs	r2, #128	; 0x80
   24a88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24a8c:	f104 0120 	add.w	r1, r4, #32
   24a90:	e7d5      	b.n	24a3e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24a92:	4608      	mov	r0, r1
   24a94:	e7ec      	b.n	24a70 <tc_cmac_final+0x44>

00024a96 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24a96:	2100      	movs	r1, #0
   24a98:	2001      	movs	r0, #1
   24a9a:	f7e2 bed5 	b.w	7848 <z_arm_fatal_error>

00024a9e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24a9e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24aa0:	6800      	ldr	r0, [r0, #0]
   24aa2:	f7e2 bed1 	b.w	7848 <z_arm_fatal_error>

00024aa6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   24aa6:	b508      	push	{r3, lr}
	handler();
   24aa8:	f7e2 ff06 	bl	78b8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24ab0:	f7e3 b988 	b.w	7dc4 <z_arm_exc_exit>

00024ab4 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   24ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24ab8:	4684      	mov	ip, r0
   24aba:	4688      	mov	r8, r1
	register const char *s = nptr;
   24abc:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   24abe:	4621      	mov	r1, r4
   24ac0:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24ac4:	2b20      	cmp	r3, #32
   24ac6:	d0fa      	beq.n	24abe <strtol+0xa>
   24ac8:	f1a3 0009 	sub.w	r0, r3, #9
   24acc:	2804      	cmp	r0, #4
   24ace:	d9f6      	bls.n	24abe <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   24ad0:	2b2d      	cmp	r3, #45	; 0x2d
   24ad2:	d12d      	bne.n	24b30 <strtol+0x7c>
		neg = 1;
		c = *s++;
   24ad4:	784b      	ldrb	r3, [r1, #1]
   24ad6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   24ad8:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24ada:	2a00      	cmp	r2, #0
   24adc:	d05a      	beq.n	24b94 <strtol+0xe0>
   24ade:	2a10      	cmp	r2, #16
   24ae0:	d109      	bne.n	24af6 <strtol+0x42>
   24ae2:	2b30      	cmp	r3, #48	; 0x30
   24ae4:	d107      	bne.n	24af6 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24ae6:	7823      	ldrb	r3, [r4, #0]
   24ae8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24aec:	2b58      	cmp	r3, #88	; 0x58
   24aee:	d14c      	bne.n	24b8a <strtol+0xd6>
		c = s[1];
   24af0:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   24af2:	2210      	movs	r2, #16
		s += 2;
   24af4:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   24af6:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   24afa:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24afc:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   24afe:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   24b02:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   24b04:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24b08:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24b0c:	2d09      	cmp	r5, #9
   24b0e:	d815      	bhi.n	24b3c <strtol+0x88>
			c -= '0';
   24b10:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24b12:	429a      	cmp	r2, r3
   24b14:	dd22      	ble.n	24b5c <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24b16:	1c75      	adds	r5, r6, #1
   24b18:	d007      	beq.n	24b2a <strtol+0x76>
   24b1a:	4570      	cmp	r0, lr
   24b1c:	d81b      	bhi.n	24b56 <strtol+0xa2>
   24b1e:	d101      	bne.n	24b24 <strtol+0x70>
   24b20:	454b      	cmp	r3, r9
   24b22:	dc18      	bgt.n	24b56 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   24b24:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   24b28:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   24b2a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24b2e:	e7eb      	b.n	24b08 <strtol+0x54>
	} else if (c == '+') {
   24b30:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24b32:	bf04      	itt	eq
   24b34:	784b      	ldrbeq	r3, [r1, #1]
   24b36:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   24b38:	2100      	movs	r1, #0
   24b3a:	e7ce      	b.n	24ada <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24b3c:	f043 0520 	orr.w	r5, r3, #32
   24b40:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24b42:	2d19      	cmp	r5, #25
   24b44:	d80a      	bhi.n	24b5c <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24b46:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24b4a:	2d1a      	cmp	r5, #26
   24b4c:	bf34      	ite	cc
   24b4e:	2537      	movcc	r5, #55	; 0x37
   24b50:	2557      	movcs	r5, #87	; 0x57
   24b52:	1b5b      	subs	r3, r3, r5
   24b54:	e7dd      	b.n	24b12 <strtol+0x5e>
			any = -1;
   24b56:	f04f 36ff 	mov.w	r6, #4294967295
   24b5a:	e7e6      	b.n	24b2a <strtol+0x76>
		}
	}

	if (any < 0) {
   24b5c:	1c73      	adds	r3, r6, #1
   24b5e:	d109      	bne.n	24b74 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24b60:	f7fb f9ea 	bl	1ff38 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   24b64:	2326      	movs	r3, #38	; 0x26
   24b66:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   24b68:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   24b6a:	f1b8 0f00 	cmp.w	r8, #0
   24b6e:	d107      	bne.n	24b80 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   24b74:	b101      	cbz	r1, 24b78 <strtol+0xc4>
		acc = -acc;
   24b76:	4240      	negs	r0, r0
	if (endptr != NULL) {
   24b78:	f1b8 0f00 	cmp.w	r8, #0
   24b7c:	d0f8      	beq.n	24b70 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   24b7e:	b10e      	cbz	r6, 24b84 <strtol+0xd0>
   24b80:	f104 3cff 	add.w	ip, r4, #4294967295
   24b84:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   24b88:	e7f2      	b.n	24b70 <strtol+0xbc>
	if (base == 0) {
   24b8a:	2330      	movs	r3, #48	; 0x30
   24b8c:	2a00      	cmp	r2, #0
   24b8e:	d1b2      	bne.n	24af6 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   24b90:	2208      	movs	r2, #8
   24b92:	e7b0      	b.n	24af6 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   24b94:	2b30      	cmp	r3, #48	; 0x30
   24b96:	d0a6      	beq.n	24ae6 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   24b98:	220a      	movs	r2, #10
   24b9a:	e7ac      	b.n	24af6 <strtol+0x42>

00024b9c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24b9c:	3901      	subs	r1, #1
   24b9e:	4603      	mov	r3, r0
   24ba0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24ba4:	b90a      	cbnz	r2, 24baa <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24ba6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24ba8:	4770      	bx	lr
		*d = *s;
   24baa:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24bae:	e7f7      	b.n	24ba0 <strcpy+0x4>

00024bb0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   24bb0:	b570      	push	{r4, r5, r6, lr}
   24bb2:	4605      	mov	r5, r0
   24bb4:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   24bb6:	b142      	cbz	r2, 24bca <strncpy+0x1a>
   24bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   24bbc:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   24bbe:	b92c      	cbnz	r4, 24bcc <strncpy+0x1c>
   24bc0:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   24bc2:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   24bc6:	429a      	cmp	r2, r3
   24bc8:	d1fb      	bne.n	24bc2 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   24bca:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   24bcc:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   24bd0:	4632      	mov	r2, r6
   24bd2:	e7ef      	b.n	24bb4 <strncpy+0x4>

00024bd4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24bd4:	4603      	mov	r3, r0
	size_t n = 0;
   24bd6:	2000      	movs	r0, #0

	while (*s != '\0') {
   24bd8:	5c1a      	ldrb	r2, [r3, r0]
   24bda:	b902      	cbnz	r2, 24bde <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24bdc:	4770      	bx	lr
		n++;
   24bde:	3001      	adds	r0, #1
   24be0:	e7fa      	b.n	24bd8 <strlen+0x4>

00024be2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   24be2:	4603      	mov	r3, r0
	size_t n = 0;
   24be4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   24be6:	5c1a      	ldrb	r2, [r3, r0]
   24be8:	b10a      	cbz	r2, 24bee <strnlen+0xc>
   24bea:	4288      	cmp	r0, r1
   24bec:	d100      	bne.n	24bf0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   24bee:	4770      	bx	lr
		n++;
   24bf0:	3001      	adds	r0, #1
   24bf2:	e7f8      	b.n	24be6 <strnlen+0x4>

00024bf4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   24bf4:	1e43      	subs	r3, r0, #1
   24bf6:	3901      	subs	r1, #1
   24bf8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24bfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   24c00:	4282      	cmp	r2, r0
   24c02:	d101      	bne.n	24c08 <strcmp+0x14>
   24c04:	2a00      	cmp	r2, #0
   24c06:	d1f7      	bne.n	24bf8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24c08:	1a10      	subs	r0, r2, r0
   24c0a:	4770      	bx	lr

00024c0c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   24c0c:	b510      	push	{r4, lr}
   24c0e:	3901      	subs	r1, #1
   24c10:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24c12:	4282      	cmp	r2, r0
   24c14:	d009      	beq.n	24c2a <strncmp+0x1e>
   24c16:	7803      	ldrb	r3, [r0, #0]
   24c18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24c1c:	42a3      	cmp	r3, r4
   24c1e:	d100      	bne.n	24c22 <strncmp+0x16>
   24c20:	b90b      	cbnz	r3, 24c26 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   24c22:	1b18      	subs	r0, r3, r4
   24c24:	e002      	b.n	24c2c <strncmp+0x20>
		s1++;
   24c26:	3001      	adds	r0, #1
		n--;
   24c28:	e7f3      	b.n	24c12 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   24c2a:	2000      	movs	r0, #0
}
   24c2c:	bd10      	pop	{r4, pc}

00024c2e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24c2e:	b510      	push	{r4, lr}
   24c30:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24c32:	b15a      	cbz	r2, 24c4c <memcmp+0x1e>
   24c34:	3901      	subs	r1, #1
   24c36:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24c38:	f813 0b01 	ldrb.w	r0, [r3], #1
   24c3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24c40:	42a3      	cmp	r3, r4
   24c42:	d001      	beq.n	24c48 <memcmp+0x1a>
   24c44:	4290      	cmp	r0, r2
   24c46:	d0f7      	beq.n	24c38 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24c48:	1a80      	subs	r0, r0, r2
}
   24c4a:	bd10      	pop	{r4, pc}
		return 0;
   24c4c:	4610      	mov	r0, r2
   24c4e:	e7fc      	b.n	24c4a <memcmp+0x1c>

00024c50 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   24c50:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   24c52:	ea81 0400 	eor.w	r4, r1, r0
   24c56:	07a5      	lsls	r5, r4, #30
   24c58:	4603      	mov	r3, r0
   24c5a:	d00b      	beq.n	24c74 <memcpy+0x24>
   24c5c:	3b01      	subs	r3, #1
   24c5e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   24c60:	4291      	cmp	r1, r2
   24c62:	d11b      	bne.n	24c9c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   24c66:	2a00      	cmp	r2, #0
   24c68:	d0fc      	beq.n	24c64 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   24c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   24c6e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   24c72:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   24c74:	079c      	lsls	r4, r3, #30
   24c76:	d1f6      	bne.n	24c66 <memcpy+0x16>
   24c78:	f022 0403 	bic.w	r4, r2, #3
   24c7c:	1f1d      	subs	r5, r3, #4
   24c7e:	0896      	lsrs	r6, r2, #2
   24c80:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   24c82:	42b9      	cmp	r1, r7
   24c84:	d105      	bne.n	24c92 <memcpy+0x42>
   24c86:	f06f 0503 	mvn.w	r5, #3
   24c8a:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   24c8e:	4423      	add	r3, r4
   24c90:	e7e4      	b.n	24c5c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   24c92:	f851 cb04 	ldr.w	ip, [r1], #4
   24c96:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   24c9a:	e7f2      	b.n	24c82 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   24c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
   24ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24ca4:	e7dc      	b.n	24c60 <memcpy+0x10>

00024ca6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   24ca6:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24ca8:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   24caa:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24cac:	07a3      	lsls	r3, r4, #30
   24cae:	d111      	bne.n	24cd4 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   24cb0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   24cb4:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   24cb8:	f022 0303 	bic.w	r3, r2, #3
   24cbc:	0896      	lsrs	r6, r2, #2
   24cbe:	4423      	add	r3, r4
   24cc0:	429c      	cmp	r4, r3
   24cc2:	d10d      	bne.n	24ce0 <memset+0x3a>
   24cc4:	f06f 0403 	mvn.w	r4, #3
   24cc8:	fb04 2206 	mla	r2, r4, r6, r2
   24ccc:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   24cce:	4293      	cmp	r3, r2
   24cd0:	d109      	bne.n	24ce6 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24cd2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   24cd4:	2a00      	cmp	r2, #0
   24cd6:	d0fc      	beq.n	24cd2 <memset+0x2c>
		*(d_byte++) = c_byte;
   24cd8:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   24cdc:	3a01      	subs	r2, #1
   24cde:	e7e5      	b.n	24cac <memset+0x6>
		*(d_word++) = c_word;
   24ce0:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   24ce4:	e7ec      	b.n	24cc0 <memset+0x1a>
		*(d_byte++) = c_byte;
   24ce6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24cea:	e7f0      	b.n	24cce <memset+0x28>

00024cec <_stdout_hook_default>:
}
   24cec:	f04f 30ff 	mov.w	r0, #4294967295
   24cf0:	4770      	bx	lr

00024cf2 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   24cf2:	f7e3 b98d 	b.w	8010 <z_impl_zephyr_fputc>

00024cf6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   24cf6:	684b      	ldr	r3, [r1, #4]
   24cf8:	2b01      	cmp	r3, #1
   24cfa:	dd07      	ble.n	24d0c <sprintf_out+0x16>
		*(p->ptr) = c;
   24cfc:	680b      	ldr	r3, [r1, #0]
   24cfe:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24d00:	680b      	ldr	r3, [r1, #0]
   24d02:	3301      	adds	r3, #1
   24d04:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   24d06:	684b      	ldr	r3, [r1, #4]
   24d08:	3b01      	subs	r3, #1
   24d0a:	604b      	str	r3, [r1, #4]
}
   24d0c:	2000      	movs	r0, #0
   24d0e:	4770      	bx	lr

00024d10 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   24d10:	f7fa bb14 	b.w	1f33c <SystemInit>

00024d14 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   24d14:	b082      	sub	sp, #8
   24d16:	ab02      	add	r3, sp, #8
   24d18:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   24d1c:	f89d 3000 	ldrb.w	r3, [sp]
   24d20:	2b06      	cmp	r3, #6
   24d22:	d108      	bne.n	24d36 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24d28:	2201      	movs	r2, #1
   24d2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24d2e:	f3bf 8f4f 	dsb	sy
        __WFE();
   24d32:	bf20      	wfe
    while (true)
   24d34:	e7fd      	b.n	24d32 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   24d36:	b002      	add	sp, #8
   24d38:	4770      	bx	lr

00024d3a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   24d3a:	b082      	sub	sp, #8
   24d3c:	ab02      	add	r3, sp, #8
   24d3e:	e903 0003 	stmdb	r3, {r0, r1}
   24d42:	2300      	movs	r3, #0
   24d44:	f383 8811 	msr	BASEPRI, r3
   24d48:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24d4c:	b002      	add	sp, #8
   24d4e:	4770      	bx	lr

00024d50 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24d50:	b530      	push	{r4, r5, lr}
   24d52:	b085      	sub	sp, #20
   24d54:	4604      	mov	r4, r0
   24d56:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24d58:	4668      	mov	r0, sp
   24d5a:	2203      	movs	r2, #3
   24d5c:	f7ff ff78 	bl	24c50 <memcpy>
	(void)memset(res + 3, 0, 13);
   24d60:	220d      	movs	r2, #13
   24d62:	2100      	movs	r1, #0
   24d64:	f10d 0003 	add.w	r0, sp, #3
   24d68:	f7ff ff9d 	bl	24ca6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24d6c:	4620      	mov	r0, r4
   24d6e:	466a      	mov	r2, sp
   24d70:	4669      	mov	r1, sp
   24d72:	f7ee fc91 	bl	13698 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   24d76:	4604      	mov	r4, r0
   24d78:	b920      	cbnz	r0, 24d84 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   24d7a:	2203      	movs	r2, #3
   24d7c:	4669      	mov	r1, sp
   24d7e:	4628      	mov	r0, r5
   24d80:	f7ff ff66 	bl	24c50 <memcpy>

	return 0;
}
   24d84:	4620      	mov	r0, r4
   24d86:	b005      	add	sp, #20
   24d88:	bd30      	pop	{r4, r5, pc}

00024d8a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24d8a:	b513      	push	{r0, r1, r4, lr}
   24d8c:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   24d8e:	aa01      	add	r2, sp, #4
   24d90:	3103      	adds	r1, #3
   24d92:	f7ff ffdd 	bl	24d50 <ah>
	if (err) {
   24d96:	b948      	cbnz	r0, 24dac <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   24d98:	2203      	movs	r2, #3
   24d9a:	a901      	add	r1, sp, #4
   24d9c:	4620      	mov	r0, r4
   24d9e:	f7ff ff46 	bl	24c2e <memcmp>
   24da2:	fab0 f080 	clz	r0, r0
   24da6:	0940      	lsrs	r0, r0, #5
}
   24da8:	b002      	add	sp, #8
   24daa:	bd10      	pop	{r4, pc}
		return false;
   24dac:	2000      	movs	r0, #0
   24dae:	e7fb      	b.n	24da8 <bt_rpa_irk_matches+0x1e>

00024db0 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   24db0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   24db2:	1cce      	adds	r6, r1, #3
{
   24db4:	4605      	mov	r5, r0
   24db6:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   24db8:	4630      	mov	r0, r6
   24dba:	2103      	movs	r1, #3
   24dbc:	f7ee fc6a 	bl	13694 <bt_rand>
	if (err) {
   24dc0:	b960      	cbnz	r0, 24ddc <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   24dc2:	7963      	ldrb	r3, [r4, #5]
   24dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24dcc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   24dce:	4622      	mov	r2, r4
   24dd0:	4631      	mov	r1, r6
   24dd2:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   24dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   24dd8:	f7ff bfba 	b.w	24d50 <ah>
}
   24ddc:	bd70      	pop	{r4, r5, r6, pc}

00024dde <send_cmd_status>:
{
   24dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24de2:	f04f 32ff 	mov.w	r2, #4294967295
{
   24de6:	4606      	mov	r6, r0
   24de8:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24dea:	f04f 33ff 	mov.w	r3, #4294967295
   24dee:	2100      	movs	r1, #0
   24df0:	200f      	movs	r0, #15
   24df2:	f7e3 fd49 	bl	8888 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   24df6:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   24df8:	f100 0808 	add.w	r8, r0, #8
   24dfc:	4604      	mov	r4, r0
   24dfe:	7507      	strb	r7, [r0, #20]
   24e00:	2102      	movs	r1, #2
   24e02:	4640      	mov	r0, r8
   24e04:	f001 ff92 	bl	26d2c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24e08:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   24e0a:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24e0c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   24e0e:	7041      	strb	r1, [r0, #1]
   24e10:	4640      	mov	r0, r8
   24e12:	f001 ff8b 	bl	26d2c <net_buf_simple_add>
	evt->ncmd = 1U;
   24e16:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   24e18:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   24e1a:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   24e1c:	4620      	mov	r0, r4
}
   24e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   24e22:	f7e5 bb0d 	b.w	a440 <bt_recv_prio>

00024e26 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   24e26:	f101 0320 	add.w	r3, r1, #32
   24e2a:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   24e2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   24e30:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   24e34:	428b      	cmp	r3, r1
   24e36:	d1f9      	bne.n	24e2c <sys_memcpy_swap.constprop.0+0x6>
}
   24e38:	4770      	bx	lr

00024e3a <default_CSPRNG>:
{
   24e3a:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   24e3c:	f7ee fc2a 	bl	13694 <bt_rand>
}
   24e40:	fab0 f080 	clz	r0, r0
   24e44:	0940      	lsrs	r0, r0, #5
   24e46:	bd08      	pop	{r3, pc}

00024e48 <bt_settings_decode_key>:
{
   24e48:	b570      	push	{r4, r5, r6, lr}
   24e4a:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24e4c:	2100      	movs	r1, #0
{
   24e4e:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   24e50:	f7fe fba7 	bl	235a2 <settings_name_next>
   24e54:	280d      	cmp	r0, #13
   24e56:	d118      	bne.n	24e8a <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   24e58:	7b23      	ldrb	r3, [r4, #12]
   24e5a:	2b30      	cmp	r3, #48	; 0x30
   24e5c:	d111      	bne.n	24e82 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   24e5e:	2300      	movs	r3, #0
   24e60:	702b      	strb	r3, [r5, #0]
   24e62:	f104 060c 	add.w	r6, r4, #12
   24e66:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24e68:	462a      	mov	r2, r5
   24e6a:	4620      	mov	r0, r4
   24e6c:	2301      	movs	r3, #1
   24e6e:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   24e70:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24e72:	f7fd f9b7 	bl	221e4 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   24e76:	42b4      	cmp	r4, r6
   24e78:	f105 35ff 	add.w	r5, r5, #4294967295
   24e7c:	d1f4      	bne.n	24e68 <bt_settings_decode_key+0x20>
	return 0;
   24e7e:	2000      	movs	r0, #0
}
   24e80:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   24e82:	2b31      	cmp	r3, #49	; 0x31
   24e84:	d101      	bne.n	24e8a <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   24e86:	2301      	movs	r3, #1
   24e88:	e7ea      	b.n	24e60 <bt_settings_decode_key+0x18>
		return -EINVAL;
   24e8a:	f06f 0015 	mvn.w	r0, #21
   24e8e:	e7f7      	b.n	24e80 <bt_settings_decode_key+0x38>

00024e90 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24e90:	b510      	push	{r4, lr}
   24e92:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24e94:	7801      	ldrb	r1, [r0, #0]
   24e96:	7822      	ldrb	r2, [r4, #0]
   24e98:	428a      	cmp	r2, r1
{
   24e9a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24e9c:	d00f      	beq.n	24ebe <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24e9e:	4669      	mov	r1, sp
   24ea0:	f7e3 fc86 	bl	87b0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24ea4:	a905      	add	r1, sp, #20
   24ea6:	4620      	mov	r0, r4
   24ea8:	f7e3 fc82 	bl	87b0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24eac:	2210      	movs	r2, #16
   24eae:	f10d 0115 	add.w	r1, sp, #21
   24eb2:	f10d 0001 	add.w	r0, sp, #1
   24eb6:	f7ff feba 	bl	24c2e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24eba:	b00a      	add	sp, #40	; 0x28
   24ebc:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24ebe:	2a01      	cmp	r2, #1
   24ec0:	d006      	beq.n	24ed0 <bt_uuid_cmp+0x40>
   24ec2:	2a02      	cmp	r2, #2
   24ec4:	d007      	beq.n	24ed6 <bt_uuid_cmp+0x46>
   24ec6:	b972      	cbnz	r2, 24ee6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24ec8:	8840      	ldrh	r0, [r0, #2]
   24eca:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24ecc:	1ac0      	subs	r0, r0, r3
   24ece:	e7f4      	b.n	24eba <bt_uuid_cmp+0x2a>
   24ed0:	6840      	ldr	r0, [r0, #4]
   24ed2:	6863      	ldr	r3, [r4, #4]
   24ed4:	e7fa      	b.n	24ecc <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24ed6:	2210      	movs	r2, #16
   24ed8:	1c61      	adds	r1, r4, #1
   24eda:	3001      	adds	r0, #1
}
   24edc:	b00a      	add	sp, #40	; 0x28
   24ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24ee2:	f7ff bea4 	b.w	24c2e <memcmp>
	switch (u1->type) {
   24ee6:	f06f 0015 	mvn.w	r0, #21
   24eea:	e7e6      	b.n	24eba <bt_uuid_cmp+0x2a>

00024eec <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24eec:	2a04      	cmp	r2, #4
{
   24eee:	b510      	push	{r4, lr}
	switch (data_len) {
   24ef0:	d00a      	beq.n	24f08 <bt_uuid_create+0x1c>
   24ef2:	2a10      	cmp	r2, #16
   24ef4:	d00d      	beq.n	24f12 <bt_uuid_create+0x26>
   24ef6:	2a02      	cmp	r2, #2
   24ef8:	f04f 0300 	mov.w	r3, #0
   24efc:	d10f      	bne.n	24f1e <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   24efe:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   24f00:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24f02:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24f04:	2001      	movs	r0, #1
}
   24f06:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   24f08:	2301      	movs	r3, #1
   24f0a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24f0c:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24f0e:	6042      	str	r2, [r0, #4]
		break;
   24f10:	e7f8      	b.n	24f04 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   24f12:	2302      	movs	r3, #2
   24f14:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24f18:	f7ff fe9a 	bl	24c50 <memcpy>
		break;
   24f1c:	e7f2      	b.n	24f04 <bt_uuid_create+0x18>
	switch (data_len) {
   24f1e:	4618      	mov	r0, r3
   24f20:	e7f1      	b.n	24f06 <bt_uuid_create+0x1a>

00024f22 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24f22:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24f24:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24f26:	2106      	movs	r1, #6
{
   24f28:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24f2a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24f2e:	f7ee fbb1 	bl	13694 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24f32:	b918      	cbnz	r0, 24f3c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24f34:	79a3      	ldrb	r3, [r4, #6]
   24f36:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24f3a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24f3c:	bd10      	pop	{r4, pc}

00024f3e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24f3e:	280f      	cmp	r0, #15
   24f40:	d806      	bhi.n	24f50 <bt_hci_evt_get_flags+0x12>
   24f42:	280d      	cmp	r0, #13
   24f44:	d80b      	bhi.n	24f5e <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   24f46:	2805      	cmp	r0, #5
   24f48:	bf14      	ite	ne
   24f4a:	2002      	movne	r0, #2
   24f4c:	2003      	moveq	r0, #3
   24f4e:	4770      	bx	lr
	switch (evt) {
   24f50:	2813      	cmp	r0, #19
   24f52:	d004      	beq.n	24f5e <bt_hci_evt_get_flags+0x20>
   24f54:	281a      	cmp	r0, #26
   24f56:	bf14      	ite	ne
   24f58:	2002      	movne	r0, #2
   24f5a:	2001      	moveq	r0, #1
   24f5c:	4770      	bx	lr
   24f5e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24f60:	4770      	bx	lr

00024f62 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   24f62:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   24f66:	b193      	cbz	r3, 24f8e <update_sec_level+0x2c>
   24f68:	7b5a      	ldrb	r2, [r3, #13]
   24f6a:	07d1      	lsls	r1, r2, #31
   24f6c:	d50f      	bpl.n	24f8e <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24f6e:	06d2      	lsls	r2, r2, #27
   24f70:	d50b      	bpl.n	24f8a <update_sec_level+0x28>
   24f72:	7b1b      	ldrb	r3, [r3, #12]
   24f74:	2b10      	cmp	r3, #16
   24f76:	d108      	bne.n	24f8a <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   24f78:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   24f7a:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   24f7c:	7a82      	ldrb	r2, [r0, #10]
   24f7e:	7a40      	ldrb	r0, [r0, #9]
}
   24f80:	4282      	cmp	r2, r0
   24f82:	bf8c      	ite	hi
   24f84:	2000      	movhi	r0, #0
   24f86:	2001      	movls	r0, #1
   24f88:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   24f8a:	2303      	movs	r3, #3
   24f8c:	e7f5      	b.n	24f7a <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   24f8e:	2302      	movs	r3, #2
   24f90:	e7f3      	b.n	24f7a <update_sec_level+0x18>

00024f92 <get_adv_channel_map>:
{
   24f92:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24f94:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24f98:	bf0c      	ite	eq
   24f9a:	2007      	moveq	r0, #7
   24f9c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24f9e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24fa0:	bf48      	it	mi
   24fa2:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24fa6:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24fa8:	bf48      	it	mi
   24faa:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24fae:	4770      	bx	lr

00024fb0 <atomic_and>:
{
   24fb0:	4603      	mov	r3, r0
}
   24fb2:	f3bf 8f5b 	dmb	ish
   24fb6:	e853 0f00 	ldrex	r0, [r3]
   24fba:	ea00 0201 	and.w	r2, r0, r1
   24fbe:	e843 2c00 	strex	ip, r2, [r3]
   24fc2:	f1bc 0f00 	cmp.w	ip, #0
   24fc6:	d1f6      	bne.n	24fb6 <atomic_and+0x6>
   24fc8:	f3bf 8f5b 	dmb	ish
   24fcc:	4770      	bx	lr

00024fce <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24fce:	f3bf 8f5b 	dmb	ish
   24fd2:	6800      	ldr	r0, [r0, #0]
   24fd4:	f3bf 8f5b 	dmb	ish
}
   24fd8:	4770      	bx	lr

00024fda <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   24fda:	2207      	movs	r2, #7
   24fdc:	f7ff be27 	b.w	24c2e <memcmp>

00024fe0 <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   24fe0:	2206      	movs	r2, #6
   24fe2:	f7ff be35 	b.w	24c50 <memcpy>

00024fe6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24fe6:	2207      	movs	r2, #7
   24fe8:	f7ff be32 	b.w	24c50 <memcpy>

00024fec <atomic_or>:
{
   24fec:	4603      	mov	r3, r0
}
   24fee:	f3bf 8f5b 	dmb	ish
   24ff2:	e853 0f00 	ldrex	r0, [r3]
   24ff6:	ea40 0201 	orr.w	r2, r0, r1
   24ffa:	e843 2c00 	strex	ip, r2, [r3]
   24ffe:	f1bc 0f00 	cmp.w	ip, #0
   25002:	d1f6      	bne.n	24ff2 <atomic_or+0x6>
   25004:	f3bf 8f5b 	dmb	ish
   25008:	4770      	bx	lr

0002500a <atomic_test_and_set_bit>:
{
   2500a:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2500c:	2301      	movs	r3, #1
   2500e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   25012:	f7ff ffeb 	bl	24fec <atomic_or>
	return (old & mask) != 0;
   25016:	4201      	tst	r1, r0
}
   25018:	bf14      	ite	ne
   2501a:	2001      	movne	r0, #1
   2501c:	2000      	moveq	r0, #0
   2501e:	bd08      	pop	{r3, pc}

00025020 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   25020:	460b      	mov	r3, r1
   25022:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25024:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   25026:	f001 041f 	and.w	r4, r1, #31
   2502a:	2101      	movs	r1, #1
   2502c:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2502e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   25032:	b112      	cbz	r2, 2503a <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   25034:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25036:	f7ff bfd9 	b.w	24fec <atomic_or>
}
   2503a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2503c:	43c9      	mvns	r1, r1
   2503e:	f7ff bfb7 	b.w	24fb0 <atomic_and>

00025042 <unpair_remote>:
{
   25042:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   25044:	4601      	mov	r1, r0
   25046:	7818      	ldrb	r0, [r3, #0]
   25048:	f7e3 bd28 	b.w	8a9c <unpair>

0002504c <sys_put_le64>:
	dst[1] = val >> 8;
   2504c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   25050:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   25052:	0e00      	lsrs	r0, r0, #24
   25054:	7053      	strb	r3, [r2, #1]
   25056:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   25058:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2505a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2505e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   25060:	7093      	strb	r3, [r2, #2]
   25062:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   25064:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   25066:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   25068:	71d1      	strb	r1, [r2, #7]
}
   2506a:	4770      	bx	lr

0002506c <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2506c:	f100 0210 	add.w	r2, r0, #16
{
   25070:	b508      	push	{r3, lr}
   25072:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   25074:	4610      	mov	r0, r2
   25076:	f7ff ffaa 	bl	24fce <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2507a:	0640      	lsls	r0, r0, #25
   2507c:	d50a      	bpl.n	25094 <adv_id_check_connectable_func+0x28>
   2507e:	4610      	mov	r0, r2
   25080:	f7ff ffa5 	bl	24fce <atomic_get>
   25084:	05c2      	lsls	r2, r0, #23
   25086:	d505      	bpl.n	25094 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   25088:	781a      	ldrb	r2, [r3, #0]
   2508a:	780b      	ldrb	r3, [r1, #0]
   2508c:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   2508e:	bf1c      	itt	ne
   25090:	2301      	movne	r3, #1
   25092:	704b      	strbne	r3, [r1, #1]
}
   25094:	bd08      	pop	{r3, pc}

00025096 <adv_rpa_invalidate>:
{
   25096:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   25098:	f100 0310 	add.w	r3, r0, #16
   2509c:	4618      	mov	r0, r3
   2509e:	f7ff ff96 	bl	24fce <atomic_get>
   250a2:	0682      	lsls	r2, r0, #26
   250a4:	d406      	bmi.n	250b4 <adv_rpa_invalidate+0x1e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   250a6:	4618      	mov	r0, r3
   250a8:	f06f 0110 	mvn.w	r1, #16
}
   250ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   250b0:	f7ff bf7e 	b.w	24fb0 <atomic_and>
   250b4:	bd08      	pop	{r3, pc}

000250b6 <adv_is_private_enabled>:
{
   250b6:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   250b8:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   250bc:	4618      	mov	r0, r3
   250be:	f7ff ff86 	bl	24fce <atomic_get>
   250c2:	0642      	lsls	r2, r0, #25
   250c4:	d506      	bpl.n	250d4 <adv_is_private_enabled+0x1e>
   250c6:	4618      	mov	r0, r3
   250c8:	f7ff ff81 	bl	24fce <atomic_get>
   250cc:	0503      	lsls	r3, r0, #20
		*adv_enabled = true;
   250ce:	bf5c      	itt	pl
   250d0:	2301      	movpl	r3, #1
   250d2:	700b      	strbpl	r3, [r1, #0]
}
   250d4:	bd08      	pop	{r3, pc}

000250d6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   250d6:	f100 0310 	add.w	r3, r0, #16
{
   250da:	b510      	push	{r4, lr}
   250dc:	4604      	mov	r4, r0
   250de:	4618      	mov	r0, r3
   250e0:	f7ff ff75 	bl	24fce <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   250e4:	0642      	lsls	r2, r0, #25
   250e6:	d50a      	bpl.n	250fe <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   250e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   250ec:	4618      	mov	r0, r3
   250ee:	f7ff ff7d 	bl	24fec <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   250f2:	4620      	mov	r0, r4
   250f4:	2100      	movs	r1, #0
}
   250f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   250fa:	f7e4 bbb9 	b.w	9870 <set_le_adv_enable_legacy>
}
   250fe:	bd10      	pop	{r4, pc}

00025100 <adv_unpause_enabled>:
{
   25100:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25102:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   25106:	4604      	mov	r4, r0
   25108:	3010      	adds	r0, #16
   2510a:	f7ff ff51 	bl	24fb0 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2510e:	0483      	lsls	r3, r0, #18
   25110:	d505      	bpl.n	2511e <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   25112:	4620      	mov	r0, r4
   25114:	2101      	movs	r1, #1
}
   25116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   2511a:	f7e4 bba9 	b.w	9870 <set_le_adv_enable_legacy>
}
   2511e:	bd10      	pop	{r4, pc}

00025120 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   25120:	7a03      	ldrb	r3, [r0, #8]
   25122:	075b      	lsls	r3, r3, #29
{
   25124:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   25126:	d505      	bpl.n	25134 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   25128:	4601      	mov	r1, r0
   2512a:	322a      	adds	r2, #42	; 0x2a
   2512c:	f811 0b01 	ldrb.w	r0, [r1], #1
   25130:	f7e4 bc5a 	b.w	99e8 <hci_id_add>
}
   25134:	4770      	bx	lr

00025136 <addr_res_enable>:
{
   25136:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25138:	2101      	movs	r1, #1
{
   2513a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2513c:	f242 002d 	movw	r0, #8237	; 0x202d
   25140:	f7e4 f8f8 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
   25144:	4604      	mov	r4, r0
   25146:	b158      	cbz	r0, 25160 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   25148:	4629      	mov	r1, r5
   2514a:	3008      	adds	r0, #8
   2514c:	f001 fdfd 	bl	26d4a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25150:	4621      	mov	r1, r4
   25152:	2200      	movs	r2, #0
}
   25154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25158:	f242 002d 	movw	r0, #8237	; 0x202d
   2515c:	f7e4 ba4a 	b.w	95f4 <bt_hci_cmd_send_sync>
}
   25160:	f06f 0036 	mvn.w	r0, #54	; 0x36
   25164:	bd38      	pop	{r3, r4, r5, pc}

00025166 <bt_lookup_id_addr>:
{
   25166:	b510      	push	{r4, lr}
   25168:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2516a:	f7eb f9b7 	bl	104dc <bt_keys_find_irk>
		if (keys) {
   2516e:	b100      	cbz	r0, 25172 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   25170:	1c44      	adds	r4, r0, #1
}
   25172:	4620      	mov	r0, r4
   25174:	bd10      	pop	{r4, pc}

00025176 <bt_hci_disconnect>:
{
   25176:	b570      	push	{r4, r5, r6, lr}
   25178:	4606      	mov	r6, r0
   2517a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2517c:	f240 4006 	movw	r0, #1030	; 0x406
   25180:	2103      	movs	r1, #3
   25182:	f7e4 f8d7 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
   25186:	4604      	mov	r4, r0
   25188:	b168      	cbz	r0, 251a6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2518a:	2103      	movs	r1, #3
   2518c:	3008      	adds	r0, #8
   2518e:	f001 fdcd 	bl	26d2c <net_buf_simple_add>
	disconn->reason = reason;
   25192:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   25194:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   25196:	4621      	mov	r1, r4
   25198:	2200      	movs	r2, #0
}
   2519a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2519e:	f240 4006 	movw	r0, #1030	; 0x406
   251a2:	f7e4 ba27 	b.w	95f4 <bt_hci_cmd_send_sync>
}
   251a6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   251aa:	bd70      	pop	{r4, r5, r6, pc}

000251ac <bt_le_set_data_len>:
{
   251ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251ae:	4607      	mov	r7, r0
   251b0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   251b2:	f242 0022 	movw	r0, #8226	; 0x2022
   251b6:	2106      	movs	r1, #6
{
   251b8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   251ba:	f7e4 f8bb 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
   251be:	4604      	mov	r4, r0
   251c0:	b170      	cbz	r0, 251e0 <bt_le_set_data_len+0x34>
   251c2:	2106      	movs	r1, #6
   251c4:	3008      	adds	r0, #8
   251c6:	f001 fdb1 	bl	26d2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   251ca:	883b      	ldrh	r3, [r7, #0]
   251cc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   251ce:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   251d0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   251d2:	4621      	mov	r1, r4
   251d4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   251d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   251dc:	f7e4 b8e4 	b.w	93a8 <bt_hci_cmd_send>
}
   251e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   251e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000251e6 <bt_le_set_phy>:
{
   251e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   251ea:	4680      	mov	r8, r0
   251ec:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   251ee:	f242 0032 	movw	r0, #8242	; 0x2032
   251f2:	2107      	movs	r1, #7
{
   251f4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   251f8:	4616      	mov	r6, r2
   251fa:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   251fc:	f7e4 f89a 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
   25200:	4604      	mov	r4, r0
   25202:	b190      	cbz	r0, 2522a <bt_le_set_phy+0x44>
   25204:	2107      	movs	r1, #7
   25206:	3008      	adds	r0, #8
   25208:	f001 fd90 	bl	26d2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2520c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   25210:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   25212:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   25214:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   25216:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   25218:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2521c:	4621      	mov	r1, r4
   2521e:	f242 0032 	movw	r0, #8242	; 0x2032
}
   25222:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   25226:	f7e4 b8bf 	b.w	93a8 <bt_hci_cmd_send>
}
   2522a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025232 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   25232:	8803      	ldrh	r3, [r0, #0]
   25234:	8842      	ldrh	r2, [r0, #2]
   25236:	4293      	cmp	r3, r2
{
   25238:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2523a:	d819      	bhi.n	25270 <bt_le_conn_params_valid+0x3e>
   2523c:	2b05      	cmp	r3, #5
   2523e:	d917      	bls.n	25270 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   25240:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   25244:	d814      	bhi.n	25270 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   25246:	8883      	ldrh	r3, [r0, #4]
   25248:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2524c:	d210      	bcs.n	25270 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2524e:	88c0      	ldrh	r0, [r0, #6]
   25250:	f1a0 010a 	sub.w	r1, r0, #10
   25254:	b289      	uxth	r1, r1
   25256:	f640 4476 	movw	r4, #3190	; 0xc76
   2525a:	42a1      	cmp	r1, r4
   2525c:	d808      	bhi.n	25270 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2525e:	3301      	adds	r3, #1
   25260:	b29b      	uxth	r3, r3
   25262:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   25264:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   25268:	bf34      	ite	cc
   2526a:	2001      	movcc	r0, #1
   2526c:	2000      	movcs	r0, #0
}
   2526e:	bd10      	pop	{r4, pc}
		return false;
   25270:	2000      	movs	r0, #0
   25272:	e7fc      	b.n	2526e <bt_le_conn_params_valid+0x3c>

00025274 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   25274:	7a03      	ldrb	r3, [r0, #8]
   25276:	07d9      	lsls	r1, r3, #31
   25278:	d504      	bpl.n	25284 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2527a:	f023 0301 	bic.w	r3, r3, #1
   2527e:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   25280:	f7e4 be7a 	b.w	9f78 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   25284:	0799      	lsls	r1, r3, #30
   25286:	d504      	bpl.n	25292 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   25288:	f023 0302 	bic.w	r3, r3, #2
   2528c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2528e:	f7e4 bf45 	b.w	a11c <bt_id_del>
}
   25292:	4770      	bx	lr

00025294 <bt_send>:
		return bt_hci_ecc_send(buf);
   25294:	f7e3 b854 	b.w	8340 <bt_hci_ecc_send>

00025298 <bt_addr_le_is_bonded>:
{
   25298:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2529a:	f7eb f97b 	bl	10594 <bt_keys_find_addr>
		return keys && keys->keys;
   2529e:	b118      	cbz	r0, 252a8 <bt_addr_le_is_bonded+0x10>
   252a0:	89c0      	ldrh	r0, [r0, #14]
   252a2:	3800      	subs	r0, #0
   252a4:	bf18      	it	ne
   252a6:	2001      	movne	r0, #1
}
   252a8:	bd08      	pop	{r3, pc}

000252aa <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   252aa:	6880      	ldr	r0, [r0, #8]
   252ac:	f7e5 bd48 	b.w	ad40 <enh_conn_complete>

000252b0 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   252b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   252b2:	f04f 32ff 	mov.w	r2, #4294967295
{
   252b6:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   252b8:	f04f 33ff 	mov.w	r3, #4294967295
   252bc:	2100      	movs	r1, #0
{
   252be:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   252c0:	f7e3 fae2 	bl	8888 <bt_buf_get_evt>
   252c4:	2102      	movs	r1, #2
   252c6:	4604      	mov	r4, r0
   252c8:	3008      	adds	r0, #8
   252ca:	f001 fd2f 	bl	26d2c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   252ce:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   252d0:	7045      	strb	r5, [r0, #1]

	return buf;
}
   252d2:	4620      	mov	r0, r4
   252d4:	bd70      	pop	{r4, r5, r6, pc}

000252d6 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   252d6:	3103      	adds	r1, #3
{
   252d8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   252da:	b2c9      	uxtb	r1, r1
{
   252dc:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   252de:	200e      	movs	r0, #14
   252e0:	f7ff ffe6 	bl	252b0 <bt_hci_evt_create>
   252e4:	2103      	movs	r1, #3
   252e6:	4604      	mov	r4, r0
   252e8:	3008      	adds	r0, #8
   252ea:	f001 fd1f 	bl	26d2c <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   252ee:	2301      	movs	r3, #1
   252f0:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   252f2:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   252f6:	4620      	mov	r0, r4
   252f8:	bd38      	pop	{r3, r4, r5, pc}

000252fa <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   252fa:	b570      	push	{r4, r5, r6, lr}
   252fc:	4605      	mov	r5, r0
   252fe:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   25300:	200f      	movs	r0, #15
   25302:	2104      	movs	r1, #4
   25304:	f7ff ffd4 	bl	252b0 <bt_hci_evt_create>
   25308:	2104      	movs	r1, #4
   2530a:	4604      	mov	r4, r0
   2530c:	3008      	adds	r0, #8
   2530e:	f001 fd0d 	bl	26d2c <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   25312:	2201      	movs	r2, #1
	cs->status = status;
   25314:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   25316:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   25318:	8045      	strh	r5, [r0, #2]

	return buf;
}
   2531a:	4620      	mov	r0, r4
   2531c:	bd70      	pop	{r4, r5, r6, pc}

0002531e <atomic_and>:
{
   2531e:	4603      	mov	r3, r0
}
   25320:	f3bf 8f5b 	dmb	ish
   25324:	e853 0f00 	ldrex	r0, [r3]
   25328:	ea00 0201 	and.w	r2, r0, r1
   2532c:	e843 2c00 	strex	ip, r2, [r3]
   25330:	f1bc 0f00 	cmp.w	ip, #0
   25334:	d1f6      	bne.n	25324 <atomic_and+0x6>
   25336:	f3bf 8f5b 	dmb	ish
   2533a:	4770      	bx	lr

0002533c <tx_notify>:
{
   2533c:	b570      	push	{r4, r5, r6, lr}
   2533e:	4604      	mov	r4, r0
	__asm__ volatile(
   25340:	f04f 0220 	mov.w	r2, #32
   25344:	f3ef 8311 	mrs	r3, BASEPRI
   25348:	f382 8811 	msr	BASEPRI, r2
   2534c:	f3bf 8f6f 	isb	sy
	return list->head;
   25350:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   25352:	b920      	cbnz	r0, 2535e <tx_notify+0x22>
	__asm__ volatile(
   25354:	f383 8811 	msr	BASEPRI, r3
   25358:	f3bf 8f6f 	isb	sy
}
   2535c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2535e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   25360:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25362:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25364:	4288      	cmp	r0, r1
	list->tail = node;
   25366:	bf08      	it	eq
   25368:	6262      	streq	r2, [r4, #36]	; 0x24
   2536a:	f383 8811 	msr	BASEPRI, r3
   2536e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   25372:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   25376:	f7e5 febd 	bl	b0f4 <tx_free>
		cb(conn, user_data);
   2537a:	4631      	mov	r1, r6
   2537c:	4620      	mov	r0, r4
   2537e:	47a8      	blx	r5
	while (1) {
   25380:	e7de      	b.n	25340 <tx_notify+0x4>

00025382 <tx_complete_work>:
	tx_notify(conn);
   25382:	3828      	subs	r0, #40	; 0x28
   25384:	f7ff bfda 	b.w	2533c <tx_notify>

00025388 <bt_conn_new>:
{
   25388:	b538      	push	{r3, r4, r5, lr}
   2538a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   2538c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2538e:	2501      	movs	r5, #1
   25390:	428b      	cmp	r3, r1
   25392:	d102      	bne.n	2539a <bt_conn_new+0x12>
		return NULL;
   25394:	2400      	movs	r4, #0
}
   25396:	4620      	mov	r0, r4
   25398:	bd38      	pop	{r3, r4, r5, pc}
   2539a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   2539e:	f3bf 8f5b 	dmb	ish
   253a2:	e852 0f00 	ldrex	r0, [r2]
   253a6:	2800      	cmp	r0, #0
   253a8:	d104      	bne.n	253b4 <bt_conn_new+0x2c>
   253aa:	e842 5c00 	strex	ip, r5, [r2]
   253ae:	f1bc 0f00 	cmp.w	ip, #0
   253b2:	d1f6      	bne.n	253a2 <bt_conn_new+0x1a>
   253b4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   253b8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   253bc:	d002      	beq.n	253c4 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   253be:	3301      	adds	r3, #1
   253c0:	4604      	mov	r4, r0
   253c2:	e7e5      	b.n	25390 <bt_conn_new+0x8>
	if (!conn) {
   253c4:	2c00      	cmp	r4, #0
   253c6:	d0e6      	beq.n	25396 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   253c8:	22b8      	movs	r2, #184	; 0xb8
   253ca:	2100      	movs	r1, #0
   253cc:	4620      	mov	r0, r4
   253ce:	f7ff fc6a 	bl	24ca6 <memset>
	return conn;
   253d2:	e7e0      	b.n	25396 <bt_conn_new+0xe>

000253d4 <bt_conn_set_security>:
{
   253d4:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   253d6:	7b43      	ldrb	r3, [r0, #13]
   253d8:	2b07      	cmp	r3, #7
{
   253da:	4604      	mov	r4, r0
   253dc:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   253de:	d124      	bne.n	2542a <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   253e0:	7a43      	ldrb	r3, [r0, #9]
   253e2:	428b      	cmp	r3, r1
   253e4:	d224      	bcs.n	25430 <bt_conn_set_security+0x5c>
   253e6:	7a83      	ldrb	r3, [r0, #10]
   253e8:	428b      	cmp	r3, r1
   253ea:	d221      	bcs.n	25430 <bt_conn_set_security+0x5c>
	if (val) {
   253ec:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   253ee:	f100 0004 	add.w	r0, r0, #4
   253f2:	d515      	bpl.n	25420 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   253f4:	f3bf 8f5b 	dmb	ish
   253f8:	e850 3f00 	ldrex	r3, [r0]
   253fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   25400:	e840 3200 	strex	r2, r3, [r0]
   25404:	2a00      	cmp	r2, #0
   25406:	d1f7      	bne.n	253f8 <bt_conn_set_security+0x24>
   25408:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2540c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   25410:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   25412:	4620      	mov	r0, r4
   25414:	f7ea f9ae 	bl	f774 <bt_smp_start_security>
	if (err) {
   25418:	b108      	cbz	r0, 2541e <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   2541a:	7a63      	ldrb	r3, [r4, #9]
   2541c:	72a3      	strb	r3, [r4, #10]
}
   2541e:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25420:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   25424:	f7ff ff7b 	bl	2531e <atomic_and>
   25428:	e7f0      	b.n	2540c <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2542a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   2542e:	e7f6      	b.n	2541e <bt_conn_set_security+0x4a>
		return 0;
   25430:	2000      	movs	r0, #0
   25432:	e7f4      	b.n	2541e <bt_conn_set_security+0x4a>

00025434 <bt_conn_get_security>:
}
   25434:	7a40      	ldrb	r0, [r0, #9]
   25436:	4770      	bx	lr

00025438 <bt_conn_reset_rx_state>:
{
   25438:	b510      	push	{r4, lr}
   2543a:	4604      	mov	r4, r0
	if (!conn->rx) {
   2543c:	6900      	ldr	r0, [r0, #16]
   2543e:	b118      	cbz	r0, 25448 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   25440:	f7f8 fa18 	bl	1d874 <net_buf_unref>
	conn->rx = NULL;
   25444:	2300      	movs	r3, #0
   25446:	6123      	str	r3, [r4, #16]
}
   25448:	bd10      	pop	{r4, pc}

0002544a <bt_conn_is_peer_addr_le>:
{
   2544a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2544c:	7a03      	ldrb	r3, [r0, #8]
   2544e:	428b      	cmp	r3, r1
{
   25450:	4604      	mov	r4, r0
   25452:	4615      	mov	r5, r2
	if (id != conn->id) {
   25454:	d115      	bne.n	25482 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   25456:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2545a:	2207      	movs	r2, #7
   2545c:	4628      	mov	r0, r5
   2545e:	f7ff fbe6 	bl	24c2e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25462:	b180      	cbz	r0, 25486 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   25464:	78e3      	ldrb	r3, [r4, #3]
   25466:	2207      	movs	r2, #7
   25468:	b943      	cbnz	r3, 2547c <bt_conn_is_peer_addr_le+0x32>
   2546a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2546e:	4628      	mov	r0, r5
   25470:	f7ff fbdd 	bl	24c2e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   25474:	fab0 f080 	clz	r0, r0
   25478:	0940      	lsrs	r0, r0, #5
}
   2547a:	bd38      	pop	{r3, r4, r5, pc}
   2547c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   25480:	e7f5      	b.n	2546e <bt_conn_is_peer_addr_le+0x24>
		return false;
   25482:	2000      	movs	r0, #0
   25484:	e7f9      	b.n	2547a <bt_conn_is_peer_addr_le+0x30>
		return true;
   25486:	2001      	movs	r0, #1
   25488:	e7f7      	b.n	2547a <bt_conn_is_peer_addr_le+0x30>

0002548a <bt_conn_ref>:
{
   2548a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2548c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25490:	f3bf 8f5b 	dmb	ish
   25494:	6813      	ldr	r3, [r2, #0]
   25496:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2549a:	b17b      	cbz	r3, 254bc <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2549c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   254a0:	1c59      	adds	r1, r3, #1
   254a2:	e852 4f00 	ldrex	r4, [r2]
   254a6:	429c      	cmp	r4, r3
   254a8:	d104      	bne.n	254b4 <bt_conn_ref+0x2a>
   254aa:	e842 1c00 	strex	ip, r1, [r2]
   254ae:	f1bc 0f00 	cmp.w	ip, #0
   254b2:	d1f6      	bne.n	254a2 <bt_conn_ref+0x18>
   254b4:	f3bf 8f5b 	dmb	ish
   254b8:	d1ea      	bne.n	25490 <bt_conn_ref+0x6>
}
   254ba:	bd10      	pop	{r4, pc}
			return NULL;
   254bc:	4618      	mov	r0, r3
   254be:	e7fc      	b.n	254ba <bt_conn_ref+0x30>

000254c0 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   254c0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   254c4:	f3bf 8f5b 	dmb	ish
   254c8:	e853 2f00 	ldrex	r2, [r3]
   254cc:	3a01      	subs	r2, #1
   254ce:	e843 2100 	strex	r1, r2, [r3]
   254d2:	2900      	cmp	r1, #0
   254d4:	d1f8      	bne.n	254c8 <bt_conn_unref+0x8>
   254d6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   254da:	f3bf 8f5b 	dmb	ish
   254de:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   254e2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   254e6:	b90b      	cbnz	r3, 254ec <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   254e8:	f7e5 bbe4 	b.w	acb4 <bt_le_adv_resume>
}
   254ec:	4770      	bx	lr

000254ee <conn_lookup_handle>:
{
   254ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   254f2:	4607      	mov	r7, r0
   254f4:	460e      	mov	r6, r1
   254f6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   254f8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   254fa:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   254fe:	42b4      	cmp	r4, r6
   25500:	d103      	bne.n	2550a <conn_lookup_handle+0x1c>
	return NULL;
   25502:	2300      	movs	r3, #0
}
   25504:	4618      	mov	r0, r3
   25506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2550a:	fb09 7004 	mla	r0, r9, r4, r7
   2550e:	f7ff ffbc 	bl	2548a <bt_conn_ref>
   25512:	4603      	mov	r3, r0
		if (!conn) {
   25514:	b158      	cbz	r0, 2552e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   25516:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   25518:	2d01      	cmp	r5, #1
   2551a:	d002      	beq.n	25522 <conn_lookup_handle+0x34>
   2551c:	3d07      	subs	r5, #7
   2551e:	2d01      	cmp	r5, #1
   25520:	d803      	bhi.n	2552a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   25522:	881a      	ldrh	r2, [r3, #0]
   25524:	4542      	cmp	r2, r8
   25526:	d0ed      	beq.n	25504 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   25528:	4618      	mov	r0, r3
   2552a:	f7ff ffc9 	bl	254c0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2552e:	3401      	adds	r4, #1
   25530:	e7e5      	b.n	254fe <conn_lookup_handle+0x10>

00025532 <bt_conn_get_dst>:
}
   25532:	3088      	adds	r0, #136	; 0x88
   25534:	4770      	bx	lr

00025536 <bt_conn_disconnect>:
{
   25536:	b538      	push	{r3, r4, r5, lr}
   25538:	7b43      	ldrb	r3, [r0, #13]
   2553a:	3b02      	subs	r3, #2
   2553c:	4605      	mov	r5, r0
   2553e:	2b06      	cmp	r3, #6
   25540:	d805      	bhi.n	2554e <bt_conn_disconnect+0x18>
   25542:	e8df f003 	tbb	[pc, r3]
   25546:	0408      	.short	0x0408
   25548:	0e0c0404 	.word	0x0e0c0404
   2554c:	0c          	.byte	0x0c
   2554d:	00          	.byte	0x00
	switch (conn->state) {
   2554e:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   25552:	4620      	mov	r0, r4
   25554:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   25556:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   25558:	2100      	movs	r1, #0
   2555a:	f7e6 f8a7 	bl	b6ac <bt_conn_set_state>
		return 0;
   2555e:	2400      	movs	r4, #0
   25560:	e7f7      	b.n	25552 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   25562:	8800      	ldrh	r0, [r0, #0]
   25564:	f7ff fe07 	bl	25176 <bt_hci_disconnect>
	if (err) {
   25568:	4604      	mov	r4, r0
   2556a:	2800      	cmp	r0, #0
   2556c:	d1f1      	bne.n	25552 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2556e:	2108      	movs	r1, #8
   25570:	4628      	mov	r0, r5
   25572:	f7e6 f89b 	bl	b6ac <bt_conn_set_state>
	return 0;
   25576:	e7ec      	b.n	25552 <bt_conn_disconnect+0x1c>

00025578 <bt_conn_le_conn_update>:
{
   25578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2557a:	4607      	mov	r7, r0
   2557c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2557e:	f242 0013 	movw	r0, #8211	; 0x2013
   25582:	210e      	movs	r1, #14
   25584:	f7e3 fed6 	bl	9334 <bt_hci_cmd_create>
	if (!buf) {
   25588:	4606      	mov	r6, r0
   2558a:	b1d0      	cbz	r0, 255c2 <bt_conn_le_conn_update+0x4a>
   2558c:	210e      	movs	r1, #14
   2558e:	3008      	adds	r0, #8
   25590:	f001 fbcc 	bl	26d2c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25594:	220e      	movs	r2, #14
   25596:	4604      	mov	r4, r0
   25598:	2100      	movs	r1, #0
   2559a:	f7ff fb84 	bl	24ca6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2559e:	883b      	ldrh	r3, [r7, #0]
   255a0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   255a2:	882b      	ldrh	r3, [r5, #0]
   255a4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   255a6:	886b      	ldrh	r3, [r5, #2]
   255a8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   255aa:	88ab      	ldrh	r3, [r5, #4]
   255ac:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   255ae:	88eb      	ldrh	r3, [r5, #6]
   255b0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   255b2:	4631      	mov	r1, r6
   255b4:	2200      	movs	r2, #0
}
   255b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   255ba:	f242 0013 	movw	r0, #8211	; 0x2013
   255be:	f7e4 b819 	b.w	95f4 <bt_hci_cmd_send_sync>
}
   255c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   255c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000255c8 <l2cap_connected>:
}
   255c8:	4770      	bx	lr

000255ca <l2cap_disconnected>:
   255ca:	4770      	bx	lr

000255cc <bt_l2cap_chan_remove>:
	return list->head;
   255cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   255ce:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   255d0:	b17b      	cbz	r3, 255f2 <bt_l2cap_chan_remove+0x26>
   255d2:	3b08      	subs	r3, #8
   255d4:	2200      	movs	r2, #0
   255d6:	b163      	cbz	r3, 255f2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   255d8:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   255da:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   255de:	d10e      	bne.n	255fe <bt_l2cap_chan_remove+0x32>
	return node->next;
   255e0:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   255e2:	6d05      	ldr	r5, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   255e4:	b932      	cbnz	r2, 255f4 <bt_l2cap_chan_remove+0x28>
   255e6:	42ac      	cmp	r4, r5
	list->head = node;
   255e8:	64c1      	str	r1, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   255ea:	d100      	bne.n	255ee <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   255ec:	6501      	str	r1, [r0, #80]	; 0x50
	parent->next = child;
   255ee:	2200      	movs	r2, #0
   255f0:	609a      	str	r2, [r3, #8]
}
   255f2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   255f4:	42ac      	cmp	r4, r5
	parent->next = child;
   255f6:	6011      	str	r1, [r2, #0]
	list->tail = node;
   255f8:	bf08      	it	eq
   255fa:	6502      	streq	r2, [r0, #80]	; 0x50
}
   255fc:	e7f7      	b.n	255ee <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   255fe:	2c00      	cmp	r4, #0
   25600:	d0f7      	beq.n	255f2 <bt_l2cap_chan_remove+0x26>
	return node->next;
   25602:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25604:	2b00      	cmp	r3, #0
   25606:	d0f4      	beq.n	255f2 <bt_l2cap_chan_remove+0x26>
   25608:	3b08      	subs	r3, #8
   2560a:	4622      	mov	r2, r4
   2560c:	e7e3      	b.n	255d6 <bt_l2cap_chan_remove+0xa>

0002560e <bt_l2cap_chan_del>:
{
   2560e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   25610:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   25614:	4604      	mov	r4, r0
	if (!chan->conn) {
   25616:	b123      	cbz	r3, 25622 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25618:	686b      	ldr	r3, [r5, #4]
   2561a:	b103      	cbz	r3, 2561e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2561c:	4798      	blx	r3
	chan->conn = NULL;
   2561e:	2300      	movs	r3, #0
   25620:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   25622:	68e3      	ldr	r3, [r4, #12]
   25624:	b10b      	cbz	r3, 2562a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   25626:	4620      	mov	r0, r4
   25628:	4798      	blx	r3
	if (ops->released) {
   2562a:	69eb      	ldr	r3, [r5, #28]
   2562c:	b11b      	cbz	r3, 25636 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2562e:	4620      	mov	r0, r4
}
   25630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   25634:	4718      	bx	r3
}
   25636:	bd70      	pop	{r4, r5, r6, pc}

00025638 <bt_l2cap_disconnected>:
	return list->head;
   25638:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   2563a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2563c:	b18b      	cbz	r3, 25662 <bt_l2cap_disconnected+0x2a>
   2563e:	f1b3 0008 	subs.w	r0, r3, #8
   25642:	d00e      	beq.n	25662 <bt_l2cap_disconnected+0x2a>
	return node->next;
   25644:	681c      	ldr	r4, [r3, #0]
   25646:	b104      	cbz	r4, 2564a <bt_l2cap_disconnected+0x12>
   25648:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2564a:	f7ff ffe0 	bl	2560e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2564e:	b144      	cbz	r4, 25662 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25650:	f114 0308 	adds.w	r3, r4, #8
   25654:	d002      	beq.n	2565c <bt_l2cap_disconnected+0x24>
	return node->next;
   25656:	68a3      	ldr	r3, [r4, #8]
   25658:	b103      	cbz	r3, 2565c <bt_l2cap_disconnected+0x24>
   2565a:	3b08      	subs	r3, #8
{
   2565c:	4620      	mov	r0, r4
   2565e:	461c      	mov	r4, r3
   25660:	e7f3      	b.n	2564a <bt_l2cap_disconnected+0x12>
}
   25662:	bd10      	pop	{r4, pc}

00025664 <bt_l2cap_security_changed>:
{
   25664:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   25666:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   25668:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2566a:	b1a3      	cbz	r3, 25696 <bt_l2cap_security_changed+0x32>
   2566c:	f1b3 0008 	subs.w	r0, r3, #8
   25670:	d011      	beq.n	25696 <bt_l2cap_security_changed+0x32>
	return node->next;
   25672:	681c      	ldr	r4, [r3, #0]
   25674:	b104      	cbz	r4, 25678 <bt_l2cap_security_changed+0x14>
   25676:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25678:	6843      	ldr	r3, [r0, #4]
   2567a:	689b      	ldr	r3, [r3, #8]
   2567c:	b10b      	cbz	r3, 25682 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2567e:	4629      	mov	r1, r5
   25680:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25682:	b144      	cbz	r4, 25696 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25684:	f114 0308 	adds.w	r3, r4, #8
   25688:	d002      	beq.n	25690 <bt_l2cap_security_changed+0x2c>
	return node->next;
   2568a:	68a3      	ldr	r3, [r4, #8]
   2568c:	b103      	cbz	r3, 25690 <bt_l2cap_security_changed+0x2c>
   2568e:	3b08      	subs	r3, #8
{
   25690:	4620      	mov	r0, r4
   25692:	461c      	mov	r4, r3
   25694:	e7f0      	b.n	25678 <bt_l2cap_security_changed+0x14>
}
   25696:	bd38      	pop	{r3, r4, r5, pc}

00025698 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   25698:	3104      	adds	r1, #4
   2569a:	f7e6 b9f3 	b.w	ba84 <bt_conn_create_pdu_timeout>

0002569e <bt_l2cap_send_cb>:
{
   2569e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   256a2:	4614      	mov	r4, r2
   256a4:	4605      	mov	r5, r0
   256a6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   256a8:	f102 0008 	add.w	r0, r2, #8
   256ac:	2104      	movs	r1, #4
   256ae:	461e      	mov	r6, r3
   256b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   256b4:	f001 fb51 	bl	26d5a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   256b8:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   256ba:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   256bc:	3a04      	subs	r2, #4
   256be:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   256c0:	4643      	mov	r3, r8
   256c2:	4632      	mov	r2, r6
   256c4:	4621      	mov	r1, r4
   256c6:	4628      	mov	r0, r5
}
   256c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   256cc:	f7e5 bf0e 	b.w	b4ec <bt_conn_send_cb>

000256d0 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   256d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   256d2:	b160      	cbz	r0, 256ee <bt_l2cap_le_lookup_tx_cid+0x1e>
   256d4:	3808      	subs	r0, #8
   256d6:	b900      	cbnz	r0, 256da <bt_l2cap_le_lookup_tx_cid+0xa>
   256d8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   256da:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   256de:	428b      	cmp	r3, r1
   256e0:	d005      	beq.n	256ee <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   256e2:	f110 0308 	adds.w	r3, r0, #8
   256e6:	d001      	beq.n	256ec <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   256e8:	6880      	ldr	r0, [r0, #8]
   256ea:	e7f2      	b.n	256d2 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   256ec:	4618      	mov	r0, r3
}
   256ee:	4770      	bx	lr

000256f0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   256f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   256f2:	b160      	cbz	r0, 2570e <bt_l2cap_le_lookup_rx_cid+0x1e>
   256f4:	3808      	subs	r0, #8
   256f6:	b900      	cbnz	r0, 256fa <bt_l2cap_le_lookup_rx_cid+0xa>
   256f8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   256fa:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   256fe:	428b      	cmp	r3, r1
   25700:	d005      	beq.n	2570e <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25702:	f110 0308 	adds.w	r3, r0, #8
   25706:	d001      	beq.n	2570c <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   25708:	6880      	ldr	r0, [r0, #8]
   2570a:	e7f2      	b.n	256f2 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2570c:	4618      	mov	r0, r3
}
   2570e:	4770      	bx	lr

00025710 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   25710:	4770      	bx	lr

00025712 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25712:	4603      	mov	r3, r0
	return list->head;
   25714:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   25716:	b128      	cbz	r0, 25724 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25718:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2571a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2571c:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2571e:	4288      	cmp	r0, r1
	list->tail = node;
   25720:	bf08      	it	eq
   25722:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25724:	4770      	bx	lr

00025726 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   25726:	4603      	mov	r3, r0
	size_t bytes = 0;
   25728:	2000      	movs	r0, #0

	while (buf) {
   2572a:	b903      	cbnz	r3, 2572e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2572c:	4770      	bx	lr
		bytes += buf->len;
   2572e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   25730:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   25732:	4410      	add	r0, r2
		buf = buf->frags;
   25734:	e7f9      	b.n	2572a <net_buf_frags_len+0x4>

00025736 <att_sent>:
	if (chan->ops->sent) {
   25736:	684b      	ldr	r3, [r1, #4]
   25738:	695b      	ldr	r3, [r3, #20]
{
   2573a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2573c:	b103      	cbz	r3, 25740 <att_sent+0xa>
		chan->ops->sent(chan);
   2573e:	4718      	bx	r3
}
   25740:	4770      	bx	lr

00025742 <attr_read_type_cb>:
{
   25742:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   25744:	68d4      	ldr	r4, [r2, #12]
   25746:	7823      	ldrb	r3, [r4, #0]
   25748:	3102      	adds	r1, #2
   2574a:	b913      	cbnz	r3, 25752 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2574c:	7021      	strb	r1, [r4, #0]
	return true;
   2574e:	2001      	movs	r0, #1
   25750:	e006      	b.n	25760 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25752:	428b      	cmp	r3, r1
   25754:	d0fb      	beq.n	2574e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   25756:	8983      	ldrh	r3, [r0, #12]
   25758:	3b02      	subs	r3, #2
   2575a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2575c:	2000      	movs	r0, #0
   2575e:	6110      	str	r0, [r2, #16]
}
   25760:	bd10      	pop	{r4, pc}

00025762 <att_op_get_type>:
	switch (op) {
   25762:	281e      	cmp	r0, #30
   25764:	d816      	bhi.n	25794 <att_op_get_type+0x32>
   25766:	b308      	cbz	r0, 257ac <att_op_get_type+0x4a>
   25768:	1e43      	subs	r3, r0, #1
   2576a:	2b1d      	cmp	r3, #29
   2576c:	d81e      	bhi.n	257ac <att_op_get_type+0x4a>
   2576e:	e8df f003 	tbb	[pc, r3]
   25772:	2317      	.short	0x2317
   25774:	23172317 	.word	0x23172317
   25778:	23172317 	.word	0x23172317
   2577c:	23172317 	.word	0x23172317
   25780:	23172317 	.word	0x23172317
   25784:	231d1d17 	.word	0x231d1d17
   25788:	1d172317 	.word	0x1d172317
   2578c:	0f1b1d19 	.word	0x0f1b1d19
   25790:	2004      	movs	r0, #4
   25792:	4770      	bx	lr
   25794:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   25798:	2b52      	cmp	r3, #82	; 0x52
   2579a:	d107      	bne.n	257ac <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2579c:	2000      	movs	r0, #0
}
   2579e:	4770      	bx	lr
		return ATT_RESPONSE;
   257a0:	2002      	movs	r0, #2
   257a2:	4770      	bx	lr
		return ATT_NOTIFICATION;
   257a4:	2003      	movs	r0, #3
   257a6:	4770      	bx	lr
		return ATT_INDICATION;
   257a8:	2005      	movs	r0, #5
   257aa:	4770      	bx	lr
		return ATT_COMMAND;
   257ac:	f010 0f40 	tst.w	r0, #64	; 0x40
   257b0:	bf0c      	ite	eq
   257b2:	2006      	moveq	r0, #6
   257b4:	2000      	movne	r0, #0
   257b6:	4770      	bx	lr
		return ATT_REQUEST;
   257b8:	2001      	movs	r0, #1
   257ba:	4770      	bx	lr

000257bc <bt_gatt_foreach_attr>:
{
   257bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   257be:	e9cd 2301 	strd	r2, r3, [sp, #4]
   257c2:	2300      	movs	r3, #0
   257c4:	9300      	str	r3, [sp, #0]
   257c6:	461a      	mov	r2, r3
   257c8:	f7e8 fa7c 	bl	dcc4 <bt_gatt_foreach_attr_type>
}
   257cc:	b005      	add	sp, #20
   257ce:	f85d fb04 	ldr.w	pc, [sp], #4

000257d2 <find_info_cb>:
{
   257d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   257d4:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   257d6:	6817      	ldr	r7, [r2, #0]
{
   257d8:	4605      	mov	r5, r0
   257da:	460e      	mov	r6, r1
   257dc:	4614      	mov	r4, r2
	if (!data->rsp) {
   257de:	b963      	cbnz	r3, 257fa <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   257e0:	6850      	ldr	r0, [r2, #4]
   257e2:	2101      	movs	r1, #1
   257e4:	3008      	adds	r0, #8
   257e6:	f001 faa1 	bl	26d2c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   257ea:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   257ec:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   257ee:	781b      	ldrb	r3, [r3, #0]
   257f0:	2b00      	cmp	r3, #0
   257f2:	bf0c      	ite	eq
   257f4:	2301      	moveq	r3, #1
   257f6:	2302      	movne	r3, #2
   257f8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   257fa:	68a3      	ldr	r3, [r4, #8]
   257fc:	781b      	ldrb	r3, [r3, #0]
   257fe:	2b01      	cmp	r3, #1
   25800:	d003      	beq.n	2580a <find_info_cb+0x38>
   25802:	2b02      	cmp	r3, #2
   25804:	d019      	beq.n	2583a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   25806:	2000      	movs	r0, #0
   25808:	e016      	b.n	25838 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2580a:	682b      	ldr	r3, [r5, #0]
   2580c:	781b      	ldrb	r3, [r3, #0]
   2580e:	2b00      	cmp	r3, #0
   25810:	d1f9      	bne.n	25806 <find_info_cb+0x34>
   25812:	6860      	ldr	r0, [r4, #4]
   25814:	2104      	movs	r1, #4
   25816:	3008      	adds	r0, #8
   25818:	f001 fa88 	bl	26d2c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2581c:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2581e:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25820:	885b      	ldrh	r3, [r3, #2]
   25822:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   25824:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   25826:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   25828:	899b      	ldrh	r3, [r3, #12]
   2582a:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   2582e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25830:	2804      	cmp	r0, #4
   25832:	bf94      	ite	ls
   25834:	2000      	movls	r0, #0
   25836:	2001      	movhi	r0, #1
}
   25838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2583a:	682b      	ldr	r3, [r5, #0]
   2583c:	781b      	ldrb	r3, [r3, #0]
   2583e:	2b02      	cmp	r3, #2
   25840:	d1e1      	bne.n	25806 <find_info_cb+0x34>
   25842:	6860      	ldr	r0, [r4, #4]
   25844:	2112      	movs	r1, #18
   25846:	3008      	adds	r0, #8
   25848:	f001 fa70 	bl	26d2c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2584c:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2584e:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25850:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   25852:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25856:	3101      	adds	r1, #1
   25858:	f7ff f9fa 	bl	24c50 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2585c:	6863      	ldr	r3, [r4, #4]
   2585e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   25862:	899b      	ldrh	r3, [r3, #12]
   25864:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25866:	2812      	cmp	r0, #18
   25868:	e7e3      	b.n	25832 <find_info_cb+0x60>

0002586a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2586a:	68d0      	ldr	r0, [r2, #12]
   2586c:	7803      	ldrb	r3, [r0, #0]
   2586e:	3104      	adds	r1, #4
   25870:	b913      	cbnz	r3, 25878 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25872:	7001      	strb	r1, [r0, #0]
	return true;
   25874:	2001      	movs	r0, #1
}
   25876:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25878:	428b      	cmp	r3, r1
   2587a:	d0fb      	beq.n	25874 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2587c:	6891      	ldr	r1, [r2, #8]
   2587e:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   25880:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   25882:	3b04      	subs	r3, #4
   25884:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   25886:	6110      	str	r0, [r2, #16]
		return false;
   25888:	4770      	bx	lr

0002588a <write_cb>:
{
   2588a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2588c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2588e:	4601      	mov	r1, r0
{
   25890:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25892:	222a      	movs	r2, #42	; 0x2a
   25894:	6820      	ldr	r0, [r4, #0]
   25896:	f000 fdd1 	bl	2643c <bt_gatt_check_perm>
   2589a:	4605      	mov	r5, r0
   2589c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2589e:	bb00      	cbnz	r0, 258e2 <write_cb+0x58>
	if (!data->req) {
   258a0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   258a2:	68b7      	ldr	r7, [r6, #8]
   258a4:	68e2      	ldr	r2, [r4, #12]
   258a6:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   258a8:	2b00      	cmp	r3, #0
   258aa:	bf14      	ite	ne
   258ac:	2300      	movne	r3, #0
   258ae:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   258b0:	9301      	str	r3, [sp, #4]
   258b2:	8a63      	ldrh	r3, [r4, #18]
   258b4:	9300      	str	r3, [sp, #0]
   258b6:	4631      	mov	r1, r6
   258b8:	8a23      	ldrh	r3, [r4, #16]
   258ba:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   258bc:	1e03      	subs	r3, r0, #0
   258be:	db05      	blt.n	258cc <write_cb+0x42>
   258c0:	8a22      	ldrh	r2, [r4, #16]
   258c2:	4293      	cmp	r3, r2
   258c4:	d10b      	bne.n	258de <write_cb+0x54>
	data->err = 0U;
   258c6:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   258c8:	2501      	movs	r5, #1
   258ca:	e005      	b.n	258d8 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   258cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   258d0:	d305      	bcc.n	258de <write_cb+0x54>
		return -err;
   258d2:	425b      	negs	r3, r3
   258d4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   258d6:	7523      	strb	r3, [r4, #20]
}
   258d8:	4628      	mov	r0, r5
   258da:	b003      	add	sp, #12
   258dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   258de:	230e      	movs	r3, #14
   258e0:	e7f9      	b.n	258d6 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   258e2:	2500      	movs	r5, #0
   258e4:	e7f8      	b.n	258d8 <write_cb+0x4e>

000258e6 <chan_req_send>:
{
   258e6:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   258e8:	688e      	ldr	r6, [r1, #8]
{
   258ea:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   258ec:	4630      	mov	r0, r6
   258ee:	f7ff ff1a 	bl	25726 <net_buf_frags_len>
   258f2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   258f6:	4283      	cmp	r3, r0
{
   258f8:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   258fa:	d30a      	bcc.n	25912 <chan_req_send+0x2c>
	req->buf = NULL;
   258fc:	2200      	movs	r2, #0
	chan->req = req;
   258fe:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	err = chan_send(chan, buf, NULL);
   25902:	4628      	mov	r0, r5
	req->buf = NULL;
   25904:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   25906:	4631      	mov	r1, r6
   25908:	f7e6 fc8c 	bl	c224 <chan_send>
	if (err) {
   2590c:	b100      	cbz	r0, 25910 <chan_req_send+0x2a>
		req->buf = buf;
   2590e:	60a6      	str	r6, [r4, #8]
}
   25910:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   25912:	f06f 0023 	mvn.w	r0, #35	; 0x23
   25916:	e7fb      	b.n	25910 <chan_req_send+0x2a>

00025918 <process_queue>:
{
   25918:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2591a:	2200      	movs	r2, #0
{
   2591c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2591e:	2300      	movs	r3, #0
   25920:	4608      	mov	r0, r1
{
   25922:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   25924:	f001 f9b1 	bl	26c8a <net_buf_get>
	if (buf) {
   25928:	4605      	mov	r5, r0
   2592a:	b160      	cbz	r0, 25946 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2592c:	4601      	mov	r1, r0
   2592e:	2200      	movs	r2, #0
   25930:	4620      	mov	r0, r4
   25932:	f7e6 fc77 	bl	c224 <chan_send>
		if (err) {
   25936:	4604      	mov	r4, r0
   25938:	b118      	cbz	r0, 25942 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2593a:	4629      	mov	r1, r5
   2593c:	4630      	mov	r0, r6
   2593e:	f001 fefb 	bl	27738 <k_queue_prepend>
}
   25942:	4620      	mov	r0, r4
   25944:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   25946:	f06f 0401 	mvn.w	r4, #1
   2594a:	e7fa      	b.n	25942 <process_queue+0x2a>

0002594c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2594c:	b510      	push	{r4, lr}
	return list->head;
   2594e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25950:	2200      	movs	r2, #0
   25952:	b153      	cbz	r3, 2596a <sys_slist_find_and_remove.isra.0+0x1e>
   25954:	428b      	cmp	r3, r1
   25956:	d10e      	bne.n	25976 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   25958:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2595a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2595c:	b932      	cbnz	r2, 2596c <sys_slist_find_and_remove.isra.0+0x20>
   2595e:	42a1      	cmp	r1, r4
	list->head = node;
   25960:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25962:	d100      	bne.n	25966 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   25964:	6043      	str	r3, [r0, #4]
	parent->next = child;
   25966:	2300      	movs	r3, #0
   25968:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2596a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2596c:	42a1      	cmp	r1, r4
	parent->next = child;
   2596e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25970:	bf08      	it	eq
   25972:	6042      	streq	r2, [r0, #4]
}
   25974:	e7f7      	b.n	25966 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   25976:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25978:	681b      	ldr	r3, [r3, #0]
   2597a:	e7ea      	b.n	25952 <sys_slist_find_and_remove.isra.0+0x6>

0002597c <att_chan_read>:
{
   2597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25980:	4680      	mov	r8, r0
   25982:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25984:	4610      	mov	r0, r2
{
   25986:	4699      	mov	r9, r3
   25988:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2598a:	f7ff fecc 	bl	25726 <net_buf_frags_len>
   2598e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   25992:	4283      	cmp	r3, r0
{
   25994:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25996:	d97a      	bls.n	25a8e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   25998:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2599c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2599e:	4630      	mov	r0, r6
   259a0:	f001 f9a2 	bl	26ce8 <net_buf_frag_last>
	size_t len, total = 0;
   259a4:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   259a8:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   259aa:	4630      	mov	r0, r6
   259ac:	f7ff febb 	bl	25726 <net_buf_frags_len>
   259b0:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   259b4:	f105 0708 	add.w	r7, r5, #8
   259b8:	1a24      	subs	r4, r4, r0
   259ba:	4638      	mov	r0, r7
   259bc:	f001 f9f1 	bl	26da2 <net_buf_simple_tailroom>
   259c0:	4284      	cmp	r4, r0
   259c2:	d211      	bcs.n	259e8 <att_chan_read+0x6c>
   259c4:	4630      	mov	r0, r6
   259c6:	f7ff feae 	bl	25726 <net_buf_frags_len>
   259ca:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   259ce:	1a24      	subs	r4, r4, r0
		if (!len) {
   259d0:	bb34      	cbnz	r4, 25a20 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   259d2:	79b0      	ldrb	r0, [r6, #6]
   259d4:	f7f7 fe90 	bl	1d6f8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   259d8:	2200      	movs	r2, #0
   259da:	2300      	movs	r3, #0
   259dc:	f001 f950 	bl	26c80 <net_buf_alloc_fixed>
			if (!frag) {
   259e0:	4605      	mov	r5, r0
   259e2:	b930      	cbnz	r0, 259f2 <att_chan_read+0x76>
	return total;
   259e4:	4657      	mov	r7, sl
   259e6:	e02c      	b.n	25a42 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   259e8:	4638      	mov	r0, r7
   259ea:	f001 f9da 	bl	26da2 <net_buf_simple_tailroom>
   259ee:	4604      	mov	r4, r0
   259f0:	e7ee      	b.n	259d0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   259f2:	4601      	mov	r1, r0
   259f4:	4630      	mov	r0, r6
   259f6:	f001 f988 	bl	26d0a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   259fa:	4630      	mov	r0, r6
   259fc:	f7ff fe93 	bl	25726 <net_buf_frags_len>
   25a00:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   25a04:	f105 0708 	add.w	r7, r5, #8
   25a08:	1a24      	subs	r4, r4, r0
   25a0a:	4638      	mov	r0, r7
   25a0c:	f001 f9c9 	bl	26da2 <net_buf_simple_tailroom>
   25a10:	4284      	cmp	r4, r0
   25a12:	d21a      	bcs.n	25a4a <att_chan_read+0xce>
   25a14:	4630      	mov	r0, r6
   25a16:	f7ff fe86 	bl	25726 <net_buf_frags_len>
   25a1a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   25a1e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25a20:	68a9      	ldr	r1, [r5, #8]
   25a22:	89aa      	ldrh	r2, [r5, #12]
   25a24:	f8db 7004 	ldr.w	r7, [fp, #4]
   25a28:	9803      	ldr	r0, [sp, #12]
   25a2a:	f8cd 9000 	str.w	r9, [sp]
   25a2e:	440a      	add	r2, r1
   25a30:	b2a3      	uxth	r3, r4
   25a32:	4659      	mov	r1, fp
   25a34:	47b8      	blx	r7
		if (read < 0) {
   25a36:	1e07      	subs	r7, r0, #0
   25a38:	da0c      	bge.n	25a54 <att_chan_read+0xd8>
				return total;
   25a3a:	f1ba 0f00 	cmp.w	sl, #0
   25a3e:	bf18      	it	ne
   25a40:	4657      	movne	r7, sl
}
   25a42:	4638      	mov	r0, r7
   25a44:	b005      	add	sp, #20
   25a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a4a:	4638      	mov	r0, r7
   25a4c:	f001 f9a9 	bl	26da2 <net_buf_simple_tailroom>
   25a50:	4604      	mov	r4, r0
   25a52:	e7e5      	b.n	25a20 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25a56:	b993      	cbnz	r3, 25a7e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25a58:	4639      	mov	r1, r7
   25a5a:	f105 0008 	add.w	r0, r5, #8
   25a5e:	f001 f965 	bl	26d2c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25a62:	4630      	mov	r0, r6
   25a64:	f7ff fe5f 	bl	25726 <net_buf_frags_len>
   25a68:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   25a6c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25a6e:	4283      	cmp	r3, r0
		total += read;
   25a70:	44ba      	add	sl, r7
		offset += read;
   25a72:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25a76:	d9b5      	bls.n	259e4 <att_chan_read+0x68>
   25a78:	42a7      	cmp	r7, r4
   25a7a:	d096      	beq.n	259aa <att_chan_read+0x2e>
   25a7c:	e7b2      	b.n	259e4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25a82:	4639      	mov	r1, r7
   25a84:	4628      	mov	r0, r5
   25a86:	4798      	blx	r3
   25a88:	2800      	cmp	r0, #0
   25a8a:	d1e5      	bne.n	25a58 <att_chan_read+0xdc>
   25a8c:	e7aa      	b.n	259e4 <att_chan_read+0x68>
		return 0;
   25a8e:	2700      	movs	r7, #0
   25a90:	e7d7      	b.n	25a42 <att_chan_read+0xc6>

00025a92 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25a92:	30c0      	adds	r0, #192	; 0xc0
   25a94:	f3bf 8f5b 	dmb	ish
   25a98:	e850 3f00 	ldrex	r3, [r0]
   25a9c:	f023 0302 	bic.w	r3, r3, #2
   25aa0:	e840 3200 	strex	r2, r3, [r0]
   25aa4:	2a00      	cmp	r2, #0
   25aa6:	d1f7      	bne.n	25a98 <chan_cfm_sent+0x6>
   25aa8:	f3bf 8f5b 	dmb	ish
}
   25aac:	4770      	bx	lr

00025aae <chan_rsp_sent>:
   25aae:	30c0      	adds	r0, #192	; 0xc0
   25ab0:	f3bf 8f5b 	dmb	ish
   25ab4:	e850 3f00 	ldrex	r3, [r0]
   25ab8:	f023 0301 	bic.w	r3, r3, #1
   25abc:	e840 3200 	strex	r2, r3, [r0]
   25ac0:	2a00      	cmp	r2, #0
   25ac2:	d1f7      	bne.n	25ab4 <chan_rsp_sent+0x6>
   25ac4:	f3bf 8f5b 	dmb	ish
}
   25ac8:	4770      	bx	lr

00025aca <read_cb>:
{
   25aca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25ace:	f8d2 8000 	ldr.w	r8, [r2]
{
   25ad2:	4606      	mov	r6, r0
	data->err = 0x00;
   25ad4:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25ad6:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   25ada:	7317      	strb	r7, [r2, #12]
{
   25adc:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25ade:	4631      	mov	r1, r6
   25ae0:	2215      	movs	r2, #21
   25ae2:	f000 fcab 	bl	2643c <bt_gatt_check_perm>
   25ae6:	4604      	mov	r4, r0
   25ae8:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   25aea:	b9a0      	cbnz	r0, 25b16 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25aec:	e9cd 0000 	strd	r0, r0, [sp]
   25af0:	88ab      	ldrh	r3, [r5, #4]
   25af2:	68aa      	ldr	r2, [r5, #8]
   25af4:	4631      	mov	r1, r6
   25af6:	4640      	mov	r0, r8
   25af8:	f7ff ff40 	bl	2597c <att_chan_read>
	if (ret < 0) {
   25afc:	1e03      	subs	r3, r0, #0
   25afe:	da0c      	bge.n	25b1a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   25b00:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   25b04:	bf26      	itte	cs
   25b06:	425b      	negcs	r3, r3
   25b08:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25b0a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   25b0c:	732b      	strb	r3, [r5, #12]
}
   25b0e:	4620      	mov	r0, r4
   25b10:	b002      	add	sp, #8
   25b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   25b16:	463c      	mov	r4, r7
   25b18:	e7f9      	b.n	25b0e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   25b1a:	2401      	movs	r4, #1
   25b1c:	e7f7      	b.n	25b0e <read_cb+0x44>

00025b1e <bt_att_sent>:
{
   25b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25b20:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
	struct bt_att *att = chan->att;
   25b24:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   25b28:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25b2a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   25b2e:	b10b      	cbz	r3, 25b34 <bt_att_sent+0x16>
		chan->sent(chan);
   25b30:	4638      	mov	r0, r7
   25b32:	4798      	blx	r3
   25b34:	f3bf 8f5b 	dmb	ish
   25b38:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
   25b3c:	e853 2f00 	ldrex	r2, [r3]
   25b40:	f022 0210 	bic.w	r2, r2, #16
   25b44:	e843 2100 	strex	r1, r2, [r3]
   25b48:	2900      	cmp	r1, #0
   25b4a:	d1f7      	bne.n	25b3c <bt_att_sent+0x1e>
   25b4c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25b50:	b30c      	cbz	r4, 25b96 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25b52:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   25b56:	b98b      	cbnz	r3, 25b7c <bt_att_sent+0x5e>
   25b58:	6863      	ldr	r3, [r4, #4]
   25b5a:	b17b      	cbz	r3, 25b7c <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25b5c:	1d20      	adds	r0, r4, #4
   25b5e:	f7ff fdd8 	bl	25712 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25b62:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25b64:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25b66:	4638      	mov	r0, r7
   25b68:	f7ff febd 	bl	258e6 <chan_req_send>
   25b6c:	2800      	cmp	r0, #0
   25b6e:	da12      	bge.n	25b96 <bt_att_sent+0x78>
	parent->next = child;
   25b70:	6863      	ldr	r3, [r4, #4]
   25b72:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25b74:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25b76:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25b78:	b903      	cbnz	r3, 25b7c <bt_att_sent+0x5e>
	list->tail = node;
   25b7a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25b7c:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   25b80:	4638      	mov	r0, r7
   25b82:	f7ff fec9 	bl	25918 <process_queue>
	if (!err) {
   25b86:	b130      	cbz	r0, 25b96 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   25b88:	f104 010c 	add.w	r1, r4, #12
   25b8c:	4638      	mov	r0, r7
}
   25b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   25b92:	f7ff bec1 	b.w	25918 <process_queue>
}
   25b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025b98 <bt_att_status>:
{
   25b98:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25b9a:	f3bf 8f5b 	dmb	ish
   25b9e:	680b      	ldr	r3, [r1, #0]
   25ba0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25ba4:	07db      	lsls	r3, r3, #31
{
   25ba6:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25ba8:	d519      	bpl.n	25bde <bt_att_status+0x46>
	if (!chan->att) {
   25baa:	f850 0c08 	ldr.w	r0, [r0, #-8]
   25bae:	b1b0      	cbz	r0, 25bde <bt_att_status+0x46>
	if (chan->req) {
   25bb0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   25bb4:	b99b      	cbnz	r3, 25bde <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   25bb6:	3004      	adds	r0, #4
   25bb8:	f7ff fdab 	bl	25712 <sys_slist_get>
	if (!node) {
   25bbc:	4604      	mov	r4, r0
   25bbe:	b170      	cbz	r0, 25bde <bt_att_status+0x46>
	return chan_req_send(chan, req);
   25bc0:	4601      	mov	r1, r0
   25bc2:	f1a5 0008 	sub.w	r0, r5, #8
   25bc6:	f7ff fe8e 	bl	258e6 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25bca:	2800      	cmp	r0, #0
   25bcc:	da07      	bge.n	25bde <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   25bce:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   25bd2:	685a      	ldr	r2, [r3, #4]
   25bd4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25bd6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25bd8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25bda:	b902      	cbnz	r2, 25bde <bt_att_status+0x46>
	list->tail = node;
   25bdc:	609c      	str	r4, [r3, #8]
}
   25bde:	bd38      	pop	{r3, r4, r5, pc}

00025be0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25be4:	4688      	mov	r8, r1
   25be6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25be8:	2101      	movs	r1, #1
   25bea:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25bec:	4605      	mov	r5, r0
   25bee:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25bf0:	f7e6 fd1c 	bl	c62c <bt_att_chan_create_pdu>
	if (!buf) {
   25bf4:	4604      	mov	r4, r0
   25bf6:	b170      	cbz	r0, 25c16 <send_err_rsp.part.0+0x36>
   25bf8:	2104      	movs	r1, #4
   25bfa:	3008      	adds	r0, #8
   25bfc:	f001 f896 	bl	26d2c <net_buf_simple_add>
	rsp->request = req;
   25c00:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   25c04:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   25c06:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25c0a:	4621      	mov	r1, r4
   25c0c:	4628      	mov	r0, r5
}
   25c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25c12:	f7e6 bb75 	b.w	c300 <bt_att_chan_send_rsp.constprop.0>
}
   25c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025c1a <att_write_cmd>:
{
   25c1a:	b530      	push	{r4, r5, lr}
   25c1c:	460c      	mov	r4, r1
   25c1e:	b085      	sub	sp, #20
   25c20:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25c22:	f101 0008 	add.w	r0, r1, #8
   25c26:	f001 f8b0 	bl	26d8a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25c2a:	89a2      	ldrh	r2, [r4, #12]
   25c2c:	9202      	str	r2, [sp, #8]
   25c2e:	68a2      	ldr	r2, [r4, #8]
   25c30:	9201      	str	r2, [sp, #4]
   25c32:	2200      	movs	r2, #0
   25c34:	4603      	mov	r3, r0
   25c36:	9200      	str	r2, [sp, #0]
   25c38:	4611      	mov	r1, r2
   25c3a:	4628      	mov	r0, r5
   25c3c:	f7e6 fdea 	bl	c814 <att_write_rsp>
}
   25c40:	b005      	add	sp, #20
   25c42:	bd30      	pop	{r4, r5, pc}

00025c44 <att_write_req>:
{
   25c44:	b530      	push	{r4, r5, lr}
   25c46:	460c      	mov	r4, r1
   25c48:	b085      	sub	sp, #20
   25c4a:	4605      	mov	r5, r0
   25c4c:	f101 0008 	add.w	r0, r1, #8
   25c50:	f001 f89b 	bl	26d8a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25c54:	89a2      	ldrh	r2, [r4, #12]
   25c56:	9202      	str	r2, [sp, #8]
   25c58:	68a2      	ldr	r2, [r4, #8]
   25c5a:	9201      	str	r2, [sp, #4]
   25c5c:	2200      	movs	r2, #0
   25c5e:	4603      	mov	r3, r0
   25c60:	9200      	str	r2, [sp, #0]
   25c62:	2112      	movs	r1, #18
   25c64:	2213      	movs	r2, #19
   25c66:	4628      	mov	r0, r5
   25c68:	f7e6 fdd4 	bl	c814 <att_write_rsp>
}
   25c6c:	b005      	add	sp, #20
   25c6e:	bd30      	pop	{r4, r5, pc}

00025c70 <att_exec_write_req>:
{
   25c70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   25c74:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   25c76:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   25c78:	f893 8000 	ldrb.w	r8, [r3]
{
   25c7c:	4606      	mov	r6, r0
	uint8_t err = 0U;
   25c7e:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   25c80:	6830      	ldr	r0, [r6, #0]
   25c82:	2200      	movs	r2, #0
   25c84:	2300      	movs	r3, #0
   25c86:	3024      	adds	r0, #36	; 0x24
   25c88:	f000 ffff 	bl	26c8a <net_buf_get>
   25c8c:	4605      	mov	r5, r0
   25c8e:	b970      	cbnz	r0, 25cae <att_exec_write_req+0x3e>
	if (err) {
   25c90:	bb4c      	cbnz	r4, 25ce6 <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   25c92:	2119      	movs	r1, #25
   25c94:	4622      	mov	r2, r4
   25c96:	4638      	mov	r0, r7
   25c98:	f7e6 fe5e 	bl	c958 <bt_att_create_pdu>
	if (!buf) {
   25c9c:	4601      	mov	r1, r0
   25c9e:	b320      	cbz	r0, 25cea <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25ca0:	4630      	mov	r0, r6
   25ca2:	f7e6 fb2d 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
}
   25ca6:	4620      	mov	r0, r4
   25ca8:	b004      	add	sp, #16
   25caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   25cae:	b9b4      	cbnz	r4, 25cde <att_exec_write_req+0x6e>
   25cb0:	f1b8 0f01 	cmp.w	r8, #1
   25cb4:	d113      	bne.n	25cde <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   25cb6:	89aa      	ldrh	r2, [r5, #12]
   25cb8:	8aab      	ldrh	r3, [r5, #20]
   25cba:	9202      	str	r2, [sp, #8]
   25cbc:	68aa      	ldr	r2, [r5, #8]
   25cbe:	9201      	str	r2, [sp, #4]
   25cc0:	8aea      	ldrh	r2, [r5, #22]
   25cc2:	9200      	str	r2, [sp, #0]
   25cc4:	2118      	movs	r1, #24
   25cc6:	4622      	mov	r2, r4
   25cc8:	4630      	mov	r0, r6
   25cca:	f7e6 fda3 	bl	c814 <att_write_rsp>
			if (err) {
   25cce:	4604      	mov	r4, r0
   25cd0:	b128      	cbz	r0, 25cde <att_exec_write_req+0x6e>
	if (!req) {
   25cd2:	4603      	mov	r3, r0
   25cd4:	8aaa      	ldrh	r2, [r5, #20]
   25cd6:	2118      	movs	r1, #24
   25cd8:	4630      	mov	r0, r6
   25cda:	f7ff ff81 	bl	25be0 <send_err_rsp.part.0>
		net_buf_unref(buf);
   25cde:	4628      	mov	r0, r5
   25ce0:	f7f7 fdc8 	bl	1d874 <net_buf_unref>
   25ce4:	e7cc      	b.n	25c80 <att_exec_write_req+0x10>
		return 0;
   25ce6:	4604      	mov	r4, r0
   25ce8:	e7dd      	b.n	25ca6 <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   25cea:	240e      	movs	r4, #14
   25cec:	e7db      	b.n	25ca6 <att_exec_write_req+0x36>

00025cee <att_read_blob_req>:
{
   25cee:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25cf0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25cf2:	8813      	ldrh	r3, [r2, #0]
   25cf4:	8852      	ldrh	r2, [r2, #2]
   25cf6:	9200      	str	r2, [sp, #0]
   25cf8:	210c      	movs	r1, #12
   25cfa:	220d      	movs	r2, #13
   25cfc:	f7e6 ff96 	bl	cc2c <att_read_rsp>
}
   25d00:	b003      	add	sp, #12
   25d02:	f85d fb04 	ldr.w	pc, [sp], #4

00025d06 <att_read_req>:
{
   25d06:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25d08:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25d0a:	2200      	movs	r2, #0
   25d0c:	881b      	ldrh	r3, [r3, #0]
   25d0e:	9200      	str	r2, [sp, #0]
   25d10:	210a      	movs	r1, #10
   25d12:	220b      	movs	r2, #11
   25d14:	f7e6 ff8a 	bl	cc2c <att_read_rsp>
}
   25d18:	b003      	add	sp, #12
   25d1a:	f85d fb04 	ldr.w	pc, [sp], #4

00025d1e <att_mtu_req>:
{
   25d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   25d20:	6803      	ldr	r3, [r0, #0]
{
   25d22:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   25d24:	6818      	ldr	r0, [r3, #0]
   25d26:	f3bf 8f5b 	dmb	ish
   25d2a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   25d2e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25d32:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   25d36:	071b      	lsls	r3, r3, #28
   25d38:	d41d      	bmi.n	25d76 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   25d3a:	688b      	ldr	r3, [r1, #8]
   25d3c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   25d3e:	2e16      	cmp	r6, #22
   25d40:	d91b      	bls.n	25d7a <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   25d42:	2202      	movs	r2, #2
   25d44:	2103      	movs	r1, #3
   25d46:	f7e6 fe07 	bl	c958 <bt_att_create_pdu>
	if (!pdu) {
   25d4a:	4607      	mov	r7, r0
   25d4c:	b1b8      	cbz	r0, 25d7e <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   25d4e:	2102      	movs	r1, #2
   25d50:	3008      	adds	r0, #8
   25d52:	f000 ffeb 	bl	26d2c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   25d56:	2341      	movs	r3, #65	; 0x41
   25d58:	7003      	strb	r3, [r0, #0]
   25d5a:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   25d5c:	4639      	mov	r1, r7
   25d5e:	4628      	mov	r0, r5
   25d60:	f7e6 face 	bl	c300 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25d64:	2e41      	cmp	r6, #65	; 0x41
   25d66:	bf28      	it	cs
   25d68:	2641      	movcs	r6, #65	; 0x41
   25d6a:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25d6e:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   25d72:	4620      	mov	r0, r4
}
   25d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   25d76:	2006      	movs	r0, #6
   25d78:	e7fc      	b.n	25d74 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   25d7a:	2004      	movs	r0, #4
   25d7c:	e7fa      	b.n	25d74 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   25d7e:	200e      	movs	r0, #14
   25d80:	e7f8      	b.n	25d74 <att_mtu_req+0x56>

00025d82 <bt_att_init>:
	bt_gatt_init();
   25d82:	f7e7 bf0d 	b.w	dba0 <bt_gatt_init>

00025d86 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25d86:	898a      	ldrh	r2, [r1, #12]
   25d88:	6889      	ldr	r1, [r1, #8]
   25d8a:	2300      	movs	r3, #0
   25d8c:	f7e7 b8c0 	b.w	cf10 <att_handle_rsp>

00025d90 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   25d90:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   25d94:	b570      	push	{r4, r5, r6, lr}
   25d96:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   25d98:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   25d9c:	2b00      	cmp	r3, #0
   25d9e:	d037      	beq.n	25e10 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   25da0:	b171      	cbz	r1, 25dc0 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   25da2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   25da6:	2b00      	cmp	r3, #0
   25da8:	d032      	beq.n	25e10 <bt_att_encrypt_change+0x80>
   25daa:	7c1b      	ldrb	r3, [r3, #16]
   25dac:	07da      	lsls	r2, r3, #31
   25dae:	d52f      	bpl.n	25e10 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   25db0:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   25db2:	2200      	movs	r2, #0
   25db4:	4630      	mov	r0, r6
   25db6:	4611      	mov	r1, r2
}
   25db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   25dbc:	f7e7 b8a8 	b.w	cf10 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   25dc0:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   25dc2:	4628      	mov	r0, r5
   25dc4:	f7e8 faf8 	bl	e3b8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   25dc8:	7a6b      	ldrb	r3, [r5, #9]
   25dca:	2b01      	cmp	r3, #1
   25dcc:	d020      	beq.n	25e10 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   25dce:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
   25dd2:	b1ec      	cbz	r4, 25e10 <bt_att_encrypt_change+0x80>
   25dd4:	7c23      	ldrb	r3, [r4, #16]
   25dd6:	07db      	lsls	r3, r3, #31
   25dd8:	d51a      	bpl.n	25e10 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   25dda:	68e3      	ldr	r3, [r4, #12]
   25ddc:	2b00      	cmp	r3, #0
   25dde:	d0e7      	beq.n	25db0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   25de0:	6962      	ldr	r2, [r4, #20]
   25de2:	7c61      	ldrb	r1, [r4, #17]
   25de4:	4630      	mov	r0, r6
   25de6:	f7e6 fc21 	bl	c62c <bt_att_chan_create_pdu>
	if (!buf) {
   25dea:	4605      	mov	r5, r0
   25dec:	b140      	cbz	r0, 25e00 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   25dee:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   25df2:	68e3      	ldr	r3, [r4, #12]
   25df4:	4798      	blx	r3
   25df6:	4602      	mov	r2, r0
   25df8:	b120      	cbz	r0, 25e04 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   25dfa:	4628      	mov	r0, r5
   25dfc:	f7f7 fd3a 	bl	1d874 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   25e00:	230e      	movs	r3, #14
   25e02:	e7d6      	b.n	25db2 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   25e04:	4629      	mov	r1, r5
   25e06:	4630      	mov	r0, r6
   25e08:	f7e6 fa0c 	bl	c224 <chan_send>
   25e0c:	2800      	cmp	r0, #0
   25e0e:	d1f4      	bne.n	25dfa <bt_att_encrypt_change+0x6a>
}
   25e10:	bd70      	pop	{r4, r5, r6, pc}

00025e12 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   25e12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25e16:	4605      	mov	r5, r0
   25e18:	460e      	mov	r6, r1
   25e1a:	4614      	mov	r4, r2
   25e1c:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   25e1e:	f7e6 f8f5 	bl	c00c <att_get>
	if (!att) {
   25e22:	4607      	mov	r7, r0
   25e24:	b938      	cbnz	r0, 25e36 <bt_att_send+0x24>
		net_buf_unref(buf);
   25e26:	4630      	mov	r0, r6
   25e28:	f7f7 fd24 	bl	1d874 <net_buf_unref>
		return -ENOTCONN;
   25e2c:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   25e30:	b002      	add	sp, #8
   25e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   25e36:	b144      	cbz	r4, 25e4a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   25e38:	f8cd 8000 	str.w	r8, [sp]
   25e3c:	4623      	mov	r3, r4
   25e3e:	4632      	mov	r2, r6
   25e40:	2104      	movs	r1, #4
   25e42:	4628      	mov	r0, r5
   25e44:	f7ff fc2b 	bl	2569e <bt_l2cap_send_cb>
   25e48:	e7f2      	b.n	25e30 <bt_att_send+0x1e>
	return list->head;
   25e4a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25e4c:	b184      	cbz	r4, 25e70 <bt_att_send+0x5e>
   25e4e:	f5b4 758a 	subs.w	r5, r4, #276	; 0x114
   25e52:	d00f      	beq.n	25e74 <bt_att_send+0x62>
	return node->next;
   25e54:	6824      	ldr	r4, [r4, #0]
   25e56:	b10c      	cbz	r4, 25e5c <bt_att_send+0x4a>
   25e58:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
   25e5c:	2000      	movs	r0, #0
   25e5e:	b95d      	cbnz	r5, 25e78 <bt_att_send+0x66>
	if (ret < 0) {
   25e60:	b188      	cbz	r0, 25e86 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   25e62:	f107 000c 	add.w	r0, r7, #12
   25e66:	4631      	mov	r1, r6
   25e68:	f000 ff2d 	bl	26cc6 <net_buf_put>
	return 0;
   25e6c:	4628      	mov	r0, r5
   25e6e:	e7df      	b.n	25e30 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25e70:	4625      	mov	r5, r4
   25e72:	e7f3      	b.n	25e5c <bt_att_send+0x4a>
   25e74:	462c      	mov	r4, r5
   25e76:	e7f1      	b.n	25e5c <bt_att_send+0x4a>
	return chan_send(chan, buf, cb);
   25e78:	2200      	movs	r2, #0
   25e7a:	4631      	mov	r1, r6
   25e7c:	4628      	mov	r0, r5
   25e7e:	f7e6 f9d1 	bl	c224 <chan_send>
		if (ret >= 0) {
   25e82:	2800      	cmp	r0, #0
   25e84:	db01      	blt.n	25e8a <bt_att_send+0x78>
	return 0;
   25e86:	2000      	movs	r0, #0
   25e88:	e7d2      	b.n	25e30 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25e8a:	b154      	cbz	r4, 25ea2 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25e8c:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   25e90:	d004      	beq.n	25e9c <bt_att_send+0x8a>
	return node->next;
   25e92:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   25e96:	b10b      	cbz	r3, 25e9c <bt_att_send+0x8a>
   25e98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   25e9c:	4625      	mov	r5, r4
   25e9e:	461c      	mov	r4, r3
   25ea0:	e7dd      	b.n	25e5e <bt_att_send+0x4c>
   25ea2:	4623      	mov	r3, r4
   25ea4:	e7fa      	b.n	25e9c <bt_att_send+0x8a>

00025ea6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   25ea6:	b570      	push	{r4, r5, r6, lr}
   25ea8:	460e      	mov	r6, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   25eaa:	f7e6 f8af 	bl	c00c <att_get>
	if (!att) {
   25eae:	4605      	mov	r5, r0
   25eb0:	b340      	cbz	r0, 25f04 <bt_att_req_send+0x5e>
	return list->head;
   25eb2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return -ENOTCONN;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25eb4:	b153      	cbz	r3, 25ecc <bt_att_req_send+0x26>
   25eb6:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
   25eba:	d007      	beq.n	25ecc <bt_att_req_send+0x26>
	return node->next;
   25ebc:	681c      	ldr	r4, [r3, #0]
   25ebe:	b10c      	cbz	r4, 25ec4 <bt_att_req_send+0x1e>
   25ec0:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		/* If there is nothing pending use the channel */
		if (!chan->req) {
   25ec4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   25ec8:	b143      	cbz	r3, 25edc <bt_att_req_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25eca:	b96c      	cbnz	r4, 25ee8 <bt_att_req_send+0x42>
	return list->tail;
   25ecc:	68ab      	ldr	r3, [r5, #8]
	parent->next = child;
   25ece:	2000      	movs	r0, #0
   25ed0:	6030      	str	r0, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   25ed2:	b9a3      	cbnz	r3, 25efe <bt_att_req_send+0x58>
	list->head = node;
   25ed4:	e9c5 6601 	strd	r6, r6, [r5, #4]
	/* Queue the request to be send later */
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
   25ed8:	4618      	mov	r0, r3
}
   25eda:	e004      	b.n	25ee6 <bt_att_req_send+0x40>
	return chan_req_send(chan, req);
   25edc:	4631      	mov	r1, r6
   25ede:	f7ff fd02 	bl	258e6 <chan_req_send>
			if (ret >= 0) {
   25ee2:	2800      	cmp	r0, #0
   25ee4:	dbf1      	blt.n	25eca <bt_att_req_send+0x24>
}
   25ee6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   25ee8:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   25eec:	d004      	beq.n	25ef8 <bt_att_req_send+0x52>
	return node->next;
   25eee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25ef2:	b10b      	cbz	r3, 25ef8 <bt_att_req_send+0x52>
   25ef4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
{
   25ef8:	4620      	mov	r0, r4
   25efa:	461c      	mov	r4, r3
   25efc:	e7e2      	b.n	25ec4 <bt_att_req_send+0x1e>
	parent->next = child;
   25efe:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25f00:	60ae      	str	r6, [r5, #8]
}
   25f02:	e7f0      	b.n	25ee6 <bt_att_req_send+0x40>
		return -ENOTCONN;
   25f04:	f06f 0038 	mvn.w	r0, #56	; 0x38
   25f08:	e7ed      	b.n	25ee6 <bt_att_req_send+0x40>

00025f0a <gatt_ccc_changed>:
{
   25f0a:	460b      	mov	r3, r1
   25f0c:	8909      	ldrh	r1, [r1, #8]
   25f0e:	8a5a      	ldrh	r2, [r3, #18]
   25f10:	4291      	cmp	r1, r2
   25f12:	bf38      	it	cc
   25f14:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   25f16:	8a9a      	ldrh	r2, [r3, #20]
   25f18:	428a      	cmp	r2, r1
   25f1a:	d003      	beq.n	25f24 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   25f1c:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   25f1e:	699b      	ldr	r3, [r3, #24]
   25f20:	b103      	cbz	r3, 25f24 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   25f22:	4718      	bx	r3
}
   25f24:	4770      	bx	lr

00025f26 <gatt_indicate_rsp>:
{
   25f26:	b510      	push	{r4, lr}
   25f28:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25f2a:	68a3      	ldr	r3, [r4, #8]
{
   25f2c:	460a      	mov	r2, r1
	if (params->func) {
   25f2e:	b10b      	cbz	r3, 25f34 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25f30:	4621      	mov	r1, r4
   25f32:	4798      	blx	r3
	params->_ref--;
   25f34:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25f36:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25f38:	3b01      	subs	r3, #1
   25f3a:	b2db      	uxtb	r3, r3
   25f3c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25f3e:	b122      	cbz	r2, 25f4a <gatt_indicate_rsp+0x24>
   25f40:	b91b      	cbnz	r3, 25f4a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25f42:	4620      	mov	r0, r4
}
   25f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25f48:	4710      	bx	r2
}
   25f4a:	bd10      	pop	{r4, pc}

00025f4c <match_uuid>:
	data->attr = attr;
   25f4c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25f4e:	8091      	strh	r1, [r2, #4]
}
   25f50:	2000      	movs	r0, #0
   25f52:	4770      	bx	lr

00025f54 <ccc_set_cb>:
}
   25f54:	2000      	movs	r0, #0
   25f56:	4770      	bx	lr

00025f58 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25f58:	2207      	movs	r2, #7
   25f5a:	f7fe be79 	b.w	24c50 <memcpy>

00025f5e <clear_ccc_cfg>:
{
   25f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25f60:	2500      	movs	r5, #0
{
   25f62:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25f64:	4669      	mov	r1, sp
   25f66:	3001      	adds	r0, #1
   25f68:	9500      	str	r5, [sp, #0]
   25f6a:	f8cd 5003 	str.w	r5, [sp, #3]
   25f6e:	f7ff fff3 	bl	25f58 <bt_addr_le_copy>
	cfg->id = 0U;
   25f72:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   25f74:	8125      	strh	r5, [r4, #8]
}
   25f76:	b003      	add	sp, #12
   25f78:	bd30      	pop	{r4, r5, pc}

00025f7a <write_name>:
{
   25f7a:	b570      	push	{r4, r5, r6, lr}
   25f7c:	b092      	sub	sp, #72	; 0x48
   25f7e:	4615      	mov	r5, r2
   25f80:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25f84:	2100      	movs	r1, #0
   25f86:	223d      	movs	r2, #61	; 0x3d
   25f88:	a802      	add	r0, sp, #8
{
   25f8a:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25f8c:	9101      	str	r1, [sp, #4]
   25f8e:	f7fe fe8a 	bl	24ca6 <memset>
	if (offset) {
   25f92:	b966      	cbnz	r6, 25fae <write_name+0x34>
	if (len >= sizeof(value)) {
   25f94:	2c40      	cmp	r4, #64	; 0x40
   25f96:	d80d      	bhi.n	25fb4 <write_name+0x3a>
	memcpy(value, buf, len);
   25f98:	4622      	mov	r2, r4
   25f9a:	4629      	mov	r1, r5
   25f9c:	a801      	add	r0, sp, #4
   25f9e:	f7fe fe57 	bl	24c50 <memcpy>
	bt_set_name(value);
   25fa2:	a801      	add	r0, sp, #4
   25fa4:	f7e4 fb70 	bl	a688 <bt_set_name>
	return len;
   25fa8:	4620      	mov	r0, r4
}
   25faa:	b012      	add	sp, #72	; 0x48
   25fac:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25fae:	f06f 0006 	mvn.w	r0, #6
   25fb2:	e7fa      	b.n	25faa <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   25fb4:	f06f 000c 	mvn.w	r0, #12
   25fb8:	e7f7      	b.n	25faa <write_name+0x30>

00025fba <gen_hash_m>:
{
   25fba:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25fbc:	6807      	ldr	r7, [r0, #0]
   25fbe:	783d      	ldrb	r5, [r7, #0]
{
   25fc0:	b089      	sub	sp, #36	; 0x24
   25fc2:	4606      	mov	r6, r0
   25fc4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25fc6:	b10d      	cbz	r5, 25fcc <gen_hash_m+0x12>
	switch (u16->val) {
   25fc8:	2501      	movs	r5, #1
   25fca:	e014      	b.n	25ff6 <gen_hash_m+0x3c>
   25fcc:	887b      	ldrh	r3, [r7, #2]
   25fce:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25fd2:	d004      	beq.n	25fde <gen_hash_m+0x24>
   25fd4:	d812      	bhi.n	25ffc <gen_hash_m+0x42>
   25fd6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25fda:	2b03      	cmp	r3, #3
   25fdc:	d8f4      	bhi.n	25fc8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25fde:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25fe2:	2202      	movs	r2, #2
   25fe4:	f10d 010e 	add.w	r1, sp, #14
   25fe8:	4620      	mov	r0, r4
   25fea:	f7fe fcb4 	bl	24956 <tc_cmac_update>
   25fee:	b9e0      	cbnz	r0, 2602a <gen_hash_m+0x70>
			state->err = -EINVAL;
   25ff0:	f06f 0315 	mvn.w	r3, #21
   25ff4:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25ff6:	4628      	mov	r0, r5
   25ff8:	b009      	add	sp, #36	; 0x24
   25ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   25ffc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   26000:	33ff      	adds	r3, #255	; 0xff
   26002:	b29b      	uxth	r3, r3
   26004:	2b04      	cmp	r3, #4
   26006:	d8df      	bhi.n	25fc8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   26008:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2600c:	2202      	movs	r2, #2
   2600e:	f10d 010e 	add.w	r1, sp, #14
   26012:	4620      	mov	r0, r4
   26014:	f7fe fc9f 	bl	24956 <tc_cmac_update>
   26018:	2800      	cmp	r0, #0
   2601a:	d0e9      	beq.n	25ff0 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2601c:	887b      	ldrh	r3, [r7, #2]
   2601e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26022:	2202      	movs	r2, #2
   26024:	f10d 010e 	add.w	r1, sp, #14
   26028:	e017      	b.n	2605a <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2602a:	887b      	ldrh	r3, [r7, #2]
   2602c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26030:	2202      	movs	r2, #2
   26032:	f10d 010e 	add.w	r1, sp, #14
   26036:	4620      	mov	r0, r4
   26038:	f7fe fc8d 	bl	24956 <tc_cmac_update>
   2603c:	2800      	cmp	r0, #0
   2603e:	d0d7      	beq.n	25ff0 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   26040:	2000      	movs	r0, #0
   26042:	2310      	movs	r3, #16
   26044:	eb0d 0203 	add.w	r2, sp, r3
   26048:	6877      	ldr	r7, [r6, #4]
   2604a:	9000      	str	r0, [sp, #0]
   2604c:	4631      	mov	r1, r6
   2604e:	47b8      	blx	r7
		if (len < 0) {
   26050:	1e02      	subs	r2, r0, #0
   26052:	da01      	bge.n	26058 <gen_hash_m+0x9e>
			state->err = len;
   26054:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26056:	e7ce      	b.n	25ff6 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   26058:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2605a:	4620      	mov	r0, r4
   2605c:	f7fe fc7b 	bl	24956 <tc_cmac_update>
   26060:	2800      	cmp	r0, #0
   26062:	d1b1      	bne.n	25fc8 <gen_hash_m+0xe>
   26064:	e7c4      	b.n	25ff0 <gen_hash_m+0x36>

00026066 <atomic_or>:
{
   26066:	4603      	mov	r3, r0
}
   26068:	f3bf 8f5b 	dmb	ish
   2606c:	e853 0f00 	ldrex	r0, [r3]
   26070:	ea40 0201 	orr.w	r2, r0, r1
   26074:	e843 2c00 	strex	ip, r2, [r3]
   26078:	f1bc 0f00 	cmp.w	ip, #0
   2607c:	d1f6      	bne.n	2606c <atomic_or+0x6>
   2607e:	f3bf 8f5b 	dmb	ish
   26082:	4770      	bx	lr

00026084 <clear_cf_cfg>:
{
   26084:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26086:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   26088:	2500      	movs	r5, #0
   2608a:	4669      	mov	r1, sp
   2608c:	3001      	adds	r0, #1
   2608e:	9500      	str	r5, [sp, #0]
   26090:	f8cd 5003 	str.w	r5, [sp, #3]
   26094:	f7ff ff60 	bl	25f58 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   26098:	f104 0008 	add.w	r0, r4, #8
   2609c:	2201      	movs	r2, #1
   2609e:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   260a0:	340c      	adds	r4, #12
   260a2:	f7fe fe00 	bl	24ca6 <memset>
   260a6:	f3bf 8f5b 	dmb	ish
   260aa:	e854 3f00 	ldrex	r3, [r4]
   260ae:	e844 5200 	strex	r2, r5, [r4]
   260b2:	2a00      	cmp	r2, #0
   260b4:	d1f9      	bne.n	260aa <clear_cf_cfg+0x26>
   260b6:	f3bf 8f5b 	dmb	ish
}
   260ba:	b003      	add	sp, #12
   260bc:	bd30      	pop	{r4, r5, pc}

000260be <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   260be:	f3bf 8f5b 	dmb	ish
   260c2:	e850 3f00 	ldrex	r3, [r0]
   260c6:	400b      	ands	r3, r1
   260c8:	e840 3200 	strex	r2, r3, [r0]
   260cc:	2a00      	cmp	r2, #0
   260ce:	d1f8      	bne.n	260c2 <atomic_and.isra.0+0x4>
   260d0:	f3bf 8f5b 	dmb	ish
}
   260d4:	4770      	bx	lr

000260d6 <read_ppcp>:
{
   260d6:	b513      	push	{r0, r1, r4, lr}
   260d8:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   260da:	2218      	movs	r2, #24
{
   260dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   260e0:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   260e4:	2228      	movs	r2, #40	; 0x28
   260e6:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   260ea:	2200      	movs	r2, #0
   260ec:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   260f0:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   260f2:	f04f 022a 	mov.w	r2, #42	; 0x2a
   260f6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   260fa:	d80b      	bhi.n	26114 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   260fc:	f1c1 0408 	rsb	r4, r1, #8
   26100:	429c      	cmp	r4, r3
   26102:	bfa8      	it	ge
   26104:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   26106:	4622      	mov	r2, r4
   26108:	4469      	add	r1, sp
   2610a:	f7fe fda1 	bl	24c50 <memcpy>
}
   2610e:	4620      	mov	r0, r4
   26110:	b002      	add	sp, #8
   26112:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26114:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   26118:	e7f9      	b.n	2610e <read_ppcp+0x38>

0002611a <read_appearance>:
{
   2611a:	b513      	push	{r0, r1, r4, lr}
   2611c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   26120:	4610      	mov	r0, r2
	if (offset > value_len) {
   26122:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   26124:	f240 4285 	movw	r2, #1157	; 0x485
   26128:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2612c:	d80d      	bhi.n	2614a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2612e:	f1c1 0402 	rsb	r4, r1, #2
   26132:	429c      	cmp	r4, r3
   26134:	bfa8      	it	ge
   26136:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   26138:	f10d 0306 	add.w	r3, sp, #6
   2613c:	4622      	mov	r2, r4
   2613e:	4419      	add	r1, r3
   26140:	f7fe fd86 	bl	24c50 <memcpy>
}
   26144:	4620      	mov	r0, r4
   26146:	b002      	add	sp, #8
   26148:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2614a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2614e:	e7f9      	b.n	26144 <read_appearance+0x2a>

00026150 <read_name>:
{
   26150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26154:	4698      	mov	r8, r3
   26156:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2615a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2615c:	f7e4 fae6 	bl	a72c <bt_get_name>
   26160:	4607      	mov	r7, r0
				 strlen(name));
   26162:	f7fe fd37 	bl	24bd4 <strlen>
	if (offset > value_len) {
   26166:	b283      	uxth	r3, r0
   26168:	42b3      	cmp	r3, r6
   2616a:	d30c      	bcc.n	26186 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2616c:	1b9c      	subs	r4, r3, r6
   2616e:	4544      	cmp	r4, r8
   26170:	bfa8      	it	ge
   26172:	4644      	movge	r4, r8
   26174:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   26176:	4622      	mov	r2, r4
   26178:	19b9      	adds	r1, r7, r6
   2617a:	4628      	mov	r0, r5
   2617c:	f7fe fd68 	bl	24c50 <memcpy>
}
   26180:	4620      	mov	r0, r4
   26182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26186:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2618a:	e7f9      	b.n	26180 <read_name+0x30>

0002618c <cf_read>:
{
   2618c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2618e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   26190:	2300      	movs	r3, #0
{
   26192:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   26196:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2619a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2619c:	f7e6 ffe4 	bl	d168 <find_cf_cfg>
	if (cfg) {
   261a0:	b128      	cbz	r0, 261ae <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   261a2:	f100 0108 	add.w	r1, r0, #8
   261a6:	2201      	movs	r2, #1
   261a8:	a801      	add	r0, sp, #4
   261aa:	f7fe fd51 	bl	24c50 <memcpy>
	if (offset > value_len) {
   261ae:	2e01      	cmp	r6, #1
   261b0:	d80d      	bhi.n	261ce <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   261b2:	f1c6 0401 	rsb	r4, r6, #1
   261b6:	42bc      	cmp	r4, r7
   261b8:	bfa8      	it	ge
   261ba:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   261bc:	ab01      	add	r3, sp, #4
   261be:	4622      	mov	r2, r4
   261c0:	1999      	adds	r1, r3, r6
   261c2:	4628      	mov	r0, r5
   261c4:	f7fe fd44 	bl	24c50 <memcpy>
}
   261c8:	4620      	mov	r0, r4
   261ca:	b003      	add	sp, #12
   261cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   261ce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   261d2:	e7f9      	b.n	261c8 <cf_read+0x3c>

000261d4 <bt_gatt_attr_read_service>:
{
   261d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   261d6:	68c9      	ldr	r1, [r1, #12]
{
   261d8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   261dc:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   261de:	780b      	ldrb	r3, [r1, #0]
{
   261e0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   261e2:	b993      	cbnz	r3, 2620a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   261e4:	884b      	ldrh	r3, [r1, #2]
   261e6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   261ea:	2d02      	cmp	r5, #2
   261ec:	d819      	bhi.n	26222 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   261ee:	f1c5 0202 	rsb	r2, r5, #2
   261f2:	4294      	cmp	r4, r2
   261f4:	bfa8      	it	ge
   261f6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   261f8:	f10d 0306 	add.w	r3, sp, #6
   261fc:	4622      	mov	r2, r4
   261fe:	1959      	adds	r1, r3, r5
   26200:	f7fe fd26 	bl	24c50 <memcpy>
}
   26204:	4620      	mov	r0, r4
   26206:	b003      	add	sp, #12
   26208:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2620a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2620c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   26210:	d807      	bhi.n	26222 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26212:	f1c5 0210 	rsb	r2, r5, #16
   26216:	4294      	cmp	r4, r2
   26218:	bfa8      	it	ge
   2621a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2621c:	4622      	mov	r2, r4
   2621e:	4429      	add	r1, r5
   26220:	e7ee      	b.n	26200 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26222:	f06f 0406 	mvn.w	r4, #6
   26226:	e7ed      	b.n	26204 <bt_gatt_attr_read_service+0x30>

00026228 <ccc_find_cfg>:
{
   26228:	b570      	push	{r4, r5, r6, lr}
		if (id == ccc->cfg[i].id &&
   2622a:	7803      	ldrb	r3, [r0, #0]
   2622c:	4293      	cmp	r3, r2
{
   2622e:	4604      	mov	r4, r0
   26230:	460e      	mov	r6, r1
   26232:	4615      	mov	r5, r2
		if (id == ccc->cfg[i].id &&
   26234:	d00b      	beq.n	2624e <ccc_find_cfg+0x26>
   26236:	7aa3      	ldrb	r3, [r4, #10]
   26238:	42ab      	cmp	r3, r5
   2623a:	d112      	bne.n	26262 <ccc_find_cfg+0x3a>
	return memcmp(a, b, sizeof(*a));
   2623c:	2207      	movs	r2, #7
   2623e:	4631      	mov	r1, r6
   26240:	f104 000b 	add.w	r0, r4, #11
   26244:	f7fe fcf3 	bl	24c2e <memcmp>
   26248:	b958      	cbnz	r0, 26262 <ccc_find_cfg+0x3a>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2624a:	2001      	movs	r0, #1
   2624c:	e005      	b.n	2625a <ccc_find_cfg+0x32>
   2624e:	2207      	movs	r2, #7
   26250:	3001      	adds	r0, #1
   26252:	f7fe fcec 	bl	24c2e <memcmp>
		if (id == ccc->cfg[i].id &&
   26256:	2800      	cmp	r0, #0
   26258:	d1ed      	bne.n	26236 <ccc_find_cfg+0xe>
			return &ccc->cfg[i];
   2625a:	230a      	movs	r3, #10
   2625c:	fb03 4000 	mla	r0, r3, r0, r4
   26260:	e000      	b.n	26264 <ccc_find_cfg+0x3c>
	return NULL;
   26262:	2000      	movs	r0, #0
}
   26264:	bd70      	pop	{r4, r5, r6, pc}

00026266 <find_ccc_cfg>:
{
   26266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26268:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2626a:	1c4c      	adds	r4, r1, #1
   2626c:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   26270:	1e67      	subs	r7, r4, #1
		if (conn) {
   26272:	b14e      	cbz	r6, 26288 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   26274:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   26278:	4622      	mov	r2, r4
   2627a:	4630      	mov	r0, r6
   2627c:	f7ff f8e5 	bl	2544a <bt_conn_is_peer_addr_le>
   26280:	b160      	cbz	r0, 2629c <find_ccc_cfg+0x36>
}
   26282:	4638      	mov	r0, r7
   26284:	b003      	add	sp, #12
   26286:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26288:	2207      	movs	r2, #7
   2628a:	4669      	mov	r1, sp
   2628c:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2628e:	9600      	str	r6, [sp, #0]
   26290:	f8cd 6003 	str.w	r6, [sp, #3]
   26294:	f7fe fccb 	bl	24c2e <memcmp>
   26298:	2800      	cmp	r0, #0
   2629a:	d0f2      	beq.n	26282 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2629c:	340a      	adds	r4, #10
   2629e:	42ac      	cmp	r4, r5
   262a0:	d1e6      	bne.n	26270 <find_ccc_cfg+0xa>
	return NULL;
   262a2:	2700      	movs	r7, #0
   262a4:	e7ed      	b.n	26282 <find_ccc_cfg+0x1c>

000262a6 <bt_gatt_attr_read_ccc>:
{
   262a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   262a8:	68c9      	ldr	r1, [r1, #12]
{
   262aa:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   262ae:	4615      	mov	r5, r2
   262b0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   262b2:	f7ff ffd8 	bl	26266 <find_ccc_cfg>
	if (cfg) {
   262b6:	b100      	cbz	r0, 262ba <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   262b8:	8900      	ldrh	r0, [r0, #8]
   262ba:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   262be:	2e02      	cmp	r6, #2
   262c0:	d80e      	bhi.n	262e0 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   262c2:	f1c6 0402 	rsb	r4, r6, #2
   262c6:	42bc      	cmp	r4, r7
   262c8:	bfa8      	it	ge
   262ca:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   262cc:	f10d 0306 	add.w	r3, sp, #6
   262d0:	4622      	mov	r2, r4
   262d2:	1999      	adds	r1, r3, r6
   262d4:	4628      	mov	r0, r5
   262d6:	f7fe fcbb 	bl	24c50 <memcpy>
}
   262da:	4620      	mov	r0, r4
   262dc:	b003      	add	sp, #12
   262de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   262e0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   262e4:	e7f9      	b.n	262da <bt_gatt_attr_read_ccc+0x34>

000262e6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   262e6:	2a02      	cmp	r2, #2
{
   262e8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   262ea:	d108      	bne.n	262fe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   262ec:	2300      	movs	r3, #0
   262ee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   262f2:	461a      	mov	r2, r3
   262f4:	7a00      	ldrb	r0, [r0, #8]
   262f6:	f7e7 fa0f 	bl	d718 <sc_save>
}
   262fa:	2002      	movs	r0, #2
   262fc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   262fe:	f7e7 fb05 	bl	d90c <sc_clear>
   26302:	e7fa      	b.n	262fa <sc_ccc_cfg_write+0x14>

00026304 <sc_restore_rsp>:
{
   26304:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   26306:	f7e6 ff2f 	bl	d168 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2630a:	b140      	cbz	r0, 2631e <sc_restore_rsp+0x1a>
   2630c:	7a03      	ldrb	r3, [r0, #8]
   2630e:	07db      	lsls	r3, r3, #31
   26310:	d505      	bpl.n	2631e <sc_restore_rsp+0x1a>
}
   26312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26316:	2101      	movs	r1, #1
   26318:	300c      	adds	r0, #12
   2631a:	f7ff bea4 	b.w	26066 <atomic_or>
   2631e:	bd08      	pop	{r3, pc}

00026320 <bt_gatt_attr_read>:
{
   26320:	b538      	push	{r3, r4, r5, lr}
   26322:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   26326:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2632a:	42a9      	cmp	r1, r5
{
   2632c:	4610      	mov	r0, r2
	if (offset > value_len) {
   2632e:	d80b      	bhi.n	26348 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   26330:	1a6d      	subs	r5, r5, r1
   26332:	429d      	cmp	r5, r3
   26334:	bfa8      	it	ge
   26336:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   26338:	9b05      	ldr	r3, [sp, #20]
   2633a:	b2ad      	uxth	r5, r5
   2633c:	462a      	mov	r2, r5
   2633e:	4419      	add	r1, r3
   26340:	f7fe fc86 	bl	24c50 <memcpy>
}
   26344:	4628      	mov	r0, r5
   26346:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26348:	f06f 0506 	mvn.w	r5, #6
   2634c:	e7fa      	b.n	26344 <bt_gatt_attr_read+0x24>

0002634e <bt_gatt_attr_value_handle>:
{
   2634e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26350:	4604      	mov	r4, r0
   26352:	b910      	cbnz	r0, 2635a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   26354:	2000      	movs	r0, #0
}
   26356:	b002      	add	sp, #8
   26358:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2635a:	2300      	movs	r3, #0
   2635c:	f88d 3004 	strb.w	r3, [sp, #4]
   26360:	6800      	ldr	r0, [r0, #0]
   26362:	f642 0303 	movw	r3, #10243	; 0x2803
   26366:	a901      	add	r1, sp, #4
   26368:	f8ad 3006 	strh.w	r3, [sp, #6]
   2636c:	f7fe fd90 	bl	24e90 <bt_uuid_cmp>
   26370:	2800      	cmp	r0, #0
   26372:	d1ef      	bne.n	26354 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   26374:	68e3      	ldr	r3, [r4, #12]
   26376:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   26378:	2800      	cmp	r0, #0
   2637a:	d1ec      	bne.n	26356 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2637c:	4620      	mov	r0, r4
   2637e:	f7e7 fc71 	bl	dc64 <bt_gatt_attr_get_handle>
   26382:	3001      	adds	r0, #1
   26384:	b280      	uxth	r0, r0
	return handle;
   26386:	e7e6      	b.n	26356 <bt_gatt_attr_value_handle+0x8>

00026388 <bt_gatt_attr_read_chrc>:
{
   26388:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2638a:	68cf      	ldr	r7, [r1, #12]
{
   2638c:	b087      	sub	sp, #28
   2638e:	4608      	mov	r0, r1
   26390:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   26392:	79bb      	ldrb	r3, [r7, #6]
   26394:	f88d 3004 	strb.w	r3, [sp, #4]
{
   26398:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2639c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2639e:	f7ff ffd6 	bl	2634e <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   263a2:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   263a4:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   263a8:	780b      	ldrb	r3, [r1, #0]
   263aa:	b99b      	cbnz	r3, 263d4 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   263ac:	884b      	ldrh	r3, [r1, #2]
   263ae:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   263b2:	2105      	movs	r1, #5
	if (offset > value_len) {
   263b4:	42b1      	cmp	r1, r6
   263b6:	d315      	bcc.n	263e4 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   263b8:	1b89      	subs	r1, r1, r6
   263ba:	42a1      	cmp	r1, r4
   263bc:	bfa8      	it	ge
   263be:	4621      	movge	r1, r4
   263c0:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   263c2:	ab01      	add	r3, sp, #4
   263c4:	4622      	mov	r2, r4
   263c6:	1999      	adds	r1, r3, r6
   263c8:	4628      	mov	r0, r5
   263ca:	f7fe fc41 	bl	24c50 <memcpy>
}
   263ce:	4620      	mov	r0, r4
   263d0:	b007      	add	sp, #28
   263d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   263d4:	3101      	adds	r1, #1
   263d6:	2210      	movs	r2, #16
   263d8:	f10d 0007 	add.w	r0, sp, #7
   263dc:	f7fe fc38 	bl	24c50 <memcpy>
		value_len += 16U;
   263e0:	2113      	movs	r1, #19
   263e2:	e7e7      	b.n	263b4 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   263e4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   263e8:	e7f1      	b.n	263ce <bt_gatt_attr_read_chrc+0x46>

000263ea <bt_gatt_foreach_attr>:
{
   263ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   263ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
   263f0:	2300      	movs	r3, #0
   263f2:	9300      	str	r3, [sp, #0]
   263f4:	461a      	mov	r2, r3
   263f6:	f7e7 fc65 	bl	dcc4 <bt_gatt_foreach_attr_type>
}
   263fa:	b005      	add	sp, #20
   263fc:	f85d fb04 	ldr.w	pc, [sp], #4

00026400 <db_hash_process>:
	db_hash_gen(true);
   26400:	2001      	movs	r0, #1
   26402:	f7e7 bcb9 	b.w	dd78 <db_hash_gen>

00026406 <bt_gatt_attr_read_cep>:
{
   26406:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26408:	4610      	mov	r0, r2
   2640a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   2640e:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   26410:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   26412:	8812      	ldrh	r2, [r2, #0]
   26414:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   26418:	d80d      	bhi.n	26436 <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   2641a:	f1c5 0402 	rsb	r4, r5, #2
   2641e:	429c      	cmp	r4, r3
   26420:	bfa8      	it	ge
   26422:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   26424:	f10d 0306 	add.w	r3, sp, #6
   26428:	4622      	mov	r2, r4
   2642a:	1959      	adds	r1, r3, r5
   2642c:	f7fe fc10 	bl	24c50 <memcpy>
}
   26430:	4620      	mov	r0, r4
   26432:	b003      	add	sp, #12
   26434:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26436:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   2643a:	e7f9      	b.n	26430 <bt_gatt_attr_read_cep+0x2a>

0002643c <bt_gatt_check_perm>:
{
   2643c:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2643e:	07d4      	lsls	r4, r2, #31
{
   26440:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26442:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   26444:	d504      	bpl.n	26450 <bt_gatt_check_perm+0x14>
   26446:	f010 0f15 	tst.w	r0, #21
   2644a:	d01e      	beq.n	2648a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2644c:	684b      	ldr	r3, [r1, #4]
   2644e:	b1e3      	cbz	r3, 2648a <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   26450:	0793      	lsls	r3, r2, #30
   26452:	d504      	bpl.n	2645e <bt_gatt_check_perm+0x22>
   26454:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   26458:	d019      	beq.n	2648e <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2645a:	688b      	ldr	r3, [r1, #8]
   2645c:	b1bb      	cbz	r3, 2648e <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2645e:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   26462:	f014 0f30 	tst.w	r4, #48	; 0x30
   26466:	d103      	bne.n	26470 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   26468:	f014 000c 	ands.w	r0, r4, #12
   2646c:	d107      	bne.n	2647e <bt_gatt_check_perm+0x42>
}
   2646e:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   26470:	4628      	mov	r0, r5
   26472:	f7fe ffdf 	bl	25434 <bt_conn_get_security>
   26476:	2802      	cmp	r0, #2
   26478:	d8f6      	bhi.n	26468 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2647a:	2005      	movs	r0, #5
   2647c:	e7f7      	b.n	2646e <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2647e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   26480:	2b00      	cmp	r3, #0
   26482:	bf14      	ite	ne
   26484:	2000      	movne	r0, #0
   26486:	200f      	moveq	r0, #15
   26488:	e7f1      	b.n	2646e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2648a:	2002      	movs	r0, #2
   2648c:	e7ef      	b.n	2646e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2648e:	2003      	movs	r0, #3
   26490:	e7ed      	b.n	2646e <bt_gatt_check_perm+0x32>

00026492 <bt_gatt_change_aware>:
{
   26492:	b510      	push	{r4, lr}
   26494:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   26496:	f7e6 fe67 	bl	d168 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2649a:	4603      	mov	r3, r0
   2649c:	b910      	cbnz	r0, 264a4 <bt_gatt_change_aware+0x12>
		return true;
   2649e:	2401      	movs	r4, #1
}
   264a0:	4620      	mov	r0, r4
   264a2:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   264a4:	7a02      	ldrb	r2, [r0, #8]
   264a6:	07d1      	lsls	r1, r2, #31
   264a8:	d5f9      	bpl.n	2649e <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   264aa:	f3bf 8f5b 	dmb	ish
   264ae:	68da      	ldr	r2, [r3, #12]
   264b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   264b4:	07d2      	lsls	r2, r2, #31
   264b6:	f100 000c 	add.w	r0, r0, #12
   264ba:	d4f0      	bmi.n	2649e <bt_gatt_change_aware+0xc>
	if (!req) {
   264bc:	2c00      	cmp	r4, #0
   264be:	d0ef      	beq.n	264a0 <bt_gatt_change_aware+0xe>
   264c0:	f3bf 8f5b 	dmb	ish
   264c4:	68db      	ldr	r3, [r3, #12]
   264c6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   264ca:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   264ce:	079b      	lsls	r3, r3, #30
   264d0:	d507      	bpl.n	264e2 <bt_gatt_change_aware+0x50>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   264d2:	f06f 0102 	mvn.w	r1, #2
   264d6:	f7ff fdf2 	bl	260be <atomic_and.isra.0>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   264da:	2101      	movs	r1, #1
   264dc:	f7ff fdc3 	bl	26066 <atomic_or>
}
   264e0:	e7de      	b.n	264a0 <bt_gatt_change_aware+0xe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   264e2:	2102      	movs	r1, #2
   264e4:	e7fa      	b.n	264dc <bt_gatt_change_aware+0x4a>

000264e6 <sys_memcpy_swap>:
	psrc += length - 1;
   264e6:	1e53      	subs	r3, r2, #1
   264e8:	4419      	add	r1, r3
	for (; length > 0; length--) {
   264ea:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   264ec:	f811 3901 	ldrb.w	r3, [r1], #-1
   264f0:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   264f4:	4290      	cmp	r0, r2
   264f6:	d1f9      	bne.n	264ec <sys_memcpy_swap+0x6>
}
   264f8:	4770      	bx	lr

000264fa <sys_mem_swap>:
{
   264fa:	b510      	push	{r4, lr}
   264fc:	1843      	adds	r3, r0, r1
   264fe:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   26506:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26508:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2650c:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2650e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   26510:	d1f7      	bne.n	26502 <sys_mem_swap+0x8>
	}
}
   26512:	bd10      	pop	{r4, pc}

00026514 <smp_pairing_rsp>:
}
   26514:	2007      	movs	r0, #7
   26516:	4770      	bx	lr

00026518 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26518:	f3bf 8f5b 	dmb	ish
   2651c:	6800      	ldr	r0, [r0, #0]
   2651e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26522:	4108      	asrs	r0, r1
}
   26524:	f000 0001 	and.w	r0, r0, #1
   26528:	4770      	bx	lr

0002652a <bt_smp_aes_cmac>:
{
   2652a:	b570      	push	{r4, r5, r6, lr}
   2652c:	b0c2      	sub	sp, #264	; 0x108
   2652e:	460d      	mov	r5, r1
   26530:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26532:	4601      	mov	r1, r0
   26534:	aa16      	add	r2, sp, #88	; 0x58
   26536:	4668      	mov	r0, sp
{
   26538:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2653a:	f7fe f9e1 	bl	24900 <tc_cmac_setup>
   2653e:	b150      	cbz	r0, 26556 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   26540:	4632      	mov	r2, r6
   26542:	4629      	mov	r1, r5
   26544:	4668      	mov	r0, sp
   26546:	f7fe fa06 	bl	24956 <tc_cmac_update>
   2654a:	b120      	cbz	r0, 26556 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2654c:	4669      	mov	r1, sp
   2654e:	4620      	mov	r0, r4
   26550:	f7fe fa6c 	bl	24a2c <tc_cmac_final>
   26554:	b918      	cbnz	r0, 2655e <bt_smp_aes_cmac+0x34>
		return -EIO;
   26556:	f06f 0004 	mvn.w	r0, #4
}
   2655a:	b042      	add	sp, #264	; 0x108
   2655c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2655e:	2000      	movs	r0, #0
   26560:	e7fb      	b.n	2655a <bt_smp_aes_cmac+0x30>

00026562 <smp_f4>:
{
   26562:	b5f0      	push	{r4, r5, r6, r7, lr}
   26564:	b097      	sub	sp, #92	; 0x5c
   26566:	4614      	mov	r4, r2
   26568:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2656a:	2220      	movs	r2, #32
   2656c:	4601      	mov	r1, r0
   2656e:	a805      	add	r0, sp, #20
{
   26570:	461d      	mov	r5, r3
   26572:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   26574:	f7ff ffb7 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   26578:	2220      	movs	r2, #32
   2657a:	4631      	mov	r1, r6
   2657c:	a80d      	add	r0, sp, #52	; 0x34
   2657e:	f7ff ffb2 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   26582:	4621      	mov	r1, r4
   26584:	2210      	movs	r2, #16
   26586:	a801      	add	r0, sp, #4
	m[64] = z;
   26588:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2658c:	f7ff ffab 	bl	264e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   26590:	463b      	mov	r3, r7
   26592:	2241      	movs	r2, #65	; 0x41
   26594:	a905      	add	r1, sp, #20
   26596:	a801      	add	r0, sp, #4
   26598:	f7ff ffc7 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
   2659c:	4604      	mov	r4, r0
   2659e:	b918      	cbnz	r0, 265a8 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   265a0:	2110      	movs	r1, #16
   265a2:	4638      	mov	r0, r7
   265a4:	f7ff ffa9 	bl	264fa <sys_mem_swap>
}
   265a8:	4620      	mov	r0, r4
   265aa:	b017      	add	sp, #92	; 0x5c
   265ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000265ae <smp_f6>:
{
   265ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   265b0:	b097      	sub	sp, #92	; 0x5c
   265b2:	4605      	mov	r5, r0
   265b4:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   265b6:	a805      	add	r0, sp, #20
   265b8:	2210      	movs	r2, #16
{
   265ba:	461c      	mov	r4, r3
   265bc:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   265be:	f7ff ff92 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   265c2:	2210      	movs	r2, #16
   265c4:	4631      	mov	r1, r6
   265c6:	a809      	add	r0, sp, #36	; 0x24
   265c8:	f7ff ff8d 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   265cc:	4621      	mov	r1, r4
   265ce:	2210      	movs	r2, #16
   265d0:	a80d      	add	r0, sp, #52	; 0x34
   265d2:	f7ff ff88 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   265d6:	991c      	ldr	r1, [sp, #112]	; 0x70
   265d8:	2203      	movs	r2, #3
   265da:	a811      	add	r0, sp, #68	; 0x44
   265dc:	f7ff ff83 	bl	264e6 <sys_memcpy_swap>
	m[51] = a1->type;
   265e0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   265e2:	f814 3b01 	ldrb.w	r3, [r4], #1
   265e6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   265ea:	4621      	mov	r1, r4
   265ec:	2206      	movs	r2, #6
   265ee:	a812      	add	r0, sp, #72	; 0x48
   265f0:	f7fe fb2e 	bl	24c50 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   265f4:	4621      	mov	r1, r4
   265f6:	2206      	movs	r2, #6
   265f8:	a812      	add	r0, sp, #72	; 0x48
   265fa:	f7ff ff74 	bl	264e6 <sys_memcpy_swap>
	m[58] = a2->type;
   265fe:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   26600:	f814 3b01 	ldrb.w	r3, [r4], #1
   26604:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   26608:	4621      	mov	r1, r4
   2660a:	2206      	movs	r2, #6
   2660c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26610:	f7fe fb1e 	bl	24c50 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26614:	4621      	mov	r1, r4
   26616:	2206      	movs	r2, #6
   26618:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2661c:	f7ff ff63 	bl	264e6 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   26620:	2210      	movs	r2, #16
   26622:	4629      	mov	r1, r5
   26624:	a801      	add	r0, sp, #4
   26626:	f7ff ff5e 	bl	264e6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2662a:	463b      	mov	r3, r7
   2662c:	2241      	movs	r2, #65	; 0x41
   2662e:	a905      	add	r1, sp, #20
   26630:	a801      	add	r0, sp, #4
   26632:	f7ff ff7a 	bl	2652a <bt_smp_aes_cmac>
	if (err) {
   26636:	4604      	mov	r4, r0
   26638:	b918      	cbnz	r0, 26642 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2663a:	2110      	movs	r1, #16
   2663c:	4638      	mov	r0, r7
   2663e:	f7ff ff5c 	bl	264fa <sys_mem_swap>
}
   26642:	4620      	mov	r0, r4
   26644:	b017      	add	sp, #92	; 0x5c
   26646:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026648 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26648:	2301      	movs	r3, #1
   2664a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2664c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2664e:	f3bf 8f5b 	dmb	ish
   26652:	e850 2f00 	ldrex	r2, [r0]
   26656:	401a      	ands	r2, r3
   26658:	e840 2100 	strex	r1, r2, [r0]
   2665c:	2900      	cmp	r1, #0
   2665e:	d1f8      	bne.n	26652 <atomic_clear_bit+0xa>
   26660:	f3bf 8f5b 	dmb	ish
}
   26664:	4770      	bx	lr

00026666 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26666:	2301      	movs	r3, #1
   26668:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2666a:	f3bf 8f5b 	dmb	ish
   2666e:	e850 2f00 	ldrex	r2, [r0]
   26672:	431a      	orrs	r2, r3
   26674:	e840 2100 	strex	r1, r2, [r0]
   26678:	2900      	cmp	r1, #0
   2667a:	d1f8      	bne.n	2666e <atomic_set_bit+0x8>
   2667c:	f3bf 8f5b 	dmb	ish
}
   26680:	4770      	bx	lr

00026682 <smp_keypress_notif>:
{
   26682:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   26684:	210e      	movs	r1, #14
   26686:	30b8      	adds	r0, #184	; 0xb8
   26688:	f7ff ffed 	bl	26666 <atomic_set_bit>
}
   2668c:	2000      	movs	r0, #0
   2668e:	bd08      	pop	{r3, pc}

00026690 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   26690:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   26692:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   26696:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   26698:	4628      	mov	r0, r5
   2669a:	2104      	movs	r1, #4
   2669c:	f7ff ff3c 	bl	26518 <atomic_test_bit>
   266a0:	b168      	cbz	r0, 266be <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   266a2:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   266a4:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   266a6:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   266a8:	4608      	mov	r0, r1
   266aa:	f7fe fff5 	bl	25698 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   266ae:	4604      	mov	r4, r0
   266b0:	b940      	cbnz	r0, 266c4 <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   266b2:	2104      	movs	r1, #4
   266b4:	4628      	mov	r0, r5
   266b6:	f7ff ffd6 	bl	26666 <atomic_set_bit>
}
   266ba:	4620      	mov	r0, r4
   266bc:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   266be:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   266c2:	e7ef      	b.n	266a4 <smp_create_pdu.constprop.0+0x14>
   266c4:	2101      	movs	r1, #1
   266c6:	3008      	adds	r0, #8
   266c8:	f000 fb30 	bl	26d2c <net_buf_simple_add>
	hdr->code = op;
   266cc:	7006      	strb	r6, [r0, #0]
	return buf;
   266ce:	e7f4      	b.n	266ba <smp_create_pdu.constprop.0+0x2a>

000266d0 <send_pairing_rsp>:
{
   266d0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   266d2:	2102      	movs	r1, #2
{
   266d4:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   266d6:	f7ff ffdb 	bl	26690 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   266da:	4604      	mov	r4, r0
   266dc:	b178      	cbz	r0, 266fe <send_pairing_rsp+0x2e>
   266de:	2106      	movs	r1, #6
   266e0:	3008      	adds	r0, #8
   266e2:	f000 fb23 	bl	26d2c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   266e6:	2206      	movs	r2, #6
   266e8:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   266ec:	f7fe fab0 	bl	24c50 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   266f0:	4628      	mov	r0, r5
   266f2:	2200      	movs	r2, #0
   266f4:	4621      	mov	r1, r4
   266f6:	f7e8 f88f 	bl	e818 <smp_send.constprop.0>
	return 0;
   266fa:	2000      	movs	r0, #0
}
   266fc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   266fe:	2008      	movs	r0, #8
   26700:	e7fc      	b.n	266fc <send_pairing_rsp+0x2c>

00026702 <smp_send_pairing_random>:
{
   26702:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26704:	2104      	movs	r1, #4
{
   26706:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26708:	f7ff ffc2 	bl	26690 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2670c:	4604      	mov	r4, r0
   2670e:	b178      	cbz	r0, 26730 <smp_send_pairing_random+0x2e>
   26710:	2110      	movs	r1, #16
   26712:	3008      	adds	r0, #8
   26714:	f000 fb0a 	bl	26d2c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   26718:	2210      	movs	r2, #16
   2671a:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   2671e:	f7fe fa97 	bl	24c50 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26722:	4628      	mov	r0, r5
   26724:	2200      	movs	r2, #0
   26726:	4621      	mov	r1, r4
   26728:	f7e8 f876 	bl	e818 <smp_send.constprop.0>
	return 0;
   2672c:	2000      	movs	r0, #0
}
   2672e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26730:	2008      	movs	r0, #8
   26732:	e7fc      	b.n	2672e <smp_send_pairing_random+0x2c>

00026734 <smp_dhkey_check>:
{
   26734:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   26736:	6803      	ldr	r3, [r0, #0]
   26738:	78db      	ldrb	r3, [r3, #3]
   2673a:	2b01      	cmp	r3, #1
{
   2673c:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2673e:	d115      	bne.n	2676c <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   26740:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   26742:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   26746:	2110      	movs	r1, #16
   26748:	4628      	mov	r0, r5
   2674a:	f7ff ff7d 	bl	26648 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2674e:	4631      	mov	r1, r6
   26750:	2210      	movs	r2, #16
   26752:	f204 106f 	addw	r0, r4, #367	; 0x16f
   26756:	f7fe fa7b 	bl	24c50 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2675a:	2107      	movs	r1, #7
   2675c:	4628      	mov	r0, r5
   2675e:	f7ff fedb 	bl	26518 <atomic_test_bit>
   26762:	b128      	cbz	r0, 26770 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26764:	2109      	movs	r1, #9
   26766:	4628      	mov	r0, r5
   26768:	f7ff ff7d 	bl	26666 <atomic_set_bit>
}
   2676c:	2000      	movs	r0, #0
   2676e:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26770:	210a      	movs	r1, #10
   26772:	4628      	mov	r0, r5
   26774:	f7ff fed0 	bl	26518 <atomic_test_bit>
   26778:	2800      	cmp	r0, #0
   2677a:	d1f3      	bne.n	26764 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   2677c:	4620      	mov	r0, r4
}
   2677e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   26782:	f7e8 bb0f 	b.w	eda4 <compute_and_check_and_send_slave_dhcheck>

00026786 <smp_security_request>:
   26786:	2007      	movs	r0, #7
   26788:	4770      	bx	lr

0002678a <atomic_test_and_clear_bit>:
{
   2678a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2678c:	2301      	movs	r3, #1
   2678e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26792:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26794:	f3bf 8f5b 	dmb	ish
   26798:	e850 3f00 	ldrex	r3, [r0]
   2679c:	ea03 0c02 	and.w	ip, r3, r2
   267a0:	e840 ce00 	strex	lr, ip, [r0]
   267a4:	f1be 0f00 	cmp.w	lr, #0
   267a8:	d1f6      	bne.n	26798 <atomic_test_and_clear_bit+0xe>
   267aa:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   267ae:	420b      	tst	r3, r1
}
   267b0:	bf14      	ite	ne
   267b2:	2001      	movne	r0, #1
   267b4:	2000      	moveq	r0, #0
   267b6:	f85d fb04 	ldr.w	pc, [sp], #4

000267ba <smp_reset>:
{
   267ba:	b510      	push	{r4, lr}
   267bc:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   267be:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   267c2:	f001 f96e 	bl	27aa2 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   267c6:	2300      	movs	r3, #0
   267c8:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   267cc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   267d0:	f3bf 8f5b 	dmb	ish
   267d4:	e850 2f00 	ldrex	r2, [r0]
   267d8:	e840 3100 	strex	r1, r3, [r0]
   267dc:	2900      	cmp	r1, #0
   267de:	d1f9      	bne.n	267d4 <smp_reset+0x1a>
   267e0:	f3bf 8f5b 	dmb	ish
   267e4:	f3bf 8f5b 	dmb	ish
   267e8:	34bc      	adds	r4, #188	; 0xbc
   267ea:	e854 2f00 	ldrex	r2, [r4]
   267ee:	e844 3100 	strex	r1, r3, [r4]
   267f2:	2900      	cmp	r1, #0
   267f4:	d1f9      	bne.n	267ea <smp_reset+0x30>
   267f6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   267fa:	2101      	movs	r1, #1
}
   267fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26800:	f7ff bf31 	b.w	26666 <atomic_set_bit>

00026804 <smp_c1>:
{
   26804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26808:	b089      	sub	sp, #36	; 0x24
   2680a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2680e:	4699      	mov	r9, r3
	p1[0] = ia->type;
   26810:	783b      	ldrb	r3, [r7, #0]
{
   26812:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   26814:	f88d 3000 	strb.w	r3, [sp]
{
   26818:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2681a:	f898 3000 	ldrb.w	r3, [r8]
   2681e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   26822:	4611      	mov	r1, r2
   26824:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   26826:	2207      	movs	r2, #7
   26828:	f10d 0002 	add.w	r0, sp, #2
   2682c:	f7fe fa10 	bl	24c50 <memcpy>
	memcpy(p1 + 9, pres, 7);
   26830:	2207      	movs	r2, #7
   26832:	4649      	mov	r1, r9
   26834:	f10d 0009 	add.w	r0, sp, #9
   26838:	f7fe fa0a 	bl	24c50 <memcpy>
	while (len--) {
   2683c:	f104 0010 	add.w	r0, r4, #16
   26840:	4629      	mov	r1, r5
   26842:	466a      	mov	r2, sp
   26844:	42a0      	cmp	r0, r4
   26846:	d127      	bne.n	26898 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   26848:	462a      	mov	r2, r5
   2684a:	4629      	mov	r1, r5
   2684c:	4630      	mov	r0, r6
   2684e:	f7ec ff23 	bl	13698 <bt_encrypt_le>
	if (err) {
   26852:	4604      	mov	r4, r0
   26854:	b9e0      	cbnz	r0, 26890 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   26856:	2206      	movs	r2, #6
   26858:	f108 0101 	add.w	r1, r8, #1
   2685c:	a804      	add	r0, sp, #16
   2685e:	f7fe f9f7 	bl	24c50 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   26862:	2206      	movs	r2, #6
   26864:	1c79      	adds	r1, r7, #1
   26866:	f10d 0016 	add.w	r0, sp, #22
   2686a:	f7fe f9f1 	bl	24c50 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2686e:	2204      	movs	r2, #4
   26870:	4621      	mov	r1, r4
   26872:	a807      	add	r0, sp, #28
   26874:	f7fe fa17 	bl	24ca6 <memset>
	while (len--) {
   26878:	f105 0010 	add.w	r0, r5, #16
   2687c:	462a      	mov	r2, r5
   2687e:	ab04      	add	r3, sp, #16
   26880:	4282      	cmp	r2, r0
   26882:	d112      	bne.n	268aa <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   26884:	462a      	mov	r2, r5
   26886:	4629      	mov	r1, r5
   26888:	4630      	mov	r0, r6
   2688a:	f7ec ff05 	bl	13698 <bt_encrypt_le>
   2688e:	4604      	mov	r4, r0
}
   26890:	4620      	mov	r0, r4
   26892:	b009      	add	sp, #36	; 0x24
   26894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   26898:	f814 3b01 	ldrb.w	r3, [r4], #1
   2689c:	f812 cb01 	ldrb.w	ip, [r2], #1
   268a0:	ea83 030c 	eor.w	r3, r3, ip
   268a4:	f801 3b01 	strb.w	r3, [r1], #1
   268a8:	e7cc      	b.n	26844 <smp_c1+0x40>
   268aa:	f812 1b01 	ldrb.w	r1, [r2], #1
   268ae:	f813 4b01 	ldrb.w	r4, [r3], #1
   268b2:	4061      	eors	r1, r4
   268b4:	f802 1c01 	strb.w	r1, [r2, #-1]
   268b8:	e7e2      	b.n	26880 <smp_c1+0x7c>

000268ba <legacy_pairing_confirm>:
{
   268ba:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   268bc:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   268c0:	b085      	sub	sp, #20
   268c2:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   268c4:	210a      	movs	r1, #10
   268c6:	4638      	mov	r0, r7
   268c8:	f7ff fe26 	bl	26518 <atomic_test_bit>
   268cc:	bb90      	cbnz	r0, 26934 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   268ce:	2104      	movs	r1, #4
   268d0:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   268d4:	f7ff fec7 	bl	26666 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   268d8:	2103      	movs	r1, #3
   268da:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   268dc:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   268de:	f7ff fed7 	bl	26690 <smp_create_pdu.constprop.0>
	if (!buf) {
   268e2:	4606      	mov	r6, r0
   268e4:	b1c0      	cbz	r0, 26918 <legacy_pairing_confirm+0x5e>
   268e6:	2110      	movs	r1, #16
   268e8:	3008      	adds	r0, #8
   268ea:	f000 fa1f 	bl	26d2c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   268ee:	f104 0396 	add.w	r3, r4, #150	; 0x96
   268f2:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   268f4:	9002      	str	r0, [sp, #8]
   268f6:	9301      	str	r3, [sp, #4]
   268f8:	9400      	str	r4, [sp, #0]
   268fa:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   268fe:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   26902:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   26906:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   2690a:	f7ff ff7b 	bl	26804 <smp_c1>
   2690e:	4604      	mov	r4, r0
   26910:	b120      	cbz	r0, 2691c <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   26912:	4630      	mov	r0, r6
   26914:	f7f6 ffae 	bl	1d874 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26918:	2008      	movs	r0, #8
   2691a:	e009      	b.n	26930 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   2691c:	4602      	mov	r2, r0
   2691e:	4631      	mov	r1, r6
   26920:	4628      	mov	r0, r5
   26922:	f7e7 ff79 	bl	e818 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26926:	4621      	mov	r1, r4
   26928:	4638      	mov	r0, r7
   2692a:	f7ff fe8d 	bl	26648 <atomic_clear_bit>
	return 0;
   2692e:	2000      	movs	r0, #0
}
   26930:	b005      	add	sp, #20
   26932:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26934:	2100      	movs	r1, #0
   26936:	4638      	mov	r0, r7
   26938:	f7ff fe95 	bl	26666 <atomic_set_bit>
   2693c:	e7f7      	b.n	2692e <legacy_pairing_confirm+0x74>

0002693e <bt_smp_request_ltk>:
{
   2693e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26942:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   26946:	e9cd 2300 	strd	r2, r3, [sp]
   2694a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2694c:	f7e7 ff04 	bl	e758 <smp_chan_get>
	if (!smp) {
   26950:	4605      	mov	r5, r0
   26952:	2800      	cmp	r0, #0
   26954:	f000 8093 	beq.w	26a7e <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   26958:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2695c:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (ediv == 0U && rand == 0U &&
   26960:	f1b9 0f00 	cmp.w	r9, #0
   26964:	d12c      	bne.n	269c0 <bt_smp_request_ltk+0x82>
   26966:	e9dd 2300 	ldrd	r2, r3, [sp]
   2696a:	4313      	orrs	r3, r2
   2696c:	d128      	bne.n	269c0 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2696e:	2103      	movs	r1, #3
   26970:	4638      	mov	r0, r7
   26972:	f7ff fdd1 	bl	26518 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   26976:	b318      	cbz	r0, 269c0 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   26978:	2101      	movs	r1, #1
   2697a:	4638      	mov	r0, r7
   2697c:	f7ff fdcc 	bl	26518 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26980:	4606      	mov	r6, r0
   26982:	b1e8      	cbz	r0, 269c0 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   26984:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   26988:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   2698c:	429c      	cmp	r4, r3
   2698e:	bf28      	it	cs
   26990:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   26992:	4622      	mov	r2, r4
   26994:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   26998:	4640      	mov	r0, r8
   2699a:	f7fe f959 	bl	24c50 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2699e:	2c0f      	cmp	r4, #15
   269a0:	d806      	bhi.n	269b0 <bt_smp_request_ltk+0x72>
			(void)memset(ltk + enc_size, 0,
   269a2:	f1c4 0210 	rsb	r2, r4, #16
   269a6:	4649      	mov	r1, r9
   269a8:	eb08 0004 	add.w	r0, r8, r4
   269ac:	f7fe f97b 	bl	24ca6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   269b0:	2101      	movs	r1, #1
   269b2:	4638      	mov	r0, r7
   269b4:	f7ff fe57 	bl	26666 <atomic_set_bit>
}
   269b8:	4630      	mov	r0, r6
   269ba:	b003      	add	sp, #12
   269bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   269c0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   269c4:	b983      	cbnz	r3, 269e8 <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   269c6:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   269ca:	7a21      	ldrb	r1, [r4, #8]
   269cc:	4632      	mov	r2, r6
   269ce:	2020      	movs	r0, #32
   269d0:	f7e9 fd5c 	bl	1048c <bt_keys_find>
   269d4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   269d8:	b930      	cbnz	r0, 269e8 <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   269da:	7a21      	ldrb	r1, [r4, #8]
   269dc:	4632      	mov	r2, r6
   269de:	2001      	movs	r0, #1
   269e0:	f7e9 fd54 	bl	1048c <bt_keys_find>
   269e4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   269e8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   269ec:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   269f0:	b9ee      	cbnz	r6, 26a2e <bt_smp_request_ltk+0xf0>
   269f2:	e9dd 2300 	ldrd	r2, r3, [sp]
   269f6:	4313      	orrs	r3, r2
   269f8:	d119      	bne.n	26a2e <bt_smp_request_ltk+0xf0>
   269fa:	b388      	cbz	r0, 26a60 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   269fc:	89c3      	ldrh	r3, [r0, #14]
   269fe:	069a      	lsls	r2, r3, #26
   26a00:	d516      	bpl.n	26a30 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   26a02:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26a04:	f100 011a 	add.w	r1, r0, #26
   26a08:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   26a0a:	4640      	mov	r0, r8
   26a0c:	f7fe f920 	bl	24c50 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26a10:	2c0f      	cmp	r4, #15
   26a12:	d806      	bhi.n	26a22 <bt_smp_request_ltk+0xe4>
			(void)memset(ltk + enc_size, 0,
   26a14:	f1c4 0210 	rsb	r2, r4, #16
   26a18:	4631      	mov	r1, r6
   26a1a:	eb08 0004 	add.w	r0, r8, r4
   26a1e:	f7fe f942 	bl	24ca6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26a22:	2101      	movs	r1, #1
   26a24:	4638      	mov	r0, r7
   26a26:	f7ff fe1e 	bl	26666 <atomic_set_bit>
		return true;
   26a2a:	2601      	movs	r6, #1
   26a2c:	e7c4      	b.n	269b8 <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   26a2e:	b1b8      	cbz	r0, 26a60 <bt_smp_request_ltk+0x122>
   26a30:	89c3      	ldrh	r3, [r0, #14]
   26a32:	07db      	lsls	r3, r3, #31
   26a34:	d514      	bpl.n	26a60 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   26a36:	2208      	movs	r2, #8
   26a38:	4669      	mov	r1, sp
   26a3a:	3068      	adds	r0, #104	; 0x68
   26a3c:	f7fe f8f7 	bl	24c2e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   26a40:	b970      	cbnz	r0, 26a60 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   26a42:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   26a46:	2202      	movs	r2, #2
   26a48:	a90a      	add	r1, sp, #40	; 0x28
   26a4a:	3070      	adds	r0, #112	; 0x70
   26a4c:	f7fe f8ef 	bl	24c2e <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   26a50:	4606      	mov	r6, r0
   26a52:	b928      	cbnz	r0, 26a60 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   26a54:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   26a58:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   26a5a:	3172      	adds	r1, #114	; 0x72
   26a5c:	4622      	mov	r2, r4
   26a5e:	e7d4      	b.n	26a0a <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26a60:	210f      	movs	r1, #15
   26a62:	4638      	mov	r0, r7
   26a64:	f7ff fd58 	bl	26518 <atomic_test_bit>
   26a68:	b120      	cbz	r0, 26a74 <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26a6a:	2202      	movs	r2, #2
   26a6c:	2106      	movs	r1, #6
   26a6e:	4620      	mov	r0, r4
   26a70:	f7e4 fc68 	bl	b344 <bt_conn_security_changed>
	smp_reset(smp);
   26a74:	4628      	mov	r0, r5
   26a76:	f7ff fea0 	bl	267ba <smp_reset>
	return false;
   26a7a:	2600      	movs	r6, #0
   26a7c:	e79c      	b.n	269b8 <bt_smp_request_ltk+0x7a>
		return false;
   26a7e:	4606      	mov	r6, r0
   26a80:	e79a      	b.n	269b8 <bt_smp_request_ltk+0x7a>

00026a82 <bt_smp_irk_get>:
{
   26a82:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   26a84:	2500      	movs	r5, #0
{
   26a86:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   26a88:	2210      	movs	r2, #16
   26a8a:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   26a8c:	e9cd 5500 	strd	r5, r5, [sp]
   26a90:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   26a94:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   26a96:	f7fe f8ca 	bl	24c2e <memcmp>
   26a9a:	b180      	cbz	r0, 26abe <bt_smp_irk_get+0x3c>
	dst[0] = val;
   26a9c:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   26a9e:	220c      	movs	r2, #12
   26aa0:	4629      	mov	r1, r5
   26aa2:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   26aa4:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   26aa6:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   26aa8:	70e5      	strb	r5, [r4, #3]
   26aaa:	1d20      	adds	r0, r4, #4
   26aac:	f7fe f8fb 	bl	24ca6 <memset>
	err = bt_encrypt_le(key, res, res);
   26ab0:	4622      	mov	r2, r4
   26ab2:	4621      	mov	r1, r4
   26ab4:	4630      	mov	r0, r6
   26ab6:	f7ec fdef 	bl	13698 <bt_encrypt_le>
}
   26aba:	b004      	add	sp, #16
   26abc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26abe:	f06f 0015 	mvn.w	r0, #21
   26ac2:	e7fa      	b.n	26aba <bt_smp_irk_get+0x38>

00026ac4 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26ac4:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
{
   26ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26aca:	4605      	mov	r5, r0
   26acc:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26ace:	4618      	mov	r0, r3
   26ad0:	2103      	movs	r1, #3
   26ad2:	f7ff fd21 	bl	26518 <atomic_test_bit>
   26ad6:	b1c8      	cbz	r0, 26b0c <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   26ad8:	4621      	mov	r1, r4
   26ada:	4628      	mov	r0, r5
   26adc:	f7e8 ff06 	bl	f8ec <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   26ae0:	2105      	movs	r1, #5
   26ae2:	4628      	mov	r0, r5
   26ae4:	f7ff fdd4 	bl	26690 <smp_create_pdu.constprop.0>
	if (!buf) {
   26ae8:	4606      	mov	r6, r0
   26aea:	b1e0      	cbz	r0, 26b26 <smp_error+0x62>
   26aec:	2101      	movs	r1, #1
   26aee:	3008      	adds	r0, #8
   26af0:	f000 f91c 	bl	26d2c <net_buf_simple_add>
	rsp->reason = reason;
   26af4:	7004      	strb	r4, [r0, #0]
   26af6:	2400      	movs	r4, #0
   26af8:	6828      	ldr	r0, [r5, #0]
   26afa:	9400      	str	r4, [sp, #0]
   26afc:	4623      	mov	r3, r4
   26afe:	4632      	mov	r2, r6
   26b00:	2106      	movs	r1, #6
   26b02:	f7fe fdcc 	bl	2569e <bt_l2cap_send_cb>
	return 0;
   26b06:	4620      	mov	r0, r4
}
   26b08:	b002      	add	sp, #8
   26b0a:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26b0c:	2101      	movs	r1, #1
   26b0e:	4618      	mov	r0, r3
   26b10:	f7ff fd02 	bl	26518 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26b14:	2800      	cmp	r0, #0
   26b16:	d1df      	bne.n	26ad8 <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26b18:	210f      	movs	r1, #15
   26b1a:	4618      	mov	r0, r3
   26b1c:	f7ff fcfc 	bl	26518 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26b20:	2800      	cmp	r0, #0
   26b22:	d1d9      	bne.n	26ad8 <smp_error+0x14>
   26b24:	e7dc      	b.n	26ae0 <smp_error+0x1c>
		return -ENOBUFS;
   26b26:	f06f 0036 	mvn.w	r0, #54	; 0x36
   26b2a:	e7ed      	b.n	26b08 <smp_error+0x44>

00026b2c <bt_smp_dhkey_ready>:
{
   26b2c:	b570      	push	{r4, r5, r6, lr}
   26b2e:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26b30:	2008      	movs	r0, #8
   26b32:	f7e7 fdb9 	bl	e6a8 <smp_find>
	if (smp) {
   26b36:	4604      	mov	r4, r0
   26b38:	b1c0      	cbz	r0, 26b6c <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26b3a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   26b3e:	2108      	movs	r1, #8
   26b40:	4628      	mov	r0, r5
   26b42:	f7ff fd81 	bl	26648 <atomic_clear_bit>
	if (!dhkey) {
   26b46:	b38e      	cbz	r6, 26bac <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   26b48:	2107      	movs	r1, #7
   26b4a:	f7ff fd7d 	bl	26648 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   26b4e:	4631      	mov	r1, r6
   26b50:	2220      	movs	r2, #32
   26b52:	f204 104f 	addw	r0, r4, #335	; 0x14f
   26b56:	f7fe f87b 	bl	24c50 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26b5a:	210a      	movs	r1, #10
   26b5c:	4628      	mov	r0, r5
   26b5e:	f7ff fcdb 	bl	26518 <atomic_test_bit>
   26b62:	b168      	cbz	r0, 26b80 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b64:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b66:	4628      	mov	r0, r5
   26b68:	f7ff fd7d 	bl	26666 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26b6c:	2007      	movs	r0, #7
   26b6e:	f7e7 fd9b 	bl	e6a8 <smp_find>
		if (smp) {
   26b72:	4604      	mov	r4, r0
   26b74:	b118      	cbz	r0, 26b7e <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   26b76:	f7e7 fe85 	bl	e884 <smp_dhkey_generate>
			if (err) {
   26b7a:	4601      	mov	r1, r0
   26b7c:	b990      	cbnz	r0, 26ba4 <bt_smp_dhkey_ready+0x78>
}
   26b7e:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26b80:	2110      	movs	r1, #16
   26b82:	4628      	mov	r0, r5
   26b84:	f7ff fcc8 	bl	26518 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b88:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26b8a:	2800      	cmp	r0, #0
   26b8c:	d1eb      	bne.n	26b66 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   26b8e:	4628      	mov	r0, r5
   26b90:	f7ff fcc2 	bl	26518 <atomic_test_bit>
   26b94:	2800      	cmp	r0, #0
   26b96:	d0e9      	beq.n	26b6c <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   26b98:	4620      	mov	r0, r4
   26b9a:	f7e8 f903 	bl	eda4 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   26b9e:	4601      	mov	r1, r0
   26ba0:	2800      	cmp	r0, #0
   26ba2:	d0e3      	beq.n	26b6c <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   26ba4:	4620      	mov	r0, r4
   26ba6:	f7ff ff8d 	bl	26ac4 <smp_error>
   26baa:	e7df      	b.n	26b6c <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26bac:	210b      	movs	r1, #11
   26bae:	e7f9      	b.n	26ba4 <bt_smp_dhkey_ready+0x78>

00026bb0 <smp_check_complete>:
{
   26bb0:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   26bb2:	7883      	ldrb	r3, [r0, #2]
   26bb4:	2b01      	cmp	r3, #1
{
   26bb6:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   26bb8:	d10f      	bne.n	26bda <smp_check_complete+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   26bba:	2106      	movs	r1, #6
   26bbc:	f7fe fd88 	bl	256d0 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   26bc0:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   26bc4:	ea22 0104 	bic.w	r1, r2, r4
   26bc8:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   26bcc:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   26bd0:	b919      	cbnz	r1, 26bda <smp_check_complete+0x2a>
}
   26bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   26bd6:	f7e8 be89 	b.w	f8ec <smp_pairing_complete>
}
   26bda:	bd10      	pop	{r4, pc}

00026bdc <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   26bdc:	2104      	movs	r1, #4
   26bde:	f7ff bfe7 	b.w	26bb0 <smp_check_complete>

00026be2 <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   26be2:	2102      	movs	r1, #2
   26be4:	f7ff bfe4 	b.w	26bb0 <smp_check_complete>

00026be8 <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   26be8:	2101      	movs	r1, #1
   26bea:	f7ff bfe1 	b.w	26bb0 <smp_check_complete>

00026bee <bt_smp_disconnected>:
{
   26bee:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   26bf0:	6803      	ldr	r3, [r0, #0]
{
   26bf2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   26bf4:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	struct bt_keys *keys = chan->conn->le.keys;
   26bf8:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   26bfc:	f000 ff51 	bl	27aa2 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26c00:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   26c04:	2103      	movs	r1, #3
   26c06:	4618      	mov	r0, r3
   26c08:	f7ff fc86 	bl	26518 <atomic_test_bit>
   26c0c:	b1a0      	cbz	r0, 26c38 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   26c0e:	2108      	movs	r1, #8
   26c10:	4620      	mov	r0, r4
   26c12:	f7e8 fe6b 	bl	f8ec <smp_pairing_complete>
	if (keys) {
   26c16:	b13d      	cbz	r5, 26c28 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   26c18:	89eb      	ldrh	r3, [r5, #14]
   26c1a:	b113      	cbz	r3, 26c22 <bt_smp_disconnected+0x34>
   26c1c:	7b6b      	ldrb	r3, [r5, #13]
   26c1e:	079b      	lsls	r3, r3, #30
   26c20:	d502      	bpl.n	26c28 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26c22:	4628      	mov	r0, r5
   26c24:	f7e9 fcda 	bl	105dc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   26c28:	4620      	mov	r0, r4
   26c2a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   26c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   26c32:	2100      	movs	r1, #0
   26c34:	f7fe b837 	b.w	24ca6 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26c38:	2101      	movs	r1, #1
   26c3a:	4618      	mov	r0, r3
   26c3c:	f7ff fc6c 	bl	26518 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26c40:	2800      	cmp	r0, #0
   26c42:	d1e4      	bne.n	26c0e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26c44:	210f      	movs	r1, #15
   26c46:	4618      	mov	r0, r3
   26c48:	f7ff fc66 	bl	26518 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26c4c:	2800      	cmp	r0, #0
   26c4e:	d1de      	bne.n	26c0e <bt_smp_disconnected+0x20>
   26c50:	e7e1      	b.n	26c16 <bt_smp_disconnected+0x28>

00026c52 <id_add>:
	bt_id_add(keys);
   26c52:	f7e3 b991 	b.w	9f78 <bt_id_add>

00026c56 <bt_keys_get_type>:
{
   26c56:	b570      	push	{r4, r5, r6, lr}
   26c58:	4604      	mov	r4, r0
   26c5a:	460d      	mov	r5, r1
   26c5c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   26c5e:	f7e9 fc15 	bl	1048c <bt_keys_find>
	if (keys) {
   26c62:	b938      	cbnz	r0, 26c74 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   26c64:	4631      	mov	r1, r6
   26c66:	4628      	mov	r0, r5
   26c68:	f7e9 fb3c 	bl	102e4 <bt_keys_get_addr>
	if (!keys) {
   26c6c:	b110      	cbz	r0, 26c74 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   26c6e:	89c3      	ldrh	r3, [r0, #14]
   26c70:	431c      	orrs	r4, r3
   26c72:	81c4      	strh	r4, [r0, #14]
}
   26c74:	bd70      	pop	{r4, r5, r6, pc}

00026c76 <bt_keys_add_type>:
	keys->keys |= type;
   26c76:	89c3      	ldrh	r3, [r0, #14]
   26c78:	4319      	orrs	r1, r3
   26c7a:	81c1      	strh	r1, [r0, #14]
}
   26c7c:	4770      	bx	lr

00026c7e <fixed_data_unref>:
}
   26c7e:	4770      	bx	lr

00026c80 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26c80:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26c82:	6849      	ldr	r1, [r1, #4]
   26c84:	6809      	ldr	r1, [r1, #0]
   26c86:	f7f6 bd67 	b.w	1d758 <net_buf_alloc_len>

00026c8a <net_buf_get>:
{
   26c8a:	b570      	push	{r4, r5, r6, lr}
   26c8c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   26c8e:	f7f9 fc07 	bl	204a0 <z_impl_k_queue_get>
	if (!buf) {
   26c92:	4605      	mov	r5, r0
   26c94:	b128      	cbz	r0, 26ca2 <net_buf_get+0x18>
   26c96:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   26c98:	7963      	ldrb	r3, [r4, #5]
   26c9a:	f013 0301 	ands.w	r3, r3, #1
   26c9e:	d102      	bne.n	26ca6 <net_buf_get+0x1c>
	frag->frags = NULL;
   26ca0:	6023      	str	r3, [r4, #0]
}
   26ca2:	4628      	mov	r0, r5
   26ca4:	bd70      	pop	{r4, r5, r6, pc}
   26ca6:	2300      	movs	r3, #0
   26ca8:	2200      	movs	r2, #0
   26caa:	4630      	mov	r0, r6
   26cac:	f7f9 fbf8 	bl	204a0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   26cb0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   26cb2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   26cb4:	f023 0301 	bic.w	r3, r3, #1
   26cb8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   26cba:	4604      	mov	r4, r0
   26cbc:	e7ec      	b.n	26c98 <net_buf_get+0xe>

00026cbe <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   26cbe:	6883      	ldr	r3, [r0, #8]
   26cc0:	440b      	add	r3, r1
   26cc2:	6003      	str	r3, [r0, #0]
}
   26cc4:	4770      	bx	lr

00026cc6 <net_buf_put>:
{
   26cc6:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   26cc8:	460a      	mov	r2, r1
   26cca:	6814      	ldr	r4, [r2, #0]
   26ccc:	b914      	cbnz	r4, 26cd4 <net_buf_put+0xe>
}
   26cce:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   26cd0:	f000 bd3c 	b.w	2774c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   26cd4:	7953      	ldrb	r3, [r2, #5]
   26cd6:	f043 0301 	orr.w	r3, r3, #1
   26cda:	7153      	strb	r3, [r2, #5]
   26cdc:	4622      	mov	r2, r4
   26cde:	e7f4      	b.n	26cca <net_buf_put+0x4>

00026ce0 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   26ce0:	7902      	ldrb	r2, [r0, #4]
   26ce2:	3201      	adds	r2, #1
   26ce4:	7102      	strb	r2, [r0, #4]
	return buf;
}
   26ce6:	4770      	bx	lr

00026ce8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   26ce8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   26cea:	4618      	mov	r0, r3
   26cec:	681b      	ldr	r3, [r3, #0]
   26cee:	2b00      	cmp	r3, #0
   26cf0:	d1fb      	bne.n	26cea <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   26cf2:	4770      	bx	lr

00026cf4 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   26cf4:	6802      	ldr	r2, [r0, #0]
{
   26cf6:	b510      	push	{r4, lr}
	if (parent->frags) {
   26cf8:	b12a      	cbz	r2, 26d06 <net_buf_frag_insert+0x12>
   26cfa:	460b      	mov	r3, r1
	while (buf->frags) {
   26cfc:	461c      	mov	r4, r3
   26cfe:	681b      	ldr	r3, [r3, #0]
   26d00:	2b00      	cmp	r3, #0
   26d02:	d1fb      	bne.n	26cfc <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   26d04:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   26d06:	6001      	str	r1, [r0, #0]
}
   26d08:	bd10      	pop	{r4, pc}

00026d0a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   26d0a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   26d0c:	4604      	mov	r4, r0
   26d0e:	b920      	cbnz	r0, 26d1a <net_buf_frag_add+0x10>
	buf->ref++;
   26d10:	790b      	ldrb	r3, [r1, #4]
   26d12:	3301      	adds	r3, #1
   26d14:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   26d16:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   26d18:	bd10      	pop	{r4, pc}
   26d1a:	4603      	mov	r3, r0
	while (buf->frags) {
   26d1c:	4618      	mov	r0, r3
   26d1e:	681b      	ldr	r3, [r3, #0]
   26d20:	2b00      	cmp	r3, #0
   26d22:	d1fb      	bne.n	26d1c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   26d24:	f7ff ffe6 	bl	26cf4 <net_buf_frag_insert>
   26d28:	4620      	mov	r0, r4
   26d2a:	e7f5      	b.n	26d18 <net_buf_frag_add+0xe>

00026d2c <net_buf_simple_add>:
	return buf->data + buf->len;
   26d2c:	8883      	ldrh	r3, [r0, #4]
   26d2e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   26d30:	4419      	add	r1, r3
   26d32:	8081      	strh	r1, [r0, #4]
	return tail;
}
   26d34:	18d0      	adds	r0, r2, r3
   26d36:	4770      	bx	lr

00026d38 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   26d38:	b430      	push	{r4, r5}
   26d3a:	8884      	ldrh	r4, [r0, #4]
   26d3c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   26d3e:	18a3      	adds	r3, r4, r2
   26d40:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26d42:	1928      	adds	r0, r5, r4
}
   26d44:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26d46:	f7fd bf83 	b.w	24c50 <memcpy>

00026d4a <net_buf_simple_add_u8>:
   26d4a:	8883      	ldrh	r3, [r0, #4]
   26d4c:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   26d4e:	b510      	push	{r4, lr}
	buf->len += len;
   26d50:	1c5c      	adds	r4, r3, #1
   26d52:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   26d54:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   26d56:	18d0      	adds	r0, r2, r3
   26d58:	bd10      	pop	{r4, pc}

00026d5a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   26d5a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   26d5c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   26d5e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   26d60:	1a40      	subs	r0, r0, r1
	buf->len += len;
   26d62:	4411      	add	r1, r2
	buf->data -= len;
   26d64:	6018      	str	r0, [r3, #0]
	buf->len += len;
   26d66:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   26d68:	4770      	bx	lr

00026d6a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26d6a:	8882      	ldrh	r2, [r0, #4]
   26d6c:	1a52      	subs	r2, r2, r1
{
   26d6e:	4603      	mov	r3, r0
	buf->len -= len;
   26d70:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   26d72:	6800      	ldr	r0, [r0, #0]
   26d74:	4408      	add	r0, r1
   26d76:	6018      	str	r0, [r3, #0]
}
   26d78:	4770      	bx	lr

00026d7a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   26d7a:	4603      	mov	r3, r0
	void *data = buf->data;
   26d7c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26d7e:	889a      	ldrh	r2, [r3, #4]
   26d80:	1a52      	subs	r2, r2, r1
	buf->data += len;
   26d82:	4401      	add	r1, r0
	buf->len -= len;
   26d84:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   26d86:	6019      	str	r1, [r3, #0]

	return data;
}
   26d88:	4770      	bx	lr

00026d8a <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   26d8a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   26d8c:	6803      	ldr	r3, [r0, #0]
   26d8e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26d90:	2102      	movs	r1, #2
   26d92:	f7ff ffea 	bl	26d6a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   26d96:	4620      	mov	r0, r4
   26d98:	bd10      	pop	{r4, pc}

00026d9a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   26d9a:	6802      	ldr	r2, [r0, #0]
   26d9c:	6880      	ldr	r0, [r0, #8]
}
   26d9e:	1a10      	subs	r0, r2, r0
   26da0:	4770      	bx	lr

00026da2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26da2:	8883      	ldrh	r3, [r0, #4]
   26da4:	88c2      	ldrh	r2, [r0, #6]
   26da6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26da8:	6803      	ldr	r3, [r0, #0]
   26daa:	6880      	ldr	r0, [r0, #8]
   26dac:	1a18      	subs	r0, r3, r0
}
   26dae:	1a10      	subs	r0, r2, r0
   26db0:	4770      	bx	lr

00026db2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26db2:	6843      	ldr	r3, [r0, #4]
   26db4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26db6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   26dba:	600b      	str	r3, [r1, #0]
}
   26dbc:	2000      	movs	r0, #0
   26dbe:	4770      	bx	lr

00026dc0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26dc0:	6843      	ldr	r3, [r0, #4]
   26dc2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26dc4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26dc8:	4042      	eors	r2, r0
   26dca:	400a      	ands	r2, r1
   26dcc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   26dce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   26dd2:	2000      	movs	r0, #0
   26dd4:	4770      	bx	lr

00026dd6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26dd6:	6843      	ldr	r3, [r0, #4]
   26dd8:	685b      	ldr	r3, [r3, #4]
}
   26dda:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   26ddc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   26de0:	4770      	bx	lr

00026de2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26de2:	6843      	ldr	r3, [r0, #4]
   26de4:	685b      	ldr	r3, [r3, #4]
}
   26de6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26de8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   26dec:	4770      	bx	lr

00026dee <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26dee:	6843      	ldr	r3, [r0, #4]
   26df0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26df2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   26df6:	404b      	eors	r3, r1
    p_reg->OUT = value;
   26df8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   26dfc:	2000      	movs	r0, #0
   26dfe:	4770      	bx	lr

00026e00 <gpio_nrfx_manage_callback>:
	return port->data;
   26e00:	68c3      	ldr	r3, [r0, #12]
	return list->head;
   26e02:	6858      	ldr	r0, [r3, #4]
{
   26e04:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   26e06:	b158      	cbz	r0, 26e20 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e08:	2400      	movs	r4, #0
   26e0a:	4281      	cmp	r1, r0
   26e0c:	d112      	bne.n	26e34 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   26e0e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   26e10:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   26e12:	b954      	cbnz	r4, 26e2a <gpio_nrfx_manage_callback+0x2a>
   26e14:	428d      	cmp	r5, r1
	list->head = node;
   26e16:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26e18:	d100      	bne.n	26e1c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   26e1a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26e1c:	2000      	movs	r0, #0
   26e1e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   26e20:	b96a      	cbnz	r2, 26e3e <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   26e22:	2000      	movs	r0, #0
}
   26e24:	bd30      	pop	{r4, r5, pc}
   26e26:	4628      	mov	r0, r5
   26e28:	e7ef      	b.n	26e0a <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   26e2a:	428d      	cmp	r5, r1
	parent->next = child;
   26e2c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   26e2e:	bf08      	it	eq
   26e30:	609c      	streq	r4, [r3, #8]
}
   26e32:	e7f3      	b.n	26e1c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   26e34:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e36:	4604      	mov	r4, r0
   26e38:	2d00      	cmp	r5, #0
   26e3a:	d1f4      	bne.n	26e26 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   26e3c:	b13a      	cbz	r2, 26e4e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   26e3e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   26e40:	685a      	ldr	r2, [r3, #4]
   26e42:	600a      	str	r2, [r1, #0]
	list->head = node;
   26e44:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26e46:	2800      	cmp	r0, #0
   26e48:	d1eb      	bne.n	26e22 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   26e4a:	6099      	str	r1, [r3, #8]
}
   26e4c:	e7ea      	b.n	26e24 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   26e4e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26e52:	e7e7      	b.n	26e24 <gpio_nrfx_manage_callback+0x24>

00026e54 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   26e54:	b570      	push	{r4, r5, r6, lr}
   26e56:	460e      	mov	r6, r1
   26e58:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26e5a:	4601      	mov	r1, r0
   26e5c:	b150      	cbz	r0, 26e74 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   26e5e:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   26e60:	688a      	ldr	r2, [r1, #8]
   26e62:	402a      	ands	r2, r5
   26e64:	d002      	beq.n	26e6c <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   26e66:	684b      	ldr	r3, [r1, #4]
   26e68:	4630      	mov	r0, r6
   26e6a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26e6c:	b114      	cbz	r4, 26e74 <gpio_fire_callbacks.isra.0+0x20>
   26e6e:	4621      	mov	r1, r4
   26e70:	6824      	ldr	r4, [r4, #0]
   26e72:	e7f5      	b.n	26e60 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   26e74:	bd70      	pop	{r4, r5, r6, pc}

00026e76 <cfg_level_pins>:
{
   26e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   26e7a:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   26e7c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   26e80:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   26e82:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   26e86:	4313      	orrs	r3, r2
   26e88:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   26e8c:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   26e8e:	2500      	movs	r5, #0
	while (level_pins) {
   26e90:	b90c      	cbnz	r4, 26e96 <cfg_level_pins+0x20>
}
   26e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   26e96:	4226      	tst	r6, r4
   26e98:	d010      	beq.n	26ebc <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   26e9a:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26e9c:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   26ea0:	40e9      	lsrs	r1, r5
   26ea2:	f001 0101 	and.w	r1, r1, #1
   26ea6:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26eaa:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   26eae:	b2c9      	uxtb	r1, r1
   26eb0:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   26eb4:	f7f6 fd8a 	bl	1d9cc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   26eb8:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   26ebc:	3501      	adds	r5, #1
		bit <<= 1;
   26ebe:	0076      	lsls	r6, r6, #1
   26ec0:	e7e6      	b.n	26e90 <cfg_level_pins+0x1a>

00026ec2 <check_level_trigger_pins>:
	return port->data;
   26ec2:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   26ec4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   26ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   26ecc:	68dc      	ldr	r4, [r3, #12]
	return port->config;
   26ece:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   26ed2:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   26ed4:	430a      	orrs	r2, r1
   26ed6:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   26eda:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   26ede:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   26ee2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   26ee4:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   26ee8:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   26eea:	2700      	movs	r7, #0
	while (level_pins) {
   26eec:	b914      	cbnz	r4, 26ef4 <check_level_trigger_pins+0x32>
}
   26eee:	4628      	mov	r0, r5
   26ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   26ef4:	4234      	tst	r4, r6
   26ef6:	d00a      	beq.n	26f0e <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26ef8:	f898 0008 	ldrb.w	r0, [r8, #8]
   26efc:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   26f00:	2100      	movs	r1, #0
   26f02:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   26f06:	f7f6 fd61 	bl	1d9cc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   26f0a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   26f0e:	3701      	adds	r7, #1
		bit <<= 1;
   26f10:	0076      	lsls	r6, r6, #1
   26f12:	e7eb      	b.n	26eec <check_level_trigger_pins+0x2a>

00026f14 <z_impl_i2c_transfer>:
{
   26f14:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   26f16:	6884      	ldr	r4, [r0, #8]
   26f18:	6864      	ldr	r4, [r4, #4]
   26f1a:	46a4      	mov	ip, r4
}
   26f1c:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   26f1e:	4760      	bx	ip

00026f20 <i2c_reg_write_byte>:
{
   26f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buf[2] = {reg_addr, value};
   26f22:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
   26f26:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   26f28:	f88d 2000 	strb.w	r2, [sp]
	msg.buf = (uint8_t *)buf;
   26f2c:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   26f30:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   26f32:	f88d 300c 	strb.w	r3, [sp, #12]
   26f36:	2201      	movs	r2, #1
   26f38:	460b      	mov	r3, r1
   26f3a:	a901      	add	r1, sp, #4
   26f3c:	f7ff ffea 	bl	26f14 <z_impl_i2c_transfer>
}
   26f40:	b005      	add	sp, #20
   26f42:	f85d fb04 	ldr.w	pc, [sp], #4

00026f46 <z_impl_gpio_pin_interrupt_configure.isra.0>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   26f46:	0413      	lsls	r3, r2, #16
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   26f48:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   26f4a:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   26f4c:	d507      	bpl.n	26f5e <z_impl_gpio_pin_interrupt_configure.isra.0+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   26f4e:	68c5      	ldr	r5, [r0, #12]
   26f50:	2301      	movs	r3, #1
   26f52:	682d      	ldr	r5, [r5, #0]
   26f54:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   26f56:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   26f58:	bf18      	it	ne
   26f5a:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   26f5e:	69a4      	ldr	r4, [r4, #24]
   26f60:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   26f64:	46a4      	mov	ip, r4
   26f66:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   26f6a:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   26f6c:	4760      	bx	ip

00026f6e <gpio_pin_interrupt_configure.isra.0>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   26f6e:	f7ff bfea 	b.w	26f46 <z_impl_gpio_pin_interrupt_configure.isra.0>

00026f72 <mpu6050_work_cb>:
	mpu6050_thread_cb(drv_data->dev);
   26f72:	f850 0c1c 	ldr.w	r0, [r0, #-28]
{
   26f76:	b538      	push	{r3, r4, r5, lr}
	struct mpu6050_data *drv_data = dev->data;
   26f78:	68c4      	ldr	r4, [r0, #12]
	const struct mpu6050_config *cfg = dev->config;
   26f7a:	6845      	ldr	r5, [r0, #4]
	if (drv_data->data_ready_handler != NULL) {
   26f7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26f7e:	b113      	cbz	r3, 26f86 <mpu6050_work_cb+0x14>
		drv_data->data_ready_handler(dev,
   26f80:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   26f84:	4798      	blx	r3
	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
   26f86:	79a9      	ldrb	r1, [r5, #6]
   26f88:	69e0      	ldr	r0, [r4, #28]
   26f8a:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
}
   26f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
   26f92:	f7ff bfec 	b.w	26f6e <gpio_pin_interrupt_configure.isra.0>

00026f96 <mpu6050_trigger_set>:
{
   26f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (trig->type != SENSOR_TRIG_DATA_READY) {
   26f98:	880b      	ldrh	r3, [r1, #0]
	struct mpu6050_data *drv_data = dev->data;
   26f9a:	68c5      	ldr	r5, [r0, #12]
	const struct mpu6050_config *cfg = dev->config;
   26f9c:	6847      	ldr	r7, [r0, #4]
	if (trig->type != SENSOR_TRIG_DATA_READY) {
   26f9e:	2b01      	cmp	r3, #1
{
   26fa0:	460e      	mov	r6, r1
   26fa2:	4614      	mov	r4, r2
	if (trig->type != SENSOR_TRIG_DATA_READY) {
   26fa4:	d111      	bne.n	26fca <mpu6050_trigger_set+0x34>
	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
   26fa6:	79b9      	ldrb	r1, [r7, #6]
   26fa8:	69e8      	ldr	r0, [r5, #28]
   26faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   26fae:	f7ff ffde 	bl	26f6e <gpio_pin_interrupt_configure.isra.0>
	drv_data->data_ready_handler = handler;
   26fb2:	632c      	str	r4, [r5, #48]	; 0x30
	if (handler == NULL) {
   26fb4:	b164      	cbz	r4, 26fd0 <mpu6050_trigger_set+0x3a>
	drv_data->data_ready_trigger = *trig;
   26fb6:	6830      	ldr	r0, [r6, #0]
   26fb8:	62e8      	str	r0, [r5, #44]	; 0x2c
	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_pin,
   26fba:	79b9      	ldrb	r1, [r7, #6]
   26fbc:	69e8      	ldr	r0, [r5, #28]
   26fbe:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   26fc2:	f7ff ffd4 	bl	26f6e <gpio_pin_interrupt_configure.isra.0>
	return 0;
   26fc6:	2000      	movs	r0, #0
}
   26fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
   26fca:	f06f 0022 	mvn.w	r0, #34	; 0x22
   26fce:	e7fb      	b.n	26fc8 <mpu6050_trigger_set+0x32>
		return 0;
   26fd0:	4620      	mov	r0, r4
   26fd2:	e7f9      	b.n	26fc8 <mpu6050_trigger_set+0x32>

00026fd4 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26fd4:	2301      	movs	r3, #1
   26fd6:	fa03 f101 	lsl.w	r1, r3, r1
   26fda:	68c3      	ldr	r3, [r0, #12]
   26fdc:	681b      	ldr	r3, [r3, #0]
   26fde:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   26fe0:	bf18      	it	ne
   26fe2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   26fe6:	b112      	cbz	r2, 26fee <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   26fe8:	6883      	ldr	r3, [r0, #8]
   26fea:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26fec:	4718      	bx	r3
   26fee:	6883      	ldr	r3, [r0, #8]
   26ff0:	691b      	ldr	r3, [r3, #16]
   26ff2:	e7fb      	b.n	26fec <gpio_pin_set.isra.0+0x18>

00026ff4 <_spi_context_cs_control>:
{
   26ff4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   26ff6:	6805      	ldr	r5, [r0, #0]
{
   26ff8:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   26ffa:	b1fd      	cbz	r5, 2703c <_spi_context_cs_control+0x48>
   26ffc:	68ab      	ldr	r3, [r5, #8]
   26ffe:	b1eb      	cbz	r3, 2703c <_spi_context_cs_control+0x48>
   27000:	6818      	ldr	r0, [r3, #0]
   27002:	b1d8      	cbz	r0, 2703c <_spi_context_cs_control+0x48>
		if (on) {
   27004:	b151      	cbz	r1, 2701c <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   27006:	7a19      	ldrb	r1, [r3, #8]
   27008:	2201      	movs	r2, #1
   2700a:	f7ff ffe3 	bl	26fd4 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2700e:	6823      	ldr	r3, [r4, #0]
   27010:	689b      	ldr	r3, [r3, #8]
   27012:	6858      	ldr	r0, [r3, #4]
}
   27014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   27018:	f000 bcd7 	b.w	279ca <z_impl_k_busy_wait>
			if (!force_off &&
   2701c:	b912      	cbnz	r2, 27024 <_spi_context_cs_control+0x30>
   2701e:	88aa      	ldrh	r2, [r5, #4]
   27020:	0492      	lsls	r2, r2, #18
   27022:	d40b      	bmi.n	2703c <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
   27024:	6858      	ldr	r0, [r3, #4]
   27026:	f000 fcd0 	bl	279ca <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2702a:	6823      	ldr	r3, [r4, #0]
   2702c:	689b      	ldr	r3, [r3, #8]
   2702e:	2200      	movs	r2, #0
   27030:	7a19      	ldrb	r1, [r3, #8]
   27032:	6818      	ldr	r0, [r3, #0]
}
   27034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   27038:	f7ff bfcc 	b.w	26fd4 <gpio_pin_set.isra.0>
}
   2703c:	bd38      	pop	{r3, r4, r5, pc}

0002703e <spi_context_unlock_unconditionally>:
{
   2703e:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   27040:	2201      	movs	r2, #1
   27042:	2100      	movs	r1, #0
{
   27044:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   27046:	f7ff ffd5 	bl	26ff4 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2704a:	6923      	ldr	r3, [r4, #16]
   2704c:	b933      	cbnz	r3, 2705c <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2704e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   27050:	f104 0008 	add.w	r0, r4, #8
}
   27054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27058:	f7f9 bdde 	b.w	20c18 <z_impl_k_sem_give>
   2705c:	bd10      	pop	{r4, pc}

0002705e <spi_nrfx_release>:
	return dev->data;
   2705e:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   27060:	6803      	ldr	r3, [r0, #0]
   27062:	428b      	cmp	r3, r1
{
   27064:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   27066:	d106      	bne.n	27076 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   27068:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   2706c:	b934      	cbnz	r4, 2707c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2706e:	f7ff ffe6 	bl	2703e <spi_context_unlock_unconditionally>
	return 0;
   27072:	4620      	mov	r0, r4
}
   27074:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27076:	f06f 0015 	mvn.w	r0, #21
   2707a:	e7fb      	b.n	27074 <spi_nrfx_release+0x16>
		return -EBUSY;
   2707c:	f06f 000f 	mvn.w	r0, #15
   27080:	e7f8      	b.n	27074 <spi_nrfx_release+0x16>

00027082 <flash_nrf_write_protection>:
}
   27082:	2000      	movs	r0, #0
   27084:	4770      	bx	lr

00027086 <is_regular_addr_valid>:
{
   27086:	b538      	push	{r3, r4, r5, lr}
   27088:	4604      	mov	r4, r0
   2708a:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2708c:	f000 f92f 	bl	272ee <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   27090:	4284      	cmp	r4, r0
   27092:	d209      	bcs.n	270a8 <is_regular_addr_valid+0x22>
   27094:	2c00      	cmp	r4, #0
   27096:	db07      	blt.n	270a8 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   27098:	42a8      	cmp	r0, r5
   2709a:	d305      	bcc.n	270a8 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2709c:	442c      	add	r4, r5
	    len > flash_size ||
   2709e:	4284      	cmp	r4, r0
   270a0:	bf8c      	ite	hi
   270a2:	2000      	movhi	r0, #0
   270a4:	2001      	movls	r0, #1
}
   270a6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   270a8:	2000      	movs	r0, #0
   270aa:	e7fc      	b.n	270a6 <is_regular_addr_valid+0x20>

000270ac <erase_op>:
{
   270ac:	b570      	push	{r4, r5, r6, lr}
   270ae:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   270b0:	f000 f923 	bl	272fa <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   270b4:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   270b6:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   270b8:	b10b      	cbz	r3, 270be <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   270ba:	f7f7 fda9 	bl	1ec10 <nrf_flash_sync_get_timestamp_begin>
{
   270be:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   270c0:	6860      	ldr	r0, [r4, #4]
   270c2:	f7f8 faf1 	bl	1f6a8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   270c6:	68a3      	ldr	r3, [r4, #8]
   270c8:	1b5b      	subs	r3, r3, r5
   270ca:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   270cc:	6863      	ldr	r3, [r4, #4]
   270ce:	442b      	add	r3, r5
   270d0:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   270d2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   270d4:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   270d6:	b943      	cbnz	r3, 270ea <erase_op+0x3e>
	} while (e_ctx->len > 0);
   270d8:	68a3      	ldr	r3, [r4, #8]
   270da:	2b00      	cmp	r3, #0
   270dc:	d1f0      	bne.n	270c0 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   270de:	68a0      	ldr	r0, [r4, #8]
   270e0:	3800      	subs	r0, #0
   270e2:	bf18      	it	ne
   270e4:	2001      	movne	r0, #1
}
   270e6:	4240      	negs	r0, r0
   270e8:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   270ea:	4630      	mov	r0, r6
   270ec:	f7db fc30 	bl	2950 <nrf_flash_sync_check_time_limit>
   270f0:	2800      	cmp	r0, #0
   270f2:	d0f1      	beq.n	270d8 <erase_op+0x2c>
   270f4:	e7f3      	b.n	270de <erase_op+0x32>

000270f6 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   270f6:	2000      	movs	r0, #0
   270f8:	f7ea bd9c 	b.w	11c34 <ticker_is_initialized>

000270fc <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   270fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27100:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   27102:	6883      	ldr	r3, [r0, #8]
{
   27104:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   27106:	695b      	ldr	r3, [r3, #20]
   27108:	4669      	mov	r1, sp
{
   2710a:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2710c:	aa01      	add	r2, sp, #4
   2710e:	4798      	blx	r3

	while (layout_size--) {
   27110:	e9dd 1000 	ldrd	r1, r0, [sp]
   27114:	2300      	movs	r3, #0
   27116:	3801      	subs	r0, #1
	off_t end = 0;
   27118:	461d      	mov	r5, r3
	off_t group_offs = 0;
   2711a:	469e      	mov	lr, r3
	size_t page_count = 0;
   2711c:	469c      	mov	ip, r3
	while (layout_size--) {
   2711e:	1c42      	adds	r2, r0, #1
   27120:	d102      	bne.n	27128 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   27122:	f06f 0015 	mvn.w	r0, #21
   27126:	e019      	b.n	2715c <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   27128:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   2712a:	b1d7      	cbz	r7, 27162 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   2712c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   27130:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   27134:	42a5      	cmp	r5, r4
   27136:	f100 30ff 	add.w	r0, r0, #4294967295
   2713a:	dd17      	ble.n	2716c <flash_get_page_info+0x70>
   2713c:	b103      	cbz	r3, 27140 <flash_get_page_info+0x44>
   2713e:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   27140:	9b00      	ldr	r3, [sp, #0]
   27142:	685b      	ldr	r3, [r3, #4]
   27144:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   27146:	b177      	cbz	r7, 27166 <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   27148:	eba4 040e 	sub.w	r4, r4, lr
   2714c:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   27150:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   27154:	4464      	add	r4, ip
			info->start_offset = group_offs +
   27156:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   27158:	60b4      	str	r4, [r6, #8]
			return 0;
   2715a:	2000      	movs	r0, #0
}
   2715c:	b002      	add	sp, #8
   2715e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   27162:	4415      	add	r5, r2
   27164:	e7e6      	b.n	27134 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   27166:	eba4 040c 	sub.w	r4, r4, ip
   2716a:	e7f1      	b.n	27150 <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   2716c:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2716e:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   27170:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   27174:	3108      	adds	r1, #8
   27176:	2301      	movs	r3, #1
   27178:	e7d1      	b.n	2711e <flash_get_page_info+0x22>

0002717a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2717a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   2717c:	2201      	movs	r2, #1
   2717e:	f7ff bfbd 	b.w	270fc <flash_get_page_info>

00027182 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   27182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   27186:	6883      	ldr	r3, [r0, #8]
{
   27188:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2718a:	695b      	ldr	r3, [r3, #20]
{
   2718c:	4688      	mov	r8, r1
   2718e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   27190:	a901      	add	r1, sp, #4
   27192:	aa02      	add	r2, sp, #8
   27194:	4798      	blx	r3
	off_t off = 0;
   27196:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   27198:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2719a:	4625      	mov	r5, r4
   2719c:	9b02      	ldr	r3, [sp, #8]
   2719e:	42ab      	cmp	r3, r5
   271a0:	d802      	bhi.n	271a8 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   271a2:	b006      	add	sp, #24
   271a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   271a8:	9f01      	ldr	r7, [sp, #4]
   271aa:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   271ae:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   271b0:	687b      	ldr	r3, [r7, #4]
   271b2:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   271b4:	683a      	ldr	r2, [r7, #0]
   271b6:	42b2      	cmp	r2, r6
   271b8:	eb0a 0306 	add.w	r3, sl, r6
   271bc:	d802      	bhi.n	271c4 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   271be:	3501      	adds	r5, #1
   271c0:	469a      	mov	sl, r3
   271c2:	e7eb      	b.n	2719c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   271c4:	4649      	mov	r1, r9
   271c6:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   271c8:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   271ca:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   271cc:	47c0      	blx	r8
   271ce:	2800      	cmp	r0, #0
   271d0:	d0e7      	beq.n	271a2 <flash_page_foreach+0x20>
			off += page_info.size;
   271d2:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   271d4:	3601      	adds	r6, #1
			off += page_info.size;
   271d6:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   271d8:	e7ec      	b.n	271b4 <flash_page_foreach+0x32>

000271da <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   271da:	68c2      	ldr	r2, [r0, #12]
{
   271dc:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   271de:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   271e2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   271e6:	2000      	movs	r0, #0
   271e8:	4770      	bx	lr

000271ea <uarte_nrfx_err_check>:
	return config->uarte_regs;
   271ea:	6843      	ldr	r3, [r0, #4]
   271ec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   271ee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   271f2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   271f6:	4770      	bx	lr

000271f8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   271f8:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   271fa:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   271fc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   271fe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27202:	b148      	cbz	r0, 27218 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   27204:	7c52      	ldrb	r2, [r2, #17]
   27206:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27208:	2000      	movs	r0, #0
   2720a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2720e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27212:	2201      	movs	r2, #1
   27214:	601a      	str	r2, [r3, #0]
	return 0;
   27216:	4770      	bx	lr
		return -1;
   27218:	f04f 30ff 	mov.w	r0, #4294967295
}
   2721c:	4770      	bx	lr

0002721e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2721e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   27220:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27222:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27226:	b938      	cbnz	r0, 27238 <is_tx_ready.isra.0+0x1a>
   27228:	799b      	ldrb	r3, [r3, #6]
   2722a:	b933      	cbnz	r3, 2723a <is_tx_ready.isra.0+0x1c>
   2722c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   27230:	3800      	subs	r0, #0
   27232:	bf18      	it	ne
   27234:	2001      	movne	r0, #1
   27236:	4770      	bx	lr
   27238:	2001      	movs	r0, #1
}
   2723a:	4770      	bx	lr

0002723c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2723c:	6843      	ldr	r3, [r0, #4]
   2723e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   27240:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   27244:	05d2      	lsls	r2, r2, #23
   27246:	d518      	bpl.n	2727a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27248:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2724c:	b1aa      	cbz	r2, 2727a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2724e:	f04f 0120 	mov.w	r1, #32
   27252:	f3ef 8211 	mrs	r2, BASEPRI
   27256:	f381 8811 	msr	BASEPRI, r1
   2725a:	f3bf 8f6f 	isb	sy
   2725e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   27262:	b131      	cbz	r1, 27272 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27264:	2100      	movs	r1, #0
   27266:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2726a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2726e:	2101      	movs	r1, #1
   27270:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   27272:	f382 8811 	msr	BASEPRI, r2
   27276:	f3bf 8f6f 	isb	sy
}
   2727a:	4770      	bx	lr

0002727c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2727c:	4700      	bx	r0

0002727e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2727e:	f000 bba4 	b.w	279ca <z_impl_k_busy_wait>

00027282 <nrfx_clock_enable>:
{
   27282:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   27284:	2000      	movs	r0, #0
   27286:	f7e0 fa41 	bl	770c <arch_irq_is_enabled>
   2728a:	b918      	cbnz	r0, 27294 <nrfx_clock_enable+0x12>
}
   2728c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   27290:	f7e0 ba18 	b.w	76c4 <arch_irq_enable>
   27294:	bd08      	pop	{r3, pc}

00027296 <nrfx_clock_start>:
    switch (domain)
   27296:	b110      	cbz	r0, 2729e <nrfx_clock_start+0x8>
   27298:	2801      	cmp	r0, #1
   2729a:	d01d      	beq.n	272d8 <nrfx_clock_start+0x42>
   2729c:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2729e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   272a2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   272a6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   272aa:	03c9      	lsls	r1, r1, #15
   272ac:	d512      	bpl.n	272d4 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   272ae:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   272b2:	2a01      	cmp	r2, #1
   272b4:	d10e      	bne.n	272d4 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   272b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   272ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   272be:	2200      	movs	r2, #0
   272c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   272c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   272c8:	2202      	movs	r2, #2
   272ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   272ce:	2201      	movs	r2, #1
   272d0:	609a      	str	r2, [r3, #8]
}
   272d2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   272d4:	2200      	movs	r2, #0
   272d6:	e7ee      	b.n	272b6 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   272d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   272dc:	2200      	movs	r2, #0
   272de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   272e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   272e6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   272ea:	6018      	str	r0, [r3, #0]
}
   272ec:	4770      	bx	lr

000272ee <nrfx_nvmc_flash_size_get>:
   272ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   272f2:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   272f4:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   272f6:	4350      	muls	r0, r2
   272f8:	4770      	bx	lr

000272fa <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   272fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   272fe:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   27300:	4770      	bx	lr

00027302 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   27302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27306:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   27308:	4770      	bx	lr

0002730a <nrf_gpio_pin_set>:
{
   2730a:	b507      	push	{r0, r1, r2, lr}
   2730c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2730e:	a801      	add	r0, sp, #4
   27310:	f7f8 fa32 	bl	1f778 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   27314:	9a01      	ldr	r2, [sp, #4]
   27316:	2301      	movs	r3, #1
   27318:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2731a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2731e:	b003      	add	sp, #12
   27320:	f85d fb04 	ldr.w	pc, [sp], #4

00027324 <nrf_gpio_pin_clear>:
{
   27324:	b507      	push	{r0, r1, r2, lr}
   27326:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27328:	a801      	add	r0, sp, #4
   2732a:	f7f8 fa25 	bl	1f778 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2732e:	9a01      	ldr	r2, [sp, #4]
   27330:	2301      	movs	r3, #1
   27332:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   27334:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   27338:	b003      	add	sp, #12
   2733a:	f85d fb04 	ldr.w	pc, [sp], #4

0002733e <transfer_byte>:
{
   2733e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   27340:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   27344:	698a      	ldr	r2, [r1, #24]
   27346:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   27348:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2734c:	6a0b      	ldr	r3, [r1, #32]
   2734e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   27350:	bf3e      	ittt	cc
   27352:	694a      	ldrcc	r2, [r1, #20]
   27354:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   27358:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2735a:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2735c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   27360:	1c53      	adds	r3, r2, #1
   27362:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   27364:	3202      	adds	r2, #2
    if (p_cb->abort)
   27366:	b13c      	cbz	r4, 27378 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   27368:	690c      	ldr	r4, [r1, #16]
   2736a:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2736c:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2736e:	bf38      	it	cc
   27370:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   27372:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   27374:	bf88      	it	hi
   27376:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   27378:	690d      	ldr	r5, [r1, #16]
   2737a:	4295      	cmp	r5, r2
   2737c:	d905      	bls.n	2738a <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2737e:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   27380:	5c9b      	ldrb	r3, [r3, r2]
   27382:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   27386:	2001      	movs	r0, #1
   27388:	e00a      	b.n	273a0 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2738a:	698c      	ldr	r4, [r1, #24]
   2738c:	4294      	cmp	r4, r2
   2738e:	d901      	bls.n	27394 <transfer_byte+0x56>
   27390:	7fcb      	ldrb	r3, [r1, #31]
   27392:	e7f6      	b.n	27382 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   27394:	42ab      	cmp	r3, r5
   27396:	d3f6      	bcc.n	27386 <transfer_byte+0x48>
   27398:	42a3      	cmp	r3, r4
   2739a:	bf2c      	ite	cs
   2739c:	2000      	movcs	r0, #0
   2739e:	2001      	movcc	r0, #1
}
   273a0:	b003      	add	sp, #12
   273a2:	bd30      	pop	{r4, r5, pc}

000273a4 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   273a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   273a6:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   273a8:	6b48      	ldr	r0, [r1, #52]	; 0x34
   273aa:	4298      	cmp	r0, r3
{
   273ac:	b510      	push	{r4, lr}
   273ae:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   273b2:	d205      	bcs.n	273c0 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   273b4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   273b6:	5c09      	ldrb	r1, [r1, r0]
   273b8:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   273bc:	4618      	mov	r0, r3
}
   273be:	e004      	b.n	273ca <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   273c0:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   273c4:	b110      	cbz	r0, 273cc <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   273c6:	61d3      	str	r3, [r2, #28]
            return false;
   273c8:	2000      	movs	r0, #0
}
   273ca:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   273cc:	6a0c      	ldr	r4, [r1, #32]
   273ce:	0664      	lsls	r4, r4, #25
   273d0:	d503      	bpl.n	273da <twi_send_byte+0x36>
   273d2:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   273d4:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   273d8:	e7f7      	b.n	273ca <twi_send_byte+0x26>
   273da:	6153      	str	r3, [r2, #20]
   273dc:	e7ee      	b.n	273bc <twi_send_byte+0x18>

000273de <twi_transfer>:
{
   273de:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   273e0:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   273e4:	4604      	mov	r4, r0
   273e6:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   273e8:	b12e      	cbz	r6, 273f6 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   273ea:	2300      	movs	r3, #0
   273ec:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   273f0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   273f4:	2601      	movs	r6, #1
    if (p_cb->error)
   273f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   273fa:	b320      	cbz	r0, 27446 <twi_transfer+0x68>
   273fc:	2300      	movs	r3, #0
   273fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   27402:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   27406:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   2740a:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   2740e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   27412:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   27416:	2e00      	cmp	r6, #0
   27418:	d068      	beq.n	274ec <twi_transfer+0x10e>
        if (!p_cb->error)
   2741a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   2741e:	2300      	movs	r3, #0
   27420:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   27424:	bb88      	cbnz	r0, 2748a <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   27426:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27428:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   2742a:	429a      	cmp	r2, r3
        return false;
   2742c:	bf1c      	itt	ne
   2742e:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   27430:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   27432:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   27436:	bf1c      	itt	ne
   27438:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2743c:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   27440:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   27444:	e022      	b.n	2748c <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27446:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2744a:	b142      	cbz	r2, 2745e <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2744c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   27450:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27454:	2301      	movs	r3, #1
   27456:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   27458:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   2745c:	e7db      	b.n	27416 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2745e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   27462:	b1a3      	cbz	r3, 2748e <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27464:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   27468:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   2746c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2746e:	3301      	adds	r3, #1
   27470:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27472:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   27476:	b113      	cbz	r3, 2747e <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27478:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2747c:	e7e8      	b.n	27450 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   2747e:	4629      	mov	r1, r5
   27480:	4620      	mov	r0, r4
   27482:	f7ff ff8f 	bl	273a4 <twi_send_byte>
   27486:	2800      	cmp	r0, #0
   27488:	d1c5      	bne.n	27416 <twi_transfer+0x38>
                    return false;
   2748a:	2000      	movs	r0, #0
}
   2748c:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2748e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   27492:	2a00      	cmp	r2, #0
   27494:	d0bf      	beq.n	27416 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27496:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2749a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2749e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   274a2:	b112      	cbz	r2, 274aa <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   274a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   274a8:	e7d2      	b.n	27450 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   274aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   274ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   274ae:	4293      	cmp	r3, r2
   274b0:	d2b1      	bcs.n	27416 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   274b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   274b4:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   274b8:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   274ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   274bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   274be:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   274c0:	1e51      	subs	r1, r2, #1
   274c2:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   274c4:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   274c6:	d108      	bne.n	274da <twi_transfer+0xfc>
   274c8:	6a29      	ldr	r1, [r5, #32]
   274ca:	0649      	lsls	r1, r1, #25
   274cc:	d410      	bmi.n	274f0 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   274ce:	2302      	movs	r3, #2
   274d0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   274d4:	2301      	movs	r3, #1
   274d6:	6223      	str	r3, [r4, #32]
   274d8:	e79d      	b.n	27416 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   274da:	4293      	cmp	r3, r2
   274dc:	d1fa      	bne.n	274d4 <twi_transfer+0xf6>
   274de:	6a2b      	ldr	r3, [r5, #32]
   274e0:	065b      	lsls	r3, r3, #25
   274e2:	d598      	bpl.n	27416 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   274e4:	2302      	movs	r3, #2
   274e6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   274ea:	e7cf      	b.n	2748c <twi_transfer+0xae>
    return true;
   274ec:	2001      	movs	r0, #1
   274ee:	e7cd      	b.n	2748c <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   274f0:	4293      	cmp	r3, r2
   274f2:	d1ef      	bne.n	274d4 <twi_transfer+0xf6>
   274f4:	e7f6      	b.n	274e4 <twi_transfer+0x106>

000274f6 <arch_system_halt>:
	__asm__ volatile(
   274f6:	f04f 0220 	mov.w	r2, #32
   274fa:	f3ef 8311 	mrs	r3, BASEPRI
   274fe:	f382 8811 	msr	BASEPRI, r2
   27502:	f3bf 8f6f 	isb	sy
	for (;;) {
   27506:	e7fe      	b.n	27506 <arch_system_halt+0x10>

00027508 <k_heap_init>:
{
   27508:	b410      	push	{r4}
   2750a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2750e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27512:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27514:	f7fb ba56 	b.w	229c4 <sys_heap_init>

00027518 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   27518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2751c:	b085      	sub	sp, #20
   2751e:	4606      	mov	r6, r0
   27520:	4688      	mov	r8, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   27522:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   27526:	4691      	mov	r9, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   27528:	f000 fb16 	bl	27b58 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2752c:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   27530:	4605      	mov	r5, r0
   27532:	460f      	mov	r7, r1
   27534:	f04f 0320 	mov.w	r3, #32
   27538:	f3ef 8411 	mrs	r4, BASEPRI
   2753c:	f383 8811 	msr	BASEPRI, r3
   27540:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27544:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   27548:	464a      	mov	r2, r9
   2754a:	4641      	mov	r1, r8
   2754c:	4630      	mov	r0, r6
   2754e:	f7fb f9be 	bl	228ce <sys_heap_aligned_alloc>
   27552:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   27554:	f7f9 fe48 	bl	211e8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   27558:	9b03      	ldr	r3, [sp, #12]
   2755a:	b13b      	cbz	r3, 2756c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2755c:	f384 8811 	msr	BASEPRI, r4
   27560:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27564:	4618      	mov	r0, r3
   27566:	b005      	add	sp, #20
   27568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2756c:	1a28      	subs	r0, r5, r0
   2756e:	eb67 0101 	sbc.w	r1, r7, r1
   27572:	2801      	cmp	r0, #1
   27574:	f171 0200 	sbcs.w	r2, r1, #0
   27578:	dbf0      	blt.n	2755c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2757a:	e9cd 0100 	strd	r0, r1, [sp]
   2757e:	465a      	mov	r2, fp
   27580:	4621      	mov	r1, r4
   27582:	4650      	mov	r0, sl
   27584:	f7f9 fa40 	bl	20a08 <z_pend_curr>
	__asm__ volatile(
   27588:	f04f 0320 	mov.w	r3, #32
   2758c:	f3ef 8411 	mrs	r4, BASEPRI
   27590:	f383 8811 	msr	BASEPRI, r3
   27594:	f3bf 8f6f 	isb	sy
   27598:	e7d6      	b.n	27548 <k_heap_aligned_alloc+0x30>

0002759a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2759a:	b538      	push	{r3, r4, r5, lr}
   2759c:	4604      	mov	r4, r0
   2759e:	f04f 0320 	mov.w	r3, #32
   275a2:	f3ef 8511 	mrs	r5, BASEPRI
   275a6:	f383 8811 	msr	BASEPRI, r3
   275aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   275ae:	f7fb f941 	bl	22834 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   275b2:	f104 000c 	add.w	r0, r4, #12
   275b6:	f000 f9e2 	bl	2797e <z_unpend_all>
   275ba:	b130      	cbz	r0, 275ca <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   275bc:	4629      	mov	r1, r5
   275be:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   275c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   275c6:	f7f8 bfdf 	b.w	20588 <z_reschedule>
	__asm__ volatile(
   275ca:	f385 8811 	msr	BASEPRI, r5
   275ce:	f3bf 8f6f 	isb	sy
}
   275d2:	bd38      	pop	{r3, r4, r5, pc}

000275d4 <k_mem_slab_init>:
{
   275d4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   275d6:	2400      	movs	r4, #0
   275d8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   275da:	ea41 0402 	orr.w	r4, r1, r2
   275de:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   275e2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   275e6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   275e8:	d10c      	bne.n	27604 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   275ea:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   275ec:	42a3      	cmp	r3, r4
   275ee:	d103      	bne.n	275f8 <k_mem_slab_init+0x24>
   275f0:	e9c0 0000 	strd	r0, r0, [r0]
}
   275f4:	2000      	movs	r0, #0
}
   275f6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   275f8:	6945      	ldr	r5, [r0, #20]
   275fa:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   275fc:	3401      	adds	r4, #1
		slab->free_list = p;
   275fe:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   27600:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   27602:	e7f3      	b.n	275ec <k_mem_slab_init+0x18>
		return -EINVAL;
   27604:	f06f 0015 	mvn.w	r0, #21
	return rc;
   27608:	e7f5      	b.n	275f6 <k_mem_slab_init+0x22>

0002760a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2760a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2760e:	428b      	cmp	r3, r1
   27610:	d001      	beq.n	27616 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   27612:	f7f9 ba0d 	b.w	20a30 <z_set_prio>
}
   27616:	2000      	movs	r0, #0
   27618:	4770      	bx	lr

0002761a <z_impl_k_mutex_init>:
{
   2761a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2761c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2761e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   27622:	e9c3 3300 	strd	r3, r3, [r3]
}
   27626:	4770      	bx	lr

00027628 <queue_insert>:
{
   27628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2762c:	4699      	mov	r9, r3
   2762e:	4604      	mov	r4, r0
   27630:	f89d 3020 	ldrb.w	r3, [sp, #32]
   27634:	460d      	mov	r5, r1
   27636:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27638:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2763c:	f04f 0220 	mov.w	r2, #32
   27640:	f3ef 8711 	mrs	r7, BASEPRI
   27644:	f382 8811 	msr	BASEPRI, r2
   27648:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2764c:	b103      	cbz	r3, 27650 <queue_insert+0x28>
	return list->tail;
   2764e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   27650:	4630      	mov	r0, r6
   27652:	f000 f97b 	bl	2794c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   27656:	b160      	cbz	r0, 27672 <queue_insert+0x4a>
   27658:	2400      	movs	r4, #0
   2765a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   2765e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   27662:	f000 f906 	bl	27872 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   27666:	4630      	mov	r0, r6
   27668:	4639      	mov	r1, r7
   2766a:	f7f8 ff8d 	bl	20588 <z_reschedule>
	return 0;
   2766e:	2000      	movs	r0, #0
   27670:	e00c      	b.n	2768c <queue_insert+0x64>
	if (alloc) {
   27672:	f1b9 0f00 	cmp.w	r9, #0
   27676:	d01b      	beq.n	276b0 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   27678:	2108      	movs	r1, #8
   2767a:	f7f9 fec3 	bl	21404 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2767e:	b938      	cbnz	r0, 27690 <queue_insert+0x68>
	__asm__ volatile(
   27680:	f387 8811 	msr	BASEPRI, r7
   27684:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   27688:	f06f 000b 	mvn.w	r0, #11
}
   2768c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   27690:	2301      	movs	r3, #1
		anode->data = data;
   27692:	f8c0 8004 	str.w	r8, [r0, #4]
   27696:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27698:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2769a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2769e:	b95d      	cbnz	r5, 276b8 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   276a0:	6823      	ldr	r3, [r4, #0]
   276a2:	4313      	orrs	r3, r2
   276a4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   276a6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   276a8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   276aa:	b973      	cbnz	r3, 276ca <queue_insert+0xa2>
	list->tail = node;
   276ac:	6060      	str	r0, [r4, #4]
}
   276ae:	e00c      	b.n	276ca <queue_insert+0xa2>
	node->next_and_flags = flags;
   276b0:	f8c8 9000 	str.w	r9, [r8]
}
   276b4:	4640      	mov	r0, r8
   276b6:	e7ef      	b.n	27698 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   276b8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   276ba:	f033 0303 	bics.w	r3, r3, #3
   276be:	d110      	bne.n	276e2 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   276c0:	6002      	str	r2, [r0, #0]
	return list->tail;
   276c2:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   276c4:	b93a      	cbnz	r2, 276d6 <queue_insert+0xae>
	list->head = node;
   276c6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   276ca:	2104      	movs	r1, #4
   276cc:	f104 0010 	add.w	r0, r4, #16
   276d0:	f000 fbd7 	bl	27e82 <z_handle_obj_poll_events>
   276d4:	e7c7      	b.n	27666 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   276d6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   276d8:	f003 0303 	and.w	r3, r3, #3
   276dc:	4303      	orrs	r3, r0
   276de:	6013      	str	r3, [r2, #0]
   276e0:	e7e4      	b.n	276ac <queue_insert+0x84>
   276e2:	4313      	orrs	r3, r2
   276e4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   276e6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   276e8:	f003 0303 	and.w	r3, r3, #3
   276ec:	4303      	orrs	r3, r0
   276ee:	602b      	str	r3, [r5, #0]
}
   276f0:	e7eb      	b.n	276ca <queue_insert+0xa2>

000276f2 <z_queue_node_peek>:
{
   276f2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   276f4:	4604      	mov	r4, r0
   276f6:	b130      	cbz	r0, 27706 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   276f8:	6802      	ldr	r2, [r0, #0]
   276fa:	0793      	lsls	r3, r2, #30
   276fc:	d003      	beq.n	27706 <z_queue_node_peek+0x14>
		ret = anode->data;
   276fe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   27700:	b109      	cbz	r1, 27706 <z_queue_node_peek+0x14>
			k_free(anode);
   27702:	f000 fbcc 	bl	27e9e <k_free>
}
   27706:	4620      	mov	r0, r4
   27708:	bd10      	pop	{r4, pc}

0002770a <z_impl_k_queue_init>:
	list->head = NULL;
   2770a:	2300      	movs	r3, #0
	list->tail = NULL;
   2770c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   27710:	f100 0308 	add.w	r3, r0, #8
   27714:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   27718:	f100 0310 	add.w	r3, r0, #16
   2771c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   27720:	4770      	bx	lr

00027722 <k_queue_append>:
{
   27722:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   27724:	2301      	movs	r3, #1
   27726:	9300      	str	r3, [sp, #0]
   27728:	2300      	movs	r3, #0
{
   2772a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2772c:	4619      	mov	r1, r3
   2772e:	f7ff ff7b 	bl	27628 <queue_insert>
}
   27732:	b003      	add	sp, #12
   27734:	f85d fb04 	ldr.w	pc, [sp], #4

00027738 <k_queue_prepend>:
{
   27738:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2773a:	2300      	movs	r3, #0
{
   2773c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2773e:	9300      	str	r3, [sp, #0]
   27740:	4619      	mov	r1, r3
   27742:	f7ff ff71 	bl	27628 <queue_insert>
}
   27746:	b003      	add	sp, #12
   27748:	f85d fb04 	ldr.w	pc, [sp], #4

0002774c <k_queue_append_list>:
{
   2774c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27750:	4605      	mov	r5, r0
   27752:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   27754:	460c      	mov	r4, r1
   27756:	b391      	cbz	r1, 277be <k_queue_append_list+0x72>
   27758:	b38a      	cbz	r2, 277be <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2775a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2775e:	f04f 0320 	mov.w	r3, #32
   27762:	f3ef 8811 	mrs	r8, BASEPRI
   27766:	f383 8811 	msr	BASEPRI, r3
   2776a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2776e:	4638      	mov	r0, r7
   27770:	f000 f8ec 	bl	2794c <z_unpend_first_thread>
   27774:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   27778:	b920      	cbnz	r0, 27784 <k_queue_append_list+0x38>
	return list->tail;
   2777a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2777c:	b9ca      	cbnz	r2, 277b2 <k_queue_append_list+0x66>
	list->head = node;
   2777e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   27780:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   27782:	e00a      	b.n	2779a <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   27784:	6144      	str	r4, [r0, #20]
   27786:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   2778a:	f000 f872 	bl	27872 <z_ready_thread>
		head = *(void **)head;
   2778e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   27790:	4638      	mov	r0, r7
   27792:	f000 f8db 	bl	2794c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   27796:	2c00      	cmp	r4, #0
   27798:	d1ee      	bne.n	27778 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2779a:	2104      	movs	r1, #4
   2779c:	f105 0010 	add.w	r0, r5, #16
   277a0:	f000 fb6f 	bl	27e82 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   277a4:	4638      	mov	r0, r7
   277a6:	4641      	mov	r1, r8
   277a8:	f7f8 feee 	bl	20588 <z_reschedule>
	return 0;
   277ac:	2000      	movs	r0, #0
}
   277ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   277b2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   277b4:	f003 0303 	and.w	r3, r3, #3
   277b8:	431c      	orrs	r4, r3
   277ba:	6014      	str	r4, [r2, #0]
}
   277bc:	e7e0      	b.n	27780 <k_queue_append_list+0x34>
		return -EINVAL;
   277be:	f06f 0015 	mvn.w	r0, #21
   277c2:	e7f4      	b.n	277ae <k_queue_append_list+0x62>

000277c4 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   277c4:	f990 000e 	ldrsb.w	r0, [r0, #14]
   277c8:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   277cc:	4298      	cmp	r0, r3
   277ce:	bfac      	ite	ge
   277d0:	2000      	movge	r0, #0
   277d2:	2001      	movlt	r0, #1
   277d4:	4770      	bx	lr

000277d6 <z_unpend_thread_no_timeout>:
{
   277d6:	b510      	push	{r4, lr}
   277d8:	f04f 0320 	mov.w	r3, #32
   277dc:	f3ef 8411 	mrs	r4, BASEPRI
   277e0:	f383 8811 	msr	BASEPRI, r3
   277e4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   277e8:	f000 f81b 	bl	27822 <unpend_thread_no_timeout>
	__asm__ volatile(
   277ec:	f384 8811 	msr	BASEPRI, r4
   277f0:	f3bf 8f6f 	isb	sy
}
   277f4:	bd10      	pop	{r4, pc}

000277f6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   277f6:	4603      	mov	r3, r0
   277f8:	b920      	cbnz	r0, 27804 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   277fa:	f3ef 8205 	mrs	r2, IPSR
   277fe:	b90a      	cbnz	r2, 27804 <z_reschedule_irqlock+0xe>
   27800:	f7df bf0a 	b.w	7618 <arch_swap>
   27804:	f383 8811 	msr	BASEPRI, r3
   27808:	f3bf 8f6f 	isb	sy
}
   2780c:	4770      	bx	lr

0002780e <z_reschedule_unlocked>:
	__asm__ volatile(
   2780e:	f04f 0320 	mov.w	r3, #32
   27812:	f3ef 8011 	mrs	r0, BASEPRI
   27816:	f383 8811 	msr	BASEPRI, r3
   2781a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2781e:	f7ff bfea 	b.w	277f6 <z_reschedule_irqlock>

00027822 <unpend_thread_no_timeout>:
{
   27822:	4601      	mov	r1, r0
   27824:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   27826:	6880      	ldr	r0, [r0, #8]
   27828:	f7f8 fed4 	bl	205d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2782c:	7b4b      	ldrb	r3, [r1, #13]
   2782e:	f023 0302 	bic.w	r3, r3, #2
   27832:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   27834:	2300      	movs	r3, #0
   27836:	608b      	str	r3, [r1, #8]
}
   27838:	bd08      	pop	{r3, pc}

0002783a <z_unpend_thread>:
{
   2783a:	b538      	push	{r3, r4, r5, lr}
   2783c:	4604      	mov	r4, r0
   2783e:	f04f 0320 	mov.w	r3, #32
   27842:	f3ef 8511 	mrs	r5, BASEPRI
   27846:	f383 8811 	msr	BASEPRI, r3
   2784a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2784e:	f7ff ffe8 	bl	27822 <unpend_thread_no_timeout>
	__asm__ volatile(
   27852:	f385 8811 	msr	BASEPRI, r5
   27856:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2785a:	f104 0018 	add.w	r0, r4, #24
}
   2785e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27862:	f000 b933 	b.w	27acc <z_abort_timeout>

00027866 <z_priq_dumb_best>:
{
   27866:	4603      	mov	r3, r0
	return list->head == list;
   27868:	6800      	ldr	r0, [r0, #0]
}
   2786a:	4283      	cmp	r3, r0
   2786c:	bf08      	it	eq
   2786e:	2000      	moveq	r0, #0
   27870:	4770      	bx	lr

00027872 <z_ready_thread>:
{
   27872:	b510      	push	{r4, lr}
	__asm__ volatile(
   27874:	f04f 0320 	mov.w	r3, #32
   27878:	f3ef 8411 	mrs	r4, BASEPRI
   2787c:	f383 8811 	msr	BASEPRI, r3
   27880:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   27884:	f7f8 ff00 	bl	20688 <ready_thread>
	__asm__ volatile(
   27888:	f384 8811 	msr	BASEPRI, r4
   2788c:	f3bf 8f6f 	isb	sy
}
   27890:	bd10      	pop	{r4, pc}

00027892 <z_thread_timeout>:
{
   27892:	b570      	push	{r4, r5, r6, lr}
   27894:	4604      	mov	r4, r0
	__asm__ volatile(
   27896:	f04f 0320 	mov.w	r3, #32
   2789a:	f3ef 8611 	mrs	r6, BASEPRI
   2789e:	f383 8811 	msr	BASEPRI, r3
   278a2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   278a6:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   278aa:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   278ae:	b113      	cbz	r3, 278b6 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   278b0:	4628      	mov	r0, r5
   278b2:	f7ff ffb6 	bl	27822 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   278b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   278ba:	f023 0314 	bic.w	r3, r3, #20
   278be:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   278c2:	4628      	mov	r0, r5
   278c4:	f7f8 fee0 	bl	20688 <ready_thread>
	__asm__ volatile(
   278c8:	f386 8811 	msr	BASEPRI, r6
   278cc:	f3bf 8f6f 	isb	sy
}
   278d0:	bd70      	pop	{r4, r5, r6, pc}

000278d2 <add_to_waitq_locked>:
{
   278d2:	b538      	push	{r3, r4, r5, lr}
   278d4:	4604      	mov	r4, r0
   278d6:	460d      	mov	r5, r1
	unready_thread(thread);
   278d8:	f7f9 f856 	bl	20988 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   278dc:	7b63      	ldrb	r3, [r4, #13]
   278de:	f043 0302 	orr.w	r3, r3, #2
   278e2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   278e4:	b17d      	cbz	r5, 27906 <add_to_waitq_locked+0x34>
   278e6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   278e8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278ea:	429d      	cmp	r5, r3
   278ec:	d012      	beq.n	27914 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   278ee:	b18b      	cbz	r3, 27914 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   278f0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   278f4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   278f8:	4291      	cmp	r1, r2
   278fa:	dd05      	ble.n	27908 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   278fc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   278fe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   27902:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27904:	605c      	str	r4, [r3, #4]
}
   27906:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   27908:	6869      	ldr	r1, [r5, #4]
   2790a:	428b      	cmp	r3, r1
   2790c:	d002      	beq.n	27914 <add_to_waitq_locked+0x42>
   2790e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27910:	2b00      	cmp	r3, #0
   27912:	d1ef      	bne.n	278f4 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   27914:	686b      	ldr	r3, [r5, #4]
   27916:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   27918:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2791a:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   2791c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2791e:	606c      	str	r4, [r5, #4]
}
   27920:	e7f1      	b.n	27906 <add_to_waitq_locked+0x34>

00027922 <z_unpend1_no_timeout>:
{
   27922:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27924:	f04f 0320 	mov.w	r3, #32
   27928:	f3ef 8511 	mrs	r5, BASEPRI
   2792c:	f383 8811 	msr	BASEPRI, r3
   27930:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   27934:	f7ff ff97 	bl	27866 <z_priq_dumb_best>
		if (thread != NULL) {
   27938:	4604      	mov	r4, r0
   2793a:	b108      	cbz	r0, 27940 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2793c:	f7ff ff71 	bl	27822 <unpend_thread_no_timeout>
	__asm__ volatile(
   27940:	f385 8811 	msr	BASEPRI, r5
   27944:	f3bf 8f6f 	isb	sy
}
   27948:	4620      	mov	r0, r4
   2794a:	bd38      	pop	{r3, r4, r5, pc}

0002794c <z_unpend_first_thread>:
{
   2794c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2794e:	f04f 0320 	mov.w	r3, #32
   27952:	f3ef 8511 	mrs	r5, BASEPRI
   27956:	f383 8811 	msr	BASEPRI, r3
   2795a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2795e:	f7ff ff82 	bl	27866 <z_priq_dumb_best>
		if (thread != NULL) {
   27962:	4604      	mov	r4, r0
   27964:	b128      	cbz	r0, 27972 <z_unpend_first_thread+0x26>
			unpend_thread_no_timeout(thread);
   27966:	f7ff ff5c 	bl	27822 <unpend_thread_no_timeout>
   2796a:	f104 0018 	add.w	r0, r4, #24
   2796e:	f000 f8ad 	bl	27acc <z_abort_timeout>
	__asm__ volatile(
   27972:	f385 8811 	msr	BASEPRI, r5
   27976:	f3bf 8f6f 	isb	sy
}
   2797a:	4620      	mov	r0, r4
   2797c:	bd38      	pop	{r3, r4, r5, pc}

0002797e <z_unpend_all>:
{
   2797e:	b538      	push	{r3, r4, r5, lr}
   27980:	4605      	mov	r5, r0
	int need_sched = 0;
   27982:	2000      	movs	r0, #0
	return list->head == list;
   27984:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27986:	42a5      	cmp	r5, r4
   27988:	d000      	beq.n	2798c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2798a:	b904      	cbnz	r4, 2798e <z_unpend_all+0x10>
}
   2798c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2798e:	4620      	mov	r0, r4
   27990:	f7ff ff53 	bl	2783a <z_unpend_thread>
		z_ready_thread(thread);
   27994:	4620      	mov	r0, r4
   27996:	f7ff ff6c 	bl	27872 <z_ready_thread>
		need_sched = 1;
   2799a:	2001      	movs	r0, #1
   2799c:	e7f2      	b.n	27984 <z_unpend_all+0x6>

0002799e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2799e:	b15a      	cbz	r2, 279b8 <z_impl_k_sem_init+0x1a>
   279a0:	428a      	cmp	r2, r1
   279a2:	d309      	bcc.n	279b8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   279a4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   279a8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   279ac:	e9c0 0000 	strd	r0, r0, [r0]
   279b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   279b4:	2000      	movs	r0, #0
   279b6:	4770      	bx	lr
		return -EINVAL;
   279b8:	f06f 0015 	mvn.w	r0, #21
}
   279bc:	4770      	bx	lr

000279be <k_is_in_isr>:
   279be:	f3ef 8005 	mrs	r0, IPSR
}
   279c2:	3800      	subs	r0, #0
   279c4:	bf18      	it	ne
   279c6:	2001      	movne	r0, #1
   279c8:	4770      	bx	lr

000279ca <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   279ca:	b108      	cbz	r0, 279d0 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   279cc:	f7e0 bb6e 	b.w	80ac <arch_busy_wait>
}
   279d0:	4770      	bx	lr

000279d2 <z_impl_k_thread_name_set>:
}
   279d2:	f06f 0046 	mvn.w	r0, #70	; 0x46
   279d6:	4770      	bx	lr

000279d8 <k_thread_name_get>:
}
   279d8:	2000      	movs	r0, #0
   279da:	4770      	bx	lr

000279dc <k_work_submit_to_queue>:
{
   279dc:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   279de:	f101 0308 	add.w	r3, r1, #8
   279e2:	f3bf 8f5b 	dmb	ish
   279e6:	e853 2f00 	ldrex	r2, [r3]
   279ea:	f042 0c01 	orr.w	ip, r2, #1
   279ee:	e843 ce00 	strex	lr, ip, [r3]
   279f2:	f1be 0f00 	cmp.w	lr, #0
   279f6:	d1f6      	bne.n	279e6 <k_work_submit_to_queue+0xa>
   279f8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   279fc:	07d3      	lsls	r3, r2, #31
   279fe:	d403      	bmi.n	27a08 <k_work_submit_to_queue+0x2c>
}
   27a00:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   27a04:	f7ff be8d 	b.w	27722 <k_queue_append>
}
   27a08:	f85d fb04 	ldr.w	pc, [sp], #4

00027a0c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   27a0c:	f1a0 0110 	sub.w	r1, r0, #16
   27a10:	6980      	ldr	r0, [r0, #24]
   27a12:	f7ff bfe3 	b.w	279dc <k_work_submit_to_queue>

00027a16 <work_cancel>:
{
   27a16:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27a18:	f3bf 8f5b 	dmb	ish
   27a1c:	6883      	ldr	r3, [r0, #8]
   27a1e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   27a22:	07db      	lsls	r3, r3, #31
{
   27a24:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   27a26:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   27a2a:	d532      	bpl.n	27a92 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   27a2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   27a2e:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   27a30:	2100      	movs	r1, #0
   27a32:	b913      	cbnz	r3, 27a3a <work_cancel+0x24>
			return -EINVAL;
   27a34:	f06f 0015 	mvn.w	r0, #21
}
   27a38:	bd70      	pop	{r4, r5, r6, pc}
   27a3a:	429c      	cmp	r4, r3
   27a3c:	d124      	bne.n	27a88 <work_cancel+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27a3e:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   27a40:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27a42:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   27a46:	b9b1      	cbnz	r1, 27a76 <work_cancel+0x60>
   27a48:	42b4      	cmp	r4, r6
	list->head = node;
   27a4a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   27a4c:	d100      	bne.n	27a50 <work_cancel+0x3a>
	list->tail = node;
   27a4e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27a50:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27a52:	f003 0303 	and.w	r3, r3, #3
   27a56:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   27a58:	2000      	movs	r0, #0
   27a5a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27a5c:	f3bf 8f5b 	dmb	ish
   27a60:	e855 3f00 	ldrex	r3, [r5]
   27a64:	f023 0301 	bic.w	r3, r3, #1
   27a68:	e845 3200 	strex	r2, r3, [r5]
   27a6c:	2a00      	cmp	r2, #0
   27a6e:	d1f7      	bne.n	27a60 <work_cancel+0x4a>
   27a70:	f3bf 8f5b 	dmb	ish
   27a74:	e7e0      	b.n	27a38 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27a76:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27a78:	f003 0303 	and.w	r3, r3, #3
   27a7c:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   27a7e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   27a80:	600b      	str	r3, [r1, #0]
	list->tail = node;
   27a82:	bf08      	it	eq
   27a84:	6051      	streq	r1, [r2, #4]
}
   27a86:	e7e3      	b.n	27a50 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27a88:	6818      	ldr	r0, [r3, #0]
   27a8a:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   27a8c:	f020 0303 	bic.w	r3, r0, #3
   27a90:	e7cf      	b.n	27a32 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   27a92:	3010      	adds	r0, #16
   27a94:	f000 f81a 	bl	27acc <z_abort_timeout>
		if (err) {
   27a98:	2800      	cmp	r0, #0
   27a9a:	d0dd      	beq.n	27a58 <work_cancel+0x42>
			return -EALREADY;
   27a9c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   27aa0:	e7ca      	b.n	27a38 <work_cancel+0x22>

00027aa2 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   27aa2:	b510      	push	{r4, lr}
	__asm__ volatile(
   27aa4:	f04f 0220 	mov.w	r2, #32
   27aa8:	f3ef 8411 	mrs	r4, BASEPRI
   27aac:	f382 8811 	msr	BASEPRI, r2
   27ab0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   27ab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   27ab6:	b133      	cbz	r3, 27ac6 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   27ab8:	f7ff ffad 	bl	27a16 <work_cancel>
	__asm__ volatile(
   27abc:	f384 8811 	msr	BASEPRI, r4
   27ac0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   27ac4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27ac6:	f06f 0015 	mvn.w	r0, #21
   27aca:	e7f7      	b.n	27abc <k_delayed_work_cancel+0x1a>

00027acc <z_abort_timeout>:
{
   27acc:	b510      	push	{r4, lr}
	__asm__ volatile(
   27ace:	f04f 0220 	mov.w	r2, #32
   27ad2:	f3ef 8411 	mrs	r4, BASEPRI
   27ad6:	f382 8811 	msr	BASEPRI, r2
   27ada:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   27ade:	6803      	ldr	r3, [r0, #0]
   27ae0:	b13b      	cbz	r3, 27af2 <z_abort_timeout+0x26>
			remove_timeout(to);
   27ae2:	f7f9 fa8b 	bl	20ffc <remove_timeout>
			ret = 0;
   27ae6:	2000      	movs	r0, #0
	__asm__ volatile(
   27ae8:	f384 8811 	msr	BASEPRI, r4
   27aec:	f3bf 8f6f 	isb	sy
}
   27af0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27af2:	f06f 0015 	mvn.w	r0, #21
   27af6:	e7f7      	b.n	27ae8 <z_abort_timeout+0x1c>

00027af8 <z_get_next_timeout_expiry>:
{
   27af8:	b510      	push	{r4, lr}
	__asm__ volatile(
   27afa:	f04f 0320 	mov.w	r3, #32
   27afe:	f3ef 8411 	mrs	r4, BASEPRI
   27b02:	f383 8811 	msr	BASEPRI, r3
   27b06:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   27b0a:	f7f9 fa4f 	bl	20fac <next_timeout>
	__asm__ volatile(
   27b0e:	f384 8811 	msr	BASEPRI, r4
   27b12:	f3bf 8f6f 	isb	sy
}
   27b16:	bd10      	pop	{r4, pc}

00027b18 <z_set_timeout_expiry>:
{
   27b18:	b570      	push	{r4, r5, r6, lr}
   27b1a:	4604      	mov	r4, r0
   27b1c:	460d      	mov	r5, r1
	__asm__ volatile(
   27b1e:	f04f 0320 	mov.w	r3, #32
   27b22:	f3ef 8611 	mrs	r6, BASEPRI
   27b26:	f383 8811 	msr	BASEPRI, r3
   27b2a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   27b2e:	f7f9 fa3d 	bl	20fac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27b32:	2801      	cmp	r0, #1
   27b34:	dd05      	ble.n	27b42 <z_set_timeout_expiry+0x2a>
   27b36:	42a0      	cmp	r0, r4
   27b38:	db03      	blt.n	27b42 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   27b3a:	4629      	mov	r1, r5
   27b3c:	4620      	mov	r0, r4
   27b3e:	f7df fb57 	bl	71f0 <z_clock_set_timeout>
	__asm__ volatile(
   27b42:	f386 8811 	msr	BASEPRI, r6
   27b46:	f3bf 8f6f 	isb	sy
}
   27b4a:	bd70      	pop	{r4, r5, r6, pc}

00027b4c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   27b4c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   27b4e:	f7f9 fb4b 	bl	211e8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27b52:	bd08      	pop	{r3, pc}

00027b54 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   27b54:	f7f9 bb48 	b.w	211e8 <z_tick_get>

00027b58 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27b58:	f1b1 3fff 	cmp.w	r1, #4294967295
   27b5c:	bf08      	it	eq
   27b5e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   27b62:	b538      	push	{r3, r4, r5, lr}
   27b64:	4605      	mov	r5, r0
   27b66:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27b68:	d01d      	beq.n	27ba6 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27b6a:	ea51 0300 	orrs.w	r3, r1, r0
   27b6e:	d103      	bne.n	27b78 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   27b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   27b74:	f7f9 bb38 	b.w	211e8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   27b78:	f06f 0301 	mvn.w	r3, #1
   27b7c:	1a18      	subs	r0, r3, r0
   27b7e:	f04f 33ff 	mov.w	r3, #4294967295
   27b82:	eb63 0101 	sbc.w	r1, r3, r1
   27b86:	2900      	cmp	r1, #0
   27b88:	da0c      	bge.n	27ba4 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   27b8a:	f7f9 fb2d 	bl	211e8 <z_tick_get>
   27b8e:	2d01      	cmp	r5, #1
   27b90:	4622      	mov	r2, r4
   27b92:	f174 0400 	sbcs.w	r4, r4, #0
   27b96:	462b      	mov	r3, r5
   27b98:	bfbc      	itt	lt
   27b9a:	2301      	movlt	r3, #1
   27b9c:	2200      	movlt	r2, #0
   27b9e:	1818      	adds	r0, r3, r0
   27ba0:	eb41 0102 	adc.w	r1, r1, r2
}
   27ba4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   27ba6:	f04f 30ff 	mov.w	r0, #4294967295
   27baa:	4601      	mov	r1, r0
   27bac:	e7fa      	b.n	27ba4 <z_timeout_end_calc+0x4c>

00027bae <k_timer_init>:
	timer->status = 0U;
   27bae:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27bb0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   27bb4:	f100 0218 	add.w	r2, r0, #24
   27bb8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   27bbc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   27bc0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   27bc2:	6343      	str	r3, [r0, #52]	; 0x34
}
   27bc4:	4770      	bx	lr

00027bc6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   27bc6:	b510      	push	{r4, lr}
   27bc8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   27bca:	f7ff ff7f 	bl	27acc <z_abort_timeout>

	if (inactive) {
   27bce:	b9b0      	cbnz	r0, 27bfe <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   27bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27bd2:	b10b      	cbz	r3, 27bd8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   27bd4:	4620      	mov	r0, r4
   27bd6:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   27bd8:	f104 0018 	add.w	r0, r4, #24
   27bdc:	f7ff fea1 	bl	27922 <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   27be0:	b168      	cbz	r0, 27bfe <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   27be2:	f7ff fe46 	bl	27872 <z_ready_thread>
	__asm__ volatile(
   27be6:	f04f 0320 	mov.w	r3, #32
   27bea:	f3ef 8011 	mrs	r0, BASEPRI
   27bee:	f383 8811 	msr	BASEPRI, r3
   27bf2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   27bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   27bfa:	f7ff bdfc 	b.w	277f6 <z_reschedule_irqlock>
   27bfe:	bd10      	pop	{r4, pc}

00027c00 <k_work_submit_to_queue>:
{
   27c00:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27c02:	f101 0308 	add.w	r3, r1, #8
   27c06:	f3bf 8f5b 	dmb	ish
   27c0a:	e853 2f00 	ldrex	r2, [r3]
   27c0e:	f042 0c01 	orr.w	ip, r2, #1
   27c12:	e843 ce00 	strex	lr, ip, [r3]
   27c16:	f1be 0f00 	cmp.w	lr, #0
   27c1a:	d1f6      	bne.n	27c0a <k_work_submit_to_queue+0xa>
   27c1c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27c20:	07d3      	lsls	r3, r2, #31
   27c22:	d403      	bmi.n	27c2c <k_work_submit_to_queue+0x2c>
}
   27c24:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   27c28:	f7ff bd7b 	b.w	27722 <k_queue_append>
}
   27c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00027c30 <signal_poll_event>:
{
   27c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27c34:	6884      	ldr	r4, [r0, #8]
{
   27c36:	4605      	mov	r5, r0
   27c38:	460e      	mov	r6, r1
	if (poller) {
   27c3a:	b144      	cbz	r4, 27c4e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   27c3c:	7863      	ldrb	r3, [r4, #1]
   27c3e:	2b01      	cmp	r3, #1
   27c40:	d136      	bne.n	27cb0 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   27c42:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   27c46:	f013 0302 	ands.w	r3, r3, #2
   27c4a:	d10a      	bne.n	27c62 <signal_poll_event+0x32>
		poller->is_polling = false;
   27c4c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   27c4e:	68eb      	ldr	r3, [r5, #12]
   27c50:	f3c3 3104 	ubfx	r1, r3, #12, #5
   27c54:	430e      	orrs	r6, r1
	event->poller = NULL;
   27c56:	2000      	movs	r0, #0
	event->state |= state;
   27c58:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   27c5c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   27c5e:	60eb      	str	r3, [r5, #12]
	return retcode;
   27c60:	e00b      	b.n	27c7a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   27c62:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   27c66:	f1b3 3fff 	cmp.w	r3, #4294967295
   27c6a:	bf08      	it	eq
   27c6c:	f112 0f02 	cmneq.w	r2, #2
   27c70:	d105      	bne.n	27c7e <signal_poll_event+0x4e>
		poller->is_polling = false;
   27c72:	2300      	movs	r3, #0
   27c74:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27c76:	f06f 000a 	mvn.w	r0, #10
}
   27c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27c7e:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   27c82:	4640      	mov	r0, r8
   27c84:	f7ff fdd9 	bl	2783a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27c88:	2e08      	cmp	r6, #8
   27c8a:	bf0c      	ite	eq
   27c8c:	f06f 0303 	mvneq.w	r3, #3
   27c90:	2300      	movne	r3, #0
   27c92:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27c94:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   27c98:	06db      	lsls	r3, r3, #27
   27c9a:	d102      	bne.n	27ca2 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   27c9c:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   27ca0:	b10f      	cbz	r7, 27ca6 <signal_poll_event+0x76>
		poller->is_polling = false;
   27ca2:	2300      	movs	r3, #0
   27ca4:	e7d2      	b.n	27c4c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   27ca6:	4640      	mov	r0, r8
   27ca8:	f7ff fde3 	bl	27872 <z_ready_thread>
		poller->is_polling = false;
   27cac:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   27cae:	e7ce      	b.n	27c4e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   27cb0:	2b02      	cmp	r3, #2
   27cb2:	d1f6      	bne.n	27ca2 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   27cb4:	7823      	ldrb	r3, [r4, #0]
   27cb6:	2b00      	cmp	r3, #0
   27cb8:	d0c9      	beq.n	27c4e <signal_poll_event+0x1e>
   27cba:	f854 7c04 	ldr.w	r7, [r4, #-4]
   27cbe:	2f00      	cmp	r7, #0
   27cc0:	d0f4      	beq.n	27cac <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   27cc2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   27cc6:	f1a4 0910 	sub.w	r9, r4, #16
   27cca:	f104 0010 	add.w	r0, r4, #16
   27cce:	f7ff fefd 	bl	27acc <z_abort_timeout>
		twork->poll_result = 0;
   27cd2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   27cd6:	4649      	mov	r1, r9
   27cd8:	4638      	mov	r0, r7
   27cda:	f7ff ff91 	bl	27c00 <k_work_submit_to_queue>
		poller->is_polling = false;
   27cde:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   27ce2:	e7b4      	b.n	27c4e <signal_poll_event+0x1e>

00027ce4 <add_event>:
{
   27ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ce6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27ce8:	e9d0 2300 	ldrd	r2, r3, [r0]
   27cec:	4290      	cmp	r0, r2
   27cee:	4604      	mov	r4, r0
   27cf0:	460d      	mov	r5, r1
   27cf2:	d106      	bne.n	27d02 <add_event+0x1e>
	node->prev = list->tail;
   27cf4:	6863      	ldr	r3, [r4, #4]
   27cf6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   27cf8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   27cfa:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   27cfc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27cfe:	6065      	str	r5, [r4, #4]
}
   27d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   27d02:	2b00      	cmp	r3, #0
   27d04:	d0f6      	beq.n	27cf4 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   27d06:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27d08:	b100      	cbz	r0, 27d0c <add_event+0x28>
   27d0a:	3864      	subs	r0, #100	; 0x64
   27d0c:	b107      	cbz	r7, 27d10 <add_event+0x2c>
   27d0e:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   27d10:	4639      	mov	r1, r7
   27d12:	f7ff fd57 	bl	277c4 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   27d16:	2800      	cmp	r0, #0
   27d18:	d1ec      	bne.n	27cf4 <add_event+0x10>
	return list->head == list;
   27d1a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d1c:	42b4      	cmp	r4, r6
   27d1e:	d0e9      	beq.n	27cf4 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27d20:	2e00      	cmp	r6, #0
   27d22:	d0e7      	beq.n	27cf4 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   27d24:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27d26:	b101      	cbz	r1, 27d2a <add_event+0x46>
   27d28:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   27d2a:	4638      	mov	r0, r7
   27d2c:	f7ff fd4a 	bl	277c4 <z_is_t1_higher_prio_than_t2>
   27d30:	b128      	cbz	r0, 27d3e <add_event+0x5a>
	node->prev = successor->prev;
   27d32:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   27d34:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   27d38:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27d3a:	6075      	str	r5, [r6, #4]
			return;
   27d3c:	e7e0      	b.n	27d00 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   27d3e:	6863      	ldr	r3, [r4, #4]
   27d40:	429e      	cmp	r6, r3
   27d42:	d0d7      	beq.n	27cf4 <add_event+0x10>
   27d44:	6836      	ldr	r6, [r6, #0]
   27d46:	e7eb      	b.n	27d20 <add_event+0x3c>

00027d48 <register_events>:
{
   27d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   27d4c:	f04f 0a00 	mov.w	sl, #0
{
   27d50:	460e      	mov	r6, r1
   27d52:	4614      	mov	r4, r2
   27d54:	461f      	mov	r7, r3
   27d56:	4683      	mov	fp, r0
	int events_registered = 0;
   27d58:	4655      	mov	r5, sl
	event->poller = NULL;
   27d5a:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   27d5c:	45b2      	cmp	sl, r6
   27d5e:	db02      	blt.n	27d66 <register_events+0x1e>
}
   27d60:	4628      	mov	r0, r5
   27d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d66:	f04f 0320 	mov.w	r3, #32
   27d6a:	f3ef 8911 	mrs	r9, BASEPRI
   27d6e:	f383 8811 	msr	BASEPRI, r3
   27d72:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   27d76:	f89b 200d 	ldrb.w	r2, [fp, #13]
   27d7a:	f002 020f 	and.w	r2, r2, #15
   27d7e:	2a02      	cmp	r2, #2
   27d80:	d006      	beq.n	27d90 <register_events+0x48>
   27d82:	2a04      	cmp	r2, #4
   27d84:	d008      	beq.n	27d98 <register_events+0x50>
   27d86:	2a01      	cmp	r2, #1
   27d88:	d120      	bne.n	27dcc <register_events+0x84>
		if (event->signal->signaled != 0U) {
   27d8a:	f8db 3010 	ldr.w	r3, [fp, #16]
   27d8e:	e001      	b.n	27d94 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   27d90:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   27d94:	689b      	ldr	r3, [r3, #8]
   27d96:	e002      	b.n	27d9e <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   27d98:	f8db 3010 	ldr.w	r3, [fp, #16]
   27d9c:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   27d9e:	b1ab      	cbz	r3, 27dcc <register_events+0x84>
	event->state |= state;
   27da0:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   27da4:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   27da8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   27dac:	430a      	orrs	r2, r1
   27dae:	f362 3310 	bfi	r3, r2, #12, #5
   27db2:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   27db6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   27dba:	f389 8811 	msr	BASEPRI, r9
   27dbe:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27dc2:	f10a 0a01 	add.w	sl, sl, #1
   27dc6:	f10b 0b14 	add.w	fp, fp, #20
   27dca:	e7c7      	b.n	27d5c <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   27dcc:	2f00      	cmp	r7, #0
   27dce:	d1f4      	bne.n	27dba <register_events+0x72>
   27dd0:	7823      	ldrb	r3, [r4, #0]
   27dd2:	2b00      	cmp	r3, #0
   27dd4:	d0f1      	beq.n	27dba <register_events+0x72>
	switch (event->type) {
   27dd6:	f89b 300d 	ldrb.w	r3, [fp, #13]
   27dda:	f003 030f 	and.w	r3, r3, #15
   27dde:	2b02      	cmp	r3, #2
   27de0:	d008      	beq.n	27df4 <register_events+0xac>
   27de2:	2b04      	cmp	r3, #4
   27de4:	d006      	beq.n	27df4 <register_events+0xac>
   27de6:	2b01      	cmp	r3, #1
   27de8:	d10b      	bne.n	27e02 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   27dea:	f8db 0010 	ldr.w	r0, [fp, #16]
   27dee:	4622      	mov	r2, r4
   27df0:	4659      	mov	r1, fp
   27df2:	e004      	b.n	27dfe <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   27df4:	f8db 0010 	ldr.w	r0, [fp, #16]
   27df8:	4622      	mov	r2, r4
   27dfa:	4659      	mov	r1, fp
   27dfc:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   27dfe:	f7ff ff71 	bl	27ce4 <add_event>
	event->poller = poller;
   27e02:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   27e06:	3501      	adds	r5, #1
   27e08:	e7d7      	b.n	27dba <register_events+0x72>

00027e0a <clear_event_registrations>:
	while (num_events--) {
   27e0a:	2314      	movs	r3, #20
{
   27e0c:	b570      	push	{r4, r5, r6, lr}
   27e0e:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   27e12:	2400      	movs	r4, #0
	while (num_events--) {
   27e14:	b901      	cbnz	r1, 27e18 <clear_event_registrations+0xe>
}
   27e16:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   27e18:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   27e1c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   27e20:	f003 030f 	and.w	r3, r3, #15
   27e24:	2b02      	cmp	r3, #2
   27e26:	f1a0 0614 	sub.w	r6, r0, #20
   27e2a:	d80a      	bhi.n	27e42 <clear_event_registrations+0x38>
   27e2c:	b15b      	cbz	r3, 27e46 <clear_event_registrations+0x3c>
	return node->next != NULL;
   27e2e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   27e32:	b143      	cbz	r3, 27e46 <clear_event_registrations+0x3c>
	node->prev->next = node->next;
   27e34:	f850 5c10 	ldr.w	r5, [r0, #-16]
   27e38:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   27e3a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   27e3c:	e940 4405 	strd	r4, r4, [r0, #-20]
}
   27e40:	e001      	b.n	27e46 <clear_event_registrations+0x3c>
	switch (event->type) {
   27e42:	2b04      	cmp	r3, #4
   27e44:	d0f3      	beq.n	27e2e <clear_event_registrations+0x24>
   27e46:	f382 8811 	msr	BASEPRI, r2
   27e4a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27e4e:	f04f 0320 	mov.w	r3, #32
   27e52:	f3ef 8211 	mrs	r2, BASEPRI
   27e56:	f383 8811 	msr	BASEPRI, r3
   27e5a:	f3bf 8f6f 	isb	sy
   27e5e:	3901      	subs	r1, #1
   27e60:	4630      	mov	r0, r6
   27e62:	e7d7      	b.n	27e14 <clear_event_registrations+0xa>

00027e64 <k_poll_event_init>:
{
   27e64:	b510      	push	{r4, lr}
	event->type = type;
   27e66:	0452      	lsls	r2, r2, #17
   27e68:	0209      	lsls	r1, r1, #8
   27e6a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   27e6e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   27e72:	430a      	orrs	r2, r1
   27e74:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   27e76:	2400      	movs	r4, #0
	event->type = type;
   27e78:	430a      	orrs	r2, r1
	event->obj = obj;
   27e7a:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   27e7e:	6084      	str	r4, [r0, #8]
}
   27e80:	bd10      	pop	{r4, pc}

00027e82 <z_handle_obj_poll_events>:
{
   27e82:	4603      	mov	r3, r0
	return list->head == list;
   27e84:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27e86:	4283      	cmp	r3, r0
   27e88:	d008      	beq.n	27e9c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   27e8a:	e9d0 3200 	ldrd	r3, r2, [r0]
   27e8e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   27e90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27e92:	2300      	movs	r3, #0
	node->prev = NULL;
   27e94:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27e98:	f7ff beca 	b.w	27c30 <signal_poll_event>
}
   27e9c:	4770      	bx	lr

00027e9e <k_free>:
	if (ptr != NULL) {
   27e9e:	b120      	cbz	r0, 27eaa <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   27ea0:	1f01      	subs	r1, r0, #4
   27ea2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27ea6:	f7ff bb78 	b.w	2759a <k_heap_free>
}
   27eaa:	4770      	bx	lr

00027eac <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   27eac:	4770      	bx	lr
