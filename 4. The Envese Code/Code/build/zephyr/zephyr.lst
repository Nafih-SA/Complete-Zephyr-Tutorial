
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000d80 	.word	0x20000d80
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	000021dd 	.word	0x000021dd
   8:	00005fc9 	.word	0x00005fc9
   c:	0000220d 	.word	0x0000220d
		if (fdtable[fd].obj == NULL) {
  10:	0000220d 	.word	0x0000220d
  14:	0000220d 	.word	0x0000220d
  18:	0000220d 	.word	0x0000220d
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	0000214d 	.word	0x0000214d
  30:	0000220d 	.word	0x0000220d
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00002105 	.word	0x00002105
  3c:	00005fa3 	.word	0x00005fa3

00000040 <_irq_vector_table>:
  40:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  50:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  60:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  70:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  80:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  90:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  a0:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  b0:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  c0:	0000219d 0000219d 0000219d 0000219d     .!...!...!...!..
  d0:	0000219d 0000219d 0000219d              .!...!...!..

Disassembly of section text:

000000e0 <__aeabi_dmul>:
      e0:	b570      	push	{r4, r5, r6, lr}
      e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
      e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
      ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
      ee:	bf1d      	ittte	ne
      f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
      f4:	ea94 0f0c 	teqne	r4, ip
      f8:	ea95 0f0c 	teqne	r5, ip
      fc:	f000 f8de 	bleq	2bc <CONFIG_FLASH_SIZE+0xbc>
     100:	442c      	add	r4, r5
     102:	ea81 0603 	eor.w	r6, r1, r3
     106:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     10a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     10e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     112:	bf18      	it	ne
     114:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     11c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     120:	d038      	beq.n	194 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x4a>
     122:	fba0 ce02 	umull	ip, lr, r0, r2
     126:	f04f 0500 	mov.w	r5, #0
     12a:	fbe1 e502 	umlal	lr, r5, r1, r2
     12e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     132:	fbe0 e503 	umlal	lr, r5, r0, r3
     136:	f04f 0600 	mov.w	r6, #0
     13a:	fbe1 5603 	umlal	r5, r6, r1, r3
     13e:	f09c 0f00 	teq	ip, #0
     142:	bf18      	it	ne
     144:	f04e 0e01 	orrne.w	lr, lr, #1
     148:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     14c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     150:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     154:	d204      	bcs.n	160 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x16>
     156:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     15a:	416d      	adcs	r5, r5
     15c:	eb46 0606 	adc.w	r6, r6, r6
     160:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     164:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     168:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     16c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     170:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     174:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     178:	bf88      	it	hi
     17a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     17e:	d81e      	bhi.n	1be <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x74>
     180:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     184:	bf08      	it	eq
     186:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     18a:	f150 0000 	adcs.w	r0, r0, #0
     18e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     192:	bd70      	pop	{r4, r5, r6, pc}
     194:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     198:	ea46 0101 	orr.w	r1, r6, r1
     19c:	ea40 0002 	orr.w	r0, r0, r2
     1a0:	ea81 0103 	eor.w	r1, r1, r3
     1a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     1a8:	bfc2      	ittt	gt
     1aa:	ebd4 050c 	rsbsgt	r5, r4, ip
     1ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     1b2:	bd70      	popgt	{r4, r5, r6, pc}
     1b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     1b8:	f04f 0e00 	mov.w	lr, #0
     1bc:	3c01      	subs	r4, #1
     1be:	f300 80ab 	bgt.w	318 <CONFIG_FLASH_SIZE+0x118>
     1c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     1c6:	bfde      	ittt	le
     1c8:	2000      	movle	r0, #0
     1ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     1ce:	bd70      	pople	{r4, r5, r6, pc}
     1d0:	f1c4 0400 	rsb	r4, r4, #0
     1d4:	3c20      	subs	r4, #32
     1d6:	da35      	bge.n	244 <CONFIG_FLASH_SIZE+0x44>
     1d8:	340c      	adds	r4, #12
     1da:	dc1b      	bgt.n	214 <CONFIG_FLASH_SIZE+0x14>
     1dc:	f104 0414 	add.w	r4, r4, #20
     1e0:	f1c4 0520 	rsb	r5, r4, #32
     1e4:	fa00 f305 	lsl.w	r3, r0, r5
     1e8:	fa20 f004 	lsr.w	r0, r0, r4
     1ec:	fa01 f205 	lsl.w	r2, r1, r5
     1f0:	ea40 0002 	orr.w	r0, r0, r2
     1f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     1f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     1fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     200:	fa21 f604 	lsr.w	r6, r1, r4
     204:	eb42 0106 	adc.w	r1, r2, r6
     208:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     20c:	bf08      	it	eq
     20e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     212:	bd70      	pop	{r4, r5, r6, pc}
     214:	f1c4 040c 	rsb	r4, r4, #12
     218:	f1c4 0520 	rsb	r5, r4, #32
     21c:	fa00 f304 	lsl.w	r3, r0, r4
     220:	fa20 f005 	lsr.w	r0, r0, r5
     224:	fa01 f204 	lsl.w	r2, r1, r4
     228:	ea40 0002 	orr.w	r0, r0, r2
     22c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     230:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     234:	f141 0100 	adc.w	r1, r1, #0
     238:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     23c:	bf08      	it	eq
     23e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     242:	bd70      	pop	{r4, r5, r6, pc}
     244:	f1c4 0520 	rsb	r5, r4, #32
     248:	fa00 f205 	lsl.w	r2, r0, r5
     24c:	ea4e 0e02 	orr.w	lr, lr, r2
     250:	fa20 f304 	lsr.w	r3, r0, r4
     254:	fa01 f205 	lsl.w	r2, r1, r5
     258:	ea43 0302 	orr.w	r3, r3, r2
     25c:	fa21 f004 	lsr.w	r0, r1, r4
     260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     264:	fa21 f204 	lsr.w	r2, r1, r4
     268:	ea20 0002 	bic.w	r0, r0, r2
     26c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     270:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     274:	bf08      	it	eq
     276:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     27a:	bd70      	pop	{r4, r5, r6, pc}
     27c:	f094 0f00 	teq	r4, #0
     280:	d10f      	bne.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     282:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     286:	0040      	lsls	r0, r0, #1
     288:	eb41 0101 	adc.w	r1, r1, r1
     28c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     290:	bf08      	it	eq
     292:	3c01      	subeq	r4, #1
     294:	d0f7      	beq.n	286 <CONFIG_FLASH_SIZE+0x86>
     296:	ea41 0106 	orr.w	r1, r1, r6
     29a:	f095 0f00 	teq	r5, #0
     29e:	bf18      	it	ne
     2a0:	4770      	bxne	lr
     2a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     2a6:	0052      	lsls	r2, r2, #1
     2a8:	eb43 0303 	adc.w	r3, r3, r3
     2ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     2b0:	bf08      	it	eq
     2b2:	3d01      	subeq	r5, #1
     2b4:	d0f7      	beq.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     2b6:	ea43 0306 	orr.w	r3, r3, r6
     2ba:	4770      	bx	lr
     2bc:	ea94 0f0c 	teq	r4, ip
     2c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     2c4:	bf18      	it	ne
     2c6:	ea95 0f0c 	teqne	r5, ip
     2ca:	d00c      	beq.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     2d0:	bf18      	it	ne
     2d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     2d6:	d1d1      	bne.n	27c <CONFIG_FLASH_SIZE+0x7c>
     2d8:	ea81 0103 	eor.w	r1, r1, r3
     2dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     2e0:	f04f 0000 	mov.w	r0, #0
     2e4:	bd70      	pop	{r4, r5, r6, pc}
     2e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     2ea:	bf06      	itte	eq
     2ec:	4610      	moveq	r0, r2
     2ee:	4619      	moveq	r1, r3
     2f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     2f4:	d019      	beq.n	32a <CONFIG_FLASH_SIZE+0x12a>
     2f6:	ea94 0f0c 	teq	r4, ip
     2fa:	d102      	bne.n	302 <CONFIG_FLASH_SIZE+0x102>
     2fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     300:	d113      	bne.n	32a <CONFIG_FLASH_SIZE+0x12a>
     302:	ea95 0f0c 	teq	r5, ip
     306:	d105      	bne.n	314 <CONFIG_FLASH_SIZE+0x114>
     308:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     30c:	bf1c      	itt	ne
     30e:	4610      	movne	r0, r2
     310:	4619      	movne	r1, r3
     312:	d10a      	bne.n	32a <CONFIG_FLASH_SIZE+0x12a>
     314:	ea81 0103 	eor.w	r1, r1, r3
     318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     31c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     320:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     324:	f04f 0000 	mov.w	r0, #0
     328:	bd70      	pop	{r4, r5, r6, pc}
     32a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     32e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     332:	bd70      	pop	{r4, r5, r6, pc}

00000334 <__aeabi_drsub>:
     334:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     338:	e002      	b.n	340 <__adddf3>
     33a:	bf00      	nop

0000033c <__aeabi_dsub>:
     33c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000340 <__adddf3>:
     340:	b530      	push	{r4, r5, lr}
     342:	ea4f 0441 	mov.w	r4, r1, lsl #1
     346:	ea4f 0543 	mov.w	r5, r3, lsl #1
     34a:	ea94 0f05 	teq	r4, r5
     34e:	bf08      	it	eq
     350:	ea90 0f02 	teqeq	r0, r2
     354:	bf1f      	itttt	ne
     356:	ea54 0c00 	orrsne.w	ip, r4, r0
     35a:	ea55 0c02 	orrsne.w	ip, r5, r2
     35e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     362:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     366:	f000 80e2 	beq.w	52e <CONFIG_MAIN_STACK_SIZE+0x12e>
     36a:	ea4f 5454 	mov.w	r4, r4, lsr #21
     36e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     372:	bfb8      	it	lt
     374:	426d      	neglt	r5, r5
     376:	dd0c      	ble.n	392 <__adddf3+0x52>
     378:	442c      	add	r4, r5
     37a:	ea80 0202 	eor.w	r2, r0, r2
     37e:	ea81 0303 	eor.w	r3, r1, r3
     382:	ea82 0000 	eor.w	r0, r2, r0
     386:	ea83 0101 	eor.w	r1, r3, r1
     38a:	ea80 0202 	eor.w	r2, r0, r2
     38e:	ea81 0303 	eor.w	r3, r1, r3
     392:	2d36      	cmp	r5, #54	; 0x36
     394:	bf88      	it	hi
     396:	bd30      	pophi	{r4, r5, pc}
     398:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     39c:	ea4f 3101 	mov.w	r1, r1, lsl #12
     3a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     3a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     3a8:	d002      	beq.n	3b0 <__adddf3+0x70>
     3aa:	4240      	negs	r0, r0
     3ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     3b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     3b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     3b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     3bc:	d002      	beq.n	3c4 <__adddf3+0x84>
     3be:	4252      	negs	r2, r2
     3c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     3c4:	ea94 0f05 	teq	r4, r5
     3c8:	f000 80a7 	beq.w	51a <CONFIG_MAIN_STACK_SIZE+0x11a>
     3cc:	f1a4 0401 	sub.w	r4, r4, #1
     3d0:	f1d5 0e20 	rsbs	lr, r5, #32
     3d4:	db0d      	blt.n	3f2 <__adddf3+0xb2>
     3d6:	fa02 fc0e 	lsl.w	ip, r2, lr
     3da:	fa22 f205 	lsr.w	r2, r2, r5
     3de:	1880      	adds	r0, r0, r2
     3e0:	f141 0100 	adc.w	r1, r1, #0
     3e4:	fa03 f20e 	lsl.w	r2, r3, lr
     3e8:	1880      	adds	r0, r0, r2
     3ea:	fa43 f305 	asr.w	r3, r3, r5
     3ee:	4159      	adcs	r1, r3
     3f0:	e00e      	b.n	410 <CONFIG_MAIN_STACK_SIZE+0x10>
     3f2:	f1a5 0520 	sub.w	r5, r5, #32
     3f6:	f10e 0e20 	add.w	lr, lr, #32
     3fa:	2a01      	cmp	r2, #1
     3fc:	fa03 fc0e 	lsl.w	ip, r3, lr
     400:	bf28      	it	cs
     402:	f04c 0c02 	orrcs.w	ip, ip, #2
     406:	fa43 f305 	asr.w	r3, r3, r5
     40a:	18c0      	adds	r0, r0, r3
     40c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     414:	d507      	bpl.n	426 <CONFIG_MAIN_STACK_SIZE+0x26>
     416:	f04f 0e00 	mov.w	lr, #0
     41a:	f1dc 0c00 	rsbs	ip, ip, #0
     41e:	eb7e 0000 	sbcs.w	r0, lr, r0
     422:	eb6e 0101 	sbc.w	r1, lr, r1
     426:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     42a:	d31b      	bcc.n	464 <CONFIG_MAIN_STACK_SIZE+0x64>
     42c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     430:	d30c      	bcc.n	44c <CONFIG_MAIN_STACK_SIZE+0x4c>
     432:	0849      	lsrs	r1, r1, #1
     434:	ea5f 0030 	movs.w	r0, r0, rrx
     438:	ea4f 0c3c 	mov.w	ip, ip, rrx
     43c:	f104 0401 	add.w	r4, r4, #1
     440:	ea4f 5244 	mov.w	r2, r4, lsl #21
     444:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     448:	f080 809a 	bcs.w	580 <CONFIG_MAIN_STACK_SIZE+0x180>
     44c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     450:	bf08      	it	eq
     452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     456:	f150 0000 	adcs.w	r0, r0, #0
     45a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     45e:	ea41 0105 	orr.w	r1, r1, r5
     462:	bd30      	pop	{r4, r5, pc}
     464:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     468:	4140      	adcs	r0, r0
     46a:	eb41 0101 	adc.w	r1, r1, r1
     46e:	3c01      	subs	r4, #1
     470:	bf28      	it	cs
     472:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     476:	d2e9      	bcs.n	44c <CONFIG_MAIN_STACK_SIZE+0x4c>
     478:	f091 0f00 	teq	r1, #0
     47c:	bf04      	itt	eq
     47e:	4601      	moveq	r1, r0
     480:	2000      	moveq	r0, #0
     482:	fab1 f381 	clz	r3, r1
     486:	bf08      	it	eq
     488:	3320      	addeq	r3, #32
     48a:	f1a3 030b 	sub.w	r3, r3, #11
     48e:	f1b3 0220 	subs.w	r2, r3, #32
     492:	da0c      	bge.n	4ae <CONFIG_MAIN_STACK_SIZE+0xae>
     494:	320c      	adds	r2, #12
     496:	dd08      	ble.n	4aa <CONFIG_MAIN_STACK_SIZE+0xaa>
     498:	f102 0c14 	add.w	ip, r2, #20
     49c:	f1c2 020c 	rsb	r2, r2, #12
     4a0:	fa01 f00c 	lsl.w	r0, r1, ip
     4a4:	fa21 f102 	lsr.w	r1, r1, r2
     4a8:	e00c      	b.n	4c4 <CONFIG_MAIN_STACK_SIZE+0xc4>
     4aa:	f102 0214 	add.w	r2, r2, #20
     4ae:	bfd8      	it	le
     4b0:	f1c2 0c20 	rsble	ip, r2, #32
     4b4:	fa01 f102 	lsl.w	r1, r1, r2
     4b8:	fa20 fc0c 	lsr.w	ip, r0, ip
     4bc:	bfdc      	itt	le
     4be:	ea41 010c 	orrle.w	r1, r1, ip
     4c2:	4090      	lslle	r0, r2
     4c4:	1ae4      	subs	r4, r4, r3
     4c6:	bfa2      	ittt	ge
     4c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     4cc:	4329      	orrge	r1, r5
     4ce:	bd30      	popge	{r4, r5, pc}
     4d0:	ea6f 0404 	mvn.w	r4, r4
     4d4:	3c1f      	subs	r4, #31
     4d6:	da1c      	bge.n	512 <CONFIG_MAIN_STACK_SIZE+0x112>
     4d8:	340c      	adds	r4, #12
     4da:	dc0e      	bgt.n	4fa <CONFIG_MAIN_STACK_SIZE+0xfa>
     4dc:	f104 0414 	add.w	r4, r4, #20
     4e0:	f1c4 0220 	rsb	r2, r4, #32
     4e4:	fa20 f004 	lsr.w	r0, r0, r4
     4e8:	fa01 f302 	lsl.w	r3, r1, r2
     4ec:	ea40 0003 	orr.w	r0, r0, r3
     4f0:	fa21 f304 	lsr.w	r3, r1, r4
     4f4:	ea45 0103 	orr.w	r1, r5, r3
     4f8:	bd30      	pop	{r4, r5, pc}
     4fa:	f1c4 040c 	rsb	r4, r4, #12
     4fe:	f1c4 0220 	rsb	r2, r4, #32
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 f304 	lsl.w	r3, r1, r4
     50a:	ea40 0003 	orr.w	r0, r0, r3
     50e:	4629      	mov	r1, r5
     510:	bd30      	pop	{r4, r5, pc}
     512:	fa21 f004 	lsr.w	r0, r1, r4
     516:	4629      	mov	r1, r5
     518:	bd30      	pop	{r4, r5, pc}
     51a:	f094 0f00 	teq	r4, #0
     51e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     522:	bf06      	itte	eq
     524:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     528:	3401      	addeq	r4, #1
     52a:	3d01      	subne	r5, #1
     52c:	e74e      	b.n	3cc <__adddf3+0x8c>
     52e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     532:	bf18      	it	ne
     534:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     538:	d029      	beq.n	58e <CONFIG_MAIN_STACK_SIZE+0x18e>
     53a:	ea94 0f05 	teq	r4, r5
     53e:	bf08      	it	eq
     540:	ea90 0f02 	teqeq	r0, r2
     544:	d005      	beq.n	552 <CONFIG_MAIN_STACK_SIZE+0x152>
     546:	ea54 0c00 	orrs.w	ip, r4, r0
     54a:	bf04      	itt	eq
     54c:	4619      	moveq	r1, r3
     54e:	4610      	moveq	r0, r2
     550:	bd30      	pop	{r4, r5, pc}
     552:	ea91 0f03 	teq	r1, r3
     556:	bf1e      	ittt	ne
     558:	2100      	movne	r1, #0
     55a:	2000      	movne	r0, #0
     55c:	bd30      	popne	{r4, r5, pc}
     55e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     562:	d105      	bne.n	570 <CONFIG_MAIN_STACK_SIZE+0x170>
     564:	0040      	lsls	r0, r0, #1
     566:	4149      	adcs	r1, r1
     568:	bf28      	it	cs
     56a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     56e:	bd30      	pop	{r4, r5, pc}
     570:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     574:	bf3c      	itt	cc
     576:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     57a:	bd30      	popcc	{r4, r5, pc}
     57c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     580:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     584:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     588:	f04f 0000 	mov.w	r0, #0
     58c:	bd30      	pop	{r4, r5, pc}
     58e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     592:	bf1a      	itte	ne
     594:	4619      	movne	r1, r3
     596:	4610      	movne	r0, r2
     598:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     59c:	bf1c      	itt	ne
     59e:	460b      	movne	r3, r1
     5a0:	4602      	movne	r2, r0
     5a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     5a6:	bf06      	itte	eq
     5a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     5ac:	ea91 0f03 	teqeq	r1, r3
     5b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     5b4:	bd30      	pop	{r4, r5, pc}
     5b6:	bf00      	nop

000005b8 <__aeabi_ui2d>:
     5b8:	f090 0f00 	teq	r0, #0
     5bc:	bf04      	itt	eq
     5be:	2100      	moveq	r1, #0
     5c0:	4770      	bxeq	lr
     5c2:	b530      	push	{r4, r5, lr}
     5c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     5c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5cc:	f04f 0500 	mov.w	r5, #0
     5d0:	f04f 0100 	mov.w	r1, #0
     5d4:	e750      	b.n	478 <CONFIG_MAIN_STACK_SIZE+0x78>
     5d6:	bf00      	nop

000005d8 <__aeabi_i2d>:
     5d8:	f090 0f00 	teq	r0, #0
     5dc:	bf04      	itt	eq
     5de:	2100      	moveq	r1, #0
     5e0:	4770      	bxeq	lr
     5e2:	b530      	push	{r4, r5, lr}
     5e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     5e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     5f0:	bf48      	it	mi
     5f2:	4240      	negmi	r0, r0
     5f4:	f04f 0100 	mov.w	r1, #0
     5f8:	e73e      	b.n	478 <CONFIG_MAIN_STACK_SIZE+0x78>
     5fa:	bf00      	nop

000005fc <__aeabi_f2d>:
     5fc:	0042      	lsls	r2, r0, #1
     5fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
     602:	ea4f 0131 	mov.w	r1, r1, rrx
     606:	ea4f 7002 	mov.w	r0, r2, lsl #28
     60a:	bf1f      	itttt	ne
     60c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     610:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     614:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     618:	4770      	bxne	lr
     61a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     61e:	bf08      	it	eq
     620:	4770      	bxeq	lr
     622:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     626:	bf04      	itt	eq
     628:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     62c:	4770      	bxeq	lr
     62e:	b530      	push	{r4, r5, lr}
     630:	f44f 7460 	mov.w	r4, #896	; 0x380
     634:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     63c:	e71c      	b.n	478 <CONFIG_MAIN_STACK_SIZE+0x78>
     63e:	bf00      	nop

00000640 <__aeabi_ul2d>:
     640:	ea50 0201 	orrs.w	r2, r0, r1
     644:	bf08      	it	eq
     646:	4770      	bxeq	lr
     648:	b530      	push	{r4, r5, lr}
     64a:	f04f 0500 	mov.w	r5, #0
     64e:	e00a      	b.n	666 <__aeabi_l2d+0x16>

00000650 <__aeabi_l2d>:
     650:	ea50 0201 	orrs.w	r2, r0, r1
     654:	bf08      	it	eq
     656:	4770      	bxeq	lr
     658:	b530      	push	{r4, r5, lr}
     65a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     65e:	d502      	bpl.n	666 <__aeabi_l2d+0x16>
     660:	4240      	negs	r0, r0
     662:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     666:	f44f 6480 	mov.w	r4, #1024	; 0x400
     66a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     66e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     672:	f43f aed8 	beq.w	426 <CONFIG_MAIN_STACK_SIZE+0x26>
     676:	f04f 0203 	mov.w	r2, #3
     67a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     67e:	bf18      	it	ne
     680:	3203      	addne	r2, #3
     682:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     686:	bf18      	it	ne
     688:	3203      	addne	r2, #3
     68a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     68e:	f1c2 0320 	rsb	r3, r2, #32
     692:	fa00 fc03 	lsl.w	ip, r0, r3
     696:	fa20 f002 	lsr.w	r0, r0, r2
     69a:	fa01 fe03 	lsl.w	lr, r1, r3
     69e:	ea40 000e 	orr.w	r0, r0, lr
     6a2:	fa21 f102 	lsr.w	r1, r1, r2
     6a6:	4414      	add	r4, r2
     6a8:	e6bd      	b.n	426 <CONFIG_MAIN_STACK_SIZE+0x26>
     6aa:	bf00      	nop

000006ac <__aeabi_d2f>:
     6ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     6b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     6b4:	bf24      	itt	cs
     6b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     6ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     6be:	d90d      	bls.n	6dc <__aeabi_d2f+0x30>
     6c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     6c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     6c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     6cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     6d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     6d4:	bf08      	it	eq
     6d6:	f020 0001 	biceq.w	r0, r0, #1
     6da:	4770      	bx	lr
     6dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     6e0:	d121      	bne.n	726 <__aeabi_d2f+0x7a>
     6e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     6e6:	bfbc      	itt	lt
     6e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     6ec:	4770      	bxlt	lr
     6ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     6f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     6f6:	f1c2 0218 	rsb	r2, r2, #24
     6fa:	f1c2 0c20 	rsb	ip, r2, #32
     6fe:	fa10 f30c 	lsls.w	r3, r0, ip
     702:	fa20 f002 	lsr.w	r0, r0, r2
     706:	bf18      	it	ne
     708:	f040 0001 	orrne.w	r0, r0, #1
     70c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     710:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     714:	fa03 fc0c 	lsl.w	ip, r3, ip
     718:	ea40 000c 	orr.w	r0, r0, ip
     71c:	fa23 f302 	lsr.w	r3, r3, r2
     720:	ea4f 0343 	mov.w	r3, r3, lsl #1
     724:	e7cc      	b.n	6c0 <__aeabi_d2f+0x14>
     726:	ea7f 5362 	mvns.w	r3, r2, asr #21
     72a:	d107      	bne.n	73c <__aeabi_d2f+0x90>
     72c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     730:	bf1e      	ittt	ne
     732:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     736:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     73a:	4770      	bxne	lr
     73c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     740:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     744:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     748:	4770      	bx	lr
     74a:	bf00      	nop

0000074c <__aeabi_frsub>:
     74c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     750:	e002      	b.n	758 <__addsf3>
     752:	bf00      	nop

00000754 <__aeabi_fsub>:
     754:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000758 <__addsf3>:
     758:	0042      	lsls	r2, r0, #1
     75a:	bf1f      	itttt	ne
     75c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     760:	ea92 0f03 	teqne	r2, r3
     764:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     768:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     76c:	d06a      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
     76e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     772:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     776:	bfc1      	itttt	gt
     778:	18d2      	addgt	r2, r2, r3
     77a:	4041      	eorgt	r1, r0
     77c:	4048      	eorgt	r0, r1
     77e:	4041      	eorgt	r1, r0
     780:	bfb8      	it	lt
     782:	425b      	neglt	r3, r3
     784:	2b19      	cmp	r3, #25
     786:	bf88      	it	hi
     788:	4770      	bxhi	lr
     78a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     78e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     796:	bf18      	it	ne
     798:	4240      	negne	r0, r0
     79a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     79e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     7a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     7a6:	bf18      	it	ne
     7a8:	4249      	negne	r1, r1
     7aa:	ea92 0f03 	teq	r2, r3
     7ae:	d03f      	beq.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     7b0:	f1a2 0201 	sub.w	r2, r2, #1
     7b4:	fa41 fc03 	asr.w	ip, r1, r3
     7b8:	eb10 000c 	adds.w	r0, r0, ip
     7bc:	f1c3 0320 	rsb	r3, r3, #32
     7c0:	fa01 f103 	lsl.w	r1, r1, r3
     7c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     7c8:	d502      	bpl.n	7d0 <__addsf3+0x78>
     7ca:	4249      	negs	r1, r1
     7cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     7d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     7d4:	d313      	bcc.n	7fe <__addsf3+0xa6>
     7d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     7da:	d306      	bcc.n	7ea <__addsf3+0x92>
     7dc:	0840      	lsrs	r0, r0, #1
     7de:	ea4f 0131 	mov.w	r1, r1, rrx
     7e2:	f102 0201 	add.w	r2, r2, #1
     7e6:	2afe      	cmp	r2, #254	; 0xfe
     7e8:	d251      	bcs.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     7ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     7ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     7f2:	bf08      	it	eq
     7f4:	f020 0001 	biceq.w	r0, r0, #1
     7f8:	ea40 0003 	orr.w	r0, r0, r3
     7fc:	4770      	bx	lr
     7fe:	0049      	lsls	r1, r1, #1
     800:	eb40 0000 	adc.w	r0, r0, r0
     804:	3a01      	subs	r2, #1
     806:	bf28      	it	cs
     808:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     80c:	d2ed      	bcs.n	7ea <__addsf3+0x92>
     80e:	fab0 fc80 	clz	ip, r0
     812:	f1ac 0c08 	sub.w	ip, ip, #8
     816:	ebb2 020c 	subs.w	r2, r2, ip
     81a:	fa00 f00c 	lsl.w	r0, r0, ip
     81e:	bfaa      	itet	ge
     820:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     824:	4252      	neglt	r2, r2
     826:	4318      	orrge	r0, r3
     828:	bfbc      	itt	lt
     82a:	40d0      	lsrlt	r0, r2
     82c:	4318      	orrlt	r0, r3
     82e:	4770      	bx	lr
     830:	f092 0f00 	teq	r2, #0
     834:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     838:	bf06      	itte	eq
     83a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     83e:	3201      	addeq	r2, #1
     840:	3b01      	subne	r3, #1
     842:	e7b5      	b.n	7b0 <__addsf3+0x58>
     844:	ea4f 0341 	mov.w	r3, r1, lsl #1
     848:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     84c:	bf18      	it	ne
     84e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     852:	d021      	beq.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
     854:	ea92 0f03 	teq	r2, r3
     858:	d004      	beq.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
     85a:	f092 0f00 	teq	r2, #0
     85e:	bf08      	it	eq
     860:	4608      	moveq	r0, r1
     862:	4770      	bx	lr
     864:	ea90 0f01 	teq	r0, r1
     868:	bf1c      	itt	ne
     86a:	2000      	movne	r0, #0
     86c:	4770      	bxne	lr
     86e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     872:	d104      	bne.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     874:	0040      	lsls	r0, r0, #1
     876:	bf28      	it	cs
     878:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     87c:	4770      	bx	lr
     87e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     882:	bf3c      	itt	cc
     884:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     888:	4770      	bxcc	lr
     88a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     88e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     892:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     896:	4770      	bx	lr
     898:	ea7f 6222 	mvns.w	r2, r2, asr #24
     89c:	bf16      	itet	ne
     89e:	4608      	movne	r0, r1
     8a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     8a4:	4601      	movne	r1, r0
     8a6:	0242      	lsls	r2, r0, #9
     8a8:	bf06      	itte	eq
     8aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     8ae:	ea90 0f01 	teqeq	r0, r1
     8b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     8b6:	4770      	bx	lr

000008b8 <__aeabi_ui2f>:
     8b8:	f04f 0300 	mov.w	r3, #0
     8bc:	e004      	b.n	8c8 <__aeabi_i2f+0x8>
     8be:	bf00      	nop

000008c0 <__aeabi_i2f>:
     8c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     8c4:	bf48      	it	mi
     8c6:	4240      	negmi	r0, r0
     8c8:	ea5f 0c00 	movs.w	ip, r0
     8cc:	bf08      	it	eq
     8ce:	4770      	bxeq	lr
     8d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     8d4:	4601      	mov	r1, r0
     8d6:	f04f 0000 	mov.w	r0, #0
     8da:	e01c      	b.n	916 <__aeabi_l2f+0x2a>

000008dc <__aeabi_ul2f>:
     8dc:	ea50 0201 	orrs.w	r2, r0, r1
     8e0:	bf08      	it	eq
     8e2:	4770      	bxeq	lr
     8e4:	f04f 0300 	mov.w	r3, #0
     8e8:	e00a      	b.n	900 <__aeabi_l2f+0x14>
     8ea:	bf00      	nop

000008ec <__aeabi_l2f>:
     8ec:	ea50 0201 	orrs.w	r2, r0, r1
     8f0:	bf08      	it	eq
     8f2:	4770      	bxeq	lr
     8f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     8f8:	d502      	bpl.n	900 <__aeabi_l2f+0x14>
     8fa:	4240      	negs	r0, r0
     8fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     900:	ea5f 0c01 	movs.w	ip, r1
     904:	bf02      	ittt	eq
     906:	4684      	moveq	ip, r0
     908:	4601      	moveq	r1, r0
     90a:	2000      	moveq	r0, #0
     90c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     910:	bf08      	it	eq
     912:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     916:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     91a:	fabc f28c 	clz	r2, ip
     91e:	3a08      	subs	r2, #8
     920:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     924:	db10      	blt.n	948 <__aeabi_l2f+0x5c>
     926:	fa01 fc02 	lsl.w	ip, r1, r2
     92a:	4463      	add	r3, ip
     92c:	fa00 fc02 	lsl.w	ip, r0, r2
     930:	f1c2 0220 	rsb	r2, r2, #32
     934:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     938:	fa20 f202 	lsr.w	r2, r0, r2
     93c:	eb43 0002 	adc.w	r0, r3, r2
     940:	bf08      	it	eq
     942:	f020 0001 	biceq.w	r0, r0, #1
     946:	4770      	bx	lr
     948:	f102 0220 	add.w	r2, r2, #32
     94c:	fa01 fc02 	lsl.w	ip, r1, r2
     950:	f1c2 0220 	rsb	r2, r2, #32
     954:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     958:	fa21 f202 	lsr.w	r2, r1, r2
     95c:	eb43 0002 	adc.w	r0, r3, r2
     960:	bf08      	it	eq
     962:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     966:	4770      	bx	lr

00000968 <__aeabi_uldivmod>:
     968:	b953      	cbnz	r3, 980 <__aeabi_uldivmod+0x18>
     96a:	b94a      	cbnz	r2, 980 <__aeabi_uldivmod+0x18>
     96c:	2900      	cmp	r1, #0
     96e:	bf08      	it	eq
     970:	2800      	cmpeq	r0, #0
     972:	bf1c      	itt	ne
     974:	f04f 31ff 	movne.w	r1, #4294967295
     978:	f04f 30ff 	movne.w	r0, #4294967295
     97c:	f000 b96c 	b.w	c58 <__aeabi_idiv0>
     980:	f1ad 0c08 	sub.w	ip, sp, #8
     984:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     988:	f000 f806 	bl	998 <__udivmoddi4>
     98c:	f8dd e004 	ldr.w	lr, [sp, #4]
     990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     994:	b004      	add	sp, #16
     996:	4770      	bx	lr

00000998 <__udivmoddi4>:
     998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     99c:	9e08      	ldr	r6, [sp, #32]
     99e:	460d      	mov	r5, r1
     9a0:	4604      	mov	r4, r0
     9a2:	468e      	mov	lr, r1
     9a4:	2b00      	cmp	r3, #0
     9a6:	f040 8082 	bne.w	aae <__udivmoddi4+0x116>
     9aa:	428a      	cmp	r2, r1
     9ac:	4617      	mov	r7, r2
     9ae:	d946      	bls.n	a3e <__udivmoddi4+0xa6>
     9b0:	fab2 f282 	clz	r2, r2
     9b4:	b14a      	cbz	r2, 9ca <__udivmoddi4+0x32>
     9b6:	f1c2 0120 	rsb	r1, r2, #32
     9ba:	fa05 f302 	lsl.w	r3, r5, r2
     9be:	fa20 f101 	lsr.w	r1, r0, r1
     9c2:	4097      	lsls	r7, r2
     9c4:	ea41 0e03 	orr.w	lr, r1, r3
     9c8:	4094      	lsls	r4, r2
     9ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
     9ce:	0c23      	lsrs	r3, r4, #16
     9d0:	fbbe fcf8 	udiv	ip, lr, r8
     9d4:	b2b9      	uxth	r1, r7
     9d6:	fb08 ee1c 	mls	lr, r8, ip, lr
     9da:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     9de:	fb0c f001 	mul.w	r0, ip, r1
     9e2:	4298      	cmp	r0, r3
     9e4:	d90a      	bls.n	9fc <__udivmoddi4+0x64>
     9e6:	18fb      	adds	r3, r7, r3
     9e8:	f10c 35ff 	add.w	r5, ip, #4294967295
     9ec:	f080 8116 	bcs.w	c1c <__udivmoddi4+0x284>
     9f0:	4298      	cmp	r0, r3
     9f2:	f240 8113 	bls.w	c1c <__udivmoddi4+0x284>
     9f6:	f1ac 0c02 	sub.w	ip, ip, #2
     9fa:	443b      	add	r3, r7
     9fc:	1a1b      	subs	r3, r3, r0
     9fe:	b2a4      	uxth	r4, r4
     a00:	fbb3 f0f8 	udiv	r0, r3, r8
     a04:	fb08 3310 	mls	r3, r8, r0, r3
     a08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a0c:	fb00 f101 	mul.w	r1, r0, r1
     a10:	42a1      	cmp	r1, r4
     a12:	d909      	bls.n	a28 <__udivmoddi4+0x90>
     a14:	193c      	adds	r4, r7, r4
     a16:	f100 33ff 	add.w	r3, r0, #4294967295
     a1a:	f080 8101 	bcs.w	c20 <__udivmoddi4+0x288>
     a1e:	42a1      	cmp	r1, r4
     a20:	f240 80fe 	bls.w	c20 <__udivmoddi4+0x288>
     a24:	3802      	subs	r0, #2
     a26:	443c      	add	r4, r7
     a28:	1a64      	subs	r4, r4, r1
     a2a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a2e:	2100      	movs	r1, #0
     a30:	b11e      	cbz	r6, a3a <__udivmoddi4+0xa2>
     a32:	40d4      	lsrs	r4, r2
     a34:	2300      	movs	r3, #0
     a36:	e9c6 4300 	strd	r4, r3, [r6]
     a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a3e:	b902      	cbnz	r2, a42 <__udivmoddi4+0xaa>
     a40:	deff      	udf	#255	; 0xff
     a42:	fab2 f282 	clz	r2, r2
     a46:	2a00      	cmp	r2, #0
     a48:	d14f      	bne.n	aea <__udivmoddi4+0x152>
     a4a:	1bcb      	subs	r3, r1, r7
     a4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a50:	fa1f f887 	uxth.w	r8, r7
     a54:	2101      	movs	r1, #1
     a56:	fbb3 fcfe 	udiv	ip, r3, lr
     a5a:	0c25      	lsrs	r5, r4, #16
     a5c:	fb0e 331c 	mls	r3, lr, ip, r3
     a60:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a64:	fb08 f30c 	mul.w	r3, r8, ip
     a68:	42ab      	cmp	r3, r5
     a6a:	d907      	bls.n	a7c <__udivmoddi4+0xe4>
     a6c:	197d      	adds	r5, r7, r5
     a6e:	f10c 30ff 	add.w	r0, ip, #4294967295
     a72:	d202      	bcs.n	a7a <__udivmoddi4+0xe2>
     a74:	42ab      	cmp	r3, r5
     a76:	f200 80e7 	bhi.w	c48 <__udivmoddi4+0x2b0>
     a7a:	4684      	mov	ip, r0
     a7c:	1aed      	subs	r5, r5, r3
     a7e:	b2a3      	uxth	r3, r4
     a80:	fbb5 f0fe 	udiv	r0, r5, lr
     a84:	fb0e 5510 	mls	r5, lr, r0, r5
     a88:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a8c:	fb08 f800 	mul.w	r8, r8, r0
     a90:	45a0      	cmp	r8, r4
     a92:	d907      	bls.n	aa4 <__udivmoddi4+0x10c>
     a94:	193c      	adds	r4, r7, r4
     a96:	f100 33ff 	add.w	r3, r0, #4294967295
     a9a:	d202      	bcs.n	aa2 <__udivmoddi4+0x10a>
     a9c:	45a0      	cmp	r8, r4
     a9e:	f200 80d7 	bhi.w	c50 <__udivmoddi4+0x2b8>
     aa2:	4618      	mov	r0, r3
     aa4:	eba4 0408 	sub.w	r4, r4, r8
     aa8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     aac:	e7c0      	b.n	a30 <__udivmoddi4+0x98>
     aae:	428b      	cmp	r3, r1
     ab0:	d908      	bls.n	ac4 <__udivmoddi4+0x12c>
     ab2:	2e00      	cmp	r6, #0
     ab4:	f000 80af 	beq.w	c16 <__udivmoddi4+0x27e>
     ab8:	2100      	movs	r1, #0
     aba:	e9c6 0500 	strd	r0, r5, [r6]
     abe:	4608      	mov	r0, r1
     ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ac4:	fab3 f183 	clz	r1, r3
     ac8:	2900      	cmp	r1, #0
     aca:	d14b      	bne.n	b64 <__udivmoddi4+0x1cc>
     acc:	42ab      	cmp	r3, r5
     ace:	d302      	bcc.n	ad6 <__udivmoddi4+0x13e>
     ad0:	4282      	cmp	r2, r0
     ad2:	f200 80b7 	bhi.w	c44 <__udivmoddi4+0x2ac>
     ad6:	1a84      	subs	r4, r0, r2
     ad8:	eb65 0303 	sbc.w	r3, r5, r3
     adc:	2001      	movs	r0, #1
     ade:	469e      	mov	lr, r3
     ae0:	2e00      	cmp	r6, #0
     ae2:	d0aa      	beq.n	a3a <__udivmoddi4+0xa2>
     ae4:	e9c6 4e00 	strd	r4, lr, [r6]
     ae8:	e7a7      	b.n	a3a <__udivmoddi4+0xa2>
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa01 f302 	lsl.w	r3, r1, r2
     af2:	4097      	lsls	r7, r2
     af4:	fa20 f00c 	lsr.w	r0, r0, ip
     af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     afc:	fa21 fc0c 	lsr.w	ip, r1, ip
     b00:	4318      	orrs	r0, r3
     b02:	fbbc f1fe 	udiv	r1, ip, lr
     b06:	0c05      	lsrs	r5, r0, #16
     b08:	fb0e cc11 	mls	ip, lr, r1, ip
     b0c:	fa1f f887 	uxth.w	r8, r7
     b10:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     b14:	fb01 f308 	mul.w	r3, r1, r8
     b18:	42ab      	cmp	r3, r5
     b1a:	fa04 f402 	lsl.w	r4, r4, r2
     b1e:	d909      	bls.n	b34 <__udivmoddi4+0x19c>
     b20:	197d      	adds	r5, r7, r5
     b22:	f101 3cff 	add.w	ip, r1, #4294967295
     b26:	f080 808b 	bcs.w	c40 <__udivmoddi4+0x2a8>
     b2a:	42ab      	cmp	r3, r5
     b2c:	f240 8088 	bls.w	c40 <__udivmoddi4+0x2a8>
     b30:	3902      	subs	r1, #2
     b32:	443d      	add	r5, r7
     b34:	1aeb      	subs	r3, r5, r3
     b36:	b285      	uxth	r5, r0
     b38:	fbb3 f0fe 	udiv	r0, r3, lr
     b3c:	fb0e 3310 	mls	r3, lr, r0, r3
     b40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b44:	fb00 f308 	mul.w	r3, r0, r8
     b48:	42ab      	cmp	r3, r5
     b4a:	d907      	bls.n	b5c <__udivmoddi4+0x1c4>
     b4c:	197d      	adds	r5, r7, r5
     b4e:	f100 3cff 	add.w	ip, r0, #4294967295
     b52:	d271      	bcs.n	c38 <__udivmoddi4+0x2a0>
     b54:	42ab      	cmp	r3, r5
     b56:	d96f      	bls.n	c38 <__udivmoddi4+0x2a0>
     b58:	3802      	subs	r0, #2
     b5a:	443d      	add	r5, r7
     b5c:	1aeb      	subs	r3, r5, r3
     b5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     b62:	e778      	b.n	a56 <__udivmoddi4+0xbe>
     b64:	f1c1 0c20 	rsb	ip, r1, #32
     b68:	408b      	lsls	r3, r1
     b6a:	fa22 f70c 	lsr.w	r7, r2, ip
     b6e:	431f      	orrs	r7, r3
     b70:	fa20 f40c 	lsr.w	r4, r0, ip
     b74:	fa05 f301 	lsl.w	r3, r5, r1
     b78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b7c:	fa25 f50c 	lsr.w	r5, r5, ip
     b80:	431c      	orrs	r4, r3
     b82:	0c23      	lsrs	r3, r4, #16
     b84:	fbb5 f9fe 	udiv	r9, r5, lr
     b88:	fa1f f887 	uxth.w	r8, r7
     b8c:	fb0e 5519 	mls	r5, lr, r9, r5
     b90:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b94:	fb09 fa08 	mul.w	sl, r9, r8
     b98:	45aa      	cmp	sl, r5
     b9a:	fa02 f201 	lsl.w	r2, r2, r1
     b9e:	fa00 f301 	lsl.w	r3, r0, r1
     ba2:	d908      	bls.n	bb6 <__udivmoddi4+0x21e>
     ba4:	197d      	adds	r5, r7, r5
     ba6:	f109 30ff 	add.w	r0, r9, #4294967295
     baa:	d247      	bcs.n	c3c <__udivmoddi4+0x2a4>
     bac:	45aa      	cmp	sl, r5
     bae:	d945      	bls.n	c3c <__udivmoddi4+0x2a4>
     bb0:	f1a9 0902 	sub.w	r9, r9, #2
     bb4:	443d      	add	r5, r7
     bb6:	eba5 050a 	sub.w	r5, r5, sl
     bba:	b2a4      	uxth	r4, r4
     bbc:	fbb5 f0fe 	udiv	r0, r5, lr
     bc0:	fb0e 5510 	mls	r5, lr, r0, r5
     bc4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     bc8:	fb00 f808 	mul.w	r8, r0, r8
     bcc:	45a0      	cmp	r8, r4
     bce:	d907      	bls.n	be0 <__udivmoddi4+0x248>
     bd0:	193c      	adds	r4, r7, r4
     bd2:	f100 35ff 	add.w	r5, r0, #4294967295
     bd6:	d22d      	bcs.n	c34 <__udivmoddi4+0x29c>
     bd8:	45a0      	cmp	r8, r4
     bda:	d92b      	bls.n	c34 <__udivmoddi4+0x29c>
     bdc:	3802      	subs	r0, #2
     bde:	443c      	add	r4, r7
     be0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     be4:	eba4 0408 	sub.w	r4, r4, r8
     be8:	fba0 8902 	umull	r8, r9, r0, r2
     bec:	454c      	cmp	r4, r9
     bee:	46c6      	mov	lr, r8
     bf0:	464d      	mov	r5, r9
     bf2:	d319      	bcc.n	c28 <__udivmoddi4+0x290>
     bf4:	d016      	beq.n	c24 <__udivmoddi4+0x28c>
     bf6:	b15e      	cbz	r6, c10 <__udivmoddi4+0x278>
     bf8:	ebb3 020e 	subs.w	r2, r3, lr
     bfc:	eb64 0405 	sbc.w	r4, r4, r5
     c00:	fa04 fc0c 	lsl.w	ip, r4, ip
     c04:	40ca      	lsrs	r2, r1
     c06:	ea4c 0202 	orr.w	r2, ip, r2
     c0a:	40cc      	lsrs	r4, r1
     c0c:	e9c6 2400 	strd	r2, r4, [r6]
     c10:	2100      	movs	r1, #0
     c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c16:	4631      	mov	r1, r6
     c18:	4630      	mov	r0, r6
     c1a:	e70e      	b.n	a3a <__udivmoddi4+0xa2>
     c1c:	46ac      	mov	ip, r5
     c1e:	e6ed      	b.n	9fc <__udivmoddi4+0x64>
     c20:	4618      	mov	r0, r3
     c22:	e701      	b.n	a28 <__udivmoddi4+0x90>
     c24:	4543      	cmp	r3, r8
     c26:	d2e6      	bcs.n	bf6 <__udivmoddi4+0x25e>
     c28:	ebb8 0e02 	subs.w	lr, r8, r2
     c2c:	eb69 0507 	sbc.w	r5, r9, r7
     c30:	3801      	subs	r0, #1
     c32:	e7e0      	b.n	bf6 <__udivmoddi4+0x25e>
     c34:	4628      	mov	r0, r5
     c36:	e7d3      	b.n	be0 <__udivmoddi4+0x248>
     c38:	4660      	mov	r0, ip
     c3a:	e78f      	b.n	b5c <__udivmoddi4+0x1c4>
     c3c:	4681      	mov	r9, r0
     c3e:	e7ba      	b.n	bb6 <__udivmoddi4+0x21e>
     c40:	4661      	mov	r1, ip
     c42:	e777      	b.n	b34 <__udivmoddi4+0x19c>
     c44:	4608      	mov	r0, r1
     c46:	e74b      	b.n	ae0 <__udivmoddi4+0x148>
     c48:	f1ac 0c02 	sub.w	ip, ip, #2
     c4c:	443d      	add	r5, r7
     c4e:	e715      	b.n	a7c <__udivmoddi4+0xe4>
     c50:	3802      	subs	r0, #2
     c52:	443c      	add	r4, r7
     c54:	e726      	b.n	aa4 <__udivmoddi4+0x10c>
     c56:	bf00      	nop

00000c58 <__aeabi_idiv0>:
     c58:	4770      	bx	lr
     c5a:	bf00      	nop
     c5c:	0000      	movs	r0, r0
	...

00000c60 <max30208_read_temp>:
        printk("READING FROM MAX30208 FIFO : FAILED\n");
    return rslt;
}

u16_t max30208_read_temp(float * value)
{
     c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
     c62:	4605      	mov	r5, r0
    int temp;
    u16_t rslt=0x00;
     rslt|=max30208_read_fifo(&temp);
     c64:	a801      	add	r0, sp, #4
     c66:	f000 fd07 	bl	1678 <max30208_read_fifo>
    if(temp & 0x8000)
     c6a:	9b01      	ldr	r3, [sp, #4]
     c6c:	041a      	lsls	r2, r3, #16
    {
        temp=~(temp-1);
     c6e:	bf44      	itt	mi
     c70:	425b      	negmi	r3, r3
     c72:	9301      	strmi	r3, [sp, #4]
     rslt|=max30208_read_fifo(&temp);
     c74:	4604      	mov	r4, r0
    }
    *value = (float)temp * 0.005;
     c76:	9801      	ldr	r0, [sp, #4]
     c78:	f7ff fe22 	bl	8c0 <__aeabi_i2f>
     c7c:	f7ff fcbe 	bl	5fc <__aeabi_f2d>
     c80:	a305      	add	r3, pc, #20	; (adr r3, c98 <max30208_read_temp+0x38>)
     c82:	e9d3 2300 	ldrd	r2, r3, [r3]
     c86:	f7ff fa2b 	bl	e0 <__aeabi_dmul>
     c8a:	f7ff fd0f 	bl	6ac <__aeabi_d2f>
     c8e:	6028      	str	r0, [r5, #0]
    return rslt;
     c90:	4620      	mov	r0, r4
     c92:	b003      	add	sp, #12
     c94:	bd30      	pop	{r4, r5, pc}
     c96:	bf00      	nop
     c98:	47ae147b 	.word	0x47ae147b
     c9c:	3f747ae1 	.word	0x3f747ae1

00000ca0 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
     ca2:	2301      	movs	r3, #1
{
     ca4:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
     ca6:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
     ca8:	9302      	str	r3, [sp, #8]
     caa:	230c      	movs	r3, #12
     cac:	2600      	movs	r6, #0
     cae:	9304      	str	r3, [sp, #16]
     cb0:	4f29      	ldr	r7, [pc, #164]	; (d58 <AnalogRead+0xb8>)
     cb2:	9601      	str	r6, [sp, #4]
     cb4:	230a      	movs	r3, #10
{
     cb6:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
     cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
     cbc:	9703      	str	r7, [sp, #12]
     cbe:	f88d 6016 	strb.w	r6, [sp, #22]
	struct device *adc_dev = getAdcDevice();
     cc2:	f000 fd03 	bl	16cc <getAdcDevice>
	if(_LastChannel != channel)
     cc6:	4b25      	ldr	r3, [pc, #148]	; (d5c <AnalogRead+0xbc>)
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	4295      	cmp	r5, r2
	struct device *adc_dev = getAdcDevice();
     ccc:	4604      	mov	r4, r0
	if(_LastChannel != channel)
     cce:	d00c      	beq.n	cea <AnalogRead+0x4a>
		_IsInitialized = false;
     cd0:	4a23      	ldr	r2, [pc, #140]	; (d60 <AnalogRead+0xc0>)
		_LastChannel = channel;
     cd2:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
     cd4:	7016      	strb	r6, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
     cd6:	b970      	cbnz	r0, cf6 <AnalogRead+0x56>
{
     cd8:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
     cda:	481f      	ldr	r0, [pc, #124]	; (d58 <AnalogRead+0xb8>)
     cdc:	220c      	movs	r2, #12
     cde:	2100      	movs	r1, #0
     ce0:	f005 f9c8 	bl	6074 <memset>
	if (adc_dev)
     ce4:	b9c4      	cbnz	r4, d18 <AnalogRead+0x78>

	s16_t sv = readOneChannel(channel);
	if(sv == -1)
	{
		return sv;
     ce6:	481f      	ldr	r0, [pc, #124]	; (d64 <AnalogRead+0xc4>)
     ce8:	e02e      	b.n	d48 <AnalogRead+0xa8>
	if ( adc_dev != NULL && !_IsInitialized)
     cea:	2800      	cmp	r0, #0
     cec:	d0f4      	beq.n	cd8 <AnalogRead+0x38>
     cee:	4b1c      	ldr	r3, [pc, #112]	; (d60 <AnalogRead+0xc0>)
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d1f1      	bne.n	cda <AnalogRead+0x3a>
		m_1st_channel_cfg.channel_id = channel;
     cf6:	491c      	ldr	r1, [pc, #112]	; (d68 <AnalogRead+0xc8>)
     cf8:	790b      	ldrb	r3, [r1, #4]
     cfa:	f365 0304 	bfi	r3, r5, #0, #5
        m_1st_channel_cfg.input_positive = channel+1,
     cfe:	3501      	adds	r5, #1
		m_1st_channel_cfg.channel_id = channel;
     d00:	710b      	strb	r3, [r1, #4]
        m_1st_channel_cfg.input_positive = channel+1,
     d02:	714d      	strb	r5, [r1, #5]
				const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->driver_api;

	return api->channel_setup(dev, channel_cfg);
     d04:	68a3      	ldr	r3, [r4, #8]
     d06:	4620      	mov	r0, r4
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	4798      	blx	r3
		if(ret != 0)
     d0c:	2800      	cmp	r0, #0
     d0e:	d1e3      	bne.n	cd8 <AnalogRead+0x38>
			_IsInitialized = true;	// we don't have any other analog users
     d10:	4b13      	ldr	r3, [pc, #76]	; (d60 <AnalogRead+0xc0>)
     d12:	2201      	movs	r2, #1
     d14:	701a      	strb	r2, [r3, #0]
     d16:	e7e0      	b.n	cda <AnalogRead+0x3a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->driver_api;

	return api->read(dev, sequence);
     d18:	68a3      	ldr	r3, [r4, #8]
     d1a:	a901      	add	r1, sp, #4
     d1c:	685b      	ldr	r3, [r3, #4]
     d1e:	4620      	mov	r0, r4
     d20:	4798      	blx	r3
		if(ret == 0)
     d22:	2800      	cmp	r0, #0
     d24:	d1df      	bne.n	ce6 <AnalogRead+0x46>
			sample_value = m_sample_buffer[0];
     d26:	f9b7 0000 	ldrsh.w	r0, [r7]
	if(sv == -1)
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	d0db      	beq.n	ce6 <AnalogRead+0x46>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
     d2e:	f7ff fc53 	bl	5d8 <__aeabi_i2d>
     d32:	a307      	add	r3, pc, #28	; (adr r3, d50 <AnalogRead+0xb0>)
     d34:	e9d3 2300 	ldrd	r2, r3, [r3]
     d38:	f7ff f9d2 	bl	e0 <__aeabi_dmul>
     d3c:	4b0b      	ldr	r3, [pc, #44]	; (d6c <AnalogRead+0xcc>)
     d3e:	2200      	movs	r2, #0
     d40:	f7ff f9ce 	bl	e0 <__aeabi_dmul>
     d44:	f7ff fcb2 	bl	6ac <__aeabi_d2f>
	return fout;
     d48:	b007      	add	sp, #28
     d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4c:	f3af 8000 	nop.w
     d50:	cccccccd 	.word	0xcccccccd
     d54:	400ccccc 	.word	0x400ccccc
     d58:	20000558 	.word	0x20000558
     d5c:	2000015c 	.word	0x2000015c
     d60:	20000565 	.word	0x20000565
     d64:	bf800000 	.word	0xbf800000
     d68:	20000154 	.word	0x20000154
     d6c:	3f500000 	.word	0x3f500000

00000d70 <main>:
/**
 * @file Enverse Smart Wearable Firmware
 */

void main(void)
{
     d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printk("\n\n Booting Enverse Smart Watch \n\n");
     d74:	4825      	ldr	r0, [pc, #148]	; (e0c <main+0x9c>)
		u32_t red, ir;
		max30102_read_fifo(&red, &ir);

		//printf("%d \n", ir);
		//read_heart_rate_spio2();
		printf("Steps= %d. Temperature = %.2f . Light = %f . Red = %d . IR = %d\n", getStepCounterOutput(),temp_data,light_data,red,ir);
     d76:	f8df 8098 	ldr.w	r8, [pc, #152]	; e10 <main+0xa0>
{
     d7a:	b089      	sub	sp, #36	; 0x24
	printk("\n\n Booting Enverse Smart Watch \n\n");
     d7c:	f004 fffb 	bl	5d76 <printk>
	initialize_bma();
     d80:	f000 f88c 	bl	e9c <initialize_bma>
	stepCounterEnable();
     d84:	f000 f8e6 	bl	f54 <stepCounterEnable>
	init_latch();
     d88:	f000 fb76 	bl	1478 <init_latch>
	init_max30102();
     d8c:	f000 faf2 	bl	1374 <init_max30102>
	set_max30102_for_reading_data();
     d90:	f004 ff2a 	bl	5be8 <set_max30102_for_reading_data>
	init_max30208();
     d94:	f000 fc1c 	bl	15d0 <init_max30208>
	configure_max30208();
     d98:	f000 fc38 	bl	160c <configure_max30208>
	init_output();
     d9c:	f000 fc9c 	bl	16d8 <init_output>
		float temp_data=0,light_data=0;
     da0:	f04f 0900 	mov.w	r9, #0
		if(detect_latch()==0)
     da4:	f000 fbcc 	bl	1540 <detect_latch>
     da8:	b928      	cbnz	r0, db6 <main+0x46>
                    toggle_buzzer(1);
     daa:	2001      	movs	r0, #1
     dac:	f000 fcd4 	bl	1758 <toggle_buzzer>
                    toggle_motor(1);
     db0:	2001      	movs	r0, #1
     db2:	f000 fceb 	bl	178c <toggle_motor>
		        max30208_read_temp(&temp_data);
     db6:	a805      	add	r0, sp, #20
		float temp_data=0,light_data=0;
     db8:	f8cd 9014 	str.w	r9, [sp, #20]
		        max30208_read_temp(&temp_data);
     dbc:	f7ff ff50 	bl	c60 <max30208_read_temp>
		light_data=AnalogRead(4);
     dc0:	2004      	movs	r0, #4
     dc2:	f7ff ff6d 	bl	ca0 <AnalogRead>
		max30102_read_fifo(&red, &ir);
     dc6:	a907      	add	r1, sp, #28
		light_data=AnalogRead(4);
     dc8:	4605      	mov	r5, r0
		max30102_read_fifo(&red, &ir);
     dca:	a806      	add	r0, sp, #24
     dcc:	f000 faee 	bl	13ac <max30102_read_fifo>
		printf("Steps= %d. Temperature = %.2f . Light = %f . Red = %d . IR = %d\n", getStepCounterOutput(),temp_data,light_data,red,ir);
     dd0:	f000 f962 	bl	1098 <getStepCounterOutput>
     dd4:	4604      	mov	r4, r0
     dd6:	9805      	ldr	r0, [sp, #20]
     dd8:	f7ff fc10 	bl	5fc <__aeabi_f2d>
     ddc:	9b07      	ldr	r3, [sp, #28]
     dde:	9303      	str	r3, [sp, #12]
     de0:	4606      	mov	r6, r0
     de2:	9b06      	ldr	r3, [sp, #24]
     de4:	9302      	str	r3, [sp, #8]
     de6:	4628      	mov	r0, r5
     de8:	460f      	mov	r7, r1
     dea:	f7ff fc07 	bl	5fc <__aeabi_f2d>
     dee:	4632      	mov	r2, r6
     df0:	e9cd 0100 	strd	r0, r1, [sp]
     df4:	463b      	mov	r3, r7
     df6:	4621      	mov	r1, r4
     df8:	4640      	mov	r0, r8
     dfa:	f002 f8c5 	bl	2f88 <printf>
	return z_impl_k_sleep(timeout);
     dfe:	2100      	movs	r1, #0
     e00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     e04:	f004 f8a2 	bl	4f4c <z_impl_k_sleep>
	{
     e08:	e7cc      	b.n	da4 <main+0x34>
     e0a:	bf00      	nop
     e0c:	00006d94 	.word	0x00006d94
     e10:	00006db6 	.word	0x00006db6

00000e14 <bma_i2c_write>:
    return ret;
}

/* BMA i2c write function */
static uint16_t bma_i2c_write(uint8_t reg, uint8_t *data, uint16_t len, void *intf_ptr)
{
     e14:	b570      	push	{r4, r5, r6, lr}
     e16:	4606      	mov	r6, r0
     e18:	b088      	sub	sp, #32
     e1a:	460d      	mov	r5, r1
     e1c:	4614      	mov	r4, r2
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     e1e:	480d      	ldr	r0, [pc, #52]	; (e54 <bma_i2c_write+0x40>)
     e20:	f003 fca4 	bl	476c <z_impl_device_get_binding>
				  const u8_t *buf,
				  u32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
     e24:	f10d 0207 	add.w	r2, sp, #7
     e28:	9202      	str	r2, [sp, #8]
	msg[0].len = 1U;
     e2a:	2201      	movs	r2, #1
     e2c:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
     e2e:	2200      	movs	r2, #0
     e30:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (u8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     e34:	2202      	movs	r2, #2
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
     e36:	e9cd 5405 	strd	r5, r4, [sp, #20]
     e3a:	f88d 6007 	strb.w	r6, [sp, #7]
     e3e:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
     e42:	6883      	ldr	r3, [r0, #8]
     e44:	a902      	add	r1, sp, #8
     e46:	685c      	ldr	r4, [r3, #4]
     e48:	2319      	movs	r3, #25
     e4a:	47a0      	blx	r4
}
     e4c:	b2c0      	uxtb	r0, r0
     e4e:	b008      	add	sp, #32
     e50:	bd70      	pop	{r4, r5, r6, pc}
     e52:	bf00      	nop
     e54:	00006df7 	.word	0x00006df7

00000e58 <bma_i2c_read>:

/* BMA i2c read function */
static uint16_t bma_i2c_read(u8_t reg, u8_t *data, u16_t len, void *intf_ptr)
{
     e58:	b570      	push	{r4, r5, r6, lr}
     e5a:	4606      	mov	r6, r0
     e5c:	b088      	sub	sp, #32
     e5e:	460d      	mov	r5, r1
     e60:	4614      	mov	r4, r2
     e62:	480d      	ldr	r0, [pc, #52]	; (e98 <bma_i2c_read+0x40>)
     e64:	f003 fc82 	bl	476c <z_impl_device_get_binding>
	msg[0].buf = (u8_t *)write_buf;
     e68:	f10d 0207 	add.w	r2, sp, #7
     e6c:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
     e6e:	2201      	movs	r2, #1
     e70:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
     e72:	2200      	movs	r2, #0
     e74:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     e78:	2207      	movs	r2, #7
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
     e7a:	e9cd 5405 	strd	r5, r4, [sp, #20]
     e7e:	f88d 6007 	strb.w	r6, [sp, #7]
     e82:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
     e86:	6883      	ldr	r3, [r0, #8]
     e88:	2202      	movs	r2, #2
     e8a:	685c      	ldr	r4, [r3, #4]
     e8c:	a902      	add	r1, sp, #8
     e8e:	2319      	movs	r3, #25
     e90:	47a0      	blx	r4
}
     e92:	b2c0      	uxtb	r0, r0
     e94:	b008      	add	sp, #32
     e96:	bd70      	pop	{r4, r5, r6, pc}
     e98:	00006df7 	.word	0x00006df7

00000e9c <initialize_bma>:
    k_busy_wait(ms);
}

/*Initialise BMA sensor */
void initialize_bma()
{
     e9c:	b530      	push	{r4, r5, lr}
     e9e:	b08d      	sub	sp, #52	; 0x34
     ea0:	4820      	ldr	r0, [pc, #128]	; (f24 <initialize_bma+0x88>)
     ea2:	f003 fc63 	bl	476c <z_impl_device_get_binding>
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    if (!i2c_dev)
     ea6:	b920      	cbnz	r0, eb2 <initialize_bma+0x16>
    {
        printk("I2C: Device driver not found.\n");
     ea8:	481f      	ldr	r0, [pc, #124]	; (f28 <initialize_bma+0x8c>)
     eaa:	f004 ff64 	bl	5d76 <printk>
    if (rslt == BMA4_OK)
        printk("Writing config file : OK\n");
    else
        printk("Writing config file : FAILED!!!\n");
    bma456_device_global = bma456_device;
}
     eae:	b00d      	add	sp, #52	; 0x34
     eb0:	bd30      	pop	{r4, r5, pc}
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
     eb2:	4b1e      	ldr	r3, [pc, #120]	; (f2c <initialize_bma+0x90>)
    bma456_device.intf_ptr = &dev_addr;
     eb4:	9301      	str	r3, [sp, #4]
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
     eb6:	2219      	movs	r2, #25
     eb8:	701a      	strb	r2, [r3, #0]
    bma456_device.bus_read = bma_i2c_read;
     eba:	4a1d      	ldr	r2, [pc, #116]	; (f30 <initialize_bma+0x94>)
     ebc:	9208      	str	r2, [sp, #32]
    bma456_device.bus_write = bma_i2c_write;
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <initialize_bma+0x98>)
     ec0:	9209      	str	r2, [sp, #36]	; 0x24
    bma456_device.delay_us = bma_delay_us;
     ec2:	4a1d      	ldr	r2, [pc, #116]	; (f38 <initialize_bma+0x9c>)
     ec4:	920a      	str	r2, [sp, #40]	; 0x28
    bma456_device.read_write_len = 8;
     ec6:	2208      	movs	r2, #8
     ec8:	f8ad 2014 	strh.w	r2, [sp, #20]
    bma456_device.resolution = 12;
     ecc:	220c      	movs	r2, #12
     ece:	f88d 200c 	strb.w	r2, [sp, #12]
    rslt |= bma456_init(&bma456_device);
     ed2:	4668      	mov	r0, sp
    bma456_device.feature_len = BMA456_FEATURE_SIZE;
     ed4:	2246      	movs	r2, #70	; 0x46
     ed6:	f88d 2016 	strb.w	r2, [sp, #22]
    rslt |= bma456_init(&bma456_device);
     eda:	f004 fd77 	bl	59cc <bma456_init>
    if (rslt == BMA4_OK)
     ede:	b9e0      	cbnz	r0, f1a <initialize_bma+0x7e>
        printk("Communication with BMA : OK\n");
     ee0:	4816      	ldr	r0, [pc, #88]	; (f3c <initialize_bma+0xa0>)
        printk("Communication with BMA : FAILED!!! \n");
     ee2:	f004 ff48 	bl	5d76 <printk>
    bma4_set_command_register(0xB6, &accel);
     ee6:	4916      	ldr	r1, [pc, #88]	; (f40 <initialize_bma+0xa4>)
     ee8:	20b6      	movs	r0, #182	; 0xb6
     eea:	f004 fd5e 	bl	59aa <bma4_set_command_register>
     eee:	2021      	movs	r0, #33	; 0x21
     ef0:	2100      	movs	r1, #0
     ef2:	f004 f82b 	bl	4f4c <z_impl_k_sleep>
    rslt |= bma456_write_config_file(&bma456_device);
     ef6:	4668      	mov	r0, sp
     ef8:	f000 f9de 	bl	12b8 <bma456_write_config_file>
    if (rslt == BMA4_OK)
     efc:	b978      	cbnz	r0, f1e <initialize_bma+0x82>
        printk("Writing config file : OK\n");
     efe:	4811      	ldr	r0, [pc, #68]	; (f44 <initialize_bma+0xa8>)
    bma456_device_global = bma456_device;
     f00:	4d11      	ldr	r5, [pc, #68]	; (f48 <initialize_bma+0xac>)
     f02:	466c      	mov	r4, sp
        printk("Writing config file : FAILED!!!\n");
     f04:	f004 ff37 	bl	5d76 <printk>
    bma456_device_global = bma456_device;
     f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     f14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     f18:	e7c9      	b.n	eae <initialize_bma+0x12>
        printk("Communication with BMA : FAILED!!! \n");
     f1a:	480c      	ldr	r0, [pc, #48]	; (f4c <initialize_bma+0xb0>)
     f1c:	e7e1      	b.n	ee2 <initialize_bma+0x46>
        printk("Writing config file : FAILED!!!\n");
     f1e:	480c      	ldr	r0, [pc, #48]	; (f50 <initialize_bma+0xb4>)
     f20:	e7ee      	b.n	f00 <initialize_bma+0x64>
     f22:	bf00      	nop
     f24:	00006df7 	.word	0x00006df7
     f28:	00006dfd 	.word	0x00006dfd
     f2c:	20000564 	.word	0x20000564
     f30:	00000e59 	.word	0x00000e59
     f34:	00000e15 	.word	0x00000e15
     f38:	000054e9 	.word	0x000054e9
     f3c:	00006e1c 	.word	0x00006e1c
     f40:	20000200 	.word	0x20000200
     f44:	00006e5e 	.word	0x00006e5e
     f48:	20000230 	.word	0x20000230
     f4c:	00006e39 	.word	0x00006e39
     f50:	00006e78 	.word	0x00006e78

00000f54 <stepCounterEnable>:
    bma456_device_global = bma456_device;
    return data;
}

u16_t stepCounterEnable()
{
     f54:	b570      	push	{r4, r5, r6, lr}
    struct bma4_accel sens_data;
    struct bma4_dev bma456_device = bma456_device_global;
     f56:	4d3e      	ldr	r5, [pc, #248]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
     f5a:	b08c      	sub	sp, #48	; 0x30
    struct bma4_dev bma456_device = bma456_device_global;
     f5c:	466c      	mov	r4, sp
     f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     f64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    // /* Soft-reset */
    rslt |= bma4_set_command_register(0xB6, &bma456_device);
     f6c:	4669      	mov	r1, sp
     f6e:	20b6      	movs	r0, #182	; 0xb6
     f70:	f004 fd1b 	bl	59aa <bma4_set_command_register>
    if (rslt == BMA4_OK)
     f74:	4604      	mov	r4, r0
     f76:	b988      	cbnz	r0, f9c <stepCounterEnable+0x48>
        printk("Soft reset before enabling step counter : OK\n");
     f78:	4836      	ldr	r0, [pc, #216]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    else
        printk("Soft reset before enabling step counter : FAILED!!!\n");
     f7a:	f004 fefc 	bl	5d76 <printk>
     f7e:	2100      	movs	r1, #0
     f80:	2021      	movs	r0, #33	; 0x21
     f82:	f003 ffe3 	bl	4f4c <z_impl_k_sleep>
    k_msleep(1);

    /* Initialize BMA456 */
    rslt |= bma456_init(&bma456_device);
     f86:	4668      	mov	r0, sp
     f88:	f004 fd20 	bl	59cc <bma456_init>
     f8c:	4304      	orrs	r4, r0
     f8e:	b260      	sxtb	r0, r4
     f90:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
     f92:	b12c      	cbz	r4, fa0 <stepCounterEnable+0x4c>
    {
        printk("Testing communication with BMA : FAILED!!!\n");
     f94:	4830      	ldr	r0, [pc, #192]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
        return rslt;
    }
    else
        printk("Setting watermark : OK\n");
    bma456_device_global = bma456_device;
    printk("Step counter init : OK\n");
     f96:	f004 feee 	bl	5d76 <printk>
    return rslt;
     f9a:	e03b      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
        printk("Soft reset before enabling step counter : FAILED!!!\n");
     f9c:	482f      	ldr	r0, [pc, #188]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
     f9e:	e7ec      	b.n	f7a <stepCounterEnable+0x26>
        printk("Testing communication with BMA : OK\n");
     fa0:	482f      	ldr	r0, [pc, #188]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
     fa2:	f004 fee8 	bl	5d76 <printk>
    rslt = bma4_set_accel_enable(0x01, &bma456_device);
     fa6:	4669      	mov	r1, sp
     fa8:	2001      	movs	r0, #1
     faa:	f004 fcd9 	bl	5960 <bma4_set_accel_enable>
     fae:	b284      	uxth	r4, r0
    if (rslt == BMA4_OK)
     fb0:	b94c      	cbnz	r4, fc6 <stepCounterEnable+0x72>
        printk("Enabling accelerometer : OK\n");
     fb2:	482c      	ldr	r0, [pc, #176]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
     fb4:	f004 fedf 	bl	5d76 <printk>
    rslt = bma456_reset_step_counter(&bma456_device);
     fb8:	4668      	mov	r0, sp
     fba:	f004 fdd2 	bl	5b62 <bma456_reset_step_counter>
     fbe:	b284      	uxth	r4, r0
    if (rslt == BMA4_OK)
     fc0:	b11c      	cbz	r4, fca <stepCounterEnable+0x76>
        printk("Resetting stepcounter : FAILED!!!\n");
     fc2:	4829      	ldr	r0, [pc, #164]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
     fc4:	e7e7      	b.n	f96 <stepCounterEnable+0x42>
        printk("Enabling accelerometer : FAILED!!!\n");
     fc6:	4829      	ldr	r0, [pc, #164]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
     fc8:	e7e5      	b.n	f96 <stepCounterEnable+0x42>
        printk("Resetting stepcounter : OK\n");
     fca:	4829      	ldr	r0, [pc, #164]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fcc:	f004 fed3 	bl	5d76 <printk>
    rslt = bma456_write_config_file(&bma456_device);
     fd0:	4668      	mov	r0, sp
     fd2:	f000 f971 	bl	12b8 <bma456_write_config_file>
     fd6:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
     fd8:	b10c      	cbz	r4, fde <stepCounterEnable+0x8a>
        printk("Load configuration file : FAILED!!!\n");
     fda:	4826      	ldr	r0, [pc, #152]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
     fdc:	e7db      	b.n	f96 <stepCounterEnable+0x42>
        printk("Load configuration file: OK\n");
     fde:	4826      	ldr	r0, [pc, #152]	; (1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
     fe0:	f004 fec9 	bl	5d76 <printk>
    rslt = bma456_feature_enable(BMA456_STEP_CNTR, 1, &bma456_device);
     fe4:	2101      	movs	r1, #1
     fe6:	466a      	mov	r2, sp
     fe8:	4608      	mov	r0, r1
     fea:	f004 fd17 	bl	5a1c <bma456_feature_enable>
     fee:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
     ff0:	b10c      	cbz	r4, ff6 <stepCounterEnable+0xa2>
        printk("Enabling step counter : FAILED!!!\n");
     ff2:	4822      	ldr	r0, [pc, #136]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
     ff4:	e7cf      	b.n	f96 <stepCounterEnable+0x42>
        printk("Enabling step counter : OK\n");
     ff6:	4822      	ldr	r0, [pc, #136]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     ff8:	f004 febd 	bl	5d76 <printk>
    rslt = bma456_map_interrupt(BMA4_INTR1_MAP, BMA456_STEP_CNTR_INT, 1, &bma456_device);
     ffc:	4620      	mov	r0, r4
     ffe:	466b      	mov	r3, sp
    1000:	2201      	movs	r2, #1
    1002:	2102      	movs	r1, #2
    1004:	f004 fcf6 	bl	59f4 <bma456_map_interrupt>
    1008:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    100a:	b134      	cbz	r4, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
        printk("Mapping Step counter interrupt : FAILED!!!\n Error code: %d\n", rslt);
    100c:	481d      	ldr	r0, [pc, #116]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    100e:	4621      	mov	r1, r4
        printk("Setting watermark : FAILED!!!\n Error code: %d\n", rslt);
    1010:	f004 feb1 	bl	5d76 <printk>
}
    1014:	4620      	mov	r0, r4
    1016:	b00c      	add	sp, #48	; 0x30
    1018:	bd70      	pop	{r4, r5, r6, pc}
        printk("Mapping Step counter interrupt : OK\n");
    101a:	481b      	ldr	r0, [pc, #108]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    101c:	f004 feab 	bl	5d76 <printk>
    rslt = bma456_step_counter_set_watermark(1, &bma456_device);
    1020:	4669      	mov	r1, sp
    1022:	2001      	movs	r0, #1
    1024:	f004 fd71 	bl	5b0a <bma456_step_counter_set_watermark>
    1028:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    102a:	b114      	cbz	r4, 1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
        printk("Setting watermark : FAILED!!!\n Error code: %d\n", rslt);
    102c:	4817      	ldr	r0, [pc, #92]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    102e:	4621      	mov	r1, r4
    1030:	e7ee      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
        printk("Setting watermark : OK\n");
    1032:	4817      	ldr	r0, [pc, #92]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    bma456_device_global = bma456_device;
    1034:	4e06      	ldr	r6, [pc, #24]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    1036:	466d      	mov	r5, sp
        printk("Setting watermark : OK\n");
    1038:	f004 fe9d 	bl	5d76 <printk>
    bma456_device_global = bma456_device;
    103c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    103e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1042:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1048:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    printk("Step counter init : OK\n");
    104c:	4811      	ldr	r0, [pc, #68]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    104e:	e7a2      	b.n	f96 <stepCounterEnable+0x42>
    1050:	20000230 	.word	0x20000230
    1054:	00006e99 	.word	0x00006e99
    1058:	00006efc 	.word	0x00006efc
    105c:	00006ec7 	.word	0x00006ec7
    1060:	00006f28 	.word	0x00006f28
    1064:	00006f4d 	.word	0x00006f4d
    1068:	00006faa 	.word	0x00006faa
    106c:	00006f6a 	.word	0x00006f6a
    1070:	00006f8e 	.word	0x00006f8e
    1074:	00006fcd 	.word	0x00006fcd
    1078:	00006ff2 	.word	0x00006ff2
    107c:	0000700f 	.word	0x0000700f
    1080:	00007032 	.word	0x00007032
    1084:	0000704e 	.word	0x0000704e
    1088:	0000708a 	.word	0x0000708a
    108c:	000070af 	.word	0x000070af
    1090:	000070de 	.word	0x000070de
    1094:	000070f6 	.word	0x000070f6

00001098 <getStepCounterOutput>:

u32_t getStepCounterOutput()
{
    1098:	b530      	push	{r4, r5, lr}
    struct bma4_dev bma456_device = bma456_device_global;
    109a:	4d0c      	ldr	r5, [pc, #48]	; (10cc <getStepCounterOutput+0x34>)
    109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    109e:	b08f      	sub	sp, #60	; 0x3c
    struct bma4_dev bma456_device = bma456_device_global;
    10a0:	ac02      	add	r4, sp, #8
    10a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    10ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    uint32_t step_out = 0;
    10b0:	2300      	movs	r3, #0
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    10b2:	a902      	add	r1, sp, #8
    10b4:	a801      	add	r0, sp, #4
    uint32_t step_out = 0;
    10b6:	9301      	str	r3, [sp, #4]
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    10b8:	f004 fd7b 	bl	5bb2 <bma456_step_counter_output>
    if (rslt == BMA4_OK)
    10bc:	b110      	cbz	r0, 10c4 <getStepCounterOutput+0x2c>
    {
        //printk("\nSteps counter output is %u\r\n", step_out);
    }
    else
    {
        printk("Reading step count : FAILED\n");
    10be:	4804      	ldr	r0, [pc, #16]	; (10d0 <getStepCounterOutput+0x38>)
    10c0:	f004 fe59 	bl	5d76 <printk>
    }
    return step_out;
    10c4:	9801      	ldr	r0, [sp, #4]
    10c6:	b00f      	add	sp, #60	; 0x3c
    10c8:	bd30      	pop	{r4, r5, pc}
    10ca:	bf00      	nop
    10cc:	20000230 	.word	0x20000230
    10d0:	0000710e 	.word	0x0000710e

000010d4 <bma4_write_config_file>:

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 */
int8_t bma4_write_config_file(struct bma4_dev *dev)
{
    10d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    10d6:	4605      	mov	r5, r0
    uint8_t config_load = 0;
    uint16_t index = 0;
    uint8_t config_stream_status = 0;

    /* Disable advanced power save */
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    10d8:	4629      	mov	r1, r5
    uint8_t config_load = 0;
    10da:	2000      	movs	r0, #0
    10dc:	f88d 0004 	strb.w	r0, [sp, #4]
    uint8_t config_stream_status = 0;
    10e0:	f88d 0005 	strb.w	r0, [sp, #5]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    10e4:	f004 fb69 	bl	57ba <bma4_set_advance_power_save>

    /* Wait for sensor time synchronization. Refer the data-sheet for
     * more information
     */
    dev->delay_us(450, dev->intf_ptr);
    10e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10ea:	6869      	ldr	r1, [r5, #4]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    10ec:	4604      	mov	r4, r0
    dev->delay_us(450, dev->intf_ptr);
    10ee:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    10f2:	4798      	blx	r3
    if (rslt == BMA4_OK)
    10f4:	b94c      	cbnz	r4, 110a <bma4_write_config_file+0x36>
    {
        /* Disable config loading*/
        rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    10f6:	462b      	mov	r3, r5
    10f8:	2201      	movs	r2, #1
    10fa:	a901      	add	r1, sp, #4
    10fc:	2059      	movs	r0, #89	; 0x59
    10fe:	f004 fb80 	bl	5802 <bma4_write_regs>

        if (rslt == BMA4_OK)
    1102:	4604      	mov	r4, r0
    1104:	2800      	cmp	r0, #0
    1106:	f000 8087 	beq.w	1218 <bma4_write_config_file+0x144>
            }
        }
    }

    return rslt;
}
    110a:	4620      	mov	r0, r4
    110c:	b003      	add	sp, #12
    110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *  @note index value should be even number.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bma4_dev *dev)
{
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    1110:	0973      	lsrs	r3, r6, #5
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    1112:	692f      	ldr	r7, [r5, #16]
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    1114:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_lsb = ((index / 2) & 0x0F);

    /* Check the dev structure as NULL */
    rslt = null_pointer_check(dev);
    1118:	4628      	mov	r0, r5
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    111a:	f3c6 0343 	ubfx	r3, r6, #1, #4
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    111e:	4437      	add	r7, r6
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    1120:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    1124:	f004 f9e2 	bl	54ec <null_pointer_check>

    if ((rslt == BMA4_OK) && (stream_data != NULL))
    1128:	2800      	cmp	r0, #0
    112a:	d172      	bne.n	1212 <bma4_write_config_file+0x13e>
    112c:	2f00      	cmp	r7, #0
    112e:	d070      	beq.n	1212 <bma4_write_config_file+0x13e>
    {
        rslt = bma4_write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    1130:	462b      	mov	r3, r5
    1132:	2201      	movs	r2, #1
    1134:	f10d 0107 	add.w	r1, sp, #7
    1138:	205b      	movs	r0, #91	; 0x5b
    113a:	f004 fb62 	bl	5802 <bma4_write_regs>
        if (rslt == BMA4_OK)
    113e:	4604      	mov	r4, r0
    1140:	b978      	cbnz	r0, 1162 <bma4_write_config_file+0x8e>
        {
            rslt = bma4_write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    1142:	462b      	mov	r3, r5
    1144:	2201      	movs	r2, #1
    1146:	f10d 0106 	add.w	r1, sp, #6
    114a:	205c      	movs	r0, #92	; 0x5c
    114c:	f004 fb59 	bl	5802 <bma4_write_regs>
            if (rslt == BMA4_OK)
    1150:	4604      	mov	r4, r0
    1152:	b930      	cbnz	r0, 1162 <bma4_write_config_file+0x8e>
            {
                rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, (uint8_t *)stream_data, dev->read_write_len, dev);
    1154:	8aaa      	ldrh	r2, [r5, #20]
    1156:	462b      	mov	r3, r5
    1158:	4639      	mov	r1, r7
    115a:	205e      	movs	r0, #94	; 0x5e
    115c:	f004 fa0b 	bl	5576 <write_regs>
    1160:	4604      	mov	r4, r0
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    1162:	8aab      	ldrh	r3, [r5, #20]
    1164:	441e      	add	r6, r3
    1166:	b2b6      	uxth	r6, r6
    1168:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    116a:	42b3      	cmp	r3, r6
    116c:	d8d0      	bhi.n	1110 <bma4_write_config_file+0x3c>
            if (rslt == BMA4_OK)
    116e:	2c00      	cmp	r4, #0
    1170:	d1cb      	bne.n	110a <bma4_write_config_file+0x36>
                config_load = 0x01;
    1172:	2601      	movs	r6, #1
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    1174:	462b      	mov	r3, r5
    1176:	4632      	mov	r2, r6
    1178:	a901      	add	r1, sp, #4
    117a:	2059      	movs	r0, #89	; 0x59
                config_load = 0x01;
    117c:	f88d 6004 	strb.w	r6, [sp, #4]
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    1180:	f004 fb3f 	bl	5802 <bma4_write_regs>
                if (rslt == BMA4_OK)
    1184:	4604      	mov	r4, r0
    1186:	2800      	cmp	r0, #0
    1188:	d1bf      	bne.n	110a <bma4_write_config_file+0x36>
                    dev->delay_us(BMA4_MS_TO_US(150), dev->intf_ptr);
    118a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    118c:	6869      	ldr	r1, [r5, #4]
    118e:	4825      	ldr	r0, [pc, #148]	; (1224 <bma4_write_config_file+0x150>)
    1190:	4798      	blx	r3
                    rslt = bma4_read_regs(BMA4_INTERNAL_STAT, &config_stream_status, 1, dev);
    1192:	4632      	mov	r2, r6
    1194:	462b      	mov	r3, r5
    1196:	f10d 0105 	add.w	r1, sp, #5
    119a:	202a      	movs	r0, #42	; 0x2a
    119c:	f004 fa85 	bl	56aa <bma4_read_regs>
                    config_stream_status = config_stream_status & BMA4_CONFIG_STREAM_MESSAGE_MSK;
    11a0:	f89d 6005 	ldrb.w	r6, [sp, #5]
    11a4:	f006 060f 	and.w	r6, r6, #15
    11a8:	f88d 6005 	strb.w	r6, [sp, #5]
                    if (rslt == BMA4_OK)
    11ac:	4604      	mov	r4, r0
    11ae:	2800      	cmp	r0, #0
    11b0:	d1ab      	bne.n	110a <bma4_write_config_file+0x36>
                        if (config_stream_status != BMA4_ASIC_INITIALIZED)
    11b2:	2e01      	cmp	r6, #1
    11b4:	d132      	bne.n	121c <bma4_write_config_file+0x148>
                            rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    11b6:	4629      	mov	r1, r5
    11b8:	4630      	mov	r0, r6
    11ba:	f004 fafe 	bl	57ba <bma4_set_advance_power_save>
                            if (rslt == BMA4_OK)
    11be:	4604      	mov	r4, r0
    11c0:	2800      	cmp	r0, #0
    11c2:	d1a2      	bne.n	110a <bma4_write_config_file+0x36>
    uint8_t asic_lsb = 0;
    11c4:	f88d 0006 	strb.w	r0, [sp, #6]
    uint8_t asic_msb = 0;
    11c8:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
    11cc:	4628      	mov	r0, r5
    11ce:	f004 f98d 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    11d2:	4604      	mov	r4, r0
    11d4:	2800      	cmp	r0, #0
    11d6:	d198      	bne.n	110a <bma4_write_config_file+0x36>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    11d8:	462b      	mov	r3, r5
    11da:	4632      	mov	r2, r6
    11dc:	f10d 0106 	add.w	r1, sp, #6
    11e0:	205b      	movs	r0, #91	; 0x5b
    11e2:	f004 f991 	bl	5508 <read_regs>
        if (rslt == BMA4_OK)
    11e6:	4604      	mov	r4, r0
    11e8:	2800      	cmp	r0, #0
    11ea:	d18e      	bne.n	110a <bma4_write_config_file+0x36>
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    11ec:	462b      	mov	r3, r5
    11ee:	4632      	mov	r2, r6
    11f0:	f10d 0107 	add.w	r1, sp, #7
    11f4:	205c      	movs	r0, #92	; 0x5c
    11f6:	f004 f987 	bl	5508 <read_regs>
        if (rslt == BMA4_OK)
    11fa:	4604      	mov	r4, r0
    11fc:	2800      	cmp	r0, #0
    11fe:	d184      	bne.n	110a <bma4_write_config_file+0x36>
            dev->asic_data.asic_lsb = asic_lsb & 0x0F;
    1200:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1204:	f003 030f 	and.w	r3, r3, #15
    1208:	75eb      	strb	r3, [r5, #23]
            dev->asic_data.asic_msb = asic_msb;
    120a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    120e:	762b      	strb	r3, [r5, #24]
    return rslt;
    1210:	e77b      	b.n	110a <bma4_write_config_file+0x36>
            }
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    1212:	f04f 34ff 	mov.w	r4, #4294967295
    1216:	e7a4      	b.n	1162 <bma4_write_config_file+0x8e>
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    1218:	4606      	mov	r6, r0
    121a:	e7a5      	b.n	1168 <bma4_write_config_file+0x94>
                            rslt = BMA4_E_CONFIG_STREAM_ERROR;
    121c:	f06f 0404 	mvn.w	r4, #4
    1220:	e773      	b.n	110a <bma4_write_config_file+0x36>
    1222:	bf00      	nop
    1224:	000249f0 	.word	0x000249f0

00001228 <bma4_map_interrupt>:
{
    1228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    122a:	461c      	mov	r4, r3
    uint8_t data[3] = { 0, 0, 0 };
    122c:	4b21      	ldr	r3, [pc, #132]	; (12b4 <bma4_map_interrupt+0x8c>)
{
    122e:	4616      	mov	r6, r2
    uint8_t data[3] = { 0, 0, 0 };
    1230:	881a      	ldrh	r2, [r3, #0]
    1232:	789b      	ldrb	r3, [r3, #2]
    1234:	f88d 3006 	strb.w	r3, [sp, #6]
{
    1238:	4607      	mov	r7, r0
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    123a:	f245 7356 	movw	r3, #22358	; 0x5756
    rslt = null_pointer_check(dev);
    123e:	4620      	mov	r0, r4
{
    1240:	460d      	mov	r5, r1
    uint8_t data[3] = { 0, 0, 0 };
    1242:	f8ad 2004 	strh.w	r2, [sp, #4]
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    1246:	f8ad 3000 	strh.w	r3, [sp]
    rslt = null_pointer_check(dev);
    124a:	f004 f94f 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    124e:	bb70      	cbnz	r0, 12ae <bma4_map_interrupt+0x86>
        rslt = bma4_read_regs(BMA4_INT_MAP_1_ADDR, data, 3, dev);
    1250:	4623      	mov	r3, r4
    1252:	2203      	movs	r2, #3
    1254:	a901      	add	r1, sp, #4
    1256:	2056      	movs	r0, #86	; 0x56
    1258:	f004 fa27 	bl	56aa <bma4_read_regs>
        if (rslt == BMA4_OK)
    125c:	bb38      	cbnz	r0, 12ae <bma4_map_interrupt+0x86>
            if (enable == TRUE)
    125e:	ab02      	add	r3, sp, #8
    1260:	2e01      	cmp	r6, #1
    1262:	eb03 0607 	add.w	r6, r3, r7
                data[int_line] = (uint8_t)(int_map & (0x00FF));
    1266:	ea4f 2215 	mov.w	r2, r5, lsr #8
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    126a:	bf17      	itett	ne
    126c:	f816 1c04 	ldrbne.w	r1, [r6, #-4]
                data[int_line] = (uint8_t)(int_map & (0x00FF));
    1270:	f806 5c04 	strbeq.w	r5, [r6, #-4]
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    1274:	ea21 0505 	bicne.w	r5, r1, r5
    1278:	f806 5c04 	strbne.w	r5, [r6, #-4]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    127c:	bf16      	itet	ne
    127e:	f89d 3006 	ldrbne.w	r3, [sp, #6]
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    1282:	f88d 2006 	strbeq.w	r2, [sp, #6]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    1286:	4393      	bicne	r3, r2
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    1288:	a901      	add	r1, sp, #4
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    128a:	bf18      	it	ne
    128c:	f88d 3006 	strbne.w	r3, [sp, #6]
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    1290:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    1294:	4623      	mov	r3, r4
    1296:	2201      	movs	r2, #1
    1298:	4439      	add	r1, r7
    129a:	f004 fab2 	bl	5802 <bma4_write_regs>
            if (rslt == BMA4_OK)
    129e:	b930      	cbnz	r0, 12ae <bma4_map_interrupt+0x86>
                rslt = bma4_write_regs(BMA4_INT_MAP_DATA_ADDR, &data[2], 1, dev);
    12a0:	4623      	mov	r3, r4
    12a2:	2201      	movs	r2, #1
    12a4:	f10d 0106 	add.w	r1, sp, #6
    12a8:	2058      	movs	r0, #88	; 0x58
    12aa:	f004 faaa 	bl	5802 <bma4_write_regs>
}
    12ae:	b003      	add	sp, #12
    12b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b2:	bf00      	nop
    12b4:	00006c83 	.word	0x00006c83

000012b8 <bma456_write_config_file>:
 */
int8_t bma456_write_config_file(struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
    12b8:	b190      	cbz	r0, 12e0 <bma456_write_config_file+0x28>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    12ba:	7803      	ldrb	r3, [r0, #0]
    12bc:	2b16      	cmp	r3, #22
    12be:	d112      	bne.n	12e6 <bma456_write_config_file+0x2e>
        {
            /* Configuration stream read/write length boundary
             * check
             */
            if ((dev->read_write_len >= BMA456_RD_WR_MIN_LEN) && (dev->read_write_len <= BMA456_RD_WR_MAX_LEN))
    12c0:	8a83      	ldrh	r3, [r0, #20]
    12c2:	1e9a      	subs	r2, r3, #2
    12c4:	b292      	uxth	r2, r2
    12c6:	f241 71fe 	movw	r1, #6142	; 0x17fe
    12ca:	428a      	cmp	r2, r1
    12cc:	d80e      	bhi.n	12ec <bma456_write_config_file+0x34>
            {
                /* Even or odd check */
                if ((dev->read_write_len % 2) != 0)
    12ce:	07da      	lsls	r2, r3, #31
                {
                    dev->read_write_len = dev->read_write_len - 1;
    12d0:	bf44      	itt	mi
    12d2:	f103 33ff 	addmi.w	r3, r3, #4294967295
    12d6:	8283      	strhmi	r3, [r0, #20]
                }

                /* Assign stream data */
                dev->config_file_ptr = bma456_config_file;
    12d8:	4b06      	ldr	r3, [pc, #24]	; (12f4 <bma456_write_config_file+0x3c>)
    12da:	6103      	str	r3, [r0, #16]
                rslt = bma4_write_config_file(dev);
    12dc:	f7ff befa 	b.w	10d4 <bma4_write_config_file>
            rslt = BMA4_E_INVALID_SENSOR;
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    12e0:	f04f 30ff 	mov.w	r0, #4294967295
    12e4:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
    12e6:	f06f 0003 	mvn.w	r0, #3
    12ea:	4770      	bx	lr
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    12ec:	f06f 0009 	mvn.w	r0, #9
    }

    return rslt;
}
    12f0:	4770      	bx	lr
    12f2:	bf00      	nop
    12f4:	0000712b 	.word	0x0000712b

000012f8 <max30102_i2c_write.isra.0>:
#endif
    return ret;
}

/* MAX30102 i2c write function */
static uint16_t max30102_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    12f8:	b530      	push	{r4, r5, lr}
    12fa:	4605      	mov	r5, r0
    12fc:	b085      	sub	sp, #20
    12fe:	460c      	mov	r4, r1
    1300:	480a      	ldr	r0, [pc, #40]	; (132c <max30102_i2c_write.isra.0+0x34>)
    1302:	f003 fa33 	bl	476c <z_impl_device_get_binding>
	msg.len = num_bytes;
    1306:	2202      	movs	r2, #2
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(struct device *dev, u16_t dev_addr,
				     u8_t reg_addr, u8_t value)
{
	u8_t tx_buf[2] = {reg_addr, value};
    1308:	f88d 5000 	strb.w	r5, [sp]
    buffer[1] = data;
    130c:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (u8_t *)buf;
    1310:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    1314:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    1316:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    131a:	6883      	ldr	r3, [r0, #8]
    131c:	2201      	movs	r2, #1
    131e:	685c      	ldr	r4, [r3, #4]
    1320:	a901      	add	r1, sp, #4
    1322:	2357      	movs	r3, #87	; 0x57
    1324:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return write_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    1326:	b2c0      	uxtb	r0, r0
    1328:	b005      	add	sp, #20
    132a:	bd30      	pop	{r4, r5, pc}
    132c:	00006df7 	.word	0x00006df7

00001330 <max30102_i2c_read.isra.0>:

/* MAX30102 i2c read function */
static uint16_t max30102_i2c_read(u8_t reg, u8_t *data, u16_t len)
    1330:	b530      	push	{r4, r5, lr}
    1332:	4605      	mov	r5, r0
    1334:	b089      	sub	sp, #36	; 0x24
    1336:	460c      	mov	r4, r1
    1338:	480d      	ldr	r0, [pc, #52]	; (1370 <max30102_i2c_read.isra.0+0x40>)
    133a:	f003 fa17 	bl	476c <z_impl_device_get_binding>
	msg[0].buf = (u8_t *)write_buf;
    133e:	f10d 0207 	add.w	r2, sp, #7
    1342:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    1344:	2201      	movs	r2, #1
	msg[1].len = num_read;
    1346:	e9cd 4205 	strd	r4, r2, [sp, #20]
	msg[0].len = num_write;
    134a:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    134c:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    134e:	2207      	movs	r2, #7
    1350:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    1354:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1358:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    135c:	6883      	ldr	r3, [r0, #8]
    135e:	2202      	movs	r2, #2
    1360:	685c      	ldr	r4, [r3, #4]
    1362:	a902      	add	r1, sp, #8
    1364:	2357      	movs	r3, #87	; 0x57
    1366:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    1368:	b2c0      	uxtb	r0, r0
    136a:	b009      	add	sp, #36	; 0x24
    136c:	bd30      	pop	{r4, r5, pc}
    136e:	bf00      	nop
    1370:	00006df7 	.word	0x00006df7

00001374 <init_max30102>:
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes_fifo(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}

u16_t init_max30102()
{
    1374:	b513      	push	{r0, r1, r4, lr}
    u8_t chipId;
    u16_t rslt = 0x00;
    rslt = max30102_i2c_read(MAX30102_PART_ID, &chipId, 1);
    1376:	20ff      	movs	r0, #255	; 0xff
    1378:	f10d 0107 	add.w	r1, sp, #7
    137c:	f7ff ffd8 	bl	1330 <max30102_i2c_read.isra.0>
    if (rslt == MAX3_OK)
    1380:	4604      	mov	r4, r0
    1382:	b950      	cbnz	r0, 139a <init_max30102+0x26>
    {
        if (chipId == I_AM_MAX30102)
    1384:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1388:	2b15      	cmp	r3, #21
        {
            printk("Communication with MAX30102 : OK\n");
    138a:	bf0c      	ite	eq
    138c:	4804      	ldreq	r0, [pc, #16]	; (13a0 <init_max30102+0x2c>)
        }
        else
        {
            printk("Communication with MAX30102 : FAILED!!!\n");
    138e:	4805      	ldrne	r0, [pc, #20]	; (13a4 <init_max30102+0x30>)
        }
    }
    else
    {
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    1390:	f004 fcf1 	bl	5d76 <printk>
    }
    return rslt;
}
    1394:	4620      	mov	r0, r4
    1396:	b002      	add	sp, #8
    1398:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    139a:	4803      	ldr	r0, [pc, #12]	; (13a8 <init_max30102+0x34>)
    139c:	e7f8      	b.n	1390 <init_max30102+0x1c>
    139e:	bf00      	nop
    13a0:	0000892b 	.word	0x0000892b
    13a4:	0000894d 	.word	0x0000894d
    13a8:	00008976 	.word	0x00008976

000013ac <max30102_read_fifo>:
    //rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
    return (rslt);
}

u16_t max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
    13ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13b0:	b090      	sub	sp, #64	; 0x40
    u16_t rslt = MAX3_OK;
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    13b2:	2218      	movs	r2, #24
{
    13b4:	4606      	mov	r6, r0
    13b6:	460d      	mov	r5, r1
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    13b8:	a804      	add	r0, sp, #16
    13ba:	2100      	movs	r1, #0
    13bc:	f004 fe5a 	bl	6074 <memset>
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    13c0:	4b28      	ldr	r3, [pc, #160]	; (1464 <max30102_read_fifo+0xb8>)
    *pun_ir_led = 0;
    13c2:	2400      	movs	r4, #0
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    13c4:	6818      	ldr	r0, [r3, #0]
    13c6:	9002      	str	r0, [sp, #8]
    13c8:	889b      	ldrh	r3, [r3, #4]
    *pun_ir_led = 0;
    13ca:	602c      	str	r4, [r5, #0]
    *pun_red_led = 0;
    u8_t temp1;
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    13cc:	f10d 0106 	add.w	r1, sp, #6
    *pun_red_led = 0;
    13d0:	6034      	str	r4, [r6, #0]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    13d2:	2004      	movs	r0, #4
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    13d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    13d8:	f7ff ffaa 	bl	1330 <max30102_i2c_read.isra.0>
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    13dc:	f10d 0106 	add.w	r1, sp, #6
    13e0:	2006      	movs	r0, #6
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    13e2:	af02      	add	r7, sp, #8
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    13e4:	f7ff ffa4 	bl	1330 <max30102_i2c_read.isra.0>
    13e8:	481f      	ldr	r0, [pc, #124]	; (1468 <max30102_read_fifo+0xbc>)
    13ea:	f003 f9bf 	bl	476c <z_impl_device_get_binding>
static inline int i2c_burst_read(struct device *dev,
    13ee:	2207      	movs	r2, #7
	msg[0].buf = (u8_t *)write_buf;
    13f0:	eb0d 0102 	add.w	r1, sp, r2
    13f4:	910a      	str	r1, [sp, #40]	; 0x28
	msg[0].len = num_write;
    13f6:	2101      	movs	r1, #1
    13f8:	910b      	str	r1, [sp, #44]	; 0x2c
	msg[1].len = num_read;
    13fa:	2106      	movs	r1, #6
    13fc:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    1400:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	msg[1].buf = (u8_t *)read_buf;
    1404:	970d      	str	r7, [sp, #52]	; 0x34
	msg[1].len = num_read;
    1406:	910e      	str	r1, [sp, #56]	; 0x38
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1408:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
	return api->transfer(dev, msgs, num_msgs, addr);
    140c:	6883      	ldr	r3, [r0, #8]
    140e:	2202      	movs	r2, #2
    1410:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1414:	a90a      	add	r1, sp, #40	; 0x28
    1416:	2357      	movs	r3, #87	; 0x57
    1418:	47c0      	blx	r8
    max30102_i2c_read_fifo(MAX30102_FIFO_DATA_REG, temp_dat1, 6);
    for (int i = 0; i < 6; i++)
    141a:	ab04      	add	r3, sp, #16
    141c:	3401      	adds	r4, #1
        temp_dat[i] = temp_dat1[i];
    141e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1422:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < 6; i++)
    1426:	2c06      	cmp	r4, #6
    1428:	d1f8      	bne.n	141c <max30102_read_fifo+0x70>
    *pun_red_led = (temp_dat[0] << 16) + (temp_dat[1] << 8) + temp_dat[2];
    142a:	9b05      	ldr	r3, [sp, #20]
    142c:	9a04      	ldr	r2, [sp, #16]
    142e:	021b      	lsls	r3, r3, #8
    1430:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    1434:	9a06      	ldr	r2, [sp, #24]
    1436:	4413      	add	r3, r2
    1438:	6033      	str	r3, [r6, #0]
    *pun_ir_led = (temp_dat[3] << 16) + (temp_dat[4] << 8) + temp_dat[5];
    143a:	9b08      	ldr	r3, [sp, #32]
    143c:	9a07      	ldr	r2, [sp, #28]
    143e:	021b      	lsls	r3, r3, #8
    1440:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    1444:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1446:	4413      	add	r3, r2
    1448:	602b      	str	r3, [r5, #0]
    *pun_red_led &= 0x03FFFF; //Mask MSB [23:18]
    144a:	6833      	ldr	r3, [r6, #0]
    144c:	f3c3 0311 	ubfx	r3, r3, #0, #18
    1450:	6033      	str	r3, [r6, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    1452:	682b      	ldr	r3, [r5, #0]
    return rslt;
}
    1454:	2000      	movs	r0, #0
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    1456:	f3c3 0311 	ubfx	r3, r3, #0, #18
    145a:	602b      	str	r3, [r5, #0]
}
    145c:	b010      	add	sp, #64	; 0x40
    145e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1462:	bf00      	nop
    1464:	00006c86 	.word	0x00006c86
    1468:	00006df7 	.word	0x00006df7

0000146c <button_pressed>:
static struct gpio_callback button_cb_data;

void button_pressed(struct device *dev, struct gpio_callback *cb,
                    u32_t pins)
{
    printk("Device Detached\n");
    146c:	4801      	ldr	r0, [pc, #4]	; (1474 <button_pressed+0x8>)
    146e:	f004 bc82 	b.w	5d76 <printk>
    1472:	bf00      	nop
    1474:	000089aa 	.word	0x000089aa

00001478 <init_latch>:

struct device *globalButton;
struct device *globalLed;

void init_latch()
{
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	4827      	ldr	r0, [pc, #156]	; (1518 <init_latch+0xa0>)
    147c:	f003 f976 	bl	476c <z_impl_device_get_binding>
    struct device *button;
    struct device *led;
    int ret;

    button = device_get_binding(SW0_GPIO_LABEL);
    if (button == NULL)
    1480:	4604      	mov	r4, r0
    1482:	b928      	cbnz	r0, 1490 <init_latch+0x18>

    led = initialize_led();
    globalButton=button;
    globalLed=led;

}
    1484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    1488:	4923      	ldr	r1, [pc, #140]	; (1518 <init_latch+0xa0>)
    148a:	4824      	ldr	r0, [pc, #144]	; (151c <init_latch+0xa4>)
    148c:	f004 bc73 	b.w	5d76 <printk>
    ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    1490:	2111      	movs	r1, #17
    1492:	f240 1211 	movw	r2, #273	; 0x111
    1496:	f004 fc03 	bl	5ca0 <gpio_pin_configure>
    if (ret != 0)
    149a:	4601      	mov	r1, r0
    149c:	b130      	cbz	r0, 14ac <init_latch+0x34>
        printk("Error %d: failed to configure %s pin %d\n",
    149e:	4a1e      	ldr	r2, [pc, #120]	; (1518 <init_latch+0xa0>)
    14a0:	481f      	ldr	r0, [pc, #124]	; (1520 <init_latch+0xa8>)
    14a2:	2311      	movs	r3, #17
}
    14a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    14a8:	f004 bc65 	b.w	5d76 <printk>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    14ac:	2111      	movs	r1, #17
    14ae:	f44f 22a8 	mov.w	r2, #344064	; 0x54000
    14b2:	4620      	mov	r0, r4
    14b4:	f004 fbe0 	bl	5c78 <z_impl_gpio_pin_interrupt_configure>
    if (ret != 0)
    14b8:	4601      	mov	r1, r0
    14ba:	b118      	cbz	r0, 14c4 <init_latch+0x4c>
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    14bc:	4a16      	ldr	r2, [pc, #88]	; (1518 <init_latch+0xa0>)
    14be:	4819      	ldr	r0, [pc, #100]	; (1524 <init_latch+0xac>)
    14c0:	2311      	movs	r3, #17
    14c2:	e7ef      	b.n	14a4 <init_latch+0x2c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    14c4:	4918      	ldr	r1, [pc, #96]	; (1528 <init_latch+0xb0>)
    14c6:	4b19      	ldr	r3, [pc, #100]	; (152c <init_latch+0xb4>)
    14c8:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    14ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    14ce:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    14d0:	68a3      	ldr	r3, [r4, #8]
    14d2:	69db      	ldr	r3, [r3, #28]
    14d4:	b113      	cbz	r3, 14dc <init_latch+0x64>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    14d6:	2201      	movs	r2, #1
    14d8:	4620      	mov	r0, r4
    14da:	4798      	blx	r3
    14dc:	480e      	ldr	r0, [pc, #56]	; (1518 <init_latch+0xa0>)
    14de:	f003 f945 	bl	476c <z_impl_device_get_binding>
{
    struct device *led;
    int ret;

    led = device_get_binding(LED0_GPIO_LABEL);
    if (led == NULL)
    14e2:	4605      	mov	r5, r0
    14e4:	b940      	cbnz	r0, 14f8 <init_latch+0x80>
    {
        printk("Didn't find LED device %s\n", LED0_GPIO_LABEL);
    14e6:	490c      	ldr	r1, [pc, #48]	; (1518 <init_latch+0xa0>)
    14e8:	4811      	ldr	r0, [pc, #68]	; (1530 <init_latch+0xb8>)
    14ea:	f004 fc44 	bl	5d76 <printk>
    globalButton=button;
    14ee:	4b11      	ldr	r3, [pc, #68]	; (1534 <init_latch+0xbc>)
    14f0:	601c      	str	r4, [r3, #0]
    globalLed=led;
    14f2:	4b11      	ldr	r3, [pc, #68]	; (1538 <init_latch+0xc0>)
    14f4:	601d      	str	r5, [r3, #0]
}
    14f6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    }

    ret = gpio_pin_configure(led, LED0_GPIO_PIN, LED0_GPIO_FLAGS);
    14f8:	210a      	movs	r1, #10
    14fa:	f44f 7200 	mov.w	r2, #512	; 0x200
    14fe:	f004 fbcf 	bl	5ca0 <gpio_pin_configure>
    if (ret != 0)
    1502:	4601      	mov	r1, r0
    1504:	2800      	cmp	r0, #0
    1506:	d0f2      	beq.n	14ee <init_latch+0x76>
    {
        printk("Error %d: failed to configure LED device %s pin %d\n",
    1508:	4a03      	ldr	r2, [pc, #12]	; (1518 <init_latch+0xa0>)
    150a:	480c      	ldr	r0, [pc, #48]	; (153c <init_latch+0xc4>)
    150c:	230a      	movs	r3, #10
    150e:	f004 fc32 	bl	5d76 <printk>
               ret, LED0_GPIO_LABEL, LED0_GPIO_PIN);
        return NULL;
    1512:	2500      	movs	r5, #0
    1514:	e7eb      	b.n	14ee <init_latch+0x76>
    1516:	bf00      	nop
    1518:	000089bb 	.word	0x000089bb
    151c:	000089c2 	.word	0x000089c2
    1520:	000089e0 	.word	0x000089e0
    1524:	00008a09 	.word	0x00008a09
    1528:	20000260 	.word	0x20000260
    152c:	0000146d 	.word	0x0000146d
    1530:	00008a3f 	.word	0x00008a3f
    1534:	2000026c 	.word	0x2000026c
    1538:	20000270 	.word	0x20000270
    153c:	00008a5a 	.word	0x00008a5a

00001540 <detect_latch>:
    return match_led_to_button(globalButton,globalLed);
    1540:	4b02      	ldr	r3, [pc, #8]	; (154c <detect_latch+0xc>)
    1542:	6819      	ldr	r1, [r3, #0]
    1544:	4b02      	ldr	r3, [pc, #8]	; (1550 <detect_latch+0x10>)
    1546:	6818      	ldr	r0, [r3, #0]
    1548:	f004 bbbd 	b.w	5cc6 <match_led_to_button>
    154c:	20000270 	.word	0x20000270
    1550:	2000026c 	.word	0x2000026c

00001554 <max30208_i2c_read.isra.0>:
static uint16_t max30208_i2c_read(u8_t reg, u8_t *data, u16_t len)
    1554:	b530      	push	{r4, r5, lr}
    1556:	4605      	mov	r5, r0
    1558:	b089      	sub	sp, #36	; 0x24
    155a:	460c      	mov	r4, r1
    155c:	480d      	ldr	r0, [pc, #52]	; (1594 <max30208_i2c_read.isra.0+0x40>)
    155e:	f003 f905 	bl	476c <z_impl_device_get_binding>
	msg[0].buf = (u8_t *)write_buf;
    1562:	f10d 0207 	add.w	r2, sp, #7
    1566:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    1568:	2201      	movs	r2, #1
	msg[1].len = num_read;
    156a:	e9cd 4205 	strd	r4, r2, [sp, #20]
	msg[0].len = num_write;
    156e:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    1570:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1572:	2207      	movs	r2, #7
    1574:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    1578:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    157c:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    1580:	6883      	ldr	r3, [r0, #8]
    1582:	2202      	movs	r2, #2
    1584:	685c      	ldr	r4, [r3, #4]
    1586:	a902      	add	r1, sp, #8
    1588:	2350      	movs	r3, #80	; 0x50
    158a:	47a0      	blx	r4
}
    158c:	b2c0      	uxtb	r0, r0
    158e:	b009      	add	sp, #36	; 0x24
    1590:	bd30      	pop	{r4, r5, pc}
    1592:	bf00      	nop
    1594:	00006df7 	.word	0x00006df7

00001598 <max30208_i2c_write.isra.0>:
static uint16_t max30208_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    1598:	b530      	push	{r4, r5, lr}
    159a:	4605      	mov	r5, r0
    159c:	b085      	sub	sp, #20
    159e:	460c      	mov	r4, r1
    15a0:	480a      	ldr	r0, [pc, #40]	; (15cc <max30208_i2c_write.isra.0+0x34>)
    15a2:	f003 f8e3 	bl	476c <z_impl_device_get_binding>
	msg.len = num_bytes;
    15a6:	2202      	movs	r2, #2
	u8_t tx_buf[2] = {reg_addr, value};
    15a8:	f88d 5000 	strb.w	r5, [sp]
    ret= i2c_reg_write_byte(i2c_dev,slaveAddr,addr, data);
    15ac:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (u8_t *)buf;
    15b0:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    15b4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    15b6:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    15ba:	6883      	ldr	r3, [r0, #8]
    15bc:	2201      	movs	r2, #1
    15be:	685c      	ldr	r4, [r3, #4]
    15c0:	a901      	add	r1, sp, #4
    15c2:	2350      	movs	r3, #80	; 0x50
    15c4:	47a0      	blx	r4
}
    15c6:	b2c0      	uxtb	r0, r0
    15c8:	b005      	add	sp, #20
    15ca:	bd30      	pop	{r4, r5, pc}
    15cc:	00006df7 	.word	0x00006df7

000015d0 <init_max30208>:
{
    15d0:	b513      	push	{r0, r1, r4, lr}
    rslt = max30208_i2c_read(MAX30208_PART_ID, &chipId, 1);
    15d2:	20ff      	movs	r0, #255	; 0xff
    15d4:	f10d 0107 	add.w	r1, sp, #7
    15d8:	f7ff ffbc 	bl	1554 <max30208_i2c_read.isra.0>
    if (rslt == MAX_OK)
    15dc:	4604      	mov	r4, r0
    15de:	b950      	cbnz	r0, 15f6 <init_max30208+0x26>
        if (chipId == I_AM_MAX30208)
    15e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15e4:	2b30      	cmp	r3, #48	; 0x30
            printk("Communication with MAX30208 : OK\n");
    15e6:	bf0c      	ite	eq
    15e8:	4805      	ldreq	r0, [pc, #20]	; (1600 <init_max30208+0x30>)
            printk("Communication with MAX30208 : FAILED!!!\n");
    15ea:	4806      	ldrne	r0, [pc, #24]	; (1604 <init_max30208+0x34>)
    15ec:	f004 fbc3 	bl	5d76 <printk>
}
    15f0:	4620      	mov	r0, r4
    15f2:	b002      	add	sp, #8
    15f4:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30208 : FAILED!!!\n I2C error %d\n", rslt);
    15f6:	4601      	mov	r1, r0
    15f8:	4803      	ldr	r0, [pc, #12]	; (1608 <init_max30208+0x38>)
    15fa:	f004 fbbc 	bl	5d76 <printk>
    15fe:	e7f7      	b.n	15f0 <init_max30208+0x20>
    1600:	00008a8e 	.word	0x00008a8e
    1604:	00008ab0 	.word	0x00008ab0
    1608:	00008ad9 	.word	0x00008ad9

0000160c <configure_max30208>:
{
    160c:	b510      	push	{r4, lr}
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    160e:	2100      	movs	r1, #0
    1610:	2001      	movs	r0, #1
    1612:	f7ff ffc1 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    1616:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    1618:	4604      	mov	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    161a:	2004      	movs	r0, #4
    161c:	f7ff ffbc 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    1620:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    1622:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    1624:	2005      	movs	r0, #5
    1626:	f7ff ffb7 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    162a:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    162c:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    162e:	2100      	movs	r1, #0
    1630:	2006      	movs	r0, #6
    1632:	f7ff ffb1 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    1636:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    1638:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    163a:	210f      	movs	r1, #15
    163c:	2009      	movs	r0, #9
    163e:	f7ff ffab 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    1642:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    1644:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    1646:	211a      	movs	r1, #26
    1648:	200a      	movs	r0, #10
    164a:	f7ff ffa5 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    164e:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    1650:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    1652:	21c1      	movs	r1, #193	; 0xc1
    1654:	2014      	movs	r0, #20
    1656:	f7ff ff9f 	bl	1598 <max30208_i2c_write.isra.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    165a:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    165c:	4304      	orrs	r4, r0
    165e:	b2a4      	uxth	r4, r4
    if (rslt == MAX_OK)
    1660:	b924      	cbnz	r4, 166c <configure_max30208+0x60>
        printk("CONFIGURING MAX30208 : OK\n");
    1662:	4803      	ldr	r0, [pc, #12]	; (1670 <configure_max30208+0x64>)
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    1664:	f004 fb87 	bl	5d76 <printk>
}
    1668:	4620      	mov	r0, r4
    166a:	bd10      	pop	{r4, pc}
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    166c:	4801      	ldr	r0, [pc, #4]	; (1674 <configure_max30208+0x68>)
    166e:	e7f9      	b.n	1664 <configure_max30208+0x58>
    1670:	00008b10 	.word	0x00008b10
    1674:	00008b2b 	.word	0x00008b2b

00001678 <max30208_read_fifo>:
{
    1678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    *data = 0;
    167a:	2300      	movs	r3, #0
    167c:	6003      	str	r3, [r0, #0]
{
    167e:	4604      	mov	r4, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    1680:	21c1      	movs	r1, #193	; 0xc1
    1682:	2014      	movs	r0, #20
    1684:	f7ff ff88 	bl	1598 <max30208_i2c_write.isra.0>
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
    1688:	f10d 0107 	add.w	r1, sp, #7
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    168c:	4605      	mov	r5, r0
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
    168e:	2008      	movs	r0, #8
    1690:	f7ff ff60 	bl	1554 <max30208_i2c_read.isra.0>
    1694:	f10d 0107 	add.w	r1, sp, #7
    1698:	2008      	movs	r0, #8
            temp_dat[i] = temp;
    169a:	f89d 7007 	ldrb.w	r7, [sp, #7]
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
    169e:	f7ff ff59 	bl	1554 <max30208_i2c_read.isra.0>
            temp_dat[i] = temp;
    16a2:	f89d 6007 	ldrb.w	r6, [sp, #7]
        sum = sum+(temp_dat[0] << 8) + temp_dat[1];
    16a6:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    *data =sum/samples;
    16aa:	6026      	str	r6, [r4, #0]
    max30208_i2c_read(MAX30208_FIFO_R_POINTER, &temp, 1);
    16ac:	f10d 0107 	add.w	r1, sp, #7
    16b0:	2005      	movs	r0, #5
    16b2:	f7ff ff4f 	bl	1554 <max30208_i2c_read.isra.0>
    *data = (temp_dat[0] << 8) + temp_dat[1];
    16b6:	6026      	str	r6, [r4, #0]
    if (rslt != MAX_OK)
    16b8:	b115      	cbz	r5, 16c0 <max30208_read_fifo+0x48>
        printk("READING FROM MAX30208 FIFO : FAILED\n");
    16ba:	4803      	ldr	r0, [pc, #12]	; (16c8 <max30208_read_fifo+0x50>)
    16bc:	f004 fb5b 	bl	5d76 <printk>
}
    16c0:	4628      	mov	r0, r5
    16c2:	b003      	add	sp, #12
    16c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16c6:	bf00      	nop
    16c8:	00008b4d 	.word	0x00008b4d

000016cc <getAdcDevice>:
    16cc:	4801      	ldr	r0, [pc, #4]	; (16d4 <getAdcDevice+0x8>)
    16ce:	f003 b84d 	b.w	476c <z_impl_device_get_binding>
    16d2:	bf00      	nop
    16d4:	00008b72 	.word	0x00008b72

000016d8 <init_output>:

struct device *globalBuzzer;
struct device *globalMotor;

s16_t init_output()
{
    16d8:	b570      	push	{r4, r5, r6, lr}
    16da:	4819      	ldr	r0, [pc, #100]	; (1740 <init_output+0x68>)
    16dc:	f003 f846 	bl	476c <z_impl_device_get_binding>
    struct device *buzzer;
    int ret;
    buzzer = device_get_binding(BUZZER_GPIO_LABEL);
    if (buzzer == NULL)
    16e0:	4606      	mov	r6, r0
    16e2:	b930      	cbnz	r0, 16f2 <init_output+0x1a>
    {
        printk("Didn't find device %s\n", BUZZER_GPIO_LABEL);
    16e4:	4817      	ldr	r0, [pc, #92]	; (1744 <init_output+0x6c>)
    16e6:	4916      	ldr	r1, [pc, #88]	; (1740 <init_output+0x68>)
    16e8:	f004 fb45 	bl	5d76 <printk>
        return -1;
    16ec:	f04f 30ff 	mov.w	r0, #4294967295
    }
    printk("INITIALISING OUTPUTS : OK\n");
    globalBuzzer = buzzer;
    globalMotor = motor;
    return 0;
}
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    ret = gpio_pin_configure(buzzer, BUZZER_GPIO_PIN, BUZZER_GPIO_FLAGS);
    16f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    16f6:	2104      	movs	r1, #4
    16f8:	f004 fb0a 	bl	5d10 <gpio_pin_configure>
    if (ret != 0)
    16fc:	4604      	mov	r4, r0
    16fe:	b138      	cbz	r0, 1710 <init_output+0x38>
        printk("Error %d: failed to configure device %s pin %d\n",
    1700:	2304      	movs	r3, #4
        printk("Error %d: failed to configure device %s pin %d\n",
    1702:	4811      	ldr	r0, [pc, #68]	; (1748 <init_output+0x70>)
    1704:	4a0e      	ldr	r2, [pc, #56]	; (1740 <init_output+0x68>)
    1706:	4621      	mov	r1, r4
    1708:	f004 fb35 	bl	5d76 <printk>
        return ret;
    170c:	b220      	sxth	r0, r4
    170e:	e7ef      	b.n	16f0 <init_output+0x18>
    1710:	480b      	ldr	r0, [pc, #44]	; (1740 <init_output+0x68>)
    1712:	f003 f82b 	bl	476c <z_impl_device_get_binding>
    if (motor == NULL)
    1716:	4605      	mov	r5, r0
    1718:	2800      	cmp	r0, #0
    171a:	d0e3      	beq.n	16e4 <init_output+0xc>
    ret = gpio_pin_configure(motor, MOTOR_GPIO_PIN, MOTOR_GPIO_FLAGS);
    171c:	f240 2201 	movw	r2, #513	; 0x201
    1720:	2103      	movs	r1, #3
    1722:	f004 faf5 	bl	5d10 <gpio_pin_configure>
    if (ret != 0)
    1726:	4604      	mov	r4, r0
    1728:	b108      	cbz	r0, 172e <init_output+0x56>
        printk("Error %d: failed to configure device %s pin %d\n",
    172a:	2303      	movs	r3, #3
    172c:	e7e9      	b.n	1702 <init_output+0x2a>
    printk("INITIALISING OUTPUTS : OK\n");
    172e:	4807      	ldr	r0, [pc, #28]	; (174c <init_output+0x74>)
    1730:	f004 fb21 	bl	5d76 <printk>
    globalBuzzer = buzzer;
    1734:	4b06      	ldr	r3, [pc, #24]	; (1750 <init_output+0x78>)
    1736:	601e      	str	r6, [r3, #0]
    globalMotor = motor;
    1738:	4b06      	ldr	r3, [pc, #24]	; (1754 <init_output+0x7c>)
    return 0;
    173a:	4620      	mov	r0, r4
    globalMotor = motor;
    173c:	601d      	str	r5, [r3, #0]
    return 0;
    173e:	e7d7      	b.n	16f0 <init_output+0x18>
    1740:	000089bb 	.word	0x000089bb
    1744:	00008b78 	.word	0x00008b78
    1748:	00008b8f 	.word	0x00008b8f
    174c:	00008bbf 	.word	0x00008bbf
    1750:	20000274 	.word	0x20000274
    1754:	20000278 	.word	0x20000278

00001758 <toggle_buzzer>:

bool toggle_buzzer(bool val)
{
    1758:	b538      	push	{r3, r4, r5, lr}
    if (val = 1)
    {
        for (int i = 0; i < 1000; i++)
        {
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    175a:	4d0b      	ldr	r5, [pc, #44]	; (1788 <toggle_buzzer+0x30>)
{
    175c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    1760:	6828      	ldr	r0, [r5, #0]
    1762:	2201      	movs	r2, #1
    1764:	2104      	movs	r1, #4
    1766:	f004 fae6 	bl	5d36 <gpio_pin_set>
	z_impl_k_busy_wait(usec_to_wait);
    176a:	20fa      	movs	r0, #250	; 0xfa
    176c:	f005 f917 	bl	699e <z_impl_k_busy_wait>
            k_busy_wait(250);
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 0);
    1770:	6828      	ldr	r0, [r5, #0]
    1772:	2200      	movs	r2, #0
    1774:	2104      	movs	r1, #4
    1776:	f004 fade 	bl	5d36 <gpio_pin_set>
    177a:	20fa      	movs	r0, #250	; 0xfa
    177c:	f005 f90f 	bl	699e <z_impl_k_busy_wait>
        for (int i = 0; i < 1000; i++)
    1780:	3c01      	subs	r4, #1
    1782:	d1ed      	bne.n	1760 <toggle_buzzer+0x8>
        }
    }
    else
        gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    return val;
}
    1784:	2001      	movs	r0, #1
    1786:	bd38      	pop	{r3, r4, r5, pc}
    1788:	20000274 	.word	0x20000274

0000178c <toggle_motor>:
bool toggle_motor(bool val)
{
    178c:	b510      	push	{r4, lr}
    178e:	4c0b      	ldr	r4, [pc, #44]	; (17bc <toggle_motor+0x30>)
    1790:	4603      	mov	r3, r0
    1792:	6820      	ldr	r0, [r4, #0]
    if (val)
    1794:	b173      	cbz	r3, 17b4 <toggle_motor+0x28>
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 0);
    1796:	2200      	movs	r2, #0
    1798:	2103      	movs	r1, #3
    179a:	f004 facc 	bl	5d36 <gpio_pin_set>
	return z_impl_k_sleep(timeout);
    179e:	2100      	movs	r1, #0
    17a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    17a4:	f003 fbd2 	bl	4f4c <z_impl_k_sleep>
        k_msleep(500);
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    17a8:	6820      	ldr	r0, [r4, #0]
    17aa:	2201      	movs	r2, #1
    17ac:	2103      	movs	r1, #3
    }
    else
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    17ae:	f004 fac2 	bl	5d36 <gpio_pin_set>
    }
    17b2:	bd10      	pop	{r4, pc}
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    17b4:	2201      	movs	r2, #1
    17b6:	2103      	movs	r1, #3
    17b8:	e7f9      	b.n	17ae <toggle_motor+0x22>
    17ba:	bf00      	nop
    17bc:	20000278 	.word	0x20000278

000017c0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    17c0:	680b      	ldr	r3, [r1, #0]
    17c2:	3301      	adds	r3, #1
    17c4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    17c6:	4b01      	ldr	r3, [pc, #4]	; (17cc <char_out+0xc>)
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	4718      	bx	r3
    17cc:	200000a0 	.word	0x200000a0

000017d0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    17d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17d4:	b085      	sub	sp, #20
    17d6:	469b      	mov	fp, r3
    17d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    17da:	f8df 9090 	ldr.w	r9, [pc, #144]	; 186c <_printk_dec_ulong+0x9c>
    17de:	2c01      	cmp	r4, #1
    17e0:	bfb8      	it	lt
    17e2:	2401      	movlt	r4, #1
    17e4:	2b01      	cmp	r3, #1
    17e6:	bf0c      	ite	eq
    17e8:	2330      	moveq	r3, #48	; 0x30
    17ea:	2320      	movne	r3, #32
    17ec:	4615      	mov	r5, r2
    17ee:	4606      	mov	r6, r0
    17f0:	468a      	mov	sl, r1
    17f2:	9302      	str	r3, [sp, #8]
    17f4:	2701      	movs	r7, #1
    17f6:	f04f 080a 	mov.w	r8, #10
    17fa:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    17fc:	fbb5 f3f9 	udiv	r3, r5, r9
    1800:	9301      	str	r3, [sp, #4]
    1802:	b90a      	cbnz	r2, 1808 <_printk_dec_ulong+0x38>
    1804:	45a9      	cmp	r9, r5
    1806:	d81f      	bhi.n	1848 <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    1808:	9b01      	ldr	r3, [sp, #4]
    180a:	4651      	mov	r1, sl
    180c:	f103 0030 	add.w	r0, r3, #48	; 0x30
    1810:	47b0      	blx	r6
			digits++;
    1812:	3701      	adds	r7, #1
			found_largest_digit = 1;
    1814:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    1816:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    1818:	f108 38ff 	add.w	r8, r8, #4294967295
	while (pos >= 10) {
    181c:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    1820:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
    1824:	f04f 030a 	mov.w	r3, #10
    1828:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    182c:	d1e6      	bne.n	17fc <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    182e:	4651      	mov	r1, sl
    1830:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1834:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    1836:	f1bb 0f03 	cmp.w	fp, #3
    183a:	d102      	bne.n	1842 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    183c:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    183e:	2c00      	cmp	r4, #0
    1840:	dc0e      	bgt.n	1860 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    1842:	b005      	add	sp, #20
    1844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1848:	4544      	cmp	r4, r8
    184a:	dbe4      	blt.n	1816 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
    184c:	f1bb 0f02 	cmp.w	fp, #2
    1850:	d8e1      	bhi.n	1816 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1852:	9802      	ldr	r0, [sp, #8]
    1854:	9203      	str	r2, [sp, #12]
    1856:	4651      	mov	r1, sl
    1858:	47b0      	blx	r6
			digits++;
    185a:	3701      	adds	r7, #1
    185c:	9a03      	ldr	r2, [sp, #12]
    185e:	e7da      	b.n	1816 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    1860:	4651      	mov	r1, sl
    1862:	2020      	movs	r0, #32
    1864:	47b0      	blx	r6
    1866:	3c01      	subs	r4, #1
    1868:	e7e9      	b.n	183e <_printk_dec_ulong+0x6e>
    186a:	bf00      	nop
    186c:	3b9aca00 	.word	0x3b9aca00

00001870 <__printk_hook_install>:
	_char_out = fn;
    1870:	4b01      	ldr	r3, [pc, #4]	; (1878 <__printk_hook_install+0x8>)
    1872:	6018      	str	r0, [r3, #0]
}
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	200000a0 	.word	0x200000a0

0000187c <z_vprintk>:
{
    187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1880:	b08d      	sub	sp, #52	; 0x34
    1882:	461c      	mov	r4, r3
	char length_mod = 0;
    1884:	2700      	movs	r7, #0
    1886:	1e53      	subs	r3, r2, #1
{
    1888:	4605      	mov	r5, r0
    188a:	468b      	mov	fp, r1
    188c:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    188e:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    1892:	46b8      	mov	r8, r7
			might_format = 0;
    1894:	2600      	movs	r6, #0
					break;
    1896:	e005      	b.n	18a4 <z_vprintk+0x28>
		if (!might_format) {
    1898:	b96e      	cbnz	r6, 18b6 <z_vprintk+0x3a>
			if (*fmt != '%') {
    189a:	2825      	cmp	r0, #37	; 0x25
    189c:	f000 8171 	beq.w	1b82 <z_vprintk+0x306>
				out((int)*fmt, ctx);
    18a0:	4659      	mov	r1, fp
    18a2:	47a8      	blx	r5
	while (*fmt) {
    18a4:	9b03      	ldr	r3, [sp, #12]
    18a6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    18aa:	9303      	str	r3, [sp, #12]
    18ac:	2800      	cmp	r0, #0
    18ae:	d1f3      	bne.n	1898 <z_vprintk+0x1c>
}
    18b0:	b00d      	add	sp, #52	; 0x34
    18b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    18b6:	287a      	cmp	r0, #122	; 0x7a
    18b8:	d80a      	bhi.n	18d0 <z_vprintk+0x54>
    18ba:	2862      	cmp	r0, #98	; 0x62
    18bc:	d810      	bhi.n	18e0 <z_vprintk+0x64>
    18be:	2830      	cmp	r0, #48	; 0x30
    18c0:	d054      	beq.n	196c <z_vprintk+0xf0>
    18c2:	d845      	bhi.n	1950 <z_vprintk+0xd4>
    18c4:	2825      	cmp	r0, #37	; 0x25
    18c6:	f000 815a 	beq.w	1b7e <z_vprintk+0x302>
    18ca:	282d      	cmp	r0, #45	; 0x2d
    18cc:	f000 815f 	beq.w	1b8e <z_vprintk+0x312>
					out((int)'%', ctx);
    18d0:	4659      	mov	r1, fp
    18d2:	2025      	movs	r0, #37	; 0x25
    18d4:	47a8      	blx	r5
					out((int)*fmt, ctx);
    18d6:	9b03      	ldr	r3, [sp, #12]
    18d8:	7818      	ldrb	r0, [r3, #0]
    18da:	4659      	mov	r1, fp
    18dc:	47a8      	blx	r5
    18de:	e7d9      	b.n	1894 <z_vprintk+0x18>
    18e0:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    18e4:	2b17      	cmp	r3, #23
    18e6:	d8f3      	bhi.n	18d0 <z_vprintk+0x54>
    18e8:	a201      	add	r2, pc, #4	; (adr r2, 18f0 <z_vprintk+0x74>)
    18ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    18ee:	bf00      	nop
    18f0:	00001b77 	.word	0x00001b77
    18f4:	000019bb 	.word	0x000019bb
    18f8:	000018d1 	.word	0x000018d1
    18fc:	000018d1 	.word	0x000018d1
    1900:	000018d1 	.word	0x000018d1
    1904:	0000199d 	.word	0x0000199d
    1908:	000019bb 	.word	0x000019bb
    190c:	000018d1 	.word	0x000018d1
    1910:	000018d1 	.word	0x000018d1
    1914:	0000199d 	.word	0x0000199d
    1918:	000018d1 	.word	0x000018d1
    191c:	000018d1 	.word	0x000018d1
    1920:	000018d1 	.word	0x000018d1
    1924:	00001a5d 	.word	0x00001a5d
    1928:	000018d1 	.word	0x000018d1
    192c:	000018d1 	.word	0x000018d1
    1930:	00001b47 	.word	0x00001b47
    1934:	000018d1 	.word	0x000018d1
    1938:	00001a2b 	.word	0x00001a2b
    193c:	000018d1 	.word	0x000018d1
    1940:	000018d1 	.word	0x000018d1
    1944:	00001959 	.word	0x00001959
    1948:	000018d1 	.word	0x000018d1
    194c:	0000199d 	.word	0x0000199d
			switch (*fmt) {
    1950:	2839      	cmp	r0, #57	; 0x39
    1952:	d91a      	bls.n	198a <z_vprintk+0x10e>
    1954:	2858      	cmp	r0, #88	; 0x58
    1956:	d1bb      	bne.n	18d0 <z_vprintk+0x54>
				if (*fmt == 'p') {
    1958:	9b03      	ldr	r3, [sp, #12]
    195a:	781b      	ldrb	r3, [r3, #0]
    195c:	2b70      	cmp	r3, #112	; 0x70
    195e:	f040 8088 	bne.w	1a72 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    1962:	f854 3b04 	ldr.w	r3, [r4], #4
    1966:	9306      	str	r3, [sp, #24]
    1968:	2200      	movs	r2, #0
    196a:	e090      	b.n	1a8e <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    196c:	f1b9 0f00 	cmp.w	r9, #0
    1970:	da0e      	bge.n	1990 <z_vprintk+0x114>
    1972:	f1b8 0f00 	cmp.w	r8, #0
    1976:	f000 810d 	beq.w	1b94 <z_vprintk+0x318>
					min_width = *fmt - '0';
    197a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    197e:	f1b8 0f00 	cmp.w	r8, #0
    1982:	bf08      	it	eq
    1984:	f04f 0802 	moveq.w	r8, #2
    1988:	e78c      	b.n	18a4 <z_vprintk+0x28>
				if (min_width < 0) {
    198a:	f1b9 0f00 	cmp.w	r9, #0
    198e:	dbf4      	blt.n	197a <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    1990:	230a      	movs	r3, #10
    1992:	fb03 0909 	mla	r9, r3, r9, r0
    1996:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    199a:	e7f0      	b.n	197e <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    199c:	2868      	cmp	r0, #104	; 0x68
    199e:	d103      	bne.n	19a8 <z_vprintk+0x12c>
    19a0:	2f68      	cmp	r7, #104	; 0x68
    19a2:	d106      	bne.n	19b2 <z_vprintk+0x136>
					length_mod = 'H';
    19a4:	2748      	movs	r7, #72	; 0x48
    19a6:	e77d      	b.n	18a4 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    19a8:	286c      	cmp	r0, #108	; 0x6c
    19aa:	d102      	bne.n	19b2 <z_vprintk+0x136>
    19ac:	2f6c      	cmp	r7, #108	; 0x6c
    19ae:	f000 80f4 	beq.w	1b9a <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    19b2:	2f00      	cmp	r7, #0
    19b4:	d18c      	bne.n	18d0 <z_vprintk+0x54>
    19b6:	4607      	mov	r7, r0
    19b8:	e774      	b.n	18a4 <z_vprintk+0x28>
				if (length_mod == 'z') {
    19ba:	2f7a      	cmp	r7, #122	; 0x7a
    19bc:	d102      	bne.n	19c4 <z_vprintk+0x148>
					d = va_arg(ap, int);
    19be:	f854 6b04 	ldr.w	r6, [r4], #4
    19c2:	e021      	b.n	1a08 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    19c4:	2f6c      	cmp	r7, #108	; 0x6c
    19c6:	d0fa      	beq.n	19be <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    19c8:	2f4c      	cmp	r7, #76	; 0x4c
    19ca:	d1f8      	bne.n	19be <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    19cc:	3407      	adds	r4, #7
    19ce:	f024 0407 	bic.w	r4, r4, #7
    19d2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    19d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    19da:	9b04      	ldr	r3, [sp, #16]
    19dc:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    19e0:	9b05      	ldr	r3, [sp, #20]
    19e2:	9108      	str	r1, [sp, #32]
    19e4:	f143 0100 	adc.w	r1, r3, #0
    19e8:	9109      	str	r1, [sp, #36]	; 0x24
    19ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    19ee:	2100      	movs	r1, #0
    19f0:	f04f 30ff 	mov.w	r0, #4294967295
    19f4:	4299      	cmp	r1, r3
    19f6:	bf08      	it	eq
    19f8:	4290      	cmpeq	r0, r2
    19fa:	d204      	bcs.n	1a06 <z_vprintk+0x18a>
						print_err(out, ctx);
    19fc:	4659      	mov	r1, fp
    19fe:	4628      	mov	r0, r5
    1a00:	f004 f9ab 	bl	5d5a <print_err>
						break;
    1a04:	e746      	b.n	1894 <z_vprintk+0x18>
					d = lld;
    1a06:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    1a08:	2e00      	cmp	r6, #0
    1a0a:	da05      	bge.n	1a18 <z_vprintk+0x19c>
					out((int)'-', ctx);
    1a0c:	4659      	mov	r1, fp
    1a0e:	202d      	movs	r0, #45	; 0x2d
    1a10:	47a8      	blx	r5
					d = -d;
    1a12:	4276      	negs	r6, r6
					min_width--;
    1a14:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    1a18:	f8cd 9000 	str.w	r9, [sp]
    1a1c:	4643      	mov	r3, r8
    1a1e:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
    1a20:	4659      	mov	r1, fp
    1a22:	4628      	mov	r0, r5
    1a24:	f7ff fed4 	bl	17d0 <_printk_dec_ulong>
				break;
    1a28:	e734      	b.n	1894 <z_vprintk+0x18>
				if (length_mod == 'z') {
    1a2a:	2f7a      	cmp	r7, #122	; 0x7a
    1a2c:	d102      	bne.n	1a34 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    1a2e:	f854 2b04 	ldr.w	r2, [r4], #4
    1a32:	e00f      	b.n	1a54 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    1a34:	2f6c      	cmp	r7, #108	; 0x6c
    1a36:	d0fa      	beq.n	1a2e <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    1a38:	2f4c      	cmp	r7, #76	; 0x4c
    1a3a:	d1f8      	bne.n	1a2e <z_vprintk+0x1b2>
					unsigned long long llu =
    1a3c:	3407      	adds	r4, #7
    1a3e:	f024 0407 	bic.w	r4, r4, #7
    1a42:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    1a46:	2100      	movs	r1, #0
    1a48:	f04f 30ff 	mov.w	r0, #4294967295
    1a4c:	4299      	cmp	r1, r3
    1a4e:	bf08      	it	eq
    1a50:	4290      	cmpeq	r0, r2
    1a52:	d3d3      	bcc.n	19fc <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    1a54:	f8cd 9000 	str.w	r9, [sp]
    1a58:	4643      	mov	r3, r8
    1a5a:	e7e1      	b.n	1a20 <z_vprintk+0x1a4>
				out('0', ctx);
    1a5c:	4659      	mov	r1, fp
    1a5e:	2030      	movs	r0, #48	; 0x30
    1a60:	47a8      	blx	r5
				out('x', ctx);
    1a62:	4659      	mov	r1, fp
    1a64:	2078      	movs	r0, #120	; 0x78
    1a66:	47a8      	blx	r5
					min_width = 8;
    1a68:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    1a6c:	f04f 0801 	mov.w	r8, #1
    1a70:	e772      	b.n	1958 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    1a72:	2f6c      	cmp	r7, #108	; 0x6c
    1a74:	f43f af75 	beq.w	1962 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    1a78:	2f4c      	cmp	r7, #76	; 0x4c
    1a7a:	f47f af72 	bne.w	1962 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    1a7e:	1de3      	adds	r3, r4, #7
    1a80:	f023 0307 	bic.w	r3, r3, #7
    1a84:	461c      	mov	r4, r3
    1a86:	f854 2b08 	ldr.w	r2, [r4], #8
    1a8a:	9206      	str	r2, [sp, #24]
    1a8c:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    1a8e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    1a90:	2310      	movs	r3, #16
	int digits = 0;
    1a92:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    1a94:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
    1a96:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
    1a9a:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    1a9e:	9906      	ldr	r1, [sp, #24]
    1aa0:	f1ca 0e20 	rsb	lr, sl, #32
    1aa4:	f1aa 0c20 	sub.w	ip, sl, #32
    1aa8:	fa21 f00a 	lsr.w	r0, r1, sl
    1aac:	fa02 fe0e 	lsl.w	lr, r2, lr
    1ab0:	ea40 000e 	orr.w	r0, r0, lr
    1ab4:	fa22 fc0c 	lsr.w	ip, r2, ip
    1ab8:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    1abc:	f010 000f 	ands.w	r0, r0, #15
    1ac0:	d107      	bne.n	1ad2 <z_vprintk+0x256>
    1ac2:	9907      	ldr	r1, [sp, #28]
    1ac4:	b911      	cbnz	r1, 1acc <z_vprintk+0x250>
    1ac6:	f1ba 0f00 	cmp.w	sl, #0
    1aca:	d125      	bne.n	1b18 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    1acc:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1ad0:	e005      	b.n	1ade <z_vprintk+0x262>
    1ad2:	2809      	cmp	r0, #9
    1ad4:	bf8c      	ite	hi
    1ad6:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    1ada:	f04f 0c30 	movls.w	ip, #48	; 0x30
    1ade:	4460      	add	r0, ip
			out((int)nibble, ctx);
    1ae0:	4659      	mov	r1, fp
    1ae2:	b240      	sxtb	r0, r0
    1ae4:	920a      	str	r2, [sp, #40]	; 0x28
    1ae6:	9307      	str	r3, [sp, #28]
    1ae8:	47a8      	blx	r5
			digits++;
    1aea:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    1aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    1aee:	3301      	adds	r3, #1
    1af0:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    1af2:	9b07      	ldr	r3, [sp, #28]
    1af4:	f1ba 0f00 	cmp.w	sl, #0
    1af8:	d123      	bne.n	1b42 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    1afa:	f1b8 0f03 	cmp.w	r8, #3
    1afe:	f47f aec9 	bne.w	1894 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    1b02:	9b04      	ldr	r3, [sp, #16]
    1b04:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    1b08:	2e00      	cmp	r6, #0
    1b0a:	f77f aec3 	ble.w	1894 <z_vprintk+0x18>
			out(' ', ctx);
    1b0e:	4659      	mov	r1, fp
    1b10:	2020      	movs	r0, #32
    1b12:	47a8      	blx	r5
    1b14:	3e01      	subs	r6, #1
    1b16:	e7f7      	b.n	1b08 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    1b18:	1e59      	subs	r1, r3, #1
    1b1a:	4599      	cmp	r9, r3
    1b1c:	910a      	str	r1, [sp, #40]	; 0x28
    1b1e:	db07      	blt.n	1b30 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    1b20:	f1b8 0f01 	cmp.w	r8, #1
    1b24:	d106      	bne.n	1b34 <z_vprintk+0x2b8>
    1b26:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
    1b28:	4659      	mov	r1, fp
    1b2a:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1b2c:	47a8      	blx	r5
    1b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    1b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b32:	e7b2      	b.n	1a9a <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    1b34:	f1b8 0f02 	cmp.w	r8, #2
    1b38:	d1fa      	bne.n	1b30 <z_vprintk+0x2b4>
    1b3a:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    1b3c:	4659      	mov	r1, fp
    1b3e:	2020      	movs	r0, #32
    1b40:	e7f4      	b.n	1b2c <z_vprintk+0x2b0>
			found_largest_digit = 1;
    1b42:	9607      	str	r6, [sp, #28]
    1b44:	e7a9      	b.n	1a9a <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    1b46:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    1b4a:	46b2      	mov	sl, r6
    1b4c:	4653      	mov	r3, sl
    1b4e:	f81a 0b01 	ldrb.w	r0, [sl], #1
    1b52:	b968      	cbnz	r0, 1b70 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    1b54:	f1b8 0f03 	cmp.w	r8, #3
    1b58:	d121      	bne.n	1b9e <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    1b5a:	1b9e      	subs	r6, r3, r6
    1b5c:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    1b60:	2e00      	cmp	r6, #0
    1b62:	f77f ae97 	ble.w	1894 <z_vprintk+0x18>
						out(' ', ctx);
    1b66:	4659      	mov	r1, fp
    1b68:	2020      	movs	r0, #32
    1b6a:	47a8      	blx	r5
    1b6c:	3e01      	subs	r6, #1
    1b6e:	e7f7      	b.n	1b60 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    1b70:	4659      	mov	r1, fp
    1b72:	47a8      	blx	r5
    1b74:	e7ea      	b.n	1b4c <z_vprintk+0x2d0>
				out(c, ctx);
    1b76:	f854 0b04 	ldr.w	r0, [r4], #4
    1b7a:	4659      	mov	r1, fp
    1b7c:	e6ae      	b.n	18dc <z_vprintk+0x60>
				out((int)'%', ctx);
    1b7e:	4659      	mov	r1, fp
    1b80:	e6ac      	b.n	18dc <z_vprintk+0x60>
				length_mod = 0;
    1b82:	4637      	mov	r7, r6
				padding = PAD_NONE;
    1b84:	46b0      	mov	r8, r6
				min_width = -1;
    1b86:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    1b8a:	2601      	movs	r6, #1
    1b8c:	e68a      	b.n	18a4 <z_vprintk+0x28>
			switch (*fmt) {
    1b8e:	f04f 0803 	mov.w	r8, #3
    1b92:	e687      	b.n	18a4 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    1b94:	f04f 0801 	mov.w	r8, #1
    1b98:	e684      	b.n	18a4 <z_vprintk+0x28>
					length_mod = 'L';
    1b9a:	274c      	movs	r7, #76	; 0x4c
    1b9c:	e682      	b.n	18a4 <z_vprintk+0x28>
			might_format = 0;
    1b9e:	4606      	mov	r6, r0
		++fmt;
    1ba0:	e680      	b.n	18a4 <z_vprintk+0x28>
    1ba2:	bf00      	nop

00001ba4 <vprintk>:
{
    1ba4:	b507      	push	{r0, r1, r2, lr}
    1ba6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1ba8:	2100      	movs	r1, #0
{
    1baa:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1bac:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    1bae:	4803      	ldr	r0, [pc, #12]	; (1bbc <vprintk+0x18>)
    1bb0:	a901      	add	r1, sp, #4
    1bb2:	f7ff fe63 	bl	187c <z_vprintk>
}
    1bb6:	b003      	add	sp, #12
    1bb8:	f85d fb04 	ldr.w	pc, [sp], #4
    1bbc:	000017c1 	.word	0x000017c1

00001bc0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1bc0:	b510      	push	{r4, lr}
    1bc2:	4807      	ldr	r0, [pc, #28]	; (1be0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    1bc4:	4c07      	ldr	r4, [pc, #28]	; (1be4 <uart_console_init+0x24>)
    1bc6:	f002 fdd1 	bl	476c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1bca:	4b07      	ldr	r3, [pc, #28]	; (1be8 <uart_console_init+0x28>)
    1bcc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1bce:	4620      	mov	r0, r4
    1bd0:	f001 f9ca 	bl	2f68 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1bd4:	4620      	mov	r0, r4
    1bd6:	f7ff fe4b 	bl	1870 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    1bda:	2000      	movs	r0, #0
    1bdc:	bd10      	pop	{r4, pc}
    1bde:	bf00      	nop
    1be0:	00008bda 	.word	0x00008bda
    1be4:	00001bed 	.word	0x00001bed
    1be8:	2000027c 	.word	0x2000027c

00001bec <console_out>:
	if ('\n' == c) {
    1bec:	280a      	cmp	r0, #10
{
    1bee:	b538      	push	{r3, r4, r5, lr}
    1bf0:	4d07      	ldr	r5, [pc, #28]	; (1c10 <console_out+0x24>)
    1bf2:	4604      	mov	r4, r0
	if ('\n' == c) {
    1bf4:	d104      	bne.n	1c00 <console_out+0x14>
    1bf6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1bf8:	6883      	ldr	r3, [r0, #8]
    1bfa:	210d      	movs	r1, #13
    1bfc:	685b      	ldr	r3, [r3, #4]
    1bfe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1c00:	6828      	ldr	r0, [r5, #0]
    1c02:	6883      	ldr	r3, [r0, #8]
    1c04:	b2e1      	uxtb	r1, r4
    1c06:	685b      	ldr	r3, [r3, #4]
    1c08:	4798      	blx	r3
}
    1c0a:	4620      	mov	r0, r4
    1c0c:	bd38      	pop	{r3, r4, r5, pc}
    1c0e:	bf00      	nop
    1c10:	2000027c 	.word	0x2000027c

00001c14 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    1c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    1c16:	4e12      	ldr	r6, [pc, #72]	; (1c60 <clkstarted_handle.constprop.0+0x4c>)
    1c18:	68f3      	ldr	r3, [r6, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    1c1a:	240c      	movs	r4, #12
    1c1c:	fb04 3400 	mla	r4, r4, r0, r3
    1c20:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    1c22:	4605      	mov	r5, r0
	sub_data->started = true;
    1c24:	7263      	strb	r3, [r4, #9]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1c26:	f04f 0320 	mov.w	r3, #32
    1c2a:	f3ef 8111 	mrs	r1, BASEPRI
    1c2e:	f383 8811 	msr	BASEPRI, r3
    1c32:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    1c36:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1c38:	b12b      	cbz	r3, 1c46 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1c3a:	6860      	ldr	r0, [r4, #4]
    1c3c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    1c3e:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1c40:	4283      	cmp	r3, r0
	list->tail = node;
    1c42:	bf08      	it	eq
    1c44:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c46:	f381 8811 	msr	BASEPRI, r1
    1c4a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    1c4e:	b903      	cbnz	r3, 1c52 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    1c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    1c52:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    1c56:	4629      	mov	r1, r5
    1c58:	4630      	mov	r0, r6
    1c5a:	47b8      	blx	r7
    1c5c:	e7e3      	b.n	1c26 <clkstarted_handle.constprop.0+0x12>
    1c5e:	bf00      	nop
    1c60:	20000160 	.word	0x20000160

00001c64 <clock_async_start>:
{
    1c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    1c68:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    1c6a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
{
    1c6e:	460c      	mov	r4, r1
    1c70:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    1c72:	b14a      	cbz	r2, 1c88 <clock_async_start+0x24>
	sys_snode_t *item = sys_slist_peek_head(list);
    1c74:	230c      	movs	r3, #12
    1c76:	437b      	muls	r3, r7
    1c78:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    1c7c:	429a      	cmp	r2, r3
    1c7e:	d05e      	beq.n	1d3e <clock_async_start+0xda>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1c80:	b113      	cbz	r3, 1c88 <clock_async_start+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1c82:	681b      	ldr	r3, [r3, #0]
	} while (item);
    1c84:	2b00      	cmp	r3, #0
    1c86:	d1f9      	bne.n	1c7c <clock_async_start+0x18>
	__asm__ volatile(
    1c88:	f04f 0320 	mov.w	r3, #32
    1c8c:	f3ef 8c11 	mrs	ip, BASEPRI
    1c90:	f383 8811 	msr	BASEPRI, r3
    1c94:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    1c98:	210c      	movs	r1, #12
    1c9a:	4379      	muls	r1, r7
    1c9c:	eb0e 0301 	add.w	r3, lr, r1
    1ca0:	7a1d      	ldrb	r5, [r3, #8]
    1ca2:	3501      	adds	r5, #1
    1ca4:	b2ed      	uxtb	r5, r5
    1ca6:	721d      	strb	r5, [r3, #8]
	__asm__ volatile(
    1ca8:	f38c 8811 	msr	BASEPRI, ip
    1cac:	f3bf 8f6f 	isb	sy
	if (data) {
    1cb0:	b362      	cbz	r2, 1d0c <clock_async_start+0xa8>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1cb2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    1cb6:	f04f 0803 	mov.w	r8, #3
    1cba:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    1cbe:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    1cc2:	f1bc 0f00 	cmp.w	ip, #0
    1cc6:	d115      	bne.n	1cf4 <clock_async_start+0x90>
	__asm__ volatile(
    1cc8:	f04f 0820 	mov.w	r8, #32
    1ccc:	f3ef 8911 	mrs	r9, BASEPRI
    1cd0:	f388 8811 	msr	BASEPRI, r8
    1cd4:	f3bf 8f6f 	isb	sy
	parent->next = child;
    1cd8:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    1cdc:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1ce0:	f1b8 0f00 	cmp.w	r8, #0
    1ce4:	d127      	bne.n	1d36 <clock_async_start+0xd2>
	list->tail = node;
    1ce6:	605a      	str	r2, [r3, #4]
	list->head = node;
    1ce8:	f84e 2001 	str.w	r2, [lr, r1]
	__asm__ volatile(
    1cec:	f389 8811 	msr	BASEPRI, r9
    1cf0:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    1cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cf8:	2103      	movs	r1, #3
    1cfa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    1cfe:	f1bc 0f00 	cmp.w	ip, #0
    1d02:	d003      	beq.n	1d0c <clock_async_start+0xa8>
			data->cb(dev, subsys, data->user_data);
    1d04:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    1d08:	4621      	mov	r1, r4
    1d0a:	4798      	blx	r3
	if (ref == 1) {
    1d0c:	2d01      	cmp	r5, #1
    1d0e:	d110      	bne.n	1d32 <clock_async_start+0xce>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
    1d10:	2c01      	cmp	r4, #1
    1d12:	d107      	bne.n	1d24 <clock_async_start+0xc0>
	if (!once) {
    1d14:	4d0c      	ldr	r5, [pc, #48]	; (1d48 <clock_async_start+0xe4>)
    1d16:	782b      	ldrb	r3, [r5, #0]
    1d18:	b923      	cbnz	r3, 1d24 <clock_async_start+0xc0>
	z_impl_k_busy_wait(usec_to_wait);
    1d1a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1d1e:	f004 fe3e 	bl	699e <z_impl_k_busy_wait>
		once = true;
    1d22:	702c      	strb	r4, [r5, #0]
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    1d24:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d28:	2201      	movs	r2, #1
    1d2a:	78b3      	ldrb	r3, [r6, #2]
    1d2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d30:	601a      	str	r2, [r3, #0]
	return 0;
    1d32:	2000      	movs	r0, #0
    1d34:	e005      	b.n	1d42 <clock_async_start+0xde>
	parent->next = child;
    1d36:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    1d3a:	605a      	str	r2, [r3, #4]
}
    1d3c:	e7d6      	b.n	1cec <clock_async_start+0x88>
		return -EBUSY;
    1d3e:	f06f 000f 	mvn.w	r0, #15
}
    1d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d46:	bf00      	nop
    1d48:	20000566 	.word	0x20000566

00001d4c <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d4c:	4b15      	ldr	r3, [pc, #84]	; (1da4 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1d4e:	b507      	push	{r0, r1, r2, lr}
    1d50:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    1d52:	b182      	cbz	r2, 1d76 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    1d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1d58:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1d5c:	07d1      	lsls	r1, r2, #31
    1d5e:	d50a      	bpl.n	1d76 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d60:	2200      	movs	r2, #0
    1d62:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1d64:	681b      	ldr	r3, [r3, #0]
    1d66:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1d68:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1d6a:	4b0f      	ldr	r3, [pc, #60]	; (1da8 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1d6c:	68db      	ldr	r3, [r3, #12]
    1d6e:	7a58      	ldrb	r0, [r3, #9]
    1d70:	b908      	cbnz	r0, 1d76 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1d72:	f7ff ff4f 	bl	1c14 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d76:	4b0d      	ldr	r3, [pc, #52]	; (1dac <nrf_power_clock_isr+0x60>)
    1d78:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    1d7a:	b182      	cbz	r2, 1d9e <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    1d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1d80:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1d84:	0792      	lsls	r2, r2, #30
    1d86:	d50a      	bpl.n	1d9e <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d88:	2200      	movs	r2, #0
    1d8a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1d8c:	681b      	ldr	r3, [r3, #0]
    1d8e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1d90:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1d92:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1d94:	b003      	add	sp, #12
    1d96:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1d9a:	f7ff bf3b 	b.w	1c14 <clkstarted_handle.constprop.0>
}
    1d9e:	b003      	add	sp, #12
    1da0:	f85d fb04 	ldr.w	pc, [sp], #4
    1da4:	40000100 	.word	0x40000100
    1da8:	20000160 	.word	0x20000160
    1dac:	40000104 	.word	0x40000104

00001db0 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    1db0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1db2:	4b08      	ldr	r3, [pc, #32]	; (1dd4 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1db4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1db8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1dbc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    1dc0:	4290      	cmp	r0, r2
    1dc2:	d100      	bne.n	1dc6 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    1dc4:	4770      	bx	lr
    1dc6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    1dca:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1dcc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1dd0:	e7f2      	b.n	1db8 <handle_next_tick_case+0x8>
    1dd2:	bf00      	nop
    1dd4:	40011000 	.word	0x40011000

00001dd8 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1dd8:	4b04      	ldr	r3, [pc, #16]	; (1dec <event_clear+0x14>)
    1dda:	2200      	movs	r2, #0
{
    1ddc:	b082      	sub	sp, #8
    1dde:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1de0:	681b      	ldr	r3, [r3, #0]
    1de2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1de4:	9b01      	ldr	r3, [sp, #4]
}
    1de6:	b002      	add	sp, #8
    1de8:	4770      	bx	lr
    1dea:	bf00      	nop
    1dec:	40011140 	.word	0x40011140

00001df0 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    1df0:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    1df2:	f7ff fff1 	bl	1dd8 <event_clear>
    return p_reg->CC[ch];
    1df6:	4b07      	ldr	r3, [pc, #28]	; (1e14 <rtc1_nrf_isr+0x24>)

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1df8:	4a07      	ldr	r2, [pc, #28]	; (1e18 <rtc1_nrf_isr+0x28>)
    1dfa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    1dfe:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1e00:	1ac0      	subs	r0, r0, r3
    1e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1e06:	4403      	add	r3, r0
    1e08:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    1e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1e0e:	f003 ba4f 	b.w	52b0 <z_clock_announce>
    1e12:	bf00      	nop
    1e14:	40011000 	.word	0x40011000
    1e18:	20000298 	.word	0x20000298

00001e1c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    1e1c:	b538      	push	{r3, r4, r5, lr}
    1e1e:	4814      	ldr	r0, [pc, #80]	; (1e70 <z_clock_driver_init+0x54>)
    1e20:	f002 fca4 	bl	476c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    1e24:	b300      	cbz	r0, 1e68 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1e26:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1e28:	4d12      	ldr	r5, [pc, #72]	; (1e74 <z_clock_driver_init+0x58>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	2101      	movs	r1, #1
    1e2e:	2400      	movs	r4, #0
    1e30:	4798      	blx	r3
    1e32:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    1e36:	f7ff ffcf 	bl	1dd8 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e3a:	4b0f      	ldr	r3, [pc, #60]	; (1e78 <z_clock_driver_init+0x5c>)
    1e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    1e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e48:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1e4c:	4622      	mov	r2, r4
    1e4e:	2101      	movs	r1, #1
    1e50:	2011      	movs	r0, #17
    1e52:	f000 f8e7 	bl	2024 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1e56:	2011      	movs	r0, #17
    1e58:	f000 f8d4 	bl	2004 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1e5c:	4a07      	ldr	r2, [pc, #28]	; (1e7c <z_clock_driver_init+0x60>)
    1e5e:	2301      	movs	r3, #1
    1e60:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    1e62:	4620      	mov	r0, r4
    1e64:	602b      	str	r3, [r5, #0]
}
    1e66:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1e68:	f04f 30ff 	mov.w	r0, #4294967295
    1e6c:	e7fb      	b.n	1e66 <z_clock_driver_init+0x4a>
    1e6e:	bf00      	nop
    1e70:	00008be1 	.word	0x00008be1
    1e74:	40011000 	.word	0x40011000
    1e78:	e000e100 	.word	0xe000e100
    1e7c:	40011008 	.word	0x40011008

00001e80 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1e80:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    1e82:	4b2a      	ldr	r3, [pc, #168]	; (1f2c <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    1e84:	4c2a      	ldr	r4, [pc, #168]	; (1f30 <z_clock_set_timeout+0xb0>)
    1e86:	6819      	ldr	r1, [r3, #0]
    1e88:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1e8c:	4d29      	ldr	r5, [pc, #164]	; (1f34 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    1e8e:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1e90:	f1b0 3fff 	cmp.w	r0, #4294967295
    1e94:	bf08      	it	eq
    1e96:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    1e98:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    1e9c:	0212      	lsls	r2, r2, #8
    1e9e:	d434      	bmi.n	1f0a <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1ea0:	3801      	subs	r0, #1
    1ea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1ea6:	42a8      	cmp	r0, r5
    1ea8:	bfa8      	it	ge
    1eaa:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1eac:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    1eae:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    1eb2:	4418      	add	r0, r3
    1eb4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1eb8:	42a8      	cmp	r0, r5
    1eba:	bf94      	ite	ls
    1ebc:	180d      	addls	r5, r1, r0
    1ebe:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    1ec0:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    1ec4:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    1ec8:	f7ff ff86 	bl	1dd8 <event_clear>
	return (a - b) & COUNTER_MAX;
    1ecc:	1a09      	subs	r1, r1, r0
    1ece:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1ed2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    1ed6:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    1ed8:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1edc:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    1ee0:	d104      	bne.n	1eec <z_clock_set_timeout+0x6c>
    1ee2:	200f      	movs	r0, #15
    1ee4:	f004 fd5b 	bl	699e <z_impl_k_busy_wait>
		event_clear();
    1ee8:	f7ff ff76 	bl	1dd8 <event_clear>
    1eec:	4b12      	ldr	r3, [pc, #72]	; (1f38 <z_clock_set_timeout+0xb8>)
    1eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1ef2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1ef6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1efa:	1a2b      	subs	r3, r5, r0
    1efc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    1f00:	2b01      	cmp	r3, #1
    1f02:	d104      	bne.n	1f0e <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    1f04:	f7ff ff54 	bl	1db0 <handle_next_tick_case>
    1f08:	e00b      	b.n	1f22 <z_clock_set_timeout+0xa2>
		ticks = 0;
    1f0a:	2000      	movs	r0, #0
    1f0c:	e7ce      	b.n	1eac <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1f0e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1f12:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1f16:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1f1a:	1a2d      	subs	r5, r5, r0
    1f1c:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    1f1e:	022b      	lsls	r3, r5, #8
    1f20:	d4f0      	bmi.n	1f04 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    1f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1f26:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    1f2a:	bd70      	pop	{r4, r5, r6, pc}
    1f2c:	20000298 	.word	0x20000298
    1f30:	40011000 	.word	0x40011000
    1f34:	007fffff 	.word	0x007fffff
    1f38:	e000e100 	.word	0xe000e100

00001f3c <z_clock_elapsed>:
	__asm__ volatile(
    1f3c:	f04f 0220 	mov.w	r2, #32
    1f40:	f3ef 8311 	mrs	r3, BASEPRI
    1f44:	f382 8811 	msr	BASEPRI, r2
    1f48:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1f4c:	4a06      	ldr	r2, [pc, #24]	; (1f68 <z_clock_elapsed+0x2c>)
    1f4e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1f52:	4a06      	ldr	r2, [pc, #24]	; (1f6c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1f54:	6812      	ldr	r2, [r2, #0]
    1f56:	1a80      	subs	r0, r0, r2
    1f58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1f5c:	f383 8811 	msr	BASEPRI, r3
    1f60:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f64:	4770      	bx	lr
    1f66:	bf00      	nop
    1f68:	40011000 	.word	0x40011000
    1f6c:	20000298 	.word	0x20000298

00001f70 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    1f70:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1f72:	4c11      	ldr	r4, [pc, #68]	; (1fb8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1f74:	4a11      	ldr	r2, [pc, #68]	; (1fbc <_DoInit+0x4c>)
    1f76:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1f78:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1f7a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1f7e:	4b10      	ldr	r3, [pc, #64]	; (1fc0 <_DoInit+0x50>)
    1f80:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1f82:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1f88:	4a0e      	ldr	r2, [pc, #56]	; (1fc4 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1f8a:	490f      	ldr	r1, [pc, #60]	; (1fc8 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1f8c:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1f8e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1f90:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1f92:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1f94:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    1f96:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1f98:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1f9c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1f9e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1fa0:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1fa2:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1fa4:	f004 f817 	bl	5fd6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1fa8:	4908      	ldr	r1, [pc, #32]	; (1fcc <_DoInit+0x5c>)
    1faa:	4620      	mov	r0, r4
    1fac:	f004 f813 	bl	5fd6 <strcpy>
  p->acID[6] = ' ';
    1fb0:	2320      	movs	r3, #32
    1fb2:	71a3      	strb	r3, [r4, #6]
}
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	bf00      	nop
    1fb8:	2000029c 	.word	0x2000029c
    1fbc:	00008bf1 	.word	0x00008bf1
    1fc0:	20000577 	.word	0x20000577
    1fc4:	20000567 	.word	0x20000567
    1fc8:	00008bfa 	.word	0x00008bfa
    1fcc:	00008bfe 	.word	0x00008bfe

00001fd0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1fd0:	4a09      	ldr	r2, [pc, #36]	; (1ff8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1fd2:	490a      	ldr	r1, [pc, #40]	; (1ffc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1fd4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1fd6:	6809      	ldr	r1, [r1, #0]
    1fd8:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1fda:	4909      	ldr	r1, [pc, #36]	; (2000 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1fdc:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1fde:	684b      	ldr	r3, [r1, #4]
    1fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1fe4:	604b      	str	r3, [r1, #4]
    1fe6:	2300      	movs	r3, #0
    1fe8:	f383 8811 	msr	BASEPRI, r3
    1fec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1ff0:	6893      	ldr	r3, [r2, #8]
}
    1ff2:	6f18      	ldr	r0, [r3, #112]	; 0x70
    1ff4:	4770      	bx	lr
    1ff6:	bf00      	nop
    1ff8:	20000518 	.word	0x20000518
    1ffc:	00006d88 	.word	0x00006d88
    2000:	e000ed00 	.word	0xe000ed00

00002004 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2004:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2006:	2b00      	cmp	r3, #0
    2008:	db08      	blt.n	201c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    200a:	2201      	movs	r2, #1
    200c:	f000 001f 	and.w	r0, r0, #31
    2010:	fa02 f000 	lsl.w	r0, r2, r0
    2014:	095b      	lsrs	r3, r3, #5
    2016:	4a02      	ldr	r2, [pc, #8]	; (2020 <arch_irq_enable+0x1c>)
    2018:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    201c:	4770      	bx	lr
    201e:	bf00      	nop
    2020:	e000e100 	.word	0xe000e100

00002024 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2024:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2026:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2028:	bfa8      	it	ge
    202a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    202e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2032:	bfb8      	it	lt
    2034:	4b06      	ldrlt	r3, [pc, #24]	; (2050 <z_arm_irq_priority_set+0x2c>)
    2036:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    203a:	bfac      	ite	ge
    203c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2040:	f000 000f 	andlt.w	r0, r0, #15
    2044:	b2c9      	uxtb	r1, r1
    2046:	bfb4      	ite	lt
    2048:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    204a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    204e:	4770      	bx	lr
    2050:	e000ed14 	.word	0xe000ed14

00002054 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    2054:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    2058:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    205a:	3a20      	subs	r2, #32
    205c:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    2060:	4908      	ldr	r1, [pc, #32]	; (2084 <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    2062:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    2064:	9b00      	ldr	r3, [sp, #0]
    2066:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    2068:	9b01      	ldr	r3, [sp, #4]
    206a:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    206c:	9b02      	ldr	r3, [sp, #8]
    206e:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    2070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2074:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    2076:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    207a:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    207c:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    207e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2080:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2082:	4770      	bx	lr
    2084:	00005d91 	.word	0x00005d91

00002088 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    2088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    208a:	4606      	mov	r6, r0
    208c:	460c      	mov	r4, r1
    208e:	4617      	mov	r7, r2
    2090:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2092:	f000 f9cd 	bl	2430 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    2096:	4b09      	ldr	r3, [pc, #36]	; (20bc <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    2098:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    209a:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    209e:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    20a0:	4628      	mov	r0, r5
    20a2:	f384 8809 	msr	PSP, r4
    20a6:	2100      	movs	r1, #0
    20a8:	b663      	cpsie	if
    20aa:	f381 8811 	msr	BASEPRI, r1
    20ae:	f3bf 8f6f 	isb	sy
    20b2:	2200      	movs	r2, #0
    20b4:	2300      	movs	r3, #0
    20b6:	f003 fe6b 	bl	5d90 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    20ba:	bf00      	nop
    20bc:	20000518 	.word	0x20000518

000020c0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    20c0:	4a0e      	ldr	r2, [pc, #56]	; (20fc <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    20c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    20c4:	4b0e      	ldr	r3, [pc, #56]	; (2100 <z_arm_prep_c+0x40>)
    20c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    20ca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    20cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    20d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    20d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    20dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    20e0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    20e4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    20e8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    20ec:	f002 fb7c 	bl	47e8 <z_bss_zero>
	z_data_copy();
    20f0:	f002 fb84 	bl	47fc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    20f4:	f000 f96a 	bl	23cc <z_arm_interrupt_init>
	z_cstart();
    20f8:	f002 fbbe 	bl	4878 <z_cstart>
    20fc:	00000000 	.word	0x00000000
    2100:	e000ed00 	.word	0xe000ed00

00002104 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2104:	490f      	ldr	r1, [pc, #60]	; (2144 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2106:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2108:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    210c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    210e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2112:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2116:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2118:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    211c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2120:	4f09      	ldr	r7, [pc, #36]	; (2148 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2122:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2126:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2128:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    212a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    212c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    212e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2130:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2132:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2136:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    213a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    213e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2142:	4770      	bx	lr
    ldr r1, =_kernel
    2144:	20000518 	.word	0x20000518
    ldr v4, =_SCS_ICSR
    2148:	e000ed04 	.word	0xe000ed04

0000214c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    214c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2150:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2152:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2156:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    215a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    215c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2160:	2902      	cmp	r1, #2
    beq _oops
    2162:	d0ff      	beq.n	2164 <_oops>

00002164 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2164:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2166:	f003 ff2b 	bl	5fc0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    216a:	bd01      	pop	{r0, pc}

0000216c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    216c:	4901      	ldr	r1, [pc, #4]	; (2174 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    216e:	2210      	movs	r2, #16
	str	r2, [r1]
    2170:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2172:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2174:	e000ed10 	.word	0xe000ed10

00002178 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2178:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    217a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    217c:	f380 8811 	msr	BASEPRI, r0
	isb
    2180:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2184:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2188:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    218a:	b662      	cpsie	i
	isb
    218c:	f3bf 8f6f 	isb	sy

	bx	lr
    2190:	4770      	bx	lr
    2192:	bf00      	nop

00002194 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2194:	bf30      	wfi
    b z_SysNmiOnReset
    2196:	f7ff bffd 	b.w	2194 <z_SysNmiOnReset>
    219a:	bf00      	nop

0000219c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    219c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    219e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    21a0:	4a0b      	ldr	r2, [pc, #44]	; (21d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    21a2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    21a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    21a6:	bf1e      	ittt	ne
	movne	r1, #0
    21a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    21aa:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    21ac:	f004 faf8 	blne	67a0 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    21b0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    21b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    21b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    21ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    21be:	4905      	ldr	r1, [pc, #20]	; (21d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    21c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    21c2:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    21c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    21c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    21ca:	4903      	ldr	r1, [pc, #12]	; (21d8 <_isr_wrapper+0x3c>)
	bx r1
    21cc:	4708      	bx	r1
    21ce:	0000      	.short	0x0000
	ldr r2, =_kernel
    21d0:	20000518 	.word	0x20000518
	ldr r1, =_sw_isr_table
    21d4:	00006b3c 	.word	0x00006b3c
	ldr r1, =z_arm_int_exit
    21d8:	00002221 	.word	0x00002221

000021dc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    21dc:	f003 ffe8 	bl	61b0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    21e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    21e6:	4808      	ldr	r0, [pc, #32]	; (2208 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    21e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    21ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    21ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    21f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    21f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    21f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    21fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    21fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2202:	f7ff ff5d 	bl	20c0 <z_arm_prep_c>
    2206:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2208:	20000ec0 	.word	0x20000ec0

0000220c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    220c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2210:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    2214:	4672      	mov	r2, lr

	push {r0, lr}
    2216:	b501      	push	{r0, lr}

	bl z_arm_fault
    2218:	f000 f85c 	bl	22d4 <z_arm_fault>

	pop {r0, pc}
    221c:	bd01      	pop	{r0, pc}
    221e:	bf00      	nop

00002220 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2220:	4b04      	ldr	r3, [pc, #16]	; (2234 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2222:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2224:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    2226:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2228:	d003      	beq.n	2232 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    222a:	4903      	ldr	r1, [pc, #12]	; (2238 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    222c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2230:	600a      	str	r2, [r1, #0]

00002232 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2232:	4770      	bx	lr
	ldr r3, =_kernel
    2234:	20000518 	.word	0x20000518
	ldr r1, =_SCS_ICSR
    2238:	e000ed04 	.word	0xe000ed04

0000223c <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    223c:	4b0c      	ldr	r3, [pc, #48]	; (2270 <mem_manage_fault.isra.0+0x34>)
    223e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2244:	0792      	lsls	r2, r2, #30
    2246:	d508      	bpl.n	225a <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    2248:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    224a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    224c:	0612      	lsls	r2, r2, #24
    224e:	d504      	bpl.n	225a <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    2250:	b118      	cbz	r0, 225a <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2258:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    225a:	4b05      	ldr	r3, [pc, #20]	; (2270 <mem_manage_fault.isra.0+0x34>)
    225c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    225e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2262:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2264:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2266:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    226a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    226c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    226e:	4770      	bx	lr
    2270:	e000ed00 	.word	0xe000ed00

00002274 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2274:	4b0d      	ldr	r3, [pc, #52]	; (22ac <bus_fault.isra.0+0x38>)
    2276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    227a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    227c:	0592      	lsls	r2, r2, #22
    227e:	d508      	bpl.n	2292 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2280:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2284:	0412      	lsls	r2, r2, #16
    2286:	d504      	bpl.n	2292 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    2288:	b118      	cbz	r0, 2292 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    228a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    228c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2290:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2292:	4b06      	ldr	r3, [pc, #24]	; (22ac <bus_fault.isra.0+0x38>)
    2294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2298:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    229a:	bf58      	it	pl
    229c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    229e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    22a0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    22a2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    22a6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    22a8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    22aa:	4770      	bx	lr
    22ac:	e000ed00 	.word	0xe000ed00

000022b0 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    22b0:	4b07      	ldr	r3, [pc, #28]	; (22d0 <usage_fault.isra.0+0x20>)
    22b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    22b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    22b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    22b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    22ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    22bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    22be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    22c0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    22c4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    22c8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    22ca:	2000      	movs	r0, #0
    22cc:	4770      	bx	lr
    22ce:	bf00      	nop
    22d0:	e000ed00 	.word	0xe000ed00

000022d4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    22d4:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    22d6:	4b36      	ldr	r3, [pc, #216]	; (23b0 <z_arm_fault+0xdc>)
    22d8:	685b      	ldr	r3, [r3, #4]
{
    22da:	b08a      	sub	sp, #40	; 0x28
    22dc:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    22de:	f3c3 0308 	ubfx	r3, r3, #0, #9
    22e2:	2500      	movs	r5, #0
    22e4:	f385 8811 	msr	BASEPRI, r5
    22e8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    22ec:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    22f0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    22f4:	d111      	bne.n	231a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    22f6:	f002 010c 	and.w	r1, r2, #12
    22fa:	2908      	cmp	r1, #8
    22fc:	d00d      	beq.n	231a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    22fe:	0711      	lsls	r1, r2, #28
    2300:	d401      	bmi.n	2306 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2302:	4606      	mov	r6, r0
			*nested_exc = true;
    2304:	2501      	movs	r5, #1
	*recoverable = false;
    2306:	2200      	movs	r2, #0
    2308:	3b03      	subs	r3, #3
    230a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    230e:	2b03      	cmp	r3, #3
    2310:	d847      	bhi.n	23a2 <z_arm_fault+0xce>
    2312:	e8df f003 	tbb	[pc, r3]
    2316:	3e04      	.short	0x3e04
    2318:	3b42      	.short	0x3b42
		return NULL;
    231a:	462e      	mov	r6, r5
    231c:	e7f3      	b.n	2306 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    231e:	4b24      	ldr	r3, [pc, #144]	; (23b0 <z_arm_fault+0xdc>)
    2320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2322:	0792      	lsls	r2, r2, #30
    2324:	d43d      	bmi.n	23a2 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2326:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2328:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    232c:	d008      	beq.n	2340 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    232e:	3328      	adds	r3, #40	; 0x28
    2330:	781b      	ldrb	r3, [r3, #0]
    2332:	b1eb      	cbz	r3, 2370 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    2334:	f10d 0107 	add.w	r1, sp, #7
    2338:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    233a:	f7ff ff7f 	bl	223c <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    233e:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2340:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2344:	b993      	cbnz	r3, 236c <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2346:	2220      	movs	r2, #32
    2348:	4631      	mov	r1, r6
    234a:	a802      	add	r0, sp, #8
    234c:	f003 fe67 	bl	601e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2350:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2352:	b345      	cbz	r5, 23a6 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2354:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2358:	b922      	cbnz	r2, 2364 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    235a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    235e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2362:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2364:	a902      	add	r1, sp, #8
    2366:	4620      	mov	r0, r4
    2368:	f003 fe28 	bl	5fbc <z_arm_fatal_error>
}
    236c:	b00a      	add	sp, #40	; 0x28
    236e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2370:	4b10      	ldr	r3, [pc, #64]	; (23b4 <z_arm_fault+0xe0>)
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	b12b      	cbz	r3, 2382 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    2376:	f10d 0107 	add.w	r1, sp, #7
    237a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    237c:	f7ff ff7a 	bl	2274 <bus_fault.isra.0>
    2380:	e7dd      	b.n	233e <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    2382:	4b0d      	ldr	r3, [pc, #52]	; (23b8 <z_arm_fault+0xe4>)
    2384:	8818      	ldrh	r0, [r3, #0]
    2386:	b284      	uxth	r4, r0
    2388:	2c00      	cmp	r4, #0
    238a:	d0d9      	beq.n	2340 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    238c:	f7ff ff90 	bl	22b0 <usage_fault.isra.0>
    2390:	e7d5      	b.n	233e <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    2392:	f10d 0107 	add.w	r1, sp, #7
    2396:	2000      	movs	r0, #0
    2398:	e7cf      	b.n	233a <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    239a:	f10d 0107 	add.w	r1, sp, #7
    239e:	2000      	movs	r0, #0
    23a0:	e7ec      	b.n	237c <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    23a2:	2400      	movs	r4, #0
    23a4:	e7cc      	b.n	2340 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    23a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    23aa:	f023 0301 	bic.w	r3, r3, #1
    23ae:	e7d8      	b.n	2362 <z_arm_fault+0x8e>
    23b0:	e000ed00 	.word	0xe000ed00
    23b4:	e000ed29 	.word	0xe000ed29
    23b8:	e000ed2a 	.word	0xe000ed2a

000023bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    23bc:	4a02      	ldr	r2, [pc, #8]	; (23c8 <z_arm_fault_init+0xc>)
    23be:	6953      	ldr	r3, [r2, #20]
    23c0:	f043 0310 	orr.w	r3, r3, #16
    23c4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    23c6:	4770      	bx	lr
    23c8:	e000ed00 	.word	0xe000ed00

000023cc <z_arm_interrupt_init>:
    23cc:	4804      	ldr	r0, [pc, #16]	; (23e0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    23ce:	2300      	movs	r3, #0
    23d0:	2120      	movs	r1, #32
    23d2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    23d4:	3301      	adds	r3, #1
    23d6:	2b27      	cmp	r3, #39	; 0x27
    23d8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    23dc:	d1f9      	bne.n	23d2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    23de:	4770      	bx	lr
    23e0:	e000e100 	.word	0xe000e100

000023e4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    23e4:	b538      	push	{r3, r4, r5, lr}
    23e6:	4604      	mov	r4, r0
	__asm__ volatile(
    23e8:	f04f 0320 	mov.w	r3, #32
    23ec:	f3ef 8511 	mrs	r5, BASEPRI
    23f0:	f383 8811 	msr	BASEPRI, r3
    23f4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    23f8:	f002 fc70 	bl	4cdc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    23fc:	4b0a      	ldr	r3, [pc, #40]	; (2428 <z_impl_k_thread_abort+0x44>)
    23fe:	689b      	ldr	r3, [r3, #8]
    2400:	42a3      	cmp	r3, r4
    2402:	d10b      	bne.n	241c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2404:	4b09      	ldr	r3, [pc, #36]	; (242c <z_impl_k_thread_abort+0x48>)
    2406:	685a      	ldr	r2, [r3, #4]
    2408:	f3c2 0208 	ubfx	r2, r2, #0, #9
    240c:	b912      	cbnz	r2, 2414 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    240e:	4628      	mov	r0, r5
    2410:	f7ff fdde 	bl	1fd0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2414:	685a      	ldr	r2, [r3, #4]
    2416:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    241a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    241c:	4628      	mov	r0, r5
}
    241e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    2422:	f004 b9f3 	b.w	680c <z_reschedule_irqlock>
    2426:	bf00      	nop
    2428:	20000518 	.word	0x20000518
    242c:	e000ed00 	.word	0xe000ed00

00002430 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    2432:	4b08      	ldr	r3, [pc, #32]	; (2454 <z_arm_configure_static_mpu_regions+0x24>)
    2434:	9301      	str	r3, [sp, #4]
    2436:	4b08      	ldr	r3, [pc, #32]	; (2458 <z_arm_configure_static_mpu_regions+0x28>)
    2438:	9302      	str	r3, [sp, #8]
    243a:	4b08      	ldr	r3, [pc, #32]	; (245c <z_arm_configure_static_mpu_regions+0x2c>)
    243c:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    243e:	ab01      	add	r3, sp, #4
    2440:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2442:	4a07      	ldr	r2, [pc, #28]	; (2460 <z_arm_configure_static_mpu_regions+0x30>)
    2444:	4b07      	ldr	r3, [pc, #28]	; (2464 <z_arm_configure_static_mpu_regions+0x34>)
    2446:	2101      	movs	r1, #1
    2448:	4668      	mov	r0, sp
    244a:	f000 f893 	bl	2574 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    244e:	b005      	add	sp, #20
    2450:	f85d fb04 	ldr.w	pc, [sp], #4
    2454:	20000000 	.word	0x20000000
    2458:	00000000 	.word	0x00000000
    245c:	060b0000 	.word	0x060b0000
    2460:	20000000 	.word	0x20000000
    2464:	20010000 	.word	0x20010000

00002468 <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    2468:	f8df c084 	ldr.w	ip, [pc, #132]	; 24f0 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    246c:	b5f0      	push	{r4, r5, r6, r7, lr}
    246e:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2470:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    2472:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    2474:	428f      	cmp	r7, r1
    2476:	db00      	blt.n	247a <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2478:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    247a:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    247e:	f8de 4004 	ldr.w	r4, [lr, #4]
    2482:	b394      	cbz	r4, 24ea <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    2484:	b143      	cbz	r3, 2498 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    2486:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2488:	422c      	tst	r4, r5
    248a:	d119      	bne.n	24c0 <mpu_configure_regions+0x58>
		&&
    248c:	2c1f      	cmp	r4, #31
    248e:	d917      	bls.n	24c0 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
    2490:	f8de 2000 	ldr.w	r2, [lr]
		&&
    2494:	4215      	tst	r5, r2
    2496:	d113      	bne.n	24c0 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2498:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    249a:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    249c:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    24a0:	f8de 0008 	ldr.w	r0, [lr, #8]
    24a4:	d90f      	bls.n	24c6 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    24a6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    24aa:	d80e      	bhi.n	24ca <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    24ac:	3c01      	subs	r4, #1
    24ae:	fab4 f484 	clz	r4, r4
    24b2:	f1c4 041f 	rsb	r4, r4, #31
    24b6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    24b8:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    24ba:	ea44 0400 	orr.w	r4, r4, r0
    24be:	d906      	bls.n	24ce <mpu_configure_regions+0x66>
			return -EINVAL;
    24c0:	f06f 0015 	mvn.w	r0, #21
    24c4:	e7d8      	b.n	2478 <mpu_configure_regions+0x10>
		return REGION_32B;
    24c6:	2408      	movs	r4, #8
    24c8:	e7f6      	b.n	24b8 <mpu_configure_regions+0x50>
		return REGION_4G;
    24ca:	243e      	movs	r4, #62	; 0x3e
    24cc:	e7f4      	b.n	24b8 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    24ce:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    24d2:	4315      	orrs	r5, r2
    24d4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    24d8:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    24dc:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    24e0:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    24e2:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    24e6:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    24ea:	3701      	adds	r7, #1
    24ec:	e7c2      	b.n	2474 <mpu_configure_regions+0xc>
    24ee:	bf00      	nop
    24f0:	e000ed90 	.word	0xe000ed90

000024f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    24f4:	4b03      	ldr	r3, [pc, #12]	; (2504 <arm_core_mpu_enable+0x10>)
    24f6:	2205      	movs	r2, #5
    24f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    24fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24fe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2502:	4770      	bx	lr
    2504:	e000ed90 	.word	0xe000ed90

00002508 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2508:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    250c:	4b01      	ldr	r3, [pc, #4]	; (2514 <arm_core_mpu_disable+0xc>)
    250e:	2200      	movs	r2, #0
    2510:	605a      	str	r2, [r3, #4]
}
    2512:	4770      	bx	lr
    2514:	e000ed90 	.word	0xe000ed90

00002518 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2518:	4913      	ldr	r1, [pc, #76]	; (2568 <arm_mpu_init+0x50>)
    251a:	6808      	ldr	r0, [r1, #0]
    251c:	2808      	cmp	r0, #8
{
    251e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2520:	d81e      	bhi.n	2560 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2522:	f7ff fff1 	bl	2508 <arm_core_mpu_disable>
	MPU->RNR = index;
    2526:	4c11      	ldr	r4, [pc, #68]	; (256c <arm_mpu_init+0x54>)
    2528:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    252a:	2200      	movs	r2, #0
    252c:	4290      	cmp	r0, r2
    252e:	f101 010c 	add.w	r1, r1, #12
    2532:	d105      	bne.n	2540 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2534:	4b0e      	ldr	r3, [pc, #56]	; (2570 <arm_mpu_init+0x58>)
    2536:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2538:	f7ff ffdc 	bl	24f4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    253c:	2000      	movs	r0, #0
}
    253e:	bd10      	pop	{r4, pc}
    2540:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2542:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2546:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    254a:	4313      	orrs	r3, r2
    254c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2550:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2552:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2556:	f043 0301 	orr.w	r3, r3, #1
    255a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    255c:	3201      	adds	r2, #1
    255e:	e7e5      	b.n	252c <arm_mpu_init+0x14>
		return -1;
    2560:	f04f 30ff 	mov.w	r0, #4294967295
    2564:	e7eb      	b.n	253e <arm_mpu_init+0x26>
    2566:	bf00      	nop
    2568:	00006cac 	.word	0x00006cac
    256c:	e000ed90 	.word	0xe000ed90
    2570:	20000977 	.word	0x20000977

00002574 <arm_core_mpu_configure_static_mpu_regions>:
{
    2574:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2576:	4c03      	ldr	r4, [pc, #12]	; (2584 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2578:	2301      	movs	r3, #1
    257a:	7822      	ldrb	r2, [r4, #0]
    257c:	f7ff ff74 	bl	2468 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2580:	7020      	strb	r0, [r4, #0]
}
    2582:	bd10      	pop	{r4, pc}
    2584:	20000977 	.word	0x20000977

00002588 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    2588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    258c:	b0a1      	sub	sp, #132	; 0x84
    258e:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    2590:	2300      	movs	r3, #0
{
    2592:	9003      	str	r0, [sp, #12]
    2594:	4689      	mov	r9, r1
	count = 0;
    2596:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    2598:	4613      	mov	r3, r2
    259a:	f813 0b01 	ldrb.w	r0, [r3], #1
    259e:	9306      	str	r3, [sp, #24]
    25a0:	b158      	cbz	r0, 25ba <z_prf+0x32>
		if (c != '%') {
    25a2:	2825      	cmp	r0, #37	; 0x25
    25a4:	f000 8081 	beq.w	26aa <z_prf+0x122>
			PUTC(c);
    25a8:	4649      	mov	r1, r9
    25aa:	9b03      	ldr	r3, [sp, #12]
    25ac:	4798      	blx	r3
    25ae:	3001      	adds	r0, #1
    25b0:	f040 844a 	bne.w	2e48 <z_prf+0x8c0>
    25b4:	f04f 33ff 	mov.w	r3, #4294967295
    25b8:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    25ba:	9802      	ldr	r0, [sp, #8]
    25bc:	b021      	add	sp, #132	; 0x84
    25be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    25c2:	2d2b      	cmp	r5, #43	; 0x2b
    25c4:	d065      	beq.n	2692 <z_prf+0x10a>
    25c6:	d85c      	bhi.n	2682 <z_prf+0xfa>
    25c8:	2d20      	cmp	r5, #32
    25ca:	d065      	beq.n	2698 <z_prf+0x110>
    25cc:	2d23      	cmp	r5, #35	; 0x23
    25ce:	d066      	beq.n	269e <z_prf+0x116>
    25d0:	2d00      	cmp	r5, #0
    25d2:	d0f2      	beq.n	25ba <z_prf+0x32>
					fzero = true;
    25d4:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    25d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    25dc:	48a4      	ldr	r0, [pc, #656]	; (2870 <z_prf+0x2e8>)
    25de:	f818 5b01 	ldrb.w	r5, [r8], #1
    25e2:	4629      	mov	r1, r5
    25e4:	f003 fd01 	bl	5fea <strchr>
    25e8:	2800      	cmp	r0, #0
    25ea:	d1ea      	bne.n	25c2 <z_prf+0x3a>
			if (c == '*') {
    25ec:	2d2a      	cmp	r5, #42	; 0x2a
    25ee:	d163      	bne.n	26b8 <z_prf+0x130>
				width = va_arg(vargs, int);
    25f0:	f856 3b04 	ldr.w	r3, [r6], #4
    25f4:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    25f6:	2b00      	cmp	r3, #0
					width = -width;
    25f8:	bfbf      	itttt	lt
    25fa:	425b      	neglt	r3, r3
    25fc:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    25fe:	2301      	movlt	r3, #1
    2600:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    2602:	9b06      	ldr	r3, [sp, #24]
    2604:	f898 5000 	ldrb.w	r5, [r8]
    2608:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    260c:	2d2e      	cmp	r5, #46	; 0x2e
    260e:	d178      	bne.n	2702 <z_prf+0x17a>
				if (c == '*') {
    2610:	f898 3000 	ldrb.w	r3, [r8]
    2614:	2b2a      	cmp	r3, #42	; 0x2a
    2616:	d171      	bne.n	26fc <z_prf+0x174>
					precision = va_arg(vargs, int);
    2618:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    261c:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    2620:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    2624:	4893      	ldr	r0, [pc, #588]	; (2874 <z_prf+0x2ec>)
    2626:	4629      	mov	r1, r5
    2628:	462f      	mov	r7, r5
    262a:	f003 fcde 	bl	5fea <strchr>
    262e:	2800      	cmp	r0, #0
    2630:	d06a      	beq.n	2708 <z_prf+0x180>
				c = *format++;
    2632:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    2634:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    2636:	f813 5b01 	ldrb.w	r5, [r3], #1
    263a:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    263c:	d107      	bne.n	264e <z_prf+0xc6>
    263e:	2d68      	cmp	r5, #104	; 0x68
    2640:	d105      	bne.n	264e <z_prf+0xc6>
					c = *format++;
    2642:	f108 0302 	add.w	r3, r8, #2
    2646:	f898 5001 	ldrb.w	r5, [r8, #1]
    264a:	9306      	str	r3, [sp, #24]
					i = 'H';
    264c:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    264e:	2d78      	cmp	r5, #120	; 0x78
    2650:	d808      	bhi.n	2664 <z_prf+0xdc>
    2652:	2d57      	cmp	r5, #87	; 0x57
    2654:	d85c      	bhi.n	2710 <z_prf+0x188>
    2656:	2d25      	cmp	r5, #37	; 0x25
    2658:	f000 83f2 	beq.w	2e40 <z_prf+0x8b8>
    265c:	f200 80a2 	bhi.w	27a4 <z_prf+0x21c>
    2660:	2d00      	cmp	r5, #0
    2662:	d0aa      	beq.n	25ba <z_prf+0x32>
				PUTC('%');
    2664:	9b03      	ldr	r3, [sp, #12]
    2666:	4649      	mov	r1, r9
    2668:	2025      	movs	r0, #37	; 0x25
    266a:	4798      	blx	r3
    266c:	3001      	adds	r0, #1
    266e:	d0a1      	beq.n	25b4 <z_prf+0x2c>
				PUTC(c);
    2670:	9b03      	ldr	r3, [sp, #12]
    2672:	4649      	mov	r1, r9
    2674:	4628      	mov	r0, r5
    2676:	4798      	blx	r3
    2678:	3001      	adds	r0, #1
    267a:	d09b      	beq.n	25b4 <z_prf+0x2c>
				count += 2;
    267c:	9b02      	ldr	r3, [sp, #8]
    267e:	3302      	adds	r3, #2
    2680:	e3e4      	b.n	2e4c <z_prf+0x8c4>
				switch (c) {
    2682:	2d2d      	cmp	r5, #45	; 0x2d
    2684:	d00e      	beq.n	26a4 <z_prf+0x11c>
					fzero = true;
    2686:	2d30      	cmp	r5, #48	; 0x30
    2688:	9b08      	ldr	r3, [sp, #32]
    268a:	bf08      	it	eq
    268c:	2301      	moveq	r3, #1
    268e:	9308      	str	r3, [sp, #32]
    2690:	e7a0      	b.n	25d4 <z_prf+0x4c>
					fplus = true;
    2692:	2301      	movs	r3, #1
    2694:	9309      	str	r3, [sp, #36]	; 0x24
    2696:	e79d      	b.n	25d4 <z_prf+0x4c>
					fspace = true;
    2698:	2301      	movs	r3, #1
    269a:	930c      	str	r3, [sp, #48]	; 0x30
    269c:	e79a      	b.n	25d4 <z_prf+0x4c>
					falt = true;
    269e:	f04f 0a01 	mov.w	sl, #1
    26a2:	e797      	b.n	25d4 <z_prf+0x4c>
				switch (c) {
    26a4:	2301      	movs	r3, #1
    26a6:	930d      	str	r3, [sp, #52]	; 0x34
    26a8:	e794      	b.n	25d4 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    26aa:	2300      	movs	r3, #0
    26ac:	9308      	str	r3, [sp, #32]
    26ae:	930c      	str	r3, [sp, #48]	; 0x30
    26b0:	9309      	str	r3, [sp, #36]	; 0x24
    26b2:	930d      	str	r3, [sp, #52]	; 0x34
    26b4:	469a      	mov	sl, r3
    26b6:	e78f      	b.n	25d8 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    26b8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit(c)) {
    26bc:	2b09      	cmp	r3, #9
				width = 0;
    26be:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    26c0:	d8a4      	bhi.n	260c <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    26c2:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    26c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
    26c8:	f818 5b01 	ldrb.w	r5, [r8], #1
    26cc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    26d0:	2b09      	cmp	r3, #9
    26d2:	d89b      	bhi.n	260c <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    26d4:	9b07      	ldr	r3, [sp, #28]
    26d6:	fb02 5503 	mla	r5, r2, r3, r5
    26da:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    26de:	e9cd 8306 	strd	r8, r3, [sp, #24]
    26e2:	e7ef      	b.n	26c4 <z_prf+0x13c>
    26e4:	fb01 3404 	mla	r4, r1, r4, r3
    26e8:	3c30      	subs	r4, #48	; 0x30
    26ea:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    26ec:	4642      	mov	r2, r8
    26ee:	f812 3b01 	ldrb.w	r3, [r2], #1
    26f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    26f6:	2809      	cmp	r0, #9
    26f8:	d9f4      	bls.n	26e4 <z_prf+0x15c>
    26fa:	e791      	b.n	2620 <z_prf+0x98>
	int i = 0;
    26fc:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    26fe:	210a      	movs	r1, #10
    2700:	e7f4      	b.n	26ec <z_prf+0x164>
			precision = -1;
    2702:	f04f 34ff 	mov.w	r4, #4294967295
    2706:	e78d      	b.n	2624 <z_prf+0x9c>
    2708:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    270c:	4607      	mov	r7, r0
    270e:	e79e      	b.n	264e <z_prf+0xc6>
    2710:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    2714:	2b20      	cmp	r3, #32
    2716:	d8a5      	bhi.n	2664 <z_prf+0xdc>
    2718:	a201      	add	r2, pc, #4	; (adr r2, 2720 <z_prf+0x198>)
    271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    271e:	bf00      	nop
    2720:	00002da5 	.word	0x00002da5
    2724:	00002665 	.word	0x00002665
    2728:	00002665 	.word	0x00002665
    272c:	00002665 	.word	0x00002665
    2730:	00002665 	.word	0x00002665
    2734:	00002665 	.word	0x00002665
    2738:	00002665 	.word	0x00002665
    273c:	00002665 	.word	0x00002665
    2740:	00002665 	.word	0x00002665
    2744:	00002665 	.word	0x00002665
    2748:	00002665 	.word	0x00002665
    274c:	00002879 	.word	0x00002879
    2750:	0000294f 	.word	0x0000294f
    2754:	000027b1 	.word	0x000027b1
    2758:	000027b1 	.word	0x000027b1
    275c:	000027b1 	.word	0x000027b1
    2760:	00002665 	.word	0x00002665
    2764:	0000294f 	.word	0x0000294f
    2768:	00002665 	.word	0x00002665
    276c:	00002665 	.word	0x00002665
    2770:	00002665 	.word	0x00002665
    2774:	00002665 	.word	0x00002665
    2778:	00002d31 	.word	0x00002d31
    277c:	00002da5 	.word	0x00002da5
    2780:	00002d5b 	.word	0x00002d5b
    2784:	00002665 	.word	0x00002665
    2788:	00002665 	.word	0x00002665
    278c:	00002d7d 	.word	0x00002d7d
    2790:	00002665 	.word	0x00002665
    2794:	00002da5 	.word	0x00002da5
    2798:	00002665 	.word	0x00002665
    279c:	00002665 	.word	0x00002665
    27a0:	00002da5 	.word	0x00002da5
			switch (c) {
    27a4:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    27a8:	b2db      	uxtb	r3, r3
    27aa:	2b02      	cmp	r3, #2
    27ac:	f63f af5a 	bhi.w	2664 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    27b0:	3607      	adds	r6, #7
    27b2:	f026 0307 	bic.w	r3, r6, #7
    27b6:	4619      	mov	r1, r3
    27b8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    27bc:	02d8      	lsls	r0, r3, #11
    27be:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    27c2:	02d6      	lsls	r6, r2, #11
    27c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    27c8:	9604      	str	r6, [sp, #16]
    27ca:	9005      	str	r0, [sp, #20]
    27cc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
	if (sign) {
    27d0:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    27d2:	9101      	str	r1, [sp, #4]
	exp = double_temp >> 52 & 0x7ff;
    27d4:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    27d8:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    27dc:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    27e0:	f280 80e5 	bge.w	29ae <z_prf+0x426>
		*buf++ = '-';
    27e4:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    27e6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    27ea:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    27ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
    27f2:	4299      	cmp	r1, r3
    27f4:	f040 80f6 	bne.w	29e4 <z_prf+0x45c>
		if (!fract) {
    27f8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    27fc:	430a      	orrs	r2, r1
    27fe:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    2802:	f107 0303 	add.w	r3, r7, #3
    2806:	f040 80e2 	bne.w	29ce <z_prf+0x446>
			if (isupper(c)) {
    280a:	2d19      	cmp	r5, #25
    280c:	f200 80d9 	bhi.w	29c2 <z_prf+0x43a>
				*buf++ = 'I';
    2810:	2249      	movs	r2, #73	; 0x49
    2812:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    2814:	224e      	movs	r2, #78	; 0x4e
    2816:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    2818:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    281a:	2400      	movs	r4, #0
		return buf - start;
    281c:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    281e:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    2820:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    2822:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    2824:	46a2      	mov	sl, r4
    2826:	46a3      	mov	fp, r4
				if (fplus || fspace || (buf[0] == '-')) {
    2828:	9a09      	ldr	r2, [sp, #36]	; 0x24
    282a:	2a00      	cmp	r2, #0
    282c:	f040 827d 	bne.w	2d2a <z_prf+0x7a2>
    2830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2832:	2a00      	cmp	r2, #0
    2834:	f040 8279 	bne.w	2d2a <z_prf+0x7a2>
    2838:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    283c:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    2840:	f1d2 0800 	rsbs	r8, r2, #0
    2844:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    2848:	eb0b 060a 	add.w	r6, fp, sl
    284c:	4433      	add	r3, r6
    284e:	191e      	adds	r6, r3, r4
				if (!isdigit(buf[prefix])) {
    2850:	ab20      	add	r3, sp, #128	; 0x80
    2852:	4443      	add	r3, r8
    2854:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    2858:	3b30      	subs	r3, #48	; 0x30
    285a:	2b09      	cmp	r3, #9
    285c:	f200 82fe 	bhi.w	2e5c <z_prf+0x8d4>
			} else if (fzero) {
    2860:	9b08      	ldr	r3, [sp, #32]
    2862:	2b00      	cmp	r3, #0
    2864:	f000 82fd 	beq.w	2e62 <z_prf+0x8da>
    2868:	9b07      	ldr	r3, [sp, #28]
    286a:	af19      	add	r7, sp, #100	; 0x64
    286c:	1b9b      	subs	r3, r3, r6
    286e:	e014      	b.n	289a <z_prf+0x312>
    2870:	00008c05 	.word	0x00008c05
    2874:	00008c0b 	.word	0x00008c0b
				buf[0] = va_arg(vargs, int);
    2878:	4632      	mov	r2, r6
				break;
    287a:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    287e:	f852 3b04 	ldr.w	r3, [r2], #4
    2882:	9201      	str	r2, [sp, #4]
    2884:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				clen = 1;
    2888:	2601      	movs	r6, #1
				break;
    288a:	4644      	mov	r4, r8
    288c:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    288e:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    2892:	2400      	movs	r4, #0
				zero_head = precision - clen + prefix;
    2894:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    2896:	46a2      	mov	sl, r4
    2898:	46a3      	mov	fp, r4
			if (zero_head < 0) {
    289a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    289e:	199a      	adds	r2, r3, r6
    28a0:	9208      	str	r2, [sp, #32]
    28a2:	9a07      	ldr	r2, [sp, #28]
    28a4:	1999      	adds	r1, r3, r6
    28a6:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    28a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    28aa:	b912      	cbnz	r2, 28b2 <z_prf+0x32a>
    28ac:	2d00      	cmp	r5, #0
    28ae:	f300 82ed 	bgt.w	2e8c <z_prf+0x904>
			while (prefix-- > 0) {
    28b2:	eb07 0208 	add.w	r2, r7, r8
    28b6:	42ba      	cmp	r2, r7
    28b8:	f040 82ea 	bne.w	2e90 <z_prf+0x908>
			while (zero_head-- > 0) {
    28bc:	3b01      	subs	r3, #1
    28be:	f080 82f5 	bcs.w	2eac <z_prf+0x924>
			clen -= prefix;
    28c2:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    28c6:	f1bb 0f00 	cmp.w	fp, #0
    28ca:	d010      	beq.n	28ee <z_prf+0x366>
				c = *cptr;
    28cc:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c)) {
    28ce:	eb07 0806 	add.w	r8, r7, r6
    28d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    28d6:	2b09      	cmp	r3, #9
    28d8:	eba8 0607 	sub.w	r6, r8, r7
    28dc:	f240 82f1 	bls.w	2ec2 <z_prf+0x93a>
    28e0:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    28e2:	f1b8 0801 	subs.w	r8, r8, #1
    28e6:	f080 82f5 	bcs.w	2ed4 <z_prf+0x94c>
				clen -= zero.predot;
    28ea:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    28ee:	f1ba 0f00 	cmp.w	sl, #0
    28f2:	d016      	beq.n	2922 <z_prf+0x39a>
    28f4:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    28f8:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    28fc:	9b03      	ldr	r3, [sp, #12]
    28fe:	4649      	mov	r1, r9
    2900:	4658      	mov	r0, fp
    2902:	4798      	blx	r3
    2904:	3001      	adds	r0, #1
    2906:	f43f ae55 	beq.w	25b4 <z_prf+0x2c>
				} while (c != '.');
    290a:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    290e:	eba8 0607 	sub.w	r6, r8, r7
    2912:	d1f1      	bne.n	28f8 <z_prf+0x370>
				while (zero.postdot-- > 0) {
    2914:	46d0      	mov	r8, sl
    2916:	f1b8 0f00 	cmp.w	r8, #0
    291a:	f300 82e4 	bgt.w	2ee6 <z_prf+0x95e>
				clen -= zero.postdot;
    291e:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    2922:	b194      	cbz	r4, 294a <z_prf+0x3c2>
				c = *cptr;
    2924:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c) || c == '.') {
    2926:	eb07 0806 	add.w	r8, r7, r6
    292a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    292e:	2b09      	cmp	r3, #9
    2930:	eba8 0607 	sub.w	r6, r8, r7
    2934:	f240 82e2 	bls.w	2efc <z_prf+0x974>
    2938:	282e      	cmp	r0, #46	; 0x2e
    293a:	f000 82df 	beq.w	2efc <z_prf+0x974>
				while (zero.trail-- > 0) {
    293e:	46a0      	mov	r8, r4
    2940:	f1b8 0f00 	cmp.w	r8, #0
    2944:	f300 82e3 	bgt.w	2f0e <z_prf+0x986>
				clen -= zero.trail;
    2948:	1b36      	subs	r6, r6, r4
    294a:	443e      	add	r6, r7
    294c:	e2f2      	b.n	2f34 <z_prf+0x9ac>
				switch (i) {
    294e:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    2950:	1d33      	adds	r3, r6, #4
    2952:	2d00      	cmp	r5, #0
    2954:	9301      	str	r3, [sp, #4]
    2956:	da1c      	bge.n	2992 <z_prf+0x40a>
		*buf++ = '-';
    2958:	232d      	movs	r3, #45	; 0x2d
    295a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		value = -value;
    295e:	4269      	negs	r1, r5
		*buf++ = ' ';
    2960:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    2964:	4630      	mov	r0, r6
    2966:	220a      	movs	r2, #10
    2968:	f003 fba7 	bl	60ba <_to_x>
				if (fplus || fspace || val < 0) {
    296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    296e:	4406      	add	r6, r0
    2970:	a819      	add	r0, sp, #100	; 0x64
    2972:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    2974:	2b00      	cmp	r3, #0
    2976:	f040 826c 	bne.w	2e52 <z_prf+0x8ca>
    297a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    297c:	2b00      	cmp	r3, #0
    297e:	f040 8268 	bne.w	2e52 <z_prf+0x8ca>
    2982:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    2986:	2c00      	cmp	r4, #0
    2988:	da80      	bge.n	288c <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    298a:	2400      	movs	r4, #0
    298c:	46a2      	mov	sl, r4
    298e:	46a3      	mov	fp, r4
    2990:	e766      	b.n	2860 <z_prf+0x2d8>
	} else if (fplus) {
    2992:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2994:	b123      	cbz	r3, 29a0 <z_prf+0x418>
		*buf++ = '+';
    2996:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    2998:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    299c:	4629      	mov	r1, r5
    299e:	e7df      	b.n	2960 <z_prf+0x3d8>
	} else if (fspace) {
    29a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    29a2:	b10b      	cbz	r3, 29a8 <z_prf+0x420>
		*buf++ = ' ';
    29a4:	2320      	movs	r3, #32
    29a6:	e7f7      	b.n	2998 <z_prf+0x410>
    29a8:	4629      	mov	r1, r5
    29aa:	ae19      	add	r6, sp, #100	; 0x64
    29ac:	e7da      	b.n	2964 <z_prf+0x3dc>
	} else if (fplus) {
    29ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29b0:	b10b      	cbz	r3, 29b6 <z_prf+0x42e>
		*buf++ = '+';
    29b2:	232b      	movs	r3, #43	; 0x2b
    29b4:	e717      	b.n	27e6 <z_prf+0x25e>
	} else if (fspace) {
    29b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    29b8:	b10b      	cbz	r3, 29be <z_prf+0x436>
		*buf++ = ' ';
    29ba:	2320      	movs	r3, #32
    29bc:	e713      	b.n	27e6 <z_prf+0x25e>
    29be:	af19      	add	r7, sp, #100	; 0x64
    29c0:	e715      	b.n	27ee <z_prf+0x266>
				*buf++ = 'i';
    29c2:	2269      	movs	r2, #105	; 0x69
    29c4:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    29c6:	226e      	movs	r2, #110	; 0x6e
    29c8:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    29ca:	2266      	movs	r2, #102	; 0x66
    29cc:	e725      	b.n	281a <z_prf+0x292>
			if (isupper(c)) {
    29ce:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    29d0:	bf99      	ittee	ls
    29d2:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    29d4:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    29d6:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    29d8:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    29da:	bf94      	ite	ls
    29dc:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    29de:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    29e0:	7079      	strb	r1, [r7, #1]
    29e2:	e71a      	b.n	281a <z_prf+0x292>
	if ((exp | fract) != 0) {
    29e4:	9b04      	ldr	r3, [sp, #16]
    29e6:	9805      	ldr	r0, [sp, #20]
    29e8:	430b      	orrs	r3, r1
    29ea:	930e      	str	r3, [sp, #56]	; 0x38
    29ec:	17cb      	asrs	r3, r1, #31
    29ee:	4303      	orrs	r3, r0
    29f0:	930f      	str	r3, [sp, #60]	; 0x3c
    29f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
		c = 'f';
    29f6:	2d46      	cmp	r5, #70	; 0x46
    29f8:	bf08      	it	eq
    29fa:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    29fc:	4313      	orrs	r3, r2
    29fe:	f000 8107 	beq.w	2c10 <z_prf+0x688>
		if (exp == 0) {
    2a02:	2900      	cmp	r1, #0
    2a04:	f000 809f 	beq.w	2b46 <z_prf+0x5be>
		fract |= HIGHBIT64;
    2a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2a0e:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    2a12:	9315      	str	r3, [sp, #84]	; 0x54
    2a14:	2600      	movs	r6, #0
	while (exp <= -3) {
    2a16:	f118 0f02 	cmn.w	r8, #2
    2a1a:	f2c0 80a8 	blt.w	2b6e <z_prf+0x5e6>
	while (exp > 0) {
    2a1e:	f1b8 0f00 	cmp.w	r8, #0
    2a22:	f300 80d4 	bgt.w	2bce <z_prf+0x646>
		_rlrshift(&fract);
    2a26:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    2a28:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    2a2c:	f003 fb69 	bl	6102 <_rlrshift>
	while (exp < (0 + 4)) {
    2a30:	f1b8 0f04 	cmp.w	r8, #4
    2a34:	d1f7      	bne.n	2a26 <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    2a36:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    2a38:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    2a3c:	bfb8      	it	lt
    2a3e:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    2a40:	2b47      	cmp	r3, #71	; 0x47
    2a42:	f040 80ee 	bne.w	2c22 <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    2a46:	1cf1      	adds	r1, r6, #3
    2a48:	db02      	blt.n	2a50 <z_prf+0x4c8>
    2a4a:	42b4      	cmp	r4, r6
    2a4c:	f280 80e3 	bge.w	2c16 <z_prf+0x68e>
			c += 'e' - 'g';
    2a50:	3d02      	subs	r5, #2
    2a52:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    2a54:	2c00      	cmp	r4, #0
    2a56:	f000 80ea 	beq.w	2c2e <z_prf+0x6a6>
				precision--;
    2a5a:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    2a5c:	f1ba 0f00 	cmp.w	sl, #0
    2a60:	f040 80e5 	bne.w	2c2e <z_prf+0x6a6>
    2a64:	2c00      	cmp	r4, #0
    2a66:	bfd4      	ite	le
    2a68:	f04f 0800 	movle.w	r8, #0
    2a6c:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    2a70:	2d66      	cmp	r5, #102	; 0x66
    2a72:	f040 80de 	bne.w	2c32 <z_prf+0x6aa>
		if (exp < 0) {
    2a76:	eb14 0b06 	adds.w	fp, r4, r6
    2a7a:	f04f 0566 	mov.w	r5, #102	; 0x66
    2a7e:	f100 80db 	bmi.w	2c38 <z_prf+0x6b0>
	if (exp > 16) {
    2a82:	f1bb 0f10 	cmp.w	fp, #16
    2a86:	bfa8      	it	ge
    2a88:	f04f 0b10 	movge.w	fp, #16
    2a8c:	2310      	movs	r3, #16
    2a8e:	9313      	str	r3, [sp, #76]	; 0x4c
	ltemp = 0x0800000000000000;
    2a90:	2200      	movs	r2, #0
    2a92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2a96:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    2a9a:	f1bb 0b01 	subs.w	fp, fp, #1
    2a9e:	f080 80ce 	bcs.w	2c3e <z_prf+0x6b6>
	fract += ltemp;
    2aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2aa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2aa6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    2aa8:	189b      	adds	r3, r3, r2
    2aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2aac:	eb41 0202 	adc.w	r2, r1, r2
    2ab0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    2ab4:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    2ab8:	9310      	str	r3, [sp, #64]	; 0x40
    2aba:	2300      	movs	r3, #0
    2abc:	9311      	str	r3, [sp, #68]	; 0x44
    2abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2ac2:	4313      	orrs	r3, r2
    2ac4:	d006      	beq.n	2ad4 <z_prf+0x54c>
		_ldiv5(&fract);
    2ac6:	a814      	add	r0, sp, #80	; 0x50
    2ac8:	f003 fb2d 	bl	6126 <_ldiv5>
		_rlrshift(&fract);
    2acc:	a814      	add	r0, sp, #80	; 0x50
    2ace:	f003 fb18 	bl	6102 <_rlrshift>
		decexp++;
    2ad2:	3601      	adds	r6, #1
	if (c == 'f') {
    2ad4:	2d66      	cmp	r5, #102	; 0x66
    2ad6:	f040 80cf 	bne.w	2c78 <z_prf+0x6f0>
		if (decexp > 0) {
    2ada:	2e00      	cmp	r6, #0
    2adc:	f340 80b6 	ble.w	2c4c <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    2ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	dd07      	ble.n	2af6 <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    2ae6:	a913      	add	r1, sp, #76	; 0x4c
    2ae8:	a814      	add	r0, sp, #80	; 0x50
    2aea:	f003 fb45 	bl	6178 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2aee:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2af0:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    2af4:	d1f4      	bne.n	2ae0 <z_prf+0x558>
			zp->predot = decexp;
    2af6:	46b3      	mov	fp, r6
    2af8:	463b      	mov	r3, r7
			decexp = 0;
    2afa:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    2afc:	f1ba 0f00 	cmp.w	sl, #0
    2b00:	d101      	bne.n	2b06 <z_prf+0x57e>
    2b02:	2c00      	cmp	r4, #0
    2b04:	dd15      	ble.n	2b32 <z_prf+0x5aa>
			*buf++ = '.';
    2b06:	222e      	movs	r2, #46	; 0x2e
    2b08:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    2b0c:	2e00      	cmp	r6, #0
    2b0e:	f000 80ae 	beq.w	2c6e <z_prf+0x6e6>
    2b12:	2c00      	cmp	r4, #0
    2b14:	f340 80ad 	ble.w	2c72 <z_prf+0x6ea>
			zp->postdot = -decexp;
    2b18:	f1c6 0a00 	rsb	sl, r6, #0
    2b1c:	45a2      	cmp	sl, r4
    2b1e:	bfa8      	it	ge
    2b20:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    2b22:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    2b26:	2c00      	cmp	r4, #0
    2b28:	dd03      	ble.n	2b32 <z_prf+0x5aa>
    2b2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2b2c:	2a00      	cmp	r2, #0
    2b2e:	f300 8094 	bgt.w	2c5a <z_prf+0x6d2>
	if (prune_zero) {
    2b32:	f1b8 0f00 	cmp.w	r8, #0
    2b36:	f040 80b4 	bne.w	2ca2 <z_prf+0x71a>
	*buf = 0;
    2b3a:	2200      	movs	r2, #0
	return buf - start;
    2b3c:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    2b3e:	701a      	strb	r2, [r3, #0]
	return buf - start;
    2b40:	1b9b      	subs	r3, r3, r6
    2b42:	e671      	b.n	2828 <z_prf+0x2a0>
				exp--;
    2b44:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    2b46:	9b04      	ldr	r3, [sp, #16]
    2b48:	18db      	adds	r3, r3, r3
    2b4a:	9304      	str	r3, [sp, #16]
    2b4c:	9b05      	ldr	r3, [sp, #20]
    2b4e:	415b      	adcs	r3, r3
    2b50:	9305      	str	r3, [sp, #20]
    2b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2b56:	2a00      	cmp	r2, #0
    2b58:	f173 0300 	sbcs.w	r3, r3, #0
    2b5c:	daf2      	bge.n	2b44 <z_prf+0x5bc>
    2b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2b62:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    2b66:	e74f      	b.n	2a08 <z_prf+0x480>
			_rlrshift(&fract);
    2b68:	a814      	add	r0, sp, #80	; 0x50
    2b6a:	f003 faca 	bl	6102 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    2b6e:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    2b72:	2300      	movs	r3, #0
    2b74:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    2b78:	930b      	str	r3, [sp, #44]	; 0x2c
    2b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2b7e:	2900      	cmp	r1, #0
    2b80:	bf08      	it	eq
    2b82:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    2b86:	f108 0801 	add.w	r8, r8, #1
    2b8a:	d2ed      	bcs.n	2b68 <z_prf+0x5e0>
		fract *= 5U;
    2b8c:	2005      	movs	r0, #5
    2b8e:	fba2 2300 	umull	r2, r3, r2, r0
    2b92:	fb00 330c 	mla	r3, r0, ip, r3
    2b96:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    2b9a:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2b9c:	f04f 0e00 	mov.w	lr, #0
    2ba0:	2100      	movs	r1, #0
    2ba2:	f04f 0c00 	mov.w	ip, #0
    2ba6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    2baa:	458c      	cmp	ip, r1
    2bac:	bf08      	it	eq
    2bae:	459b      	cmpeq	fp, r3
    2bb0:	d206      	bcs.n	2bc0 <z_prf+0x638>
    2bb2:	f1be 0f00 	cmp.w	lr, #0
    2bb6:	f43f af2e 	beq.w	2a16 <z_prf+0x48e>
    2bba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    2bbe:	e72a      	b.n	2a16 <z_prf+0x48e>
			fract <<= 1;
    2bc0:	1892      	adds	r2, r2, r2
    2bc2:	415b      	adcs	r3, r3
			exp--;
    2bc4:	f108 38ff 	add.w	r8, r8, #4294967295
    2bc8:	f04f 0e01 	mov.w	lr, #1
    2bcc:	e7e8      	b.n	2ba0 <z_prf+0x618>
		_ldiv5(&fract);
    2bce:	a814      	add	r0, sp, #80	; 0x50
    2bd0:	f003 faa9 	bl	6126 <_ldiv5>
		exp--;
    2bd4:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    2bd8:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    2bdc:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2bde:	f04f 0e00 	mov.w	lr, #0
    2be2:	2300      	movs	r3, #0
    2be4:	f04f 0c00 	mov.w	ip, #0
    2be8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    2bec:	459c      	cmp	ip, r3
    2bee:	bf08      	it	eq
    2bf0:	4583      	cmpeq	fp, r0
    2bf2:	d206      	bcs.n	2c02 <z_prf+0x67a>
    2bf4:	f1be 0f00 	cmp.w	lr, #0
    2bf8:	f43f af11 	beq.w	2a1e <z_prf+0x496>
    2bfc:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    2c00:	e70d      	b.n	2a1e <z_prf+0x496>
			fract <<= 1;
    2c02:	1849      	adds	r1, r1, r1
    2c04:	4140      	adcs	r0, r0
			exp--;
    2c06:	f108 38ff 	add.w	r8, r8, #4294967295
    2c0a:	f04f 0e01 	mov.w	lr, #1
    2c0e:	e7e8      	b.n	2be2 <z_prf+0x65a>
    2c10:	2600      	movs	r6, #0
    2c12:	46b0      	mov	r8, r6
    2c14:	e707      	b.n	2a26 <z_prf+0x49e>
			precision -= decexp;
    2c16:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    2c18:	f1ba 0f00 	cmp.w	sl, #0
    2c1c:	d104      	bne.n	2c28 <z_prf+0x6a0>
			c = 'f';
    2c1e:	2566      	movs	r5, #102	; 0x66
    2c20:	e720      	b.n	2a64 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2c22:	f04f 0800 	mov.w	r8, #0
    2c26:	e723      	b.n	2a70 <z_prf+0x4e8>
    2c28:	f04f 0800 	mov.w	r8, #0
    2c2c:	e723      	b.n	2a76 <z_prf+0x4ee>
    2c2e:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    2c32:	f104 0b01 	add.w	fp, r4, #1
    2c36:	e724      	b.n	2a82 <z_prf+0x4fa>
			exp = 0;
    2c38:	f04f 0b00 	mov.w	fp, #0
    2c3c:	e726      	b.n	2a8c <z_prf+0x504>
		_ldiv5(&ltemp);
    2c3e:	a816      	add	r0, sp, #88	; 0x58
    2c40:	f003 fa71 	bl	6126 <_ldiv5>
		_rlrshift(&ltemp);
    2c44:	a816      	add	r0, sp, #88	; 0x58
    2c46:	f003 fa5c 	bl	6102 <_rlrshift>
    2c4a:	e726      	b.n	2a9a <z_prf+0x512>
			*buf++ = '0';
    2c4c:	463b      	mov	r3, r7
    2c4e:	2230      	movs	r2, #48	; 0x30
    2c50:	f803 2b01 	strb.w	r2, [r3], #1
			zero.predot = zero.postdot = zero.trail = 0;
    2c54:	f04f 0b00 	mov.w	fp, #0
    2c58:	e750      	b.n	2afc <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    2c5a:	a913      	add	r1, sp, #76	; 0x4c
    2c5c:	a814      	add	r0, sp, #80	; 0x50
    2c5e:	930a      	str	r3, [sp, #40]	; 0x28
    2c60:	f003 fa8a 	bl	6178 <_get_digit>
    2c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    2c66:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    2c68:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    2c6c:	e75b      	b.n	2b26 <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    2c6e:	46b2      	mov	sl, r6
    2c70:	e759      	b.n	2b26 <z_prf+0x59e>
    2c72:	f04f 0a00 	mov.w	sl, #0
    2c76:	e75c      	b.n	2b32 <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    2c78:	a913      	add	r1, sp, #76	; 0x4c
    2c7a:	a814      	add	r0, sp, #80	; 0x50
    2c7c:	f003 fa7c 	bl	6178 <_get_digit>
		if (*buf++ != '0') {
    2c80:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    2c82:	7038      	strb	r0, [r7, #0]
			decexp--;
    2c84:	bf18      	it	ne
    2c86:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    2c8a:	f1ba 0f00 	cmp.w	sl, #0
    2c8e:	d137      	bne.n	2d00 <z_prf+0x778>
    2c90:	2c00      	cmp	r4, #0
    2c92:	dc35      	bgt.n	2d00 <z_prf+0x778>
		if (*buf++ != '0') {
    2c94:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    2c96:	f1b8 0f00 	cmp.w	r8, #0
    2c9a:	d043      	beq.n	2d24 <z_prf+0x79c>
			zero.predot = zero.postdot = zero.trail = 0;
    2c9c:	f04f 0b00 	mov.w	fp, #0
    2ca0:	46da      	mov	sl, fp
		while (*--buf == '0')
    2ca2:	4619      	mov	r1, r3
    2ca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2ca8:	2a30      	cmp	r2, #48	; 0x30
    2caa:	d0fa      	beq.n	2ca2 <z_prf+0x71a>
		if (*buf != '.') {
    2cac:	2a2e      	cmp	r2, #46	; 0x2e
    2cae:	bf18      	it	ne
    2cb0:	460b      	movne	r3, r1
    2cb2:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    2cb4:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    2cb8:	2a45      	cmp	r2, #69	; 0x45
    2cba:	f47f af3e 	bne.w	2b3a <z_prf+0x5b2>
		if (decexp < 0) {
    2cbe:	2e00      	cmp	r6, #0
		*buf++ = c;
    2cc0:	4619      	mov	r1, r3
			decexp = -decexp;
    2cc2:	bfba      	itte	lt
    2cc4:	4276      	neglt	r6, r6
			*buf++ = '-';
    2cc6:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    2cc8:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    2cca:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    2ccc:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    2cd0:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    2cd2:	dd08      	ble.n	2ce6 <z_prf+0x75e>
			*buf++ = (decexp / 100) + '0';
    2cd4:	2064      	movs	r0, #100	; 0x64
    2cd6:	fb96 f2f0 	sdiv	r2, r6, r0
    2cda:	f102 0530 	add.w	r5, r2, #48	; 0x30
    2cde:	1cd9      	adds	r1, r3, #3
    2ce0:	709d      	strb	r5, [r3, #2]
			decexp %= 100;
    2ce2:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    2ce6:	200a      	movs	r0, #10
    2ce8:	460b      	mov	r3, r1
    2cea:	fb96 f2f0 	sdiv	r2, r6, r0
		decexp %= 10;
    2cee:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    2cf2:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    2cf6:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2cf8:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    2cfc:	704e      	strb	r6, [r1, #1]
    2cfe:	e71c      	b.n	2b3a <z_prf+0x5b2>
			*buf++ = '.';
    2d00:	222e      	movs	r2, #46	; 0x2e
    2d02:	1cbb      	adds	r3, r7, #2
    2d04:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    2d06:	2c00      	cmp	r4, #0
    2d08:	ddc5      	ble.n	2c96 <z_prf+0x70e>
    2d0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2d0c:	2a00      	cmp	r2, #0
    2d0e:	ddc2      	ble.n	2c96 <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    2d10:	a913      	add	r1, sp, #76	; 0x4c
    2d12:	a814      	add	r0, sp, #80	; 0x50
    2d14:	930a      	str	r3, [sp, #40]	; 0x28
    2d16:	f003 fa2f 	bl	6178 <_get_digit>
    2d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    2d1c:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    2d1e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    2d22:	e7f0      	b.n	2d06 <z_prf+0x77e>
			zero.predot = zero.postdot = zero.trail = 0;
    2d24:	46c3      	mov	fp, r8
    2d26:	46c2      	mov	sl, r8
    2d28:	e7c4      	b.n	2cb4 <z_prf+0x72c>
					prefix = 1;
    2d2a:	f04f 0801 	mov.w	r8, #1
    2d2e:	e58b      	b.n	2848 <z_prf+0x2c0>
				switch (i) {
    2d30:	4632      	mov	r2, r6
    2d32:	2f68      	cmp	r7, #104	; 0x68
    2d34:	f852 3b04 	ldr.w	r3, [r2], #4
    2d38:	9201      	str	r2, [sp, #4]
    2d3a:	d006      	beq.n	2d4a <z_prf+0x7c2>
    2d3c:	2f6c      	cmp	r7, #108	; 0x6c
    2d3e:	d009      	beq.n	2d54 <z_prf+0x7cc>
    2d40:	2f48      	cmp	r7, #72	; 0x48
    2d42:	d107      	bne.n	2d54 <z_prf+0x7cc>
					*va_arg(vargs, char *) = count;
    2d44:	9a02      	ldr	r2, [sp, #8]
    2d46:	701a      	strb	r2, [r3, #0]
					break;
    2d48:	e001      	b.n	2d4e <z_prf+0x7c6>
					*va_arg(vargs, short *) = count;
    2d4a:	9a02      	ldr	r2, [sp, #8]
    2d4c:	801a      	strh	r2, [r3, #0]
				continue;
    2d4e:	9e01      	ldr	r6, [sp, #4]
    2d50:	9a06      	ldr	r2, [sp, #24]
    2d52:	e421      	b.n	2598 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    2d54:	9a02      	ldr	r2, [sp, #8]
    2d56:	601a      	str	r2, [r3, #0]
					break;
    2d58:	e7f9      	b.n	2d4e <z_prf+0x7c6>
		*buf++ = '0';
    2d5a:	f647 0330 	movw	r3, #30768	; 0x7830
    2d5e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    2d62:	4633      	mov	r3, r6
    2d64:	2210      	movs	r2, #16
    2d66:	f853 1b04 	ldr.w	r1, [r3], #4
    2d6a:	9301      	str	r3, [sp, #4]
    2d6c:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    2d70:	f003 f9a3 	bl	60ba <_to_x>
				prefix = 2;
    2d74:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    2d78:	1c86      	adds	r6, r0, #2
				break;
    2d7a:	e604      	b.n	2986 <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    2d7c:	4633      	mov	r3, r6
					precision = INT_MAX;
    2d7e:	2c00      	cmp	r4, #0
				cptr = va_arg(vargs, char *);
    2d80:	f853 7b04 	ldr.w	r7, [r3], #4
    2d84:	9301      	str	r3, [sp, #4]
					precision = INT_MAX;
    2d86:	bfb8      	it	lt
    2d88:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    2d8c:	2600      	movs	r6, #0
    2d8e:	42b4      	cmp	r4, r6
    2d90:	d103      	bne.n	2d9a <z_prf+0x812>
    2d92:	4626      	mov	r6, r4
    2d94:	2400      	movs	r4, #0
    2d96:	46a0      	mov	r8, r4
    2d98:	e579      	b.n	288e <z_prf+0x306>
					if (cptr[clen] == '\0') {
    2d9a:	5dbb      	ldrb	r3, [r7, r6]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d05b      	beq.n	2e58 <z_prf+0x8d0>
				for (clen = 0; clen < precision; clen++) {
    2da0:	3601      	adds	r6, #1
    2da2:	e7f4      	b.n	2d8e <z_prf+0x806>
				switch (i) {
    2da4:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    2da6:	2d6f      	cmp	r5, #111	; 0x6f
    2da8:	6831      	ldr	r1, [r6, #0]
    2daa:	9301      	str	r3, [sp, #4]
    2dac:	d119      	bne.n	2de2 <z_prf+0x85a>
	if (alt_form) {
    2dae:	f1ba 0f00 	cmp.w	sl, #0
    2db2:	d008      	beq.n	2dc6 <z_prf+0x83e>
		*buf++ = '0';
    2db4:	2330      	movs	r3, #48	; 0x30
    2db6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    2dba:	b979      	cbnz	r1, 2ddc <z_prf+0x854>
			*buf++ = 0;
    2dbc:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    2dc0:	4688      	mov	r8, r1
			return 1;
    2dc2:	2601      	movs	r6, #1
    2dc4:	e5df      	b.n	2986 <z_prf+0x3fe>
    2dc6:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    2dc8:	4628      	mov	r0, r5
    2dca:	2208      	movs	r2, #8
    2dcc:	f003 f975 	bl	60ba <_to_x>
    2dd0:	ae19      	add	r6, sp, #100	; 0x64
    2dd2:	1bad      	subs	r5, r5, r6
    2dd4:	182e      	adds	r6, r5, r0
			prefix = 0;
    2dd6:	f04f 0800 	mov.w	r8, #0
    2dda:	e5d4      	b.n	2986 <z_prf+0x3fe>
		*buf++ = '0';
    2ddc:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    2de0:	e7f2      	b.n	2dc8 <z_prf+0x840>
				} else if (c == 'u') {
    2de2:	2d75      	cmp	r5, #117	; 0x75
    2de4:	d105      	bne.n	2df2 <z_prf+0x86a>
	return _to_x(buf, value, 10);
    2de6:	220a      	movs	r2, #10
    2de8:	a819      	add	r0, sp, #100	; 0x64
    2dea:	f003 f966 	bl	60ba <_to_x>
    2dee:	4606      	mov	r6, r0
    2df0:	e7f1      	b.n	2dd6 <z_prf+0x84e>
	if (alt_form) {
    2df2:	f1ba 0f00 	cmp.w	sl, #0
    2df6:	d011      	beq.n	2e1c <z_prf+0x894>
		*buf++ = '0';
    2df8:	f647 0330 	movw	r3, #30768	; 0x7830
    2dfc:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    2e00:	f10d 0766 	add.w	r7, sp, #102	; 0x66
	len = _to_x(buf, value, 16);
    2e04:	2210      	movs	r2, #16
    2e06:	4638      	mov	r0, r7
    2e08:	f003 f957 	bl	60ba <_to_x>
	if (prefix == 'X') {
    2e0c:	2d58      	cmp	r5, #88	; 0x58
    2e0e:	d007      	beq.n	2e20 <z_prf+0x898>
	return len + (buf - buf0);
    2e10:	ae19      	add	r6, sp, #100	; 0x64
    2e12:	1bbf      	subs	r7, r7, r6
    2e14:	183e      	adds	r6, r7, r0
						prefix = 2;
    2e16:	ea4f 084a 	mov.w	r8, sl, lsl #1
    2e1a:	e5b4      	b.n	2986 <z_prf+0x3fe>
    2e1c:	af19      	add	r7, sp, #100	; 0x64
    2e1e:	e7f1      	b.n	2e04 <z_prf+0x87c>
    2e20:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    2e22:	f812 3b01 	ldrb.w	r3, [r2], #1
    2e26:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    2e2a:	2919      	cmp	r1, #25
    2e2c:	d803      	bhi.n	2e36 <z_prf+0x8ae>
			*buf += 'A' - 'a';
    2e2e:	3b20      	subs	r3, #32
    2e30:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    2e34:	e7f5      	b.n	2e22 <z_prf+0x89a>
    2e36:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d1f1      	bne.n	2e22 <z_prf+0x89a>
    2e3e:	e7e7      	b.n	2e10 <z_prf+0x888>
				PUTC('%');
    2e40:	4649      	mov	r1, r9
    2e42:	4628      	mov	r0, r5
    2e44:	f7ff bbb1 	b.w	25aa <z_prf+0x22>
				count++;
    2e48:	9b02      	ldr	r3, [sp, #8]
    2e4a:	3301      	adds	r3, #1
				continue;
    2e4c:	e9cd 6301 	strd	r6, r3, [sp, #4]
    2e50:	e77d      	b.n	2d4e <z_prf+0x7c6>
					prefix = 1;
    2e52:	f04f 0801 	mov.w	r8, #1
    2e56:	e596      	b.n	2986 <z_prf+0x3fe>
    2e58:	461c      	mov	r4, r3
    2e5a:	e79c      	b.n	2d96 <z_prf+0x80e>
			cptr = buf;
    2e5c:	af19      	add	r7, sp, #100	; 0x64
				zero_head = 0;
    2e5e:	2300      	movs	r3, #0
    2e60:	e51d      	b.n	289e <z_prf+0x316>
    2e62:	9b08      	ldr	r3, [sp, #32]
    2e64:	af19      	add	r7, sp, #100	; 0x64
    2e66:	e51a      	b.n	289e <z_prf+0x316>
    2e68:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    2e6a:	4649      	mov	r1, r9
    2e6c:	9b03      	ldr	r3, [sp, #12]
    2e6e:	9207      	str	r2, [sp, #28]
    2e70:	2020      	movs	r0, #32
    2e72:	4798      	blx	r3
    2e74:	3001      	adds	r0, #1
    2e76:	9a07      	ldr	r2, [sp, #28]
    2e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e7a:	f43f ab9b 	beq.w	25b4 <z_prf+0x2c>
				while (width-- > 0) {
    2e7e:	3a01      	subs	r2, #1
    2e80:	d2f2      	bcs.n	2e68 <z_prf+0x8e0>
				count += width;
    2e82:	9902      	ldr	r1, [sp, #8]
    2e84:	4429      	add	r1, r5
    2e86:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    2e88:	4615      	mov	r5, r2
    2e8a:	e512      	b.n	28b2 <z_prf+0x32a>
    2e8c:	462a      	mov	r2, r5
    2e8e:	e7f6      	b.n	2e7e <z_prf+0x8f6>
    2e90:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    2e92:	f817 0b01 	ldrb.w	r0, [r7], #1
    2e96:	9b03      	ldr	r3, [sp, #12]
    2e98:	9207      	str	r2, [sp, #28]
    2e9a:	4649      	mov	r1, r9
    2e9c:	4798      	blx	r3
    2e9e:	3001      	adds	r0, #1
    2ea0:	9a07      	ldr	r2, [sp, #28]
    2ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ea4:	f47f ad07 	bne.w	28b6 <z_prf+0x32e>
    2ea8:	f7ff bb84 	b.w	25b4 <z_prf+0x2c>
    2eac:	9307      	str	r3, [sp, #28]
				PUTC('0');
    2eae:	4649      	mov	r1, r9
    2eb0:	9b03      	ldr	r3, [sp, #12]
    2eb2:	2030      	movs	r0, #48	; 0x30
    2eb4:	4798      	blx	r3
    2eb6:	3001      	adds	r0, #1
    2eb8:	9b07      	ldr	r3, [sp, #28]
    2eba:	f47f acff 	bne.w	28bc <z_prf+0x334>
    2ebe:	f7ff bb79 	b.w	25b4 <z_prf+0x2c>
					PUTC(c);
    2ec2:	9b03      	ldr	r3, [sp, #12]
    2ec4:	4649      	mov	r1, r9
    2ec6:	4798      	blx	r3
    2ec8:	3001      	adds	r0, #1
    2eca:	f43f ab73 	beq.w	25b4 <z_prf+0x2c>
					c = *++cptr;
    2ece:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    2ed2:	e4fe      	b.n	28d2 <z_prf+0x34a>
					PUTC('0');
    2ed4:	9b03      	ldr	r3, [sp, #12]
    2ed6:	4649      	mov	r1, r9
    2ed8:	2030      	movs	r0, #48	; 0x30
    2eda:	4798      	blx	r3
    2edc:	3001      	adds	r0, #1
    2ede:	f47f ad00 	bne.w	28e2 <z_prf+0x35a>
    2ee2:	f7ff bb67 	b.w	25b4 <z_prf+0x2c>
					PUTC('0');
    2ee6:	9b03      	ldr	r3, [sp, #12]
    2ee8:	4649      	mov	r1, r9
    2eea:	2030      	movs	r0, #48	; 0x30
    2eec:	4798      	blx	r3
    2eee:	3001      	adds	r0, #1
    2ef0:	f108 38ff 	add.w	r8, r8, #4294967295
    2ef4:	f47f ad0f 	bne.w	2916 <z_prf+0x38e>
    2ef8:	f7ff bb5c 	b.w	25b4 <z_prf+0x2c>
					PUTC(c);
    2efc:	9b03      	ldr	r3, [sp, #12]
    2efe:	4649      	mov	r1, r9
    2f00:	4798      	blx	r3
    2f02:	3001      	adds	r0, #1
    2f04:	f43f ab56 	beq.w	25b4 <z_prf+0x2c>
					c = *++cptr;
    2f08:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    2f0c:	e50d      	b.n	292a <z_prf+0x3a2>
					PUTC('0');
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	4649      	mov	r1, r9
    2f12:	2030      	movs	r0, #48	; 0x30
    2f14:	4798      	blx	r3
    2f16:	3001      	adds	r0, #1
    2f18:	f108 38ff 	add.w	r8, r8, #4294967295
    2f1c:	f47f ad10 	bne.w	2940 <z_prf+0x3b8>
    2f20:	f7ff bb48 	b.w	25b4 <z_prf+0x2c>
				PUTC(*cptr++);
    2f24:	f817 0b01 	ldrb.w	r0, [r7], #1
    2f28:	9b03      	ldr	r3, [sp, #12]
    2f2a:	4649      	mov	r1, r9
    2f2c:	4798      	blx	r3
    2f2e:	3001      	adds	r0, #1
    2f30:	f43f ab40 	beq.w	25b4 <z_prf+0x2c>
			while (clen-- > 0) {
    2f34:	1bf3      	subs	r3, r6, r7
    2f36:	2b00      	cmp	r3, #0
    2f38:	dcf4      	bgt.n	2f24 <z_prf+0x99c>
			count += clen;
    2f3a:	9b02      	ldr	r3, [sp, #8]
    2f3c:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    2f3e:	2d00      	cmp	r5, #0
			count += clen;
    2f40:	4413      	add	r3, r2
    2f42:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    2f44:	f77f af03 	ble.w	2d4e <z_prf+0x7c6>
    2f48:	462c      	mov	r4, r5
    2f4a:	e006      	b.n	2f5a <z_prf+0x9d2>
					PUTC(' ');
    2f4c:	9b03      	ldr	r3, [sp, #12]
    2f4e:	4649      	mov	r1, r9
    2f50:	2020      	movs	r0, #32
    2f52:	4798      	blx	r3
    2f54:	3001      	adds	r0, #1
    2f56:	f43f ab2d 	beq.w	25b4 <z_prf+0x2c>
				while (width-- > 0) {
    2f5a:	3c01      	subs	r4, #1
    2f5c:	d2f6      	bcs.n	2f4c <z_prf+0x9c4>
				count += width;
    2f5e:	9b02      	ldr	r3, [sp, #8]
    2f60:	442b      	add	r3, r5
    2f62:	9302      	str	r3, [sp, #8]
    2f64:	e6f3      	b.n	2d4e <z_prf+0x7c6>
    2f66:	bf00      	nop

00002f68 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2f68:	4b01      	ldr	r3, [pc, #4]	; (2f70 <__stdout_hook_install+0x8>)
    2f6a:	6018      	str	r0, [r3, #0]
}
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop
    2f70:	200000a4 	.word	0x200000a4

00002f74 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    2f74:	2902      	cmp	r1, #2
    2f76:	d102      	bne.n	2f7e <z_impl_zephyr_fputc+0xa>
    2f78:	4b02      	ldr	r3, [pc, #8]	; (2f84 <z_impl_zephyr_fputc+0x10>)
    2f7a:	681b      	ldr	r3, [r3, #0]
    2f7c:	4718      	bx	r3
}
    2f7e:	f04f 30ff 	mov.w	r0, #4294967295
    2f82:	4770      	bx	lr
    2f84:	200000a4 	.word	0x200000a4

00002f88 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    2f88:	b40f      	push	{r0, r1, r2, r3}
    2f8a:	b507      	push	{r0, r1, r2, lr}
    2f8c:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = z_prf(fputc, DESC(stdout), format, vargs);
    2f8e:	2102      	movs	r1, #2
{
    2f90:	f853 2b04 	ldr.w	r2, [r3], #4
	r = z_prf(fputc, DESC(stdout), format, vargs);
    2f94:	4804      	ldr	r0, [pc, #16]	; (2fa8 <printf+0x20>)
	va_start(vargs, format);
    2f96:	9301      	str	r3, [sp, #4]
	r = z_prf(fputc, DESC(stdout), format, vargs);
    2f98:	f7ff faf6 	bl	2588 <z_prf>
	va_end(vargs);

	return r;
}
    2f9c:	b003      	add	sp, #12
    2f9e:	f85d eb04 	ldr.w	lr, [sp], #4
    2fa2:	b004      	add	sp, #16
    2fa4:	4770      	bx	lr
    2fa6:	bf00      	nop
    2fa8:	000061ad 	.word	0x000061ad

00002fac <nordicsemi_nrf52_init>:
    2fac:	f04f 0320 	mov.w	r3, #32
    2fb0:	f3ef 8211 	mrs	r2, BASEPRI
    2fb4:	f383 8811 	msr	BASEPRI, r3
    2fb8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2fbc:	4906      	ldr	r1, [pc, #24]	; (2fd8 <nordicsemi_nrf52_init+0x2c>)
    2fbe:	2301      	movs	r3, #1
    2fc0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2fc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2fc8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2fcc:	f382 8811 	msr	BASEPRI, r2
    2fd0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2fd4:	2000      	movs	r0, #0
    2fd6:	4770      	bx	lr
    2fd8:	4001e000 	.word	0x4001e000

00002fdc <sys_arch_reboot>:
    *p_gpregret = val;
    2fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fe0:	b2c0      	uxtb	r0, r0
    2fe2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2fe6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2fea:	4905      	ldr	r1, [pc, #20]	; (3000 <sys_arch_reboot+0x24>)
    2fec:	4b05      	ldr	r3, [pc, #20]	; (3004 <sys_arch_reboot+0x28>)
    2fee:	68ca      	ldr	r2, [r1, #12]
    2ff0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2ff4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2ff6:	60cb      	str	r3, [r1, #12]
    2ff8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2ffc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2ffe:	e7fd      	b.n	2ffc <sys_arch_reboot+0x20>
    3000:	e000ed00 	.word	0xe000ed00
    3004:	05fa0004 	.word	0x05fa0004

00003008 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3008:	b120      	cbz	r0, 3014 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    300a:	4b03      	ldr	r3, [pc, #12]	; (3018 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    300c:	0180      	lsls	r0, r0, #6
    300e:	f043 0301 	orr.w	r3, r3, #1
    3012:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3014:	4770      	bx	lr
    3016:	bf00      	nop
    3018:	00006c90 	.word	0x00006c90

0000301c <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    301c:	4a05      	ldr	r2, [pc, #20]	; (3034 <adc_context_start_sampling.isra.0+0x18>)
    301e:	2301      	movs	r3, #1
    3020:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3024:	b108      	cbz	r0, 302a <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3026:	60d3      	str	r3, [r2, #12]
}
    3028:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    302a:	6013      	str	r3, [r2, #0]
    302c:	4a02      	ldr	r2, [pc, #8]	; (3038 <adc_context_start_sampling.isra.0+0x1c>)
    302e:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3030:	4770      	bx	lr
    3032:	bf00      	nop
    3034:	40007000 	.word	0x40007000
    3038:	40007004 	.word	0x40007004

0000303c <adc_nrfx_channel_setup>:
	u8_t channel_id = channel_cfg->channel_id;
    303c:	7908      	ldrb	r0, [r1, #4]
{
    303e:	b570      	push	{r4, r5, r6, lr}
	u8_t channel_id = channel_cfg->channel_id;
    3040:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    3044:	2c07      	cmp	r4, #7
    3046:	d81f      	bhi.n	3088 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    3048:	780b      	ldrb	r3, [r1, #0]
    304a:	2b09      	cmp	r3, #9
    304c:	d81c      	bhi.n	3088 <adc_nrfx_channel_setup+0x4c>
    304e:	e8df f003 	tbb	[pc, r3]
    3052:	0606      	.short	0x0606
    3054:	1b060606 	.word	0x1b060606
    3058:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    305c:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    305e:	784a      	ldrb	r2, [r1, #1]
    3060:	2a03      	cmp	r2, #3
    3062:	d018      	beq.n	3096 <adc_nrfx_channel_setup+0x5a>
    3064:	2a04      	cmp	r2, #4
    3066:	d10f      	bne.n	3088 <adc_nrfx_channel_setup+0x4c>
    3068:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    306a:	884a      	ldrh	r2, [r1, #2]
    306c:	f244 060a 	movw	r6, #16394	; 0x400a
    3070:	42b2      	cmp	r2, r6
    3072:	d044      	beq.n	30fe <adc_nrfx_channel_setup+0xc2>
    3074:	d811      	bhi.n	309a <adc_nrfx_channel_setup+0x5e>
    3076:	f244 0603 	movw	r6, #16387	; 0x4003
    307a:	42b2      	cmp	r2, r6
    307c:	d03b      	beq.n	30f6 <adc_nrfx_channel_setup+0xba>
    307e:	f244 0605 	movw	r6, #16389	; 0x4005
    3082:	42b2      	cmp	r2, r6
    3084:	d039      	beq.n	30fa <adc_nrfx_channel_setup+0xbe>
    3086:	b3d2      	cbz	r2, 30fe <adc_nrfx_channel_setup+0xc2>
    3088:	f06f 0015 	mvn.w	r0, #21
    308c:	e032      	b.n	30f4 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    308e:	2306      	movs	r3, #6
		break;
    3090:	e7e5      	b.n	305e <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3092:	2307      	movs	r3, #7
		break;
    3094:	e7e3      	b.n	305e <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    3096:	2501      	movs	r5, #1
    3098:	e7e7      	b.n	306a <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    309a:	f244 0614 	movw	r6, #16404	; 0x4014
    309e:	42b2      	cmp	r2, r6
    30a0:	d02f      	beq.n	3102 <adc_nrfx_channel_setup+0xc6>
    30a2:	f244 0628 	movw	r6, #16424	; 0x4028
    30a6:	42b2      	cmp	r2, r6
    30a8:	d02d      	beq.n	3106 <adc_nrfx_channel_setup+0xca>
    30aa:	f244 060f 	movw	r6, #16399	; 0x400f
    30ae:	42b2      	cmp	r2, r6
    30b0:	d1ea      	bne.n	3088 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    30b2:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    30b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    30b8:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    30ba:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    30be:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    30c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    30c6:	0122      	lsls	r2, r4, #4
    30c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    30cc:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    30d0:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    30d2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    30d6:	0123      	lsls	r3, r4, #4
    30d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    30dc:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    30e0:	798a      	ldrb	r2, [r1, #6]
    30e2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    30e6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    30ea:	4b08      	ldr	r3, [pc, #32]	; (310c <adc_nrfx_channel_setup+0xd0>)
    30ec:	441c      	add	r4, r3
    30ee:	794b      	ldrb	r3, [r1, #5]
    30f0:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
}
    30f4:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    30f6:	2200      	movs	r2, #0
    30f8:	e7dc      	b.n	30b4 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    30fa:	2201      	movs	r2, #1
    30fc:	e7da      	b.n	30b4 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    30fe:	2202      	movs	r2, #2
    3100:	e7d8      	b.n	30b4 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3102:	2204      	movs	r2, #4
    3104:	e7d6      	b.n	30b4 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3106:	2205      	movs	r2, #5
    3108:	e7d4      	b.n	30b4 <adc_nrfx_channel_setup+0x78>
    310a:	bf00      	nop
    310c:	20000000 	.word	0x20000000

00003110 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(struct device *dev, const struct adc_sequence *sequence)
    3110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3112:	4605      	mov	r5, r0
{
	int error;
	u32_t selected_channels = sequence->channels;
    3114:	6840      	ldr	r0, [r0, #4]
	u8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    3116:	b910      	cbnz	r0, 311e <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    3118:	f06f 0015 	mvn.w	r0, #21
    311c:	e0a7      	b.n	326e <start_read.isra.0+0x15e>
	if (!selected_channels ||
    311e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
    3122:	d1f9      	bne.n	3118 <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    3124:	4c5c      	ldr	r4, [pc, #368]	; (3298 <start_read.isra.0+0x188>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3126:	4f5d      	ldr	r7, [pc, #372]	; (329c <start_read.isra.0+0x18c>)
	active_channels = 0U;
    3128:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
    312a:	fa20 f103 	lsr.w	r1, r0, r3
    312e:	f011 0101 	ands.w	r1, r1, #1
    3132:	d033      	beq.n	319c <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3134:	18f9      	adds	r1, r7, r3
    3136:	f891 c098 	ldrb.w	ip, [r1, #152]	; 0x98
    313a:	f1bc 0f00 	cmp.w	ip, #0
    313e:	d0eb      	beq.n	3118 <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3140:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    3144:	7c6e      	ldrb	r6, [r5, #17]
    3146:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    314a:	3e00      	subs	r6, #0
    314c:	bf18      	it	ne
    314e:	2601      	movne	r6, #1
    3150:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    3154:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
    3158:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    315c:	f103 0151 	add.w	r1, r3, #81	; 0x51
    3160:	0109      	lsls	r1, r1, #4
			++active_channels;
    3162:	3201      	adds	r2, #1
    3164:	f844 c001 	str.w	ip, [r4, r1]
    3168:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
    316a:	3301      	adds	r3, #1
    316c:	2b08      	cmp	r3, #8
    316e:	d1dc      	bne.n	312a <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    3170:	7c2b      	ldrb	r3, [r5, #16]
    3172:	3b08      	subs	r3, #8
    3174:	2b06      	cmp	r3, #6
    3176:	d8cf      	bhi.n	3118 <start_read.isra.0+0x8>
    3178:	a101      	add	r1, pc, #4	; (adr r1, 3180 <start_read.isra.0+0x70>)
    317a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    317e:	bf00      	nop
    3180:	0000327b 	.word	0x0000327b
    3184:	00003119 	.word	0x00003119
    3188:	000031a7 	.word	0x000031a7
    318c:	00003119 	.word	0x00003119
    3190:	00003273 	.word	0x00003273
    3194:	00003119 	.word	0x00003119
    3198:	00003277 	.word	0x00003277
    319c:	f103 0651 	add.w	r6, r3, #81	; 0x51
    31a0:	0136      	lsls	r6, r6, #4
    31a2:	51a1      	str	r1, [r4, r6]
}
    31a4:	e7e1      	b.n	316a <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    31a6:	2101      	movs	r1, #1
    p_reg->RESOLUTION = resolution;
    31a8:	4b3b      	ldr	r3, [pc, #236]	; (3298 <start_read.isra.0+0x188>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    31aa:	2a01      	cmp	r2, #1
    31ac:	f8c3 15f0 	str.w	r1, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    31b0:	7c69      	ldrb	r1, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    31b2:	d964      	bls.n	327e <start_read.isra.0+0x16e>
    31b4:	2900      	cmp	r1, #0
    31b6:	d1af      	bne.n	3118 <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    31b8:	f8c3 15f4 	str.w	r1, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    31bc:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    31be:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    31c0:	b111      	cbz	r1, 31c8 <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    31c2:	8909      	ldrh	r1, [r1, #8]
    31c4:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    31c8:	68e9      	ldr	r1, [r5, #12]
    31ca:	4299      	cmp	r1, r3
    31cc:	d361      	bcc.n	3292 <start_read.isra.0+0x182>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    31ce:	4b32      	ldr	r3, [pc, #200]	; (3298 <start_read.isra.0+0x188>)
    31d0:	68a9      	ldr	r1, [r5, #8]
    31d2:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    31d6:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    31d8:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    31dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    31de:	4c2f      	ldr	r4, [pc, #188]	; (329c <start_read.isra.0+0x18c>)
    31e0:	f104 0674 	add.w	r6, r4, #116	; 0x74
    31e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    31e6:	683b      	ldr	r3, [r7, #0]
    31e8:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    31ea:	682a      	ldr	r2, [r5, #0]
	ctx->status = 0;
    31ec:	2600      	movs	r6, #0
    31ee:	66a6      	str	r6, [r4, #104]	; 0x68
	if (sequence->options) {
    31f0:	2a00      	cmp	r2, #0
    31f2:	d047      	beq.n	3284 <start_read.isra.0+0x174>
		ctx->options = *sequence->options;
    31f4:	ca07      	ldmia	r2, {r0, r1, r2}
    31f6:	f104 0388 	add.w	r3, r4, #136	; 0x88
    31fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ctx->sequence.options = &ctx->options;
    31fe:	6763      	str	r3, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
    3200:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94

		if (ctx->options.interval_us != 0U) {
    3204:	2800      	cmp	r0, #0
    3206:	d03d      	beq.n	3284 <start_read.isra.0+0x174>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3208:	f3bf 8f5b 	dmb	ish
    320c:	e854 3f00 	ldrex	r3, [r4]
    3210:	e844 6200 	strex	r2, r6, [r4]
    3214:	2a00      	cmp	r2, #0
    3216:	d1f9      	bne.n	320c <start_read.isra.0+0xfc>
    3218:	f3bf 8f5b 	dmb	ish
	u32_t interval_ms = ceiling_fraction(interval_us, 1000UL);
    321c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    3220:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3224:	f240 36e7 	movw	r6, #999	; 0x3e7
    3228:	2700      	movs	r7, #0
    322a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
    322e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3232:	fbb3 f1f1 	udiv	r1, r3, r1
    3236:	fbe0 6701 	umlal	r6, r7, r0, r1
    323a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    323e:	2300      	movs	r3, #0
    3240:	4630      	mov	r0, r6
    3242:	4639      	mov	r1, r7
    3244:	f7fd fb90 	bl	968 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    3248:	2200      	movs	r2, #0
    324a:	e9cd 0100 	strd	r0, r1, [sp]
    324e:	2300      	movs	r3, #0
    3250:	f104 0008 	add.w	r0, r4, #8
    3254:	f002 f8c0 	bl	53d8 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    3258:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    325c:	b9bb      	cbnz	r3, 328e <start_read.isra.0+0x17e>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    325e:	4810      	ldr	r0, [pc, #64]	; (32a0 <start_read.isra.0+0x190>)
    3260:	f04f 32ff 	mov.w	r2, #4294967295
    3264:	f04f 33ff 	mov.w	r3, #4294967295
    3268:	f001 febc 	bl	4fe4 <z_impl_k_sem_take>
	return ctx->status;
    326c:	6ea0      	ldr	r0, [r4, #104]	; 0x68

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    326e:	b003      	add	sp, #12
    3270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3272:	2102      	movs	r1, #2
		break;
    3274:	e798      	b.n	31a8 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3276:	2103      	movs	r1, #3
		break;
    3278:	e796      	b.n	31a8 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    327a:	2100      	movs	r1, #0
    327c:	e794      	b.n	31a8 <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    327e:	2908      	cmp	r1, #8
    3280:	d99a      	bls.n	31b8 <start_read.isra.0+0xa8>
    3282:	e749      	b.n	3118 <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3284:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    3288:	f7ff fec8 	bl	301c <adc_context_start_sampling.isra.0>
    328c:	e7e4      	b.n	3258 <start_read.isra.0+0x148>
		return 0;
    328e:	2000      	movs	r0, #0
	return error;
    3290:	e7ed      	b.n	326e <start_read.isra.0+0x15e>
		return -ENOMEM;
    3292:	f06f 000b 	mvn.w	r0, #11
    3296:	e7ea      	b.n	326e <start_read.isra.0+0x15e>
    3298:	40007000 	.word	0x40007000
    329c:	20000000 	.word	0x20000000
    32a0:	20000050 	.word	0x20000050

000032a4 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    32a4:	b570      	push	{r4, r5, r6, lr}
    32a6:	460c      	mov	r4, r1
    32a8:	4616      	mov	r6, r2
    32aa:	4d0d      	ldr	r5, [pc, #52]	; (32e0 <adc_nrfx_read_async+0x3c>)
    32ac:	f04f 32ff 	mov.w	r2, #4294967295
    32b0:	f04f 33ff 	mov.w	r3, #4294967295
    32b4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    32b8:	f001 fe94 	bl	4fe4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    32bc:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    32be:	4620      	mov	r0, r4
    32c0:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
	ctx->signal = signal;
    32c4:	66ee      	str	r6, [r5, #108]	; 0x6c
    32c6:	f7ff ff23 	bl	3110 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    32ca:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    32ce:	4604      	mov	r4, r0
    32d0:	b103      	cbz	r3, 32d4 <adc_nrfx_read_async+0x30>
    32d2:	b110      	cbz	r0, 32da <adc_nrfx_read_async+0x36>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    32d4:	4803      	ldr	r0, [pc, #12]	; (32e4 <adc_nrfx_read_async+0x40>)
    32d6:	f001 fe5f 	bl	4f98 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    32da:	4620      	mov	r0, r4
    32dc:	bd70      	pop	{r4, r5, r6, pc}
    32de:	bf00      	nop
    32e0:	20000000 	.word	0x20000000
    32e4:	20000038 	.word	0x20000038

000032e8 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32e8:	4b38      	ldr	r3, [pc, #224]	; (33cc <saadc_irq_handler+0xe4>)
    32ea:	681a      	ldr	r2, [r3, #0]
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(void *param)
{
    32ec:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = (struct device *)param;

	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    32ee:	2a00      	cmp	r2, #0
    32f0:	d05b      	beq.n	33aa <saadc_irq_handler+0xc2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32f2:	2200      	movs	r2, #0
    32f4:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	9300      	str	r3, [sp, #0]
    (void)dummy;
    32fa:	9b00      	ldr	r3, [sp, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						struct device *dev)
{
	if (ctx->sequence.options) {
    32fc:	4c34      	ldr	r4, [pc, #208]	; (33d0 <saadc_irq_handler+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32fe:	4b35      	ldr	r3, [pc, #212]	; (33d4 <saadc_irq_handler+0xec>)
    3300:	2101      	movs	r1, #1
    3302:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3304:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    3308:	6f63      	ldr	r3, [r4, #116]	; 0x74
    330a:	2b00      	cmp	r3, #0
    330c:	d03d      	beq.n	338a <saadc_irq_handler+0xa2>
		adc_sequence_callback callback = ctx->options.callback;
    330e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    3312:	b143      	cbz	r3, 3326 <saadc_irq_handler+0x3e>
			action = callback(dev,
    3314:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    3318:	f104 0174 	add.w	r1, r4, #116	; 0x74
    331c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    331e:	2801      	cmp	r0, #1
    3320:	d014      	beq.n	334c <saadc_irq_handler+0x64>
    3322:	2802      	cmp	r0, #2
    3324:	d02b      	beq.n	337e <saadc_irq_handler+0x96>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3326:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    332a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
    332e:	429a      	cmp	r2, r3
    3330:	d925      	bls.n	337e <saadc_irq_handler+0x96>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3332:	3301      	adds	r3, #1
    3334:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3338:	4b27      	ldr	r3, [pc, #156]	; (33d8 <saadc_irq_handler+0xf0>)
    333a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    333e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3342:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3344:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3348:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    334c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    3350:	b933      	cbnz	r3, 3360 <saadc_irq_handler+0x78>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3352:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3356:	b002      	add	sp, #8
    3358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    335c:	f7ff be5e 	b.w	301c <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3360:	f3bf 8f5b 	dmb	ish
    3364:	e854 3f00 	ldrex	r3, [r4]
    3368:	1e5a      	subs	r2, r3, #1
    336a:	e844 2100 	strex	r1, r2, [r4]
    336e:	2900      	cmp	r1, #0
    3370:	d1f8      	bne.n	3364 <saadc_irq_handler+0x7c>
    3372:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3376:	2b01      	cmp	r3, #1
    3378:	dceb      	bgt.n	3352 <saadc_irq_handler+0x6a>
    337a:	b002      	add	sp, #8
    337c:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    337e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    3382:	b113      	cbz	r3, 338a <saadc_irq_handler+0xa2>
	z_impl_k_timer_stop(timer);
    3384:	4815      	ldr	r0, [pc, #84]	; (33dc <saadc_irq_handler+0xf4>)
    3386:	f003 fb50 	bl	6a2a <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    338a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    338e:	b153      	cbz	r3, 33a6 <saadc_irq_handler+0xbe>
		if (ctx->signal) {
    3390:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    3392:	b110      	cbz	r0, 339a <saadc_irq_handler+0xb2>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    3394:	2100      	movs	r1, #0
    3396:	f002 f86d 	bl	5474 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    339a:	4811      	ldr	r0, [pc, #68]	; (33e0 <saadc_irq_handler+0xf8>)
    339c:	b002      	add	sp, #8
    339e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33a2:	f001 bdf9 	b.w	4f98 <z_impl_k_sem_give>
    33a6:	480f      	ldr	r0, [pc, #60]	; (33e4 <saadc_irq_handler+0xfc>)
    33a8:	e7f8      	b.n	339c <saadc_irq_handler+0xb4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33aa:	4b0f      	ldr	r3, [pc, #60]	; (33e8 <saadc_irq_handler+0x100>)
    33ac:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    33ae:	2900      	cmp	r1, #0
    33b0:	d0e3      	beq.n	337a <saadc_irq_handler+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33b2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    33b4:	681b      	ldr	r3, [r3, #0]
    33b6:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33b8:	4a06      	ldr	r2, [pc, #24]	; (33d4 <saadc_irq_handler+0xec>)
    (void)dummy;
    33ba:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33bc:	2301      	movs	r3, #1
    33be:	6013      	str	r3, [r2, #0]
    33c0:	f842 3c08 	str.w	r3, [r2, #-8]
    33c4:	f842 3c04 	str.w	r3, [r2, #-4]
}
    33c8:	e7d7      	b.n	337a <saadc_irq_handler+0x92>
    33ca:	bf00      	nop
    33cc:	40007104 	.word	0x40007104
    33d0:	20000000 	.word	0x20000000
    33d4:	40007008 	.word	0x40007008
    33d8:	40007000 	.word	0x40007000
    33dc:	20000008 	.word	0x20000008
    33e0:	20000038 	.word	0x20000038
    33e4:	20000050 	.word	0x20000050
    33e8:	40007110 	.word	0x40007110

000033ec <init_saadc>:

DEVICE_DECLARE(adc_0);

static int init_saadc(struct device *dev)
{
    33ec:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33ee:	4b10      	ldr	r3, [pc, #64]	; (3430 <init_saadc+0x44>)
    33f0:	2400      	movs	r4, #0
    33f2:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	9301      	str	r3, [sp, #4]
    (void)dummy;
    33f8:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33fa:	4b0e      	ldr	r3, [pc, #56]	; (3434 <init_saadc+0x48>)
    33fc:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3402:	9b00      	ldr	r3, [sp, #0]
    p_reg->INTENSET = mask;
    3404:	4b0c      	ldr	r3, [pc, #48]	; (3438 <init_saadc+0x4c>)
    3406:	2212      	movs	r2, #18
    3408:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    340c:	2007      	movs	r0, #7
    340e:	f7fe fdf9 	bl	2004 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3412:	4622      	mov	r2, r4
    3414:	2101      	movs	r1, #1
    3416:	2007      	movs	r0, #7
    3418:	f7fe fe04 	bl	2024 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    341c:	4807      	ldr	r0, [pc, #28]	; (343c <init_saadc+0x50>)
	if (!k_sem_count_get(&ctx->lock)) {
    341e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3420:	b913      	cbnz	r3, 3428 <init_saadc+0x3c>
	z_impl_k_sem_give(sem);
    3422:	3038      	adds	r0, #56	; 0x38
    3424:	f001 fdb8 	bl	4f98 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3428:	2000      	movs	r0, #0
    342a:	b002      	add	sp, #8
    342c:	bd10      	pop	{r4, pc}
    342e:	bf00      	nop
    3430:	40007104 	.word	0x40007104
    3434:	40007110 	.word	0x40007110
    3438:	40007000 	.word	0x40007000
    343c:	20000000 	.word	0x20000000

00003440 <adc_nrfx_read>:
{
    3440:	b538      	push	{r3, r4, r5, lr}
    3442:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    3444:	4d0c      	ldr	r5, [pc, #48]	; (3478 <adc_nrfx_read+0x38>)
    3446:	f04f 32ff 	mov.w	r2, #4294967295
    344a:	f04f 33ff 	mov.w	r3, #4294967295
    344e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    3452:	f001 fdc7 	bl	4fe4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3456:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    3458:	4620      	mov	r0, r4
    345a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
	ctx->signal = signal;
    345e:	66eb      	str	r3, [r5, #108]	; 0x6c
    3460:	f7ff fe56 	bl	3110 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3464:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    3468:	4604      	mov	r4, r0
    346a:	b103      	cbz	r3, 346e <adc_nrfx_read+0x2e>
    346c:	b110      	cbz	r0, 3474 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    346e:	4803      	ldr	r0, [pc, #12]	; (347c <adc_nrfx_read+0x3c>)
    3470:	f001 fd92 	bl	4f98 <z_impl_k_sem_give>
}
    3474:	4620      	mov	r0, r4
    3476:	bd38      	pop	{r3, r4, r5, pc}
    3478:	20000000 	.word	0x20000000
    347c:	20000038 	.word	0x20000038

00003480 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    3480:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3482:	4b09      	ldr	r3, [pc, #36]	; (34a8 <gpio_nrfx_init+0x28>)
    3484:	781a      	ldrb	r2, [r3, #0]
    3486:	b96a      	cbnz	r2, 34a4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3488:	2101      	movs	r1, #1
    348a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    348c:	2006      	movs	r0, #6
    348e:	2105      	movs	r1, #5
    3490:	f7fe fdc8 	bl	2024 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    3494:	2006      	movs	r0, #6
    3496:	f7fe fdb5 	bl	2004 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    349a:	4b04      	ldr	r3, [pc, #16]	; (34ac <gpio_nrfx_init+0x2c>)
    349c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    34a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    34a4:	2000      	movs	r0, #0
    34a6:	bd08      	pop	{r3, pc}
    34a8:	20000978 	.word	0x20000978
    34ac:	40006000 	.word	0x40006000

000034b0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    34b0:	4b2b      	ldr	r3, [pc, #172]	; (3560 <gpio_nrfx_config+0xb0>)
{
    34b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34b4:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    34b6:	482b      	ldr	r0, [pc, #172]	; (3564 <gpio_nrfx_config+0xb4>)
    34b8:	4013      	ands	r3, r2
    34ba:	4283      	cmp	r3, r0
    34bc:	d040      	beq.n	3540 <gpio_nrfx_config+0x90>
    34be:	d80d      	bhi.n	34dc <gpio_nrfx_config+0x2c>
    34c0:	2b06      	cmp	r3, #6
    34c2:	d015      	beq.n	34f0 <gpio_nrfx_config+0x40>
    34c4:	d805      	bhi.n	34d2 <gpio_nrfx_config+0x22>
    34c6:	b19b      	cbz	r3, 34f0 <gpio_nrfx_config+0x40>
    34c8:	2b02      	cmp	r3, #2
    34ca:	d03b      	beq.n	3544 <gpio_nrfx_config+0x94>
    34cc:	f06f 0015 	mvn.w	r0, #21
    34d0:	e035      	b.n	353e <gpio_nrfx_config+0x8e>
    34d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    34d6:	d1f9      	bne.n	34cc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    34d8:	2301      	movs	r3, #1
    34da:	e009      	b.n	34f0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    34dc:	4822      	ldr	r0, [pc, #136]	; (3568 <gpio_nrfx_config+0xb8>)
    34de:	4283      	cmp	r3, r0
    34e0:	d032      	beq.n	3548 <gpio_nrfx_config+0x98>
    34e2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    34e6:	d031      	beq.n	354c <gpio_nrfx_config+0x9c>
    34e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    34ec:	d1ee      	bne.n	34cc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    34ee:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    34f0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    34f2:	bf54      	ite	pl
    34f4:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    34f8:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    34fa:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    34fe:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    3500:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3504:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    3508:	d507      	bpl.n	351a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    350a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    350e:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3510:	d01e      	beq.n	3550 <gpio_nrfx_config+0xa0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    3512:	2201      	movs	r2, #1
    3514:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3516:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    351a:	7a32      	ldrb	r2, [r6, #8]
    351c:	f001 011f 	and.w	r1, r1, #31
    3520:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3524:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    3528:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    352c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    3530:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3534:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3538:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    353c:	2000      	movs	r0, #0
}
    353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    3540:	2307      	movs	r3, #7
    3542:	e7d5      	b.n	34f0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    3544:	2304      	movs	r3, #4
    3546:	e7d3      	b.n	34f0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    3548:	2305      	movs	r3, #5
    354a:	e7d1      	b.n	34f0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    354c:	2303      	movs	r3, #3
    354e:	e7cf      	b.n	34f0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    3550:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    3552:	bf42      	ittt	mi
    3554:	2201      	movmi	r2, #1
    3556:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    3558:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    355c:	e7dd      	b.n	351a <gpio_nrfx_config+0x6a>
    355e:	bf00      	nop
    3560:	00f00006 	.word	0x00f00006
    3564:	00100006 	.word	0x00100006
    3568:	00400002 	.word	0x00400002

0000356c <gpiote_pin_int_cfg>:
{
    356c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    356e:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    3570:	4c4f      	ldr	r4, [pc, #316]	; (36b0 <gpiote_pin_int_cfg+0x144>)
    3572:	7a1a      	ldrb	r2, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    3574:	68c5      	ldr	r5, [r0, #12]
    3576:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    357a:	f001 031f 	and.w	r3, r1, #31
    357e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    3582:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3584:	2200      	movs	r2, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3586:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    358a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    358e:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    3592:	42b3      	cmp	r3, r6
    3594:	d172      	bne.n	367c <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
    3596:	fa20 f602 	lsr.w	r6, r0, r2
    359a:	07f6      	lsls	r6, r6, #31
    359c:	d56e      	bpl.n	367c <gpiote_pin_int_cfg+0x110>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    359e:	0090      	lsls	r0, r2, #2
    35a0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    35a4:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    35a8:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    35ac:	f026 0601 	bic.w	r6, r6, #1
    35b0:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    35b4:	2001      	movs	r0, #1
    35b6:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
    35ba:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    35be:	009c      	lsls	r4, r3, #2
    35c0:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    35c4:	68e8      	ldr	r0, [r5, #12]
    35c6:	f8d4 2700 	ldr.w	r2, [r4, #1792]	; 0x700
    35ca:	40c8      	lsrs	r0, r1
    35cc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    35d0:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    35d4:	f8c4 2700 	str.w	r2, [r4, #1792]	; 0x700
    35d8:	d04e      	beq.n	3678 <gpiote_pin_int_cfg+0x10c>
    35da:	6928      	ldr	r0, [r5, #16]
    35dc:	40c8      	lsrs	r0, r1
    35de:	f010 0001 	ands.w	r0, r0, #1
    35e2:	d049      	beq.n	3678 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    35e4:	69a8      	ldr	r0, [r5, #24]
    35e6:	40c8      	lsrs	r0, r1
    35e8:	f010 0001 	ands.w	r0, r0, #1
    35ec:	d050      	beq.n	3690 <gpiote_pin_int_cfg+0x124>
			if (data->double_edge & BIT(pin)) {
    35ee:	69ea      	ldr	r2, [r5, #28]
    35f0:	40ca      	lsrs	r2, r1
    35f2:	07d2      	lsls	r2, r2, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    35f4:	bf58      	it	pl
    35f6:	696a      	ldrpl	r2, [r5, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    35f8:	4d2d      	ldr	r5, [pc, #180]	; (36b0 <gpiote_pin_int_cfg+0x144>)
    35fa:	bf5f      	itttt	pl
    35fc:	40ca      	lsrpl	r2, r1
    35fe:	f002 0201 	andpl.w	r2, r2, #1
    3602:	f1c2 0202 	rsbpl	r2, r2, #2
    3606:	b2d2      	uxtbpl	r2, r2
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3608:	bf48      	it	mi
    360a:	2203      	movmi	r2, #3
    360c:	2400      	movs	r4, #0
    360e:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    3612:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    3616:	f010 0003 	ands.w	r0, r0, #3
    361a:	d133      	bne.n	3684 <gpiote_pin_int_cfg+0x118>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    361c:	00a1      	lsls	r1, r4, #2
    361e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3622:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3626:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3628:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    362c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    3630:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3634:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    3638:	f104 0340 	add.w	r3, r4, #64	; 0x40
    363c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    3640:	009b      	lsls	r3, r3, #2
    3642:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    3646:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3648:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    364c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3650:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3654:	4332      	orrs	r2, r6
    3656:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    365a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3660:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3662:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    3666:	f043 0301 	orr.w	r3, r3, #1
    366a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    366e:	2301      	movs	r3, #1
    3670:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    3674:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    3678:	b002      	add	sp, #8
    367a:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    367c:	3201      	adds	r2, #1
    367e:	2a08      	cmp	r2, #8
    3680:	d181      	bne.n	3586 <gpiote_pin_int_cfg+0x1a>
    3682:	e79c      	b.n	35be <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3684:	3401      	adds	r4, #1
    3686:	2c08      	cmp	r4, #8
    3688:	d1c1      	bne.n	360e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    368a:	f06f 0012 	mvn.w	r0, #18
    368e:	e7f3      	b.n	3678 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3690:	696a      	ldr	r2, [r5, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3692:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
    3696:	40ca      	lsrs	r2, r1
    3698:	f002 0201 	and.w	r2, r2, #1
    369c:	f1c2 0203 	rsb	r2, r2, #3
    36a0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    36a4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    36a8:	f8c4 2700 	str.w	r2, [r4, #1792]	; 0x700
}
    36ac:	e7e4      	b.n	3678 <gpiote_pin_int_cfg+0x10c>
    36ae:	bf00      	nop
    36b0:	40006000 	.word	0x40006000

000036b4 <gpiote_event_handler>:
{
    36b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36b8:	4953      	ldr	r1, [pc, #332]	; (3808 <gpiote_event_handler+0x154>)
    36ba:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    36bc:	2d00      	cmp	r5, #0
    36be:	d066      	beq.n	378e <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
    36c0:	4b52      	ldr	r3, [pc, #328]	; (380c <gpiote_event_handler+0x158>)
    36c2:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    36c4:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
    36c8:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
    36cc:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    36ce:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
    36d2:	4320      	orrs	r0, r4
    36d4:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    36d8:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    36dc:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
    36de:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
    36e2:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    36e4:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    36e8:	2001      	movs	r0, #1
	u32_t pin = 0U;
    36ea:	2600      	movs	r6, #0
	while (level_pins) {
    36ec:	2b00      	cmp	r3, #0
    36ee:	d138      	bne.n	3762 <gpiote_event_handler+0xae>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36f0:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    36f2:	680b      	ldr	r3, [r1, #0]
    36f4:	9300      	str	r3, [sp, #0]
    (void)dummy;
    36f6:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    36f8:	4845      	ldr	r0, [pc, #276]	; (3810 <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    36fa:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    36fc:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36fe:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    3700:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    3704:	fa06 f103 	lsl.w	r1, r6, r3
    3708:	4211      	tst	r1, r2
    370a:	d013      	beq.n	3734 <gpiote_event_handler+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    370c:	009a      	lsls	r2, r3, #2
    370e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3712:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    3716:	6811      	ldr	r1, [r2, #0]
    3718:	b161      	cbz	r1, 3734 <gpiote_event_handler+0x80>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    371a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    371e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3722:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    3724:	6812      	ldr	r2, [r2, #0]
    3726:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3728:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    372c:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    3730:	9a01      	ldr	r2, [sp, #4]
    3732:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3734:	3301      	adds	r3, #1
    3736:	2b08      	cmp	r3, #8
    3738:	d1e2      	bne.n	3700 <gpiote_event_handler+0x4c>
	if (fired_triggers[0]) {
    373a:	bb54      	cbnz	r4, 3792 <gpiote_event_handler+0xde>
	if (port_event) {
    373c:	b175      	cbz	r5, 375c <gpiote_event_handler+0xa8>
	const struct gpio_nrfx_data *data = get_port_data(port);
    373e:	4b33      	ldr	r3, [pc, #204]	; (380c <gpiote_event_handler+0x158>)
    3740:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3742:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
    3744:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
    3748:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    374a:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
    374e:	430a      	orrs	r2, r1
    3750:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    3754:	2401      	movs	r4, #1
	u32_t pin = 0U;
    3756:	2500      	movs	r5, #0
	while (level_pins) {
    3758:	2b00      	cmp	r3, #0
    375a:	d137      	bne.n	37cc <gpiote_event_handler+0x118>
}
    375c:	b002      	add	sp, #8
    375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    3762:	4203      	tst	r3, r0
    3764:	d010      	beq.n	3788 <gpiote_event_handler+0xd4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3766:	f89c 7008 	ldrb.w	r7, [ip, #8]
    376a:	f006 021f 	and.w	r2, r6, #31
    376e:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
    3772:	0092      	lsls	r2, r2, #2
    3774:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    3778:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    377c:	f8d2 7700 	ldr.w	r7, [r2, #1792]	; 0x700
    3780:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3784:	f8c2 7700 	str.w	r7, [r2, #1792]	; 0x700
		++pin;
    3788:	3601      	adds	r6, #1
		bit <<= 1;
    378a:	0040      	lsls	r0, r0, #1
    378c:	e7ae      	b.n	36ec <gpiote_event_handler+0x38>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    378e:	462c      	mov	r4, r5
    3790:	e7b2      	b.n	36f8 <gpiote_event_handler+0x44>
	struct gpio_nrfx_data *data = get_port_data(port);
    3792:	4f1e      	ldr	r7, [pc, #120]	; (380c <gpiote_event_handler+0x158>)
    3794:	f8d7 800c 	ldr.w	r8, [r7, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3798:	f8d8 1004 	ldr.w	r1, [r8, #4]
    379c:	2900      	cmp	r1, #0
    379e:	d0cd      	beq.n	373c <gpiote_event_handler+0x88>
	return node->next;
    37a0:	680e      	ldr	r6, [r1, #0]
    37a2:	2e00      	cmp	r6, #0
    37a4:	bf38      	it	cc
    37a6:	2600      	movcc	r6, #0
		if ((cb->pin_mask & pins) & data->int_en) {
    37a8:	688a      	ldr	r2, [r1, #8]
    37aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
    37ae:	4022      	ands	r2, r4
    37b0:	421a      	tst	r2, r3
    37b2:	d002      	beq.n	37ba <gpiote_event_handler+0x106>
			cb->handler(port, cb, cb->pin_mask & pins);
    37b4:	684b      	ldr	r3, [r1, #4]
    37b6:	4638      	mov	r0, r7
    37b8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    37ba:	2e00      	cmp	r6, #0
    37bc:	d0be      	beq.n	373c <gpiote_event_handler+0x88>
    37be:	6833      	ldr	r3, [r6, #0]
    37c0:	2b00      	cmp	r3, #0
    37c2:	bf38      	it	cc
    37c4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    37c6:	4631      	mov	r1, r6
    37c8:	461e      	mov	r6, r3
    37ca:	e7ed      	b.n	37a8 <gpiote_event_handler+0xf4>
		if (level_pins & bit) {
    37cc:	421c      	tst	r4, r3
    37ce:	d017      	beq.n	3800 <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    37d0:	7a31      	ldrb	r1, [r6, #8]
    37d2:	f005 021f 	and.w	r2, r5, #31
    37d6:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    37da:	0092      	lsls	r2, r2, #2
	if ((BIT(pin) & data->int_active_level) != 0U) {
    37dc:	6941      	ldr	r1, [r0, #20]
    37de:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    37e2:	40e9      	lsrs	r1, r5
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    37e4:	f8d2 7700 	ldr.w	r7, [r2, #1792]	; 0x700
    37e8:	f001 0101 	and.w	r1, r1, #1
    37ec:	f1c1 0103 	rsb	r1, r1, #3
    37f0:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    37f4:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
    37f8:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    37fc:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    3800:	3501      	adds	r5, #1
		bit <<= 1;
    3802:	0064      	lsls	r4, r4, #1
    3804:	e7a8      	b.n	3758 <gpiote_event_handler+0xa4>
    3806:	bf00      	nop
    3808:	4000617c 	.word	0x4000617c
    380c:	20000190 	.word	0x20000190
    3810:	40006000 	.word	0x40006000

00003814 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    3814:	b510      	push	{r4, lr}
    3816:	4604      	mov	r4, r0
    3818:	2200      	movs	r2, #0
    381a:	2101      	movs	r1, #1
    381c:	2003      	movs	r0, #3
    381e:	f7fe fc01 	bl	2024 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    3822:	6860      	ldr	r0, [r4, #4]
    3824:	4a06      	ldr	r2, [pc, #24]	; (3840 <twi_0_init+0x2c>)
    3826:	4623      	mov	r3, r4
    3828:	f100 0108 	add.w	r1, r0, #8
    382c:	f000 fe98 	bl	4560 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    3830:	4b04      	ldr	r3, [pc, #16]	; (3844 <twi_0_init+0x30>)
    3832:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    3834:	bf14      	ite	ne
    3836:	f06f 000f 	mvnne.w	r0, #15
    383a:	2000      	moveq	r0, #0
    383c:	bd10      	pop	{r4, pc}
    383e:	bf00      	nop
    3840:	00003921 	.word	0x00003921
    3844:	0bad0000 	.word	0x0bad0000

00003848 <i2c_nrfx_twi_transfer>:
{
    3848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    384c:	4605      	mov	r5, r0
    384e:	b087      	sub	sp, #28
    3850:	460c      	mov	r4, r1
    3852:	4617      	mov	r7, r2
    3854:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    3856:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
    3858:	f04f 32ff 	mov.w	r2, #4294967295
    385c:	f04f 33ff 	mov.w	r3, #4294967295
    3860:	f001 fbc0 	bl	4fe4 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    3864:	6868      	ldr	r0, [r5, #4]
		if (res != NRFX_SUCCESS) {
    3866:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 391c <i2c_nrfx_twi_transfer+0xd4>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    386a:	f000 febd 	bl	45e8 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    386e:	f04f 0800 	mov.w	r8, #0
    3872:	45b8      	cmp	r8, r7
    3874:	d301      	bcc.n	387a <i2c_nrfx_twi_transfer+0x32>
	int ret = 0;
    3876:	2400      	movs	r4, #0
    3878:	e029      	b.n	38ce <i2c_nrfx_twi_transfer+0x86>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    387a:	f894 b008 	ldrb.w	fp, [r4, #8]
    387e:	f01b 0608 	ands.w	r6, fp, #8
    3882:	d143      	bne.n	390c <i2c_nrfx_twi_transfer+0xc4>
		nrfx_twi_xfer_desc_t cur_xfer = {
    3884:	2214      	movs	r2, #20
    3886:	4631      	mov	r1, r6
    3888:	a801      	add	r0, sp, #4
    388a:	f002 fbf3 	bl	6074 <memset>
    388e:	6862      	ldr	r2, [r4, #4]
    3890:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    3892:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    3896:	6822      	ldr	r2, [r4, #0]
    3898:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    389c:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    38a0:	f88d 9005 	strb.w	r9, [sp, #5]
    38a4:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    38a6:	d11c      	bne.n	38e2 <i2c_nrfx_twi_transfer+0x9a>
			if ((i < (num_msgs - 1)) &&
    38a8:	1e7a      	subs	r2, r7, #1
    38aa:	4542      	cmp	r2, r8
    38ac:	d902      	bls.n	38b4 <i2c_nrfx_twi_transfer+0x6c>
    38ae:	7d22      	ldrb	r2, [r4, #20]
    38b0:	0752      	lsls	r2, r2, #29
    38b2:	d518      	bpl.n	38e6 <i2c_nrfx_twi_transfer+0x9e>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    38b4:	bb53      	cbnz	r3, 390c <i2c_nrfx_twi_transfer+0xc4>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    38b6:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    38b8:	6868      	ldr	r0, [r5, #4]
    38ba:	a901      	add	r1, sp, #4
    38bc:	f000 febe 	bl	463c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    38c0:	4550      	cmp	r0, sl
    38c2:	d012      	beq.n	38ea <i2c_nrfx_twi_transfer+0xa2>
			if (res == NRFX_ERROR_BUSY) {
    38c4:	4b14      	ldr	r3, [pc, #80]	; (3918 <i2c_nrfx_twi_transfer+0xd0>)
    38c6:	4298      	cmp	r0, r3
    38c8:	d023      	beq.n	3912 <i2c_nrfx_twi_transfer+0xca>
				ret = -EIO;
    38ca:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    38ce:	6868      	ldr	r0, [r5, #4]
    38d0:	f000 fe9a 	bl	4608 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    38d4:	68e8      	ldr	r0, [r5, #12]
	z_impl_k_sem_give(sem);
    38d6:	f001 fb5f 	bl	4f98 <z_impl_k_sem_give>
}
    38da:	4620      	mov	r0, r4
    38dc:	b007      	add	sp, #28
    38de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
    38e2:	4632      	mov	r2, r6
    38e4:	e7e8      	b.n	38b8 <i2c_nrfx_twi_transfer+0x70>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    38e6:	2240      	movs	r2, #64	; 0x40
    38e8:	e7e6      	b.n	38b8 <i2c_nrfx_twi_transfer+0x70>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    38ea:	68e8      	ldr	r0, [r5, #12]
    38ec:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
    38ee:	f04f 33ff 	mov.w	r3, #4294967295
    38f2:	f04f 32ff 	mov.w	r2, #4294967295
    38f6:	f001 fb75 	bl	4fe4 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    38fa:	68eb      	ldr	r3, [r5, #12]
    38fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    38fe:	4553      	cmp	r3, sl
    3900:	f104 040c 	add.w	r4, r4, #12
    3904:	d1e1      	bne.n	38ca <i2c_nrfx_twi_transfer+0x82>
	for (size_t i = 0; i < num_msgs; i++) {
    3906:	f108 0801 	add.w	r8, r8, #1
    390a:	e7b2      	b.n	3872 <i2c_nrfx_twi_transfer+0x2a>
			ret = -ENOTSUP;
    390c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    3910:	e7dd      	b.n	38ce <i2c_nrfx_twi_transfer+0x86>
				ret = -EBUSY;
    3912:	f06f 040f 	mvn.w	r4, #15
    3916:	e7da      	b.n	38ce <i2c_nrfx_twi_transfer+0x86>
    3918:	0bad000b 	.word	0x0bad000b
    391c:	0bad0000 	.word	0x0bad0000

00003920 <event_handler>:
	switch (p_event->type) {
    3920:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
    3922:	68cb      	ldr	r3, [r1, #12]
	switch (p_event->type) {
    3924:	2a01      	cmp	r2, #1
    3926:	d008      	beq.n	393a <event_handler+0x1a>
    3928:	2a02      	cmp	r2, #2
    392a:	d008      	beq.n	393e <event_handler+0x1e>
    392c:	b94a      	cbnz	r2, 3942 <event_handler+0x22>
		dev_data->res = NRFX_SUCCESS;
    392e:	4a06      	ldr	r2, [pc, #24]	; (3948 <event_handler+0x28>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    3930:	631a      	str	r2, [r3, #48]	; 0x30
	z_impl_k_sem_give(sem);
    3932:	f103 0018 	add.w	r0, r3, #24
    3936:	f001 bb2f 	b.w	4f98 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    393a:	4a04      	ldr	r2, [pc, #16]	; (394c <event_handler+0x2c>)
    393c:	e7f8      	b.n	3930 <event_handler+0x10>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    393e:	4a04      	ldr	r2, [pc, #16]	; (3950 <event_handler+0x30>)
    3940:	e7f6      	b.n	3930 <event_handler+0x10>
		dev_data->res = NRFX_ERROR_INTERNAL;
    3942:	4a04      	ldr	r2, [pc, #16]	; (3954 <event_handler+0x34>)
    3944:	e7f4      	b.n	3930 <event_handler+0x10>
    3946:	bf00      	nop
    3948:	0bad0000 	.word	0x0bad0000
    394c:	0bae0001 	.word	0x0bae0001
    3950:	0bae0002 	.word	0x0bae0002
    3954:	0bad0001 	.word	0x0bad0001

00003958 <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
    3958:	b510      	push	{r4, lr}
    395a:	4604      	mov	r4, r0
    395c:	2200      	movs	r2, #0
    395e:	2101      	movs	r1, #1
    3960:	2023      	movs	r0, #35	; 0x23
    3962:	f7fe fb5f 	bl	2024 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
    3966:	6860      	ldr	r0, [r4, #4]
    3968:	4a08      	ldr	r2, [pc, #32]	; (398c <spi_2_init+0x34>)
    396a:	4623      	mov	r3, r4
    396c:	f100 0108 	add.w	r1, r0, #8
    3970:	f000 fbe2 	bl	4138 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    3974:	4b06      	ldr	r3, [pc, #24]	; (3990 <spi_2_init+0x38>)
    3976:	4298      	cmp	r0, r3
    3978:	d104      	bne.n	3984 <spi_2_init+0x2c>
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    397a:	68e0      	ldr	r0, [r4, #12]
    397c:	f002 fd34 	bl	63e8 <spi_context_unlock_unconditionally>
	return 0;
    3980:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(2);
    3982:	bd10      	pop	{r4, pc}
		return -EBUSY;
    3984:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPI_DEVICE(2);
    3988:	e7fb      	b.n	3982 <spi_2_init+0x2a>
    398a:	bf00      	nop
    398c:	00006429 	.word	0x00006429
    3990:	0bad0000 	.word	0x0bad0000

00003994 <transfer_next_chunk>:
{
    3994:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    3996:	68c5      	ldr	r5, [r0, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    3998:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    399a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
{
    399c:	b085      	sub	sp, #20
    399e:	b982      	cbnz	r2, 39c2 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    39a0:	bb73      	cbnz	r3, 3a00 <transfer_next_chunk+0x6c>
	int error = 0;
    39a2:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    39a4:	2200      	movs	r2, #0
    39a6:	4611      	mov	r1, r2
    39a8:	4628      	mov	r0, r5
    39aa:	f002 fcf3 	bl	6394 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    39ae:	636c      	str	r4, [r5, #52]	; 0x34
    39b0:	f105 001c 	add.w	r0, r5, #28
    39b4:	f001 faf0 	bl	4f98 <z_impl_k_sem_give>
	dev_data->busy = false;
    39b8:	2300      	movs	r3, #0
    39ba:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    39be:	b005      	add	sp, #20
    39c0:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    39c2:	4611      	mov	r1, r2
    39c4:	b113      	cbz	r3, 39cc <transfer_next_chunk+0x38>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
    39c6:	429a      	cmp	r2, r3
    39c8:	bf28      	it	cs
    39ca:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    39cc:	6cac      	ldr	r4, [r5, #72]	; 0x48
		dev_data->chunk_len = chunk_len;
    39ce:	65a9      	str	r1, [r5, #88]	; 0x58
		xfer.p_tx_buffer = ctx->tx_buf;
    39d0:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    39d2:	b1bc      	cbz	r4, 3a04 <transfer_next_chunk+0x70>
    39d4:	2a00      	cmp	r2, #0
    39d6:	bf18      	it	ne
    39d8:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    39da:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    39dc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    39de:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    39e0:	b192      	cbz	r2, 3a08 <transfer_next_chunk+0x74>
    39e2:	2b00      	cmp	r3, #0
    39e4:	bf18      	it	ne
    39e6:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    39e8:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    39ea:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    39ec:	2200      	movs	r2, #0
    39ee:	4669      	mov	r1, sp
    39f0:	f000 fc3e 	bl	4270 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    39f4:	4b05      	ldr	r3, [pc, #20]	; (3a0c <transfer_next_chunk+0x78>)
    39f6:	4298      	cmp	r0, r3
    39f8:	d0e1      	beq.n	39be <transfer_next_chunk+0x2a>
		error = -EIO;
    39fa:	f06f 0404 	mvn.w	r4, #4
    39fe:	e7d1      	b.n	39a4 <transfer_next_chunk+0x10>
    3a00:	4619      	mov	r1, r3
    3a02:	e7e3      	b.n	39cc <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3a04:	4622      	mov	r2, r4
    3a06:	e7e8      	b.n	39da <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3a08:	4613      	mov	r3, r2
    3a0a:	e7ed      	b.n	39e8 <transfer_next_chunk+0x54>
    3a0c:	0bad0000 	.word	0x0bad0000

00003a10 <spi_nrfx_transceive>:
{
    3a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    3a14:	68c4      	ldr	r4, [r0, #12]
{
    3a16:	4680      	mov	r8, r0
    3a18:	460f      	mov	r7, r1
    3a1a:	4616      	mov	r6, r2
    3a1c:	461d      	mov	r5, r3
	k_sem_take(&ctx->lock, K_FOREVER);
    3a1e:	f104 0a04 	add.w	sl, r4, #4
	return z_impl_k_sem_take(sem, timeout);
    3a22:	f04f 33ff 	mov.w	r3, #4294967295
    3a26:	f04f 32ff 	mov.w	r2, #4294967295
    3a2a:	4650      	mov	r0, sl
    3a2c:	f001 fada 	bl	4fe4 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    3a30:	f8d8 900c 	ldr.w	r9, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    3a34:	f8d9 3000 	ldr.w	r3, [r9]
    3a38:	429f      	cmp	r7, r3
    3a3a:	d068      	beq.n	3b0e <spi_nrfx_transceive+0xfe>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    3a3c:	88bb      	ldrh	r3, [r7, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    3a3e:	f641 0209 	movw	r2, #6153	; 0x1809
    3a42:	4213      	tst	r3, r2
    3a44:	f040 80b6 	bne.w	3bb4 <spi_nrfx_transceive+0x1a4>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    3a48:	f3c3 1345 	ubfx	r3, r3, #5, #6
    3a4c:	2b08      	cmp	r3, #8
    3a4e:	f040 80b1 	bne.w	3bb4 <spi_nrfx_transceive+0x1a4>
	if (spi_cfg->frequency < 125000) {
    3a52:	683a      	ldr	r2, [r7, #0]
    3a54:	4b59      	ldr	r3, [pc, #356]	; (3bbc <spi_nrfx_transceive+0x1ac>)
    3a56:	429a      	cmp	r2, r3
    3a58:	f240 80ac 	bls.w	3bb4 <spi_nrfx_transceive+0x1a4>
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
    3a5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3a60:	9300      	str	r3, [sp, #0]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    3a62:	68bb      	ldr	r3, [r7, #8]
	ctx->config = spi_cfg;
    3a64:	f8c9 7000 	str.w	r7, [r9]
    3a68:	b30b      	cbz	r3, 3aae <spi_nrfx_transceive+0x9e>
    3a6a:	6818      	ldr	r0, [r3, #0]
    3a6c:	b1f8      	cbz	r0, 3aae <spi_nrfx_transceive+0x9e>
				   ctx->config->cs->gpio_pin, GPIO_OUTPUT);
    3a6e:	6859      	ldr	r1, [r3, #4]
	struct gpio_driver_data *data =
    3a70:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	return api->pin_configure(port, pin, flags);
    3a74:	6883      	ldr	r3, [r0, #8]
    3a76:	b2c9      	uxtb	r1, r1
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	9101      	str	r1, [sp, #4]
    3a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3a80:	4798      	blx	r3
	if (ret != 0) {
    3a82:	b948      	cbnz	r0, 3a98 <spi_nrfx_transceive+0x88>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3a84:	9901      	ldr	r1, [sp, #4]
    3a86:	2301      	movs	r3, #1
    3a88:	fa03 f101 	lsl.w	r1, r3, r1
    3a8c:	f8db 3000 	ldr.w	r3, [fp]
    3a90:	ea23 0301 	bic.w	r3, r3, r1
    3a94:	f8cb 3000 	str.w	r3, [fp]
		gpio_pin_set(ctx->config->cs->gpio_dev,
    3a98:	f8d9 2000 	ldr.w	r2, [r9]
    3a9c:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    3a9e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_set(ctx->config->cs->gpio_dev,
    3aa2:	7919      	ldrb	r1, [r3, #4]
    3aa4:	6818      	ldr	r0, [r3, #0]
    3aa6:	43d2      	mvns	r2, r2
    3aa8:	0fd2      	lsrs	r2, r2, #31
    3aaa:	f002 fc63 	bl	6374 <gpio_pin_set>
	nrf_spi_configure(spi->p_reg,
    3aae:	9b00      	ldr	r3, [sp, #0]
    3ab0:	6819      	ldr	r1, [r3, #0]
    3ab2:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3ab4:	0798      	lsls	r0, r3, #30
    3ab6:	f003 0204 	and.w	r2, r3, #4
    3aba:	d558      	bpl.n	3b6e <spi_nrfx_transceive+0x15e>
			return NRF_SPI_MODE_2;
    3abc:	2a00      	cmp	r2, #0
    3abe:	bf14      	ite	ne
    3ac0:	2203      	movne	r2, #3
    3ac2:	2202      	moveq	r2, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    3ac4:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    3ac6:	f3c3 1300 	ubfx	r3, r3, #4, #1
    3aca:	d054      	beq.n	3b76 <spi_nrfx_transceive+0x166>
    3acc:	2a03      	cmp	r2, #3
    3ace:	d055      	beq.n	3b7c <spi_nrfx_transceive+0x16c>
    3ad0:	2a01      	cmp	r2, #1
    3ad2:	d101      	bne.n	3ad8 <spi_nrfx_transceive+0xc8>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    3ad4:	f043 0302 	orr.w	r3, r3, #2
	if (frequency < 250000) {
    3ad8:	4a39      	ldr	r2, [pc, #228]	; (3bc0 <spi_nrfx_transceive+0x1b0>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    3ada:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
    3ade:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
    3ae0:	4293      	cmp	r3, r2
    3ae2:	d94e      	bls.n	3b82 <spi_nrfx_transceive+0x172>
	} else if (frequency < 500000) {
    3ae4:	4a37      	ldr	r2, [pc, #220]	; (3bc4 <spi_nrfx_transceive+0x1b4>)
    3ae6:	4293      	cmp	r3, r2
    3ae8:	d94e      	bls.n	3b88 <spi_nrfx_transceive+0x178>
	} else if (frequency < 1000000) {
    3aea:	4a37      	ldr	r2, [pc, #220]	; (3bc8 <spi_nrfx_transceive+0x1b8>)
    3aec:	4293      	cmp	r3, r2
    3aee:	d94e      	bls.n	3b8e <spi_nrfx_transceive+0x17e>
	} else if (frequency < 2000000) {
    3af0:	4a36      	ldr	r2, [pc, #216]	; (3bcc <spi_nrfx_transceive+0x1bc>)
    3af2:	4293      	cmp	r3, r2
    3af4:	d94e      	bls.n	3b94 <spi_nrfx_transceive+0x184>
	} else if (frequency < 4000000) {
    3af6:	4a36      	ldr	r2, [pc, #216]	; (3bd0 <spi_nrfx_transceive+0x1c0>)
    3af8:	4293      	cmp	r3, r2
    3afa:	d94e      	bls.n	3b9a <spi_nrfx_transceive+0x18a>
		return NRF_SPI_FREQ_8M;
    3afc:	4a35      	ldr	r2, [pc, #212]	; (3bd4 <spi_nrfx_transceive+0x1c4>)
    3afe:	4293      	cmp	r3, r2
    3b00:	bf34      	ite	cc
    3b02:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
    3b06:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    3b0a:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    3b0e:	2301      	movs	r3, #1
    3b10:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
    3b14:	2e00      	cmp	r6, #0
    3b16:	d043      	beq.n	3ba0 <spi_nrfx_transceive+0x190>
		ctx->current_tx = tx_bufs->buffers;
    3b18:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    3b1a:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    3b1c:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
    3b1e:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    3b20:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    3b22:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    3b24:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
    3b26:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
    3b28:	2d00      	cmp	r5, #0
    3b2a:	d03e      	beq.n	3baa <spi_nrfx_transceive+0x19a>
		ctx->current_rx = rx_bufs->buffers;
    3b2c:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    3b2e:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    3b30:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
    3b32:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    3b34:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    3b36:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    3b38:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
    3b3a:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
    3b3c:	2200      	movs	r2, #0
    3b3e:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
    3b40:	2101      	movs	r1, #1
    3b42:	4620      	mov	r0, r4
    3b44:	f002 fc26 	bl	6394 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    3b48:	4640      	mov	r0, r8
    3b4a:	f7ff ff23 	bl	3994 <transfer_next_chunk>
    3b4e:	f04f 32ff 	mov.w	r2, #4294967295
    3b52:	f104 001c 	add.w	r0, r4, #28
    3b56:	f04f 33ff 	mov.w	r3, #4294967295
    3b5a:	f001 fa43 	bl	4fe4 <z_impl_k_sem_take>
	status = ctx->sync_status;
    3b5e:	6b64      	ldr	r4, [r4, #52]	; 0x34
	z_impl_k_sem_give(sem);
    3b60:	4650      	mov	r0, sl
    3b62:	f001 fa19 	bl	4f98 <z_impl_k_sem_give>
}
    3b66:	4620      	mov	r0, r4
    3b68:	b003      	add	sp, #12
    3b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return NRF_SPI_MODE_0;
    3b6e:	3a00      	subs	r2, #0
    3b70:	bf18      	it	ne
    3b72:	2201      	movne	r2, #1
    3b74:	e7a6      	b.n	3ac4 <spi_nrfx_transceive+0xb4>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3b76:	f043 0304 	orr.w	r3, r3, #4
        break;
    3b7a:	e7ad      	b.n	3ad8 <spi_nrfx_transceive+0xc8>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3b7c:	f043 0306 	orr.w	r3, r3, #6
        break;
    3b80:	e7aa      	b.n	3ad8 <spi_nrfx_transceive+0xc8>
		return NRF_SPI_FREQ_125K;
    3b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    3b86:	e7c0      	b.n	3b0a <spi_nrfx_transceive+0xfa>
		return NRF_SPI_FREQ_250K;
    3b88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3b8c:	e7bd      	b.n	3b0a <spi_nrfx_transceive+0xfa>
		return NRF_SPI_FREQ_500K;
    3b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    3b92:	e7ba      	b.n	3b0a <spi_nrfx_transceive+0xfa>
		return NRF_SPI_FREQ_1M;
    3b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3b98:	e7b7      	b.n	3b0a <spi_nrfx_transceive+0xfa>
		return NRF_SPI_FREQ_2M;
    3b9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3b9e:	e7b4      	b.n	3b0a <spi_nrfx_transceive+0xfa>
		ctx->tx_count = 0;
    3ba0:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
    3ba4:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
    3ba8:	e7be      	b.n	3b28 <spi_nrfx_transceive+0x118>
		ctx->rx_count = 0;
    3baa:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
    3bae:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    3bb2:	e7c3      	b.n	3b3c <spi_nrfx_transceive+0x12c>
		return -EINVAL;
    3bb4:	f06f 0415 	mvn.w	r4, #21
    3bb8:	e7d2      	b.n	3b60 <spi_nrfx_transceive+0x150>
    3bba:	bf00      	nop
    3bbc:	0001e847 	.word	0x0001e847
    3bc0:	0003d08f 	.word	0x0003d08f
    3bc4:	0007a11f 	.word	0x0007a11f
    3bc8:	000f423f 	.word	0x000f423f
    3bcc:	001e847f 	.word	0x001e847f
    3bd0:	003d08ff 	.word	0x003d08ff
    3bd4:	007a1200 	.word	0x007a1200

00003bd8 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3bd8:	4b02      	ldr	r3, [pc, #8]	; (3be4 <uart_nrfx_err_check+0xc>)
    3bda:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3bde:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    3be2:	4770      	bx	lr
    3be4:	40002000 	.word	0x40002000

00003be8 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    3be8:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    3bea:	794b      	ldrb	r3, [r1, #5]
    3bec:	2b01      	cmp	r3, #1
    3bee:	d121      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3bf0:	798b      	ldrb	r3, [r1, #6]
    3bf2:	2b03      	cmp	r3, #3
    3bf4:	d11e      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3bf6:	79ca      	ldrb	r2, [r1, #7]
    3bf8:	b122      	cbz	r2, 3c04 <uart_nrfx_configure+0x1c>
    3bfa:	2a01      	cmp	r2, #1
    3bfc:	d11a      	bne.n	3c34 <uart_nrfx_configure+0x4c>
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    3bfe:	6843      	ldr	r3, [r0, #4]
    3c00:	781b      	ldrb	r3, [r3, #0]
    3c02:	b1bb      	cbz	r3, 3c34 <uart_nrfx_configure+0x4c>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3c04:	790c      	ldrb	r4, [r1, #4]
    3c06:	b114      	cbz	r4, 3c0e <uart_nrfx_configure+0x26>
    3c08:	2c02      	cmp	r4, #2
    3c0a:	d113      	bne.n	3c34 <uart_nrfx_configure+0x4c>
    3c0c:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3c0e:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    3c10:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3c14:	d05f      	beq.n	3cd6 <uart_nrfx_configure+0xee>
    3c16:	d82b      	bhi.n	3c70 <uart_nrfx_configure+0x88>
    3c18:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3c1c:	d05d      	beq.n	3cda <uart_nrfx_configure+0xf2>
    3c1e:	d814      	bhi.n	3c4a <uart_nrfx_configure+0x62>
    3c20:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3c24:	d05b      	beq.n	3cde <uart_nrfx_configure+0xf6>
    3c26:	d808      	bhi.n	3c3a <uart_nrfx_configure+0x52>
    3c28:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3c2c:	d05a      	beq.n	3ce4 <uart_nrfx_configure+0xfc>
    3c2e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3c32:	d05a      	beq.n	3cea <uart_nrfx_configure+0x102>
    3c34:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3c38:	e04c      	b.n	3cd4 <uart_nrfx_configure+0xec>
    3c3a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3c3e:	d057      	beq.n	3cf0 <uart_nrfx_configure+0x108>
    3c40:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3c44:	d1f6      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3c46:	4b34      	ldr	r3, [pc, #208]	; (3d18 <uart_nrfx_configure+0x130>)
    3c48:	e039      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3c4a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3c4e:	d052      	beq.n	3cf6 <uart_nrfx_configure+0x10e>
    3c50:	d807      	bhi.n	3c62 <uart_nrfx_configure+0x7a>
    3c52:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3c56:	d050      	beq.n	3cfa <uart_nrfx_configure+0x112>
    3c58:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3c5c:	d1ea      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3c5e:	4b2f      	ldr	r3, [pc, #188]	; (3d1c <uart_nrfx_configure+0x134>)
    3c60:	e02d      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3c62:	f647 2512 	movw	r5, #31250	; 0x7a12
    3c66:	42ab      	cmp	r3, r5
    3c68:	d1e4      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3c6a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3c6e:	e026      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3c70:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3c74:	d044      	beq.n	3d00 <uart_nrfx_configure+0x118>
    3c76:	d811      	bhi.n	3c9c <uart_nrfx_configure+0xb4>
    3c78:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3c7c:	d042      	beq.n	3d04 <uart_nrfx_configure+0x11c>
    3c7e:	d808      	bhi.n	3c92 <uart_nrfx_configure+0xaa>
    3c80:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3c84:	42ab      	cmp	r3, r5
    3c86:	d03f      	beq.n	3d08 <uart_nrfx_configure+0x120>
    3c88:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3c8c:	d1d2      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3c8e:	4b24      	ldr	r3, [pc, #144]	; (3d20 <uart_nrfx_configure+0x138>)
    3c90:	e015      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3c92:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3c96:	d1cd      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3c98:	4b22      	ldr	r3, [pc, #136]	; (3d24 <uart_nrfx_configure+0x13c>)
    3c9a:	e010      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3c9c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3ca0:	d035      	beq.n	3d0e <uart_nrfx_configure+0x126>
    3ca2:	d807      	bhi.n	3cb4 <uart_nrfx_configure+0xcc>
    3ca4:	4d20      	ldr	r5, [pc, #128]	; (3d28 <uart_nrfx_configure+0x140>)
    3ca6:	42ab      	cmp	r3, r5
    3ca8:	d033      	beq.n	3d12 <uart_nrfx_configure+0x12a>
    3caa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3cae:	d1c1      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3cb0:	4b1e      	ldr	r3, [pc, #120]	; (3d2c <uart_nrfx_configure+0x144>)
    3cb2:	e004      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3cb4:	4d1e      	ldr	r5, [pc, #120]	; (3d30 <uart_nrfx_configure+0x148>)
    3cb6:	42ab      	cmp	r3, r5
    3cb8:	d1bc      	bne.n	3c34 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3cbe:	4d1d      	ldr	r5, [pc, #116]	; (3d34 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    3cc0:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    3cc2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3cc6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3cca:	68c3      	ldr	r3, [r0, #12]
    3ccc:	c903      	ldmia	r1, {r0, r1}
    3cce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3cd2:	2000      	movs	r0, #0
}
    3cd4:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3cd6:	4b18      	ldr	r3, [pc, #96]	; (3d38 <uart_nrfx_configure+0x150>)
    3cd8:	e7f1      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3cda:	4b18      	ldr	r3, [pc, #96]	; (3d3c <uart_nrfx_configure+0x154>)
    3cdc:	e7ef      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3cde:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ce2:	e7ec      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
    3ce4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3ce8:	e7e9      	b.n	3cbe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    3cea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3cee:	e7e6      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3cf0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3cf4:	e7e3      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3cf6:	4b12      	ldr	r3, [pc, #72]	; (3d40 <uart_nrfx_configure+0x158>)
    3cf8:	e7e1      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3cfa:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3cfe:	e7de      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3d00:	4b10      	ldr	r3, [pc, #64]	; (3d44 <uart_nrfx_configure+0x15c>)
    3d02:	e7dc      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3d04:	4b10      	ldr	r3, [pc, #64]	; (3d48 <uart_nrfx_configure+0x160>)
    3d06:	e7da      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3d08:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3d0c:	e7d7      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3d0e:	4b0f      	ldr	r3, [pc, #60]	; (3d4c <uart_nrfx_configure+0x164>)
    3d10:	e7d5      	b.n	3cbe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3d12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3d16:	e7d2      	b.n	3cbe <uart_nrfx_configure+0xd6>
    3d18:	0013b000 	.word	0x0013b000
    3d1c:	004ea000 	.word	0x004ea000
    3d20:	00ebf000 	.word	0x00ebf000
    3d24:	01d7e000 	.word	0x01d7e000
    3d28:	0003d090 	.word	0x0003d090
    3d2c:	075f7000 	.word	0x075f7000
    3d30:	000f4240 	.word	0x000f4240
    3d34:	40002000 	.word	0x40002000
    3d38:	009d5000 	.word	0x009d5000
    3d3c:	00275000 	.word	0x00275000
    3d40:	0075f000 	.word	0x0075f000
    3d44:	03afb000 	.word	0x03afb000
    3d48:	013a9000 	.word	0x013a9000
    3d4c:	0ebed000 	.word	0x0ebed000

00003d50 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d50:	4b08      	ldr	r3, [pc, #32]	; (3d74 <uart_nrfx_poll_in+0x24>)
    3d52:	681a      	ldr	r2, [r3, #0]
{
    3d54:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    3d56:	b152      	cbz	r2, 3d6e <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d58:	2000      	movs	r0, #0
    3d5a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3d5c:	681b      	ldr	r3, [r3, #0]
    3d5e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3d60:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    3d62:	4b05      	ldr	r3, [pc, #20]	; (3d78 <uart_nrfx_poll_in+0x28>)
    3d64:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    3d68:	700b      	strb	r3, [r1, #0]
}
    3d6a:	b002      	add	sp, #8
    3d6c:	4770      	bx	lr
		return -1;
    3d6e:	f04f 30ff 	mov.w	r0, #4294967295
    3d72:	e7fa      	b.n	3d6a <uart_nrfx_poll_in+0x1a>
    3d74:	40002108 	.word	0x40002108
    3d78:	40002000 	.word	0x40002000

00003d7c <uart_nrfx_poll_out>:
{
    3d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d7e:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    3d80:	f002 fe07 	bl	6992 <k_is_in_isr>
    3d84:	4d1b      	ldr	r5, [pc, #108]	; (3df4 <uart_nrfx_poll_out+0x78>)
    3d86:	b9c0      	cbnz	r0, 3dba <uart_nrfx_poll_out+0x3e>
    3d88:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3d8a:	2701      	movs	r7, #1
    3d8c:	f3bf 8f5b 	dmb	ish
    3d90:	e855 3f00 	ldrex	r3, [r5]
    3d94:	2b00      	cmp	r3, #0
    3d96:	d103      	bne.n	3da0 <uart_nrfx_poll_out+0x24>
    3d98:	e845 7200 	strex	r2, r7, [r5]
    3d9c:	2a00      	cmp	r2, #0
    3d9e:	d1f7      	bne.n	3d90 <uart_nrfx_poll_out+0x14>
    3da0:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    3da4:	d00b      	beq.n	3dbe <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
    3da6:	2021      	movs	r0, #33	; 0x21
    3da8:	2100      	movs	r1, #0
    3daa:	3c01      	subs	r4, #1
    3dac:	f001 f8ce 	bl	4f4c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    3db0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    3db4:	d1ea      	bne.n	3d8c <uart_nrfx_poll_out+0x10>
}
    3db6:	b003      	add	sp, #12
    3db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
    3dba:	2301      	movs	r3, #1
    3dbc:	602b      	str	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3dbe:	4c0e      	ldr	r4, [pc, #56]	; (3df8 <uart_nrfx_poll_out+0x7c>)
    3dc0:	2200      	movs	r2, #0
    3dc2:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3dc4:	6822      	ldr	r2, [r4, #0]
    3dc6:	9201      	str	r2, [sp, #4]
    (void)dummy;
    3dc8:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dca:	4a0c      	ldr	r2, [pc, #48]	; (3dfc <uart_nrfx_poll_out+0x80>)
    3dcc:	2101      	movs	r1, #1
    3dce:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    3dd0:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    3dd4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3dd8:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    3dda:	b923      	cbnz	r3, 3de6 <uart_nrfx_poll_out+0x6a>
    3ddc:	2001      	movs	r0, #1
    3dde:	f002 fb70 	bl	64c2 <nrfx_busy_wait>
    3de2:	3e01      	subs	r6, #1
    3de4:	d1f8      	bne.n	3dd8 <uart_nrfx_poll_out+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3de6:	4b06      	ldr	r3, [pc, #24]	; (3e00 <uart_nrfx_poll_out+0x84>)
    3de8:	2201      	movs	r2, #1
    3dea:	601a      	str	r2, [r3, #0]
	*lock = 0;
    3dec:	2300      	movs	r3, #0
    3dee:	602b      	str	r3, [r5, #0]
    3df0:	e7e1      	b.n	3db6 <uart_nrfx_poll_out+0x3a>
    3df2:	bf00      	nop
    3df4:	20000364 	.word	0x20000364
    3df8:	4000211c 	.word	0x4000211c
    3dfc:	40002008 	.word	0x40002008
    3e00:	4000200c 	.word	0x4000200c

00003e04 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
    3e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    3e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    3e0a:	4c16      	ldr	r4, [pc, #88]	; (3e64 <uart_nrfx_init+0x60>)
    3e0c:	2240      	movs	r2, #64	; 0x40
    3e0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3e12:	2103      	movs	r1, #3
    3e14:	2200      	movs	r2, #0
    3e16:	2508      	movs	r5, #8
    3e18:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    3e1c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    3e20:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    3e24:	2506      	movs	r5, #6
    3e26:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    3e2a:	2520      	movs	r5, #32
    3e2c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3e30:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    3e34:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    3e38:	2305      	movs	r3, #5
    3e3a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    3e3e:	2307      	movs	r3, #7

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3e40:	68c1      	ldr	r1, [r0, #12]
    3e42:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    3e46:	f7ff fecf 	bl	3be8 <uart_nrfx_configure>
	if (err) {
    3e4a:	b948      	cbnz	r0, 3e60 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3e4c:	2304      	movs	r3, #4
    3e4e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e52:	4b05      	ldr	r3, [pc, #20]	; (3e68 <uart_nrfx_init+0x64>)
    3e54:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3e5a:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e5c:	2301      	movs	r3, #1
    3e5e:	6023      	str	r3, [r4, #0]
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    3e60:	b003      	add	sp, #12
    3e62:	bd30      	pop	{r4, r5, pc}
    3e64:	40002000 	.word	0x40002000
    3e68:	40002108 	.word	0x40002108

00003e6c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3e6c:	4b0b      	ldr	r3, [pc, #44]	; (3e9c <nrf52_errata_108+0x30>)
    3e6e:	681b      	ldr	r3, [r3, #0]
    3e70:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e72:	bf05      	ittet	eq
    3e74:	4b0a      	ldreq	r3, [pc, #40]	; (3ea0 <nrf52_errata_108+0x34>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e76:	4a0b      	ldreq	r2, [pc, #44]	; (3ea4 <nrf52_errata_108+0x38>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3e78:	4a0b      	ldrne	r2, [pc, #44]	; (3ea8 <nrf52_errata_108+0x3c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e7a:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e7c:	bf0a      	itet	eq
    3e7e:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    3e80:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e82:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3e86:	2b06      	cmp	r3, #6
    3e88:	d105      	bne.n	3e96 <nrf52_errata_108+0x2a>
            {
                switch(var2)
    3e8a:	3803      	subs	r0, #3
    3e8c:	2803      	cmp	r0, #3
    3e8e:	bf8c      	ite	hi
    3e90:	2000      	movhi	r0, #0
    3e92:	2001      	movls	r0, #1
    3e94:	4770      	bx	lr
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
    3e96:	2000      	movs	r0, #0
    #endif
}
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop
    3e9c:	10000130 	.word	0x10000130
    3ea0:	f0000fe0 	.word	0xf0000fe0
    3ea4:	f0000fe8 	.word	0xf0000fe8
    3ea8:	10000134 	.word	0x10000134

00003eac <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3eac:	4b07      	ldr	r3, [pc, #28]	; (3ecc <nrf52_errata_16+0x20>)
    3eae:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3eb0:	2b06      	cmp	r3, #6
    3eb2:	d109      	bne.n	3ec8 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3eb4:	4b06      	ldr	r3, [pc, #24]	; (3ed0 <nrf52_errata_16+0x24>)
    3eb6:	681b      	ldr	r3, [r3, #0]
    3eb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3ebc:	3b03      	subs	r3, #3
    3ebe:	2b03      	cmp	r3, #3
    3ec0:	d802      	bhi.n	3ec8 <nrf52_errata_16+0x1c>
    3ec2:	4a04      	ldr	r2, [pc, #16]	; (3ed4 <nrf52_errata_16+0x28>)
    3ec4:	5cd0      	ldrb	r0, [r2, r3]
    3ec6:	4770      	bx	lr
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
    3ec8:	2000      	movs	r0, #0
    #endif
}
    3eca:	4770      	bx	lr
    3ecc:	f0000fe0 	.word	0xf0000fe0
    3ed0:	f0000fe8 	.word	0xf0000fe8
    3ed4:	00008c2d 	.word	0x00008c2d

00003ed8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3ed8:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
    3eda:	f7ff ffc7 	bl	3e6c <nrf52_errata_108>
    3ede:	b128      	cbz	r0, 3eec <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3ee0:	4b7e      	ldr	r3, [pc, #504]	; (40dc <SystemInit+0x204>)
    3ee2:	4a7f      	ldr	r2, [pc, #508]	; (40e0 <SystemInit+0x208>)
    3ee4:	681b      	ldr	r3, [r3, #0]
    3ee6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3eea:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
    3eec:	f7ff ffde 	bl	3eac <nrf52_errata_16>
    3ef0:	b110      	cbz	r0, 3ef8 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3ef2:	4b7c      	ldr	r3, [pc, #496]	; (40e4 <SystemInit+0x20c>)
    3ef4:	4a7c      	ldr	r2, [pc, #496]	; (40e8 <SystemInit+0x210>)
    3ef6:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
    3ef8:	f7ff ffb8 	bl	3e6c <nrf52_errata_108>
    3efc:	b128      	cbz	r0, 3f0a <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3efe:	4b7b      	ldr	r3, [pc, #492]	; (40ec <SystemInit+0x214>)
    3f00:	4a7b      	ldr	r2, [pc, #492]	; (40f0 <SystemInit+0x218>)
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3f08:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
    3f0a:	f7ff ffcf 	bl	3eac <nrf52_errata_16>
    3f0e:	b120      	cbz	r0, 3f1a <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3f10:	4a78      	ldr	r2, [pc, #480]	; (40f4 <SystemInit+0x21c>)
    3f12:	68d3      	ldr	r3, [r2, #12]
    3f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3f18:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    3f1a:	f7ff ffa7 	bl	3e6c <nrf52_errata_108>
    3f1e:	b140      	cbz	r0, 3f32 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    3f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f24:	2200      	movs	r2, #0
    3f26:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    3f2a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    3f2e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
    3f32:	f7ff ffbb 	bl	3eac <nrf52_errata_16>
    3f36:	b110      	cbz	r0, 3f3e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    3f38:	4b6f      	ldr	r3, [pc, #444]	; (40f8 <SystemInit+0x220>)
    3f3a:	2203      	movs	r2, #3
    3f3c:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
    3f3e:	f7ff ffb5 	bl	3eac <nrf52_errata_16>
    3f42:	b140      	cbz	r0, 3f56 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    3f44:	4b6d      	ldr	r3, [pc, #436]	; (40fc <SystemInit+0x224>)
    3f46:	2205      	movs	r2, #5
    3f48:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    3f4a:	2201      	movs	r2, #1
    3f4c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    3f4e:	2200      	movs	r2, #0
    3f50:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3f52:	223f      	movs	r2, #63	; 0x3f
    3f54:	605a      	str	r2, [r3, #4]
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3f56:	4b6a      	ldr	r3, [pc, #424]	; (4100 <SystemInit+0x228>)
    3f58:	681a      	ldr	r2, [r3, #0]
    3f5a:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3f5c:	bf0b      	itete	eq
    3f5e:	4b69      	ldreq	r3, [pc, #420]	; (4104 <SystemInit+0x22c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3f60:	4b69      	ldrne	r3, [pc, #420]	; (4108 <SystemInit+0x230>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3f62:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    3f64:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3f66:	bf02      	ittt	eq
    3f68:	3308      	addeq	r3, #8
    3f6a:	681b      	ldreq	r3, [r3, #0]
    3f6c:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3f70:	2a06      	cmp	r2, #6
    3f72:	d14d      	bne.n	4010 <SystemInit+0x138>
            {
                switch(var2)
    3f74:	3b03      	subs	r3, #3
    3f76:	2b03      	cmp	r3, #3
    3f78:	d84a      	bhi.n	4010 <SystemInit+0x138>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    3f7a:	4a64      	ldr	r2, [pc, #400]	; (410c <SystemInit+0x234>)
    3f7c:	5cd3      	ldrb	r3, [r2, r3]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d046      	beq.n	4010 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f86:	4b62      	ldr	r3, [pc, #392]	; (4110 <SystemInit+0x238>)
    3f88:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3f8c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3f90:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3f94:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3f98:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3f9c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3fa0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3fa4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3fa8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3fac:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3fb0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3fb4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3fb8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3fbc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3fc0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3fc4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3fc8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3fcc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3fd0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3fd4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3fd8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3fdc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3fe0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3fe4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3fe8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3fec:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3ff0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3ff4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3ff8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3ffc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4000:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4004:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4008:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    400c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
    4010:	f7ff ff2c 	bl	3e6c <nrf52_errata_108>
    4014:	b128      	cbz	r0, 4022 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    4016:	4b3f      	ldr	r3, [pc, #252]	; (4114 <SystemInit+0x23c>)
    4018:	4a3f      	ldr	r2, [pc, #252]	; (4118 <SystemInit+0x240>)
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    4020:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    4022:	f7ff ff23 	bl	3e6c <nrf52_errata_108>
    4026:	b148      	cbz	r0, 403c <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    402c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4030:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4032:	bf44      	itt	mi
    4034:	f06f 0201 	mvnmi.w	r2, #1
    4038:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    403c:	4b30      	ldr	r3, [pc, #192]	; (4100 <SystemInit+0x228>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    403e:	681b      	ldr	r3, [r3, #0]
    4040:	2b06      	cmp	r3, #6
    4042:	d10c      	bne.n	405e <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4044:	4b30      	ldr	r3, [pc, #192]	; (4108 <SystemInit+0x230>)
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	3b03      	subs	r3, #3
    404a:	2b03      	cmp	r3, #3
    404c:	d807      	bhi.n	405e <SystemInit+0x186>
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
    404e:	4a33      	ldr	r2, [pc, #204]	; (411c <SystemInit+0x244>)
    4050:	5cd3      	ldrb	r3, [r2, r3]
    4052:	b123      	cbz	r3, 405e <SystemInit+0x186>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    4054:	4a32      	ldr	r2, [pc, #200]	; (4120 <SystemInit+0x248>)
    4056:	6813      	ldr	r3, [r2, #0]
    4058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    405c:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    405e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4062:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4066:	2a00      	cmp	r2, #0
    4068:	db03      	blt.n	4072 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    406a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    406e:	2b00      	cmp	r3, #0
    4070:	da2f      	bge.n	40d2 <SystemInit+0x1fa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    4072:	4b2c      	ldr	r3, [pc, #176]	; (4124 <SystemInit+0x24c>)
    4074:	2201      	movs	r2, #1
    4076:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    407a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    407e:	2a00      	cmp	r2, #0
    4080:	d0fb      	beq.n	407a <SystemInit+0x1a2>
            NRF_UICR->PSELRESET[0] = 21;
    4082:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    4086:	2115      	movs	r1, #21
    4088:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    408c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4090:	2a00      	cmp	r2, #0
    4092:	d0fb      	beq.n	408c <SystemInit+0x1b4>
            NRF_UICR->PSELRESET[1] = 21;
    4094:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4098:	2215      	movs	r2, #21
    409a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    409e:	4b21      	ldr	r3, [pc, #132]	; (4124 <SystemInit+0x24c>)
    40a0:	461a      	mov	r2, r3
    40a2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    40a6:	2900      	cmp	r1, #0
    40a8:	d0fb      	beq.n	40a2 <SystemInit+0x1ca>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    40aa:	2100      	movs	r1, #0
    40ac:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    40b0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    40b4:	2b00      	cmp	r3, #0
    40b6:	d0fb      	beq.n	40b0 <SystemInit+0x1d8>
    40b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    40bc:	491a      	ldr	r1, [pc, #104]	; (4128 <SystemInit+0x250>)
    40be:	4b1b      	ldr	r3, [pc, #108]	; (412c <SystemInit+0x254>)
    40c0:	68ca      	ldr	r2, [r1, #12]
    40c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    40c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    40c8:	60cb      	str	r3, [r1, #12]
    40ca:	f3bf 8f4f 	dsb	sy
    __NOP();
    40ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    40d0:	e7fd      	b.n	40ce <SystemInit+0x1f6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    40d2:	4b17      	ldr	r3, [pc, #92]	; (4130 <SystemInit+0x258>)
    40d4:	4a17      	ldr	r2, [pc, #92]	; (4134 <SystemInit+0x25c>)
    40d6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    40d8:	bd08      	pop	{r3, pc}
    40da:	bf00      	nop
    40dc:	10000324 	.word	0x10000324
    40e0:	40013540 	.word	0x40013540
    40e4:	4007c074 	.word	0x4007c074
    40e8:	baadf00d 	.word	0xbaadf00d
    40ec:	10000244 	.word	0x10000244
    40f0:	4000053c 	.word	0x4000053c
    40f4:	e000edf0 	.word	0xe000edf0
    40f8:	400005a0 	.word	0x400005a0
    40fc:	40005610 	.word	0x40005610
    4100:	10000130 	.word	0x10000130
    4104:	f0000fe0 	.word	0xf0000fe0
    4108:	10000134 	.word	0x10000134
    410c:	00008c25 	.word	0x00008c25
    4110:	4000c000 	.word	0x4000c000
    4114:	10000258 	.word	0x10000258
    4118:	40000ee4 	.word	0x40000ee4
    411c:	00008c29 	.word	0x00008c29
    4120:	4000173c 	.word	0x4000173c
    4124:	4001e000 	.word	0x4001e000
    4128:	e000ed00 	.word	0xe000ed00
    412c:	05fa0004 	.word	0x05fa0004
    4130:	20000148 	.word	0x20000148
    4134:	03d09000 	.word	0x03d09000

00004138 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    4138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    413c:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    413e:	4d49      	ldr	r5, [pc, #292]	; (4264 <nrfx_spi_init+0x12c>)
    4140:	2628      	movs	r6, #40	; 0x28
    4142:	4366      	muls	r6, r4
    4144:	19af      	adds	r7, r5, r6
    4146:	f897 c01c 	ldrb.w	ip, [r7, #28]
    414a:	f1bc 0f00 	cmp.w	ip, #0
    414e:	f040 8086 	bne.w	425e <nrfx_spi_init+0x126>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    4152:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
    4154:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    4156:	f891 e000 	ldrb.w	lr, [r1]
    415a:	7b0f      	ldrb	r7, [r1, #12]
    415c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    p_reg->OUTCLR = clr_mask;
    4160:	2301      	movs	r3, #1
    4162:	fa03 f30e 	lsl.w	r3, r3, lr
    4166:	2f01      	cmp	r7, #1
    4168:	bf94      	ite	ls
    416a:	f8c6 350c 	strls.w	r3, [r6, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    416e:	f8c6 3508 	strhi.w	r3, [r6, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4172:	f50e 73e0 	add.w	r3, lr, #448	; 0x1c0
    4176:	f04f 0c01 	mov.w	ip, #1
    417a:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    417e:	784b      	ldrb	r3, [r1, #1]
    4180:	2bff      	cmp	r3, #255	; 0xff
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4182:	bf1f      	itttt	ne
    4184:	fa0c fc03 	lslne.w	ip, ip, r3
    p_reg->OUTCLR = clr_mask;
    4188:	f8c6 c50c 	strne.w	ip, [r6, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    418c:	f503 7ce0 	addne.w	ip, r3, #448	; 0x1c0
    4190:	f04f 0803 	movne.w	r8, #3
    4194:	bf18      	it	ne
    4196:	f846 802c 	strne.w	r8, [r6, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    419a:	788e      	ldrb	r6, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    419c:	bf08      	it	eq
    419e:	f04f 33ff 	moveq.w	r3, #4294967295
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    41a2:	2eff      	cmp	r6, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    41a4:	bf1f      	itttt	ne
    41a6:	f891 c00e 	ldrbne.w	ip, [r1, #14]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41aa:	f506 79e0 	addne.w	r9, r6, #448	; 0x1c0
    41ae:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    41b2:	ea4f 0c8c 	movne.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41b6:	bf18      	it	ne
    41b8:	f848 c029 	strne.w	ip, [r8, r9, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    41bc:	f891 c003 	ldrb.w	ip, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    41c0:	bf08      	it	eq
    41c2:	f04f 36ff 	moveq.w	r6, #4294967295
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    41c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    41ca:	d00d      	beq.n	41e8 <nrfx_spi_init+0xb0>
    p_reg->OUTSET = set_mask;
    41cc:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    41d0:	f04f 0801 	mov.w	r8, #1
    41d4:	fa08 f80c 	lsl.w	r8, r8, ip
    p_reg->OUTSET = set_mask;
    41d8:	f8c9 8508 	str.w	r8, [r9, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41dc:	f50c 78e0 	add.w	r8, ip, #448	; 0x1c0
    41e0:	f04f 0a03 	mov.w	sl, #3
    41e4:	f849 a028 	str.w	sl, [r9, r8, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    41e8:	f04f 0828 	mov.w	r8, #40	; 0x28
    41ec:	fb08 5804 	mla	r8, r8, r4, r5
    41f0:	f888 c01e 	strb.w	ip, [r8, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    41f4:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
    41f6:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    41fa:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = (uint32_t)frequency;
    41fe:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELMISO = miso_pin;
    4200:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    4204:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    4208:	7b4b      	ldrb	r3, [r1, #13]
    420a:	3b00      	subs	r3, #0
    420c:	bf18      	it	ne
    420e:	2301      	movne	r3, #1
    switch (spi_mode)
    4210:	2f02      	cmp	r7, #2
    4212:	d01e      	beq.n	4252 <nrfx_spi_init+0x11a>
    4214:	2f03      	cmp	r7, #3
    4216:	d01f      	beq.n	4258 <nrfx_spi_init+0x120>
    4218:	2f01      	cmp	r7, #1
    421a:	d101      	bne.n	4220 <nrfx_spi_init+0xe8>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    421c:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    4220:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    4224:	2328      	movs	r3, #40	; 0x28
    4226:	fb03 5304 	mla	r3, r3, r4, r5
    422a:	7949      	ldrb	r1, [r1, #5]
    422c:	77d9      	strb	r1, [r3, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    422e:	2301      	movs	r3, #1
    4230:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    4234:	b11a      	cbz	r2, 423e <nrfx_spi_init+0x106>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    4236:	f340 3007 	sbfx	r0, r0, #12, #8
    423a:	f7fd fee3 	bl	2004 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    423e:	2328      	movs	r3, #40	; 0x28
    4240:	fb03 5404 	mla	r4, r3, r4, r5
    4244:	2300      	movs	r3, #0
    4246:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4248:	4807      	ldr	r0, [pc, #28]	; (4268 <nrfx_spi_init+0x130>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    424a:	2301      	movs	r3, #1
    424c:	7723      	strb	r3, [r4, #28]
}
    424e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4252:	f043 0304 	orr.w	r3, r3, #4
        break;
    4256:	e7e3      	b.n	4220 <nrfx_spi_init+0xe8>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4258:	f043 0306 	orr.w	r3, r3, #6
        break;
    425c:	e7e0      	b.n	4220 <nrfx_spi_init+0xe8>
        return err_code;
    425e:	4803      	ldr	r0, [pc, #12]	; (426c <nrfx_spi_init+0x134>)
    4260:	e7f5      	b.n	424e <nrfx_spi_init+0x116>
    4262:	bf00      	nop
    4264:	20000368 	.word	0x20000368
    4268:	0bad0000 	.word	0x0bad0000
    426c:	0bad0005 	.word	0x0bad0005

00004270 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4274:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    4276:	4e41      	ldr	r6, [pc, #260]	; (437c <nrfx_spi_xfer+0x10c>)
    4278:	2328      	movs	r3, #40	; 0x28
    427a:	436b      	muls	r3, r5
{
    427c:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
    427e:	18f2      	adds	r2, r6, r3
{
    4280:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    4282:	7f51      	ldrb	r1, [r2, #29]
{
    4284:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
    4286:	2900      	cmp	r1, #0
    4288:	d175      	bne.n	4376 <nrfx_spi_xfer+0x106>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    428a:	f856 c003 	ldr.w	ip, [r6, r3]
    428e:	f1bc 0f00 	cmp.w	ip, #0
    4292:	d001      	beq.n	4298 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    4294:	2301      	movs	r3, #1
    4296:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    4298:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    429c:	2428      	movs	r4, #40	; 0x28
    429e:	fb04 6405 	mla	r4, r4, r5, r6
    42a2:	f104 090c 	add.w	r9, r4, #12
    42a6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    42aa:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->abort = false;
    42ac:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    42ae:	2aff      	cmp	r2, #255	; 0xff
    p_cb->abort = false;
    42b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    42b4:	bf1f      	itttt	ne
    42b6:	2301      	movne	r3, #1
    42b8:	4093      	lslne	r3, r2
    p_reg->OUTCLR = clr_mask;
    42ba:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    42be:	f8c2 350c 	strne.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
    42c2:	2328      	movs	r3, #40	; 0x28
    42c4:	f1be 0f00 	cmp.w	lr, #0
    42c8:	d007      	beq.n	42da <nrfx_spi_xfer+0x6a>
    {
        p_cb->transfer_in_progress = false;
    42ca:	fb03 6505 	mla	r5, r3, r5, r6
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    42ce:	482c      	ldr	r0, [pc, #176]	; (4380 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    42d0:	2300      	movs	r3, #0
    42d2:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    42d4:	b003      	add	sp, #12
    42d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    42da:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->INTENCLR = mask;
    42de:	2204      	movs	r2, #4
    42e0:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    p_cb->bytes_transferred = 0;
    42e4:	fb03 6305 	mla	r3, r3, r5, r6
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42e8:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    42ec:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    42f0:	f8c3 e020 	str.w	lr, [r3, #32]
    42f4:	9200      	str	r2, [sp, #0]
    (void)dummy;
    42f6:	9a00      	ldr	r2, [sp, #0]
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    42f8:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
    42fa:	b18a      	cbz	r2, 4320 <nrfx_spi_xfer+0xb0>
    42fc:	683b      	ldr	r3, [r7, #0]
    42fe:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    4300:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    4304:	2a01      	cmp	r2, #1
    4306:	d90d      	bls.n	4324 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    4308:	683b      	ldr	r3, [r7, #0]
    430a:	785b      	ldrb	r3, [r3, #1]
    430c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    4310:	f1bc 0f00 	cmp.w	ip, #0
    4314:	d00e      	beq.n	4334 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
    4316:	2304      	movs	r3, #4
    4318:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    431c:	4819      	ldr	r0, [pc, #100]	; (4384 <nrfx_spi_xfer+0x114>)
    431e:	e7d9      	b.n	42d4 <nrfx_spi_xfer+0x64>
    nrf_spi_txd_set(p_spi,
    4320:	7fdb      	ldrb	r3, [r3, #31]
    4322:	e7ed      	b.n	4300 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    4324:	68fb      	ldr	r3, [r7, #12]
    4326:	2b01      	cmp	r3, #1
    4328:	d9f2      	bls.n	4310 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    432a:	2328      	movs	r3, #40	; 0x28
    432c:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->TXD = data;
    4330:	7fdb      	ldrb	r3, [r3, #31]
    4332:	e7eb      	b.n	430c <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4334:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    4338:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    433c:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    433e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    4342:	2b00      	cmp	r3, #0
    4344:	d0fb      	beq.n	433e <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4346:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    434a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    434e:	9301      	str	r3, [sp, #4]
        } while (transfer_byte(p_spi, p_cb));
    4350:	4620      	mov	r0, r4
    (void)dummy;
    4352:	9b01      	ldr	r3, [sp, #4]
    4354:	f002 f8b7 	bl	64c6 <transfer_byte>
    4358:	2800      	cmp	r0, #0
    435a:	d1f0      	bne.n	433e <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    435c:	2328      	movs	r3, #40	; 0x28
    435e:	fb03 6505 	mla	r5, r3, r5, r6
    4362:	7faa      	ldrb	r2, [r5, #30]
    4364:	2aff      	cmp	r2, #255	; 0xff
    4366:	d0d9      	beq.n	431c <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4368:	2301      	movs	r3, #1
    436a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    436c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4370:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    4374:	e7d2      	b.n	431c <nrfx_spi_xfer+0xac>
        return err_code;
    4376:	4804      	ldr	r0, [pc, #16]	; (4388 <nrfx_spi_xfer+0x118>)
    4378:	e7ac      	b.n	42d4 <nrfx_spi_xfer+0x64>
    437a:	bf00      	nop
    437c:	20000368 	.word	0x20000368
    4380:	0bad0003 	.word	0x0bad0003
    4384:	0bad0000 	.word	0x0bad0000
    4388:	0bad000b 	.word	0x0bad000b

0000438c <nrfx_spi_2_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
    438c:	4901      	ldr	r1, [pc, #4]	; (4394 <nrfx_spi_2_irq_handler+0x8>)
    438e:	4802      	ldr	r0, [pc, #8]	; (4398 <nrfx_spi_2_irq_handler+0xc>)
    4390:	f002 b8cc 	b.w	652c <irq_handler>
    4394:	20000390 	.word	0x20000390
    4398:	40023000 	.word	0x40023000

0000439c <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    439c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    439e:	4b34      	ldr	r3, [pc, #208]	; (4470 <twi_rx_start_transfer+0xd4>)
    43a0:	9301      	str	r3, [sp, #4]
{
    43a2:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    43a4:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    43a8:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    43aa:	f002 f8e1 	bl	6570 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    43ae:	f44f 7192 	mov.w	r1, #292	; 0x124
    43b2:	f002 f8dd 	bl	6570 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    43b6:	f44f 718e 	mov.w	r1, #284	; 0x11c
    43ba:	f002 f8d9 	bl	6570 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    43be:	f44f 7184 	mov.w	r1, #264	; 0x108
    43c2:	f002 f8d5 	bl	6570 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
    43c6:	2300      	movs	r3, #0
    43c8:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    43ca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    43ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43d0:	2b01      	cmp	r3, #1
    43d2:	d117      	bne.n	4404 <twi_rx_start_transfer+0x68>
    43d4:	6a2b      	ldr	r3, [r5, #32]
    43d6:	065b      	lsls	r3, r3, #25
    43d8:	d414      	bmi.n	4404 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    43da:	2302      	movs	r3, #2
    43dc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43e0:	2301      	movs	r3, #1
    43e2:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    43e4:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    43e8:	2a02      	cmp	r2, #2
    43ea:	bf18      	it	ne
    43ec:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    43ee:	682b      	ldr	r3, [r5, #0]
    43f0:	b193      	cbz	r3, 4418 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    43f2:	f240 2386 	movw	r3, #646	; 0x286
    43f6:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    43f8:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    43fa:	481e      	ldr	r0, [pc, #120]	; (4474 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    43fc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    4400:	b003      	add	sp, #12
    4402:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    4404:	2301      	movs	r3, #1
    4406:	e7e9      	b.n	43dc <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    4408:	4629      	mov	r1, r5
    440a:	4620      	mov	r0, r4
    440c:	f002 f8d5 	bl	65ba <twi_transfer>
        while ((hw_timeout > 0) &&
    4410:	b128      	cbz	r0, 441e <twi_rx_start_transfer+0x82>
               hw_timeout--;
    4412:	9b01      	ldr	r3, [sp, #4]
    4414:	3b01      	subs	r3, #1
    4416:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4418:	9b01      	ldr	r3, [sp, #4]
    441a:	2b00      	cmp	r3, #0
    441c:	dcf4      	bgt.n	4408 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    441e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    4422:	b95b      	cbnz	r3, 443c <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4424:	4813      	ldr	r0, [pc, #76]	; (4474 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    4426:	9b01      	ldr	r3, [sp, #4]
    4428:	2b00      	cmp	r3, #0
    442a:	dce9      	bgt.n	4400 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    442c:	2300      	movs	r3, #0
    442e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4432:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4434:	4810      	ldr	r0, [pc, #64]	; (4478 <twi_rx_start_transfer+0xdc>)
    4436:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    443a:	e7e1      	b.n	4400 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    443c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4440:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4444:	b18b      	cbz	r3, 446a <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4446:	4a0d      	ldr	r2, [pc, #52]	; (447c <twi_rx_start_transfer+0xe0>)
    4448:	480b      	ldr	r0, [pc, #44]	; (4478 <twi_rx_start_transfer+0xdc>)
    444a:	f013 0f01 	tst.w	r3, #1
    444e:	bf18      	it	ne
    4450:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4452:	f013 0f02 	tst.w	r3, #2
    4456:	f102 0201 	add.w	r2, r2, #1
    445a:	bf18      	it	ne
    445c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    445e:	f013 0f04 	tst.w	r3, #4
    4462:	4b07      	ldr	r3, [pc, #28]	; (4480 <twi_rx_start_transfer+0xe4>)
    4464:	bf18      	it	ne
    4466:	4618      	movne	r0, r3
    4468:	e7dd      	b.n	4426 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    446a:	4803      	ldr	r0, [pc, #12]	; (4478 <twi_rx_start_transfer+0xdc>)
    446c:	e7db      	b.n	4426 <twi_rx_start_transfer+0x8a>
    446e:	bf00      	nop
    4470:	000186a0 	.word	0x000186a0
    4474:	0bad0000 	.word	0x0bad0000
    4478:	0bad0001 	.word	0x0bad0001
    447c:	0bae0000 	.word	0x0bae0000
    4480:	0bae0002 	.word	0x0bae0002

00004484 <twi_tx_start_transfer>:
{
    4484:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    4486:	4b31      	ldr	r3, [pc, #196]	; (454c <twi_tx_start_transfer+0xc8>)
    4488:	9301      	str	r3, [sp, #4]
{
    448a:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    448c:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    4490:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    4492:	f002 f86d 	bl	6570 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    4496:	f44f 7192 	mov.w	r1, #292	; 0x124
    449a:	f002 f869 	bl	6570 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    449e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    44a2:	f002 f865 	bl	6570 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    44a6:	f44f 7184 	mov.w	r1, #264	; 0x108
    44aa:	f002 f861 	bl	6570 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
    44ae:	2300      	movs	r3, #0
    44b0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    44b4:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    44b6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44ba:	2301      	movs	r3, #1
    44bc:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    44be:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    44c2:	429a      	cmp	r2, r3
    44c4:	bf18      	it	ne
    44c6:	6083      	strne	r3, [r0, #8]
    (void)twi_send_byte(p_twi, p_cb);
    44c8:	4629      	mov	r1, r5
    44ca:	f002 f859 	bl	6580 <twi_send_byte>
    if (p_cb->handler)
    44ce:	682b      	ldr	r3, [r5, #0]
    44d0:	b183      	cbz	r3, 44f4 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    44d2:	f240 2386 	movw	r3, #646	; 0x286
    44d6:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    44d8:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    44da:	481d      	ldr	r0, [pc, #116]	; (4550 <twi_tx_start_transfer+0xcc>)
    p_reg->INTENSET = mask;
    44dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    44e0:	b003      	add	sp, #12
    44e2:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    44e4:	4629      	mov	r1, r5
    44e6:	4620      	mov	r0, r4
    44e8:	f002 f867 	bl	65ba <twi_transfer>
        while ((hw_timeout > 0) &&
    44ec:	b128      	cbz	r0, 44fa <twi_tx_start_transfer+0x76>
            hw_timeout--;
    44ee:	9b01      	ldr	r3, [sp, #4]
    44f0:	3b01      	subs	r3, #1
    44f2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    44f4:	9b01      	ldr	r3, [sp, #4]
    44f6:	2b00      	cmp	r3, #0
    44f8:	dcf4      	bgt.n	44e4 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
    44fa:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    44fe:	b95b      	cbnz	r3, 4518 <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4500:	4813      	ldr	r0, [pc, #76]	; (4550 <twi_tx_start_transfer+0xcc>)
        if (hw_timeout <= 0)
    4502:	9b01      	ldr	r3, [sp, #4]
    4504:	2b00      	cmp	r3, #0
    4506:	dceb      	bgt.n	44e0 <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4508:	2300      	movs	r3, #0
    450a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    450e:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4510:	4810      	ldr	r0, [pc, #64]	; (4554 <twi_tx_start_transfer+0xd0>)
    4512:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4516:	e7e3      	b.n	44e0 <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
    4518:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    451c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4520:	b18b      	cbz	r3, 4546 <twi_tx_start_transfer+0xc2>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4522:	4a0d      	ldr	r2, [pc, #52]	; (4558 <twi_tx_start_transfer+0xd4>)
    4524:	480b      	ldr	r0, [pc, #44]	; (4554 <twi_tx_start_transfer+0xd0>)
    4526:	f013 0f01 	tst.w	r3, #1
    452a:	bf18      	it	ne
    452c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    452e:	f013 0f02 	tst.w	r3, #2
    4532:	f102 0201 	add.w	r2, r2, #1
    4536:	bf18      	it	ne
    4538:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    453a:	f013 0f04 	tst.w	r3, #4
    453e:	4b07      	ldr	r3, [pc, #28]	; (455c <twi_tx_start_transfer+0xd8>)
    4540:	bf18      	it	ne
    4542:	4618      	movne	r0, r3
    4544:	e7dd      	b.n	4502 <twi_tx_start_transfer+0x7e>
                ret_code = NRFX_ERROR_INTERNAL;
    4546:	4803      	ldr	r0, [pc, #12]	; (4554 <twi_tx_start_transfer+0xd0>)
    4548:	e7db      	b.n	4502 <twi_tx_start_transfer+0x7e>
    454a:	bf00      	nop
    454c:	000186a0 	.word	0x000186a0
    4550:	0bad0000 	.word	0x0bad0000
    4554:	0bad0001 	.word	0x0bad0001
    4558:	0bae0000 	.word	0x0bae0000
    455c:	0bae0002 	.word	0x0bae0002

00004560 <nrfx_twi_init>:
{
    4560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4562:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4564:	4d1d      	ldr	r5, [pc, #116]	; (45dc <nrfx_twi_init+0x7c>)
    4566:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    456a:	fb0c fc07 	mul.w	ip, ip, r7
    456e:	eb05 040c 	add.w	r4, r5, ip
    4572:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    4576:	bb7e      	cbnz	r6, 45d8 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
    4578:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    457a:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    457c:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    457e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    4582:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    4586:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    458a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    458e:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
    4590:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4594:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    4598:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    459c:	f240 6c0c 	movw	ip, #1548	; 0x60c
    45a0:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    45a4:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    45a6:	6800      	ldr	r0, [r0, #0]
    45a8:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
    45ac:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
    45b0:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    45b4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    45b8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    45ba:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    45be:	b11a      	cbz	r2, 45c8 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    45c0:	f340 3007 	sbfx	r0, r0, #12, #8
    45c4:	f7fd fd1e 	bl	2004 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    45c8:	233c      	movs	r3, #60	; 0x3c
    45ca:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    45ce:	4804      	ldr	r0, [pc, #16]	; (45e0 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    45d0:	2301      	movs	r3, #1
    45d2:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    45d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    45d8:	4802      	ldr	r0, [pc, #8]	; (45e4 <nrfx_twi_init+0x84>)
    45da:	e7fc      	b.n	45d6 <nrfx_twi_init+0x76>
    45dc:	200003b8 	.word	0x200003b8
    45e0:	0bad0000 	.word	0x0bad0000
    45e4:	0bad0005 	.word	0x0bad0005

000045e8 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    45e8:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    45ea:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    45ec:	2105      	movs	r1, #5
    45ee:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    45f2:	4a04      	ldr	r2, [pc, #16]	; (4604 <nrfx_twi_enable+0x1c>)
    45f4:	213c      	movs	r1, #60	; 0x3c
    45f6:	fb01 2303 	mla	r3, r1, r3, r2
    45fa:	2202      	movs	r2, #2
    45fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    4600:	4770      	bx	lr
    4602:	bf00      	nop
    4604:	200003b8 	.word	0x200003b8

00004608 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4608:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    460a:	490a      	ldr	r1, [pc, #40]	; (4634 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    460c:	7902      	ldrb	r2, [r0, #4]
    460e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4612:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    4616:	f021 0103 	bic.w	r1, r1, #3
    461a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    461e:	2100      	movs	r1, #0
    4620:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4624:	4b04      	ldr	r3, [pc, #16]	; (4638 <nrfx_twi_disable+0x30>)
    4626:	213c      	movs	r1, #60	; 0x3c
    4628:	fb01 3302 	mla	r3, r1, r2, r3
    462c:	2201      	movs	r2, #1
    462e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    4632:	4770      	bx	lr
    4634:	00044286 	.word	0x00044286
    4638:	200003b8 	.word	0x200003b8

0000463c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4640:	4e32      	ldr	r6, [pc, #200]	; (470c <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4642:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    4646:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    464a:	233c      	movs	r3, #60	; 0x3c
    464c:	fb03 6308 	mla	r3, r3, r8, r6
{
    4650:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    4656:	2b01      	cmp	r3, #1
{
    4658:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    465a:	d104      	bne.n	4666 <nrfx_twi_xfer+0x2a>
    465c:	780b      	ldrb	r3, [r1, #0]
    465e:	2b01      	cmp	r3, #1
    4660:	d106      	bne.n	4670 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    4662:	482b      	ldr	r0, [pc, #172]	; (4710 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4664:	e011      	b.n	468a <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    4666:	2b02      	cmp	r3, #2
    4668:	d102      	bne.n	4670 <nrfx_twi_xfer+0x34>
    466a:	780b      	ldrb	r3, [r1, #0]
    466c:	2b01      	cmp	r3, #1
    466e:	d1f8      	bne.n	4662 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    4670:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
    4672:	4b28      	ldr	r3, [pc, #160]	; (4714 <nrfx_twi_xfer+0xd8>)
    4674:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    4678:	fb05 6508 	mla	r5, r5, r8, r6
    467c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4680:	b12b      	cbz	r3, 468e <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4682:	68ab      	ldr	r3, [r5, #8]
        return err_code;
    4684:	4824      	ldr	r0, [pc, #144]	; (4718 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    4686:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    468e:	f087 0304 	eor.w	r3, r7, #4
    4692:	f3c3 0380 	ubfx	r3, r3, #2, #1
    4696:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
    469a:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    469c:	46a6      	mov	lr, r4
    469e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    46a2:	f105 0c0c 	add.w	ip, r5, #12
    46a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    46aa:	f8de 3000 	ldr.w	r3, [lr]
    46ae:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
    46b2:	6863      	ldr	r3, [r4, #4]
    46b4:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    46b6:	68e3      	ldr	r3, [r4, #12]
    46b8:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
    46ba:	7863      	ldrb	r3, [r4, #1]
    46bc:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    46c0:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    46c2:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    46c6:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    46c8:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    46cc:	d019      	beq.n	4702 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    46ce:	b9b3      	cbnz	r3, 46fe <nrfx_twi_xfer+0xc2>
    46d0:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    46d4:	233c      	movs	r3, #60	; 0x3c
    46d6:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    46da:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    46dc:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    46e0:	4648      	mov	r0, r9
    46e2:	f7ff fecf 	bl	4484 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    46e6:	233c      	movs	r3, #60	; 0x3c
    46e8:	fb03 f808 	mul.w	r8, r3, r8
    46ec:	eb06 0208 	add.w	r2, r6, r8
    46f0:	f856 3008 	ldr.w	r3, [r6, r8]
    46f4:	2b00      	cmp	r3, #0
    46f6:	d1c8      	bne.n	468a <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    46f8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    46fc:	e7c5      	b.n	468a <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    46fe:	2701      	movs	r7, #1
    4700:	e7e8      	b.n	46d4 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    4702:	4651      	mov	r1, sl
    4704:	4648      	mov	r0, r9
    4706:	f7ff fe49 	bl	439c <twi_rx_start_transfer>
    470a:	e7ec      	b.n	46e6 <nrfx_twi_xfer+0xaa>
    470c:	200003b8 	.word	0x200003b8
    4710:	0bad0005 	.word	0x0bad0005
    4714:	00044286 	.word	0x00044286
    4718:	0bad000b 	.word	0x0bad000b

0000471c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    471c:	b508      	push	{r3, lr}
    if (twi_transfer(p_twi, p_cb))
    471e:	4906      	ldr	r1, [pc, #24]	; (4738 <nrfx_twi_0_irq_handler+0x1c>)
    4720:	4806      	ldr	r0, [pc, #24]	; (473c <nrfx_twi_0_irq_handler+0x20>)
    4722:	f001 ff4a 	bl	65ba <twi_transfer>
    4726:	b928      	cbnz	r0, 4734 <nrfx_twi_0_irq_handler+0x18>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    4728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    472c:	4902      	ldr	r1, [pc, #8]	; (4738 <nrfx_twi_0_irq_handler+0x1c>)
    472e:	4803      	ldr	r0, [pc, #12]	; (473c <nrfx_twi_0_irq_handler+0x20>)
    4730:	f001 bfcd 	b.w	66ce <twi_irq_handler.part.0>
    4734:	bd08      	pop	{r3, pc}
    4736:	bf00      	nop
    4738:	200003b8 	.word	0x200003b8
    473c:	40003000 	.word	0x40003000

00004740 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    4740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4742:	4b09      	ldr	r3, [pc, #36]	; (4768 <z_sys_init_run_level+0x28>)
    4744:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4748:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    474a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    474c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4750:	42a6      	cmp	r6, r4
    4752:	d800      	bhi.n	4756 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    4754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    4756:	e9d4 3500 	ldrd	r3, r5, [r4]
    475a:	4628      	mov	r0, r5
    475c:	4798      	blx	r3
		if (retval != 0) {
    475e:	b108      	cbz	r0, 4764 <z_sys_init_run_level+0x24>
			if (dev) {
    4760:	b105      	cbz	r5, 4764 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    4762:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4764:	3408      	adds	r4, #8
    4766:	e7f3      	b.n	4750 <z_sys_init_run_level+0x10>
    4768:	00006d74 	.word	0x00006d74

0000476c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    476c:	4b0f      	ldr	r3, [pc, #60]	; (47ac <z_impl_device_get_binding+0x40>)
{
    476e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    4770:	4c0f      	ldr	r4, [pc, #60]	; (47b0 <z_impl_device_get_binding+0x44>)
{
    4772:	4605      	mov	r5, r0
    4774:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    4776:	429c      	cmp	r4, r3
    4778:	d104      	bne.n	4784 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    477a:	4c0d      	ldr	r4, [pc, #52]	; (47b0 <z_impl_device_get_binding+0x44>)
    477c:	42b4      	cmp	r4, r6
    477e:	d108      	bne.n	4792 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    4780:	2400      	movs	r4, #0
    4782:	e010      	b.n	47a6 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    4784:	68a2      	ldr	r2, [r4, #8]
    4786:	b112      	cbz	r2, 478e <z_impl_device_get_binding+0x22>
    4788:	6822      	ldr	r2, [r4, #0]
    478a:	42aa      	cmp	r2, r5
    478c:	d00b      	beq.n	47a6 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    478e:	3410      	adds	r4, #16
    4790:	e7f1      	b.n	4776 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    4792:	68a3      	ldr	r3, [r4, #8]
    4794:	b90b      	cbnz	r3, 479a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4796:	3410      	adds	r4, #16
    4798:	e7f0      	b.n	477c <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    479a:	6821      	ldr	r1, [r4, #0]
    479c:	4628      	mov	r0, r5
    479e:	f001 fc32 	bl	6006 <strcmp>
		if ((dev->driver_api != NULL) &&
    47a2:	2800      	cmp	r0, #0
    47a4:	d1f7      	bne.n	4796 <z_impl_device_get_binding+0x2a>
}
    47a6:	4620      	mov	r0, r4
    47a8:	bd70      	pop	{r4, r5, r6, pc}
    47aa:	bf00      	nop
    47ac:	200001d0 	.word	0x200001d0
    47b0:	20000160 	.word	0x20000160

000047b4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    47b4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    47b6:	4d0b      	ldr	r5, [pc, #44]	; (47e4 <idle+0x30>)
	__asm__ volatile(
    47b8:	f04f 0220 	mov.w	r2, #32
    47bc:	f3ef 8311 	mrs	r3, BASEPRI
    47c0:	f382 8811 	msr	BASEPRI, r2
    47c4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    47c8:	f002 f901 	bl	69ce <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    47cc:	2101      	movs	r1, #1
    47ce:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    47d0:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    47d2:	bfd8      	it	le
    47d4:	4608      	movle	r0, r1
    47d6:	f002 f90a 	bl	69ee <z_set_timeout_expiry>
	_kernel.idle = ticks;
    47da:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    47dc:	f7fd fccc 	bl	2178 <arch_cpu_idle>
}
    47e0:	e7ea      	b.n	47b8 <idle+0x4>
    47e2:	bf00      	nop
    47e4:	20000518 	.word	0x20000518

000047e8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    47e8:	4802      	ldr	r0, [pc, #8]	; (47f4 <z_bss_zero+0xc>)
    47ea:	4a03      	ldr	r2, [pc, #12]	; (47f8 <z_bss_zero+0x10>)
    47ec:	2100      	movs	r1, #0
    47ee:	1a12      	subs	r2, r2, r0
    47f0:	f001 bc40 	b.w	6074 <memset>
    47f4:	200001f8 	.word	0x200001f8
    47f8:	2000097c 	.word	0x2000097c

000047fc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    47fc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    47fe:	4806      	ldr	r0, [pc, #24]	; (4818 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4800:	4a06      	ldr	r2, [pc, #24]	; (481c <z_data_copy+0x20>)
    4802:	4907      	ldr	r1, [pc, #28]	; (4820 <z_data_copy+0x24>)
    4804:	1a12      	subs	r2, r2, r0
    4806:	f001 fc0a 	bl	601e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    480a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    480e:	4a05      	ldr	r2, [pc, #20]	; (4824 <z_data_copy+0x28>)
    4810:	4905      	ldr	r1, [pc, #20]	; (4828 <z_data_copy+0x2c>)
    4812:	4806      	ldr	r0, [pc, #24]	; (482c <z_data_copy+0x30>)
    4814:	f001 bc03 	b.w	601e <memcpy>
    4818:	20000000 	.word	0x20000000
    481c:	200001f8 	.word	0x200001f8
    4820:	00008c70 	.word	0x00008c70
    4824:	00000000 	.word	0x00000000
    4828:	00008c70 	.word	0x00008c70
    482c:	20000000 	.word	0x20000000

00004830 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4830:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    4832:	4b0c      	ldr	r3, [pc, #48]	; (4864 <bg_thread_main+0x34>)
    4834:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4836:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4838:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    483a:	f7ff ff81 	bl	4740 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    483e:	4a0a      	ldr	r2, [pc, #40]	; (4868 <bg_thread_main+0x38>)
    4840:	490a      	ldr	r1, [pc, #40]	; (486c <bg_thread_main+0x3c>)
    4842:	480b      	ldr	r0, [pc, #44]	; (4870 <bg_thread_main+0x40>)
    4844:	f001 fa97 	bl	5d76 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4848:	2003      	movs	r0, #3
    484a:	f7ff ff79 	bl	4740 <z_sys_init_run_level>

	z_init_static_threads();
    484e:	f000 fc19 	bl	5084 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4852:	f7fc fa8d 	bl	d70 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4856:	4a07      	ldr	r2, [pc, #28]	; (4874 <bg_thread_main+0x44>)
    4858:	7b13      	ldrb	r3, [r2, #12]
    485a:	f023 0301 	bic.w	r3, r3, #1
    485e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4860:	bd08      	pop	{r3, pc}
    4862:	bf00      	nop
    4864:	20000979 	.word	0x20000979
    4868:	00006db5 	.word	0x00006db5
    486c:	00008c31 	.word	0x00008c31
    4870:	00008c41 	.word	0x00008c41
    4874:	200004a4 	.word	0x200004a4

00004878 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4878:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    487c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4974 <z_cstart+0xfc>
    4880:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4882:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4886:	4d34      	ldr	r5, [pc, #208]	; (4958 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    4888:	4e34      	ldr	r6, [pc, #208]	; (495c <z_cstart+0xe4>)
    488a:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
    488c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4978 <z_cstart+0x100>
    4890:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 497c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
    4894:	4f32      	ldr	r7, [pc, #200]	; (4960 <z_cstart+0xe8>)
    4896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    489a:	2400      	movs	r4, #0
    489c:	616b      	str	r3, [r5, #20]
    489e:	23e0      	movs	r3, #224	; 0xe0
    48a0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    48a4:	77ec      	strb	r4, [r5, #31]
    48a6:	762c      	strb	r4, [r5, #24]
    48a8:	766c      	strb	r4, [r5, #25]
    48aa:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    48ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    48ae:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    48b2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    48b4:	f7fd fd82 	bl	23bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    48b8:	f7fd fc58 	bl	216c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    48bc:	f04f 33ff 	mov.w	r3, #4294967295
    48c0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    48c2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    48c4:	4d27      	ldr	r5, [pc, #156]	; (4964 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    48c6:	f240 1301 	movw	r3, #257	; 0x101
    48ca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    48ce:	ab07      	add	r3, sp, #28
    48d0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    48d2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    48d4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    48d8:	f7ff ff32 	bl	4740 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    48dc:	2001      	movs	r0, #1
    48de:	f7ff ff2f 	bl	4740 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    48e2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    48e6:	f000 fad7 	bl	4e98 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    48ea:	4b1f      	ldr	r3, [pc, #124]	; (4968 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    48ec:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    48ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    48f2:	4641      	mov	r1, r8
    48f4:	9305      	str	r3, [sp, #20]
    48f6:	4630      	mov	r0, r6
    48f8:	4653      	mov	r3, sl
    48fa:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    48fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4902:	9400      	str	r4, [sp, #0]
    4904:	f000 fb98 	bl	5038 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4908:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    490a:	4630      	mov	r0, r6
    490c:	f023 0304 	bic.w	r3, r3, #4
    4910:	7373      	strb	r3, [r6, #13]
    4912:	f001 ff9b 	bl	684c <z_ready_thread>
	z_setup_new_thread(thread, stack,
    4916:	230f      	movs	r3, #15
    4918:	e9cd 4302 	strd	r4, r3, [sp, #8]
    491c:	4913      	ldr	r1, [pc, #76]	; (496c <z_cstart+0xf4>)
    491e:	4b14      	ldr	r3, [pc, #80]	; (4970 <z_cstart+0xf8>)
    4920:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4924:	4638      	mov	r0, r7
    4926:	e9cd b404 	strd	fp, r4, [sp, #16]
    492a:	e9cd 4400 	strd	r4, r4, [sp]
    492e:	f000 fb83 	bl	5038 <z_setup_new_thread>
    4932:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4934:	60ef      	str	r7, [r5, #12]
    4936:	f023 0304 	bic.w	r3, r3, #4
    493a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    493c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    4940:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    4944:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    4946:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    494a:	4653      	mov	r3, sl
    494c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4950:	4641      	mov	r1, r8
    4952:	4630      	mov	r0, r6
    4954:	f7fd fb98 	bl	2088 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4958:	e000ed00 	.word	0xe000ed00
    495c:	200004a4 	.word	0x200004a4
    4960:	20000430 	.word	0x20000430
    4964:	20000518 	.word	0x20000518
    4968:	00008c68 	.word	0x00008c68
    496c:	20000d80 	.word	0x20000d80
    4970:	000047b5 	.word	0x000047b5
    4974:	200016c0 	.word	0x200016c0
    4978:	00004831 	.word	0x00004831
    497c:	20000980 	.word	0x20000980

00004980 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4980:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4982:	4c08      	ldr	r4, [pc, #32]	; (49a4 <z_reset_time_slice+0x24>)
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	b15b      	cbz	r3, 49a0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    4988:	f7fd fad8 	bl	1f3c <z_clock_elapsed>
    498c:	4603      	mov	r3, r0
    498e:	6820      	ldr	r0, [r4, #0]
    4990:	4a05      	ldr	r2, [pc, #20]	; (49a8 <z_reset_time_slice+0x28>)
    4992:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    4998:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    499a:	2100      	movs	r1, #0
    499c:	f002 b827 	b.w	69ee <z_set_timeout_expiry>
}
    49a0:	bd10      	pop	{r4, pc}
    49a2:	bf00      	nop
    49a4:	20000550 	.word	0x20000550
    49a8:	20000518 	.word	0x20000518

000049ac <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    49ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49ae:	4605      	mov	r5, r0
    49b0:	460c      	mov	r4, r1
    49b2:	f04f 0320 	mov.w	r3, #32
    49b6:	f3ef 8611 	mrs	r6, BASEPRI
    49ba:	f383 8811 	msr	BASEPRI, r3
    49be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    49c2:	4b0d      	ldr	r3, [pc, #52]	; (49f8 <k_sched_time_slice_set+0x4c>)
    49c4:	2200      	movs	r2, #0
    49c6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    49ca:	f240 30e7 	movw	r0, #999	; 0x3e7
    49ce:	2100      	movs	r1, #0
    49d0:	611a      	str	r2, [r3, #16]
    49d2:	fbe7 0105 	umlal	r0, r1, r7, r5
    49d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    49da:	2300      	movs	r3, #0
    49dc:	f7fb ffc4 	bl	968 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    49e0:	4b06      	ldr	r3, [pc, #24]	; (49fc <k_sched_time_slice_set+0x50>)
    49e2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    49e4:	4b06      	ldr	r3, [pc, #24]	; (4a00 <k_sched_time_slice_set+0x54>)
    49e6:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    49e8:	f7ff ffca 	bl	4980 <z_reset_time_slice>
	__asm__ volatile(
    49ec:	f386 8811 	msr	BASEPRI, r6
    49f0:	f3bf 8f6f 	isb	sy
	}
}
    49f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49f6:	bf00      	nop
    49f8:	20000518 	.word	0x20000518
    49fc:	20000550 	.word	0x20000550
    4a00:	2000054c 	.word	0x2000054c

00004a04 <k_sched_lock>:
	__asm__ volatile(
    4a04:	f04f 0320 	mov.w	r3, #32
    4a08:	f3ef 8111 	mrs	r1, BASEPRI
    4a0c:	f383 8811 	msr	BASEPRI, r3
    4a10:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    4a14:	4b04      	ldr	r3, [pc, #16]	; (4a28 <k_sched_lock+0x24>)
    4a16:	689a      	ldr	r2, [r3, #8]
    4a18:	7bd3      	ldrb	r3, [r2, #15]
    4a1a:	3b01      	subs	r3, #1
    4a1c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4a1e:	f381 8811 	msr	BASEPRI, r1
    4a22:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    4a26:	4770      	bx	lr
    4a28:	20000518 	.word	0x20000518

00004a2c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4a2c:	4b09      	ldr	r3, [pc, #36]	; (4a54 <z_priq_dumb_remove+0x28>)
    4a2e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4a32:	4282      	cmp	r2, r0
    4a34:	d105      	bne.n	4a42 <z_priq_dumb_remove+0x16>
    4a36:	689b      	ldr	r3, [r3, #8]
    4a38:	428b      	cmp	r3, r1
    4a3a:	d102      	bne.n	4a42 <z_priq_dumb_remove+0x16>
    4a3c:	7b4b      	ldrb	r3, [r1, #13]
    4a3e:	06db      	lsls	r3, r3, #27
    4a40:	d106      	bne.n	4a50 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4a42:	e9d1 3200 	ldrd	r3, r2, [r1]
    4a46:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4a48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4a4a:	2300      	movs	r3, #0
	node->prev = NULL;
    4a4c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4a50:	4770      	bx	lr
    4a52:	bf00      	nop
    4a54:	20000518 	.word	0x20000518

00004a58 <update_cache>:
{
    4a58:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4a5a:	4c10      	ldr	r4, [pc, #64]	; (4a9c <update_cache+0x44>)
{
    4a5c:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4a5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4a62:	f001 fee9 	bl	6838 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4a66:	68a3      	ldr	r3, [r4, #8]
    4a68:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4a6a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4a6c:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    4a6e:	bf44      	itt	mi
    4a70:	f041 0108 	orrmi.w	r1, r1, #8
    4a74:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4a76:	b905      	cbnz	r5, 4a7a <update_cache+0x22>
    4a78:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    4a7a:	b94e      	cbnz	r6, 4a90 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    4a7c:	7b5a      	ldrb	r2, [r3, #13]
    4a7e:	06d2      	lsls	r2, r2, #27
    4a80:	d106      	bne.n	4a90 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4a82:	69aa      	ldr	r2, [r5, #24]
    4a84:	b922      	cbnz	r2, 4a90 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    4a86:	89da      	ldrh	r2, [r3, #14]
    4a88:	2a7f      	cmp	r2, #127	; 0x7f
    4a8a:	d901      	bls.n	4a90 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    4a8c:	6263      	str	r3, [r4, #36]	; 0x24
}
    4a8e:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    4a90:	42ab      	cmp	r3, r5
    4a92:	d001      	beq.n	4a98 <update_cache+0x40>
			z_reset_time_slice();
    4a94:	f7ff ff74 	bl	4980 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4a98:	6265      	str	r5, [r4, #36]	; 0x24
}
    4a9a:	e7f8      	b.n	4a8e <update_cache+0x36>
    4a9c:	20000518 	.word	0x20000518

00004aa0 <k_sched_unlock>:
{
    4aa0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4aa2:	f04f 0320 	mov.w	r3, #32
    4aa6:	f3ef 8411 	mrs	r4, BASEPRI
    4aaa:	f383 8811 	msr	BASEPRI, r3
    4aae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4ab2:	4b08      	ldr	r3, [pc, #32]	; (4ad4 <k_sched_unlock+0x34>)
    4ab4:	689a      	ldr	r2, [r3, #8]
    4ab6:	7bd3      	ldrb	r3, [r2, #15]
    4ab8:	3301      	adds	r3, #1
    4aba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4abc:	2000      	movs	r0, #0
    4abe:	f7ff ffcb 	bl	4a58 <update_cache>
	__asm__ volatile(
    4ac2:	f384 8811 	msr	BASEPRI, r4
    4ac6:	f3bf 8f6f 	isb	sy
}
    4aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4ace:	f001 bea9 	b.w	6824 <z_reschedule_unlocked>
    4ad2:	bf00      	nop
    4ad4:	20000518 	.word	0x20000518

00004ad8 <ready_thread>:
{
    4ad8:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4ada:	7b43      	ldrb	r3, [r0, #13]
    4adc:	06db      	lsls	r3, r3, #27
    4ade:	d12a      	bne.n	4b36 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    4ae0:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    4ae2:	bb43      	cbnz	r3, 4b36 <ready_thread+0x5e>
	return list->head == list;
    4ae4:	4a15      	ldr	r2, [pc, #84]	; (4b3c <ready_thread+0x64>)
    4ae6:	4611      	mov	r1, r2
    4ae8:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4aec:	428c      	cmp	r4, r1
    4aee:	bf18      	it	ne
    4af0:	4623      	movne	r3, r4
    4af2:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4af4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    4af6:	bf38      	it	cc
    4af8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4afa:	b1b3      	cbz	r3, 4b2a <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    4afc:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4b00:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4b04:	42ae      	cmp	r6, r5
    4b06:	db03      	blt.n	4b10 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    4b08:	42a3      	cmp	r3, r4
    4b0a:	d00e      	beq.n	4b2a <ready_thread+0x52>
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	e7f4      	b.n	4afa <ready_thread+0x22>
	node->prev = successor->prev;
    4b10:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4b12:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    4b16:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4b18:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    4b1a:	7b43      	ldrb	r3, [r0, #13]
    4b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b20:	7343      	strb	r3, [r0, #13]
}
    4b22:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4b24:	2000      	movs	r0, #0
    4b26:	f7ff bf97 	b.w	4a58 <update_cache>
	node->prev = list->tail;
    4b2a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    4b2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4b30:	6018      	str	r0, [r3, #0]
	list->tail = node;
    4b32:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    4b34:	e7f1      	b.n	4b1a <ready_thread+0x42>
}
    4b36:	bc70      	pop	{r4, r5, r6}
    4b38:	4770      	bx	lr
    4b3a:	bf00      	nop
    4b3c:	20000518 	.word	0x20000518

00004b40 <z_sched_start>:
{
    4b40:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b42:	f04f 0220 	mov.w	r2, #32
    4b46:	f3ef 8411 	mrs	r4, BASEPRI
    4b4a:	f382 8811 	msr	BASEPRI, r2
    4b4e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    4b52:	7b42      	ldrb	r2, [r0, #13]
    4b54:	0751      	lsls	r1, r2, #29
    4b56:	d404      	bmi.n	4b62 <z_sched_start+0x22>
	__asm__ volatile(
    4b58:	f384 8811 	msr	BASEPRI, r4
    4b5c:	f3bf 8f6f 	isb	sy
}
    4b60:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b62:	f022 0204 	bic.w	r2, r2, #4
    4b66:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4b68:	f7ff ffb6 	bl	4ad8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4b6c:	4621      	mov	r1, r4
    4b6e:	4802      	ldr	r0, [pc, #8]	; (4b78 <z_sched_start+0x38>)
}
    4b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4b74:	f001 be3f 	b.w	67f6 <z_reschedule>
    4b78:	2000097a 	.word	0x2000097a

00004b7c <z_move_thread_to_end_of_prio_q>:
{
    4b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b7e:	4601      	mov	r1, r0
	__asm__ volatile(
    4b80:	f04f 0320 	mov.w	r3, #32
    4b84:	f3ef 8411 	mrs	r4, BASEPRI
    4b88:	f383 8811 	msr	BASEPRI, r3
    4b8c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4b90:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4b94:	2b00      	cmp	r3, #0
    4b96:	da02      	bge.n	4b9e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4b98:	4819      	ldr	r0, [pc, #100]	; (4c00 <z_move_thread_to_end_of_prio_q+0x84>)
    4b9a:	f7ff ff47 	bl	4a2c <z_priq_dumb_remove>
	return list->head == list;
    4b9e:	4a19      	ldr	r2, [pc, #100]	; (4c04 <z_move_thread_to_end_of_prio_q+0x88>)
    4ba0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ba2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    4ba4:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ba8:	4283      	cmp	r3, r0
    4baa:	bf08      	it	eq
    4bac:	2300      	moveq	r3, #0
    4bae:	2b00      	cmp	r3, #0
    4bb0:	bf38      	it	cc
    4bb2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4bb4:	b1eb      	cbz	r3, 4bf2 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    4bb6:	f991 700e 	ldrsb.w	r7, [r1, #14]
    4bba:	f993 600e 	ldrsb.w	r6, [r3, #14]
    4bbe:	42b7      	cmp	r7, r6
    4bc0:	db03      	blt.n	4bca <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4bc2:	429d      	cmp	r5, r3
    4bc4:	d015      	beq.n	4bf2 <z_move_thread_to_end_of_prio_q+0x76>
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	e7f4      	b.n	4bb4 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    4bca:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    4bcc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    4bd0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4bd2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    4bd4:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    4bd6:	6890      	ldr	r0, [r2, #8]
    4bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4bdc:	734b      	strb	r3, [r1, #13]
    4bde:	1a43      	subs	r3, r0, r1
    4be0:	4258      	negs	r0, r3
    4be2:	4158      	adcs	r0, r3
    4be4:	f7ff ff38 	bl	4a58 <update_cache>
	__asm__ volatile(
    4be8:	f384 8811 	msr	BASEPRI, r4
    4bec:	f3bf 8f6f 	isb	sy
}
    4bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    4bf2:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    4bf6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4bf8:	6019      	str	r1, [r3, #0]
	list->tail = node;
    4bfa:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    4bfc:	e7ea      	b.n	4bd4 <z_move_thread_to_end_of_prio_q+0x58>
    4bfe:	bf00      	nop
    4c00:	20000540 	.word	0x20000540
    4c04:	20000518 	.word	0x20000518

00004c08 <z_time_slice>:
{
    4c08:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    4c0a:	4a15      	ldr	r2, [pc, #84]	; (4c60 <z_time_slice+0x58>)
    4c0c:	4b15      	ldr	r3, [pc, #84]	; (4c64 <z_time_slice+0x5c>)
    4c0e:	6814      	ldr	r4, [r2, #0]
{
    4c10:	4601      	mov	r1, r0
	if (pending_current == _current) {
    4c12:	6898      	ldr	r0, [r3, #8]
    4c14:	42a0      	cmp	r0, r4
    4c16:	461c      	mov	r4, r3
    4c18:	d103      	bne.n	4c22 <z_time_slice+0x1a>
}
    4c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    4c1e:	f7ff beaf 	b.w	4980 <z_reset_time_slice>
	pending_current = NULL;
    4c22:	2500      	movs	r5, #0
    4c24:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4c26:	4a10      	ldr	r2, [pc, #64]	; (4c68 <z_time_slice+0x60>)
    4c28:	6812      	ldr	r2, [r2, #0]
    4c2a:	b1b2      	cbz	r2, 4c5a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4c2c:	89c2      	ldrh	r2, [r0, #14]
    4c2e:	2a7f      	cmp	r2, #127	; 0x7f
    4c30:	d813      	bhi.n	4c5a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4c32:	4a0e      	ldr	r2, [pc, #56]	; (4c6c <z_time_slice+0x64>)
    4c34:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4c38:	6812      	ldr	r2, [r2, #0]
    4c3a:	4295      	cmp	r5, r2
    4c3c:	db0d      	blt.n	4c5a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    4c3e:	4a0c      	ldr	r2, [pc, #48]	; (4c70 <z_time_slice+0x68>)
    4c40:	4290      	cmp	r0, r2
    4c42:	d00a      	beq.n	4c5a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4c44:	6982      	ldr	r2, [r0, #24]
    4c46:	b942      	cbnz	r2, 4c5a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    4c48:	691a      	ldr	r2, [r3, #16]
    4c4a:	428a      	cmp	r2, r1
    4c4c:	dc02      	bgt.n	4c54 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    4c4e:	f7ff ff95 	bl	4b7c <z_move_thread_to_end_of_prio_q>
    4c52:	e7e2      	b.n	4c1a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    4c54:	1a52      	subs	r2, r2, r1
    4c56:	611a      	str	r2, [r3, #16]
}
    4c58:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    4c5a:	2300      	movs	r3, #0
    4c5c:	6123      	str	r3, [r4, #16]
    4c5e:	e7fb      	b.n	4c58 <z_time_slice+0x50>
    4c60:	20000548 	.word	0x20000548
    4c64:	20000518 	.word	0x20000518
    4c68:	20000550 	.word	0x20000550
    4c6c:	2000054c 	.word	0x2000054c
    4c70:	20000430 	.word	0x20000430

00004c74 <z_impl_k_thread_suspend>:
{
    4c74:	b570      	push	{r4, r5, r6, lr}
    4c76:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4c78:	3018      	adds	r0, #24
    4c7a:	f001 fe92 	bl	69a2 <z_abort_timeout>
	__asm__ volatile(
    4c7e:	f04f 0320 	mov.w	r3, #32
    4c82:	f3ef 8611 	mrs	r6, BASEPRI
    4c86:	f383 8811 	msr	BASEPRI, r3
    4c8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4c8e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4c92:	2b00      	cmp	r3, #0
    4c94:	da07      	bge.n	4ca6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4c96:	480f      	ldr	r0, [pc, #60]	; (4cd4 <z_impl_k_thread_suspend+0x60>)
    4c98:	4621      	mov	r1, r4
    4c9a:	f7ff fec7 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4c9e:	7b63      	ldrb	r3, [r4, #13]
    4ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ca4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4ca6:	4d0c      	ldr	r5, [pc, #48]	; (4cd8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4ca8:	7b63      	ldrb	r3, [r4, #13]
    4caa:	68a8      	ldr	r0, [r5, #8]
    4cac:	f043 0310 	orr.w	r3, r3, #16
    4cb0:	7363      	strb	r3, [r4, #13]
    4cb2:	1b03      	subs	r3, r0, r4
    4cb4:	4258      	negs	r0, r3
    4cb6:	4158      	adcs	r0, r3
    4cb8:	f7ff fece 	bl	4a58 <update_cache>
	__asm__ volatile(
    4cbc:	f386 8811 	msr	BASEPRI, r6
    4cc0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4cc4:	68ab      	ldr	r3, [r5, #8]
    4cc6:	42a3      	cmp	r3, r4
    4cc8:	d103      	bne.n	4cd2 <z_impl_k_thread_suspend+0x5e>
}
    4cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4cce:	f001 bda9 	b.w	6824 <z_reschedule_unlocked>
}
    4cd2:	bd70      	pop	{r4, r5, r6, pc}
    4cd4:	20000540 	.word	0x20000540
    4cd8:	20000518 	.word	0x20000518

00004cdc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    4cdc:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    4cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ce2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    4ce4:	b103      	cbz	r3, 4ce8 <z_thread_single_abort+0xc>
		thread->fn_abort();
    4ce6:	4798      	blx	r3
    4ce8:	f104 0018 	add.w	r0, r4, #24
    4cec:	f001 fe59 	bl	69a2 <z_abort_timeout>
	__asm__ volatile(
    4cf0:	f04f 0320 	mov.w	r3, #32
    4cf4:	f3ef 8611 	mrs	r6, BASEPRI
    4cf8:	f383 8811 	msr	BASEPRI, r3
    4cfc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4d00:	7b63      	ldrb	r3, [r4, #13]
    4d02:	06d8      	lsls	r0, r3, #27
    4d04:	d123      	bne.n	4d4e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    4d06:	69a2      	ldr	r2, [r4, #24]
    4d08:	bb0a      	cbnz	r2, 4d4e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    4d0a:	0619      	lsls	r1, r3, #24
    4d0c:	d507      	bpl.n	4d1e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    4d0e:	481f      	ldr	r0, [pc, #124]	; (4d8c <z_thread_single_abort+0xb0>)
    4d10:	4621      	mov	r1, r4
    4d12:	f7ff fe8b 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4d16:	7b63      	ldrb	r3, [r4, #13]
    4d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d1c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    4d1e:	4b1c      	ldr	r3, [pc, #112]	; (4d90 <z_thread_single_abort+0xb4>)
    4d20:	6898      	ldr	r0, [r3, #8]
    4d22:	1b02      	subs	r2, r0, r4
    4d24:	4250      	negs	r0, r2
    4d26:	4150      	adcs	r0, r2
    4d28:	f7ff fe96 	bl	4a58 <update_cache>
		thread->base.thread_state |= mask;
    4d2c:	7b63      	ldrb	r3, [r4, #13]
    4d2e:	f043 0308 	orr.w	r3, r3, #8
    4d32:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4d34:	f104 0828 	add.w	r8, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
    4d38:	2700      	movs	r7, #0
	return list->head == list;
    4d3a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d3c:	4545      	cmp	r5, r8
    4d3e:	d000      	beq.n	4d42 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4d40:	b995      	cbnz	r5, 4d68 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    4d42:	f386 8811 	msr	BASEPRI, r6
    4d46:	f3bf 8f6f 	isb	sy
}
    4d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    4d4e:	079b      	lsls	r3, r3, #30
    4d50:	d5ec      	bpl.n	4d2c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4d52:	68a0      	ldr	r0, [r4, #8]
    4d54:	4621      	mov	r1, r4
    4d56:	f7ff fe69 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4d5a:	7b63      	ldrb	r3, [r4, #13]
    4d5c:	f023 0302 	bic.w	r3, r3, #2
    4d60:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4d62:	2300      	movs	r3, #0
    4d64:	60a3      	str	r3, [r4, #8]
    4d66:	e7e1      	b.n	4d2c <z_thread_single_abort+0x50>
    4d68:	f105 0018 	add.w	r0, r5, #24
    4d6c:	f001 fe19 	bl	69a2 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4d70:	68a8      	ldr	r0, [r5, #8]
    4d72:	4629      	mov	r1, r5
    4d74:	f7ff fe5a 	bl	4a2c <z_priq_dumb_remove>
    4d78:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    4d7a:	60af      	str	r7, [r5, #8]
    4d7c:	f023 0302 	bic.w	r3, r3, #2
    4d80:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4d82:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    4d84:	4628      	mov	r0, r5
    4d86:	f7ff fea7 	bl	4ad8 <ready_thread>
    4d8a:	e7d6      	b.n	4d3a <z_thread_single_abort+0x5e>
    4d8c:	20000540 	.word	0x20000540
    4d90:	20000518 	.word	0x20000518

00004d94 <unready_thread>:
{
    4d94:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4d96:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4d9a:	2b00      	cmp	r3, #0
{
    4d9c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4d9e:	da06      	bge.n	4dae <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4da0:	4807      	ldr	r0, [pc, #28]	; (4dc0 <unready_thread+0x2c>)
    4da2:	f7ff fe43 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4da6:	7b4b      	ldrb	r3, [r1, #13]
    4da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4dac:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    4dae:	4b05      	ldr	r3, [pc, #20]	; (4dc4 <unready_thread+0x30>)
    4db0:	6898      	ldr	r0, [r3, #8]
    4db2:	1a43      	subs	r3, r0, r1
    4db4:	4258      	negs	r0, r3
    4db6:	4158      	adcs	r0, r3
}
    4db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4dbc:	f7ff be4c 	b.w	4a58 <update_cache>
    4dc0:	20000540 	.word	0x20000540
    4dc4:	20000518 	.word	0x20000518

00004dc8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dca:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    4dcc:	f001 fe29 	bl	6a22 <z_tick_get_32>
    4dd0:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    4dd2:	f04f 0320 	mov.w	r3, #32
    4dd6:	f3ef 8711 	mrs	r7, BASEPRI
    4dda:	f383 8811 	msr	BASEPRI, r3
    4dde:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    4de2:	4e0d      	ldr	r6, [pc, #52]	; (4e18 <z_tick_sleep.part.0+0x50>)
    4de4:	4b0d      	ldr	r3, [pc, #52]	; (4e1c <z_tick_sleep.part.0+0x54>)
    4de6:	68b0      	ldr	r0, [r6, #8]
    4de8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    4dea:	f001 fd6a 	bl	68c2 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    4dee:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4df0:	490b      	ldr	r1, [pc, #44]	; (4e20 <z_tick_sleep.part.0+0x58>)
    4df2:	462a      	mov	r2, r5
    4df4:	17eb      	asrs	r3, r5, #31
    4df6:	3018      	adds	r0, #24
    4df8:	f000 f9e0 	bl	51bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4dfc:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4dfe:	7b53      	ldrb	r3, [r2, #13]
    4e00:	f043 0310 	orr.w	r3, r3, #16
    4e04:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
    4e06:	4638      	mov	r0, r7
    4e08:	f7fd f8e2 	bl	1fd0 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    4e0c:	f001 fe09 	bl	6a22 <z_tick_get_32>
    4e10:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    4e12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e18:	20000518 	.word	0x20000518
    4e1c:	20000548 	.word	0x20000548
    4e20:	0000686d 	.word	0x0000686d

00004e24 <pend>:
{
    4e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e28:	4606      	mov	r6, r0
    4e2a:	4614      	mov	r4, r2
    4e2c:	461d      	mov	r5, r3
    4e2e:	f04f 0320 	mov.w	r3, #32
    4e32:	f3ef 8711 	mrs	r7, BASEPRI
    4e36:	f383 8811 	msr	BASEPRI, r3
    4e3a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4e3e:	f001 fd50 	bl	68e2 <add_to_waitq_locked>
	__asm__ volatile(
    4e42:	f387 8811 	msr	BASEPRI, r7
    4e46:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e4a:	1c6b      	adds	r3, r5, #1
    4e4c:	bf08      	it	eq
    4e4e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4e52:	d008      	beq.n	4e66 <pend+0x42>
    4e54:	4622      	mov	r2, r4
    4e56:	462b      	mov	r3, r5
    4e58:	f106 0018 	add.w	r0, r6, #24
    4e5c:	4903      	ldr	r1, [pc, #12]	; (4e6c <pend+0x48>)
}
    4e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e62:	f000 b9ab 	b.w	51bc <z_add_timeout>
    4e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e6a:	bf00      	nop
    4e6c:	0000686d 	.word	0x0000686d

00004e70 <z_pend_curr>:
{
    4e70:	b510      	push	{r4, lr}
	pending_current = _current;
    4e72:	4b07      	ldr	r3, [pc, #28]	; (4e90 <z_pend_curr+0x20>)
    4e74:	6898      	ldr	r0, [r3, #8]
    4e76:	4b07      	ldr	r3, [pc, #28]	; (4e94 <z_pend_curr+0x24>)
{
    4e78:	460c      	mov	r4, r1
	pending_current = _current;
    4e7a:	6018      	str	r0, [r3, #0]
{
    4e7c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e82:	f7ff ffcf 	bl	4e24 <pend>
    4e86:	4620      	mov	r0, r4
}
    4e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e8c:	f7fd b8a0 	b.w	1fd0 <arch_swap>
    4e90:	20000518 	.word	0x20000518
    4e94:	20000548 	.word	0x20000548

00004e98 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4e98:	4b04      	ldr	r3, [pc, #16]	; (4eac <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4e9a:	2100      	movs	r1, #0
    4e9c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4ea0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4ea4:	4608      	mov	r0, r1
    4ea6:	f7ff bd81 	b.w	49ac <k_sched_time_slice_set>
    4eaa:	bf00      	nop
    4eac:	20000518 	.word	0x20000518

00004eb0 <z_impl_k_yield>:
{
    4eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    4eb2:	4c24      	ldr	r4, [pc, #144]	; (4f44 <z_impl_k_yield+0x94>)
    4eb4:	4b24      	ldr	r3, [pc, #144]	; (4f48 <z_impl_k_yield+0x98>)
    4eb6:	68a2      	ldr	r2, [r4, #8]
    4eb8:	429a      	cmp	r2, r3
    4eba:	d030      	beq.n	4f1e <z_impl_k_yield+0x6e>
	__asm__ volatile(
    4ebc:	f04f 0320 	mov.w	r3, #32
    4ec0:	f3ef 8511 	mrs	r5, BASEPRI
    4ec4:	f383 8811 	msr	BASEPRI, r3
    4ec8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    4ecc:	68a1      	ldr	r1, [r4, #8]
    4ece:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4ed2:	f7ff fdab 	bl	4a2c <z_priq_dumb_remove>
	return list->head == list;
    4ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4ed8:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4eda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4edc:	4283      	cmp	r3, r0
    4ede:	bf08      	it	eq
    4ee0:	2300      	moveq	r3, #0
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	bf38      	it	cc
    4ee6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ee8:	b32b      	cbz	r3, 4f36 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    4eea:	f992 700e 	ldrsb.w	r7, [r2, #14]
    4eee:	f993 600e 	ldrsb.w	r6, [r3, #14]
    4ef2:	42b7      	cmp	r7, r6
    4ef4:	db03      	blt.n	4efe <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4ef6:	428b      	cmp	r3, r1
    4ef8:	d01d      	beq.n	4f36 <z_impl_k_yield+0x86>
    4efa:	681b      	ldr	r3, [r3, #0]
    4efc:	e7f4      	b.n	4ee8 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    4efe:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4f00:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    4f04:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    4f06:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    4f08:	7b53      	ldrb	r3, [r2, #13]
    4f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f0e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    4f10:	2001      	movs	r0, #1
    4f12:	f7ff fda1 	bl	4a58 <update_cache>
	__asm__ volatile(
    4f16:	f385 8811 	msr	BASEPRI, r5
    4f1a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    4f1e:	f04f 0320 	mov.w	r3, #32
    4f22:	f3ef 8011 	mrs	r0, BASEPRI
    4f26:	f383 8811 	msr	BASEPRI, r3
    4f2a:	f3bf 8f6f 	isb	sy
}
    4f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f32:	f7fd b84d 	b.w	1fd0 <arch_swap>
	node->prev = list->tail;
    4f36:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    4f3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f3c:	601a      	str	r2, [r3, #0]
	list->tail = node;
    4f3e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    4f40:	e7e2      	b.n	4f08 <z_impl_k_yield+0x58>
    4f42:	bf00      	nop
    4f44:	20000518 	.word	0x20000518
    4f48:	20000430 	.word	0x20000430

00004f4c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4f4c:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f4e:	3301      	adds	r3, #1
    4f50:	bf08      	it	eq
    4f52:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    4f56:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f58:	d106      	bne.n	4f68 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4f5a:	4b0b      	ldr	r3, [pc, #44]	; (4f88 <z_impl_k_sleep+0x3c>)
    4f5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4f5e:	f7ff fe89 	bl	4c74 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    4f62:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    4f66:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    4f68:	4604      	mov	r4, r0
	if (ticks == 0) {
    4f6a:	b948      	cbnz	r0, 4f80 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    4f6c:	f7ff ffa0 	bl	4eb0 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    4f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f74:	fb84 3400 	smull	r3, r4, r4, r0
    4f78:	0bd8      	lsrs	r0, r3, #15
    4f7a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    4f7e:	e7f2      	b.n	4f66 <z_impl_k_sleep+0x1a>
    4f80:	f7ff ff22 	bl	4dc8 <z_tick_sleep.part.0>
    4f84:	4604      	mov	r4, r0
    4f86:	e7f3      	b.n	4f70 <z_impl_k_sleep+0x24>
    4f88:	20000518 	.word	0x20000518

00004f8c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4f8c:	4b01      	ldr	r3, [pc, #4]	; (4f94 <z_impl_k_current_get+0x8>)
    4f8e:	6898      	ldr	r0, [r3, #8]
    4f90:	4770      	bx	lr
    4f92:	bf00      	nop
    4f94:	20000518 	.word	0x20000518

00004f98 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4f98:	b538      	push	{r3, r4, r5, lr}
    4f9a:	4604      	mov	r4, r0
    4f9c:	f04f 0320 	mov.w	r3, #32
    4fa0:	f3ef 8511 	mrs	r5, BASEPRI
    4fa4:	f383 8811 	msr	BASEPRI, r3
    4fa8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    4fac:	f001 fcc4 	bl	6938 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    4fb0:	b148      	cbz	r0, 4fc6 <z_impl_k_sem_give+0x2e>
    4fb2:	2200      	movs	r2, #0
    4fb4:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4fb6:	f001 fc49 	bl	684c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    4fba:	4629      	mov	r1, r5
    4fbc:	4808      	ldr	r0, [pc, #32]	; (4fe0 <z_impl_k_sem_give+0x48>)
}
    4fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4fc2:	f001 bc18 	b.w	67f6 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4fc6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4fca:	429a      	cmp	r2, r3
    4fcc:	bf18      	it	ne
    4fce:	3301      	addne	r3, #1
    4fd0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    4fd2:	2102      	movs	r1, #2
    4fd4:	f104 0010 	add.w	r0, r4, #16
    4fd8:	f001 fd64 	bl	6aa4 <z_handle_obj_poll_events>
}
    4fdc:	e7ed      	b.n	4fba <z_impl_k_sem_give+0x22>
    4fde:	bf00      	nop
    4fe0:	2000097a 	.word	0x2000097a

00004fe4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4fe6:	4614      	mov	r4, r2
    4fe8:	461d      	mov	r5, r3
    4fea:	f04f 0320 	mov.w	r3, #32
    4fee:	f3ef 8111 	mrs	r1, BASEPRI
    4ff2:	f383 8811 	msr	BASEPRI, r3
    4ff6:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    4ffa:	6883      	ldr	r3, [r0, #8]
    4ffc:	b143      	cbz	r3, 5010 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4ffe:	3b01      	subs	r3, #1
    5000:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    5002:	f381 8811 	msr	BASEPRI, r1
    5006:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    500a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    500c:	b003      	add	sp, #12
    500e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5010:	ea54 0305 	orrs.w	r3, r4, r5
    5014:	d106      	bne.n	5024 <z_impl_k_sem_take+0x40>
    5016:	f381 8811 	msr	BASEPRI, r1
    501a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    501e:	f06f 000f 	mvn.w	r0, #15
    5022:	e7f3      	b.n	500c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5024:	4602      	mov	r2, r0
    5026:	e9cd 4500 	strd	r4, r5, [sp]
    502a:	4802      	ldr	r0, [pc, #8]	; (5034 <z_impl_k_sem_take+0x50>)
    502c:	f7ff ff20 	bl	4e70 <z_pend_curr>
	return ret;
    5030:	e7ec      	b.n	500c <z_impl_k_sem_take+0x28>
    5032:	bf00      	nop
    5034:	2000097a 	.word	0x2000097a

00005038 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    5038:	b5f0      	push	{r4, r5, r6, r7, lr}
    503a:	b087      	sub	sp, #28
    503c:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
    5040:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5044:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    5048:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    504a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    504c:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    504e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
    5052:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5054:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
    5056:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5058:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
    505a:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
    505c:	2500      	movs	r5, #0
	node->prev = NULL;
    505e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
    5062:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
    5064:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5066:	9600      	str	r6, [sp, #0]
{
    5068:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    506a:	f7fc fff3 	bl	2054 <arch_new_thread>
	if (!_current) {
    506e:	4b04      	ldr	r3, [pc, #16]	; (5080 <z_setup_new_thread+0x48>)
    5070:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    5072:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    5076:	b103      	cbz	r3, 507a <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    5078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    507a:	66a3      	str	r3, [r4, #104]	; 0x68
}
    507c:	b007      	add	sp, #28
    507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5080:	20000518 	.word	0x20000518

00005084 <z_init_static_threads>:
{
    5084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5088:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5140 <z_init_static_threads+0xbc>
    508c:	4d2b      	ldr	r5, [pc, #172]	; (513c <z_init_static_threads+0xb8>)
{
    508e:	b087      	sub	sp, #28
    5090:	46c8      	mov	r8, r9
	_FOREACH_STATIC_THREAD(thread_data) {
    5092:	454d      	cmp	r5, r9
    5094:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5098:	d30d      	bcc.n	50b6 <z_init_static_threads+0x32>
	k_sched_lock();
    509a:	f7ff fcb3 	bl	4a04 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    509e:	4c27      	ldr	r4, [pc, #156]	; (513c <z_init_static_threads+0xb8>)
    50a0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 5144 <z_init_static_threads+0xc0>
			return (u32_t)((t * to_hz + off) / from_hz);
    50a4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    50a8:	4544      	cmp	r4, r8
    50aa:	d321      	bcc.n	50f0 <z_init_static_threads+0x6c>
}
    50ac:	b007      	add	sp, #28
    50ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    50b2:	f7ff bcf5 	b.w	4aa0 <k_sched_unlock>
		z_setup_new_thread(
    50b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    50ba:	9305      	str	r3, [sp, #20]
    50bc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    50c0:	9304      	str	r3, [sp, #16]
    50c2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    50c6:	9303      	str	r3, [sp, #12]
    50c8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    50cc:	9302      	str	r3, [sp, #8]
    50ce:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    50d2:	9301      	str	r3, [sp, #4]
    50d4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    50d8:	9300      	str	r3, [sp, #0]
    50da:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    50de:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    50e2:	f7ff ffa9 	bl	5038 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    50e6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    50ea:	655d      	str	r5, [r3, #84]	; 0x54
    50ec:	4625      	mov	r5, r4
    50ee:	e7d0      	b.n	5092 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    50f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    50f2:	1c4b      	adds	r3, r1, #1
    50f4:	d017      	beq.n	5126 <z_init_static_threads+0xa2>
					    K_MSEC(thread_data->init_delay));
    50f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    50fa:	f240 3be7 	movw	fp, #999	; 0x3e7
    50fe:	f04f 0c00 	mov.w	ip, #0
    5102:	fbc9 bc01 	smlal	fp, ip, r9, r1
    5106:	2300      	movs	r3, #0
    5108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    510c:	4658      	mov	r0, fp
    510e:	4661      	mov	r1, ip
    5110:	f7fb fc2a 	bl	968 <__aeabi_uldivmod>
    5114:	2700      	movs	r7, #0
    5116:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5118:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    511c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    511e:	d104      	bne.n	512a <z_init_static_threads+0xa6>
	z_sched_start(thread);
    5120:	4628      	mov	r0, r5
    5122:	f7ff fd0d 	bl	4b40 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5126:	3430      	adds	r4, #48	; 0x30
    5128:	e7be      	b.n	50a8 <z_init_static_threads+0x24>
    512a:	4602      	mov	r2, r0
    512c:	463b      	mov	r3, r7
    512e:	4651      	mov	r1, sl
    5130:	f105 0018 	add.w	r0, r5, #24
    5134:	f000 f842 	bl	51bc <z_add_timeout>
    5138:	e7f5      	b.n	5126 <z_init_static_threads+0xa2>
    513a:	bf00      	nop
    513c:	200001d0 	.word	0x200001d0
    5140:	200001d0 	.word	0x200001d0
    5144:	0000686d 	.word	0x0000686d

00005148 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    5148:	4b03      	ldr	r3, [pc, #12]	; (5158 <elapsed+0x10>)
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	b90b      	cbnz	r3, 5152 <elapsed+0xa>
    514e:	f7fc bef5 	b.w	1f3c <z_clock_elapsed>
}
    5152:	2000      	movs	r0, #0
    5154:	4770      	bx	lr
    5156:	bf00      	nop
    5158:	20000554 	.word	0x20000554

0000515c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    515c:	6803      	ldr	r3, [r0, #0]
    515e:	b140      	cbz	r0, 5172 <remove_timeout+0x16>
    5160:	4a07      	ldr	r2, [pc, #28]	; (5180 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    5162:	6852      	ldr	r2, [r2, #4]
    5164:	4290      	cmp	r0, r2
    5166:	d004      	beq.n	5172 <remove_timeout+0x16>
	if (next(t) != NULL) {
    5168:	b11b      	cbz	r3, 5172 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    516a:	689a      	ldr	r2, [r3, #8]
    516c:	6881      	ldr	r1, [r0, #8]
    516e:	440a      	add	r2, r1
    5170:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    5172:	6842      	ldr	r2, [r0, #4]
    5174:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    5176:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5178:	2300      	movs	r3, #0
	node->prev = NULL;
    517a:	e9c0 3300 	strd	r3, r3, [r0]
}
    517e:	4770      	bx	lr
    5180:	2000014c 	.word	0x2000014c

00005184 <next_timeout>:
	return list->head == list;
    5184:	4b0b      	ldr	r3, [pc, #44]	; (51b4 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    5186:	b510      	push	{r4, lr}
    5188:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    518a:	429c      	cmp	r4, r3
    518c:	bf08      	it	eq
    518e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    5190:	f7ff ffda 	bl	5148 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    5194:	b154      	cbz	r4, 51ac <next_timeout+0x28>
    5196:	68a3      	ldr	r3, [r4, #8]
    5198:	1a18      	subs	r0, r3, r0
    519a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    519e:	4b06      	ldr	r3, [pc, #24]	; (51b8 <next_timeout+0x34>)
    51a0:	691b      	ldr	r3, [r3, #16]
    51a2:	b113      	cbz	r3, 51aa <next_timeout+0x26>
    51a4:	4298      	cmp	r0, r3
    51a6:	bfa8      	it	ge
    51a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    51aa:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    51ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    51b0:	e7f5      	b.n	519e <next_timeout+0x1a>
    51b2:	bf00      	nop
    51b4:	2000014c 	.word	0x2000014c
    51b8:	20000518 	.word	0x20000518

000051bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    51bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51c0:	9101      	str	r1, [sp, #4]
    51c2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51c4:	1c4b      	adds	r3, r1, #1
    51c6:	bf08      	it	eq
    51c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    51cc:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51ce:	d061      	beq.n	5294 <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    51d0:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    51d2:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    51d6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    51da:	f04f 3bff 	mov.w	fp, #4294967295
    51de:	ebb3 0804 	subs.w	r8, r3, r4
    51e2:	eb6b 0905 	sbc.w	r9, fp, r5
    51e6:	f1b8 0f00 	cmp.w	r8, #0
    51ea:	f179 0300 	sbcs.w	r3, r9, #0
    51ee:	db0f      	blt.n	5210 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    51f0:	f7ff ffaa 	bl	5148 <elapsed>
    51f4:	4a2c      	ldr	r2, [pc, #176]	; (52a8 <z_add_timeout+0xec>)
    51f6:	e9d2 1c00 	ldrd	r1, ip, [r2]
    51fa:	f06f 0301 	mvn.w	r3, #1
    51fe:	1a5b      	subs	r3, r3, r1
    5200:	eb6b 020c 	sbc.w	r2, fp, ip
    5204:	1b1e      	subs	r6, r3, r4
    5206:	eb62 0705 	sbc.w	r7, r2, r5
    520a:	1a34      	subs	r4, r6, r0
    520c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5210:	9b01      	ldr	r3, [sp, #4]
    5212:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
    5216:	f04f 0320 	mov.w	r3, #32
    521a:	f3ef 8611 	mrs	r6, BASEPRI
    521e:	f383 8811 	msr	BASEPRI, r3
    5222:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    5226:	f7ff ff8f 	bl	5148 <elapsed>
	ticks = MAX(1, ticks);
    522a:	2c01      	cmp	r4, #1
    522c:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    5230:	4b1e      	ldr	r3, [pc, #120]	; (52ac <z_add_timeout+0xf0>)
    5232:	681a      	ldr	r2, [r3, #0]
    5234:	bfb8      	it	lt
    5236:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
    5238:	4404      	add	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    523a:	429a      	cmp	r2, r3
    523c:	f8ca 4008 	str.w	r4, [sl, #8]
    5240:	d001      	beq.n	5246 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5242:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    5244:	b952      	cbnz	r2, 525c <z_add_timeout+0xa0>
	node->prev = list->tail;
    5246:	685a      	ldr	r2, [r3, #4]
    5248:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    524c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    524e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    5252:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    5256:	f8c3 a004 	str.w	sl, [r3, #4]
}
    525a:	e00d      	b.n	5278 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    525c:	6890      	ldr	r0, [r2, #8]
    525e:	f8da 1008 	ldr.w	r1, [sl, #8]
    5262:	4288      	cmp	r0, r1
    5264:	dd19      	ble.n	529a <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    5266:	1a41      	subs	r1, r0, r1
    5268:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    526a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    526c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    5270:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5274:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    5278:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    527a:	429a      	cmp	r2, r3
    527c:	d006      	beq.n	528c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    527e:	4592      	cmp	sl, r2
    5280:	d104      	bne.n	528c <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    5282:	f7ff ff7f 	bl	5184 <next_timeout>
    5286:	2100      	movs	r1, #0
    5288:	f7fc fdfa 	bl	1e80 <z_clock_set_timeout>
	__asm__ volatile(
    528c:	f386 8811 	msr	BASEPRI, r6
    5290:	f3bf 8f6f 	isb	sy
		}
	}
}
    5294:	b003      	add	sp, #12
    5296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    529a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    529c:	4294      	cmp	r4, r2
    529e:	f8ca 1008 	str.w	r1, [sl, #8]
    52a2:	d0d0      	beq.n	5246 <z_add_timeout+0x8a>
    52a4:	6812      	ldr	r2, [r2, #0]
    52a6:	e7cd      	b.n	5244 <z_add_timeout+0x88>
    52a8:	200001f8 	.word	0x200001f8
    52ac:	2000014c 	.word	0x2000014c

000052b0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    52b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52b4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    52b6:	f7ff fca7 	bl	4c08 <z_time_slice>
	__asm__ volatile(
    52ba:	f04f 0320 	mov.w	r3, #32
    52be:	f3ef 8411 	mrs	r4, BASEPRI
    52c2:	f383 8811 	msr	BASEPRI, r3
    52c6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    52ca:	4d20      	ldr	r5, [pc, #128]	; (534c <z_clock_announce+0x9c>)
    52cc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5350 <z_clock_announce+0xa0>
	return list->head == list;
    52d0:	f8df a080 	ldr.w	sl, [pc, #128]	; 5354 <z_clock_announce+0xa4>
    52d4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    52d6:	46c1      	mov	r9, r8
    52d8:	f8da 0000 	ldr.w	r0, [sl]
    52dc:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52de:	4550      	cmp	r0, sl
    52e0:	e9d8 6700 	ldrd	r6, r7, [r8]
    52e4:	d005      	beq.n	52f2 <z_clock_announce+0x42>
    52e6:	b120      	cbz	r0, 52f2 <z_clock_announce+0x42>
    52e8:	6883      	ldr	r3, [r0, #8]
    52ea:	4293      	cmp	r3, r2
    52ec:	dd13      	ble.n	5316 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    52ee:	1a9b      	subs	r3, r3, r2
    52f0:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    52f2:	18b6      	adds	r6, r6, r2
    52f4:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    52f8:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    52fc:	2600      	movs	r6, #0
    52fe:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    5300:	f7ff ff40 	bl	5184 <next_timeout>
    5304:	4631      	mov	r1, r6
    5306:	f7fc fdbb 	bl	1e80 <z_clock_set_timeout>
	__asm__ volatile(
    530a:	f384 8811 	msr	BASEPRI, r4
    530e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    5316:	18f6      	adds	r6, r6, r3
    5318:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    531c:	1ad3      	subs	r3, r2, r3
    531e:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    5320:	2300      	movs	r3, #0
    5322:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    5324:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    5328:	f7ff ff18 	bl	515c <remove_timeout>
    532c:	f384 8811 	msr	BASEPRI, r4
    5330:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5334:	68c3      	ldr	r3, [r0, #12]
    5336:	4798      	blx	r3
	__asm__ volatile(
    5338:	f04f 0320 	mov.w	r3, #32
    533c:	f3ef 8411 	mrs	r4, BASEPRI
    5340:	f383 8811 	msr	BASEPRI, r3
    5344:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5348:	e7c6      	b.n	52d8 <z_clock_announce+0x28>
    534a:	bf00      	nop
    534c:	20000554 	.word	0x20000554
    5350:	200001f8 	.word	0x200001f8
    5354:	2000014c 	.word	0x2000014c

00005358 <z_tick_get>:

s64_t z_tick_get(void)
{
    5358:	b510      	push	{r4, lr}
    535a:	f04f 0320 	mov.w	r3, #32
    535e:	f3ef 8411 	mrs	r4, BASEPRI
    5362:	f383 8811 	msr	BASEPRI, r3
    5366:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    536a:	f7fc fde7 	bl	1f3c <z_clock_elapsed>
    536e:	4b06      	ldr	r3, [pc, #24]	; (5388 <z_tick_get+0x30>)
    5370:	e9d3 2300 	ldrd	r2, r3, [r3]
    5374:	1812      	adds	r2, r2, r0
    5376:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    537a:	f384 8811 	msr	BASEPRI, r4
    537e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5382:	4610      	mov	r0, r2
    5384:	4619      	mov	r1, r3
    5386:	bd10      	pop	{r4, pc}
    5388:	200001f8 	.word	0x200001f8

0000538c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    538e:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    5392:	1c56      	adds	r6, r2, #1
    5394:	f143 0700 	adc.w	r7, r3, #0
    5398:	2f00      	cmp	r7, #0
    539a:	bf08      	it	eq
    539c:	2e02      	cmpeq	r6, #2
{
    539e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    53a0:	d302      	bcc.n	53a8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    53a2:	490c      	ldr	r1, [pc, #48]	; (53d4 <z_timer_expiration_handler+0x48>)
    53a4:	f7ff ff0a 	bl	51bc <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    53a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53aa:	3301      	adds	r3, #1
    53ac:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    53ae:	69a3      	ldr	r3, [r4, #24]
    53b0:	b10b      	cbz	r3, 53b6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    53b2:	4620      	mov	r0, r4
    53b4:	4798      	blx	r3
	return list->head == list;
    53b6:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53ba:	42a5      	cmp	r5, r4
    53bc:	d008      	beq.n	53d0 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    53be:	b13d      	cbz	r5, 53d0 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    53c0:	4628      	mov	r0, r5
    53c2:	f001 f9ff 	bl	67c4 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    53c6:	4628      	mov	r0, r5
    53c8:	f001 fa40 	bl	684c <z_ready_thread>
    53cc:	2300      	movs	r3, #0
    53ce:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
    53d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53d2:	bf00      	nop
    53d4:	0000538d 	.word	0x0000538d

000053d8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    53d8:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    53dc:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    53e0:	ea54 0105 	orrs.w	r1, r4, r5
{
    53e4:	4680      	mov	r8, r0
    53e6:	4616      	mov	r6, r2
    53e8:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    53ea:	d016      	beq.n	541a <z_impl_k_timer_start+0x42>
    53ec:	f06f 0101 	mvn.w	r1, #1
    53f0:	ebb1 0a04 	subs.w	sl, r1, r4
    53f4:	f04f 31ff 	mov.w	r1, #4294967295
    53f8:	eb61 0b05 	sbc.w	fp, r1, r5
    53fc:	f1ba 0f00 	cmp.w	sl, #0
    5400:	f17b 0100 	sbcs.w	r1, fp, #0
    5404:	da09      	bge.n	541a <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
    5406:	f114 34ff 	adds.w	r4, r4, #4294967295
    540a:	f145 35ff 	adc.w	r5, r5, #4294967295
    540e:	2c01      	cmp	r4, #1
    5410:	f175 0100 	sbcs.w	r1, r5, #0
    5414:	bfbc      	itt	lt
    5416:	2401      	movlt	r4, #1
    5418:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    541a:	f06f 0101 	mvn.w	r1, #1
    541e:	1a89      	subs	r1, r1, r2
    5420:	9100      	str	r1, [sp, #0]
    5422:	f04f 31ff 	mov.w	r1, #4294967295
    5426:	eb61 0103 	sbc.w	r1, r1, r3
    542a:	9101      	str	r1, [sp, #4]
    542c:	e9dd 0100 	ldrd	r0, r1, [sp]
    5430:	2800      	cmp	r0, #0
    5432:	f171 0100 	sbcs.w	r1, r1, #0
    5436:	da09      	bge.n	544c <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5438:	f112 36ff 	adds.w	r6, r2, #4294967295
    543c:	f143 37ff 	adc.w	r7, r3, #4294967295
    5440:	2e00      	cmp	r6, #0
    5442:	f177 0300 	sbcs.w	r3, r7, #0
    5446:	bfbc      	itt	lt
    5448:	2600      	movlt	r6, #0
    544a:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    544c:	4640      	mov	r0, r8
    544e:	f001 faa8 	bl	69a2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5452:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5454:	4906      	ldr	r1, [pc, #24]	; (5470 <z_impl_k_timer_start+0x98>)
	timer->status = 0U;
    5456:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    545a:	4632      	mov	r2, r6
    545c:	463b      	mov	r3, r7
    545e:	4640      	mov	r0, r8
	timer->period = period;
    5460:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
    5464:	b002      	add	sp, #8
    5466:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    546a:	f7ff bea7 	b.w	51bc <z_add_timeout>
    546e:	bf00      	nop
    5470:	0000538d 	.word	0x0000538d

00005474 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    5474:	b538      	push	{r3, r4, r5, lr}
    5476:	4603      	mov	r3, r0
	__asm__ volatile(
    5478:	f04f 0220 	mov.w	r2, #32
    547c:	f3ef 8511 	mrs	r5, BASEPRI
    5480:	f382 8811 	msr	BASEPRI, r2
    5484:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    5488:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
    548a:	2101      	movs	r1, #1
    548c:	6081      	str	r1, [r0, #8]
	return list->head == list;
    548e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    5490:	4283      	cmp	r3, r0
    5492:	d106      	bne.n	54a2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    5494:	f385 8811 	msr	BASEPRI, r5
    5498:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    549c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    549e:	4620      	mov	r0, r4
    54a0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    54a2:	e9d0 3200 	ldrd	r3, r2, [r0]
    54a6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    54a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    54aa:	2300      	movs	r3, #0
	node->prev = NULL;
    54ac:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    54b0:	f001 fadd 	bl	6a6e <signal_poll_event>
	z_reschedule(&lock, key);
    54b4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    54b6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    54b8:	4801      	ldr	r0, [pc, #4]	; (54c0 <z_impl_k_poll_signal_raise+0x4c>)
    54ba:	f001 f99c 	bl	67f6 <z_reschedule>
	return rc;
    54be:	e7ee      	b.n	549e <z_impl_k_poll_signal_raise+0x2a>
    54c0:	2000097a 	.word	0x2000097a

000054c4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    54c4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    54c6:	4c06      	ldr	r4, [pc, #24]	; (54e0 <statics_init+0x1c>)
    54c8:	4d06      	ldr	r5, [pc, #24]	; (54e4 <statics_init+0x20>)
    54ca:	42ac      	cmp	r4, r5
    54cc:	d301      	bcc.n	54d2 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    54ce:	2000      	movs	r0, #0
    54d0:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    54d2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    54d6:	4620      	mov	r0, r4
    54d8:	f001 faf2 	bl	6ac0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    54dc:	3414      	adds	r4, #20
    54de:	e7f4      	b.n	54ca <statics_init+0x6>
    54e0:	200001d0 	.word	0x200001d0
    54e4:	200001d0 	.word	0x200001d0

000054e8 <bma_delay_us>:
	z_impl_k_busy_wait(usec_to_wait);
    54e8:	f001 ba59 	b.w	699e <z_impl_k_busy_wait>

000054ec <null_pointer_check>:
 */
static int8_t null_pointer_check(const struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if ((dev == NULL) || (dev->bus_read == NULL) || (dev->bus_write == NULL) || (dev->intf_ptr == NULL))
    54ec:	b148      	cbz	r0, 5502 <null_pointer_check+0x16>
    54ee:	6a03      	ldr	r3, [r0, #32]
    54f0:	b13b      	cbz	r3, 5502 <null_pointer_check+0x16>
    54f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    54f4:	b12b      	cbz	r3, 5502 <null_pointer_check+0x16>
    54f6:	6840      	ldr	r0, [r0, #4]
    54f8:	fab0 f080 	clz	r0, r0
    54fc:	0940      	lsrs	r0, r0, #5
    54fe:	4240      	negs	r0, r0
    5500:	4770      	bx	lr
    {
        rslt = BMA4_E_NULL_PTR;
    5502:	f04f 30ff 	mov.w	r0, #4294967295
    {
        rslt = BMA4_OK;
    }

    return rslt;
}
    5506:	4770      	bx	lr

00005508 <read_regs>:
{
    5508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    550c:	4683      	mov	fp, r0
    550e:	af00      	add	r7, sp, #0
    rslt = null_pointer_check(dev);
    5510:	4618      	mov	r0, r3
{
    5512:	4688      	mov	r8, r1
    5514:	4615      	mov	r5, r2
    5516:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
    5518:	f7ff ffe8 	bl	54ec <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
    551c:	bb40      	cbnz	r0, 5570 <read_regs+0x68>
    551e:	b339      	cbz	r1, 5570 <read_regs+0x68>
        uint32_t temp_len = len + dev->dummy_byte;
    5520:	7ae2      	ldrb	r2, [r4, #11]
    5522:	442a      	add	r2, r5
        uint8_t temp_buff[temp_len];
    5524:	1dd3      	adds	r3, r2, #7
    5526:	f023 0307 	bic.w	r3, r3, #7
    {
    552a:	46e9      	mov	r9, sp
        uint8_t temp_buff[temp_len];
    552c:	ebad 0d03 	sub.w	sp, sp, r3
        if (dev->intf == BMA4_SPI_INTF)
    5530:	7a23      	ldrb	r3, [r4, #8]
        uint8_t temp_buff[temp_len];
    5532:	46ea      	mov	sl, sp
        if (dev->intf == BMA4_SPI_INTF)
    5534:	b90b      	cbnz	r3, 553a <read_regs+0x32>
            addr = addr | BMA4_SPI_RD_MASK;
    5536:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
        dev->intf_rslt = dev->bus_read(addr, temp_buff, temp_len, dev->intf_ptr);
    553a:	6a26      	ldr	r6, [r4, #32]
    553c:	6863      	ldr	r3, [r4, #4]
    553e:	4651      	mov	r1, sl
    5540:	4658      	mov	r0, fp
    5542:	47b0      	blx	r6
    5544:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
    5546:	b188      	cbz	r0, 556c <read_regs+0x64>
            rslt = BMA4_E_COM_FAIL;
    5548:	f06f 0001 	mvn.w	r0, #1
    554c:	46cd      	mov	sp, r9
}
    554e:	46bd      	mov	sp, r7
    5550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                data[indx] = temp_buff[indx + dev->dummy_byte];
    5554:	7ae1      	ldrb	r1, [r4, #11]
    5556:	eb0a 0602 	add.w	r6, sl, r2
    555a:	5c71      	ldrb	r1, [r6, r1]
    555c:	f808 1002 	strb.w	r1, [r8, r2]
            for (indx = 0; indx < len; indx++)
    5560:	b29a      	uxth	r2, r3
    5562:	4295      	cmp	r5, r2
    5564:	f103 0301 	add.w	r3, r3, #1
    5568:	d8f4      	bhi.n	5554 <read_regs+0x4c>
    556a:	e7ef      	b.n	554c <read_regs+0x44>
    556c:	4603      	mov	r3, r0
    556e:	e7f7      	b.n	5560 <read_regs+0x58>
        rslt = BMA4_E_NULL_PTR;
    5570:	f04f 30ff 	mov.w	r0, #4294967295
    5574:	e7eb      	b.n	554e <read_regs+0x46>

00005576 <write_regs>:
{
    5576:	b570      	push	{r4, r5, r6, lr}
    5578:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
    557a:	4618      	mov	r0, r3
{
    557c:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
    557e:	f7ff ffb5 	bl	54ec <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
    5582:	b9b8      	cbnz	r0, 55b4 <write_regs+0x3e>
    5584:	b1b1      	cbz	r1, 55b4 <write_regs+0x3e>
        if (dev->intf == BMA4_SPI_INTF)
    5586:	7a23      	ldrb	r3, [r4, #8]
    5588:	b90b      	cbnz	r3, 558e <write_regs+0x18>
            addr = addr & BMA4_SPI_WR_MASK;
    558a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
        dev->intf_rslt = dev->bus_write(addr, data, len, dev->intf_ptr);
    558e:	4628      	mov	r0, r5
    5590:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5592:	6863      	ldr	r3, [r4, #4]
    5594:	47b0      	blx	r6
    5596:	4605      	mov	r5, r0
    5598:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
    559a:	b970      	cbnz	r0, 55ba <write_regs+0x44>
            if (dev->perf_mode_status == BMA4_ENABLE)
    559c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    55a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    55a2:	6861      	ldr	r1, [r4, #4]
    55a4:	2a01      	cmp	r2, #1
                dev->delay_us(2, dev->intf_ptr);
    55a6:	bf0c      	ite	eq
    55a8:	2002      	moveq	r0, #2
                dev->delay_us(450, dev->intf_ptr);
    55aa:	f44f 70e1 	movne.w	r0, #450	; 0x1c2
    55ae:	4798      	blx	r3
}
    55b0:	4628      	mov	r0, r5
    55b2:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA4_E_NULL_PTR;
    55b4:	f04f 35ff 	mov.w	r5, #4294967295
    55b8:	e7fa      	b.n	55b0 <write_regs+0x3a>
            rslt = BMA4_E_COM_FAIL;
    55ba:	f06f 0501 	mvn.w	r5, #1
    55be:	e7f7      	b.n	55b0 <write_regs+0x3a>

000055c0 <increment_feature_config_addr>:
{
    55c0:	b513      	push	{r0, r1, r4, lr}
    uint8_t asic_lsb = 0;
    55c2:	2300      	movs	r3, #0
{
    55c4:	4604      	mov	r4, r0
    uint8_t asic_lsb = 0;
    55c6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_msb = 0;
    55ca:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    55ce:	f7ff ff8d 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    55d2:	b948      	cbnz	r0, 55e8 <increment_feature_config_addr+0x28>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    55d4:	4623      	mov	r3, r4
    55d6:	2201      	movs	r2, #1
    55d8:	f10d 0106 	add.w	r1, sp, #6
    55dc:	205b      	movs	r0, #91	; 0x5b
    55de:	f7ff ff93 	bl	5508 <read_regs>
        if (rslt == BMA4_OK)
    55e2:	b118      	cbz	r0, 55ec <increment_feature_config_addr+0x2c>
            rslt = BMA4_E_COM_FAIL;
    55e4:	f06f 0001 	mvn.w	r0, #1
}
    55e8:	b002      	add	sp, #8
    55ea:	bd10      	pop	{r4, pc}
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    55ec:	4623      	mov	r3, r4
    55ee:	2201      	movs	r2, #1
    55f0:	f10d 0107 	add.w	r1, sp, #7
    55f4:	205c      	movs	r0, #92	; 0x5c
    55f6:	f7ff ff87 	bl	5508 <read_regs>
        if (rslt == BMA4_OK)
    55fa:	2800      	cmp	r0, #0
    55fc:	d1f2      	bne.n	55e4 <increment_feature_config_addr+0x24>
            asic_addr = (asic_msb << 4) | (asic_lsb & 0x0F);
    55fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5602:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5606:	f002 020f 	and.w	r2, r2, #15
    560a:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
            asic_addr = asic_addr + (dev->read_write_len / 2);
    560e:	8aa3      	ldrh	r3, [r4, #20]
    5610:	eb02 0253 	add.w	r2, r2, r3, lsr #1
            asic_lsb = asic_addr & 0x0F;
    5614:	f002 030f 	and.w	r3, r2, #15
            asic_msb = (uint8_t)(asic_addr >> 4);
    5618:	0912      	lsrs	r2, r2, #4
            asic_lsb = asic_addr & 0x0F;
    561a:	f88d 3006 	strb.w	r3, [sp, #6]
            asic_msb = (uint8_t)(asic_addr >> 4);
    561e:	f88d 2007 	strb.w	r2, [sp, #7]
            rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    5622:	4623      	mov	r3, r4
    5624:	2201      	movs	r2, #1
    5626:	f10d 0106 	add.w	r1, sp, #6
    562a:	205b      	movs	r0, #91	; 0x5b
    562c:	f7ff ffa3 	bl	5576 <write_regs>
            if (rslt == BMA4_OK)
    5630:	2800      	cmp	r0, #0
    5632:	d1d9      	bne.n	55e8 <increment_feature_config_addr+0x28>
                rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    5634:	4623      	mov	r3, r4
    5636:	2201      	movs	r2, #1
    5638:	f10d 0107 	add.w	r1, sp, #7
    563c:	205c      	movs	r0, #92	; 0x5c
    563e:	f7ff ff9a 	bl	5576 <write_regs>
    5642:	e7d1      	b.n	55e8 <increment_feature_config_addr+0x28>

00005644 <set_feature_config_start_addr>:
{
    5644:	b510      	push	{r4, lr}
    5646:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
    5648:	f7ff ff50 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    564c:	b980      	cbnz	r0, 5670 <set_feature_config_start_addr+0x2c>
        rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &dev->asic_data.asic_lsb, 1, dev);
    564e:	4623      	mov	r3, r4
    5650:	2201      	movs	r2, #1
    5652:	f104 0117 	add.w	r1, r4, #23
    5656:	205b      	movs	r0, #91	; 0x5b
    5658:	f7ff ff8d 	bl	5576 <write_regs>
        if (rslt == BMA4_OK)
    565c:	b940      	cbnz	r0, 5670 <set_feature_config_start_addr+0x2c>
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
    565e:	4623      	mov	r3, r4
    5660:	f104 0118 	add.w	r1, r4, #24
    5664:	2201      	movs	r2, #1
}
    5666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
    566a:	205c      	movs	r0, #92	; 0x5c
    566c:	f7ff bf83 	b.w	5576 <write_regs>
}
    5670:	bd10      	pop	{r4, pc}

00005672 <bma4_get_advance_power_save>:
{
    5672:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
    5674:	2300      	movs	r3, #0
{
    5676:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
    5678:	4608      	mov	r0, r1
    uint8_t data = 0;
    567a:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    567e:	f7ff ff35 	bl	54ec <null_pointer_check>
    if ((rslt == BMA4_OK) && (adv_pwr_save != NULL))
    5682:	b978      	cbnz	r0, 56a4 <bma4_get_advance_power_save+0x32>
    5684:	b174      	cbz	r4, 56a4 <bma4_get_advance_power_save+0x32>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
    5686:	460b      	mov	r3, r1
    5688:	2201      	movs	r2, #1
    568a:	f10d 0107 	add.w	r1, sp, #7
    568e:	207c      	movs	r0, #124	; 0x7c
    5690:	f000 f80b 	bl	56aa <bma4_read_regs>
        if (rslt == BMA4_OK)
    5694:	b920      	cbnz	r0, 56a0 <bma4_get_advance_power_save+0x2e>
            *adv_pwr_save = BMA4_GET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE);
    5696:	f89d 3007 	ldrb.w	r3, [sp, #7]
    569a:	f003 0301 	and.w	r3, r3, #1
    569e:	7023      	strb	r3, [r4, #0]
}
    56a0:	b002      	add	sp, #8
    56a2:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
    56a4:	f04f 30ff 	mov.w	r0, #4294967295
    56a8:	e7fa      	b.n	56a0 <bma4_get_advance_power_save+0x2e>

000056aa <bma4_read_regs>:
{
    56aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    56ae:	461d      	mov	r5, r3
    56b0:	4607      	mov	r7, r0
    uint8_t adv_pwr_save = 0;
    56b2:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
    56b4:	4628      	mov	r0, r5
{
    56b6:	460e      	mov	r6, r1
    56b8:	4614      	mov	r4, r2
    uint8_t adv_pwr_save = 0;
    56ba:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    56be:	f7ff ff15 	bl	54ec <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
    56c2:	4680      	mov	r8, r0
    56c4:	2800      	cmp	r0, #0
    56c6:	d172      	bne.n	57ae <bma4_read_regs+0x104>
    56c8:	2900      	cmp	r1, #0
    56ca:	d070      	beq.n	57ae <bma4_read_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
    56cc:	2f5e      	cmp	r7, #94	; 0x5e
    56ce:	d168      	bne.n	57a2 <bma4_read_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
    56d0:	4629      	mov	r1, r5
    56d2:	f10d 0007 	add.w	r0, sp, #7
    56d6:	f7ff ffcc 	bl	5672 <bma4_get_advance_power_save>
            if (adv_pwr_save == BMA4_ENABLE)
    56da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    56de:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
    56e0:	4607      	mov	r7, r0
            if (adv_pwr_save == BMA4_ENABLE)
    56e2:	d109      	bne.n	56f8 <bma4_read_regs+0x4e>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    56e4:	4629      	mov	r1, r5
    56e6:	4640      	mov	r0, r8
    56e8:	f000 f867 	bl	57ba <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
    56ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    56ee:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    56f0:	4607      	mov	r7, r0
                dev->delay_us(450, dev->intf_ptr);
    56f2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    56f6:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
    56f8:	f014 0901 	ands.w	r9, r4, #1
    56fc:	d15a      	bne.n	57b4 <bma4_read_regs+0x10a>
    56fe:	7dab      	ldrb	r3, [r5, #22]
    5700:	42a3      	cmp	r3, r4
    5702:	d357      	bcc.n	57b4 <bma4_read_regs+0x10a>
    5704:	2f00      	cmp	r7, #0
    5706:	d155      	bne.n	57b4 <bma4_read_regs+0x10a>
                if (dev->read_write_len < len)
    5708:	8aaf      	ldrh	r7, [r5, #20]
    570a:	42a7      	cmp	r7, r4
    570c:	d242      	bcs.n	5794 <bma4_read_regs+0xea>
                    loop_count = len / dev->read_write_len;
    570e:	fbb4 faf7 	udiv	sl, r4, r7
                    rslt = set_feature_config_start_addr(dev);
    5712:	4628      	mov	r0, r5
    5714:	f7ff ff96 	bl	5644 <set_feature_config_start_addr>
                    overflow = len % dev->read_write_len;
    5718:	fb07 471a 	mls	r7, r7, sl, r4
                    index = 0;
    571c:	46c8      	mov	r8, r9
                    rslt = set_feature_config_start_addr(dev);
    571e:	4604      	mov	r4, r0
                    for (idx = 0; idx < loop_count; idx++)
    5720:	fa5f f389 	uxtb.w	r3, r9
    5724:	459a      	cmp	sl, r3
    5726:	d820      	bhi.n	576a <bma4_read_regs+0xc0>
                    if ((overflow) && (rslt == BMA4_OK))
    5728:	b147      	cbz	r7, 573c <bma4_read_regs+0x92>
    572a:	b9d4      	cbnz	r4, 5762 <bma4_read_regs+0xb8>
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
    572c:	462b      	mov	r3, r5
    572e:	463a      	mov	r2, r7
    5730:	eb06 0108 	add.w	r1, r6, r8
    5734:	205e      	movs	r0, #94	; 0x5e
    5736:	f7ff fee7 	bl	5508 <read_regs>
    573a:	4604      	mov	r4, r0
                    if (rslt == BMA4_OK)
    573c:	b98c      	cbnz	r4, 5762 <bma4_read_regs+0xb8>
                        rslt = set_feature_config_start_addr(dev);
    573e:	4628      	mov	r0, r5
    5740:	f7ff ff80 	bl	5644 <set_feature_config_start_addr>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
    5744:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
    5746:	b960      	cbnz	r0, 5762 <bma4_read_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
    5748:	f89d 0007 	ldrb.w	r0, [sp, #7]
    574c:	2801      	cmp	r0, #1
    574e:	d108      	bne.n	5762 <bma4_read_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    5750:	4629      	mov	r1, r5
    5752:	f000 f832 	bl	57ba <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
    5756:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5758:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    575a:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
    575c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    5760:	4798      	blx	r3
}
    5762:	4620      	mov	r0, r4
    5764:	b002      	add	sp, #8
    5766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
    576a:	8aaa      	ldrh	r2, [r5, #20]
    576c:	462b      	mov	r3, r5
    576e:	eb06 0108 	add.w	r1, r6, r8
    5772:	205e      	movs	r0, #94	; 0x5e
    5774:	f7ff fec8 	bl	5508 <read_regs>
                        if (rslt == BMA4_OK)
    5778:	4604      	mov	r4, r0
    577a:	b940      	cbnz	r0, 578e <bma4_read_regs+0xe4>
                            rslt = increment_feature_config_addr(dev);
    577c:	4628      	mov	r0, r5
    577e:	f7ff ff1f 	bl	55c0 <increment_feature_config_addr>
                            if (rslt == BMA4_OK)
    5782:	4604      	mov	r4, r0
    5784:	b918      	cbnz	r0, 578e <bma4_read_regs+0xe4>
                                index = index + dev->read_write_len;
    5786:	8aab      	ldrh	r3, [r5, #20]
    5788:	4498      	add	r8, r3
    578a:	fa1f f888 	uxth.w	r8, r8
                    for (idx = 0; idx < loop_count; idx++)
    578e:	f109 0901 	add.w	r9, r9, #1
    5792:	e7c5      	b.n	5720 <bma4_read_regs+0x76>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
    5794:	462b      	mov	r3, r5
    5796:	4622      	mov	r2, r4
    5798:	4631      	mov	r1, r6
    579a:	205e      	movs	r0, #94	; 0x5e
    579c:	f7ff feb4 	bl	5508 <read_regs>
    57a0:	e7d0      	b.n	5744 <bma4_read_regs+0x9a>
            rslt = read_regs(addr, data, len, dev);
    57a2:	462b      	mov	r3, r5
    57a4:	4638      	mov	r0, r7
    57a6:	f7ff feaf 	bl	5508 <read_regs>
    57aa:	4604      	mov	r4, r0
    57ac:	e7d9      	b.n	5762 <bma4_read_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
    57ae:	f04f 34ff 	mov.w	r4, #4294967295
    57b2:	e7d6      	b.n	5762 <bma4_read_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    57b4:	f06f 0409 	mvn.w	r4, #9
    57b8:	e7d3      	b.n	5762 <bma4_read_regs+0xb8>

000057ba <bma4_set_advance_power_save>:
{
    57ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
    57bc:	2300      	movs	r3, #0
{
    57be:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
    57c0:	4608      	mov	r0, r1
{
    57c2:	460c      	mov	r4, r1
    uint8_t data = 0;
    57c4:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    57c8:	f7ff fe90 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    57cc:	b9b8      	cbnz	r0, 57fe <bma4_set_advance_power_save+0x44>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
    57ce:	460b      	mov	r3, r1
    57d0:	2201      	movs	r2, #1
    57d2:	f10d 0107 	add.w	r1, sp, #7
    57d6:	207c      	movs	r0, #124	; 0x7c
    57d8:	f7ff ff67 	bl	56aa <bma4_read_regs>
        if (rslt == BMA4_OK)
    57dc:	b978      	cbnz	r0, 57fe <bma4_set_advance_power_save+0x44>
            data = BMA4_SET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE, adv_pwr_save);
    57de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57e2:	f005 0001 	and.w	r0, r5, #1
    57e6:	f023 0301 	bic.w	r3, r3, #1
    57ea:	4318      	orrs	r0, r3
    57ec:	f88d 0007 	strb.w	r0, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
    57f0:	4623      	mov	r3, r4
    57f2:	2201      	movs	r2, #1
    57f4:	f10d 0107 	add.w	r1, sp, #7
    57f8:	207c      	movs	r0, #124	; 0x7c
    57fa:	f000 f802 	bl	5802 <bma4_write_regs>
}
    57fe:	b003      	add	sp, #12
    5800:	bd30      	pop	{r4, r5, pc}

00005802 <bma4_write_regs>:
{
    5802:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5806:	461d      	mov	r5, r3
    5808:	4604      	mov	r4, r0
    uint8_t adv_pwr_save = 0;
    580a:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
    580c:	4628      	mov	r0, r5
{
    580e:	460f      	mov	r7, r1
    5810:	4616      	mov	r6, r2
    uint8_t adv_pwr_save = 0;
    5812:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    5816:	f7ff fe69 	bl	54ec <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
    581a:	2800      	cmp	r0, #0
    581c:	d173      	bne.n	5906 <bma4_write_regs+0x104>
    581e:	2900      	cmp	r1, #0
    5820:	d071      	beq.n	5906 <bma4_write_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
    5822:	2c5e      	cmp	r4, #94	; 0x5e
    5824:	d169      	bne.n	58fa <bma4_write_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
    5826:	4629      	mov	r1, r5
    5828:	f10d 0007 	add.w	r0, sp, #7
    582c:	f7ff ff21 	bl	5672 <bma4_get_advance_power_save>
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
    5830:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5834:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
    5836:	4604      	mov	r4, r0
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
    5838:	d109      	bne.n	584e <bma4_write_regs+0x4c>
    583a:	b940      	cbnz	r0, 584e <bma4_write_regs+0x4c>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    583c:	4629      	mov	r1, r5
    583e:	f7ff ffbc 	bl	57ba <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
    5842:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5844:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    5846:	4604      	mov	r4, r0
                dev->delay_us(450, dev->intf_ptr);
    5848:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    584c:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
    584e:	f016 0a01 	ands.w	sl, r6, #1
    5852:	d15b      	bne.n	590c <bma4_write_regs+0x10a>
    5854:	7dab      	ldrb	r3, [r5, #22]
    5856:	42b3      	cmp	r3, r6
    5858:	d358      	bcc.n	590c <bma4_write_regs+0x10a>
    585a:	2c00      	cmp	r4, #0
    585c:	d156      	bne.n	590c <bma4_write_regs+0x10a>
                if (dev->read_write_len < len)
    585e:	f8b5 b014 	ldrh.w	fp, [r5, #20]
    5862:	45b3      	cmp	fp, r6
    5864:	d242      	bcs.n	58ec <bma4_write_regs+0xea>
                    rslt = set_feature_config_start_addr(dev);
    5866:	4628      	mov	r0, r5
    5868:	f7ff feec 	bl	5644 <set_feature_config_start_addr>
                    if (rslt == BMA4_OK)
    586c:	4604      	mov	r4, r0
    586e:	bb20      	cbnz	r0, 58ba <bma4_write_regs+0xb8>
                    loop_count = len / dev->read_write_len;
    5870:	fbb6 f8fb 	udiv	r8, r6, fp
                    index = 0;
    5874:	46d1      	mov	r9, sl
                        for (i = 0; i < loop_count; i++)
    5876:	fa5f f38a 	uxtb.w	r3, sl
    587a:	4598      	cmp	r8, r3
    587c:	d821      	bhi.n	58c2 <bma4_write_regs+0xc0>
                    overflow = len % dev->read_write_len;
    587e:	fb0b 6218 	mls	r2, fp, r8, r6
                        if ((overflow) && (rslt == BMA4_OK))
    5882:	b13a      	cbz	r2, 5894 <bma4_write_regs+0x92>
    5884:	b9cc      	cbnz	r4, 58ba <bma4_write_regs+0xb8>
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
    5886:	462b      	mov	r3, r5
    5888:	eb07 0109 	add.w	r1, r7, r9
    588c:	205e      	movs	r0, #94	; 0x5e
    588e:	f7ff fe72 	bl	5576 <write_regs>
    5892:	4604      	mov	r4, r0
                        if (rslt == BMA4_OK)
    5894:	b98c      	cbnz	r4, 58ba <bma4_write_regs+0xb8>
                            rslt = set_feature_config_start_addr(dev);
    5896:	4628      	mov	r0, r5
    5898:	f7ff fed4 	bl	5644 <set_feature_config_start_addr>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
    589c:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
    589e:	b960      	cbnz	r0, 58ba <bma4_write_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
    58a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    58a4:	2801      	cmp	r0, #1
    58a6:	d108      	bne.n	58ba <bma4_write_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    58a8:	4629      	mov	r1, r5
    58aa:	f7ff ff86 	bl	57ba <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
    58ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    58b0:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    58b2:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
    58b4:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    58b8:	4798      	blx	r3
}
    58ba:	4620      	mov	r0, r4
    58bc:	b003      	add	sp, #12
    58be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
    58c2:	8aaa      	ldrh	r2, [r5, #20]
    58c4:	462b      	mov	r3, r5
    58c6:	eb07 0109 	add.w	r1, r7, r9
    58ca:	205e      	movs	r0, #94	; 0x5e
    58cc:	f7ff fe53 	bl	5576 <write_regs>
                            if (rslt == BMA4_OK)
    58d0:	4604      	mov	r4, r0
    58d2:	b940      	cbnz	r0, 58e6 <bma4_write_regs+0xe4>
                                rslt = increment_feature_config_addr(dev);
    58d4:	4628      	mov	r0, r5
    58d6:	f7ff fe73 	bl	55c0 <increment_feature_config_addr>
                                if (rslt == BMA4_OK)
    58da:	4604      	mov	r4, r0
    58dc:	b918      	cbnz	r0, 58e6 <bma4_write_regs+0xe4>
                                    index = index + dev->read_write_len;
    58de:	8aab      	ldrh	r3, [r5, #20]
    58e0:	4499      	add	r9, r3
    58e2:	fa1f f989 	uxth.w	r9, r9
                        for (i = 0; i < loop_count; i++)
    58e6:	f10a 0a01 	add.w	sl, sl, #1
    58ea:	e7c4      	b.n	5876 <bma4_write_regs+0x74>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
    58ec:	462b      	mov	r3, r5
    58ee:	4632      	mov	r2, r6
    58f0:	4639      	mov	r1, r7
    58f2:	205e      	movs	r0, #94	; 0x5e
    58f4:	f7ff fe3f 	bl	5576 <write_regs>
    58f8:	e7d0      	b.n	589c <bma4_write_regs+0x9a>
            rslt = write_regs(addr, data, len, dev);
    58fa:	4620      	mov	r0, r4
    58fc:	462b      	mov	r3, r5
    58fe:	f7ff fe3a 	bl	5576 <write_regs>
    5902:	4604      	mov	r4, r0
    5904:	e7d9      	b.n	58ba <bma4_write_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
    5906:	f04f 34ff 	mov.w	r4, #4294967295
    590a:	e7d6      	b.n	58ba <bma4_write_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    590c:	f06f 0409 	mvn.w	r4, #9
    5910:	e7d3      	b.n	58ba <bma4_write_regs+0xb8>

00005912 <bma4_init>:
{
    5912:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
    5914:	2300      	movs	r3, #0
{
    5916:	4604      	mov	r4, r0
    uint8_t data = 0;
    5918:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t dummy_read = 0;
    591c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    5920:	f7ff fde4 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    5924:	4602      	mov	r2, r0
    5926:	b9b0      	cbnz	r0, 5956 <bma4_init+0x44>
        if (dev->intf == BMA4_SPI_INTF)
    5928:	7a23      	ldrb	r3, [r4, #8]
    592a:	b9bb      	cbnz	r3, 595c <bma4_init+0x4a>
            dev->dummy_byte = 1;
    592c:	2201      	movs	r2, #1
    592e:	72e2      	strb	r2, [r4, #11]
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &dummy_read, 1, dev);
    5930:	4623      	mov	r3, r4
    5932:	f10d 0107 	add.w	r1, sp, #7
    5936:	f7ff feb8 	bl	56aa <bma4_read_regs>
        if (rslt == BMA4_OK)
    593a:	4602      	mov	r2, r0
    593c:	b958      	cbnz	r0, 5956 <bma4_init+0x44>
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &data, 1, dev);
    593e:	2201      	movs	r2, #1
    5940:	4623      	mov	r3, r4
    5942:	f10d 0106 	add.w	r1, sp, #6
    5946:	2000      	movs	r0, #0
    5948:	f7ff feaf 	bl	56aa <bma4_read_regs>
            if (rslt == BMA4_OK)
    594c:	4602      	mov	r2, r0
    594e:	b910      	cbnz	r0, 5956 <bma4_init+0x44>
                dev->chip_id = data;
    5950:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5954:	7023      	strb	r3, [r4, #0]
}
    5956:	4610      	mov	r0, r2
    5958:	b002      	add	sp, #8
    595a:	bd10      	pop	{r4, pc}
            dev->dummy_byte = 0;
    595c:	72e0      	strb	r0, [r4, #11]
        if (rslt == BMA4_OK)
    595e:	e7ee      	b.n	593e <bma4_init+0x2c>

00005960 <bma4_set_accel_enable>:
{
    5960:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
    5962:	2300      	movs	r3, #0
{
    5964:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
    5966:	4608      	mov	r0, r1
{
    5968:	460d      	mov	r5, r1
    uint8_t data = 0;
    596a:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    596e:	f7ff fdbd 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    5972:	b9c0      	cbnz	r0, 59a6 <bma4_set_accel_enable+0x46>
        rslt = bma4_read_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
    5974:	460b      	mov	r3, r1
    5976:	2201      	movs	r2, #1
    5978:	f10d 0107 	add.w	r1, sp, #7
    597c:	207d      	movs	r0, #125	; 0x7d
    597e:	f7ff fe94 	bl	56aa <bma4_read_regs>
        if (rslt == BMA4_OK)
    5982:	b980      	cbnz	r0, 59a6 <bma4_set_accel_enable+0x46>
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
    5984:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5988:	00a4      	lsls	r4, r4, #2
    598a:	f022 0204 	bic.w	r2, r2, #4
    598e:	f004 0404 	and.w	r4, r4, #4
    5992:	4314      	orrs	r4, r2
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
    5994:	462b      	mov	r3, r5
    5996:	2201      	movs	r2, #1
    5998:	f10d 0107 	add.w	r1, sp, #7
    599c:	207d      	movs	r0, #125	; 0x7d
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
    599e:	f88d 4007 	strb.w	r4, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
    59a2:	f7ff ff2e 	bl	5802 <bma4_write_regs>
}
    59a6:	b003      	add	sp, #12
    59a8:	bd30      	pop	{r4, r5, pc}

000059aa <bma4_set_command_register>:
{
    59aa:	b507      	push	{r0, r1, r2, lr}
    59ac:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
    59b0:	4608      	mov	r0, r1
    59b2:	f7ff fd9b 	bl	54ec <null_pointer_check>
    if (rslt == BMA4_OK)
    59b6:	b930      	cbnz	r0, 59c6 <bma4_set_command_register+0x1c>
        rslt = bma4_write_regs(BMA4_CMD_ADDR, &command_reg, 1, dev);
    59b8:	460b      	mov	r3, r1
    59ba:	2201      	movs	r2, #1
    59bc:	f10d 0107 	add.w	r1, sp, #7
    59c0:	207e      	movs	r0, #126	; 0x7e
    59c2:	f7ff ff1e 	bl	5802 <bma4_write_regs>
}
    59c6:	b003      	add	sp, #12
    59c8:	f85d fb04 	ldr.w	pc, [sp], #4

000059cc <bma456_init>:
{
    59cc:	b510      	push	{r4, lr}
    59ce:	4604      	mov	r4, r0
    rslt = bma4_init(dev);
    59d0:	f7ff ff9f 	bl	5912 <bma4_init>
    if (rslt == BMA4_OK)
    59d4:	b968      	cbnz	r0, 59f2 <bma456_init+0x26>
        if (dev->chip_id == BMA456_CHIP_ID)
    59d6:	7823      	ldrb	r3, [r4, #0]
    59d8:	2b16      	cmp	r3, #22
            dev->feature_len = BMA456_FEATURE_SIZE;
    59da:	bf01      	itttt	eq
    59dc:	2346      	moveq	r3, #70	; 0x46
    59de:	75a3      	strbeq	r3, [r4, #22]
            dev->resolution = 16;
    59e0:	f44f 7304 	moveq.w	r3, #528	; 0x210
    59e4:	81a3      	strheq	r3, [r4, #12]
            dev->config_size = sizeof(bma456_config_file);
    59e6:	bf06      	itte	eq
    59e8:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
    59ec:	85a3      	strheq	r3, [r4, #44]	; 0x2c
            rslt = BMA4_E_INVALID_SENSOR;
    59ee:	f06f 0003 	mvnne.w	r0, #3
}
    59f2:	bd10      	pop	{r4, pc}

000059f4 <bma456_map_interrupt>:
/*!
 * @brief This API sets/un-sets the user provided interrupt to either interrupt
 * pin1 or pin2 in the sensor.
 */
int8_t bma456_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable, struct bma4_dev *dev)
{
    59f4:	b430      	push	{r4, r5}
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
    59f6:	b13b      	cbz	r3, 5a08 <bma456_map_interrupt+0x14>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    59f8:	781c      	ldrb	r4, [r3, #0]
    59fa:	2c16      	cmp	r4, #22
    59fc:	d108      	bne.n	5a10 <bma456_map_interrupt+0x1c>
        {
            if (int_line <= 1)
    59fe:	2801      	cmp	r0, #1
    5a00:	d809      	bhi.n	5a16 <bma456_map_interrupt+0x22>
    {
        rslt = BMA4_E_NULL_PTR;
    }

    return rslt;
}
    5a02:	bc30      	pop	{r4, r5}
                rslt = bma4_map_interrupt(int_line, int_map, enable, dev);
    5a04:	f7fb bc10 	b.w	1228 <bma4_map_interrupt>
        rslt = BMA4_E_NULL_PTR;
    5a08:	f04f 30ff 	mov.w	r0, #4294967295
}
    5a0c:	bc30      	pop	{r4, r5}
    5a0e:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
    5a10:	f06f 0003 	mvn.w	r0, #3
    5a14:	e7fa      	b.n	5a0c <bma456_map_interrupt+0x18>
                rslt = BMA4_E_INT_LINE_INVALID;
    5a16:	f06f 0008 	mvn.w	r0, #8
    5a1a:	e7f7      	b.n	5a0c <bma456_map_interrupt+0x18>

00005a1c <bma456_feature_enable>:

/*!
 * @brief This API enables/disables the features of the sensor.
 */
int8_t bma456_feature_enable(uint8_t feature, uint8_t enable, struct bma4_dev *dev)
{
    5a1c:	b570      	push	{r4, r5, r6, lr}
    5a1e:	b092      	sub	sp, #72	; 0x48
    5a20:	4615      	mov	r5, r2
    5a22:	4604      	mov	r4, r0
    5a24:	460e      	mov	r6, r1
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
    5a26:	2242      	movs	r2, #66	; 0x42
    5a28:	2100      	movs	r1, #0
    5a2a:	a801      	add	r0, sp, #4
    5a2c:	9100      	str	r1, [sp, #0]
    5a2e:	f000 fb21 	bl	6074 <memset>
    int8_t rslt = BMA4_OK;
    uint8_t len = BMA456_FEATURE_SIZE;

    if (dev != NULL)
    5a32:	2d00      	cmp	r5, #0
    5a34:	d063      	beq.n	5afe <bma456_feature_enable+0xe2>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    5a36:	782b      	ldrb	r3, [r5, #0]
    5a38:	2b16      	cmp	r3, #22
    5a3a:	d163      	bne.n	5b04 <bma456_feature_enable+0xe8>
        {
            /* Read feature configuration data */
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
    5a3c:	462b      	mov	r3, r5
    5a3e:	2246      	movs	r2, #70	; 0x46
    5a40:	4669      	mov	r1, sp
    5a42:	205e      	movs	r0, #94	; 0x5e
    5a44:	f7ff fe31 	bl	56aa <bma4_read_regs>
            if (rslt == BMA4_OK)
    5a48:	bba0      	cbnz	r0, 5ab4 <bma456_feature_enable+0x98>
            {
                if (enable == TRUE)
    5a4a:	2e01      	cmp	r6, #1
    5a4c:	f004 0301 	and.w	r3, r4, #1
    5a50:	f004 0002 	and.w	r0, r4, #2
    5a54:	f004 0104 	and.w	r1, r4, #4
    5a58:	f004 0208 	and.w	r2, r4, #8
    5a5c:	f004 0410 	and.w	r4, r4, #16
    5a60:	d12a      	bne.n	5ab8 <bma456_feature_enable+0x9c>
    int8_t rslt = BMA4_OK;

    if ((dev != NULL) && (feature_config != NULL))
    {
        /* Enable step counter */
        if ((feature & BMA456_STEP_CNTR) > 0)
    5a62:	b12b      	cbz	r3, 5a70 <bma456_feature_enable+0x54>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_CNTR_EN_MSK;
    5a64:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    5a68:	f043 0310 	orr.w	r3, r3, #16
    5a6c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable step activity */
        if ((feature & BMA456_STEP_ACT) > 0)
    5a70:	b128      	cbz	r0, 5a7e <bma456_feature_enable+0x62>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_ACT_EN_MSK;
    5a72:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    5a76:	f043 0320 	orr.w	r3, r3, #32
    5a7a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable wrist wear wakeup */
        if ((feature & BMA456_WRIST_WEAR) > 0)
    5a7e:	b129      	cbz	r1, 5a8c <bma456_feature_enable+0x70>
        {
            index = BMA456_WRIST_WEAR_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_WRIST_WEAR_EN_MSK;
    5a80:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    5a84:	f043 0301 	orr.w	r3, r3, #1
    5a88:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        }

        /* Enable single - tap */
        if ((feature & BMA456_SINGLE_TAP) > 0)
    5a8c:	b12a      	cbz	r2, 5a9a <bma456_feature_enable+0x7e>
        {
            index = BMA456_SINGLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_SINGLE_TAP_EN_MSK;
    5a8e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    5a92:	f043 0301 	orr.w	r3, r3, #1
    5a96:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        }

        /* Enable  double- tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
    5a9a:	b12c      	cbz	r4, 5aa8 <bma456_feature_enable+0x8c>
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_DOUBLE_TAP_EN_MSK;
    5a9c:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
    5aa0:	f043 0301 	orr.w	r3, r3, #1

        /* Disable double-tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
    5aa4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        }

        /* Write the configured settings in the sensor */
        rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
    5aa8:	462b      	mov	r3, r5
    5aaa:	2246      	movs	r2, #70	; 0x46
    5aac:	4669      	mov	r1, sp
    5aae:	205e      	movs	r0, #94	; 0x5e
    5ab0:	f7ff fea7 	bl	5802 <bma4_write_regs>
}
    5ab4:	b012      	add	sp, #72	; 0x48
    5ab6:	bd70      	pop	{r4, r5, r6, pc}
        if ((feature & BMA456_STEP_CNTR) > 0)
    5ab8:	b12b      	cbz	r3, 5ac6 <bma456_feature_enable+0xaa>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_CNTR_EN_MSK);
    5aba:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    5abe:	f023 0310 	bic.w	r3, r3, #16
    5ac2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_STEP_ACT) > 0)
    5ac6:	b128      	cbz	r0, 5ad4 <bma456_feature_enable+0xb8>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_ACT_EN_MSK);
    5ac8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    5acc:	f023 0320 	bic.w	r3, r3, #32
    5ad0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_WRIST_WEAR) > 0)
    5ad4:	b129      	cbz	r1, 5ae2 <bma456_feature_enable+0xc6>
            feature_config[index] = feature_config[index] & (~BMA456_WRIST_WEAR_EN_MSK);
    5ad6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    5ada:	f023 0301 	bic.w	r3, r3, #1
    5ade:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        if ((feature & BMA456_SINGLE_TAP) > 0)
    5ae2:	b12a      	cbz	r2, 5af0 <bma456_feature_enable+0xd4>
            feature_config[index] = feature_config[index] & (~BMA456_SINGLE_TAP_EN_MSK);
    5ae4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    5ae8:	f023 0301 	bic.w	r3, r3, #1
    5aec:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        if ((feature & BMA456_DOUBLE_TAP) > 0)
    5af0:	2c00      	cmp	r4, #0
    5af2:	d0d9      	beq.n	5aa8 <bma456_feature_enable+0x8c>
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
    5af4:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
    5af8:	f023 0301 	bic.w	r3, r3, #1
    5afc:	e7d2      	b.n	5aa4 <bma456_feature_enable+0x88>
        rslt = BMA4_E_NULL_PTR;
    5afe:	f04f 30ff 	mov.w	r0, #4294967295
    5b02:	e7d7      	b.n	5ab4 <bma456_feature_enable+0x98>
            rslt = BMA4_E_INVALID_SENSOR;
    5b04:	f06f 0003 	mvn.w	r0, #3
    5b08:	e7d4      	b.n	5ab4 <bma456_feature_enable+0x98>

00005b0a <bma456_step_counter_set_watermark>:
{
    5b0a:	b530      	push	{r4, r5, lr}
    5b0c:	b093      	sub	sp, #76	; 0x4c
    5b0e:	460c      	mov	r4, r1
    5b10:	4605      	mov	r5, r0
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
    5b12:	2100      	movs	r1, #0
    5b14:	2242      	movs	r2, #66	; 0x42
    5b16:	a801      	add	r0, sp, #4
    5b18:	9100      	str	r1, [sp, #0]
    5b1a:	f000 faab 	bl	6074 <memset>
    if (dev != NULL)
    5b1e:	b1d4      	cbz	r4, 5b56 <bma456_step_counter_set_watermark+0x4c>
        if (dev->chip_id == BMA456_CHIP_ID)
    5b20:	7823      	ldrb	r3, [r4, #0]
    5b22:	2b16      	cmp	r3, #22
    5b24:	d11a      	bne.n	5b5c <bma456_step_counter_set_watermark+0x52>
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
    5b26:	4623      	mov	r3, r4
    5b28:	2246      	movs	r2, #70	; 0x46
    5b2a:	4669      	mov	r1, sp
    5b2c:	205e      	movs	r0, #94	; 0x5e
    5b2e:	f7ff fdbc 	bl	56aa <bma4_read_regs>
            if (rslt == BMA4_OK)
    5b32:	b970      	cbnz	r0, 5b52 <bma456_step_counter_set_watermark+0x48>
                data = BMA4_SET_BITS_POS_0(data, BMA456_STEP_CNTR_WM, step_counter_wm);
    5b34:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    5b38:	f3c5 0009 	ubfx	r0, r5, #0, #10
    5b3c:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
    5b40:	4318      	orrs	r0, r3
                feature_config[index] = BMA4_GET_LSB(data);
    5b42:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
                rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
    5b46:	4623      	mov	r3, r4
    5b48:	2246      	movs	r2, #70	; 0x46
    5b4a:	4669      	mov	r1, sp
    5b4c:	205e      	movs	r0, #94	; 0x5e
    5b4e:	f7ff fe58 	bl	5802 <bma4_write_regs>
}
    5b52:	b013      	add	sp, #76	; 0x4c
    5b54:	bd30      	pop	{r4, r5, pc}
        rslt = BMA4_E_NULL_PTR;
    5b56:	f04f 30ff 	mov.w	r0, #4294967295
    5b5a:	e7fa      	b.n	5b52 <bma456_step_counter_set_watermark+0x48>
            rslt = BMA4_E_INVALID_SENSOR;
    5b5c:	f06f 0003 	mvn.w	r0, #3
    5b60:	e7f7      	b.n	5b52 <bma456_step_counter_set_watermark+0x48>

00005b62 <bma456_reset_step_counter>:
{
    5b62:	b510      	push	{r4, lr}
    5b64:	b092      	sub	sp, #72	; 0x48
    5b66:	4604      	mov	r4, r0
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
    5b68:	2100      	movs	r1, #0
    5b6a:	2242      	movs	r2, #66	; 0x42
    5b6c:	a801      	add	r0, sp, #4
    5b6e:	9100      	str	r1, [sp, #0]
    5b70:	f000 fa80 	bl	6074 <memset>
    if (dev != NULL)
    5b74:	b1bc      	cbz	r4, 5ba6 <bma456_reset_step_counter+0x44>
        if (dev->chip_id == BMA456_CHIP_ID)
    5b76:	7823      	ldrb	r3, [r4, #0]
    5b78:	2b16      	cmp	r3, #22
    5b7a:	d117      	bne.n	5bac <bma456_reset_step_counter+0x4a>
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
    5b7c:	4623      	mov	r3, r4
    5b7e:	2246      	movs	r2, #70	; 0x46
    5b80:	4669      	mov	r1, sp
    5b82:	205e      	movs	r0, #94	; 0x5e
    5b84:	f7ff fd91 	bl	56aa <bma4_read_regs>
            if (rslt == BMA4_OK)
    5b88:	b958      	cbnz	r0, 5ba2 <bma456_reset_step_counter+0x40>
                feature_config[index] = BMA4_SET_BITSLICE(feature_config[index], BMA456_STEP_CNTR_RST, 1);
    5b8a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    5b8e:	f043 0304 	orr.w	r3, r3, #4
    5b92:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
                rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
    5b96:	2246      	movs	r2, #70	; 0x46
    5b98:	4623      	mov	r3, r4
    5b9a:	4669      	mov	r1, sp
    5b9c:	205e      	movs	r0, #94	; 0x5e
    5b9e:	f7ff fe30 	bl	5802 <bma4_write_regs>
}
    5ba2:	b012      	add	sp, #72	; 0x48
    5ba4:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
    5ba6:	f04f 30ff 	mov.w	r0, #4294967295
    5baa:	e7fa      	b.n	5ba2 <bma456_reset_step_counter+0x40>
            rslt = BMA4_E_INVALID_SENSOR;
    5bac:	f06f 0003 	mvn.w	r0, #3
    5bb0:	e7f7      	b.n	5ba2 <bma456_reset_step_counter+0x40>

00005bb2 <bma456_step_counter_output>:
{
    5bb2:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[BMA456_STEP_CNTR_DATA_SIZE] = { 0 };
    5bb4:	2300      	movs	r3, #0
    5bb6:	9301      	str	r3, [sp, #4]
{
    5bb8:	4604      	mov	r4, r0
    if ((dev != NULL) && (step_count != NULL))
    5bba:	460b      	mov	r3, r1
    5bbc:	b171      	cbz	r1, 5bdc <bma456_step_counter_output+0x2a>
    5bbe:	b168      	cbz	r0, 5bdc <bma456_step_counter_output+0x2a>
        if (dev->chip_id == BMA456_CHIP_ID)
    5bc0:	780a      	ldrb	r2, [r1, #0]
    5bc2:	2a16      	cmp	r2, #22
    5bc4:	d10d      	bne.n	5be2 <bma456_step_counter_output+0x30>
            rslt = bma4_read_regs(BMA4_STEP_CNT_OUT_0_ADDR, data, BMA456_STEP_CNTR_DATA_SIZE, dev);
    5bc6:	2204      	movs	r2, #4
    5bc8:	eb0d 0102 	add.w	r1, sp, r2
    5bcc:	201e      	movs	r0, #30
    5bce:	f7ff fd6c 	bl	56aa <bma4_read_regs>
            if (rslt == BMA4_OK)
    5bd2:	b908      	cbnz	r0, 5bd8 <bma456_step_counter_output+0x26>
                *step_count = step_count_0 | step_count_1 | step_count_2 | step_count_3;
    5bd4:	9b01      	ldr	r3, [sp, #4]
    5bd6:	6023      	str	r3, [r4, #0]
}
    5bd8:	b002      	add	sp, #8
    5bda:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
    5bdc:	f04f 30ff 	mov.w	r0, #4294967295
    5be0:	e7fa      	b.n	5bd8 <bma456_step_counter_output+0x26>
            rslt = BMA4_E_INVALID_SENSOR;
    5be2:	f06f 0003 	mvn.w	r0, #3
    5be6:	e7f7      	b.n	5bd8 <bma456_step_counter_output+0x26>

00005be8 <set_max30102_for_reading_data>:
{
    5be8:	b510      	push	{r4, lr}
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x40, 1); //reset
    5bea:	2140      	movs	r1, #64	; 0x40
    5bec:	2009      	movs	r0, #9
    5bee:	f7fb fb83 	bl	12f8 <max30102_i2c_write.isra.0>
    5bf2:	4604      	mov	r4, r0
	return z_impl_k_sleep(timeout);
    5bf4:	2100      	movs	r1, #0
    5bf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5bfa:	f7ff f9a7 	bl	4f4c <z_impl_k_sleep>
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0xC0, 1);
    5bfe:	21c0      	movs	r1, #192	; 0xc0
    5c00:	2002      	movs	r0, #2
    5c02:	f7fb fb79 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
    5c06:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0xC0, 1);
    5c08:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
    5c0a:	2003      	movs	r0, #3
    5c0c:	f7fb fb74 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0xC0, 1);
    5c10:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
    5c12:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
    5c14:	2100      	movs	r1, #0
    5c16:	2004      	movs	r0, #4
    5c18:	f7fb fb6e 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
    5c1c:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
    5c1e:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
    5c20:	2100      	movs	r1, #0
    5c22:	2005      	movs	r0, #5
    5c24:	f7fb fb68 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
    5c28:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
    5c2a:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
    5c2c:	2100      	movs	r1, #0
    5c2e:	2006      	movs	r0, #6
    5c30:	f7fb fb62 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
    5c34:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
    5c36:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x7F, 1);
    5c38:	217f      	movs	r1, #127	; 0x7f
    5c3a:	2008      	movs	r0, #8
    5c3c:	f7fb fb5c 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
    5c40:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x7F, 1);
    5c42:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
    5c44:	2103      	movs	r1, #3
    5c46:	2009      	movs	r0, #9
    5c48:	f7fb fb56 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x7F, 1);
    5c4c:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
    5c4e:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
    5c50:	2127      	movs	r1, #39	; 0x27
    5c52:	200a      	movs	r0, #10
    5c54:	f7fb fb50 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
    5c58:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
    5c5a:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x1F, 1);
    5c5c:	211f      	movs	r1, #31
    5c5e:	200c      	movs	r0, #12
    5c60:	f7fb fb4a 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
    5c64:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x1F, 1);
    5c66:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x1F, 1);
    5c68:	211f      	movs	r1, #31
    5c6a:	200d      	movs	r0, #13
    5c6c:	f7fb fb44 	bl	12f8 <max30102_i2c_write.isra.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x1F, 1);
    5c70:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x1F, 1);
    5c72:	4320      	orrs	r0, r4
}
    5c74:	b280      	uxth	r0, r0
    5c76:	bd10      	pop	{r4, pc}

00005c78 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5c78:	0413      	lsls	r3, r2, #16
{
    5c7a:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
    5c7c:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5c7e:	d507      	bpl.n	5c90 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5c80:	68c5      	ldr	r5, [r0, #12]
    5c82:	2301      	movs	r3, #1
    5c84:	682d      	ldr	r5, [r5, #0]
    5c86:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5c88:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    5c8a:	bf18      	it	ne
    5c8c:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5c90:	69a4      	ldr	r4, [r4, #24]
    5c92:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    5c96:	46a4      	mov	ip, r4
    5c98:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
    5c9c:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5c9e:	4760      	bx	ip

00005ca0 <gpio_pin_configure>:
{
    5ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_driver_data *data =
    5ca2:	68c5      	ldr	r5, [r0, #12]
{
    5ca4:	460f      	mov	r7, r1
    5ca6:	4616      	mov	r6, r2
	return api->pin_configure(port, pin, flags);
    5ca8:	6883      	ldr	r3, [r0, #8]
    5caa:	681b      	ldr	r3, [r3, #0]
    5cac:	4798      	blx	r3
	if (ret != 0) {
    5cae:	b948      	cbnz	r0, 5cc4 <gpio_pin_configure+0x24>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5cb0:	682c      	ldr	r4, [r5, #0]
    5cb2:	2301      	movs	r3, #1
    5cb4:	fa03 f107 	lsl.w	r1, r3, r7
    5cb8:	07f3      	lsls	r3, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5cba:	bf4c      	ite	mi
    5cbc:	4321      	orrmi	r1, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5cbe:	ea24 0101 	bicpl.w	r1, r4, r1
    5cc2:	6029      	str	r1, [r5, #0]
}
    5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005cc6 <match_led_to_button>:

    return led;
}

bool match_led_to_button(struct device *button, struct device *led)
{
    5cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
    5cc8:	68c5      	ldr	r5, [r0, #12]
    5cca:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
    5ccc:	6883      	ldr	r3, [r0, #8]
    5cce:	a901      	add	r1, sp, #4
    5cd0:	685b      	ldr	r3, [r3, #4]
    5cd2:	4798      	blx	r3
	if (ret == 0) {
    5cd4:	b920      	cbnz	r0, 5ce0 <match_led_to_button+0x1a>
		*value ^= data->invert;
    5cd6:	682b      	ldr	r3, [r5, #0]
    5cd8:	9801      	ldr	r0, [sp, #4]
    5cda:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    5cdc:	f3c0 4040 	ubfx	r0, r0, #17, #1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5ce0:	68e3      	ldr	r3, [r4, #12]
    5ce2:	681b      	ldr	r3, [r3, #0]
    bool val;
    val = gpio_pin_get(button, SW0_GPIO_PIN);
    5ce4:	1e05      	subs	r5, r0, #0
    5ce6:	bf18      	it	ne
    5ce8:	2501      	movne	r5, #1
    5cea:	055b      	lsls	r3, r3, #21
    gpio_pin_set(led, LED0_GPIO_PIN, !val);
    5cec:	bf5a      	itte	pl
    5cee:	fab0 f080 	clzpl	r0, r0
    5cf2:	0940      	lsrpl	r0, r0, #5
    5cf4:	4628      	movmi	r0, r5
	if (value != 0)	{
    5cf6:	b140      	cbz	r0, 5d0a <match_led_to_button+0x44>
	return api->port_set_bits_raw(port, pins);
    5cf8:	68a3      	ldr	r3, [r4, #8]
    5cfa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5d00:	4620      	mov	r0, r4
    5d02:	4798      	blx	r3
    return val;
}
    5d04:	4628      	mov	r0, r5
    5d06:	b003      	add	sp, #12
    5d08:	bd30      	pop	{r4, r5, pc}
    5d0a:	68a3      	ldr	r3, [r4, #8]
    5d0c:	691b      	ldr	r3, [r3, #16]
    5d0e:	e7f5      	b.n	5cfc <match_led_to_button+0x36>

00005d10 <gpio_pin_configure>:
{
    5d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_driver_data *data =
    5d12:	68c5      	ldr	r5, [r0, #12]
{
    5d14:	460f      	mov	r7, r1
    5d16:	4616      	mov	r6, r2
	return api->pin_configure(port, pin, flags);
    5d18:	6883      	ldr	r3, [r0, #8]
    5d1a:	681b      	ldr	r3, [r3, #0]
    5d1c:	4798      	blx	r3
	if (ret != 0) {
    5d1e:	b948      	cbnz	r0, 5d34 <gpio_pin_configure+0x24>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5d20:	682b      	ldr	r3, [r5, #0]
    5d22:	2401      	movs	r4, #1
    5d24:	fa04 f107 	lsl.w	r1, r4, r7
    5d28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5d2c:	bf14      	ite	ne
    5d2e:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5d30:	438b      	biceq	r3, r1
    5d32:	602b      	str	r3, [r5, #0]
}
    5d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005d36 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5d36:	2301      	movs	r3, #1
    5d38:	fa03 f101 	lsl.w	r1, r3, r1
    5d3c:	68c3      	ldr	r3, [r0, #12]
    5d3e:	681b      	ldr	r3, [r3, #0]
    5d40:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    5d42:	bf18      	it	ne
    5d44:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    5d48:	b112      	cbz	r2, 5d50 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    5d4a:	6883      	ldr	r3, [r0, #8]
    5d4c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5d4e:	4718      	bx	r3
    5d50:	6883      	ldr	r3, [r0, #8]
    5d52:	691b      	ldr	r3, [r3, #16]
    5d54:	e7fb      	b.n	5d4e <gpio_pin_set+0x18>

00005d56 <arch_printk_char_out>:
}
    5d56:	2000      	movs	r0, #0
    5d58:	4770      	bx	lr

00005d5a <print_err>:
{
    5d5a:	b570      	push	{r4, r5, r6, lr}
    5d5c:	4604      	mov	r4, r0
    5d5e:	460d      	mov	r5, r1
	out('E', ctx);
    5d60:	2045      	movs	r0, #69	; 0x45
    5d62:	47a0      	blx	r4
	out('R', ctx);
    5d64:	4629      	mov	r1, r5
    5d66:	2052      	movs	r0, #82	; 0x52
    5d68:	47a0      	blx	r4
	out('R', ctx);
    5d6a:	4629      	mov	r1, r5
    5d6c:	4623      	mov	r3, r4
    5d6e:	2052      	movs	r0, #82	; 0x52
}
    5d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    5d74:	4718      	bx	r3

00005d76 <printk>:
{
    5d76:	b40f      	push	{r0, r1, r2, r3}
    5d78:	b507      	push	{r0, r1, r2, lr}
    5d7a:	a904      	add	r1, sp, #16
    5d7c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5d80:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    5d82:	f7fb ff0f 	bl	1ba4 <vprintk>
}
    5d86:	b003      	add	sp, #12
    5d88:	f85d eb04 	ldr.w	lr, [sp], #4
    5d8c:	b004      	add	sp, #16
    5d8e:	4770      	bx	lr

00005d90 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5d90:	4604      	mov	r4, r0
    5d92:	b508      	push	{r3, lr}
    5d94:	4608      	mov	r0, r1
    5d96:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    5d98:	461a      	mov	r2, r3
    5d9a:	47a0      	blx	r4
	return z_impl_k_current_get();
    5d9c:	f7ff f8f6 	bl	4f8c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    5da0:	f7fc fb20 	bl	23e4 <z_impl_k_thread_abort>

00005da4 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    5da4:	6803      	ldr	r3, [r0, #0]
    5da6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    5daa:	6883      	ldr	r3, [r0, #8]
    5dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    5db0:	bf2c      	ite	cs
    5db2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    5db6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    5dba:	4770      	bx	lr

00005dbc <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    5dbc:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    5dbe:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    5dc0:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    5dc2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    5dc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    5dca:	bf2c      	ite	cs
    5dcc:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    5dd0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    5dd4:	bd10      	pop	{r4, pc}

00005dd6 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    5dda:	2200      	movs	r2, #0
    5ddc:	4604      	mov	r4, r0
    5dde:	460d      	mov	r5, r1
    5de0:	f7ff ffe0 	bl	5da4 <chunk_field>
    5de4:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5de6:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    5de8:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5dee:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5df2:	bf34      	ite	cc
    5df4:	2000      	movcc	r0, #0
    5df6:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    5df8:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5dfa:	f1c0 001f 	rsb	r0, r0, #31
    5dfe:	1a80      	subs	r0, r0, r2
    5e00:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    5e04:	684a      	ldr	r2, [r1, #4]
    5e06:	1c56      	adds	r6, r2, #1
    5e08:	604e      	str	r6, [r1, #4]
    5e0a:	b9a2      	cbnz	r2, 5e36 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    5e0c:	2201      	movs	r2, #1
    5e0e:	fa02 f100 	lsl.w	r1, r2, r0
    5e12:	6962      	ldr	r2, [r4, #20]
    5e14:	430a      	orrs	r2, r1
    5e16:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    5e18:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    5e1a:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    5e1e:	2202      	movs	r2, #2
    5e20:	462b      	mov	r3, r5
    5e22:	4620      	mov	r0, r4
    5e24:	f7ff ffca 	bl	5dbc <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    5e28:	2203      	movs	r2, #3
    5e2a:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    5e2c:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    5e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    5e32:	f7ff bfc3 	b.w	5dbc <chunk_set>
		chunkid_t second = h->buckets[b].next;
    5e36:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    5e3a:	2202      	movs	r2, #2
    5e3c:	4639      	mov	r1, r7
    5e3e:	4620      	mov	r0, r4
    5e40:	f7ff ffb0 	bl	5da4 <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
    5e44:	2202      	movs	r2, #2
    5e46:	4603      	mov	r3, r0
    5e48:	4606      	mov	r6, r0
    5e4a:	4629      	mov	r1, r5
    5e4c:	4620      	mov	r0, r4
    5e4e:	f7ff ffb5 	bl	5dbc <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    5e52:	463b      	mov	r3, r7
    5e54:	2203      	movs	r2, #3
    5e56:	4629      	mov	r1, r5
    5e58:	4620      	mov	r0, r4
    5e5a:	f7ff ffaf 	bl	5dbc <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    5e5e:	2203      	movs	r2, #3
    5e60:	4631      	mov	r1, r6
    5e62:	462b      	mov	r3, r5
    5e64:	4620      	mov	r0, r4
    5e66:	f7ff ffa9 	bl	5dbc <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    5e6a:	2202      	movs	r2, #2
    5e6c:	4639      	mov	r1, r7
    5e6e:	e7dd      	b.n	5e2c <free_list_add+0x56>

00005e70 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    5e72:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    5e74:	1dcc      	adds	r4, r1, #7
    5e76:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    5e7a:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5e7e:	1b1b      	subs	r3, r3, r4
    5e80:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    5e82:	f647 72ff 	movw	r2, #32767	; 0x7fff
    5e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5e8a:	bf2c      	ite	cs
    5e8c:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    5e90:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5e92:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
    5e94:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    5e96:	60e1      	str	r1, [r4, #12]
    5e98:	bf94      	ite	ls
    5e9a:	2100      	movls	r1, #0
    5e9c:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5e9e:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    5ea2:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    5ea6:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    5eaa:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    5eac:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    5eb0:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
    5eb4:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    5eb6:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    5eb8:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    5eba:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    5ebc:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5ebe:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    5ec0:	4684      	mov	ip, r0
    5ec2:	68a2      	ldr	r2, [r4, #8]
    5ec4:	42ba      	cmp	r2, r7
    5ec6:	bf94      	ite	ls
    5ec8:	2200      	movls	r2, #0
    5eca:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5ecc:	f1c2 021f 	rsb	r2, r2, #31
    5ed0:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    5ed2:	4290      	cmp	r0, r2
    5ed4:	dd0a      	ble.n	5eec <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    5ed6:	1a5b      	subs	r3, r3, r1
    5ed8:	4620      	mov	r0, r4
    5eda:	2200      	movs	r2, #0
    5edc:	f7ff ff6e 	bl	5dbc <chunk_set>
	free_list_add(h, h->chunk0);
    5ee0:	6921      	ldr	r1, [r4, #16]
    5ee2:	4620      	mov	r0, r4
}
    5ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    5ee8:	f7ff bf75 	b.w	5dd6 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    5eec:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    5ef0:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    5ef2:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    5ef6:	e7e4      	b.n	5ec2 <sys_heap_init+0x52>

00005ef8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5ef8:	4770      	bx	lr

00005efa <get_status>:
	data = get_sub_data(dev, type);
    5efa:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    5efc:	b2c9      	uxtb	r1, r1
	if (data->started) {
    5efe:	220c      	movs	r2, #12
    5f00:	fb02 3101 	mla	r1, r2, r1, r3
    5f04:	7a4b      	ldrb	r3, [r1, #9]
    5f06:	b923      	cbnz	r3, 5f12 <get_status+0x18>
	if (data->ref > 0) {
    5f08:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    5f0a:	fab0 f080 	clz	r0, r0
    5f0e:	0940      	lsrs	r0, r0, #5
    5f10:	4770      	bx	lr
    5f12:	2002      	movs	r0, #2
}
    5f14:	4770      	bx	lr

00005f16 <clock_stop>:
{
    5f16:	b570      	push	{r4, r5, r6, lr}
    5f18:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    5f1a:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    5f1c:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    5f1e:	f04f 0320 	mov.w	r3, #32
    5f22:	f3ef 8611 	mrs	r6, BASEPRI
    5f26:	f383 8811 	msr	BASEPRI, r3
    5f2a:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    5f2e:	220c      	movs	r2, #12
    5f30:	434a      	muls	r2, r1
    5f32:	18ab      	adds	r3, r5, r2
    5f34:	7a18      	ldrb	r0, [r3, #8]
    5f36:	b190      	cbz	r0, 5f5e <clock_stop+0x48>
	data->ref--;
    5f38:	3801      	subs	r0, #1
    5f3a:	b2c0      	uxtb	r0, r0
    5f3c:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    5f3e:	b988      	cbnz	r0, 5f64 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    5f40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
    5f44:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f46:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
    5f48:	6058      	str	r0, [r3, #4]
    5f4a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5f4e:	2101      	movs	r1, #1
    5f50:	6011      	str	r1, [r2, #0]
		data->started = false;
    5f52:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    5f54:	f386 8811 	msr	BASEPRI, r6
    5f58:	f3bf 8f6f 	isb	sy
}
    5f5c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    5f5e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5f62:	e7f7      	b.n	5f54 <clock_stop+0x3e>
	int err = 0;
    5f64:	2000      	movs	r0, #0
    5f66:	e7f5      	b.n	5f54 <clock_stop+0x3e>

00005f68 <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5f68:	2200      	movs	r2, #0
{
    5f6a:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5f6c:	2101      	movs	r1, #1
{
    5f6e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5f70:	4610      	mov	r0, r2
    5f72:	f7fc f857 	bl	2024 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    5f76:	2000      	movs	r0, #0
    5f78:	f7fc f844 	bl	2004 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f80:	2201      	movs	r2, #1
    5f82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    5f86:	2203      	movs	r2, #3
    5f88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    5f8c:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
    5f8e:	2000      	movs	r0, #0
	list->tail = NULL;
    5f90:	e9c3 0000 	strd	r0, r0, [r3]
    5f94:	68e3      	ldr	r3, [r4, #12]
    5f96:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    5f9a:	bd10      	pop	{r4, pc}

00005f9c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    5f9c:	2200      	movs	r2, #0
    5f9e:	f7fb be61 	b.w	1c64 <clock_async_start>

00005fa2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5fa2:	4770      	bx	lr

00005fa4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    5fa4:	4770      	bx	lr

00005fa6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    5fa6:	f7fb bfe3 	b.w	1f70 <_DoInit>

00005faa <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    5faa:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5fac:	f7ff fffb 	bl	5fa6 <SEGGER_RTT_Init>

	return 0;
}
    5fb0:	2000      	movs	r0, #0
    5fb2:	bd08      	pop	{r3, pc}

00005fb4 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5fb4:	2100      	movs	r1, #0
    5fb6:	2001      	movs	r0, #1
    5fb8:	f000 b800 	b.w	5fbc <z_arm_fatal_error>

00005fbc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5fbc:	f000 bbd5 	b.w	676a <z_fatal_error>

00005fc0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5fc0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5fc2:	6800      	ldr	r0, [r0, #0]
    5fc4:	f000 bbd1 	b.w	676a <z_fatal_error>

00005fc8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5fc8:	b508      	push	{r3, lr}
	handler();
    5fca:	f7fc f8e3 	bl	2194 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5fd2:	f7fc b925 	b.w	2220 <z_arm_exc_exit>

00005fd6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5fd6:	3901      	subs	r1, #1
    5fd8:	4603      	mov	r3, r0
    5fda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5fde:	b90a      	cbnz	r2, 5fe4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5fe0:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5fe2:	4770      	bx	lr
		*d = *s;
    5fe4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5fe8:	e7f7      	b.n	5fda <strcpy+0x4>

00005fea <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    5fea:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    5fec:	4603      	mov	r3, r0
    5fee:	781a      	ldrb	r2, [r3, #0]
    5ff0:	428a      	cmp	r2, r1
    5ff2:	4618      	mov	r0, r3
    5ff4:	f103 0301 	add.w	r3, r3, #1
    5ff8:	d004      	beq.n	6004 <strchr+0x1a>
    5ffa:	2a00      	cmp	r2, #0
    5ffc:	d1f7      	bne.n	5fee <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    5ffe:	2900      	cmp	r1, #0
    6000:	bf18      	it	ne
    6002:	2000      	movne	r0, #0
}
    6004:	4770      	bx	lr

00006006 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6006:	1e43      	subs	r3, r0, #1
    6008:	3901      	subs	r1, #1
    600a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    600e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6012:	4282      	cmp	r2, r0
    6014:	d101      	bne.n	601a <strcmp+0x14>
    6016:	2a00      	cmp	r2, #0
    6018:	d1f7      	bne.n	600a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    601a:	1a10      	subs	r0, r2, r0
    601c:	4770      	bx	lr

0000601e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    601e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6020:	ea81 0400 	eor.w	r4, r1, r0
    6024:	07a5      	lsls	r5, r4, #30
    6026:	4603      	mov	r3, r0
    6028:	d00b      	beq.n	6042 <memcpy+0x24>
    602a:	3b01      	subs	r3, #1
    602c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    602e:	4291      	cmp	r1, r2
    6030:	d11b      	bne.n	606a <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6032:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    6034:	2a00      	cmp	r2, #0
    6036:	d0fc      	beq.n	6032 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    6038:	f811 4b01 	ldrb.w	r4, [r1], #1
    603c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    6040:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    6042:	079c      	lsls	r4, r3, #30
    6044:	d1f6      	bne.n	6034 <memcpy+0x16>
    6046:	f022 0403 	bic.w	r4, r2, #3
    604a:	1f1d      	subs	r5, r3, #4
    604c:	0896      	lsrs	r6, r2, #2
    604e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    6050:	42b9      	cmp	r1, r7
    6052:	d105      	bne.n	6060 <memcpy+0x42>
    6054:	f06f 0503 	mvn.w	r5, #3
    6058:	fb05 2206 	mla	r2, r5, r6, r2
    605c:	4423      	add	r3, r4
    605e:	e7e4      	b.n	602a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    6060:	f851 cb04 	ldr.w	ip, [r1], #4
    6064:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    6068:	e7f2      	b.n	6050 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    606a:	f811 4b01 	ldrb.w	r4, [r1], #1
    606e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6072:	e7dc      	b.n	602e <memcpy+0x10>

00006074 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    6074:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6076:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6078:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    607a:	079c      	lsls	r4, r3, #30
    607c:	d111      	bne.n	60a2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    607e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    6082:	f022 0603 	bic.w	r6, r2, #3
    6086:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    608a:	441e      	add	r6, r3
    608c:	0894      	lsrs	r4, r2, #2
    608e:	42b3      	cmp	r3, r6
    6090:	d10d      	bne.n	60ae <memset+0x3a>
    6092:	f06f 0503 	mvn.w	r5, #3
    6096:	fb05 2204 	mla	r2, r5, r4, r2
    609a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    609c:	4293      	cmp	r3, r2
    609e:	d109      	bne.n	60b4 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    60a0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    60a2:	2a00      	cmp	r2, #0
    60a4:	d0fc      	beq.n	60a0 <memset+0x2c>
		*(d_byte++) = c_byte;
    60a6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    60aa:	3a01      	subs	r2, #1
    60ac:	e7e5      	b.n	607a <memset+0x6>
		*(d_word++) = c_word;
    60ae:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    60b2:	e7ec      	b.n	608e <memset+0x1a>
		*(d_byte++) = c_byte;
    60b4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    60b8:	e7f0      	b.n	609c <memset+0x28>

000060ba <_to_x>:
{
    60ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    60bc:	4603      	mov	r3, r0
    60be:	4614      	mov	r4, r2
    60c0:	4602      	mov	r2, r0
		unsigned int d = n % base;
    60c2:	fbb1 f0f4 	udiv	r0, r1, r4
    60c6:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    60ca:	2d09      	cmp	r5, #9
    60cc:	460f      	mov	r7, r1
    60ce:	bf8c      	ite	hi
    60d0:	2627      	movhi	r6, #39	; 0x27
    60d2:	2600      	movls	r6, #0
		n /= base;
    60d4:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    60d6:	3530      	adds	r5, #48	; 0x30
    60d8:	4610      	mov	r0, r2
    60da:	4435      	add	r5, r6
	} while (n);
    60dc:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    60de:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
    60e2:	d205      	bcs.n	60f0 <_to_x+0x36>
	*buf = 0;
    60e4:	2100      	movs	r1, #0
    60e6:	7001      	strb	r1, [r0, #0]
	len = buf - start;
    60e8:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
    60ea:	429a      	cmp	r2, r3
    60ec:	d802      	bhi.n	60f4 <_to_x+0x3a>
}
    60ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60f0:	4602      	mov	r2, r0
    60f2:	e7e6      	b.n	60c2 <_to_x+0x8>
		char tmp = *buf;
    60f4:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
    60f6:	781c      	ldrb	r4, [r3, #0]
    60f8:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
    60fc:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
    6100:	e7f3      	b.n	60ea <_to_x+0x30>

00006102 <_rlrshift>:
{
    6102:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    6104:	e9d0 6500 	ldrd	r6, r5, [r0]
    6108:	0872      	lsrs	r2, r6, #1
    610a:	f006 0301 	and.w	r3, r6, #1
    610e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    6112:	189b      	adds	r3, r3, r2
    6114:	f04f 0100 	mov.w	r1, #0
    6118:	ea4f 0455 	mov.w	r4, r5, lsr #1
    611c:	eb44 0101 	adc.w	r1, r4, r1
    6120:	e9c0 3100 	strd	r3, r1, [r0]
}
    6124:	bd70      	pop	{r4, r5, r6, pc}

00006126 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    6126:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    612a:	b5f0      	push	{r4, r5, r6, r7, lr}
	rem += 2U;
    612c:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    612e:	f04f 0705 	mov.w	r7, #5
    6132:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    6136:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    613a:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    613e:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    6142:	fb07 f10e 	mul.w	r1, r7, lr
    6146:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    614a:	08f2      	lsrs	r2, r6, #3
    614c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    6150:	fbb2 f1f7 	udiv	r1, r2, r7
    6154:	00ca      	lsls	r2, r1, #3
		quot += q;
    6156:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    615a:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    615e:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
    6162:	fba2 2307 	umull	r2, r3, r2, r7
    6166:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    6168:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    616c:	18e4      	adds	r4, r4, r3
    616e:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
    6172:	e9c0 4500 	strd	r4, r5, [r0]
}
    6176:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006178 <_get_digit>:
	if (*digit_count > 0) {
    6178:	680b      	ldr	r3, [r1, #0]
    617a:	2b00      	cmp	r3, #0
{
    617c:	b570      	push	{r4, r5, r6, lr}
    617e:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    6180:	dd0f      	ble.n	61a2 <_get_digit+0x2a>
		*fr = *fr * 10U;
    6182:	6822      	ldr	r2, [r4, #0]
    6184:	6840      	ldr	r0, [r0, #4]
		*digit_count -= 1;
    6186:	3b01      	subs	r3, #1
    6188:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    618a:	210a      	movs	r1, #10
    618c:	fba2 5601 	umull	r5, r6, r2, r1
    6190:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    6194:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    6198:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    619c:	0f30      	lsrs	r0, r6, #28
    619e:	3030      	adds	r0, #48	; 0x30
}
    61a0:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    61a2:	2030      	movs	r0, #48	; 0x30
    61a4:	e7fc      	b.n	61a0 <_get_digit+0x28>

000061a6 <_stdout_hook_default>:
}
    61a6:	f04f 30ff 	mov.w	r0, #4294967295
    61aa:	4770      	bx	lr

000061ac <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    61ac:	f7fc bee2 	b.w	2f74 <z_impl_zephyr_fputc>

000061b0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    61b0:	f7fd be92 	b.w	3ed8 <SystemInit>

000061b4 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    61b4:	f1a0 0308 	sub.w	r3, r0, #8
    61b8:	f3bf 8f5b 	dmb	ish
    61bc:	e853 2f00 	ldrex	r2, [r3]
    61c0:	1c51      	adds	r1, r2, #1
    61c2:	e843 1c00 	strex	ip, r1, [r3]
    61c6:	f1bc 0f00 	cmp.w	ip, #0
    61ca:	d1f7      	bne.n	61bc <adc_context_on_timer_expired+0x8>
    61cc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    61d0:	b91a      	cbnz	r2, 61da <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    61d2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    61d6:	f7fc bf21 	b.w	301c <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    61da:	f06f 030f 	mvn.w	r3, #15
    61de:	6603      	str	r3, [r0, #96]	; 0x60
}
    61e0:	4770      	bx	lr

000061e2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    61e2:	6843      	ldr	r3, [r0, #4]
    61e4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    61e6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    61ea:	600b      	str	r3, [r1, #0]
}
    61ec:	2000      	movs	r0, #0
    61ee:	4770      	bx	lr

000061f0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    61f0:	6843      	ldr	r3, [r0, #4]
    61f2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    61f4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    61f8:	4042      	eors	r2, r0
    61fa:	400a      	ands	r2, r1
    61fc:	4042      	eors	r2, r0
    p_reg->OUT = value;
    61fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6202:	2000      	movs	r0, #0
    6204:	4770      	bx	lr

00006206 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6206:	6843      	ldr	r3, [r0, #4]
    6208:	685b      	ldr	r3, [r3, #4]
}
    620a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    620c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6210:	4770      	bx	lr

00006212 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6212:	6843      	ldr	r3, [r0, #4]
    6214:	685b      	ldr	r3, [r3, #4]
}
    6216:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6218:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    621c:	4770      	bx	lr

0000621e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    621e:	6843      	ldr	r3, [r0, #4]
    6220:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6222:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6226:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6228:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    622c:	2000      	movs	r0, #0
    622e:	4770      	bx	lr

00006230 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6230:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    6232:	6858      	ldr	r0, [r3, #4]
{
    6234:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    6236:	b158      	cbz	r0, 6250 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6238:	2400      	movs	r4, #0
    623a:	4281      	cmp	r1, r0
    623c:	d113      	bne.n	6266 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    623e:	6808      	ldr	r0, [r1, #0]
    6240:	b95c      	cbnz	r4, 625a <gpio_nrfx_manage_callback+0x2a>
    6242:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    6244:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6246:	42a1      	cmp	r1, r4
    6248:	d100      	bne.n	624c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    624a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    624c:	2000      	movs	r0, #0
    624e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    6250:	b972      	cbnz	r2, 6270 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    6252:	2000      	movs	r0, #0
}
    6254:	bd30      	pop	{r4, r5, pc}
    6256:	4628      	mov	r0, r5
    6258:	e7ef      	b.n	623a <gpio_nrfx_manage_callback+0xa>
    625a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    625c:	6898      	ldr	r0, [r3, #8]
    625e:	4281      	cmp	r1, r0
	list->tail = node;
    6260:	bf08      	it	eq
    6262:	609c      	streq	r4, [r3, #8]
}
    6264:	e7f2      	b.n	624c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6266:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6268:	4604      	mov	r4, r0
    626a:	2d00      	cmp	r5, #0
    626c:	d1f3      	bne.n	6256 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    626e:	b13a      	cbz	r2, 6280 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    6270:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6272:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6274:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    6276:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6278:	2800      	cmp	r0, #0
    627a:	d1ea      	bne.n	6252 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    627c:	6099      	str	r1, [r3, #8]
}
    627e:	e7e9      	b.n	6254 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6280:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6284:	e7e6      	b.n	6254 <gpio_nrfx_manage_callback+0x24>

00006286 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    6286:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    628a:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
    628c:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    628e:	d111      	bne.n	62b4 <gpio_nrfx_pin_interrupt_configure+0x2e>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6290:	6845      	ldr	r5, [r0, #4]
    6292:	7a2e      	ldrb	r6, [r5, #8]
    6294:	f001 051f 	and.w	r5, r1, #31
    6298:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    629c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    62a0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    62a4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    62a8:	07ed      	lsls	r5, r5, #31
    62aa:	d507      	bpl.n	62bc <gpio_nrfx_pin_interrupt_configure+0x36>
}
    62ac:	f06f 0022 	mvn.w	r0, #34	; 0x22
    62b0:	bc70      	pop	{r4, r5, r6}
    62b2:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    62b4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    62b8:	68e5      	ldr	r5, [r4, #12]
    62ba:	d026      	beq.n	630a <gpio_nrfx_pin_interrupt_configure+0x84>
    62bc:	68e6      	ldr	r6, [r4, #12]
    62be:	2501      	movs	r5, #1
    62c0:	408d      	lsls	r5, r1
    62c2:	4335      	orrs	r5, r6
    62c4:	6926      	ldr	r6, [r4, #16]
    62c6:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    62c8:	2501      	movs	r5, #1
    62ca:	408d      	lsls	r5, r1
    62cc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    62d0:	bf14      	ite	ne
    62d2:	432e      	orrne	r6, r5
    62d4:	43ae      	biceq	r6, r5
    62d6:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    62d8:	69a6      	ldr	r6, [r4, #24]
    62da:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    62de:	69e2      	ldr	r2, [r4, #28]
    62e0:	bf0c      	ite	eq
    62e2:	432e      	orreq	r6, r5
    62e4:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    62e6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    62ea:	bf0c      	ite	eq
    62ec:	432a      	orreq	r2, r5
    62ee:	43aa      	bicne	r2, r5
    62f0:	61e2      	str	r2, [r4, #28]
    62f2:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    62f4:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    62f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    62fa:	bf0c      	ite	eq
    62fc:	4315      	orreq	r5, r2
    62fe:	ea22 0505 	bicne.w	r5, r2, r5
    6302:	6165      	str	r5, [r4, #20]
}
    6304:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
    6306:	f7fd b931 	b.w	356c <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    630a:	2601      	movs	r6, #1
    630c:	408e      	lsls	r6, r1
    630e:	ea25 0506 	bic.w	r5, r5, r6
    6312:	e7d7      	b.n	62c4 <gpio_nrfx_pin_interrupt_configure+0x3e>

00006314 <gpio_nrfx_pin_disable_callback>:
{
    6314:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    6316:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    6318:	2301      	movs	r3, #1
    631a:	fa03 f201 	lsl.w	r2, r3, r1
    631e:	6923      	ldr	r3, [r4, #16]
    6320:	ea23 0302 	bic.w	r3, r3, r2
    6324:	6123      	str	r3, [r4, #16]
}
    6326:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    6328:	f7fd b920 	b.w	356c <gpiote_pin_int_cfg>

0000632c <gpio_nrfx_pin_enable_callback>:
{
    632c:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    632e:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    6330:	2301      	movs	r3, #1
    6332:	fa03 f201 	lsl.w	r2, r3, r1
    6336:	6923      	ldr	r3, [r4, #16]
    6338:	4313      	orrs	r3, r2
    633a:	6123      	str	r3, [r4, #16]
}
    633c:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    633e:	f7fd b915 	b.w	356c <gpiote_pin_int_cfg>

00006342 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    6342:	07ca      	lsls	r2, r1, #31
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
    6344:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    6346:	d405      	bmi.n	6354 <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    6348:	f3c1 0242 	ubfx	r2, r1, #1, #3
    634c:	2a01      	cmp	r2, #1
    634e:	d004      	beq.n	635a <i2c_nrfx_twi_configure+0x18>
    6350:	2a02      	cmp	r2, #2
    6352:	d00b      	beq.n	636c <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    6354:	f06f 0015 	mvn.w	r0, #21
}
    6358:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    635a:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    635c:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    6360:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    6364:	68c3      	ldr	r3, [r0, #12]
	return 0;
    6366:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    6368:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
    636a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    6372:	e7f5      	b.n	6360 <i2c_nrfx_twi_configure+0x1e>

00006374 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6374:	2301      	movs	r3, #1
    6376:	fa03 f101 	lsl.w	r1, r3, r1
    637a:	68c3      	ldr	r3, [r0, #12]
    637c:	681b      	ldr	r3, [r3, #0]
    637e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6380:	bf18      	it	ne
    6382:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    6386:	b112      	cbz	r2, 638e <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    6388:	6883      	ldr	r3, [r0, #8]
    638a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    638c:	4718      	bx	r3
    638e:	6883      	ldr	r3, [r0, #8]
    6390:	691b      	ldr	r3, [r3, #16]
    6392:	e7fb      	b.n	638c <gpio_pin_set+0x18>

00006394 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
    6394:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    6396:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
    6398:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    639a:	b325      	cbz	r5, 63e6 <_spi_context_cs_control.isra.0+0x52>
    639c:	68ab      	ldr	r3, [r5, #8]
    639e:	b313      	cbz	r3, 63e6 <_spi_context_cs_control.isra.0+0x52>
    63a0:	6818      	ldr	r0, [r3, #0]
    63a2:	b300      	cbz	r0, 63e6 <_spi_context_cs_control.isra.0+0x52>
		if (on) {
    63a4:	b161      	cbz	r1, 63c0 <_spi_context_cs_control.isra.0+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    63a6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
    63aa:	7919      	ldrb	r1, [r3, #4]
    63ac:	0fd2      	lsrs	r2, r2, #31
    63ae:	f7ff ffe1 	bl	6374 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
    63b2:	6823      	ldr	r3, [r4, #0]
    63b4:	689b      	ldr	r3, [r3, #8]
    63b6:	6898      	ldr	r0, [r3, #8]
}
    63b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    63bc:	f000 baef 	b.w	699e <z_impl_k_busy_wait>
			if (!force_off &&
    63c0:	b912      	cbnz	r2, 63c8 <_spi_context_cs_control.isra.0+0x34>
    63c2:	88aa      	ldrh	r2, [r5, #4]
    63c4:	0492      	lsls	r2, r2, #18
    63c6:	d40e      	bmi.n	63e6 <_spi_context_cs_control.isra.0+0x52>
			k_busy_wait(ctx->config->cs->delay);
    63c8:	6898      	ldr	r0, [r3, #8]
    63ca:	f000 fae8 	bl	699e <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    63ce:	6822      	ldr	r2, [r4, #0]
    63d0:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    63d2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
    63d6:	7919      	ldrb	r1, [r3, #4]
    63d8:	6818      	ldr	r0, [r3, #0]
    63da:	43d2      	mvns	r2, r2
}
    63dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
    63e0:	0fd2      	lsrs	r2, r2, #31
    63e2:	f7ff bfc7 	b.w	6374 <gpio_pin_set>
}
    63e6:	bd38      	pop	{r3, r4, r5, pc}

000063e8 <spi_context_unlock_unconditionally>:
{
    63e8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    63ea:	2201      	movs	r2, #1
    63ec:	2100      	movs	r1, #0
{
    63ee:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    63f0:	f7ff ffd0 	bl	6394 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
    63f4:	68e3      	ldr	r3, [r4, #12]
    63f6:	b923      	cbnz	r3, 6402 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
    63f8:	1d20      	adds	r0, r4, #4
}
    63fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    63fe:	f7fe bdcb 	b.w	4f98 <z_impl_k_sem_give>
    6402:	bd10      	pop	{r4, pc}

00006404 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    6404:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    6406:	6803      	ldr	r3, [r0, #0]
    6408:	428b      	cmp	r3, r1
{
    640a:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    640c:	d106      	bne.n	641c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    640e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    6412:	b934      	cbnz	r4, 6422 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    6414:	f7ff ffe8 	bl	63e8 <spi_context_unlock_unconditionally>
	return 0;
    6418:	4620      	mov	r0, r4
}
    641a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    641c:	f06f 0015 	mvn.w	r0, #21
    6420:	e7fb      	b.n	641a <spi_nrfx_release+0x16>
		return -EBUSY;
    6422:	f06f 000f 	mvn.w	r0, #15
    6426:	e7f8      	b.n	641a <spi_nrfx_release+0x16>

00006428 <event_handler>:
{
    6428:	b410      	push	{r4}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    642a:	7803      	ldrb	r3, [r0, #0]
    642c:	2b00      	cmp	r3, #0
    642e:	d139      	bne.n	64a4 <event_handler+0x7c>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    6430:	68cb      	ldr	r3, [r1, #12]
	if (!ctx->tx_len) {
    6432:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    6434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    6436:	b184      	cbz	r4, 645a <event_handler+0x32>
	if (len > ctx->tx_len) {
    6438:	42a2      	cmp	r2, r4
    643a:	d80e      	bhi.n	645a <event_handler+0x32>
	ctx->tx_len -= len;
    643c:	1aa4      	subs	r4, r4, r2
    643e:	64dc      	str	r4, [r3, #76]	; 0x4c
	if (!ctx->tx_len) {
    6440:	bb24      	cbnz	r4, 648c <event_handler+0x64>
		ctx->tx_count--;
    6442:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    6444:	3c01      	subs	r4, #1
    6446:	63dc      	str	r4, [r3, #60]	; 0x3c
		if (ctx->tx_count) {
    6448:	b1f4      	cbz	r4, 6488 <event_handler+0x60>
			ctx->current_tx++;
    644a:	6b98      	ldr	r0, [r3, #56]	; 0x38
    644c:	f100 0408 	add.w	r4, r0, #8
    6450:	639c      	str	r4, [r3, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    6452:	6884      	ldr	r4, [r0, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    6454:	68c0      	ldr	r0, [r0, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    6456:	649c      	str	r4, [r3, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
    6458:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->rx_len) {
    645a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    645c:	b184      	cbz	r4, 6480 <event_handler+0x58>
	if (len > ctx->rx_len) {
    645e:	42a2      	cmp	r2, r4
    6460:	d80e      	bhi.n	6480 <event_handler+0x58>
	ctx->rx_len -= len;
    6462:	1aa4      	subs	r4, r4, r2
    6464:	655c      	str	r4, [r3, #84]	; 0x54
	if (!ctx->rx_len) {
    6466:	b9bc      	cbnz	r4, 6498 <event_handler+0x70>
		ctx->rx_count--;
    6468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    646a:	3a01      	subs	r2, #1
    646c:	645a      	str	r2, [r3, #68]	; 0x44
		if (ctx->rx_count) {
    646e:	b1ba      	cbz	r2, 64a0 <event_handler+0x78>
			ctx->current_rx++;
    6470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6472:	f102 0008 	add.w	r0, r2, #8
    6476:	6418      	str	r0, [r3, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    6478:	6890      	ldr	r0, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    647a:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    647c:	6518      	str	r0, [r3, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
    647e:	655a      	str	r2, [r3, #84]	; 0x54
}
    6480:	bc10      	pop	{r4}
		transfer_next_chunk(dev);
    6482:	4608      	mov	r0, r1
    6484:	f7fd ba86 	b.w	3994 <transfer_next_chunk>
			ctx->tx_buf = NULL;
    6488:	649c      	str	r4, [r3, #72]	; 0x48
    648a:	e7e6      	b.n	645a <event_handler+0x32>
	} else if (ctx->tx_buf) {
    648c:	6c98      	ldr	r0, [r3, #72]	; 0x48
    648e:	2800      	cmp	r0, #0
    6490:	d0e3      	beq.n	645a <event_handler+0x32>
		ctx->tx_buf += dfs * len;
    6492:	4410      	add	r0, r2
    6494:	6498      	str	r0, [r3, #72]	; 0x48
    6496:	e7e0      	b.n	645a <event_handler+0x32>
	} else if (ctx->rx_buf) {
    6498:	6d18      	ldr	r0, [r3, #80]	; 0x50
    649a:	2800      	cmp	r0, #0
    649c:	d0f0      	beq.n	6480 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
    649e:	4402      	add	r2, r0
    64a0:	651a      	str	r2, [r3, #80]	; 0x50
    64a2:	e7ed      	b.n	6480 <event_handler+0x58>
}
    64a4:	bc10      	pop	{r4}
    64a6:	4770      	bx	lr

000064a8 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    64a8:	68c2      	ldr	r2, [r0, #12]
{
    64aa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    64ac:	e892 0003 	ldmia.w	r2, {r0, r1}
    64b0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    64b4:	2000      	movs	r0, #0
    64b6:	4770      	bx	lr

000064b8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    64b8:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    64ba:	2000      	movs	r0, #0
    64bc:	f7fc fd8e 	bl	2fdc <sys_arch_reboot>

000064c0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    64c0:	4700      	bx	r0

000064c2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    64c2:	f000 ba6c 	b.w	699e <z_impl_k_busy_wait>

000064c6 <transfer_byte>:
{
    64c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    64c8:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    64cc:	698a      	ldr	r2, [r1, #24]
    64ce:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    64d0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    64d4:	6a0b      	ldr	r3, [r1, #32]
    64d6:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    64d8:	bf3e      	ittt	cc
    64da:	694a      	ldrcc	r2, [r1, #20]
    64dc:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    64e0:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    64e2:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
    64e4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
    64e8:	1c53      	adds	r3, r2, #1
    64ea:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    64ec:	3202      	adds	r2, #2
    if (p_cb->abort)
    64ee:	b13c      	cbz	r4, 6500 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    64f0:	690c      	ldr	r4, [r1, #16]
    64f2:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    64f4:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    64f6:	bf38      	it	cc
    64f8:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    64fa:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    64fc:	bf88      	it	hi
    64fe:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    6500:	690d      	ldr	r5, [r1, #16]
    6502:	4295      	cmp	r5, r2
    6504:	d905      	bls.n	6512 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    6506:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    6508:	5c9b      	ldrb	r3, [r3, r2]
    650a:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    650e:	2001      	movs	r0, #1
    6510:	e00a      	b.n	6528 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    6512:	698c      	ldr	r4, [r1, #24]
    6514:	4294      	cmp	r4, r2
    6516:	d901      	bls.n	651c <transfer_byte+0x56>
    6518:	7fcb      	ldrb	r3, [r1, #31]
    651a:	e7f6      	b.n	650a <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    651c:	42ab      	cmp	r3, r5
    651e:	d3f6      	bcc.n	650e <transfer_byte+0x48>
    6520:	42a3      	cmp	r3, r4
    6522:	bf2c      	ite	cs
    6524:	2000      	movcs	r0, #0
    6526:	2001      	movcc	r0, #1
}
    6528:	b003      	add	sp, #12
    652a:	bd30      	pop	{r4, r5, pc}

0000652c <irq_handler>:
{
    652c:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    652e:	2200      	movs	r2, #0
    6530:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6534:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6538:	9301      	str	r3, [sp, #4]
    (void)dummy;
    653a:	9b01      	ldr	r3, [sp, #4]
    if (!transfer_byte(p_spi, p_cb))
    653c:	f7ff ffc3 	bl	64c6 <transfer_byte>
    6540:	b9a0      	cbnz	r0, 656c <irq_handler+0x40>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    6542:	7f8a      	ldrb	r2, [r1, #30]
    6544:	2aff      	cmp	r2, #255	; 0xff
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6546:	bf1e      	ittt	ne
    6548:	2301      	movne	r3, #1
    654a:	4093      	lslne	r3, r2
    p_reg->OUTSET = set_mask;
    654c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    6550:	4608      	mov	r0, r1
    6552:	bf18      	it	ne
    6554:	f8c2 3508 	strne.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    6558:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    655a:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    655c:	774b      	strb	r3, [r1, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    655e:	f850 3b08 	ldr.w	r3, [r0], #8
    6562:	6849      	ldr	r1, [r1, #4]
}
    6564:	b002      	add	sp, #8
    6566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    656a:	4718      	bx	r3
}
    656c:	b002      	add	sp, #8
    656e:	bd10      	pop	{r4, pc}

00006570 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6570:	2300      	movs	r3, #0
    6572:	5043      	str	r3, [r0, r1]
{
    6574:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6576:	5843      	ldr	r3, [r0, r1]
    6578:	9301      	str	r3, [sp, #4]
    (void)dummy;
    657a:	9b01      	ldr	r3, [sp, #4]
}
    657c:	b002      	add	sp, #8
    657e:	4770      	bx	lr

00006580 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6580:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    6582:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6584:	6b48      	ldr	r0, [r1, #52]	; 0x34
    6586:	4298      	cmp	r0, r3
{
    6588:	b510      	push	{r4, lr}
    658a:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    658e:	d205      	bcs.n	659c <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    6590:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    6592:	5c09      	ldrb	r1, [r1, r0]
    6594:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    6598:	4618      	mov	r0, r3
}
    659a:	e004      	b.n	65a6 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    659c:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    65a0:	b110      	cbz	r0, 65a8 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65a2:	61d3      	str	r3, [r2, #28]
            return false;
    65a4:	2000      	movs	r0, #0
}
    65a6:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    65a8:	6a0c      	ldr	r4, [r1, #32]
    65aa:	0664      	lsls	r4, r4, #25
    65ac:	d503      	bpl.n	65b6 <twi_send_byte+0x36>
    65ae:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    65b0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    65b4:	e7f7      	b.n	65a6 <twi_send_byte+0x26>
    65b6:	6153      	str	r3, [r2, #20]
    65b8:	e7ee      	b.n	6598 <twi_send_byte+0x18>

000065ba <twi_transfer>:
{
    65ba:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65bc:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    65c0:	4604      	mov	r4, r0
    65c2:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    65c4:	b126      	cbz	r6, 65d0 <twi_transfer+0x16>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    65c6:	f44f 7182 	mov.w	r1, #260	; 0x104
    65ca:	f7ff ffd1 	bl	6570 <nrf_twi_event_clear>
        stopped = true;
    65ce:	2601      	movs	r6, #1
    if (p_cb->error)
    65d0:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
    65d4:	b322      	cbz	r2, 6620 <twi_transfer+0x66>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    65d6:	f44f 7192 	mov.w	r1, #292	; 0x124
    65da:	4620      	mov	r0, r4
    65dc:	f7ff ffc8 	bl	6570 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    65e0:	f44f 718e 	mov.w	r1, #284	; 0x11c
    65e4:	f7ff ffc4 	bl	6570 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    65e8:	f44f 7184 	mov.w	r1, #264	; 0x108
    65ec:	f7ff ffc0 	bl	6570 <nrf_twi_event_clear>
    if (stopped)
    65f0:	2e00      	cmp	r6, #0
    65f2:	d067      	beq.n	66c4 <twi_transfer+0x10a>
        if (!p_cb->error)
    65f4:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    65f8:	2300      	movs	r3, #0
    65fa:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    65fe:	bb82      	cbnz	r2, 6662 <twi_transfer+0xa8>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    6600:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6602:	6b69      	ldr	r1, [r5, #52]	; 0x34
    6604:	4299      	cmp	r1, r3
        return false;
    6606:	bf1c      	itt	ne
    6608:	4616      	movne	r6, r2
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    660a:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    660c:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    6610:	bf1c      	itt	ne
    6612:	f8c4 2500 	strne.w	r2, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6616:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    661a:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    661e:	e021      	b.n	6664 <twi_transfer+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6620:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6624:	b14b      	cbz	r3, 663a <twi_transfer+0x80>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    6626:	f44f 7192 	mov.w	r1, #292	; 0x124
    662a:	4620      	mov	r0, r4
    662c:	f7ff ffa0 	bl	6570 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6630:	2301      	movs	r3, #1
    6632:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    6634:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    6638:	e7da      	b.n	65f0 <twi_transfer+0x36>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    663a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    663e:	b19b      	cbz	r3, 6668 <twi_transfer+0xae>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    6640:	f44f 718e 	mov.w	r1, #284	; 0x11c
    6644:	4620      	mov	r0, r4
    6646:	f7ff ff93 	bl	6570 <nrf_twi_event_clear>
            ++(p_cb->bytes_transferred);
    664a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    664c:	3301      	adds	r3, #1
    664e:	636b      	str	r3, [r5, #52]	; 0x34
    6650:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6654:	2b00      	cmp	r3, #0
    6656:	d1e6      	bne.n	6626 <twi_transfer+0x6c>
                if (!twi_send_byte(p_twi, p_cb))
    6658:	4629      	mov	r1, r5
    665a:	f7ff ff91 	bl	6580 <twi_send_byte>
    665e:	2800      	cmp	r0, #0
    6660:	d1c6      	bne.n	65f0 <twi_transfer+0x36>
                    return false;
    6662:	2200      	movs	r2, #0
}
    6664:	4610      	mov	r0, r2
    6666:	bd70      	pop	{r4, r5, r6, pc}
    6668:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    666c:	2b00      	cmp	r3, #0
    666e:	d0bf      	beq.n	65f0 <twi_transfer+0x36>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    6670:	f44f 7184 	mov.w	r1, #264	; 0x108
    6674:	4620      	mov	r0, r4
    6676:	f7ff ff7b 	bl	6570 <nrf_twi_event_clear>
    667a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    667e:	2b00      	cmp	r3, #0
    6680:	d1d1      	bne.n	6626 <twi_transfer+0x6c>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6682:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6684:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    6686:	428b      	cmp	r3, r1
    6688:	d2b2      	bcs.n	65f0 <twi_transfer+0x36>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    668a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    668c:	f8d4 0518 	ldr.w	r0, [r4, #1304]	; 0x518
    6690:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
    6692:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6694:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    6696:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6698:	1e48      	subs	r0, r1, #1
    669a:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
    669c:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    669e:	d108      	bne.n	66b2 <twi_transfer+0xf8>
    66a0:	6a28      	ldr	r0, [r5, #32]
    66a2:	0640      	lsls	r0, r0, #25
    66a4:	d410      	bmi.n	66c8 <twi_transfer+0x10e>
    p_reg->SHORTS = mask;
    66a6:	2302      	movs	r3, #2
    66a8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66ac:	2301      	movs	r3, #1
    66ae:	6223      	str	r3, [r4, #32]
    66b0:	e79e      	b.n	65f0 <twi_transfer+0x36>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    66b2:	428b      	cmp	r3, r1
    66b4:	d1fa      	bne.n	66ac <twi_transfer+0xf2>
    66b6:	6a2b      	ldr	r3, [r5, #32]
    66b8:	065b      	lsls	r3, r3, #25
    66ba:	d599      	bpl.n	65f0 <twi_transfer+0x36>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    66bc:	2302      	movs	r3, #2
    66be:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    66c2:	e7cf      	b.n	6664 <twi_transfer+0xaa>
    return true;
    66c4:	2201      	movs	r2, #1
    66c6:	e7cd      	b.n	6664 <twi_transfer+0xaa>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    66c8:	428b      	cmp	r3, r1
    66ca:	d1ef      	bne.n	66ac <twi_transfer+0xf2>
    66cc:	e7f6      	b.n	66bc <twi_transfer+0x102>

000066ce <twi_irq_handler.part.0>:
static void twi_irq_handler(NRF_TWI_Type * p_twi, twi_control_block_t * p_cb)
    66ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!p_cb->error &&
    66d0:	f891 702f 	ldrb.w	r7, [r1, #47]	; 0x2f
    66d4:	f8d1 c020 	ldr.w	ip, [r1, #32]
static void twi_irq_handler(NRF_TWI_Type * p_twi, twi_control_block_t * p_cb)
    66d8:	b087      	sub	sp, #28
    66da:	4686      	mov	lr, r0
    66dc:	460c      	mov	r4, r1
    if (!p_cb->error &&
    66de:	b9d7      	cbnz	r7, 6716 <twi_irq_handler.part.0+0x48>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    66e0:	7b0d      	ldrb	r5, [r1, #12]
    if (!p_cb->error &&
    66e2:	1eab      	subs	r3, r5, #2
    66e4:	2b01      	cmp	r3, #1
    66e6:	d816      	bhi.n	6716 <twi_irq_handler.part.0+0x48>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    66e8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    66ea:	698b      	ldr	r3, [r1, #24]
    66ec:	429a      	cmp	r2, r3
    66ee:	d112      	bne.n	6716 <twi_irq_handler.part.0+0x48>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    66f0:	69cb      	ldr	r3, [r1, #28]
    66f2:	624b      	str	r3, [r1, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    66f4:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    66f8:	694b      	ldr	r3, [r1, #20]
    66fa:	628b      	str	r3, [r1, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    66fc:	2d03      	cmp	r5, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    66fe:	f881 c02c 	strb.w	ip, [r1, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    6702:	f881 702d 	strb.w	r7, [r1, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    6706:	d103      	bne.n	6710 <twi_irq_handler.part.0+0x42>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    6708:	f7fd febc 	bl	4484 <twi_tx_start_transfer>
}
    670c:	b007      	add	sp, #28
    670e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    6710:	f7fd fe44 	bl	439c <twi_rx_start_transfer>
    6714:	e7fa      	b.n	670c <twi_irq_handler.part.0+0x3e>
        event.xfer_desc = p_cb->xfer_desc;
    6716:	f104 060c 	add.w	r6, r4, #12
    671a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    671c:	ad01      	add	r5, sp, #4
    671e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6720:	6833      	ldr	r3, [r6, #0]
    6722:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    6724:	b1f7      	cbz	r7, 6764 <twi_irq_handler.part.0+0x96>
    uint32_t error_source = p_reg->ERRORSRC;
    6726:	f8de 34c4 	ldr.w	r3, [lr, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    672a:	f8ce 34c4 	str.w	r3, [lr, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    672e:	0799      	lsls	r1, r3, #30
    6730:	d50f      	bpl.n	6752 <twi_irq_handler.part.0+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    6732:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    6734:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    6738:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    673a:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
    673e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    6742:	d001      	beq.n	6748 <twi_irq_handler.part.0+0x7a>
    6744:	2f00      	cmp	r7, #0
    6746:	d0e1      	beq.n	670c <twi_irq_handler.part.0+0x3e>
            p_cb->handler(&event, p_cb->p_context);
    6748:	e9d4 3100 	ldrd	r3, r1, [r4]
    674c:	4668      	mov	r0, sp
    674e:	4798      	blx	r3
    6750:	e7dc      	b.n	670c <twi_irq_handler.part.0+0x3e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    6752:	075a      	lsls	r2, r3, #29
    6754:	d501      	bpl.n	675a <twi_irq_handler.part.0+0x8c>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    6756:	2302      	movs	r3, #2
    6758:	e7ec      	b.n	6734 <twi_irq_handler.part.0+0x66>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    675a:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    675c:	bf4c      	ite	mi
    675e:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    6760:	2304      	movpl	r3, #4
    6762:	e7e7      	b.n	6734 <twi_irq_handler.part.0+0x66>
            event.type = NRFX_TWI_EVT_DONE;
    6764:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    6768:	e7e6      	b.n	6738 <twi_irq_handler.part.0+0x6a>

0000676a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    676a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    676c:	4605      	mov	r5, r0
    676e:	460e      	mov	r6, r1
	__asm__ volatile(
    6770:	f04f 0320 	mov.w	r3, #32
    6774:	f3ef 8711 	mrs	r7, BASEPRI
    6778:	f383 8811 	msr	BASEPRI, r3
    677c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    6780:	f7fe fc04 	bl	4f8c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    6784:	4631      	mov	r1, r6
    6786:	4604      	mov	r4, r0
    6788:	4628      	mov	r0, r5
    678a:	f7ff fe95 	bl	64b8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    678e:	f387 8811 	msr	BASEPRI, r7
    6792:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6796:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    6798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    679c:	f7fb be22 	b.w	23e4 <z_impl_k_thread_abort>

000067a0 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    67a0:	f7ff bc00 	b.w	5fa4 <z_clock_idle_exit>

000067a4 <z_find_first_thread_to_unpend>:
{
    67a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    67a6:	f04f 0320 	mov.w	r3, #32
    67aa:	f3ef 8411 	mrs	r4, BASEPRI
    67ae:	f383 8811 	msr	BASEPRI, r3
    67b2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    67b6:	f000 f83f 	bl	6838 <z_priq_dumb_best>
	__asm__ volatile(
    67ba:	f384 8811 	msr	BASEPRI, r4
    67be:	f3bf 8f6f 	isb	sy
}
    67c2:	bd10      	pop	{r4, pc}

000067c4 <z_unpend_thread_no_timeout>:
{
    67c4:	b538      	push	{r3, r4, r5, lr}
    67c6:	4604      	mov	r4, r0
	__asm__ volatile(
    67c8:	f04f 0320 	mov.w	r3, #32
    67cc:	f3ef 8511 	mrs	r5, BASEPRI
    67d0:	f383 8811 	msr	BASEPRI, r3
    67d4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    67d8:	4601      	mov	r1, r0
    67da:	6880      	ldr	r0, [r0, #8]
    67dc:	f7fe f926 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    67e0:	7b63      	ldrb	r3, [r4, #13]
    67e2:	f023 0302 	bic.w	r3, r3, #2
    67e6:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    67e8:	2300      	movs	r3, #0
    67ea:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    67ec:	f385 8811 	msr	BASEPRI, r5
    67f0:	f3bf 8f6f 	isb	sy
}
    67f4:	bd38      	pop	{r3, r4, r5, pc}

000067f6 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    67f6:	b921      	cbnz	r1, 6802 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    67f8:	f3ef 8005 	mrs	r0, IPSR
    67fc:	b908      	cbnz	r0, 6802 <z_reschedule+0xc>
    67fe:	f7fb bbe7 	b.w	1fd0 <arch_swap>
    6802:	f381 8811 	msr	BASEPRI, r1
    6806:	f3bf 8f6f 	isb	sy
}
    680a:	4770      	bx	lr

0000680c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    680c:	4603      	mov	r3, r0
    680e:	b920      	cbnz	r0, 681a <z_reschedule_irqlock+0xe>
    6810:	f3ef 8205 	mrs	r2, IPSR
    6814:	b90a      	cbnz	r2, 681a <z_reschedule_irqlock+0xe>
    6816:	f7fb bbdb 	b.w	1fd0 <arch_swap>
    681a:	f383 8811 	msr	BASEPRI, r3
    681e:	f3bf 8f6f 	isb	sy
}
    6822:	4770      	bx	lr

00006824 <z_reschedule_unlocked>:
	__asm__ volatile(
    6824:	f04f 0320 	mov.w	r3, #32
    6828:	f3ef 8011 	mrs	r0, BASEPRI
    682c:	f383 8811 	msr	BASEPRI, r3
    6830:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6834:	f7ff bfea 	b.w	680c <z_reschedule_irqlock>

00006838 <z_priq_dumb_best>:
{
    6838:	4603      	mov	r3, r0
	return list->head == list;
    683a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    683c:	4283      	cmp	r3, r0
    683e:	d003      	beq.n	6848 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    6840:	2800      	cmp	r0, #0
    6842:	bf38      	it	cc
    6844:	2000      	movcc	r0, #0
    6846:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6848:	2000      	movs	r0, #0
}
    684a:	4770      	bx	lr

0000684c <z_ready_thread>:
{
    684c:	b510      	push	{r4, lr}
    684e:	f04f 0320 	mov.w	r3, #32
    6852:	f3ef 8411 	mrs	r4, BASEPRI
    6856:	f383 8811 	msr	BASEPRI, r3
    685a:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    685e:	f7fe f93b 	bl	4ad8 <ready_thread>
	__asm__ volatile(
    6862:	f384 8811 	msr	BASEPRI, r4
    6866:	f3bf 8f6f 	isb	sy
}
    686a:	bd10      	pop	{r4, pc}

0000686c <z_thread_timeout>:
{
    686c:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    686e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    6872:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6874:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    6878:	b1c3      	cbz	r3, 68ac <z_thread_timeout+0x40>
	__asm__ volatile(
    687a:	f04f 0320 	mov.w	r3, #32
    687e:	f3ef 8511 	mrs	r5, BASEPRI
    6882:	f383 8811 	msr	BASEPRI, r3
    6886:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    688a:	f850 0c10 	ldr.w	r0, [r0, #-16]
    688e:	f7fe f8cd 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6892:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6896:	f023 0302 	bic.w	r3, r3, #2
    689a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    689e:	2300      	movs	r3, #0
    68a0:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    68a4:	f385 8811 	msr	BASEPRI, r5
    68a8:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    68ac:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    68b0:	f023 0314 	bic.w	r3, r3, #20
    68b4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    68b8:	4608      	mov	r0, r1
}
    68ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    68be:	f7ff bfc5 	b.w	684c <z_ready_thread>

000068c2 <z_remove_thread_from_ready_q>:
{
    68c2:	b510      	push	{r4, lr}
	__asm__ volatile(
    68c4:	f04f 0320 	mov.w	r3, #32
    68c8:	f3ef 8411 	mrs	r4, BASEPRI
    68cc:	f383 8811 	msr	BASEPRI, r3
    68d0:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    68d4:	f7fe fa5e 	bl	4d94 <unready_thread>
	__asm__ volatile(
    68d8:	f384 8811 	msr	BASEPRI, r4
    68dc:	f3bf 8f6f 	isb	sy
}
    68e0:	bd10      	pop	{r4, pc}

000068e2 <add_to_waitq_locked>:
{
    68e2:	b538      	push	{r3, r4, r5, lr}
    68e4:	4604      	mov	r4, r0
    68e6:	460d      	mov	r5, r1
	unready_thread(thread);
    68e8:	f7fe fa54 	bl	4d94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    68ec:	7b63      	ldrb	r3, [r4, #13]
    68ee:	f043 0302 	orr.w	r3, r3, #2
    68f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    68f4:	b1c5      	cbz	r5, 6928 <add_to_waitq_locked+0x46>
	return list->head == list;
    68f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    68f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68fa:	429d      	cmp	r5, r3
    68fc:	bf08      	it	eq
    68fe:	2300      	moveq	r3, #0
    6900:	2b00      	cmp	r3, #0
    6902:	bf38      	it	cc
    6904:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6906:	b183      	cbz	r3, 692a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    6908:	f994 100e 	ldrsb.w	r1, [r4, #14]
    690c:	f993 200e 	ldrsb.w	r2, [r3, #14]
    6910:	4291      	cmp	r1, r2
    6912:	db04      	blt.n	691e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    6914:	686a      	ldr	r2, [r5, #4]
    6916:	429a      	cmp	r2, r3
    6918:	d007      	beq.n	692a <add_to_waitq_locked+0x48>
    691a:	681b      	ldr	r3, [r3, #0]
    691c:	e7f3      	b.n	6906 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    691e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6920:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    6924:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6926:	605c      	str	r4, [r3, #4]
}
    6928:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    692a:	686b      	ldr	r3, [r5, #4]
    692c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    692e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    6930:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    6932:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6934:	606c      	str	r4, [r5, #4]
    6936:	e7f7      	b.n	6928 <add_to_waitq_locked+0x46>

00006938 <z_unpend_first_thread>:
{
    6938:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    693a:	f04f 0320 	mov.w	r3, #32
    693e:	f3ef 8211 	mrs	r2, BASEPRI
    6942:	f383 8811 	msr	BASEPRI, r3
    6946:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    694a:	f7ff ff75 	bl	6838 <z_priq_dumb_best>
    694e:	4604      	mov	r4, r0
	__asm__ volatile(
    6950:	f382 8811 	msr	BASEPRI, r2
    6954:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    6958:	b1c8      	cbz	r0, 698e <z_unpend_first_thread+0x56>
	__asm__ volatile(
    695a:	f04f 0320 	mov.w	r3, #32
    695e:	f3ef 8511 	mrs	r5, BASEPRI
    6962:	f383 8811 	msr	BASEPRI, r3
    6966:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    696a:	4601      	mov	r1, r0
    696c:	6880      	ldr	r0, [r0, #8]
    696e:	f7fe f85d 	bl	4a2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6972:	7b63      	ldrb	r3, [r4, #13]
    6974:	f023 0302 	bic.w	r3, r3, #2
    6978:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    697a:	2300      	movs	r3, #0
    697c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    697e:	f385 8811 	msr	BASEPRI, r5
    6982:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    6986:	f104 0018 	add.w	r0, r4, #24
    698a:	f000 f80a 	bl	69a2 <z_abort_timeout>
}
    698e:	4620      	mov	r0, r4
    6990:	bd38      	pop	{r3, r4, r5, pc}

00006992 <k_is_in_isr>:
    6992:	f3ef 8005 	mrs	r0, IPSR
}
    6996:	3800      	subs	r0, #0
    6998:	bf18      	it	ne
    699a:	2001      	movne	r0, #1
    699c:	4770      	bx	lr

0000699e <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    699e:	f7fc bb33 	b.w	3008 <arch_busy_wait>

000069a2 <z_abort_timeout>:
{
    69a2:	b510      	push	{r4, lr}
	__asm__ volatile(
    69a4:	f04f 0220 	mov.w	r2, #32
    69a8:	f3ef 8411 	mrs	r4, BASEPRI
    69ac:	f382 8811 	msr	BASEPRI, r2
    69b0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    69b4:	6803      	ldr	r3, [r0, #0]
    69b6:	b13b      	cbz	r3, 69c8 <z_abort_timeout+0x26>
			remove_timeout(to);
    69b8:	f7fe fbd0 	bl	515c <remove_timeout>
			ret = 0;
    69bc:	2000      	movs	r0, #0
	__asm__ volatile(
    69be:	f384 8811 	msr	BASEPRI, r4
    69c2:	f3bf 8f6f 	isb	sy
}
    69c6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    69c8:	f06f 0015 	mvn.w	r0, #21
    69cc:	e7f7      	b.n	69be <z_abort_timeout+0x1c>

000069ce <z_get_next_timeout_expiry>:
{
    69ce:	b510      	push	{r4, lr}
	__asm__ volatile(
    69d0:	f04f 0320 	mov.w	r3, #32
    69d4:	f3ef 8411 	mrs	r4, BASEPRI
    69d8:	f383 8811 	msr	BASEPRI, r3
    69dc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    69e0:	f7fe fbd0 	bl	5184 <next_timeout>
	__asm__ volatile(
    69e4:	f384 8811 	msr	BASEPRI, r4
    69e8:	f3bf 8f6f 	isb	sy
}
    69ec:	bd10      	pop	{r4, pc}

000069ee <z_set_timeout_expiry>:
{
    69ee:	b570      	push	{r4, r5, r6, lr}
    69f0:	4604      	mov	r4, r0
    69f2:	460d      	mov	r5, r1
	__asm__ volatile(
    69f4:	f04f 0320 	mov.w	r3, #32
    69f8:	f3ef 8611 	mrs	r6, BASEPRI
    69fc:	f383 8811 	msr	BASEPRI, r3
    6a00:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    6a04:	f7fe fbbe 	bl	5184 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6a08:	2801      	cmp	r0, #1
    6a0a:	dd05      	ble.n	6a18 <z_set_timeout_expiry+0x2a>
    6a0c:	42a0      	cmp	r0, r4
    6a0e:	dd03      	ble.n	6a18 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    6a10:	4629      	mov	r1, r5
    6a12:	4620      	mov	r0, r4
    6a14:	f7fb fa34 	bl	1e80 <z_clock_set_timeout>
	__asm__ volatile(
    6a18:	f386 8811 	msr	BASEPRI, r6
    6a1c:	f3bf 8f6f 	isb	sy
}
    6a20:	bd70      	pop	{r4, r5, r6, pc}

00006a22 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    6a22:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    6a24:	f7fe fc98 	bl	5358 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    6a28:	bd08      	pop	{r3, pc}

00006a2a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6a2a:	b510      	push	{r4, lr}
    6a2c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    6a2e:	f7ff ffb8 	bl	69a2 <z_abort_timeout>

	if (inactive) {
    6a32:	b9d8      	cbnz	r0, 6a6c <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    6a34:	69e3      	ldr	r3, [r4, #28]
    6a36:	b10b      	cbz	r3, 6a3c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    6a38:	4620      	mov	r0, r4
    6a3a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    6a3c:	f104 0010 	add.w	r0, r4, #16
    6a40:	2100      	movs	r1, #0
    6a42:	f7ff feaf 	bl	67a4 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    6a46:	4604      	mov	r4, r0
    6a48:	b180      	cbz	r0, 6a6c <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    6a4a:	f7ff febb 	bl	67c4 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    6a4e:	4620      	mov	r0, r4
    6a50:	f7ff fefc 	bl	684c <z_ready_thread>
	__asm__ volatile(
    6a54:	f04f 0320 	mov.w	r3, #32
    6a58:	f3ef 8011 	mrs	r0, BASEPRI
    6a5c:	f383 8811 	msr	BASEPRI, r3
    6a60:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    6a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    6a68:	f7ff bed0 	b.w	680c <z_reschedule_irqlock>
    6a6c:	bd10      	pop	{r4, pc}

00006a6e <signal_poll_event>:
{
    6a6e:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
    6a70:	6884      	ldr	r4, [r0, #8]
{
    6a72:	4605      	mov	r5, r0
    6a74:	460e      	mov	r6, r1
	if (poller) {
    6a76:	b19c      	cbz	r4, 6aa0 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
    6a78:	68a3      	ldr	r3, [r4, #8]
    6a7a:	b95b      	cbnz	r3, 6a94 <signal_poll_event+0x26>
		poller->is_polling = false;
    6a7c:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
    6a7e:	4618      	mov	r0, r3
	event->poller = NULL;
    6a80:	2300      	movs	r3, #0
    6a82:	60ab      	str	r3, [r5, #8]
	event->state |= state;
    6a84:	68eb      	ldr	r3, [r5, #12]
    6a86:	f3c3 3104 	ubfx	r1, r3, #12, #5
    6a8a:	430e      	orrs	r6, r1
    6a8c:	f366 3310 	bfi	r3, r6, #12, #5
    6a90:	60eb      	str	r3, [r5, #12]
	return retcode;
    6a92:	e004      	b.n	6a9e <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
    6a94:	4798      	blx	r3
		poller->is_polling = false;
    6a96:	2300      	movs	r3, #0
		if (retcode < 0) {
    6a98:	2800      	cmp	r0, #0
		poller->is_polling = false;
    6a9a:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
    6a9c:	daf0      	bge.n	6a80 <signal_poll_event+0x12>
}
    6a9e:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
    6aa0:	4620      	mov	r0, r4
    6aa2:	e7ed      	b.n	6a80 <signal_poll_event+0x12>

00006aa4 <z_handle_obj_poll_events>:
{
    6aa4:	4603      	mov	r3, r0
	return list->head == list;
    6aa6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    6aa8:	4283      	cmp	r3, r0
    6aaa:	d008      	beq.n	6abe <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    6aac:	e9d0 3200 	ldrd	r3, r2, [r0]
    6ab0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    6ab2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6ab4:	2300      	movs	r3, #0
	node->prev = NULL;
    6ab6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    6aba:	f7ff bfd8 	b.w	6a6e <signal_poll_event>
}
    6abe:	4770      	bx	lr

00006ac0 <k_heap_init>:
{
    6ac0:	b410      	push	{r4}
    6ac2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    6ac6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    6aca:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    6acc:	f7ff b9d0 	b.w	5e70 <sys_heap_init>

00006ad0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    6ad0:	4770      	bx	lr
